

# ===== run_2025_10_19_04_14_08_043050-pid_19/torchinductor/model__1_inference_1.1/fx_graph_readable.py =====
class <lambda>(torch.nn.Module):
    def forward(self, arg0_1: "i64[2, 256]", arg1_1: "i64[2, 256]", arg2_1: "i64[2, 256]", arg3_1: "i64[2, 256, 4]", arg4_1: "f32[30522, 768]", arg5_1: "f32[512, 768]", arg6_1: "f32[1024, 768]", arg7_1: "f32[1024, 768]", arg8_1: "f32[1024, 768]", arg9_1: "f32[1024, 768]", arg10_1: "f32[2, 768]", arg11_1: "f32[768]", arg12_1: "f32[768]", arg13_1: "f32[768, 768]", arg14_1: "f32[768]", arg15_1: "f32[768, 768]", arg16_1: "f32[768]", arg17_1: "f32[768, 768]", arg18_1: "f32[768]", arg19_1: "f32[768, 768]", arg20_1: "f32[768]", arg21_1: "f32[768]", arg22_1: "f32[768]", arg23_1: "f32[3072, 768]", arg24_1: "f32[3072]", arg25_1: "f32[768, 3072]", arg26_1: "f32[768]", arg27_1: "f32[768]", arg28_1: "f32[768]", arg29_1: "f32[768, 768]", arg30_1: "f32[768]", arg31_1: "f32[768, 768]", arg32_1: "f32[768]", arg33_1: "f32[768, 768]", arg34_1: "f32[768]", arg35_1: "f32[768, 768]", arg36_1: "f32[768]", arg37_1: "f32[768]", arg38_1: "f32[768]", arg39_1: "f32[3072, 768]", arg40_1: "f32[3072]", arg41_1: "f32[768, 3072]", arg42_1: "f32[768]", arg43_1: "f32[768]", arg44_1: "f32[768]", arg45_1: "f32[768, 768]", arg46_1: "f32[768]", arg47_1: "f32[768, 768]", arg48_1: "f32[768]", arg49_1: "f32[768, 768]", arg50_1: "f32[768]", arg51_1: "f32[768, 768]", arg52_1: "f32[768]", arg53_1: "f32[768]", arg54_1: "f32[768]", arg55_1: "f32[3072, 768]", arg56_1: "f32[3072]", arg57_1: "f32[768, 3072]", arg58_1: "f32[768]", arg59_1: "f32[768]", arg60_1: "f32[768]", arg61_1: "f32[768, 768]", arg62_1: "f32[768]", arg63_1: "f32[768, 768]", arg64_1: "f32[768]", arg65_1: "f32[768, 768]", arg66_1: "f32[768]", arg67_1: "f32[768, 768]", arg68_1: "f32[768]", arg69_1: "f32[768]", arg70_1: "f32[768]", arg71_1: "f32[3072, 768]", arg72_1: "f32[3072]", arg73_1: "f32[768, 3072]", arg74_1: "f32[768]", arg75_1: "f32[768]", arg76_1: "f32[768]", arg77_1: "f32[768, 768]", arg78_1: "f32[768]", arg79_1: "f32[768, 768]", arg80_1: "f32[768]", arg81_1: "f32[768, 768]", arg82_1: "f32[768]", arg83_1: "f32[768, 768]", arg84_1: "f32[768]", arg85_1: "f32[768]", arg86_1: "f32[768]", arg87_1: "f32[3072, 768]", arg88_1: "f32[3072]", arg89_1: "f32[768, 3072]", arg90_1: "f32[768]", arg91_1: "f32[768]", arg92_1: "f32[768]", arg93_1: "f32[768, 768]", arg94_1: "f32[768]", arg95_1: "f32[768, 768]", arg96_1: "f32[768]", arg97_1: "f32[768, 768]", arg98_1: "f32[768]", arg99_1: "f32[768, 768]", arg100_1: "f32[768]", arg101_1: "f32[768]", arg102_1: "f32[768]", arg103_1: "f32[3072, 768]", arg104_1: "f32[3072]", arg105_1: "f32[768, 3072]", arg106_1: "f32[768]", arg107_1: "f32[768]", arg108_1: "f32[768]", arg109_1: "f32[768, 768]", arg110_1: "f32[768]", arg111_1: "f32[768, 768]", arg112_1: "f32[768]", arg113_1: "f32[768, 768]", arg114_1: "f32[768]", arg115_1: "f32[768, 768]", arg116_1: "f32[768]", arg117_1: "f32[768]", arg118_1: "f32[768]", arg119_1: "f32[3072, 768]", arg120_1: "f32[3072]", arg121_1: "f32[768, 3072]", arg122_1: "f32[768]", arg123_1: "f32[768]", arg124_1: "f32[768]", arg125_1: "f32[768, 768]", arg126_1: "f32[768]", arg127_1: "f32[768, 768]", arg128_1: "f32[768]", arg129_1: "f32[768, 768]", arg130_1: "f32[768]", arg131_1: "f32[768, 768]", arg132_1: "f32[768]", arg133_1: "f32[768]", arg134_1: "f32[768]", arg135_1: "f32[3072, 768]", arg136_1: "f32[3072]", arg137_1: "f32[768, 3072]", arg138_1: "f32[768]", arg139_1: "f32[768]", arg140_1: "f32[768]", arg141_1: "f32[768, 768]", arg142_1: "f32[768]", arg143_1: "f32[768, 768]", arg144_1: "f32[768]", arg145_1: "f32[768, 768]", arg146_1: "f32[768]", arg147_1: "f32[768, 768]", arg148_1: "f32[768]", arg149_1: "f32[768]", arg150_1: "f32[768]", arg151_1: "f32[3072, 768]", arg152_1: "f32[3072]", arg153_1: "f32[768, 3072]", arg154_1: "f32[768]", arg155_1: "f32[768]", arg156_1: "f32[768]", arg157_1: "f32[768, 768]", arg158_1: "f32[768]", arg159_1: "f32[768, 768]", arg160_1: "f32[768]", arg161_1: "f32[768, 768]", arg162_1: "f32[768]", arg163_1: "f32[768, 768]", arg164_1: "f32[768]", arg165_1: "f32[768]", arg166_1: "f32[768]", arg167_1: "f32[3072, 768]", arg168_1: "f32[3072]", arg169_1: "f32[768, 3072]", arg170_1: "f32[768]", arg171_1: "f32[768]", arg172_1: "f32[768]", arg173_1: "f32[768, 768]", arg174_1: "f32[768]", arg175_1: "f32[768, 768]", arg176_1: "f32[768]", arg177_1: "f32[768, 768]", arg178_1: "f32[768]", arg179_1: "f32[768, 768]", arg180_1: "f32[768]", arg181_1: "f32[768]", arg182_1: "f32[768]", arg183_1: "f32[3072, 768]", arg184_1: "f32[3072]", arg185_1: "f32[768, 3072]", arg186_1: "f32[768]", arg187_1: "f32[768]", arg188_1: "f32[768]", arg189_1: "f32[768, 768]", arg190_1: "f32[768]", arg191_1: "f32[768, 768]", arg192_1: "f32[768]", arg193_1: "f32[768, 768]", arg194_1: "f32[768]", arg195_1: "f32[768, 768]", arg196_1: "f32[768]", arg197_1: "f32[768]", arg198_1: "f32[768]", arg199_1: "f32[3072, 768]", arg200_1: "f32[3072]", arg201_1: "f32[768, 3072]", arg202_1: "f32[768]", arg203_1: "f32[768]", arg204_1: "f32[768]", arg205_1: "f32[768, 768]", arg206_1: "f32[768]", arg207_1: "i64[1, 512]"):
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:591 in forward, code: extended_attention_mask = attention_mask.unsqueeze(1).unsqueeze(2)
        unsqueeze: "i64[2, 1, 256]" = torch.ops.aten.unsqueeze.default(arg1_1, 1);  arg1_1 = None
        unsqueeze_1: "i64[2, 1, 1, 256]" = torch.ops.aten.unsqueeze.default(unsqueeze, 2);  unsqueeze = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:593 in forward, code: extended_attention_mask = extended_attention_mask.to(dtype=self.dtype)
        convert_element_type: "f32[2, 1, 1, 256]" = torch.ops.prims.convert_element_type.default(unsqueeze_1, torch.float32);  unsqueeze_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:594 in forward, code: extended_attention_mask = (1.0 - extended_attention_mask) * torch.finfo(self.dtype).min
        sub: "f32[2, 1, 1, 256]" = torch.ops.aten.sub.Tensor(1.0, convert_element_type);  convert_element_type = None
        mul: "f32[2, 1, 1, 256]" = torch.ops.aten.mul.Tensor(sub, -3.4028234663852886e+38);  sub = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:83 in forward, code: position_ids = self.position_ids[:, :seq_length]
        slice_2: "i64[1, 256]" = torch.ops.aten.slice.Tensor(arg207_1, 1, 0, 256);  arg207_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:89 in forward, code: inputs_embeds = self.word_embeddings(input_ids)
        embedding: "f32[2, 256, 768]" = torch.ops.aten.embedding.default(arg4_1, arg0_1, 0);  arg4_1 = arg0_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:92 in forward, code: position_embeddings = self.position_embeddings(position_ids)
        embedding_1: "f32[1, 256, 768]" = torch.ops.aten.embedding.default(arg5_1, slice_2);  arg5_1 = slice_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:94 in forward, code: left_position_embeddings = self.x_position_embeddings(bbox[:, :, 0])
        select: "i64[2, 256]" = torch.ops.aten.select.int(arg3_1, 2, 0)
        embedding_2: "f32[2, 256, 768]" = torch.ops.aten.embedding.default(arg6_1, select);  select = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:95 in forward, code: upper_position_embeddings = self.y_position_embeddings(bbox[:, :, 1])
        select_1: "i64[2, 256]" = torch.ops.aten.select.int(arg3_1, 2, 1)
        embedding_3: "f32[2, 256, 768]" = torch.ops.aten.embedding.default(arg7_1, select_1);  select_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:96 in forward, code: right_position_embeddings = self.x_position_embeddings(bbox[:, :, 2])
        select_2: "i64[2, 256]" = torch.ops.aten.select.int(arg3_1, 2, 2)
        embedding_4: "f32[2, 256, 768]" = torch.ops.aten.embedding.default(arg6_1, select_2);  arg6_1 = select_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:97 in forward, code: lower_position_embeddings = self.y_position_embeddings(bbox[:, :, 3])
        select_3: "i64[2, 256]" = torch.ops.aten.select.int(arg3_1, 2, 3)
        embedding_5: "f32[2, 256, 768]" = torch.ops.aten.embedding.default(arg7_1, select_3);  arg7_1 = select_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:101 in forward, code: h_position_embeddings = self.h_position_embeddings(bbox[:, :, 3] - bbox[:, :, 1])
        select_4: "i64[2, 256]" = torch.ops.aten.select.int(arg3_1, 2, 3)
        select_5: "i64[2, 256]" = torch.ops.aten.select.int(arg3_1, 2, 1)
        sub_1: "i64[2, 256]" = torch.ops.aten.sub.Tensor(select_4, select_5);  select_4 = select_5 = None
        embedding_6: "f32[2, 256, 768]" = torch.ops.aten.embedding.default(arg8_1, sub_1);  arg8_1 = sub_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:102 in forward, code: w_position_embeddings = self.w_position_embeddings(bbox[:, :, 2] - bbox[:, :, 0])
        select_6: "i64[2, 256]" = torch.ops.aten.select.int(arg3_1, 2, 2)
        select_7: "i64[2, 256]" = torch.ops.aten.select.int(arg3_1, 2, 0);  arg3_1 = None
        sub_2: "i64[2, 256]" = torch.ops.aten.sub.Tensor(select_6, select_7);  select_6 = select_7 = None
        embedding_7: "f32[2, 256, 768]" = torch.ops.aten.embedding.default(arg9_1, sub_2);  arg9_1 = sub_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:103 in forward, code: token_type_embeddings = self.token_type_embeddings(token_type_ids)
        embedding_8: "f32[2, 256, 768]" = torch.ops.aten.embedding.default(arg10_1, arg2_1);  arg10_1 = arg2_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:106 in forward, code: words_embeddings
        add: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(embedding, embedding_1);  embedding = embedding_1 = None
        add_1: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(add, embedding_2);  add = embedding_2 = None
        add_2: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(add_1, embedding_3);  add_1 = embedding_3 = None
        add_3: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(add_2, embedding_4);  add_2 = embedding_4 = None
        add_4: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(add_3, embedding_5);  add_3 = embedding_5 = None
        add_5: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(add_4, embedding_6);  add_4 = embedding_6 = None
        add_6: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(add_5, embedding_7);  add_5 = embedding_7 = None
        add_7: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(add_6, embedding_8);  add_6 = embedding_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:116 in forward, code: embeddings = self.LayerNorm(embeddings)
        var_mean = torch.ops.aten.var_mean.correction(add_7, [2], correction = 0, keepdim = True)
        getitem: "f32[2, 256, 1]" = var_mean[0]
        getitem_1: "f32[2, 256, 1]" = var_mean[1];  var_mean = None
        add_8: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem, 1e-12);  getitem = None
        rsqrt: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_8);  add_8 = None
        sub_3: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_7, getitem_1);  add_7 = getitem_1 = None
        mul_1: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_3, rsqrt);  sub_3 = rsqrt = None
        mul_2: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_1, arg11_1);  mul_1 = arg11_1 = None
        add_9: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_2, arg12_1);  mul_2 = arg12_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view: "f32[512, 768]" = torch.ops.aten.view.default(add_9, [512, 768])
        permute: "f32[768, 768]" = torch.ops.aten.permute.default(arg13_1, [1, 0]);  arg13_1 = None
        addmm: "f32[512, 768]" = torch.ops.aten.addmm.default(arg14_1, view, permute);  arg14_1 = view = permute = None
        view_1: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm, [2, 256, 768]);  addmm = None
        view_2: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_1, [2, 256, -1, 64]);  view_1 = None
        permute_1: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_2, [0, 2, 1, 3]);  view_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_3: "f32[512, 768]" = torch.ops.aten.view.default(add_9, [512, 768])
        permute_2: "f32[768, 768]" = torch.ops.aten.permute.default(arg15_1, [1, 0]);  arg15_1 = None
        addmm_1: "f32[512, 768]" = torch.ops.aten.addmm.default(arg16_1, view_3, permute_2);  arg16_1 = view_3 = permute_2 = None
        view_4: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_1, [2, 256, 768]);  addmm_1 = None
        view_5: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_4, [2, 256, -1, 64]);  view_4 = None
        permute_3: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_5, [0, 2, 1, 3]);  view_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_6: "f32[512, 768]" = torch.ops.aten.view.default(add_9, [512, 768])
        permute_4: "f32[768, 768]" = torch.ops.aten.permute.default(arg17_1, [1, 0]);  arg17_1 = None
        addmm_2: "f32[512, 768]" = torch.ops.aten.addmm.default(arg18_1, view_6, permute_4);  arg18_1 = view_6 = permute_4 = None
        view_7: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_2, [2, 256, 768]);  addmm_2 = None
        view_8: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_7, [2, 256, -1, 64]);  view_7 = None
        permute_5: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_8, [0, 2, 1, 3]);  view_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_6: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_3, [0, 1, 3, 2]);  permute_3 = None
        expand: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_1, [2, 12, 256, 64]);  permute_1 = None
        clone_1: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand, memory_format = torch.contiguous_format);  expand = None
        view_9: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_1, [24, 256, 64]);  clone_1 = None
        expand_1: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_6, [2, 12, 64, 256]);  permute_6 = None
        clone_2: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_1, memory_format = torch.contiguous_format);  expand_1 = None
        view_10: "f32[24, 64, 256]" = torch.ops.aten.view.default(clone_2, [24, 64, 256]);  clone_2 = None
        bmm: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_9, view_10);  view_9 = view_10 = None
        view_11: "f32[2, 12, 256, 256]" = torch.ops.aten.view.default(bmm, [2, 12, 256, 256]);  bmm = None
        mul_3: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_11, 0.125);  view_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_10: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_3, mul);  mul_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_10, [-1], True)
        sub_4: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_10, amax);  add_10 = amax = None
        exp: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_4);  sub_4 = None
        sum_1: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp, [-1], True)
        div: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp, sum_1);  exp = sum_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_2: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div, [2, 12, 256, 256]);  div = None
        view_12: "f32[24, 256, 256]" = torch.ops.aten.view.default(expand_2, [24, 256, 256]);  expand_2 = None
        expand_3: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_5, [2, 12, 256, 64]);  permute_5 = None
        clone_4: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_3, memory_format = torch.contiguous_format);  expand_3 = None
        view_13: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_4, [24, 256, 64]);  clone_4 = None
        bmm_1: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_12, view_13);  view_12 = view_13 = None
        view_14: "f32[2, 12, 256, 64]" = torch.ops.aten.view.default(bmm_1, [2, 12, 256, 64]);  bmm_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_7: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_14, [0, 2, 1, 3]);  view_14 = None
        clone_5: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_7, memory_format = torch.contiguous_format);  permute_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_15: "f32[2, 256, 768]" = torch.ops.aten.view.default(clone_5, [2, 256, -1]);  clone_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_16: "f32[512, 768]" = torch.ops.aten.view.default(view_15, [512, 768]);  view_15 = None
        permute_8: "f32[768, 768]" = torch.ops.aten.permute.default(arg19_1, [1, 0]);  arg19_1 = None
        addmm_3: "f32[512, 768]" = torch.ops.aten.addmm.default(arg20_1, view_16, permute_8);  arg20_1 = view_16 = permute_8 = None
        view_17: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_3, [2, 256, 768]);  addmm_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_11: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_17, add_9);  view_17 = add_9 = None
        var_mean_1 = torch.ops.aten.var_mean.correction(add_11, [2], correction = 0, keepdim = True)
        getitem_2: "f32[2, 256, 1]" = var_mean_1[0]
        getitem_3: "f32[2, 256, 1]" = var_mean_1[1];  var_mean_1 = None
        add_12: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_2, 1e-12);  getitem_2 = None
        rsqrt_1: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_12);  add_12 = None
        sub_5: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_11, getitem_3);  add_11 = getitem_3 = None
        mul_4: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_5, rsqrt_1);  sub_5 = rsqrt_1 = None
        mul_5: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_4, arg21_1);  mul_4 = arg21_1 = None
        add_13: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_5, arg22_1);  mul_5 = arg22_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_18: "f32[512, 768]" = torch.ops.aten.view.default(add_13, [512, 768])
        permute_9: "f32[768, 3072]" = torch.ops.aten.permute.default(arg23_1, [1, 0]);  arg23_1 = None
        addmm_4: "f32[512, 3072]" = torch.ops.aten.addmm.default(arg24_1, view_18, permute_9);  arg24_1 = view_18 = permute_9 = None
        view_19: "f32[2, 256, 3072]" = torch.ops.aten.view.default(addmm_4, [2, 256, 3072]);  addmm_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_6: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_19, 0.5)
        mul_7: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_19, 0.7071067811865476);  view_19 = None
        erf: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_7);  mul_7 = None
        add_14: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf, 1);  erf = None
        mul_8: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_6, add_14);  mul_6 = add_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_20: "f32[512, 3072]" = torch.ops.aten.view.default(mul_8, [512, 3072]);  mul_8 = None
        permute_10: "f32[3072, 768]" = torch.ops.aten.permute.default(arg25_1, [1, 0]);  arg25_1 = None
        addmm_5: "f32[512, 768]" = torch.ops.aten.addmm.default(arg26_1, view_20, permute_10);  arg26_1 = view_20 = permute_10 = None
        view_21: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_5, [2, 256, 768]);  addmm_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_15: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_21, add_13);  view_21 = add_13 = None
        var_mean_2 = torch.ops.aten.var_mean.correction(add_15, [2], correction = 0, keepdim = True)
        getitem_4: "f32[2, 256, 1]" = var_mean_2[0]
        getitem_5: "f32[2, 256, 1]" = var_mean_2[1];  var_mean_2 = None
        add_16: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_4, 1e-12);  getitem_4 = None
        rsqrt_2: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_16);  add_16 = None
        sub_6: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_15, getitem_5);  add_15 = getitem_5 = None
        mul_9: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_6, rsqrt_2);  sub_6 = rsqrt_2 = None
        mul_10: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_9, arg27_1);  mul_9 = arg27_1 = None
        add_17: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_10, arg28_1);  mul_10 = arg28_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_22: "f32[512, 768]" = torch.ops.aten.view.default(add_17, [512, 768])
        permute_11: "f32[768, 768]" = torch.ops.aten.permute.default(arg29_1, [1, 0]);  arg29_1 = None
        addmm_6: "f32[512, 768]" = torch.ops.aten.addmm.default(arg30_1, view_22, permute_11);  arg30_1 = view_22 = permute_11 = None
        view_23: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_6, [2, 256, 768]);  addmm_6 = None
        view_24: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_23, [2, 256, -1, 64]);  view_23 = None
        permute_12: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_24, [0, 2, 1, 3]);  view_24 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_25: "f32[512, 768]" = torch.ops.aten.view.default(add_17, [512, 768])
        permute_13: "f32[768, 768]" = torch.ops.aten.permute.default(arg31_1, [1, 0]);  arg31_1 = None
        addmm_7: "f32[512, 768]" = torch.ops.aten.addmm.default(arg32_1, view_25, permute_13);  arg32_1 = view_25 = permute_13 = None
        view_26: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_7, [2, 256, 768]);  addmm_7 = None
        view_27: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_26, [2, 256, -1, 64]);  view_26 = None
        permute_14: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_27, [0, 2, 1, 3]);  view_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_28: "f32[512, 768]" = torch.ops.aten.view.default(add_17, [512, 768])
        permute_15: "f32[768, 768]" = torch.ops.aten.permute.default(arg33_1, [1, 0]);  arg33_1 = None
        addmm_8: "f32[512, 768]" = torch.ops.aten.addmm.default(arg34_1, view_28, permute_15);  arg34_1 = view_28 = permute_15 = None
        view_29: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_8, [2, 256, 768]);  addmm_8 = None
        view_30: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_29, [2, 256, -1, 64]);  view_29 = None
        permute_16: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_30, [0, 2, 1, 3]);  view_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_17: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_14, [0, 1, 3, 2]);  permute_14 = None
        expand_4: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_12, [2, 12, 256, 64]);  permute_12 = None
        clone_8: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_4, memory_format = torch.contiguous_format);  expand_4 = None
        view_31: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_8, [24, 256, 64]);  clone_8 = None
        expand_5: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_17, [2, 12, 64, 256]);  permute_17 = None
        clone_9: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_5, memory_format = torch.contiguous_format);  expand_5 = None
        view_32: "f32[24, 64, 256]" = torch.ops.aten.view.default(clone_9, [24, 64, 256]);  clone_9 = None
        bmm_2: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_31, view_32);  view_31 = view_32 = None
        view_33: "f32[2, 12, 256, 256]" = torch.ops.aten.view.default(bmm_2, [2, 12, 256, 256]);  bmm_2 = None
        mul_11: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_33, 0.125);  view_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_18: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_11, mul);  mul_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_1: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_18, [-1], True)
        sub_7: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_18, amax_1);  add_18 = amax_1 = None
        exp_1: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_7);  sub_7 = None
        sum_2: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_1, [-1], True)
        div_1: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_1, sum_2);  exp_1 = sum_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_6: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_1, [2, 12, 256, 256]);  div_1 = None
        view_34: "f32[24, 256, 256]" = torch.ops.aten.view.default(expand_6, [24, 256, 256]);  expand_6 = None
        expand_7: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_16, [2, 12, 256, 64]);  permute_16 = None
        clone_11: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_7, memory_format = torch.contiguous_format);  expand_7 = None
        view_35: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_11, [24, 256, 64]);  clone_11 = None
        bmm_3: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_34, view_35);  view_34 = view_35 = None
        view_36: "f32[2, 12, 256, 64]" = torch.ops.aten.view.default(bmm_3, [2, 12, 256, 64]);  bmm_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_18: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_36, [0, 2, 1, 3]);  view_36 = None
        clone_12: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_18, memory_format = torch.contiguous_format);  permute_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_37: "f32[2, 256, 768]" = torch.ops.aten.view.default(clone_12, [2, 256, -1]);  clone_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_38: "f32[512, 768]" = torch.ops.aten.view.default(view_37, [512, 768]);  view_37 = None
        permute_19: "f32[768, 768]" = torch.ops.aten.permute.default(arg35_1, [1, 0]);  arg35_1 = None
        addmm_9: "f32[512, 768]" = torch.ops.aten.addmm.default(arg36_1, view_38, permute_19);  arg36_1 = view_38 = permute_19 = None
        view_39: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_9, [2, 256, 768]);  addmm_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_19: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_39, add_17);  view_39 = add_17 = None
        var_mean_3 = torch.ops.aten.var_mean.correction(add_19, [2], correction = 0, keepdim = True)
        getitem_6: "f32[2, 256, 1]" = var_mean_3[0]
        getitem_7: "f32[2, 256, 1]" = var_mean_3[1];  var_mean_3 = None
        add_20: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_6, 1e-12);  getitem_6 = None
        rsqrt_3: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_20);  add_20 = None
        sub_8: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_19, getitem_7);  add_19 = getitem_7 = None
        mul_12: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_8, rsqrt_3);  sub_8 = rsqrt_3 = None
        mul_13: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_12, arg37_1);  mul_12 = arg37_1 = None
        add_21: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_13, arg38_1);  mul_13 = arg38_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_40: "f32[512, 768]" = torch.ops.aten.view.default(add_21, [512, 768])
        permute_20: "f32[768, 3072]" = torch.ops.aten.permute.default(arg39_1, [1, 0]);  arg39_1 = None
        addmm_10: "f32[512, 3072]" = torch.ops.aten.addmm.default(arg40_1, view_40, permute_20);  arg40_1 = view_40 = permute_20 = None
        view_41: "f32[2, 256, 3072]" = torch.ops.aten.view.default(addmm_10, [2, 256, 3072]);  addmm_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_14: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_41, 0.5)
        mul_15: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_41, 0.7071067811865476);  view_41 = None
        erf_1: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_15);  mul_15 = None
        add_22: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_1, 1);  erf_1 = None
        mul_16: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_14, add_22);  mul_14 = add_22 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_42: "f32[512, 3072]" = torch.ops.aten.view.default(mul_16, [512, 3072]);  mul_16 = None
        permute_21: "f32[3072, 768]" = torch.ops.aten.permute.default(arg41_1, [1, 0]);  arg41_1 = None
        addmm_11: "f32[512, 768]" = torch.ops.aten.addmm.default(arg42_1, view_42, permute_21);  arg42_1 = view_42 = permute_21 = None
        view_43: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_11, [2, 256, 768]);  addmm_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_23: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_43, add_21);  view_43 = add_21 = None
        var_mean_4 = torch.ops.aten.var_mean.correction(add_23, [2], correction = 0, keepdim = True)
        getitem_8: "f32[2, 256, 1]" = var_mean_4[0]
        getitem_9: "f32[2, 256, 1]" = var_mean_4[1];  var_mean_4 = None
        add_24: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_8, 1e-12);  getitem_8 = None
        rsqrt_4: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_24);  add_24 = None
        sub_9: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_23, getitem_9);  add_23 = getitem_9 = None
        mul_17: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_9, rsqrt_4);  sub_9 = rsqrt_4 = None
        mul_18: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_17, arg43_1);  mul_17 = arg43_1 = None
        add_25: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_18, arg44_1);  mul_18 = arg44_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_44: "f32[512, 768]" = torch.ops.aten.view.default(add_25, [512, 768])
        permute_22: "f32[768, 768]" = torch.ops.aten.permute.default(arg45_1, [1, 0]);  arg45_1 = None
        addmm_12: "f32[512, 768]" = torch.ops.aten.addmm.default(arg46_1, view_44, permute_22);  arg46_1 = view_44 = permute_22 = None
        view_45: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_12, [2, 256, 768]);  addmm_12 = None
        view_46: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_45, [2, 256, -1, 64]);  view_45 = None
        permute_23: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_46, [0, 2, 1, 3]);  view_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_47: "f32[512, 768]" = torch.ops.aten.view.default(add_25, [512, 768])
        permute_24: "f32[768, 768]" = torch.ops.aten.permute.default(arg47_1, [1, 0]);  arg47_1 = None
        addmm_13: "f32[512, 768]" = torch.ops.aten.addmm.default(arg48_1, view_47, permute_24);  arg48_1 = view_47 = permute_24 = None
        view_48: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_13, [2, 256, 768]);  addmm_13 = None
        view_49: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_48, [2, 256, -1, 64]);  view_48 = None
        permute_25: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_49, [0, 2, 1, 3]);  view_49 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_50: "f32[512, 768]" = torch.ops.aten.view.default(add_25, [512, 768])
        permute_26: "f32[768, 768]" = torch.ops.aten.permute.default(arg49_1, [1, 0]);  arg49_1 = None
        addmm_14: "f32[512, 768]" = torch.ops.aten.addmm.default(arg50_1, view_50, permute_26);  arg50_1 = view_50 = permute_26 = None
        view_51: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_14, [2, 256, 768]);  addmm_14 = None
        view_52: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_51, [2, 256, -1, 64]);  view_51 = None
        permute_27: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_52, [0, 2, 1, 3]);  view_52 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_28: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_25, [0, 1, 3, 2]);  permute_25 = None
        expand_8: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_23, [2, 12, 256, 64]);  permute_23 = None
        clone_15: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_8, memory_format = torch.contiguous_format);  expand_8 = None
        view_53: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_15, [24, 256, 64]);  clone_15 = None
        expand_9: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_28, [2, 12, 64, 256]);  permute_28 = None
        clone_16: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_9, memory_format = torch.contiguous_format);  expand_9 = None
        view_54: "f32[24, 64, 256]" = torch.ops.aten.view.default(clone_16, [24, 64, 256]);  clone_16 = None
        bmm_4: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_53, view_54);  view_53 = view_54 = None
        view_55: "f32[2, 12, 256, 256]" = torch.ops.aten.view.default(bmm_4, [2, 12, 256, 256]);  bmm_4 = None
        mul_19: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_55, 0.125);  view_55 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_26: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_19, mul);  mul_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_2: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_26, [-1], True)
        sub_10: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_26, amax_2);  add_26 = amax_2 = None
        exp_2: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_10);  sub_10 = None
        sum_3: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_2, [-1], True)
        div_2: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_2, sum_3);  exp_2 = sum_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_10: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_2, [2, 12, 256, 256]);  div_2 = None
        view_56: "f32[24, 256, 256]" = torch.ops.aten.view.default(expand_10, [24, 256, 256]);  expand_10 = None
        expand_11: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_27, [2, 12, 256, 64]);  permute_27 = None
        clone_18: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_11, memory_format = torch.contiguous_format);  expand_11 = None
        view_57: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_18, [24, 256, 64]);  clone_18 = None
        bmm_5: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_56, view_57);  view_56 = view_57 = None
        view_58: "f32[2, 12, 256, 64]" = torch.ops.aten.view.default(bmm_5, [2, 12, 256, 64]);  bmm_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_29: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_58, [0, 2, 1, 3]);  view_58 = None
        clone_19: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_29, memory_format = torch.contiguous_format);  permute_29 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_59: "f32[2, 256, 768]" = torch.ops.aten.view.default(clone_19, [2, 256, -1]);  clone_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_60: "f32[512, 768]" = torch.ops.aten.view.default(view_59, [512, 768]);  view_59 = None
        permute_30: "f32[768, 768]" = torch.ops.aten.permute.default(arg51_1, [1, 0]);  arg51_1 = None
        addmm_15: "f32[512, 768]" = torch.ops.aten.addmm.default(arg52_1, view_60, permute_30);  arg52_1 = view_60 = permute_30 = None
        view_61: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_15, [2, 256, 768]);  addmm_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_27: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_61, add_25);  view_61 = add_25 = None
        var_mean_5 = torch.ops.aten.var_mean.correction(add_27, [2], correction = 0, keepdim = True)
        getitem_10: "f32[2, 256, 1]" = var_mean_5[0]
        getitem_11: "f32[2, 256, 1]" = var_mean_5[1];  var_mean_5 = None
        add_28: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_10, 1e-12);  getitem_10 = None
        rsqrt_5: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_28);  add_28 = None
        sub_11: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_27, getitem_11);  add_27 = getitem_11 = None
        mul_20: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_11, rsqrt_5);  sub_11 = rsqrt_5 = None
        mul_21: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_20, arg53_1);  mul_20 = arg53_1 = None
        add_29: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_21, arg54_1);  mul_21 = arg54_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_62: "f32[512, 768]" = torch.ops.aten.view.default(add_29, [512, 768])
        permute_31: "f32[768, 3072]" = torch.ops.aten.permute.default(arg55_1, [1, 0]);  arg55_1 = None
        addmm_16: "f32[512, 3072]" = torch.ops.aten.addmm.default(arg56_1, view_62, permute_31);  arg56_1 = view_62 = permute_31 = None
        view_63: "f32[2, 256, 3072]" = torch.ops.aten.view.default(addmm_16, [2, 256, 3072]);  addmm_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_22: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_63, 0.5)
        mul_23: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_63, 0.7071067811865476);  view_63 = None
        erf_2: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_23);  mul_23 = None
        add_30: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_2, 1);  erf_2 = None
        mul_24: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_22, add_30);  mul_22 = add_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_64: "f32[512, 3072]" = torch.ops.aten.view.default(mul_24, [512, 3072]);  mul_24 = None
        permute_32: "f32[3072, 768]" = torch.ops.aten.permute.default(arg57_1, [1, 0]);  arg57_1 = None
        addmm_17: "f32[512, 768]" = torch.ops.aten.addmm.default(arg58_1, view_64, permute_32);  arg58_1 = view_64 = permute_32 = None
        view_65: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_17, [2, 256, 768]);  addmm_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_31: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_65, add_29);  view_65 = add_29 = None
        var_mean_6 = torch.ops.aten.var_mean.correction(add_31, [2], correction = 0, keepdim = True)
        getitem_12: "f32[2, 256, 1]" = var_mean_6[0]
        getitem_13: "f32[2, 256, 1]" = var_mean_6[1];  var_mean_6 = None
        add_32: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_12, 1e-12);  getitem_12 = None
        rsqrt_6: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_32);  add_32 = None
        sub_12: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_31, getitem_13);  add_31 = getitem_13 = None
        mul_25: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_12, rsqrt_6);  sub_12 = rsqrt_6 = None
        mul_26: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_25, arg59_1);  mul_25 = arg59_1 = None
        add_33: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_26, arg60_1);  mul_26 = arg60_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_66: "f32[512, 768]" = torch.ops.aten.view.default(add_33, [512, 768])
        permute_33: "f32[768, 768]" = torch.ops.aten.permute.default(arg61_1, [1, 0]);  arg61_1 = None
        addmm_18: "f32[512, 768]" = torch.ops.aten.addmm.default(arg62_1, view_66, permute_33);  arg62_1 = view_66 = permute_33 = None
        view_67: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_18, [2, 256, 768]);  addmm_18 = None
        view_68: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_67, [2, 256, -1, 64]);  view_67 = None
        permute_34: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_68, [0, 2, 1, 3]);  view_68 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_69: "f32[512, 768]" = torch.ops.aten.view.default(add_33, [512, 768])
        permute_35: "f32[768, 768]" = torch.ops.aten.permute.default(arg63_1, [1, 0]);  arg63_1 = None
        addmm_19: "f32[512, 768]" = torch.ops.aten.addmm.default(arg64_1, view_69, permute_35);  arg64_1 = view_69 = permute_35 = None
        view_70: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_19, [2, 256, 768]);  addmm_19 = None
        view_71: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_70, [2, 256, -1, 64]);  view_70 = None
        permute_36: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_71, [0, 2, 1, 3]);  view_71 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_72: "f32[512, 768]" = torch.ops.aten.view.default(add_33, [512, 768])
        permute_37: "f32[768, 768]" = torch.ops.aten.permute.default(arg65_1, [1, 0]);  arg65_1 = None
        addmm_20: "f32[512, 768]" = torch.ops.aten.addmm.default(arg66_1, view_72, permute_37);  arg66_1 = view_72 = permute_37 = None
        view_73: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_20, [2, 256, 768]);  addmm_20 = None
        view_74: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_73, [2, 256, -1, 64]);  view_73 = None
        permute_38: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_74, [0, 2, 1, 3]);  view_74 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_39: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_36, [0, 1, 3, 2]);  permute_36 = None
        expand_12: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_34, [2, 12, 256, 64]);  permute_34 = None
        clone_22: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_12, memory_format = torch.contiguous_format);  expand_12 = None
        view_75: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_22, [24, 256, 64]);  clone_22 = None
        expand_13: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_39, [2, 12, 64, 256]);  permute_39 = None
        clone_23: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_13, memory_format = torch.contiguous_format);  expand_13 = None
        view_76: "f32[24, 64, 256]" = torch.ops.aten.view.default(clone_23, [24, 64, 256]);  clone_23 = None
        bmm_6: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_75, view_76);  view_75 = view_76 = None
        view_77: "f32[2, 12, 256, 256]" = torch.ops.aten.view.default(bmm_6, [2, 12, 256, 256]);  bmm_6 = None
        mul_27: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_77, 0.125);  view_77 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_34: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_27, mul);  mul_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_3: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_34, [-1], True)
        sub_13: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_34, amax_3);  add_34 = amax_3 = None
        exp_3: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_13);  sub_13 = None
        sum_4: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_3, [-1], True)
        div_3: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_3, sum_4);  exp_3 = sum_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_14: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_3, [2, 12, 256, 256]);  div_3 = None
        view_78: "f32[24, 256, 256]" = torch.ops.aten.view.default(expand_14, [24, 256, 256]);  expand_14 = None
        expand_15: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_38, [2, 12, 256, 64]);  permute_38 = None
        clone_25: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_15, memory_format = torch.contiguous_format);  expand_15 = None
        view_79: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_25, [24, 256, 64]);  clone_25 = None
        bmm_7: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_78, view_79);  view_78 = view_79 = None
        view_80: "f32[2, 12, 256, 64]" = torch.ops.aten.view.default(bmm_7, [2, 12, 256, 64]);  bmm_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_40: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_80, [0, 2, 1, 3]);  view_80 = None
        clone_26: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_40, memory_format = torch.contiguous_format);  permute_40 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_81: "f32[2, 256, 768]" = torch.ops.aten.view.default(clone_26, [2, 256, -1]);  clone_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_82: "f32[512, 768]" = torch.ops.aten.view.default(view_81, [512, 768]);  view_81 = None
        permute_41: "f32[768, 768]" = torch.ops.aten.permute.default(arg67_1, [1, 0]);  arg67_1 = None
        addmm_21: "f32[512, 768]" = torch.ops.aten.addmm.default(arg68_1, view_82, permute_41);  arg68_1 = view_82 = permute_41 = None
        view_83: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_21, [2, 256, 768]);  addmm_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_35: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_83, add_33);  view_83 = add_33 = None
        var_mean_7 = torch.ops.aten.var_mean.correction(add_35, [2], correction = 0, keepdim = True)
        getitem_14: "f32[2, 256, 1]" = var_mean_7[0]
        getitem_15: "f32[2, 256, 1]" = var_mean_7[1];  var_mean_7 = None
        add_36: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_14, 1e-12);  getitem_14 = None
        rsqrt_7: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_36);  add_36 = None
        sub_14: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_35, getitem_15);  add_35 = getitem_15 = None
        mul_28: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_14, rsqrt_7);  sub_14 = rsqrt_7 = None
        mul_29: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_28, arg69_1);  mul_28 = arg69_1 = None
        add_37: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_29, arg70_1);  mul_29 = arg70_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_84: "f32[512, 768]" = torch.ops.aten.view.default(add_37, [512, 768])
        permute_42: "f32[768, 3072]" = torch.ops.aten.permute.default(arg71_1, [1, 0]);  arg71_1 = None
        addmm_22: "f32[512, 3072]" = torch.ops.aten.addmm.default(arg72_1, view_84, permute_42);  arg72_1 = view_84 = permute_42 = None
        view_85: "f32[2, 256, 3072]" = torch.ops.aten.view.default(addmm_22, [2, 256, 3072]);  addmm_22 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_30: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_85, 0.5)
        mul_31: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_85, 0.7071067811865476);  view_85 = None
        erf_3: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_31);  mul_31 = None
        add_38: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_3, 1);  erf_3 = None
        mul_32: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_30, add_38);  mul_30 = add_38 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_86: "f32[512, 3072]" = torch.ops.aten.view.default(mul_32, [512, 3072]);  mul_32 = None
        permute_43: "f32[3072, 768]" = torch.ops.aten.permute.default(arg73_1, [1, 0]);  arg73_1 = None
        addmm_23: "f32[512, 768]" = torch.ops.aten.addmm.default(arg74_1, view_86, permute_43);  arg74_1 = view_86 = permute_43 = None
        view_87: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_23, [2, 256, 768]);  addmm_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_39: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_87, add_37);  view_87 = add_37 = None
        var_mean_8 = torch.ops.aten.var_mean.correction(add_39, [2], correction = 0, keepdim = True)
        getitem_16: "f32[2, 256, 1]" = var_mean_8[0]
        getitem_17: "f32[2, 256, 1]" = var_mean_8[1];  var_mean_8 = None
        add_40: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_16, 1e-12);  getitem_16 = None
        rsqrt_8: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_40);  add_40 = None
        sub_15: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_39, getitem_17);  add_39 = getitem_17 = None
        mul_33: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_15, rsqrt_8);  sub_15 = rsqrt_8 = None
        mul_34: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_33, arg75_1);  mul_33 = arg75_1 = None
        add_41: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_34, arg76_1);  mul_34 = arg76_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_88: "f32[512, 768]" = torch.ops.aten.view.default(add_41, [512, 768])
        permute_44: "f32[768, 768]" = torch.ops.aten.permute.default(arg77_1, [1, 0]);  arg77_1 = None
        addmm_24: "f32[512, 768]" = torch.ops.aten.addmm.default(arg78_1, view_88, permute_44);  arg78_1 = view_88 = permute_44 = None
        view_89: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_24, [2, 256, 768]);  addmm_24 = None
        view_90: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_89, [2, 256, -1, 64]);  view_89 = None
        permute_45: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_90, [0, 2, 1, 3]);  view_90 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_91: "f32[512, 768]" = torch.ops.aten.view.default(add_41, [512, 768])
        permute_46: "f32[768, 768]" = torch.ops.aten.permute.default(arg79_1, [1, 0]);  arg79_1 = None
        addmm_25: "f32[512, 768]" = torch.ops.aten.addmm.default(arg80_1, view_91, permute_46);  arg80_1 = view_91 = permute_46 = None
        view_92: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_25, [2, 256, 768]);  addmm_25 = None
        view_93: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_92, [2, 256, -1, 64]);  view_92 = None
        permute_47: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_93, [0, 2, 1, 3]);  view_93 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_94: "f32[512, 768]" = torch.ops.aten.view.default(add_41, [512, 768])
        permute_48: "f32[768, 768]" = torch.ops.aten.permute.default(arg81_1, [1, 0]);  arg81_1 = None
        addmm_26: "f32[512, 768]" = torch.ops.aten.addmm.default(arg82_1, view_94, permute_48);  arg82_1 = view_94 = permute_48 = None
        view_95: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_26, [2, 256, 768]);  addmm_26 = None
        view_96: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_95, [2, 256, -1, 64]);  view_95 = None
        permute_49: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_96, [0, 2, 1, 3]);  view_96 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_50: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_47, [0, 1, 3, 2]);  permute_47 = None
        expand_16: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_45, [2, 12, 256, 64]);  permute_45 = None
        clone_29: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_16, memory_format = torch.contiguous_format);  expand_16 = None
        view_97: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_29, [24, 256, 64]);  clone_29 = None
        expand_17: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_50, [2, 12, 64, 256]);  permute_50 = None
        clone_30: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_17, memory_format = torch.contiguous_format);  expand_17 = None
        view_98: "f32[24, 64, 256]" = torch.ops.aten.view.default(clone_30, [24, 64, 256]);  clone_30 = None
        bmm_8: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_97, view_98);  view_97 = view_98 = None
        view_99: "f32[2, 12, 256, 256]" = torch.ops.aten.view.default(bmm_8, [2, 12, 256, 256]);  bmm_8 = None
        mul_35: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_99, 0.125);  view_99 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_42: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_35, mul);  mul_35 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_4: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_42, [-1], True)
        sub_16: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_42, amax_4);  add_42 = amax_4 = None
        exp_4: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_16);  sub_16 = None
        sum_5: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_4, [-1], True)
        div_4: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_4, sum_5);  exp_4 = sum_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_18: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_4, [2, 12, 256, 256]);  div_4 = None
        view_100: "f32[24, 256, 256]" = torch.ops.aten.view.default(expand_18, [24, 256, 256]);  expand_18 = None
        expand_19: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_49, [2, 12, 256, 64]);  permute_49 = None
        clone_32: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_19, memory_format = torch.contiguous_format);  expand_19 = None
        view_101: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_32, [24, 256, 64]);  clone_32 = None
        bmm_9: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_100, view_101);  view_100 = view_101 = None
        view_102: "f32[2, 12, 256, 64]" = torch.ops.aten.view.default(bmm_9, [2, 12, 256, 64]);  bmm_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_51: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_102, [0, 2, 1, 3]);  view_102 = None
        clone_33: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_51, memory_format = torch.contiguous_format);  permute_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_103: "f32[2, 256, 768]" = torch.ops.aten.view.default(clone_33, [2, 256, -1]);  clone_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_104: "f32[512, 768]" = torch.ops.aten.view.default(view_103, [512, 768]);  view_103 = None
        permute_52: "f32[768, 768]" = torch.ops.aten.permute.default(arg83_1, [1, 0]);  arg83_1 = None
        addmm_27: "f32[512, 768]" = torch.ops.aten.addmm.default(arg84_1, view_104, permute_52);  arg84_1 = view_104 = permute_52 = None
        view_105: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_27, [2, 256, 768]);  addmm_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_43: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_105, add_41);  view_105 = add_41 = None
        var_mean_9 = torch.ops.aten.var_mean.correction(add_43, [2], correction = 0, keepdim = True)
        getitem_18: "f32[2, 256, 1]" = var_mean_9[0]
        getitem_19: "f32[2, 256, 1]" = var_mean_9[1];  var_mean_9 = None
        add_44: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_18, 1e-12);  getitem_18 = None
        rsqrt_9: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_44);  add_44 = None
        sub_17: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_43, getitem_19);  add_43 = getitem_19 = None
        mul_36: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_17, rsqrt_9);  sub_17 = rsqrt_9 = None
        mul_37: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_36, arg85_1);  mul_36 = arg85_1 = None
        add_45: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_37, arg86_1);  mul_37 = arg86_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_106: "f32[512, 768]" = torch.ops.aten.view.default(add_45, [512, 768])
        permute_53: "f32[768, 3072]" = torch.ops.aten.permute.default(arg87_1, [1, 0]);  arg87_1 = None
        addmm_28: "f32[512, 3072]" = torch.ops.aten.addmm.default(arg88_1, view_106, permute_53);  arg88_1 = view_106 = permute_53 = None
        view_107: "f32[2, 256, 3072]" = torch.ops.aten.view.default(addmm_28, [2, 256, 3072]);  addmm_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_38: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_107, 0.5)
        mul_39: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_107, 0.7071067811865476);  view_107 = None
        erf_4: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_39);  mul_39 = None
        add_46: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_4, 1);  erf_4 = None
        mul_40: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_38, add_46);  mul_38 = add_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_108: "f32[512, 3072]" = torch.ops.aten.view.default(mul_40, [512, 3072]);  mul_40 = None
        permute_54: "f32[3072, 768]" = torch.ops.aten.permute.default(arg89_1, [1, 0]);  arg89_1 = None
        addmm_29: "f32[512, 768]" = torch.ops.aten.addmm.default(arg90_1, view_108, permute_54);  arg90_1 = view_108 = permute_54 = None
        view_109: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_29, [2, 256, 768]);  addmm_29 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_47: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_109, add_45);  view_109 = add_45 = None
        var_mean_10 = torch.ops.aten.var_mean.correction(add_47, [2], correction = 0, keepdim = True)
        getitem_20: "f32[2, 256, 1]" = var_mean_10[0]
        getitem_21: "f32[2, 256, 1]" = var_mean_10[1];  var_mean_10 = None
        add_48: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_20, 1e-12);  getitem_20 = None
        rsqrt_10: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_48);  add_48 = None
        sub_18: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_47, getitem_21);  add_47 = getitem_21 = None
        mul_41: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_18, rsqrt_10);  sub_18 = rsqrt_10 = None
        mul_42: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_41, arg91_1);  mul_41 = arg91_1 = None
        add_49: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_42, arg92_1);  mul_42 = arg92_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_110: "f32[512, 768]" = torch.ops.aten.view.default(add_49, [512, 768])
        permute_55: "f32[768, 768]" = torch.ops.aten.permute.default(arg93_1, [1, 0]);  arg93_1 = None
        addmm_30: "f32[512, 768]" = torch.ops.aten.addmm.default(arg94_1, view_110, permute_55);  arg94_1 = view_110 = permute_55 = None
        view_111: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_30, [2, 256, 768]);  addmm_30 = None
        view_112: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_111, [2, 256, -1, 64]);  view_111 = None
        permute_56: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_112, [0, 2, 1, 3]);  view_112 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_113: "f32[512, 768]" = torch.ops.aten.view.default(add_49, [512, 768])
        permute_57: "f32[768, 768]" = torch.ops.aten.permute.default(arg95_1, [1, 0]);  arg95_1 = None
        addmm_31: "f32[512, 768]" = torch.ops.aten.addmm.default(arg96_1, view_113, permute_57);  arg96_1 = view_113 = permute_57 = None
        view_114: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_31, [2, 256, 768]);  addmm_31 = None
        view_115: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_114, [2, 256, -1, 64]);  view_114 = None
        permute_58: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_115, [0, 2, 1, 3]);  view_115 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_116: "f32[512, 768]" = torch.ops.aten.view.default(add_49, [512, 768])
        permute_59: "f32[768, 768]" = torch.ops.aten.permute.default(arg97_1, [1, 0]);  arg97_1 = None
        addmm_32: "f32[512, 768]" = torch.ops.aten.addmm.default(arg98_1, view_116, permute_59);  arg98_1 = view_116 = permute_59 = None
        view_117: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_32, [2, 256, 768]);  addmm_32 = None
        view_118: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_117, [2, 256, -1, 64]);  view_117 = None
        permute_60: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_118, [0, 2, 1, 3]);  view_118 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_61: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_58, [0, 1, 3, 2]);  permute_58 = None
        expand_20: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_56, [2, 12, 256, 64]);  permute_56 = None
        clone_36: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_20, memory_format = torch.contiguous_format);  expand_20 = None
        view_119: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_36, [24, 256, 64]);  clone_36 = None
        expand_21: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_61, [2, 12, 64, 256]);  permute_61 = None
        clone_37: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_21, memory_format = torch.contiguous_format);  expand_21 = None
        view_120: "f32[24, 64, 256]" = torch.ops.aten.view.default(clone_37, [24, 64, 256]);  clone_37 = None
        bmm_10: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_119, view_120);  view_119 = view_120 = None
        view_121: "f32[2, 12, 256, 256]" = torch.ops.aten.view.default(bmm_10, [2, 12, 256, 256]);  bmm_10 = None
        mul_43: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_121, 0.125);  view_121 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_50: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_43, mul);  mul_43 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_5: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_50, [-1], True)
        sub_19: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_50, amax_5);  add_50 = amax_5 = None
        exp_5: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_19);  sub_19 = None
        sum_6: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_5, [-1], True)
        div_5: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_5, sum_6);  exp_5 = sum_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_22: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_5, [2, 12, 256, 256]);  div_5 = None
        view_122: "f32[24, 256, 256]" = torch.ops.aten.view.default(expand_22, [24, 256, 256]);  expand_22 = None
        expand_23: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_60, [2, 12, 256, 64]);  permute_60 = None
        clone_39: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_23, memory_format = torch.contiguous_format);  expand_23 = None
        view_123: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_39, [24, 256, 64]);  clone_39 = None
        bmm_11: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_122, view_123);  view_122 = view_123 = None
        view_124: "f32[2, 12, 256, 64]" = torch.ops.aten.view.default(bmm_11, [2, 12, 256, 64]);  bmm_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_62: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_124, [0, 2, 1, 3]);  view_124 = None
        clone_40: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_62, memory_format = torch.contiguous_format);  permute_62 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_125: "f32[2, 256, 768]" = torch.ops.aten.view.default(clone_40, [2, 256, -1]);  clone_40 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_126: "f32[512, 768]" = torch.ops.aten.view.default(view_125, [512, 768]);  view_125 = None
        permute_63: "f32[768, 768]" = torch.ops.aten.permute.default(arg99_1, [1, 0]);  arg99_1 = None
        addmm_33: "f32[512, 768]" = torch.ops.aten.addmm.default(arg100_1, view_126, permute_63);  arg100_1 = view_126 = permute_63 = None
        view_127: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_33, [2, 256, 768]);  addmm_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_51: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_127, add_49);  view_127 = add_49 = None
        var_mean_11 = torch.ops.aten.var_mean.correction(add_51, [2], correction = 0, keepdim = True)
        getitem_22: "f32[2, 256, 1]" = var_mean_11[0]
        getitem_23: "f32[2, 256, 1]" = var_mean_11[1];  var_mean_11 = None
        add_52: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_22, 1e-12);  getitem_22 = None
        rsqrt_11: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_52);  add_52 = None
        sub_20: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_51, getitem_23);  add_51 = getitem_23 = None
        mul_44: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_20, rsqrt_11);  sub_20 = rsqrt_11 = None
        mul_45: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_44, arg101_1);  mul_44 = arg101_1 = None
        add_53: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_45, arg102_1);  mul_45 = arg102_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_128: "f32[512, 768]" = torch.ops.aten.view.default(add_53, [512, 768])
        permute_64: "f32[768, 3072]" = torch.ops.aten.permute.default(arg103_1, [1, 0]);  arg103_1 = None
        addmm_34: "f32[512, 3072]" = torch.ops.aten.addmm.default(arg104_1, view_128, permute_64);  arg104_1 = view_128 = permute_64 = None
        view_129: "f32[2, 256, 3072]" = torch.ops.aten.view.default(addmm_34, [2, 256, 3072]);  addmm_34 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_46: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_129, 0.5)
        mul_47: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_129, 0.7071067811865476);  view_129 = None
        erf_5: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_47);  mul_47 = None
        add_54: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_5, 1);  erf_5 = None
        mul_48: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_46, add_54);  mul_46 = add_54 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_130: "f32[512, 3072]" = torch.ops.aten.view.default(mul_48, [512, 3072]);  mul_48 = None
        permute_65: "f32[3072, 768]" = torch.ops.aten.permute.default(arg105_1, [1, 0]);  arg105_1 = None
        addmm_35: "f32[512, 768]" = torch.ops.aten.addmm.default(arg106_1, view_130, permute_65);  arg106_1 = view_130 = permute_65 = None
        view_131: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_35, [2, 256, 768]);  addmm_35 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_55: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_131, add_53);  view_131 = add_53 = None
        var_mean_12 = torch.ops.aten.var_mean.correction(add_55, [2], correction = 0, keepdim = True)
        getitem_24: "f32[2, 256, 1]" = var_mean_12[0]
        getitem_25: "f32[2, 256, 1]" = var_mean_12[1];  var_mean_12 = None
        add_56: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_24, 1e-12);  getitem_24 = None
        rsqrt_12: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_56);  add_56 = None
        sub_21: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_55, getitem_25);  add_55 = getitem_25 = None
        mul_49: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_21, rsqrt_12);  sub_21 = rsqrt_12 = None
        mul_50: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_49, arg107_1);  mul_49 = arg107_1 = None
        add_57: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_50, arg108_1);  mul_50 = arg108_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_132: "f32[512, 768]" = torch.ops.aten.view.default(add_57, [512, 768])
        permute_66: "f32[768, 768]" = torch.ops.aten.permute.default(arg109_1, [1, 0]);  arg109_1 = None
        addmm_36: "f32[512, 768]" = torch.ops.aten.addmm.default(arg110_1, view_132, permute_66);  arg110_1 = view_132 = permute_66 = None
        view_133: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_36, [2, 256, 768]);  addmm_36 = None
        view_134: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_133, [2, 256, -1, 64]);  view_133 = None
        permute_67: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_134, [0, 2, 1, 3]);  view_134 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_135: "f32[512, 768]" = torch.ops.aten.view.default(add_57, [512, 768])
        permute_68: "f32[768, 768]" = torch.ops.aten.permute.default(arg111_1, [1, 0]);  arg111_1 = None
        addmm_37: "f32[512, 768]" = torch.ops.aten.addmm.default(arg112_1, view_135, permute_68);  arg112_1 = view_135 = permute_68 = None
        view_136: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_37, [2, 256, 768]);  addmm_37 = None
        view_137: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_136, [2, 256, -1, 64]);  view_136 = None
        permute_69: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_137, [0, 2, 1, 3]);  view_137 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_138: "f32[512, 768]" = torch.ops.aten.view.default(add_57, [512, 768])
        permute_70: "f32[768, 768]" = torch.ops.aten.permute.default(arg113_1, [1, 0]);  arg113_1 = None
        addmm_38: "f32[512, 768]" = torch.ops.aten.addmm.default(arg114_1, view_138, permute_70);  arg114_1 = view_138 = permute_70 = None
        view_139: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_38, [2, 256, 768]);  addmm_38 = None
        view_140: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_139, [2, 256, -1, 64]);  view_139 = None
        permute_71: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_140, [0, 2, 1, 3]);  view_140 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_72: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_69, [0, 1, 3, 2]);  permute_69 = None
        expand_24: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_67, [2, 12, 256, 64]);  permute_67 = None
        clone_43: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_24, memory_format = torch.contiguous_format);  expand_24 = None
        view_141: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_43, [24, 256, 64]);  clone_43 = None
        expand_25: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_72, [2, 12, 64, 256]);  permute_72 = None
        clone_44: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_25, memory_format = torch.contiguous_format);  expand_25 = None
        view_142: "f32[24, 64, 256]" = torch.ops.aten.view.default(clone_44, [24, 64, 256]);  clone_44 = None
        bmm_12: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_141, view_142);  view_141 = view_142 = None
        view_143: "f32[2, 12, 256, 256]" = torch.ops.aten.view.default(bmm_12, [2, 12, 256, 256]);  bmm_12 = None
        mul_51: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_143, 0.125);  view_143 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_58: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_51, mul);  mul_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_6: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_58, [-1], True)
        sub_22: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_58, amax_6);  add_58 = amax_6 = None
        exp_6: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_22);  sub_22 = None
        sum_7: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_6, [-1], True)
        div_6: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_6, sum_7);  exp_6 = sum_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_26: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_6, [2, 12, 256, 256]);  div_6 = None
        view_144: "f32[24, 256, 256]" = torch.ops.aten.view.default(expand_26, [24, 256, 256]);  expand_26 = None
        expand_27: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_71, [2, 12, 256, 64]);  permute_71 = None
        clone_46: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_27, memory_format = torch.contiguous_format);  expand_27 = None
        view_145: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_46, [24, 256, 64]);  clone_46 = None
        bmm_13: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_144, view_145);  view_144 = view_145 = None
        view_146: "f32[2, 12, 256, 64]" = torch.ops.aten.view.default(bmm_13, [2, 12, 256, 64]);  bmm_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_73: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_146, [0, 2, 1, 3]);  view_146 = None
        clone_47: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_73, memory_format = torch.contiguous_format);  permute_73 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_147: "f32[2, 256, 768]" = torch.ops.aten.view.default(clone_47, [2, 256, -1]);  clone_47 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_148: "f32[512, 768]" = torch.ops.aten.view.default(view_147, [512, 768]);  view_147 = None
        permute_74: "f32[768, 768]" = torch.ops.aten.permute.default(arg115_1, [1, 0]);  arg115_1 = None
        addmm_39: "f32[512, 768]" = torch.ops.aten.addmm.default(arg116_1, view_148, permute_74);  arg116_1 = view_148 = permute_74 = None
        view_149: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_39, [2, 256, 768]);  addmm_39 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_59: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_149, add_57);  view_149 = add_57 = None
        var_mean_13 = torch.ops.aten.var_mean.correction(add_59, [2], correction = 0, keepdim = True)
        getitem_26: "f32[2, 256, 1]" = var_mean_13[0]
        getitem_27: "f32[2, 256, 1]" = var_mean_13[1];  var_mean_13 = None
        add_60: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_26, 1e-12);  getitem_26 = None
        rsqrt_13: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_60);  add_60 = None
        sub_23: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_59, getitem_27);  add_59 = getitem_27 = None
        mul_52: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_23, rsqrt_13);  sub_23 = rsqrt_13 = None
        mul_53: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_52, arg117_1);  mul_52 = arg117_1 = None
        add_61: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_53, arg118_1);  mul_53 = arg118_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_150: "f32[512, 768]" = torch.ops.aten.view.default(add_61, [512, 768])
        permute_75: "f32[768, 3072]" = torch.ops.aten.permute.default(arg119_1, [1, 0]);  arg119_1 = None
        addmm_40: "f32[512, 3072]" = torch.ops.aten.addmm.default(arg120_1, view_150, permute_75);  arg120_1 = view_150 = permute_75 = None
        view_151: "f32[2, 256, 3072]" = torch.ops.aten.view.default(addmm_40, [2, 256, 3072]);  addmm_40 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_54: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_151, 0.5)
        mul_55: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_151, 0.7071067811865476);  view_151 = None
        erf_6: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_55);  mul_55 = None
        add_62: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_6, 1);  erf_6 = None
        mul_56: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_54, add_62);  mul_54 = add_62 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_152: "f32[512, 3072]" = torch.ops.aten.view.default(mul_56, [512, 3072]);  mul_56 = None
        permute_76: "f32[3072, 768]" = torch.ops.aten.permute.default(arg121_1, [1, 0]);  arg121_1 = None
        addmm_41: "f32[512, 768]" = torch.ops.aten.addmm.default(arg122_1, view_152, permute_76);  arg122_1 = view_152 = permute_76 = None
        view_153: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_41, [2, 256, 768]);  addmm_41 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_63: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_153, add_61);  view_153 = add_61 = None
        var_mean_14 = torch.ops.aten.var_mean.correction(add_63, [2], correction = 0, keepdim = True)
        getitem_28: "f32[2, 256, 1]" = var_mean_14[0]
        getitem_29: "f32[2, 256, 1]" = var_mean_14[1];  var_mean_14 = None
        add_64: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_28, 1e-12);  getitem_28 = None
        rsqrt_14: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_64);  add_64 = None
        sub_24: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_63, getitem_29);  add_63 = getitem_29 = None
        mul_57: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_24, rsqrt_14);  sub_24 = rsqrt_14 = None
        mul_58: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_57, arg123_1);  mul_57 = arg123_1 = None
        add_65: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_58, arg124_1);  mul_58 = arg124_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_154: "f32[512, 768]" = torch.ops.aten.view.default(add_65, [512, 768])
        permute_77: "f32[768, 768]" = torch.ops.aten.permute.default(arg125_1, [1, 0]);  arg125_1 = None
        addmm_42: "f32[512, 768]" = torch.ops.aten.addmm.default(arg126_1, view_154, permute_77);  arg126_1 = view_154 = permute_77 = None
        view_155: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_42, [2, 256, 768]);  addmm_42 = None
        view_156: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_155, [2, 256, -1, 64]);  view_155 = None
        permute_78: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_156, [0, 2, 1, 3]);  view_156 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_157: "f32[512, 768]" = torch.ops.aten.view.default(add_65, [512, 768])
        permute_79: "f32[768, 768]" = torch.ops.aten.permute.default(arg127_1, [1, 0]);  arg127_1 = None
        addmm_43: "f32[512, 768]" = torch.ops.aten.addmm.default(arg128_1, view_157, permute_79);  arg128_1 = view_157 = permute_79 = None
        view_158: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_43, [2, 256, 768]);  addmm_43 = None
        view_159: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_158, [2, 256, -1, 64]);  view_158 = None
        permute_80: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_159, [0, 2, 1, 3]);  view_159 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_160: "f32[512, 768]" = torch.ops.aten.view.default(add_65, [512, 768])
        permute_81: "f32[768, 768]" = torch.ops.aten.permute.default(arg129_1, [1, 0]);  arg129_1 = None
        addmm_44: "f32[512, 768]" = torch.ops.aten.addmm.default(arg130_1, view_160, permute_81);  arg130_1 = view_160 = permute_81 = None
        view_161: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_44, [2, 256, 768]);  addmm_44 = None
        view_162: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_161, [2, 256, -1, 64]);  view_161 = None
        permute_82: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_162, [0, 2, 1, 3]);  view_162 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_83: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_80, [0, 1, 3, 2]);  permute_80 = None
        expand_28: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_78, [2, 12, 256, 64]);  permute_78 = None
        clone_50: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_28, memory_format = torch.contiguous_format);  expand_28 = None
        view_163: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_50, [24, 256, 64]);  clone_50 = None
        expand_29: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_83, [2, 12, 64, 256]);  permute_83 = None
        clone_51: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_29, memory_format = torch.contiguous_format);  expand_29 = None
        view_164: "f32[24, 64, 256]" = torch.ops.aten.view.default(clone_51, [24, 64, 256]);  clone_51 = None
        bmm_14: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_163, view_164);  view_163 = view_164 = None
        view_165: "f32[2, 12, 256, 256]" = torch.ops.aten.view.default(bmm_14, [2, 12, 256, 256]);  bmm_14 = None
        mul_59: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_165, 0.125);  view_165 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_66: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_59, mul);  mul_59 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_7: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_66, [-1], True)
        sub_25: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_66, amax_7);  add_66 = amax_7 = None
        exp_7: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_25);  sub_25 = None
        sum_8: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_7, [-1], True)
        div_7: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_7, sum_8);  exp_7 = sum_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_30: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_7, [2, 12, 256, 256]);  div_7 = None
        view_166: "f32[24, 256, 256]" = torch.ops.aten.view.default(expand_30, [24, 256, 256]);  expand_30 = None
        expand_31: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_82, [2, 12, 256, 64]);  permute_82 = None
        clone_53: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_31, memory_format = torch.contiguous_format);  expand_31 = None
        view_167: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_53, [24, 256, 64]);  clone_53 = None
        bmm_15: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_166, view_167);  view_166 = view_167 = None
        view_168: "f32[2, 12, 256, 64]" = torch.ops.aten.view.default(bmm_15, [2, 12, 256, 64]);  bmm_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_84: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_168, [0, 2, 1, 3]);  view_168 = None
        clone_54: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_84, memory_format = torch.contiguous_format);  permute_84 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_169: "f32[2, 256, 768]" = torch.ops.aten.view.default(clone_54, [2, 256, -1]);  clone_54 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_170: "f32[512, 768]" = torch.ops.aten.view.default(view_169, [512, 768]);  view_169 = None
        permute_85: "f32[768, 768]" = torch.ops.aten.permute.default(arg131_1, [1, 0]);  arg131_1 = None
        addmm_45: "f32[512, 768]" = torch.ops.aten.addmm.default(arg132_1, view_170, permute_85);  arg132_1 = view_170 = permute_85 = None
        view_171: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_45, [2, 256, 768]);  addmm_45 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_67: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_171, add_65);  view_171 = add_65 = None
        var_mean_15 = torch.ops.aten.var_mean.correction(add_67, [2], correction = 0, keepdim = True)
        getitem_30: "f32[2, 256, 1]" = var_mean_15[0]
        getitem_31: "f32[2, 256, 1]" = var_mean_15[1];  var_mean_15 = None
        add_68: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_30, 1e-12);  getitem_30 = None
        rsqrt_15: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_68);  add_68 = None
        sub_26: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_67, getitem_31);  add_67 = getitem_31 = None
        mul_60: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_26, rsqrt_15);  sub_26 = rsqrt_15 = None
        mul_61: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_60, arg133_1);  mul_60 = arg133_1 = None
        add_69: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_61, arg134_1);  mul_61 = arg134_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_172: "f32[512, 768]" = torch.ops.aten.view.default(add_69, [512, 768])
        permute_86: "f32[768, 3072]" = torch.ops.aten.permute.default(arg135_1, [1, 0]);  arg135_1 = None
        addmm_46: "f32[512, 3072]" = torch.ops.aten.addmm.default(arg136_1, view_172, permute_86);  arg136_1 = view_172 = permute_86 = None
        view_173: "f32[2, 256, 3072]" = torch.ops.aten.view.default(addmm_46, [2, 256, 3072]);  addmm_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_62: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_173, 0.5)
        mul_63: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_173, 0.7071067811865476);  view_173 = None
        erf_7: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_63);  mul_63 = None
        add_70: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_7, 1);  erf_7 = None
        mul_64: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_62, add_70);  mul_62 = add_70 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_174: "f32[512, 3072]" = torch.ops.aten.view.default(mul_64, [512, 3072]);  mul_64 = None
        permute_87: "f32[3072, 768]" = torch.ops.aten.permute.default(arg137_1, [1, 0]);  arg137_1 = None
        addmm_47: "f32[512, 768]" = torch.ops.aten.addmm.default(arg138_1, view_174, permute_87);  arg138_1 = view_174 = permute_87 = None
        view_175: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_47, [2, 256, 768]);  addmm_47 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_71: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_175, add_69);  view_175 = add_69 = None
        var_mean_16 = torch.ops.aten.var_mean.correction(add_71, [2], correction = 0, keepdim = True)
        getitem_32: "f32[2, 256, 1]" = var_mean_16[0]
        getitem_33: "f32[2, 256, 1]" = var_mean_16[1];  var_mean_16 = None
        add_72: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_32, 1e-12);  getitem_32 = None
        rsqrt_16: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_72);  add_72 = None
        sub_27: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_71, getitem_33);  add_71 = getitem_33 = None
        mul_65: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_27, rsqrt_16);  sub_27 = rsqrt_16 = None
        mul_66: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_65, arg139_1);  mul_65 = arg139_1 = None
        add_73: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_66, arg140_1);  mul_66 = arg140_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_176: "f32[512, 768]" = torch.ops.aten.view.default(add_73, [512, 768])
        permute_88: "f32[768, 768]" = torch.ops.aten.permute.default(arg141_1, [1, 0]);  arg141_1 = None
        addmm_48: "f32[512, 768]" = torch.ops.aten.addmm.default(arg142_1, view_176, permute_88);  arg142_1 = view_176 = permute_88 = None
        view_177: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_48, [2, 256, 768]);  addmm_48 = None
        view_178: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_177, [2, 256, -1, 64]);  view_177 = None
        permute_89: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_178, [0, 2, 1, 3]);  view_178 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_179: "f32[512, 768]" = torch.ops.aten.view.default(add_73, [512, 768])
        permute_90: "f32[768, 768]" = torch.ops.aten.permute.default(arg143_1, [1, 0]);  arg143_1 = None
        addmm_49: "f32[512, 768]" = torch.ops.aten.addmm.default(arg144_1, view_179, permute_90);  arg144_1 = view_179 = permute_90 = None
        view_180: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_49, [2, 256, 768]);  addmm_49 = None
        view_181: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_180, [2, 256, -1, 64]);  view_180 = None
        permute_91: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_181, [0, 2, 1, 3]);  view_181 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_182: "f32[512, 768]" = torch.ops.aten.view.default(add_73, [512, 768])
        permute_92: "f32[768, 768]" = torch.ops.aten.permute.default(arg145_1, [1, 0]);  arg145_1 = None
        addmm_50: "f32[512, 768]" = torch.ops.aten.addmm.default(arg146_1, view_182, permute_92);  arg146_1 = view_182 = permute_92 = None
        view_183: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_50, [2, 256, 768]);  addmm_50 = None
        view_184: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_183, [2, 256, -1, 64]);  view_183 = None
        permute_93: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_184, [0, 2, 1, 3]);  view_184 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_94: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_91, [0, 1, 3, 2]);  permute_91 = None
        expand_32: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_89, [2, 12, 256, 64]);  permute_89 = None
        clone_57: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_32, memory_format = torch.contiguous_format);  expand_32 = None
        view_185: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_57, [24, 256, 64]);  clone_57 = None
        expand_33: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_94, [2, 12, 64, 256]);  permute_94 = None
        clone_58: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_33, memory_format = torch.contiguous_format);  expand_33 = None
        view_186: "f32[24, 64, 256]" = torch.ops.aten.view.default(clone_58, [24, 64, 256]);  clone_58 = None
        bmm_16: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_185, view_186);  view_185 = view_186 = None
        view_187: "f32[2, 12, 256, 256]" = torch.ops.aten.view.default(bmm_16, [2, 12, 256, 256]);  bmm_16 = None
        mul_67: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_187, 0.125);  view_187 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_74: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_67, mul);  mul_67 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_8: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_74, [-1], True)
        sub_28: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_74, amax_8);  add_74 = amax_8 = None
        exp_8: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_28);  sub_28 = None
        sum_9: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_8, [-1], True)
        div_8: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_8, sum_9);  exp_8 = sum_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_34: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_8, [2, 12, 256, 256]);  div_8 = None
        view_188: "f32[24, 256, 256]" = torch.ops.aten.view.default(expand_34, [24, 256, 256]);  expand_34 = None
        expand_35: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_93, [2, 12, 256, 64]);  permute_93 = None
        clone_60: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_35, memory_format = torch.contiguous_format);  expand_35 = None
        view_189: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_60, [24, 256, 64]);  clone_60 = None
        bmm_17: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_188, view_189);  view_188 = view_189 = None
        view_190: "f32[2, 12, 256, 64]" = torch.ops.aten.view.default(bmm_17, [2, 12, 256, 64]);  bmm_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_95: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_190, [0, 2, 1, 3]);  view_190 = None
        clone_61: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_95, memory_format = torch.contiguous_format);  permute_95 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_191: "f32[2, 256, 768]" = torch.ops.aten.view.default(clone_61, [2, 256, -1]);  clone_61 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_192: "f32[512, 768]" = torch.ops.aten.view.default(view_191, [512, 768]);  view_191 = None
        permute_96: "f32[768, 768]" = torch.ops.aten.permute.default(arg147_1, [1, 0]);  arg147_1 = None
        addmm_51: "f32[512, 768]" = torch.ops.aten.addmm.default(arg148_1, view_192, permute_96);  arg148_1 = view_192 = permute_96 = None
        view_193: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_51, [2, 256, 768]);  addmm_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_75: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_193, add_73);  view_193 = add_73 = None
        var_mean_17 = torch.ops.aten.var_mean.correction(add_75, [2], correction = 0, keepdim = True)
        getitem_34: "f32[2, 256, 1]" = var_mean_17[0]
        getitem_35: "f32[2, 256, 1]" = var_mean_17[1];  var_mean_17 = None
        add_76: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_34, 1e-12);  getitem_34 = None
        rsqrt_17: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_76);  add_76 = None
        sub_29: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_75, getitem_35);  add_75 = getitem_35 = None
        mul_68: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_29, rsqrt_17);  sub_29 = rsqrt_17 = None
        mul_69: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_68, arg149_1);  mul_68 = arg149_1 = None
        add_77: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_69, arg150_1);  mul_69 = arg150_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_194: "f32[512, 768]" = torch.ops.aten.view.default(add_77, [512, 768])
        permute_97: "f32[768, 3072]" = torch.ops.aten.permute.default(arg151_1, [1, 0]);  arg151_1 = None
        addmm_52: "f32[512, 3072]" = torch.ops.aten.addmm.default(arg152_1, view_194, permute_97);  arg152_1 = view_194 = permute_97 = None
        view_195: "f32[2, 256, 3072]" = torch.ops.aten.view.default(addmm_52, [2, 256, 3072]);  addmm_52 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_70: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_195, 0.5)
        mul_71: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_195, 0.7071067811865476);  view_195 = None
        erf_8: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_71);  mul_71 = None
        add_78: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_8, 1);  erf_8 = None
        mul_72: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_70, add_78);  mul_70 = add_78 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_196: "f32[512, 3072]" = torch.ops.aten.view.default(mul_72, [512, 3072]);  mul_72 = None
        permute_98: "f32[3072, 768]" = torch.ops.aten.permute.default(arg153_1, [1, 0]);  arg153_1 = None
        addmm_53: "f32[512, 768]" = torch.ops.aten.addmm.default(arg154_1, view_196, permute_98);  arg154_1 = view_196 = permute_98 = None
        view_197: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_53, [2, 256, 768]);  addmm_53 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_79: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_197, add_77);  view_197 = add_77 = None
        var_mean_18 = torch.ops.aten.var_mean.correction(add_79, [2], correction = 0, keepdim = True)
        getitem_36: "f32[2, 256, 1]" = var_mean_18[0]
        getitem_37: "f32[2, 256, 1]" = var_mean_18[1];  var_mean_18 = None
        add_80: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_36, 1e-12);  getitem_36 = None
        rsqrt_18: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_80);  add_80 = None
        sub_30: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_79, getitem_37);  add_79 = getitem_37 = None
        mul_73: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_30, rsqrt_18);  sub_30 = rsqrt_18 = None
        mul_74: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_73, arg155_1);  mul_73 = arg155_1 = None
        add_81: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_74, arg156_1);  mul_74 = arg156_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_198: "f32[512, 768]" = torch.ops.aten.view.default(add_81, [512, 768])
        permute_99: "f32[768, 768]" = torch.ops.aten.permute.default(arg157_1, [1, 0]);  arg157_1 = None
        addmm_54: "f32[512, 768]" = torch.ops.aten.addmm.default(arg158_1, view_198, permute_99);  arg158_1 = view_198 = permute_99 = None
        view_199: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_54, [2, 256, 768]);  addmm_54 = None
        view_200: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_199, [2, 256, -1, 64]);  view_199 = None
        permute_100: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_200, [0, 2, 1, 3]);  view_200 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_201: "f32[512, 768]" = torch.ops.aten.view.default(add_81, [512, 768])
        permute_101: "f32[768, 768]" = torch.ops.aten.permute.default(arg159_1, [1, 0]);  arg159_1 = None
        addmm_55: "f32[512, 768]" = torch.ops.aten.addmm.default(arg160_1, view_201, permute_101);  arg160_1 = view_201 = permute_101 = None
        view_202: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_55, [2, 256, 768]);  addmm_55 = None
        view_203: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_202, [2, 256, -1, 64]);  view_202 = None
        permute_102: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_203, [0, 2, 1, 3]);  view_203 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_204: "f32[512, 768]" = torch.ops.aten.view.default(add_81, [512, 768])
        permute_103: "f32[768, 768]" = torch.ops.aten.permute.default(arg161_1, [1, 0]);  arg161_1 = None
        addmm_56: "f32[512, 768]" = torch.ops.aten.addmm.default(arg162_1, view_204, permute_103);  arg162_1 = view_204 = permute_103 = None
        view_205: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_56, [2, 256, 768]);  addmm_56 = None
        view_206: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_205, [2, 256, -1, 64]);  view_205 = None
        permute_104: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_206, [0, 2, 1, 3]);  view_206 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_105: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_102, [0, 1, 3, 2]);  permute_102 = None
        expand_36: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_100, [2, 12, 256, 64]);  permute_100 = None
        clone_64: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_36, memory_format = torch.contiguous_format);  expand_36 = None
        view_207: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_64, [24, 256, 64]);  clone_64 = None
        expand_37: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_105, [2, 12, 64, 256]);  permute_105 = None
        clone_65: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_37, memory_format = torch.contiguous_format);  expand_37 = None
        view_208: "f32[24, 64, 256]" = torch.ops.aten.view.default(clone_65, [24, 64, 256]);  clone_65 = None
        bmm_18: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_207, view_208);  view_207 = view_208 = None
        view_209: "f32[2, 12, 256, 256]" = torch.ops.aten.view.default(bmm_18, [2, 12, 256, 256]);  bmm_18 = None
        mul_75: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_209, 0.125);  view_209 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_82: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_75, mul);  mul_75 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_9: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_82, [-1], True)
        sub_31: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_82, amax_9);  add_82 = amax_9 = None
        exp_9: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_31);  sub_31 = None
        sum_10: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_9, [-1], True)
        div_9: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_9, sum_10);  exp_9 = sum_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_38: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_9, [2, 12, 256, 256]);  div_9 = None
        view_210: "f32[24, 256, 256]" = torch.ops.aten.view.default(expand_38, [24, 256, 256]);  expand_38 = None
        expand_39: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_104, [2, 12, 256, 64]);  permute_104 = None
        clone_67: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_39, memory_format = torch.contiguous_format);  expand_39 = None
        view_211: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_67, [24, 256, 64]);  clone_67 = None
        bmm_19: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_210, view_211);  view_210 = view_211 = None
        view_212: "f32[2, 12, 256, 64]" = torch.ops.aten.view.default(bmm_19, [2, 12, 256, 64]);  bmm_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_106: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_212, [0, 2, 1, 3]);  view_212 = None
        clone_68: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_106, memory_format = torch.contiguous_format);  permute_106 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_213: "f32[2, 256, 768]" = torch.ops.aten.view.default(clone_68, [2, 256, -1]);  clone_68 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_214: "f32[512, 768]" = torch.ops.aten.view.default(view_213, [512, 768]);  view_213 = None
        permute_107: "f32[768, 768]" = torch.ops.aten.permute.default(arg163_1, [1, 0]);  arg163_1 = None
        addmm_57: "f32[512, 768]" = torch.ops.aten.addmm.default(arg164_1, view_214, permute_107);  arg164_1 = view_214 = permute_107 = None
        view_215: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_57, [2, 256, 768]);  addmm_57 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_83: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_215, add_81);  view_215 = add_81 = None
        var_mean_19 = torch.ops.aten.var_mean.correction(add_83, [2], correction = 0, keepdim = True)
        getitem_38: "f32[2, 256, 1]" = var_mean_19[0]
        getitem_39: "f32[2, 256, 1]" = var_mean_19[1];  var_mean_19 = None
        add_84: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_38, 1e-12);  getitem_38 = None
        rsqrt_19: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_84);  add_84 = None
        sub_32: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_83, getitem_39);  add_83 = getitem_39 = None
        mul_76: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_32, rsqrt_19);  sub_32 = rsqrt_19 = None
        mul_77: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_76, arg165_1);  mul_76 = arg165_1 = None
        add_85: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_77, arg166_1);  mul_77 = arg166_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_216: "f32[512, 768]" = torch.ops.aten.view.default(add_85, [512, 768])
        permute_108: "f32[768, 3072]" = torch.ops.aten.permute.default(arg167_1, [1, 0]);  arg167_1 = None
        addmm_58: "f32[512, 3072]" = torch.ops.aten.addmm.default(arg168_1, view_216, permute_108);  arg168_1 = view_216 = permute_108 = None
        view_217: "f32[2, 256, 3072]" = torch.ops.aten.view.default(addmm_58, [2, 256, 3072]);  addmm_58 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_78: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_217, 0.5)
        mul_79: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_217, 0.7071067811865476);  view_217 = None
        erf_9: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_79);  mul_79 = None
        add_86: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_9, 1);  erf_9 = None
        mul_80: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_78, add_86);  mul_78 = add_86 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_218: "f32[512, 3072]" = torch.ops.aten.view.default(mul_80, [512, 3072]);  mul_80 = None
        permute_109: "f32[3072, 768]" = torch.ops.aten.permute.default(arg169_1, [1, 0]);  arg169_1 = None
        addmm_59: "f32[512, 768]" = torch.ops.aten.addmm.default(arg170_1, view_218, permute_109);  arg170_1 = view_218 = permute_109 = None
        view_219: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_59, [2, 256, 768]);  addmm_59 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_87: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_219, add_85);  view_219 = add_85 = None
        var_mean_20 = torch.ops.aten.var_mean.correction(add_87, [2], correction = 0, keepdim = True)
        getitem_40: "f32[2, 256, 1]" = var_mean_20[0]
        getitem_41: "f32[2, 256, 1]" = var_mean_20[1];  var_mean_20 = None
        add_88: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_40, 1e-12);  getitem_40 = None
        rsqrt_20: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_88);  add_88 = None
        sub_33: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_87, getitem_41);  add_87 = getitem_41 = None
        mul_81: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_33, rsqrt_20);  sub_33 = rsqrt_20 = None
        mul_82: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_81, arg171_1);  mul_81 = arg171_1 = None
        add_89: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_82, arg172_1);  mul_82 = arg172_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_220: "f32[512, 768]" = torch.ops.aten.view.default(add_89, [512, 768])
        permute_110: "f32[768, 768]" = torch.ops.aten.permute.default(arg173_1, [1, 0]);  arg173_1 = None
        addmm_60: "f32[512, 768]" = torch.ops.aten.addmm.default(arg174_1, view_220, permute_110);  arg174_1 = view_220 = permute_110 = None
        view_221: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_60, [2, 256, 768]);  addmm_60 = None
        view_222: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_221, [2, 256, -1, 64]);  view_221 = None
        permute_111: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_222, [0, 2, 1, 3]);  view_222 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_223: "f32[512, 768]" = torch.ops.aten.view.default(add_89, [512, 768])
        permute_112: "f32[768, 768]" = torch.ops.aten.permute.default(arg175_1, [1, 0]);  arg175_1 = None
        addmm_61: "f32[512, 768]" = torch.ops.aten.addmm.default(arg176_1, view_223, permute_112);  arg176_1 = view_223 = permute_112 = None
        view_224: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_61, [2, 256, 768]);  addmm_61 = None
        view_225: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_224, [2, 256, -1, 64]);  view_224 = None
        permute_113: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_225, [0, 2, 1, 3]);  view_225 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_226: "f32[512, 768]" = torch.ops.aten.view.default(add_89, [512, 768])
        permute_114: "f32[768, 768]" = torch.ops.aten.permute.default(arg177_1, [1, 0]);  arg177_1 = None
        addmm_62: "f32[512, 768]" = torch.ops.aten.addmm.default(arg178_1, view_226, permute_114);  arg178_1 = view_226 = permute_114 = None
        view_227: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_62, [2, 256, 768]);  addmm_62 = None
        view_228: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_227, [2, 256, -1, 64]);  view_227 = None
        permute_115: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_228, [0, 2, 1, 3]);  view_228 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_116: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_113, [0, 1, 3, 2]);  permute_113 = None
        expand_40: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_111, [2, 12, 256, 64]);  permute_111 = None
        clone_71: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_40, memory_format = torch.contiguous_format);  expand_40 = None
        view_229: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_71, [24, 256, 64]);  clone_71 = None
        expand_41: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_116, [2, 12, 64, 256]);  permute_116 = None
        clone_72: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_41, memory_format = torch.contiguous_format);  expand_41 = None
        view_230: "f32[24, 64, 256]" = torch.ops.aten.view.default(clone_72, [24, 64, 256]);  clone_72 = None
        bmm_20: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_229, view_230);  view_229 = view_230 = None
        view_231: "f32[2, 12, 256, 256]" = torch.ops.aten.view.default(bmm_20, [2, 12, 256, 256]);  bmm_20 = None
        mul_83: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_231, 0.125);  view_231 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_90: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_83, mul);  mul_83 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_10: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_90, [-1], True)
        sub_34: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_90, amax_10);  add_90 = amax_10 = None
        exp_10: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_34);  sub_34 = None
        sum_11: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_10, [-1], True)
        div_10: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_10, sum_11);  exp_10 = sum_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_42: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_10, [2, 12, 256, 256]);  div_10 = None
        view_232: "f32[24, 256, 256]" = torch.ops.aten.view.default(expand_42, [24, 256, 256]);  expand_42 = None
        expand_43: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_115, [2, 12, 256, 64]);  permute_115 = None
        clone_74: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_43, memory_format = torch.contiguous_format);  expand_43 = None
        view_233: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_74, [24, 256, 64]);  clone_74 = None
        bmm_21: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_232, view_233);  view_232 = view_233 = None
        view_234: "f32[2, 12, 256, 64]" = torch.ops.aten.view.default(bmm_21, [2, 12, 256, 64]);  bmm_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_117: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_234, [0, 2, 1, 3]);  view_234 = None
        clone_75: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_117, memory_format = torch.contiguous_format);  permute_117 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_235: "f32[2, 256, 768]" = torch.ops.aten.view.default(clone_75, [2, 256, -1]);  clone_75 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_236: "f32[512, 768]" = torch.ops.aten.view.default(view_235, [512, 768]);  view_235 = None
        permute_118: "f32[768, 768]" = torch.ops.aten.permute.default(arg179_1, [1, 0]);  arg179_1 = None
        addmm_63: "f32[512, 768]" = torch.ops.aten.addmm.default(arg180_1, view_236, permute_118);  arg180_1 = view_236 = permute_118 = None
        view_237: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_63, [2, 256, 768]);  addmm_63 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_91: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_237, add_89);  view_237 = add_89 = None
        var_mean_21 = torch.ops.aten.var_mean.correction(add_91, [2], correction = 0, keepdim = True)
        getitem_42: "f32[2, 256, 1]" = var_mean_21[0]
        getitem_43: "f32[2, 256, 1]" = var_mean_21[1];  var_mean_21 = None
        add_92: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_42, 1e-12);  getitem_42 = None
        rsqrt_21: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_92);  add_92 = None
        sub_35: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_91, getitem_43);  add_91 = getitem_43 = None
        mul_84: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_35, rsqrt_21);  sub_35 = rsqrt_21 = None
        mul_85: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_84, arg181_1);  mul_84 = arg181_1 = None
        add_93: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_85, arg182_1);  mul_85 = arg182_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_238: "f32[512, 768]" = torch.ops.aten.view.default(add_93, [512, 768])
        permute_119: "f32[768, 3072]" = torch.ops.aten.permute.default(arg183_1, [1, 0]);  arg183_1 = None
        addmm_64: "f32[512, 3072]" = torch.ops.aten.addmm.default(arg184_1, view_238, permute_119);  arg184_1 = view_238 = permute_119 = None
        view_239: "f32[2, 256, 3072]" = torch.ops.aten.view.default(addmm_64, [2, 256, 3072]);  addmm_64 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_86: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_239, 0.5)
        mul_87: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_239, 0.7071067811865476);  view_239 = None
        erf_10: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_87);  mul_87 = None
        add_94: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_10, 1);  erf_10 = None
        mul_88: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_86, add_94);  mul_86 = add_94 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_240: "f32[512, 3072]" = torch.ops.aten.view.default(mul_88, [512, 3072]);  mul_88 = None
        permute_120: "f32[3072, 768]" = torch.ops.aten.permute.default(arg185_1, [1, 0]);  arg185_1 = None
        addmm_65: "f32[512, 768]" = torch.ops.aten.addmm.default(arg186_1, view_240, permute_120);  arg186_1 = view_240 = permute_120 = None
        view_241: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_65, [2, 256, 768]);  addmm_65 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_95: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_241, add_93);  view_241 = add_93 = None
        var_mean_22 = torch.ops.aten.var_mean.correction(add_95, [2], correction = 0, keepdim = True)
        getitem_44: "f32[2, 256, 1]" = var_mean_22[0]
        getitem_45: "f32[2, 256, 1]" = var_mean_22[1];  var_mean_22 = None
        add_96: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_44, 1e-12);  getitem_44 = None
        rsqrt_22: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_96);  add_96 = None
        sub_36: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_95, getitem_45);  add_95 = getitem_45 = None
        mul_89: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_36, rsqrt_22);  sub_36 = rsqrt_22 = None
        mul_90: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_89, arg187_1);  mul_89 = arg187_1 = None
        add_97: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_90, arg188_1);  mul_90 = arg188_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_242: "f32[512, 768]" = torch.ops.aten.view.default(add_97, [512, 768])
        permute_121: "f32[768, 768]" = torch.ops.aten.permute.default(arg189_1, [1, 0]);  arg189_1 = None
        addmm_66: "f32[512, 768]" = torch.ops.aten.addmm.default(arg190_1, view_242, permute_121);  arg190_1 = view_242 = permute_121 = None
        view_243: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_66, [2, 256, 768]);  addmm_66 = None
        view_244: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_243, [2, 256, -1, 64]);  view_243 = None
        permute_122: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_244, [0, 2, 1, 3]);  view_244 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_245: "f32[512, 768]" = torch.ops.aten.view.default(add_97, [512, 768])
        permute_123: "f32[768, 768]" = torch.ops.aten.permute.default(arg191_1, [1, 0]);  arg191_1 = None
        addmm_67: "f32[512, 768]" = torch.ops.aten.addmm.default(arg192_1, view_245, permute_123);  arg192_1 = view_245 = permute_123 = None
        view_246: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_67, [2, 256, 768]);  addmm_67 = None
        view_247: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_246, [2, 256, -1, 64]);  view_246 = None
        permute_124: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_247, [0, 2, 1, 3]);  view_247 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_248: "f32[512, 768]" = torch.ops.aten.view.default(add_97, [512, 768])
        permute_125: "f32[768, 768]" = torch.ops.aten.permute.default(arg193_1, [1, 0]);  arg193_1 = None
        addmm_68: "f32[512, 768]" = torch.ops.aten.addmm.default(arg194_1, view_248, permute_125);  arg194_1 = view_248 = permute_125 = None
        view_249: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_68, [2, 256, 768]);  addmm_68 = None
        view_250: "f32[2, 256, 12, 64]" = torch.ops.aten.view.default(view_249, [2, 256, -1, 64]);  view_249 = None
        permute_126: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_250, [0, 2, 1, 3]);  view_250 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_127: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_124, [0, 1, 3, 2]);  permute_124 = None
        expand_44: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_122, [2, 12, 256, 64]);  permute_122 = None
        clone_78: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_44, memory_format = torch.contiguous_format);  expand_44 = None
        view_251: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_78, [24, 256, 64]);  clone_78 = None
        expand_45: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_127, [2, 12, 64, 256]);  permute_127 = None
        clone_79: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_45, memory_format = torch.contiguous_format);  expand_45 = None
        view_252: "f32[24, 64, 256]" = torch.ops.aten.view.default(clone_79, [24, 64, 256]);  clone_79 = None
        bmm_22: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_251, view_252);  view_251 = view_252 = None
        view_253: "f32[2, 12, 256, 256]" = torch.ops.aten.view.default(bmm_22, [2, 12, 256, 256]);  bmm_22 = None
        mul_91: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_253, 0.125);  view_253 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_98: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_91, mul);  mul_91 = mul = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_11: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_98, [-1], True)
        sub_37: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_98, amax_11);  add_98 = amax_11 = None
        exp_11: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_37);  sub_37 = None
        sum_12: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_11, [-1], True)
        div_11: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_11, sum_12);  exp_11 = sum_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_46: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_11, [2, 12, 256, 256]);  div_11 = None
        view_254: "f32[24, 256, 256]" = torch.ops.aten.view.default(expand_46, [24, 256, 256]);  expand_46 = None
        expand_47: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_126, [2, 12, 256, 64]);  permute_126 = None
        clone_81: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_47, memory_format = torch.contiguous_format);  expand_47 = None
        view_255: "f32[24, 256, 64]" = torch.ops.aten.view.default(clone_81, [24, 256, 64]);  clone_81 = None
        bmm_23: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_254, view_255);  view_254 = view_255 = None
        view_256: "f32[2, 12, 256, 64]" = torch.ops.aten.view.default(bmm_23, [2, 12, 256, 64]);  bmm_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_128: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_256, [0, 2, 1, 3]);  view_256 = None
        clone_82: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_128, memory_format = torch.contiguous_format);  permute_128 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_257: "f32[2, 256, 768]" = torch.ops.aten.view.default(clone_82, [2, 256, -1]);  clone_82 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_258: "f32[512, 768]" = torch.ops.aten.view.default(view_257, [512, 768]);  view_257 = None
        permute_129: "f32[768, 768]" = torch.ops.aten.permute.default(arg195_1, [1, 0]);  arg195_1 = None
        addmm_69: "f32[512, 768]" = torch.ops.aten.addmm.default(arg196_1, view_258, permute_129);  arg196_1 = view_258 = permute_129 = None
        view_259: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_69, [2, 256, 768]);  addmm_69 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_99: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_259, add_97);  view_259 = add_97 = None
        var_mean_23 = torch.ops.aten.var_mean.correction(add_99, [2], correction = 0, keepdim = True)
        getitem_46: "f32[2, 256, 1]" = var_mean_23[0]
        getitem_47: "f32[2, 256, 1]" = var_mean_23[1];  var_mean_23 = None
        add_100: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_46, 1e-12);  getitem_46 = None
        rsqrt_23: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_100);  add_100 = None
        sub_38: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_99, getitem_47);  add_99 = getitem_47 = None
        mul_92: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_38, rsqrt_23);  sub_38 = rsqrt_23 = None
        mul_93: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_92, arg197_1);  mul_92 = arg197_1 = None
        add_101: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_93, arg198_1);  mul_93 = arg198_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_260: "f32[512, 768]" = torch.ops.aten.view.default(add_101, [512, 768])
        permute_130: "f32[768, 3072]" = torch.ops.aten.permute.default(arg199_1, [1, 0]);  arg199_1 = None
        addmm_70: "f32[512, 3072]" = torch.ops.aten.addmm.default(arg200_1, view_260, permute_130);  arg200_1 = view_260 = permute_130 = None
        view_261: "f32[2, 256, 3072]" = torch.ops.aten.view.default(addmm_70, [2, 256, 3072]);  addmm_70 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_94: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_261, 0.5)
        mul_95: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_261, 0.7071067811865476);  view_261 = None
        erf_11: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_95);  mul_95 = None
        add_102: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_11, 1);  erf_11 = None
        mul_96: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_94, add_102);  mul_94 = add_102 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_262: "f32[512, 3072]" = torch.ops.aten.view.default(mul_96, [512, 3072]);  mul_96 = None
        permute_131: "f32[3072, 768]" = torch.ops.aten.permute.default(arg201_1, [1, 0]);  arg201_1 = None
        addmm_71: "f32[512, 768]" = torch.ops.aten.addmm.default(arg202_1, view_262, permute_131);  arg202_1 = view_262 = permute_131 = None
        view_263: "f32[2, 256, 768]" = torch.ops.aten.view.default(addmm_71, [2, 256, 768]);  addmm_71 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_103: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_263, add_101);  view_263 = add_101 = None
        var_mean_24 = torch.ops.aten.var_mean.correction(add_103, [2], correction = 0, keepdim = True)
        getitem_48: "f32[2, 256, 1]" = var_mean_24[0]
        getitem_49: "f32[2, 256, 1]" = var_mean_24[1];  var_mean_24 = None
        add_104: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_48, 1e-12);  getitem_48 = None
        rsqrt_24: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_104);  add_104 = None
        sub_39: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_103, getitem_49);  add_103 = getitem_49 = None
        mul_97: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_39, rsqrt_24);  sub_39 = rsqrt_24 = None
        mul_98: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_97, arg203_1);  mul_97 = arg203_1 = None
        add_105: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_98, arg204_1);  mul_98 = arg204_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:401 in forward, code: first_token_tensor = hidden_states[:, 0]
        select_8: "f32[2, 768]" = torch.ops.aten.select.int(add_105, 1, 0)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:402 in forward, code: pooled_output = self.dense(first_token_tensor)
        permute_132: "f32[768, 768]" = torch.ops.aten.permute.default(arg205_1, [1, 0]);  arg205_1 = None
        addmm_72: "f32[2, 768]" = torch.ops.aten.addmm.default(arg206_1, select_8, permute_132);  arg206_1 = select_8 = permute_132 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:403 in forward, code: pooled_output = self.activation(pooled_output)
        tanh: "f32[2, 768]" = torch.ops.aten.tanh.default(addmm_72);  addmm_72 = None
        return (add_105, tanh)
        

# ===== run_2025_10_19_04_14_08_043050-pid_19/torchinductor/model__1_inference_1.1/fx_graph_runnable.py =====

import torch
from torch import tensor, device
import torch.fx as fx
from torch._dynamo.testing import rand_strided
from math import inf
import torch._inductor.inductor_prims

import torch._dynamo.config
import torch._inductor.config
import torch._functorch.config
import torch.fx.experimental._config
torch._dynamo.config.traceable_tensor_subclasses = set()
torch._dynamo.config.allowed_functions_module_string_ignorelist = {'torch._decomp', 'torch._prims', 'torch._refs', 'torch.testing', 'torch.distributions'}
torch._dynamo.config._ddp_optimization_mode = ['ddp_optimizer', 'python_reducer', 'python_reducer_without_compiled_forward', 'no_optimization']
torch._dynamo.config._save_config_ignore = {'constant_functions', 'repro_level', 'skipfiles_inline_module_allowlist', 'repro_after'}
torch._dynamo.config.reorderable_logging_functions = set()
torch._dynamo.config.ignore_logger_methods = set()
torch._dynamo.config._autograd_backward_strict_mode_banned_ops = ['stride', 'requires_grad', 'storage_offset', 'layout', 'data', 'is_coalesced', 'is_complex', 'is_conj', 'is_contiguous', 'is_cpu', 'is_cuda', 'is_distributed', 'is_floating_point', 'is_inference', 'is_ipu', 'is_leaf', 'is_maia', 'is_meta', 'is_mkldnn', 'is_mps', 'is_mtia', 'is_neg', 'is_nested', 'is_nonzero', 'is_pinned', 'is_quantized', 'is_same_size', 'is_set_to', 'is_shared', 'is_signed', 'is_sparse', 'is_sparse_csr', 'is_vulkan', 'is_xla', 'is_xpu']
torch._dynamo.config.compiled_autograd_kwargs_override = {}
torch._inductor.config.pre_grad_fusion_options = {}
torch._inductor.config.post_grad_fusion_options = {}
torch._inductor.config.fx_passes_numeric_check = {'pre_grad': False, 'precision': 0.0001, 'num_iterations': 1, 'requires_optimizer': True}
torch._inductor.config.reorder_for_compute_comm_overlap_passes = ['reorder_compute_for_overlap', 'sink_waits', 'raise_comms']
torch._inductor.config.max_autotune = True
torch._inductor.config.coordinate_descent_tuning = True
torch._inductor.config._fuse_ddp_communication_passes = ['fuse_ddp_with_concat_op', 'schedule_comm_wait']
torch._inductor.config.triton.cudagraphs = True
torch._inductor.config.aot_inductor.metadata = {}
torch._inductor.config.aot_inductor.presets = {}
torch._inductor.config.rocm.arch = []
torch._inductor.config.rocm.ck_supported_arch = ['gfx90a', 'gfx940', 'gfx941', 'gfx942']
torch._inductor.config.trace.enabled = False
torch._inductor.config.trace.save_real_tensors = False
torch._inductor.config._save_config_ignore = ['trace.upload_tar', 'joint_custom_pre_pass', 'joint_custom_post_pass', 'pre_grad_custom_pass']
torch._inductor.config._cache_config_ignore_prefix = ['trace', 'cuda.cutlass_dir', 'worker_start_method', 'compile_threads', 'post_grad_custom_post_pass', 'post_grad_custom_pre_pass', 'always_complex_memory_overlap_TESTING_ONLY']
torch._inductor.config.external_matmul = []
torch._functorch.config.functionalize_rng_ops = False
torch._functorch.config.debug_partitioner = True
torch._functorch.config.fake_tensor_allow_unsafe_data_ptr_access = True
torch._functorch.config.unlift_effect_tokens = True



isolate_fails_code_str = None




# torch version: 2.6.0+cu124
# torch cuda version: 12.4
# torch git version: 2236df1770800ffea5697b11b0bb0d910b2e59e1


# CUDA Info: 
# nvcc: NVIDIA (R) Cuda compiler driver 
# Copyright (c) 2005-2024 NVIDIA Corporation 
# Built on Thu_Jun__6_02:18:23_PDT_2024 
# Cuda compilation tools, release 12.5, V12.5.82 
# Build cuda_12.5.r12.5/compiler.34385749_0 

# GPU Hardware Info: 
# Tesla T4 : 2 


from torch.nn import *
class Repro(torch.nn.Module):
    def __init__(self) -> None:
        super().__init__()

    
    
    def forward(self, arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1, arg7_1, arg8_1, arg9_1, arg10_1, arg11_1, arg12_1, arg13_1, arg14_1, arg15_1, arg16_1, arg17_1, arg18_1, arg19_1, arg20_1, arg21_1, arg22_1, arg23_1, arg24_1, arg25_1, arg26_1, arg27_1, arg28_1, arg29_1, arg30_1, arg31_1, arg32_1, arg33_1, arg34_1, arg35_1, arg36_1, arg37_1, arg38_1, arg39_1, arg40_1, arg41_1, arg42_1, arg43_1, arg44_1, arg45_1, arg46_1, arg47_1, arg48_1, arg49_1, arg50_1, arg51_1, arg52_1, arg53_1, arg54_1, arg55_1, arg56_1, arg57_1, arg58_1, arg59_1, arg60_1, arg61_1, arg62_1, arg63_1, arg64_1, arg65_1, arg66_1, arg67_1, arg68_1, arg69_1, arg70_1, arg71_1, arg72_1, arg73_1, arg74_1, arg75_1, arg76_1, arg77_1, arg78_1, arg79_1, arg80_1, arg81_1, arg82_1, arg83_1, arg84_1, arg85_1, arg86_1, arg87_1, arg88_1, arg89_1, arg90_1, arg91_1, arg92_1, arg93_1, arg94_1, arg95_1, arg96_1, arg97_1, arg98_1, arg99_1, arg100_1, arg101_1, arg102_1, arg103_1, arg104_1, arg105_1, arg106_1, arg107_1, arg108_1, arg109_1, arg110_1, arg111_1, arg112_1, arg113_1, arg114_1, arg115_1, arg116_1, arg117_1, arg118_1, arg119_1, arg120_1, arg121_1, arg122_1, arg123_1, arg124_1, arg125_1, arg126_1, arg127_1, arg128_1, arg129_1, arg130_1, arg131_1, arg132_1, arg133_1, arg134_1, arg135_1, arg136_1, arg137_1, arg138_1, arg139_1, arg140_1, arg141_1, arg142_1, arg143_1, arg144_1, arg145_1, arg146_1, arg147_1, arg148_1, arg149_1, arg150_1, arg151_1, arg152_1, arg153_1, arg154_1, arg155_1, arg156_1, arg157_1, arg158_1, arg159_1, arg160_1, arg161_1, arg162_1, arg163_1, arg164_1, arg165_1, arg166_1, arg167_1, arg168_1, arg169_1, arg170_1, arg171_1, arg172_1, arg173_1, arg174_1, arg175_1, arg176_1, arg177_1, arg178_1, arg179_1, arg180_1, arg181_1, arg182_1, arg183_1, arg184_1, arg185_1, arg186_1, arg187_1, arg188_1, arg189_1, arg190_1, arg191_1, arg192_1, arg193_1, arg194_1, arg195_1, arg196_1, arg197_1, arg198_1, arg199_1, arg200_1, arg201_1, arg202_1, arg203_1, arg204_1, arg205_1, arg206_1, arg207_1):
        unsqueeze = torch.ops.aten.unsqueeze.default(arg1_1, 1);  arg1_1 = None
        unsqueeze_1 = torch.ops.aten.unsqueeze.default(unsqueeze, 2);  unsqueeze = None
        convert_element_type = torch.ops.prims.convert_element_type.default(unsqueeze_1, torch.float32);  unsqueeze_1 = None
        sub = torch.ops.aten.sub.Tensor(1.0, convert_element_type);  convert_element_type = None
        mul = torch.ops.aten.mul.Tensor(sub, -3.4028234663852886e+38);  sub = None
        slice_2 = torch.ops.aten.slice.Tensor(arg207_1, 1, 0, 256);  arg207_1 = None
        embedding = torch.ops.aten.embedding.default(arg4_1, arg0_1, 0);  arg4_1 = arg0_1 = None
        embedding_1 = torch.ops.aten.embedding.default(arg5_1, slice_2);  arg5_1 = slice_2 = None
        select = torch.ops.aten.select.int(arg3_1, 2, 0)
        embedding_2 = torch.ops.aten.embedding.default(arg6_1, select);  select = None
        select_1 = torch.ops.aten.select.int(arg3_1, 2, 1)
        embedding_3 = torch.ops.aten.embedding.default(arg7_1, select_1);  select_1 = None
        select_2 = torch.ops.aten.select.int(arg3_1, 2, 2)
        embedding_4 = torch.ops.aten.embedding.default(arg6_1, select_2);  arg6_1 = select_2 = None
        select_3 = torch.ops.aten.select.int(arg3_1, 2, 3)
        embedding_5 = torch.ops.aten.embedding.default(arg7_1, select_3);  arg7_1 = select_3 = None
        select_4 = torch.ops.aten.select.int(arg3_1, 2, 3)
        select_5 = torch.ops.aten.select.int(arg3_1, 2, 1)
        sub_1 = torch.ops.aten.sub.Tensor(select_4, select_5);  select_4 = select_5 = None
        embedding_6 = torch.ops.aten.embedding.default(arg8_1, sub_1);  arg8_1 = sub_1 = None
        select_6 = torch.ops.aten.select.int(arg3_1, 2, 2)
        select_7 = torch.ops.aten.select.int(arg3_1, 2, 0);  arg3_1 = None
        sub_2 = torch.ops.aten.sub.Tensor(select_6, select_7);  select_6 = select_7 = None
        embedding_7 = torch.ops.aten.embedding.default(arg9_1, sub_2);  arg9_1 = sub_2 = None
        embedding_8 = torch.ops.aten.embedding.default(arg10_1, arg2_1);  arg10_1 = arg2_1 = None
        add = torch.ops.aten.add.Tensor(embedding, embedding_1);  embedding = embedding_1 = None
        add_1 = torch.ops.aten.add.Tensor(add, embedding_2);  add = embedding_2 = None
        add_2 = torch.ops.aten.add.Tensor(add_1, embedding_3);  add_1 = embedding_3 = None
        add_3 = torch.ops.aten.add.Tensor(add_2, embedding_4);  add_2 = embedding_4 = None
        add_4 = torch.ops.aten.add.Tensor(add_3, embedding_5);  add_3 = embedding_5 = None
        add_5 = torch.ops.aten.add.Tensor(add_4, embedding_6);  add_4 = embedding_6 = None
        add_6 = torch.ops.aten.add.Tensor(add_5, embedding_7);  add_5 = embedding_7 = None
        add_7 = torch.ops.aten.add.Tensor(add_6, embedding_8);  add_6 = embedding_8 = None
        var_mean = torch.ops.aten.var_mean.correction(add_7, [2], correction = 0, keepdim = True)
        getitem = var_mean[0]
        getitem_1 = var_mean[1];  var_mean = None
        add_8 = torch.ops.aten.add.Tensor(getitem, 1e-12);  getitem = None
        rsqrt = torch.ops.aten.rsqrt.default(add_8);  add_8 = None
        sub_3 = torch.ops.aten.sub.Tensor(add_7, getitem_1);  add_7 = getitem_1 = None
        mul_1 = torch.ops.aten.mul.Tensor(sub_3, rsqrt);  sub_3 = rsqrt = None
        mul_2 = torch.ops.aten.mul.Tensor(mul_1, arg11_1);  mul_1 = arg11_1 = None
        add_9 = torch.ops.aten.add.Tensor(mul_2, arg12_1);  mul_2 = arg12_1 = None
        view = torch.ops.aten.view.default(add_9, [512, 768])
        permute = torch.ops.aten.permute.default(arg13_1, [1, 0]);  arg13_1 = None
        addmm = torch.ops.aten.addmm.default(arg14_1, view, permute);  arg14_1 = view = permute = None
        view_1 = torch.ops.aten.view.default(addmm, [2, 256, 768]);  addmm = None
        view_2 = torch.ops.aten.view.default(view_1, [2, 256, -1, 64]);  view_1 = None
        permute_1 = torch.ops.aten.permute.default(view_2, [0, 2, 1, 3]);  view_2 = None
        view_3 = torch.ops.aten.view.default(add_9, [512, 768])
        permute_2 = torch.ops.aten.permute.default(arg15_1, [1, 0]);  arg15_1 = None
        addmm_1 = torch.ops.aten.addmm.default(arg16_1, view_3, permute_2);  arg16_1 = view_3 = permute_2 = None
        view_4 = torch.ops.aten.view.default(addmm_1, [2, 256, 768]);  addmm_1 = None
        view_5 = torch.ops.aten.view.default(view_4, [2, 256, -1, 64]);  view_4 = None
        permute_3 = torch.ops.aten.permute.default(view_5, [0, 2, 1, 3]);  view_5 = None
        view_6 = torch.ops.aten.view.default(add_9, [512, 768])
        permute_4 = torch.ops.aten.permute.default(arg17_1, [1, 0]);  arg17_1 = None
        addmm_2 = torch.ops.aten.addmm.default(arg18_1, view_6, permute_4);  arg18_1 = view_6 = permute_4 = None
        view_7 = torch.ops.aten.view.default(addmm_2, [2, 256, 768]);  addmm_2 = None
        view_8 = torch.ops.aten.view.default(view_7, [2, 256, -1, 64]);  view_7 = None
        permute_5 = torch.ops.aten.permute.default(view_8, [0, 2, 1, 3]);  view_8 = None
        permute_6 = torch.ops.aten.permute.default(permute_3, [0, 1, 3, 2]);  permute_3 = None
        expand = torch.ops.aten.expand.default(permute_1, [2, 12, 256, 64]);  permute_1 = None
        clone_1 = torch.ops.aten.clone.default(expand, memory_format = torch.contiguous_format);  expand = None
        view_9 = torch.ops.aten.view.default(clone_1, [24, 256, 64]);  clone_1 = None
        expand_1 = torch.ops.aten.expand.default(permute_6, [2, 12, 64, 256]);  permute_6 = None
        clone_2 = torch.ops.aten.clone.default(expand_1, memory_format = torch.contiguous_format);  expand_1 = None
        view_10 = torch.ops.aten.view.default(clone_2, [24, 64, 256]);  clone_2 = None
        bmm = torch.ops.aten.bmm.default(view_9, view_10);  view_9 = view_10 = None
        view_11 = torch.ops.aten.view.default(bmm, [2, 12, 256, 256]);  bmm = None
        mul_3 = torch.ops.aten.mul.Tensor(view_11, 0.125);  view_11 = None
        add_10 = torch.ops.aten.add.Tensor(mul_3, mul);  mul_3 = None
        amax = torch.ops.aten.amax.default(add_10, [-1], True)
        sub_4 = torch.ops.aten.sub.Tensor(add_10, amax);  add_10 = amax = None
        exp = torch.ops.aten.exp.default(sub_4);  sub_4 = None
        sum_1 = torch.ops.aten.sum.dim_IntList(exp, [-1], True)
        div = torch.ops.aten.div.Tensor(exp, sum_1);  exp = sum_1 = None
        expand_2 = torch.ops.aten.expand.default(div, [2, 12, 256, 256]);  div = None
        view_12 = torch.ops.aten.view.default(expand_2, [24, 256, 256]);  expand_2 = None
        expand_3 = torch.ops.aten.expand.default(permute_5, [2, 12, 256, 64]);  permute_5 = None
        clone_4 = torch.ops.aten.clone.default(expand_3, memory_format = torch.contiguous_format);  expand_3 = None
        view_13 = torch.ops.aten.view.default(clone_4, [24, 256, 64]);  clone_4 = None
        bmm_1 = torch.ops.aten.bmm.default(view_12, view_13);  view_12 = view_13 = None
        view_14 = torch.ops.aten.view.default(bmm_1, [2, 12, 256, 64]);  bmm_1 = None
        permute_7 = torch.ops.aten.permute.default(view_14, [0, 2, 1, 3]);  view_14 = None
        clone_5 = torch.ops.aten.clone.default(permute_7, memory_format = torch.contiguous_format);  permute_7 = None
        view_15 = torch.ops.aten.view.default(clone_5, [2, 256, -1]);  clone_5 = None
        view_16 = torch.ops.aten.view.default(view_15, [512, 768]);  view_15 = None
        permute_8 = torch.ops.aten.permute.default(arg19_1, [1, 0]);  arg19_1 = None
        addmm_3 = torch.ops.aten.addmm.default(arg20_1, view_16, permute_8);  arg20_1 = view_16 = permute_8 = None
        view_17 = torch.ops.aten.view.default(addmm_3, [2, 256, 768]);  addmm_3 = None
        add_11 = torch.ops.aten.add.Tensor(view_17, add_9);  view_17 = add_9 = None
        var_mean_1 = torch.ops.aten.var_mean.correction(add_11, [2], correction = 0, keepdim = True)
        getitem_2 = var_mean_1[0]
        getitem_3 = var_mean_1[1];  var_mean_1 = None
        add_12 = torch.ops.aten.add.Tensor(getitem_2, 1e-12);  getitem_2 = None
        rsqrt_1 = torch.ops.aten.rsqrt.default(add_12);  add_12 = None
        sub_5 = torch.ops.aten.sub.Tensor(add_11, getitem_3);  add_11 = getitem_3 = None
        mul_4 = torch.ops.aten.mul.Tensor(sub_5, rsqrt_1);  sub_5 = rsqrt_1 = None
        mul_5 = torch.ops.aten.mul.Tensor(mul_4, arg21_1);  mul_4 = arg21_1 = None
        add_13 = torch.ops.aten.add.Tensor(mul_5, arg22_1);  mul_5 = arg22_1 = None
        view_18 = torch.ops.aten.view.default(add_13, [512, 768])
        permute_9 = torch.ops.aten.permute.default(arg23_1, [1, 0]);  arg23_1 = None
        addmm_4 = torch.ops.aten.addmm.default(arg24_1, view_18, permute_9);  arg24_1 = view_18 = permute_9 = None
        view_19 = torch.ops.aten.view.default(addmm_4, [2, 256, 3072]);  addmm_4 = None
        mul_6 = torch.ops.aten.mul.Tensor(view_19, 0.5)
        mul_7 = torch.ops.aten.mul.Tensor(view_19, 0.7071067811865476);  view_19 = None
        erf = torch.ops.aten.erf.default(mul_7);  mul_7 = None
        add_14 = torch.ops.aten.add.Tensor(erf, 1);  erf = None
        mul_8 = torch.ops.aten.mul.Tensor(mul_6, add_14);  mul_6 = add_14 = None
        view_20 = torch.ops.aten.view.default(mul_8, [512, 3072]);  mul_8 = None
        permute_10 = torch.ops.aten.permute.default(arg25_1, [1, 0]);  arg25_1 = None
        addmm_5 = torch.ops.aten.addmm.default(arg26_1, view_20, permute_10);  arg26_1 = view_20 = permute_10 = None
        view_21 = torch.ops.aten.view.default(addmm_5, [2, 256, 768]);  addmm_5 = None
        add_15 = torch.ops.aten.add.Tensor(view_21, add_13);  view_21 = add_13 = None
        var_mean_2 = torch.ops.aten.var_mean.correction(add_15, [2], correction = 0, keepdim = True)
        getitem_4 = var_mean_2[0]
        getitem_5 = var_mean_2[1];  var_mean_2 = None
        add_16 = torch.ops.aten.add.Tensor(getitem_4, 1e-12);  getitem_4 = None
        rsqrt_2 = torch.ops.aten.rsqrt.default(add_16);  add_16 = None
        sub_6 = torch.ops.aten.sub.Tensor(add_15, getitem_5);  add_15 = getitem_5 = None
        mul_9 = torch.ops.aten.mul.Tensor(sub_6, rsqrt_2);  sub_6 = rsqrt_2 = None
        mul_10 = torch.ops.aten.mul.Tensor(mul_9, arg27_1);  mul_9 = arg27_1 = None
        add_17 = torch.ops.aten.add.Tensor(mul_10, arg28_1);  mul_10 = arg28_1 = None
        view_22 = torch.ops.aten.view.default(add_17, [512, 768])
        permute_11 = torch.ops.aten.permute.default(arg29_1, [1, 0]);  arg29_1 = None
        addmm_6 = torch.ops.aten.addmm.default(arg30_1, view_22, permute_11);  arg30_1 = view_22 = permute_11 = None
        view_23 = torch.ops.aten.view.default(addmm_6, [2, 256, 768]);  addmm_6 = None
        view_24 = torch.ops.aten.view.default(view_23, [2, 256, -1, 64]);  view_23 = None
        permute_12 = torch.ops.aten.permute.default(view_24, [0, 2, 1, 3]);  view_24 = None
        view_25 = torch.ops.aten.view.default(add_17, [512, 768])
        permute_13 = torch.ops.aten.permute.default(arg31_1, [1, 0]);  arg31_1 = None
        addmm_7 = torch.ops.aten.addmm.default(arg32_1, view_25, permute_13);  arg32_1 = view_25 = permute_13 = None
        view_26 = torch.ops.aten.view.default(addmm_7, [2, 256, 768]);  addmm_7 = None
        view_27 = torch.ops.aten.view.default(view_26, [2, 256, -1, 64]);  view_26 = None
        permute_14 = torch.ops.aten.permute.default(view_27, [0, 2, 1, 3]);  view_27 = None
        view_28 = torch.ops.aten.view.default(add_17, [512, 768])
        permute_15 = torch.ops.aten.permute.default(arg33_1, [1, 0]);  arg33_1 = None
        addmm_8 = torch.ops.aten.addmm.default(arg34_1, view_28, permute_15);  arg34_1 = view_28 = permute_15 = None
        view_29 = torch.ops.aten.view.default(addmm_8, [2, 256, 768]);  addmm_8 = None
        view_30 = torch.ops.aten.view.default(view_29, [2, 256, -1, 64]);  view_29 = None
        permute_16 = torch.ops.aten.permute.default(view_30, [0, 2, 1, 3]);  view_30 = None
        permute_17 = torch.ops.aten.permute.default(permute_14, [0, 1, 3, 2]);  permute_14 = None
        expand_4 = torch.ops.aten.expand.default(permute_12, [2, 12, 256, 64]);  permute_12 = None
        clone_8 = torch.ops.aten.clone.default(expand_4, memory_format = torch.contiguous_format);  expand_4 = None
        view_31 = torch.ops.aten.view.default(clone_8, [24, 256, 64]);  clone_8 = None
        expand_5 = torch.ops.aten.expand.default(permute_17, [2, 12, 64, 256]);  permute_17 = None
        clone_9 = torch.ops.aten.clone.default(expand_5, memory_format = torch.contiguous_format);  expand_5 = None
        view_32 = torch.ops.aten.view.default(clone_9, [24, 64, 256]);  clone_9 = None
        bmm_2 = torch.ops.aten.bmm.default(view_31, view_32);  view_31 = view_32 = None
        view_33 = torch.ops.aten.view.default(bmm_2, [2, 12, 256, 256]);  bmm_2 = None
        mul_11 = torch.ops.aten.mul.Tensor(view_33, 0.125);  view_33 = None
        add_18 = torch.ops.aten.add.Tensor(mul_11, mul);  mul_11 = None
        amax_1 = torch.ops.aten.amax.default(add_18, [-1], True)
        sub_7 = torch.ops.aten.sub.Tensor(add_18, amax_1);  add_18 = amax_1 = None
        exp_1 = torch.ops.aten.exp.default(sub_7);  sub_7 = None
        sum_2 = torch.ops.aten.sum.dim_IntList(exp_1, [-1], True)
        div_1 = torch.ops.aten.div.Tensor(exp_1, sum_2);  exp_1 = sum_2 = None
        expand_6 = torch.ops.aten.expand.default(div_1, [2, 12, 256, 256]);  div_1 = None
        view_34 = torch.ops.aten.view.default(expand_6, [24, 256, 256]);  expand_6 = None
        expand_7 = torch.ops.aten.expand.default(permute_16, [2, 12, 256, 64]);  permute_16 = None
        clone_11 = torch.ops.aten.clone.default(expand_7, memory_format = torch.contiguous_format);  expand_7 = None
        view_35 = torch.ops.aten.view.default(clone_11, [24, 256, 64]);  clone_11 = None
        bmm_3 = torch.ops.aten.bmm.default(view_34, view_35);  view_34 = view_35 = None
        view_36 = torch.ops.aten.view.default(bmm_3, [2, 12, 256, 64]);  bmm_3 = None
        permute_18 = torch.ops.aten.permute.default(view_36, [0, 2, 1, 3]);  view_36 = None
        clone_12 = torch.ops.aten.clone.default(permute_18, memory_format = torch.contiguous_format);  permute_18 = None
        view_37 = torch.ops.aten.view.default(clone_12, [2, 256, -1]);  clone_12 = None
        view_38 = torch.ops.aten.view.default(view_37, [512, 768]);  view_37 = None
        permute_19 = torch.ops.aten.permute.default(arg35_1, [1, 0]);  arg35_1 = None
        addmm_9 = torch.ops.aten.addmm.default(arg36_1, view_38, permute_19);  arg36_1 = view_38 = permute_19 = None
        view_39 = torch.ops.aten.view.default(addmm_9, [2, 256, 768]);  addmm_9 = None
        add_19 = torch.ops.aten.add.Tensor(view_39, add_17);  view_39 = add_17 = None
        var_mean_3 = torch.ops.aten.var_mean.correction(add_19, [2], correction = 0, keepdim = True)
        getitem_6 = var_mean_3[0]
        getitem_7 = var_mean_3[1];  var_mean_3 = None
        add_20 = torch.ops.aten.add.Tensor(getitem_6, 1e-12);  getitem_6 = None
        rsqrt_3 = torch.ops.aten.rsqrt.default(add_20);  add_20 = None
        sub_8 = torch.ops.aten.sub.Tensor(add_19, getitem_7);  add_19 = getitem_7 = None
        mul_12 = torch.ops.aten.mul.Tensor(sub_8, rsqrt_3);  sub_8 = rsqrt_3 = None
        mul_13 = torch.ops.aten.mul.Tensor(mul_12, arg37_1);  mul_12 = arg37_1 = None
        add_21 = torch.ops.aten.add.Tensor(mul_13, arg38_1);  mul_13 = arg38_1 = None
        view_40 = torch.ops.aten.view.default(add_21, [512, 768])
        permute_20 = torch.ops.aten.permute.default(arg39_1, [1, 0]);  arg39_1 = None
        addmm_10 = torch.ops.aten.addmm.default(arg40_1, view_40, permute_20);  arg40_1 = view_40 = permute_20 = None
        view_41 = torch.ops.aten.view.default(addmm_10, [2, 256, 3072]);  addmm_10 = None
        mul_14 = torch.ops.aten.mul.Tensor(view_41, 0.5)
        mul_15 = torch.ops.aten.mul.Tensor(view_41, 0.7071067811865476);  view_41 = None
        erf_1 = torch.ops.aten.erf.default(mul_15);  mul_15 = None
        add_22 = torch.ops.aten.add.Tensor(erf_1, 1);  erf_1 = None
        mul_16 = torch.ops.aten.mul.Tensor(mul_14, add_22);  mul_14 = add_22 = None
        view_42 = torch.ops.aten.view.default(mul_16, [512, 3072]);  mul_16 = None
        permute_21 = torch.ops.aten.permute.default(arg41_1, [1, 0]);  arg41_1 = None
        addmm_11 = torch.ops.aten.addmm.default(arg42_1, view_42, permute_21);  arg42_1 = view_42 = permute_21 = None
        view_43 = torch.ops.aten.view.default(addmm_11, [2, 256, 768]);  addmm_11 = None
        add_23 = torch.ops.aten.add.Tensor(view_43, add_21);  view_43 = add_21 = None
        var_mean_4 = torch.ops.aten.var_mean.correction(add_23, [2], correction = 0, keepdim = True)
        getitem_8 = var_mean_4[0]
        getitem_9 = var_mean_4[1];  var_mean_4 = None
        add_24 = torch.ops.aten.add.Tensor(getitem_8, 1e-12);  getitem_8 = None
        rsqrt_4 = torch.ops.aten.rsqrt.default(add_24);  add_24 = None
        sub_9 = torch.ops.aten.sub.Tensor(add_23, getitem_9);  add_23 = getitem_9 = None
        mul_17 = torch.ops.aten.mul.Tensor(sub_9, rsqrt_4);  sub_9 = rsqrt_4 = None
        mul_18 = torch.ops.aten.mul.Tensor(mul_17, arg43_1);  mul_17 = arg43_1 = None
        add_25 = torch.ops.aten.add.Tensor(mul_18, arg44_1);  mul_18 = arg44_1 = None
        view_44 = torch.ops.aten.view.default(add_25, [512, 768])
        permute_22 = torch.ops.aten.permute.default(arg45_1, [1, 0]);  arg45_1 = None
        addmm_12 = torch.ops.aten.addmm.default(arg46_1, view_44, permute_22);  arg46_1 = view_44 = permute_22 = None
        view_45 = torch.ops.aten.view.default(addmm_12, [2, 256, 768]);  addmm_12 = None
        view_46 = torch.ops.aten.view.default(view_45, [2, 256, -1, 64]);  view_45 = None
        permute_23 = torch.ops.aten.permute.default(view_46, [0, 2, 1, 3]);  view_46 = None
        view_47 = torch.ops.aten.view.default(add_25, [512, 768])
        permute_24 = torch.ops.aten.permute.default(arg47_1, [1, 0]);  arg47_1 = None
        addmm_13 = torch.ops.aten.addmm.default(arg48_1, view_47, permute_24);  arg48_1 = view_47 = permute_24 = None
        view_48 = torch.ops.aten.view.default(addmm_13, [2, 256, 768]);  addmm_13 = None
        view_49 = torch.ops.aten.view.default(view_48, [2, 256, -1, 64]);  view_48 = None
        permute_25 = torch.ops.aten.permute.default(view_49, [0, 2, 1, 3]);  view_49 = None
        view_50 = torch.ops.aten.view.default(add_25, [512, 768])
        permute_26 = torch.ops.aten.permute.default(arg49_1, [1, 0]);  arg49_1 = None
        addmm_14 = torch.ops.aten.addmm.default(arg50_1, view_50, permute_26);  arg50_1 = view_50 = permute_26 = None
        view_51 = torch.ops.aten.view.default(addmm_14, [2, 256, 768]);  addmm_14 = None
        view_52 = torch.ops.aten.view.default(view_51, [2, 256, -1, 64]);  view_51 = None
        permute_27 = torch.ops.aten.permute.default(view_52, [0, 2, 1, 3]);  view_52 = None
        permute_28 = torch.ops.aten.permute.default(permute_25, [0, 1, 3, 2]);  permute_25 = None
        expand_8 = torch.ops.aten.expand.default(permute_23, [2, 12, 256, 64]);  permute_23 = None
        clone_15 = torch.ops.aten.clone.default(expand_8, memory_format = torch.contiguous_format);  expand_8 = None
        view_53 = torch.ops.aten.view.default(clone_15, [24, 256, 64]);  clone_15 = None
        expand_9 = torch.ops.aten.expand.default(permute_28, [2, 12, 64, 256]);  permute_28 = None
        clone_16 = torch.ops.aten.clone.default(expand_9, memory_format = torch.contiguous_format);  expand_9 = None
        view_54 = torch.ops.aten.view.default(clone_16, [24, 64, 256]);  clone_16 = None
        bmm_4 = torch.ops.aten.bmm.default(view_53, view_54);  view_53 = view_54 = None
        view_55 = torch.ops.aten.view.default(bmm_4, [2, 12, 256, 256]);  bmm_4 = None
        mul_19 = torch.ops.aten.mul.Tensor(view_55, 0.125);  view_55 = None
        add_26 = torch.ops.aten.add.Tensor(mul_19, mul);  mul_19 = None
        amax_2 = torch.ops.aten.amax.default(add_26, [-1], True)
        sub_10 = torch.ops.aten.sub.Tensor(add_26, amax_2);  add_26 = amax_2 = None
        exp_2 = torch.ops.aten.exp.default(sub_10);  sub_10 = None
        sum_3 = torch.ops.aten.sum.dim_IntList(exp_2, [-1], True)
        div_2 = torch.ops.aten.div.Tensor(exp_2, sum_3);  exp_2 = sum_3 = None
        expand_10 = torch.ops.aten.expand.default(div_2, [2, 12, 256, 256]);  div_2 = None
        view_56 = torch.ops.aten.view.default(expand_10, [24, 256, 256]);  expand_10 = None
        expand_11 = torch.ops.aten.expand.default(permute_27, [2, 12, 256, 64]);  permute_27 = None
        clone_18 = torch.ops.aten.clone.default(expand_11, memory_format = torch.contiguous_format);  expand_11 = None
        view_57 = torch.ops.aten.view.default(clone_18, [24, 256, 64]);  clone_18 = None
        bmm_5 = torch.ops.aten.bmm.default(view_56, view_57);  view_56 = view_57 = None
        view_58 = torch.ops.aten.view.default(bmm_5, [2, 12, 256, 64]);  bmm_5 = None
        permute_29 = torch.ops.aten.permute.default(view_58, [0, 2, 1, 3]);  view_58 = None
        clone_19 = torch.ops.aten.clone.default(permute_29, memory_format = torch.contiguous_format);  permute_29 = None
        view_59 = torch.ops.aten.view.default(clone_19, [2, 256, -1]);  clone_19 = None
        view_60 = torch.ops.aten.view.default(view_59, [512, 768]);  view_59 = None
        permute_30 = torch.ops.aten.permute.default(arg51_1, [1, 0]);  arg51_1 = None
        addmm_15 = torch.ops.aten.addmm.default(arg52_1, view_60, permute_30);  arg52_1 = view_60 = permute_30 = None
        view_61 = torch.ops.aten.view.default(addmm_15, [2, 256, 768]);  addmm_15 = None
        add_27 = torch.ops.aten.add.Tensor(view_61, add_25);  view_61 = add_25 = None
        var_mean_5 = torch.ops.aten.var_mean.correction(add_27, [2], correction = 0, keepdim = True)
        getitem_10 = var_mean_5[0]
        getitem_11 = var_mean_5[1];  var_mean_5 = None
        add_28 = torch.ops.aten.add.Tensor(getitem_10, 1e-12);  getitem_10 = None
        rsqrt_5 = torch.ops.aten.rsqrt.default(add_28);  add_28 = None
        sub_11 = torch.ops.aten.sub.Tensor(add_27, getitem_11);  add_27 = getitem_11 = None
        mul_20 = torch.ops.aten.mul.Tensor(sub_11, rsqrt_5);  sub_11 = rsqrt_5 = None
        mul_21 = torch.ops.aten.mul.Tensor(mul_20, arg53_1);  mul_20 = arg53_1 = None
        add_29 = torch.ops.aten.add.Tensor(mul_21, arg54_1);  mul_21 = arg54_1 = None
        view_62 = torch.ops.aten.view.default(add_29, [512, 768])
        permute_31 = torch.ops.aten.permute.default(arg55_1, [1, 0]);  arg55_1 = None
        addmm_16 = torch.ops.aten.addmm.default(arg56_1, view_62, permute_31);  arg56_1 = view_62 = permute_31 = None
        view_63 = torch.ops.aten.view.default(addmm_16, [2, 256, 3072]);  addmm_16 = None
        mul_22 = torch.ops.aten.mul.Tensor(view_63, 0.5)
        mul_23 = torch.ops.aten.mul.Tensor(view_63, 0.7071067811865476);  view_63 = None
        erf_2 = torch.ops.aten.erf.default(mul_23);  mul_23 = None
        add_30 = torch.ops.aten.add.Tensor(erf_2, 1);  erf_2 = None
        mul_24 = torch.ops.aten.mul.Tensor(mul_22, add_30);  mul_22 = add_30 = None
        view_64 = torch.ops.aten.view.default(mul_24, [512, 3072]);  mul_24 = None
        permute_32 = torch.ops.aten.permute.default(arg57_1, [1, 0]);  arg57_1 = None
        addmm_17 = torch.ops.aten.addmm.default(arg58_1, view_64, permute_32);  arg58_1 = view_64 = permute_32 = None
        view_65 = torch.ops.aten.view.default(addmm_17, [2, 256, 768]);  addmm_17 = None
        add_31 = torch.ops.aten.add.Tensor(view_65, add_29);  view_65 = add_29 = None
        var_mean_6 = torch.ops.aten.var_mean.correction(add_31, [2], correction = 0, keepdim = True)
        getitem_12 = var_mean_6[0]
        getitem_13 = var_mean_6[1];  var_mean_6 = None
        add_32 = torch.ops.aten.add.Tensor(getitem_12, 1e-12);  getitem_12 = None
        rsqrt_6 = torch.ops.aten.rsqrt.default(add_32);  add_32 = None
        sub_12 = torch.ops.aten.sub.Tensor(add_31, getitem_13);  add_31 = getitem_13 = None
        mul_25 = torch.ops.aten.mul.Tensor(sub_12, rsqrt_6);  sub_12 = rsqrt_6 = None
        mul_26 = torch.ops.aten.mul.Tensor(mul_25, arg59_1);  mul_25 = arg59_1 = None
        add_33 = torch.ops.aten.add.Tensor(mul_26, arg60_1);  mul_26 = arg60_1 = None
        view_66 = torch.ops.aten.view.default(add_33, [512, 768])
        permute_33 = torch.ops.aten.permute.default(arg61_1, [1, 0]);  arg61_1 = None
        addmm_18 = torch.ops.aten.addmm.default(arg62_1, view_66, permute_33);  arg62_1 = view_66 = permute_33 = None
        view_67 = torch.ops.aten.view.default(addmm_18, [2, 256, 768]);  addmm_18 = None
        view_68 = torch.ops.aten.view.default(view_67, [2, 256, -1, 64]);  view_67 = None
        permute_34 = torch.ops.aten.permute.default(view_68, [0, 2, 1, 3]);  view_68 = None
        view_69 = torch.ops.aten.view.default(add_33, [512, 768])
        permute_35 = torch.ops.aten.permute.default(arg63_1, [1, 0]);  arg63_1 = None
        addmm_19 = torch.ops.aten.addmm.default(arg64_1, view_69, permute_35);  arg64_1 = view_69 = permute_35 = None
        view_70 = torch.ops.aten.view.default(addmm_19, [2, 256, 768]);  addmm_19 = None
        view_71 = torch.ops.aten.view.default(view_70, [2, 256, -1, 64]);  view_70 = None
        permute_36 = torch.ops.aten.permute.default(view_71, [0, 2, 1, 3]);  view_71 = None
        view_72 = torch.ops.aten.view.default(add_33, [512, 768])
        permute_37 = torch.ops.aten.permute.default(arg65_1, [1, 0]);  arg65_1 = None
        addmm_20 = torch.ops.aten.addmm.default(arg66_1, view_72, permute_37);  arg66_1 = view_72 = permute_37 = None
        view_73 = torch.ops.aten.view.default(addmm_20, [2, 256, 768]);  addmm_20 = None
        view_74 = torch.ops.aten.view.default(view_73, [2, 256, -1, 64]);  view_73 = None
        permute_38 = torch.ops.aten.permute.default(view_74, [0, 2, 1, 3]);  view_74 = None
        permute_39 = torch.ops.aten.permute.default(permute_36, [0, 1, 3, 2]);  permute_36 = None
        expand_12 = torch.ops.aten.expand.default(permute_34, [2, 12, 256, 64]);  permute_34 = None
        clone_22 = torch.ops.aten.clone.default(expand_12, memory_format = torch.contiguous_format);  expand_12 = None
        view_75 = torch.ops.aten.view.default(clone_22, [24, 256, 64]);  clone_22 = None
        expand_13 = torch.ops.aten.expand.default(permute_39, [2, 12, 64, 256]);  permute_39 = None
        clone_23 = torch.ops.aten.clone.default(expand_13, memory_format = torch.contiguous_format);  expand_13 = None
        view_76 = torch.ops.aten.view.default(clone_23, [24, 64, 256]);  clone_23 = None
        bmm_6 = torch.ops.aten.bmm.default(view_75, view_76);  view_75 = view_76 = None
        view_77 = torch.ops.aten.view.default(bmm_6, [2, 12, 256, 256]);  bmm_6 = None
        mul_27 = torch.ops.aten.mul.Tensor(view_77, 0.125);  view_77 = None
        add_34 = torch.ops.aten.add.Tensor(mul_27, mul);  mul_27 = None
        amax_3 = torch.ops.aten.amax.default(add_34, [-1], True)
        sub_13 = torch.ops.aten.sub.Tensor(add_34, amax_3);  add_34 = amax_3 = None
        exp_3 = torch.ops.aten.exp.default(sub_13);  sub_13 = None
        sum_4 = torch.ops.aten.sum.dim_IntList(exp_3, [-1], True)
        div_3 = torch.ops.aten.div.Tensor(exp_3, sum_4);  exp_3 = sum_4 = None
        expand_14 = torch.ops.aten.expand.default(div_3, [2, 12, 256, 256]);  div_3 = None
        view_78 = torch.ops.aten.view.default(expand_14, [24, 256, 256]);  expand_14 = None
        expand_15 = torch.ops.aten.expand.default(permute_38, [2, 12, 256, 64]);  permute_38 = None
        clone_25 = torch.ops.aten.clone.default(expand_15, memory_format = torch.contiguous_format);  expand_15 = None
        view_79 = torch.ops.aten.view.default(clone_25, [24, 256, 64]);  clone_25 = None
        bmm_7 = torch.ops.aten.bmm.default(view_78, view_79);  view_78 = view_79 = None
        view_80 = torch.ops.aten.view.default(bmm_7, [2, 12, 256, 64]);  bmm_7 = None
        permute_40 = torch.ops.aten.permute.default(view_80, [0, 2, 1, 3]);  view_80 = None
        clone_26 = torch.ops.aten.clone.default(permute_40, memory_format = torch.contiguous_format);  permute_40 = None
        view_81 = torch.ops.aten.view.default(clone_26, [2, 256, -1]);  clone_26 = None
        view_82 = torch.ops.aten.view.default(view_81, [512, 768]);  view_81 = None
        permute_41 = torch.ops.aten.permute.default(arg67_1, [1, 0]);  arg67_1 = None
        addmm_21 = torch.ops.aten.addmm.default(arg68_1, view_82, permute_41);  arg68_1 = view_82 = permute_41 = None
        view_83 = torch.ops.aten.view.default(addmm_21, [2, 256, 768]);  addmm_21 = None
        add_35 = torch.ops.aten.add.Tensor(view_83, add_33);  view_83 = add_33 = None
        var_mean_7 = torch.ops.aten.var_mean.correction(add_35, [2], correction = 0, keepdim = True)
        getitem_14 = var_mean_7[0]
        getitem_15 = var_mean_7[1];  var_mean_7 = None
        add_36 = torch.ops.aten.add.Tensor(getitem_14, 1e-12);  getitem_14 = None
        rsqrt_7 = torch.ops.aten.rsqrt.default(add_36);  add_36 = None
        sub_14 = torch.ops.aten.sub.Tensor(add_35, getitem_15);  add_35 = getitem_15 = None
        mul_28 = torch.ops.aten.mul.Tensor(sub_14, rsqrt_7);  sub_14 = rsqrt_7 = None
        mul_29 = torch.ops.aten.mul.Tensor(mul_28, arg69_1);  mul_28 = arg69_1 = None
        add_37 = torch.ops.aten.add.Tensor(mul_29, arg70_1);  mul_29 = arg70_1 = None
        view_84 = torch.ops.aten.view.default(add_37, [512, 768])
        permute_42 = torch.ops.aten.permute.default(arg71_1, [1, 0]);  arg71_1 = None
        addmm_22 = torch.ops.aten.addmm.default(arg72_1, view_84, permute_42);  arg72_1 = view_84 = permute_42 = None
        view_85 = torch.ops.aten.view.default(addmm_22, [2, 256, 3072]);  addmm_22 = None
        mul_30 = torch.ops.aten.mul.Tensor(view_85, 0.5)
        mul_31 = torch.ops.aten.mul.Tensor(view_85, 0.7071067811865476);  view_85 = None
        erf_3 = torch.ops.aten.erf.default(mul_31);  mul_31 = None
        add_38 = torch.ops.aten.add.Tensor(erf_3, 1);  erf_3 = None
        mul_32 = torch.ops.aten.mul.Tensor(mul_30, add_38);  mul_30 = add_38 = None
        view_86 = torch.ops.aten.view.default(mul_32, [512, 3072]);  mul_32 = None
        permute_43 = torch.ops.aten.permute.default(arg73_1, [1, 0]);  arg73_1 = None
        addmm_23 = torch.ops.aten.addmm.default(arg74_1, view_86, permute_43);  arg74_1 = view_86 = permute_43 = None
        view_87 = torch.ops.aten.view.default(addmm_23, [2, 256, 768]);  addmm_23 = None
        add_39 = torch.ops.aten.add.Tensor(view_87, add_37);  view_87 = add_37 = None
        var_mean_8 = torch.ops.aten.var_mean.correction(add_39, [2], correction = 0, keepdim = True)
        getitem_16 = var_mean_8[0]
        getitem_17 = var_mean_8[1];  var_mean_8 = None
        add_40 = torch.ops.aten.add.Tensor(getitem_16, 1e-12);  getitem_16 = None
        rsqrt_8 = torch.ops.aten.rsqrt.default(add_40);  add_40 = None
        sub_15 = torch.ops.aten.sub.Tensor(add_39, getitem_17);  add_39 = getitem_17 = None
        mul_33 = torch.ops.aten.mul.Tensor(sub_15, rsqrt_8);  sub_15 = rsqrt_8 = None
        mul_34 = torch.ops.aten.mul.Tensor(mul_33, arg75_1);  mul_33 = arg75_1 = None
        add_41 = torch.ops.aten.add.Tensor(mul_34, arg76_1);  mul_34 = arg76_1 = None
        view_88 = torch.ops.aten.view.default(add_41, [512, 768])
        permute_44 = torch.ops.aten.permute.default(arg77_1, [1, 0]);  arg77_1 = None
        addmm_24 = torch.ops.aten.addmm.default(arg78_1, view_88, permute_44);  arg78_1 = view_88 = permute_44 = None
        view_89 = torch.ops.aten.view.default(addmm_24, [2, 256, 768]);  addmm_24 = None
        view_90 = torch.ops.aten.view.default(view_89, [2, 256, -1, 64]);  view_89 = None
        permute_45 = torch.ops.aten.permute.default(view_90, [0, 2, 1, 3]);  view_90 = None
        view_91 = torch.ops.aten.view.default(add_41, [512, 768])
        permute_46 = torch.ops.aten.permute.default(arg79_1, [1, 0]);  arg79_1 = None
        addmm_25 = torch.ops.aten.addmm.default(arg80_1, view_91, permute_46);  arg80_1 = view_91 = permute_46 = None
        view_92 = torch.ops.aten.view.default(addmm_25, [2, 256, 768]);  addmm_25 = None
        view_93 = torch.ops.aten.view.default(view_92, [2, 256, -1, 64]);  view_92 = None
        permute_47 = torch.ops.aten.permute.default(view_93, [0, 2, 1, 3]);  view_93 = None
        view_94 = torch.ops.aten.view.default(add_41, [512, 768])
        permute_48 = torch.ops.aten.permute.default(arg81_1, [1, 0]);  arg81_1 = None
        addmm_26 = torch.ops.aten.addmm.default(arg82_1, view_94, permute_48);  arg82_1 = view_94 = permute_48 = None
        view_95 = torch.ops.aten.view.default(addmm_26, [2, 256, 768]);  addmm_26 = None
        view_96 = torch.ops.aten.view.default(view_95, [2, 256, -1, 64]);  view_95 = None
        permute_49 = torch.ops.aten.permute.default(view_96, [0, 2, 1, 3]);  view_96 = None
        permute_50 = torch.ops.aten.permute.default(permute_47, [0, 1, 3, 2]);  permute_47 = None
        expand_16 = torch.ops.aten.expand.default(permute_45, [2, 12, 256, 64]);  permute_45 = None
        clone_29 = torch.ops.aten.clone.default(expand_16, memory_format = torch.contiguous_format);  expand_16 = None
        view_97 = torch.ops.aten.view.default(clone_29, [24, 256, 64]);  clone_29 = None
        expand_17 = torch.ops.aten.expand.default(permute_50, [2, 12, 64, 256]);  permute_50 = None
        clone_30 = torch.ops.aten.clone.default(expand_17, memory_format = torch.contiguous_format);  expand_17 = None
        view_98 = torch.ops.aten.view.default(clone_30, [24, 64, 256]);  clone_30 = None
        bmm_8 = torch.ops.aten.bmm.default(view_97, view_98);  view_97 = view_98 = None
        view_99 = torch.ops.aten.view.default(bmm_8, [2, 12, 256, 256]);  bmm_8 = None
        mul_35 = torch.ops.aten.mul.Tensor(view_99, 0.125);  view_99 = None
        add_42 = torch.ops.aten.add.Tensor(mul_35, mul);  mul_35 = None
        amax_4 = torch.ops.aten.amax.default(add_42, [-1], True)
        sub_16 = torch.ops.aten.sub.Tensor(add_42, amax_4);  add_42 = amax_4 = None
        exp_4 = torch.ops.aten.exp.default(sub_16);  sub_16 = None
        sum_5 = torch.ops.aten.sum.dim_IntList(exp_4, [-1], True)
        div_4 = torch.ops.aten.div.Tensor(exp_4, sum_5);  exp_4 = sum_5 = None
        expand_18 = torch.ops.aten.expand.default(div_4, [2, 12, 256, 256]);  div_4 = None
        view_100 = torch.ops.aten.view.default(expand_18, [24, 256, 256]);  expand_18 = None
        expand_19 = torch.ops.aten.expand.default(permute_49, [2, 12, 256, 64]);  permute_49 = None
        clone_32 = torch.ops.aten.clone.default(expand_19, memory_format = torch.contiguous_format);  expand_19 = None
        view_101 = torch.ops.aten.view.default(clone_32, [24, 256, 64]);  clone_32 = None
        bmm_9 = torch.ops.aten.bmm.default(view_100, view_101);  view_100 = view_101 = None
        view_102 = torch.ops.aten.view.default(bmm_9, [2, 12, 256, 64]);  bmm_9 = None
        permute_51 = torch.ops.aten.permute.default(view_102, [0, 2, 1, 3]);  view_102 = None
        clone_33 = torch.ops.aten.clone.default(permute_51, memory_format = torch.contiguous_format);  permute_51 = None
        view_103 = torch.ops.aten.view.default(clone_33, [2, 256, -1]);  clone_33 = None
        view_104 = torch.ops.aten.view.default(view_103, [512, 768]);  view_103 = None
        permute_52 = torch.ops.aten.permute.default(arg83_1, [1, 0]);  arg83_1 = None
        addmm_27 = torch.ops.aten.addmm.default(arg84_1, view_104, permute_52);  arg84_1 = view_104 = permute_52 = None
        view_105 = torch.ops.aten.view.default(addmm_27, [2, 256, 768]);  addmm_27 = None
        add_43 = torch.ops.aten.add.Tensor(view_105, add_41);  view_105 = add_41 = None
        var_mean_9 = torch.ops.aten.var_mean.correction(add_43, [2], correction = 0, keepdim = True)
        getitem_18 = var_mean_9[0]
        getitem_19 = var_mean_9[1];  var_mean_9 = None
        add_44 = torch.ops.aten.add.Tensor(getitem_18, 1e-12);  getitem_18 = None
        rsqrt_9 = torch.ops.aten.rsqrt.default(add_44);  add_44 = None
        sub_17 = torch.ops.aten.sub.Tensor(add_43, getitem_19);  add_43 = getitem_19 = None
        mul_36 = torch.ops.aten.mul.Tensor(sub_17, rsqrt_9);  sub_17 = rsqrt_9 = None
        mul_37 = torch.ops.aten.mul.Tensor(mul_36, arg85_1);  mul_36 = arg85_1 = None
        add_45 = torch.ops.aten.add.Tensor(mul_37, arg86_1);  mul_37 = arg86_1 = None
        view_106 = torch.ops.aten.view.default(add_45, [512, 768])
        permute_53 = torch.ops.aten.permute.default(arg87_1, [1, 0]);  arg87_1 = None
        addmm_28 = torch.ops.aten.addmm.default(arg88_1, view_106, permute_53);  arg88_1 = view_106 = permute_53 = None
        view_107 = torch.ops.aten.view.default(addmm_28, [2, 256, 3072]);  addmm_28 = None
        mul_38 = torch.ops.aten.mul.Tensor(view_107, 0.5)
        mul_39 = torch.ops.aten.mul.Tensor(view_107, 0.7071067811865476);  view_107 = None
        erf_4 = torch.ops.aten.erf.default(mul_39);  mul_39 = None
        add_46 = torch.ops.aten.add.Tensor(erf_4, 1);  erf_4 = None
        mul_40 = torch.ops.aten.mul.Tensor(mul_38, add_46);  mul_38 = add_46 = None
        view_108 = torch.ops.aten.view.default(mul_40, [512, 3072]);  mul_40 = None
        permute_54 = torch.ops.aten.permute.default(arg89_1, [1, 0]);  arg89_1 = None
        addmm_29 = torch.ops.aten.addmm.default(arg90_1, view_108, permute_54);  arg90_1 = view_108 = permute_54 = None
        view_109 = torch.ops.aten.view.default(addmm_29, [2, 256, 768]);  addmm_29 = None
        add_47 = torch.ops.aten.add.Tensor(view_109, add_45);  view_109 = add_45 = None
        var_mean_10 = torch.ops.aten.var_mean.correction(add_47, [2], correction = 0, keepdim = True)
        getitem_20 = var_mean_10[0]
        getitem_21 = var_mean_10[1];  var_mean_10 = None
        add_48 = torch.ops.aten.add.Tensor(getitem_20, 1e-12);  getitem_20 = None
        rsqrt_10 = torch.ops.aten.rsqrt.default(add_48);  add_48 = None
        sub_18 = torch.ops.aten.sub.Tensor(add_47, getitem_21);  add_47 = getitem_21 = None
        mul_41 = torch.ops.aten.mul.Tensor(sub_18, rsqrt_10);  sub_18 = rsqrt_10 = None
        mul_42 = torch.ops.aten.mul.Tensor(mul_41, arg91_1);  mul_41 = arg91_1 = None
        add_49 = torch.ops.aten.add.Tensor(mul_42, arg92_1);  mul_42 = arg92_1 = None
        view_110 = torch.ops.aten.view.default(add_49, [512, 768])
        permute_55 = torch.ops.aten.permute.default(arg93_1, [1, 0]);  arg93_1 = None
        addmm_30 = torch.ops.aten.addmm.default(arg94_1, view_110, permute_55);  arg94_1 = view_110 = permute_55 = None
        view_111 = torch.ops.aten.view.default(addmm_30, [2, 256, 768]);  addmm_30 = None
        view_112 = torch.ops.aten.view.default(view_111, [2, 256, -1, 64]);  view_111 = None
        permute_56 = torch.ops.aten.permute.default(view_112, [0, 2, 1, 3]);  view_112 = None
        view_113 = torch.ops.aten.view.default(add_49, [512, 768])
        permute_57 = torch.ops.aten.permute.default(arg95_1, [1, 0]);  arg95_1 = None
        addmm_31 = torch.ops.aten.addmm.default(arg96_1, view_113, permute_57);  arg96_1 = view_113 = permute_57 = None
        view_114 = torch.ops.aten.view.default(addmm_31, [2, 256, 768]);  addmm_31 = None
        view_115 = torch.ops.aten.view.default(view_114, [2, 256, -1, 64]);  view_114 = None
        permute_58 = torch.ops.aten.permute.default(view_115, [0, 2, 1, 3]);  view_115 = None
        view_116 = torch.ops.aten.view.default(add_49, [512, 768])
        permute_59 = torch.ops.aten.permute.default(arg97_1, [1, 0]);  arg97_1 = None
        addmm_32 = torch.ops.aten.addmm.default(arg98_1, view_116, permute_59);  arg98_1 = view_116 = permute_59 = None
        view_117 = torch.ops.aten.view.default(addmm_32, [2, 256, 768]);  addmm_32 = None
        view_118 = torch.ops.aten.view.default(view_117, [2, 256, -1, 64]);  view_117 = None
        permute_60 = torch.ops.aten.permute.default(view_118, [0, 2, 1, 3]);  view_118 = None
        permute_61 = torch.ops.aten.permute.default(permute_58, [0, 1, 3, 2]);  permute_58 = None
        expand_20 = torch.ops.aten.expand.default(permute_56, [2, 12, 256, 64]);  permute_56 = None
        clone_36 = torch.ops.aten.clone.default(expand_20, memory_format = torch.contiguous_format);  expand_20 = None
        view_119 = torch.ops.aten.view.default(clone_36, [24, 256, 64]);  clone_36 = None
        expand_21 = torch.ops.aten.expand.default(permute_61, [2, 12, 64, 256]);  permute_61 = None
        clone_37 = torch.ops.aten.clone.default(expand_21, memory_format = torch.contiguous_format);  expand_21 = None
        view_120 = torch.ops.aten.view.default(clone_37, [24, 64, 256]);  clone_37 = None
        bmm_10 = torch.ops.aten.bmm.default(view_119, view_120);  view_119 = view_120 = None
        view_121 = torch.ops.aten.view.default(bmm_10, [2, 12, 256, 256]);  bmm_10 = None
        mul_43 = torch.ops.aten.mul.Tensor(view_121, 0.125);  view_121 = None
        add_50 = torch.ops.aten.add.Tensor(mul_43, mul);  mul_43 = None
        amax_5 = torch.ops.aten.amax.default(add_50, [-1], True)
        sub_19 = torch.ops.aten.sub.Tensor(add_50, amax_5);  add_50 = amax_5 = None
        exp_5 = torch.ops.aten.exp.default(sub_19);  sub_19 = None
        sum_6 = torch.ops.aten.sum.dim_IntList(exp_5, [-1], True)
        div_5 = torch.ops.aten.div.Tensor(exp_5, sum_6);  exp_5 = sum_6 = None
        expand_22 = torch.ops.aten.expand.default(div_5, [2, 12, 256, 256]);  div_5 = None
        view_122 = torch.ops.aten.view.default(expand_22, [24, 256, 256]);  expand_22 = None
        expand_23 = torch.ops.aten.expand.default(permute_60, [2, 12, 256, 64]);  permute_60 = None
        clone_39 = torch.ops.aten.clone.default(expand_23, memory_format = torch.contiguous_format);  expand_23 = None
        view_123 = torch.ops.aten.view.default(clone_39, [24, 256, 64]);  clone_39 = None
        bmm_11 = torch.ops.aten.bmm.default(view_122, view_123);  view_122 = view_123 = None
        view_124 = torch.ops.aten.view.default(bmm_11, [2, 12, 256, 64]);  bmm_11 = None
        permute_62 = torch.ops.aten.permute.default(view_124, [0, 2, 1, 3]);  view_124 = None
        clone_40 = torch.ops.aten.clone.default(permute_62, memory_format = torch.contiguous_format);  permute_62 = None
        view_125 = torch.ops.aten.view.default(clone_40, [2, 256, -1]);  clone_40 = None
        view_126 = torch.ops.aten.view.default(view_125, [512, 768]);  view_125 = None
        permute_63 = torch.ops.aten.permute.default(arg99_1, [1, 0]);  arg99_1 = None
        addmm_33 = torch.ops.aten.addmm.default(arg100_1, view_126, permute_63);  arg100_1 = view_126 = permute_63 = None
        view_127 = torch.ops.aten.view.default(addmm_33, [2, 256, 768]);  addmm_33 = None
        add_51 = torch.ops.aten.add.Tensor(view_127, add_49);  view_127 = add_49 = None
        var_mean_11 = torch.ops.aten.var_mean.correction(add_51, [2], correction = 0, keepdim = True)
        getitem_22 = var_mean_11[0]
        getitem_23 = var_mean_11[1];  var_mean_11 = None
        add_52 = torch.ops.aten.add.Tensor(getitem_22, 1e-12);  getitem_22 = None
        rsqrt_11 = torch.ops.aten.rsqrt.default(add_52);  add_52 = None
        sub_20 = torch.ops.aten.sub.Tensor(add_51, getitem_23);  add_51 = getitem_23 = None
        mul_44 = torch.ops.aten.mul.Tensor(sub_20, rsqrt_11);  sub_20 = rsqrt_11 = None
        mul_45 = torch.ops.aten.mul.Tensor(mul_44, arg101_1);  mul_44 = arg101_1 = None
        add_53 = torch.ops.aten.add.Tensor(mul_45, arg102_1);  mul_45 = arg102_1 = None
        view_128 = torch.ops.aten.view.default(add_53, [512, 768])
        permute_64 = torch.ops.aten.permute.default(arg103_1, [1, 0]);  arg103_1 = None
        addmm_34 = torch.ops.aten.addmm.default(arg104_1, view_128, permute_64);  arg104_1 = view_128 = permute_64 = None
        view_129 = torch.ops.aten.view.default(addmm_34, [2, 256, 3072]);  addmm_34 = None
        mul_46 = torch.ops.aten.mul.Tensor(view_129, 0.5)
        mul_47 = torch.ops.aten.mul.Tensor(view_129, 0.7071067811865476);  view_129 = None
        erf_5 = torch.ops.aten.erf.default(mul_47);  mul_47 = None
        add_54 = torch.ops.aten.add.Tensor(erf_5, 1);  erf_5 = None
        mul_48 = torch.ops.aten.mul.Tensor(mul_46, add_54);  mul_46 = add_54 = None
        view_130 = torch.ops.aten.view.default(mul_48, [512, 3072]);  mul_48 = None
        permute_65 = torch.ops.aten.permute.default(arg105_1, [1, 0]);  arg105_1 = None
        addmm_35 = torch.ops.aten.addmm.default(arg106_1, view_130, permute_65);  arg106_1 = view_130 = permute_65 = None
        view_131 = torch.ops.aten.view.default(addmm_35, [2, 256, 768]);  addmm_35 = None
        add_55 = torch.ops.aten.add.Tensor(view_131, add_53);  view_131 = add_53 = None
        var_mean_12 = torch.ops.aten.var_mean.correction(add_55, [2], correction = 0, keepdim = True)
        getitem_24 = var_mean_12[0]
        getitem_25 = var_mean_12[1];  var_mean_12 = None
        add_56 = torch.ops.aten.add.Tensor(getitem_24, 1e-12);  getitem_24 = None
        rsqrt_12 = torch.ops.aten.rsqrt.default(add_56);  add_56 = None
        sub_21 = torch.ops.aten.sub.Tensor(add_55, getitem_25);  add_55 = getitem_25 = None
        mul_49 = torch.ops.aten.mul.Tensor(sub_21, rsqrt_12);  sub_21 = rsqrt_12 = None
        mul_50 = torch.ops.aten.mul.Tensor(mul_49, arg107_1);  mul_49 = arg107_1 = None
        add_57 = torch.ops.aten.add.Tensor(mul_50, arg108_1);  mul_50 = arg108_1 = None
        view_132 = torch.ops.aten.view.default(add_57, [512, 768])
        permute_66 = torch.ops.aten.permute.default(arg109_1, [1, 0]);  arg109_1 = None
        addmm_36 = torch.ops.aten.addmm.default(arg110_1, view_132, permute_66);  arg110_1 = view_132 = permute_66 = None
        view_133 = torch.ops.aten.view.default(addmm_36, [2, 256, 768]);  addmm_36 = None
        view_134 = torch.ops.aten.view.default(view_133, [2, 256, -1, 64]);  view_133 = None
        permute_67 = torch.ops.aten.permute.default(view_134, [0, 2, 1, 3]);  view_134 = None
        view_135 = torch.ops.aten.view.default(add_57, [512, 768])
        permute_68 = torch.ops.aten.permute.default(arg111_1, [1, 0]);  arg111_1 = None
        addmm_37 = torch.ops.aten.addmm.default(arg112_1, view_135, permute_68);  arg112_1 = view_135 = permute_68 = None
        view_136 = torch.ops.aten.view.default(addmm_37, [2, 256, 768]);  addmm_37 = None
        view_137 = torch.ops.aten.view.default(view_136, [2, 256, -1, 64]);  view_136 = None
        permute_69 = torch.ops.aten.permute.default(view_137, [0, 2, 1, 3]);  view_137 = None
        view_138 = torch.ops.aten.view.default(add_57, [512, 768])
        permute_70 = torch.ops.aten.permute.default(arg113_1, [1, 0]);  arg113_1 = None
        addmm_38 = torch.ops.aten.addmm.default(arg114_1, view_138, permute_70);  arg114_1 = view_138 = permute_70 = None
        view_139 = torch.ops.aten.view.default(addmm_38, [2, 256, 768]);  addmm_38 = None
        view_140 = torch.ops.aten.view.default(view_139, [2, 256, -1, 64]);  view_139 = None
        permute_71 = torch.ops.aten.permute.default(view_140, [0, 2, 1, 3]);  view_140 = None
        permute_72 = torch.ops.aten.permute.default(permute_69, [0, 1, 3, 2]);  permute_69 = None
        expand_24 = torch.ops.aten.expand.default(permute_67, [2, 12, 256, 64]);  permute_67 = None
        clone_43 = torch.ops.aten.clone.default(expand_24, memory_format = torch.contiguous_format);  expand_24 = None
        view_141 = torch.ops.aten.view.default(clone_43, [24, 256, 64]);  clone_43 = None
        expand_25 = torch.ops.aten.expand.default(permute_72, [2, 12, 64, 256]);  permute_72 = None
        clone_44 = torch.ops.aten.clone.default(expand_25, memory_format = torch.contiguous_format);  expand_25 = None
        view_142 = torch.ops.aten.view.default(clone_44, [24, 64, 256]);  clone_44 = None
        bmm_12 = torch.ops.aten.bmm.default(view_141, view_142);  view_141 = view_142 = None
        view_143 = torch.ops.aten.view.default(bmm_12, [2, 12, 256, 256]);  bmm_12 = None
        mul_51 = torch.ops.aten.mul.Tensor(view_143, 0.125);  view_143 = None
        add_58 = torch.ops.aten.add.Tensor(mul_51, mul);  mul_51 = None
        amax_6 = torch.ops.aten.amax.default(add_58, [-1], True)
        sub_22 = torch.ops.aten.sub.Tensor(add_58, amax_6);  add_58 = amax_6 = None
        exp_6 = torch.ops.aten.exp.default(sub_22);  sub_22 = None
        sum_7 = torch.ops.aten.sum.dim_IntList(exp_6, [-1], True)
        div_6 = torch.ops.aten.div.Tensor(exp_6, sum_7);  exp_6 = sum_7 = None
        expand_26 = torch.ops.aten.expand.default(div_6, [2, 12, 256, 256]);  div_6 = None
        view_144 = torch.ops.aten.view.default(expand_26, [24, 256, 256]);  expand_26 = None
        expand_27 = torch.ops.aten.expand.default(permute_71, [2, 12, 256, 64]);  permute_71 = None
        clone_46 = torch.ops.aten.clone.default(expand_27, memory_format = torch.contiguous_format);  expand_27 = None
        view_145 = torch.ops.aten.view.default(clone_46, [24, 256, 64]);  clone_46 = None
        bmm_13 = torch.ops.aten.bmm.default(view_144, view_145);  view_144 = view_145 = None
        view_146 = torch.ops.aten.view.default(bmm_13, [2, 12, 256, 64]);  bmm_13 = None
        permute_73 = torch.ops.aten.permute.default(view_146, [0, 2, 1, 3]);  view_146 = None
        clone_47 = torch.ops.aten.clone.default(permute_73, memory_format = torch.contiguous_format);  permute_73 = None
        view_147 = torch.ops.aten.view.default(clone_47, [2, 256, -1]);  clone_47 = None
        view_148 = torch.ops.aten.view.default(view_147, [512, 768]);  view_147 = None
        permute_74 = torch.ops.aten.permute.default(arg115_1, [1, 0]);  arg115_1 = None
        addmm_39 = torch.ops.aten.addmm.default(arg116_1, view_148, permute_74);  arg116_1 = view_148 = permute_74 = None
        view_149 = torch.ops.aten.view.default(addmm_39, [2, 256, 768]);  addmm_39 = None
        add_59 = torch.ops.aten.add.Tensor(view_149, add_57);  view_149 = add_57 = None
        var_mean_13 = torch.ops.aten.var_mean.correction(add_59, [2], correction = 0, keepdim = True)
        getitem_26 = var_mean_13[0]
        getitem_27 = var_mean_13[1];  var_mean_13 = None
        add_60 = torch.ops.aten.add.Tensor(getitem_26, 1e-12);  getitem_26 = None
        rsqrt_13 = torch.ops.aten.rsqrt.default(add_60);  add_60 = None
        sub_23 = torch.ops.aten.sub.Tensor(add_59, getitem_27);  add_59 = getitem_27 = None
        mul_52 = torch.ops.aten.mul.Tensor(sub_23, rsqrt_13);  sub_23 = rsqrt_13 = None
        mul_53 = torch.ops.aten.mul.Tensor(mul_52, arg117_1);  mul_52 = arg117_1 = None
        add_61 = torch.ops.aten.add.Tensor(mul_53, arg118_1);  mul_53 = arg118_1 = None
        view_150 = torch.ops.aten.view.default(add_61, [512, 768])
        permute_75 = torch.ops.aten.permute.default(arg119_1, [1, 0]);  arg119_1 = None
        addmm_40 = torch.ops.aten.addmm.default(arg120_1, view_150, permute_75);  arg120_1 = view_150 = permute_75 = None
        view_151 = torch.ops.aten.view.default(addmm_40, [2, 256, 3072]);  addmm_40 = None
        mul_54 = torch.ops.aten.mul.Tensor(view_151, 0.5)
        mul_55 = torch.ops.aten.mul.Tensor(view_151, 0.7071067811865476);  view_151 = None
        erf_6 = torch.ops.aten.erf.default(mul_55);  mul_55 = None
        add_62 = torch.ops.aten.add.Tensor(erf_6, 1);  erf_6 = None
        mul_56 = torch.ops.aten.mul.Tensor(mul_54, add_62);  mul_54 = add_62 = None
        view_152 = torch.ops.aten.view.default(mul_56, [512, 3072]);  mul_56 = None
        permute_76 = torch.ops.aten.permute.default(arg121_1, [1, 0]);  arg121_1 = None
        addmm_41 = torch.ops.aten.addmm.default(arg122_1, view_152, permute_76);  arg122_1 = view_152 = permute_76 = None
        view_153 = torch.ops.aten.view.default(addmm_41, [2, 256, 768]);  addmm_41 = None
        add_63 = torch.ops.aten.add.Tensor(view_153, add_61);  view_153 = add_61 = None
        var_mean_14 = torch.ops.aten.var_mean.correction(add_63, [2], correction = 0, keepdim = True)
        getitem_28 = var_mean_14[0]
        getitem_29 = var_mean_14[1];  var_mean_14 = None
        add_64 = torch.ops.aten.add.Tensor(getitem_28, 1e-12);  getitem_28 = None
        rsqrt_14 = torch.ops.aten.rsqrt.default(add_64);  add_64 = None
        sub_24 = torch.ops.aten.sub.Tensor(add_63, getitem_29);  add_63 = getitem_29 = None
        mul_57 = torch.ops.aten.mul.Tensor(sub_24, rsqrt_14);  sub_24 = rsqrt_14 = None
        mul_58 = torch.ops.aten.mul.Tensor(mul_57, arg123_1);  mul_57 = arg123_1 = None
        add_65 = torch.ops.aten.add.Tensor(mul_58, arg124_1);  mul_58 = arg124_1 = None
        view_154 = torch.ops.aten.view.default(add_65, [512, 768])
        permute_77 = torch.ops.aten.permute.default(arg125_1, [1, 0]);  arg125_1 = None
        addmm_42 = torch.ops.aten.addmm.default(arg126_1, view_154, permute_77);  arg126_1 = view_154 = permute_77 = None
        view_155 = torch.ops.aten.view.default(addmm_42, [2, 256, 768]);  addmm_42 = None
        view_156 = torch.ops.aten.view.default(view_155, [2, 256, -1, 64]);  view_155 = None
        permute_78 = torch.ops.aten.permute.default(view_156, [0, 2, 1, 3]);  view_156 = None
        view_157 = torch.ops.aten.view.default(add_65, [512, 768])
        permute_79 = torch.ops.aten.permute.default(arg127_1, [1, 0]);  arg127_1 = None
        addmm_43 = torch.ops.aten.addmm.default(arg128_1, view_157, permute_79);  arg128_1 = view_157 = permute_79 = None
        view_158 = torch.ops.aten.view.default(addmm_43, [2, 256, 768]);  addmm_43 = None
        view_159 = torch.ops.aten.view.default(view_158, [2, 256, -1, 64]);  view_158 = None
        permute_80 = torch.ops.aten.permute.default(view_159, [0, 2, 1, 3]);  view_159 = None
        view_160 = torch.ops.aten.view.default(add_65, [512, 768])
        permute_81 = torch.ops.aten.permute.default(arg129_1, [1, 0]);  arg129_1 = None
        addmm_44 = torch.ops.aten.addmm.default(arg130_1, view_160, permute_81);  arg130_1 = view_160 = permute_81 = None
        view_161 = torch.ops.aten.view.default(addmm_44, [2, 256, 768]);  addmm_44 = None
        view_162 = torch.ops.aten.view.default(view_161, [2, 256, -1, 64]);  view_161 = None
        permute_82 = torch.ops.aten.permute.default(view_162, [0, 2, 1, 3]);  view_162 = None
        permute_83 = torch.ops.aten.permute.default(permute_80, [0, 1, 3, 2]);  permute_80 = None
        expand_28 = torch.ops.aten.expand.default(permute_78, [2, 12, 256, 64]);  permute_78 = None
        clone_50 = torch.ops.aten.clone.default(expand_28, memory_format = torch.contiguous_format);  expand_28 = None
        view_163 = torch.ops.aten.view.default(clone_50, [24, 256, 64]);  clone_50 = None
        expand_29 = torch.ops.aten.expand.default(permute_83, [2, 12, 64, 256]);  permute_83 = None
        clone_51 = torch.ops.aten.clone.default(expand_29, memory_format = torch.contiguous_format);  expand_29 = None
        view_164 = torch.ops.aten.view.default(clone_51, [24, 64, 256]);  clone_51 = None
        bmm_14 = torch.ops.aten.bmm.default(view_163, view_164);  view_163 = view_164 = None
        view_165 = torch.ops.aten.view.default(bmm_14, [2, 12, 256, 256]);  bmm_14 = None
        mul_59 = torch.ops.aten.mul.Tensor(view_165, 0.125);  view_165 = None
        add_66 = torch.ops.aten.add.Tensor(mul_59, mul);  mul_59 = None
        amax_7 = torch.ops.aten.amax.default(add_66, [-1], True)
        sub_25 = torch.ops.aten.sub.Tensor(add_66, amax_7);  add_66 = amax_7 = None
        exp_7 = torch.ops.aten.exp.default(sub_25);  sub_25 = None
        sum_8 = torch.ops.aten.sum.dim_IntList(exp_7, [-1], True)
        div_7 = torch.ops.aten.div.Tensor(exp_7, sum_8);  exp_7 = sum_8 = None
        expand_30 = torch.ops.aten.expand.default(div_7, [2, 12, 256, 256]);  div_7 = None
        view_166 = torch.ops.aten.view.default(expand_30, [24, 256, 256]);  expand_30 = None
        expand_31 = torch.ops.aten.expand.default(permute_82, [2, 12, 256, 64]);  permute_82 = None
        clone_53 = torch.ops.aten.clone.default(expand_31, memory_format = torch.contiguous_format);  expand_31 = None
        view_167 = torch.ops.aten.view.default(clone_53, [24, 256, 64]);  clone_53 = None
        bmm_15 = torch.ops.aten.bmm.default(view_166, view_167);  view_166 = view_167 = None
        view_168 = torch.ops.aten.view.default(bmm_15, [2, 12, 256, 64]);  bmm_15 = None
        permute_84 = torch.ops.aten.permute.default(view_168, [0, 2, 1, 3]);  view_168 = None
        clone_54 = torch.ops.aten.clone.default(permute_84, memory_format = torch.contiguous_format);  permute_84 = None
        view_169 = torch.ops.aten.view.default(clone_54, [2, 256, -1]);  clone_54 = None
        view_170 = torch.ops.aten.view.default(view_169, [512, 768]);  view_169 = None
        permute_85 = torch.ops.aten.permute.default(arg131_1, [1, 0]);  arg131_1 = None
        addmm_45 = torch.ops.aten.addmm.default(arg132_1, view_170, permute_85);  arg132_1 = view_170 = permute_85 = None
        view_171 = torch.ops.aten.view.default(addmm_45, [2, 256, 768]);  addmm_45 = None
        add_67 = torch.ops.aten.add.Tensor(view_171, add_65);  view_171 = add_65 = None
        var_mean_15 = torch.ops.aten.var_mean.correction(add_67, [2], correction = 0, keepdim = True)
        getitem_30 = var_mean_15[0]
        getitem_31 = var_mean_15[1];  var_mean_15 = None
        add_68 = torch.ops.aten.add.Tensor(getitem_30, 1e-12);  getitem_30 = None
        rsqrt_15 = torch.ops.aten.rsqrt.default(add_68);  add_68 = None
        sub_26 = torch.ops.aten.sub.Tensor(add_67, getitem_31);  add_67 = getitem_31 = None
        mul_60 = torch.ops.aten.mul.Tensor(sub_26, rsqrt_15);  sub_26 = rsqrt_15 = None
        mul_61 = torch.ops.aten.mul.Tensor(mul_60, arg133_1);  mul_60 = arg133_1 = None
        add_69 = torch.ops.aten.add.Tensor(mul_61, arg134_1);  mul_61 = arg134_1 = None
        view_172 = torch.ops.aten.view.default(add_69, [512, 768])
        permute_86 = torch.ops.aten.permute.default(arg135_1, [1, 0]);  arg135_1 = None
        addmm_46 = torch.ops.aten.addmm.default(arg136_1, view_172, permute_86);  arg136_1 = view_172 = permute_86 = None
        view_173 = torch.ops.aten.view.default(addmm_46, [2, 256, 3072]);  addmm_46 = None
        mul_62 = torch.ops.aten.mul.Tensor(view_173, 0.5)
        mul_63 = torch.ops.aten.mul.Tensor(view_173, 0.7071067811865476);  view_173 = None
        erf_7 = torch.ops.aten.erf.default(mul_63);  mul_63 = None
        add_70 = torch.ops.aten.add.Tensor(erf_7, 1);  erf_7 = None
        mul_64 = torch.ops.aten.mul.Tensor(mul_62, add_70);  mul_62 = add_70 = None
        view_174 = torch.ops.aten.view.default(mul_64, [512, 3072]);  mul_64 = None
        permute_87 = torch.ops.aten.permute.default(arg137_1, [1, 0]);  arg137_1 = None
        addmm_47 = torch.ops.aten.addmm.default(arg138_1, view_174, permute_87);  arg138_1 = view_174 = permute_87 = None
        view_175 = torch.ops.aten.view.default(addmm_47, [2, 256, 768]);  addmm_47 = None
        add_71 = torch.ops.aten.add.Tensor(view_175, add_69);  view_175 = add_69 = None
        var_mean_16 = torch.ops.aten.var_mean.correction(add_71, [2], correction = 0, keepdim = True)
        getitem_32 = var_mean_16[0]
        getitem_33 = var_mean_16[1];  var_mean_16 = None
        add_72 = torch.ops.aten.add.Tensor(getitem_32, 1e-12);  getitem_32 = None
        rsqrt_16 = torch.ops.aten.rsqrt.default(add_72);  add_72 = None
        sub_27 = torch.ops.aten.sub.Tensor(add_71, getitem_33);  add_71 = getitem_33 = None
        mul_65 = torch.ops.aten.mul.Tensor(sub_27, rsqrt_16);  sub_27 = rsqrt_16 = None
        mul_66 = torch.ops.aten.mul.Tensor(mul_65, arg139_1);  mul_65 = arg139_1 = None
        add_73 = torch.ops.aten.add.Tensor(mul_66, arg140_1);  mul_66 = arg140_1 = None
        view_176 = torch.ops.aten.view.default(add_73, [512, 768])
        permute_88 = torch.ops.aten.permute.default(arg141_1, [1, 0]);  arg141_1 = None
        addmm_48 = torch.ops.aten.addmm.default(arg142_1, view_176, permute_88);  arg142_1 = view_176 = permute_88 = None
        view_177 = torch.ops.aten.view.default(addmm_48, [2, 256, 768]);  addmm_48 = None
        view_178 = torch.ops.aten.view.default(view_177, [2, 256, -1, 64]);  view_177 = None
        permute_89 = torch.ops.aten.permute.default(view_178, [0, 2, 1, 3]);  view_178 = None
        view_179 = torch.ops.aten.view.default(add_73, [512, 768])
        permute_90 = torch.ops.aten.permute.default(arg143_1, [1, 0]);  arg143_1 = None
        addmm_49 = torch.ops.aten.addmm.default(arg144_1, view_179, permute_90);  arg144_1 = view_179 = permute_90 = None
        view_180 = torch.ops.aten.view.default(addmm_49, [2, 256, 768]);  addmm_49 = None
        view_181 = torch.ops.aten.view.default(view_180, [2, 256, -1, 64]);  view_180 = None
        permute_91 = torch.ops.aten.permute.default(view_181, [0, 2, 1, 3]);  view_181 = None
        view_182 = torch.ops.aten.view.default(add_73, [512, 768])
        permute_92 = torch.ops.aten.permute.default(arg145_1, [1, 0]);  arg145_1 = None
        addmm_50 = torch.ops.aten.addmm.default(arg146_1, view_182, permute_92);  arg146_1 = view_182 = permute_92 = None
        view_183 = torch.ops.aten.view.default(addmm_50, [2, 256, 768]);  addmm_50 = None
        view_184 = torch.ops.aten.view.default(view_183, [2, 256, -1, 64]);  view_183 = None
        permute_93 = torch.ops.aten.permute.default(view_184, [0, 2, 1, 3]);  view_184 = None
        permute_94 = torch.ops.aten.permute.default(permute_91, [0, 1, 3, 2]);  permute_91 = None
        expand_32 = torch.ops.aten.expand.default(permute_89, [2, 12, 256, 64]);  permute_89 = None
        clone_57 = torch.ops.aten.clone.default(expand_32, memory_format = torch.contiguous_format);  expand_32 = None
        view_185 = torch.ops.aten.view.default(clone_57, [24, 256, 64]);  clone_57 = None
        expand_33 = torch.ops.aten.expand.default(permute_94, [2, 12, 64, 256]);  permute_94 = None
        clone_58 = torch.ops.aten.clone.default(expand_33, memory_format = torch.contiguous_format);  expand_33 = None
        view_186 = torch.ops.aten.view.default(clone_58, [24, 64, 256]);  clone_58 = None
        bmm_16 = torch.ops.aten.bmm.default(view_185, view_186);  view_185 = view_186 = None
        view_187 = torch.ops.aten.view.default(bmm_16, [2, 12, 256, 256]);  bmm_16 = None
        mul_67 = torch.ops.aten.mul.Tensor(view_187, 0.125);  view_187 = None
        add_74 = torch.ops.aten.add.Tensor(mul_67, mul);  mul_67 = None
        amax_8 = torch.ops.aten.amax.default(add_74, [-1], True)
        sub_28 = torch.ops.aten.sub.Tensor(add_74, amax_8);  add_74 = amax_8 = None
        exp_8 = torch.ops.aten.exp.default(sub_28);  sub_28 = None
        sum_9 = torch.ops.aten.sum.dim_IntList(exp_8, [-1], True)
        div_8 = torch.ops.aten.div.Tensor(exp_8, sum_9);  exp_8 = sum_9 = None
        expand_34 = torch.ops.aten.expand.default(div_8, [2, 12, 256, 256]);  div_8 = None
        view_188 = torch.ops.aten.view.default(expand_34, [24, 256, 256]);  expand_34 = None
        expand_35 = torch.ops.aten.expand.default(permute_93, [2, 12, 256, 64]);  permute_93 = None
        clone_60 = torch.ops.aten.clone.default(expand_35, memory_format = torch.contiguous_format);  expand_35 = None
        view_189 = torch.ops.aten.view.default(clone_60, [24, 256, 64]);  clone_60 = None
        bmm_17 = torch.ops.aten.bmm.default(view_188, view_189);  view_188 = view_189 = None
        view_190 = torch.ops.aten.view.default(bmm_17, [2, 12, 256, 64]);  bmm_17 = None
        permute_95 = torch.ops.aten.permute.default(view_190, [0, 2, 1, 3]);  view_190 = None
        clone_61 = torch.ops.aten.clone.default(permute_95, memory_format = torch.contiguous_format);  permute_95 = None
        view_191 = torch.ops.aten.view.default(clone_61, [2, 256, -1]);  clone_61 = None
        view_192 = torch.ops.aten.view.default(view_191, [512, 768]);  view_191 = None
        permute_96 = torch.ops.aten.permute.default(arg147_1, [1, 0]);  arg147_1 = None
        addmm_51 = torch.ops.aten.addmm.default(arg148_1, view_192, permute_96);  arg148_1 = view_192 = permute_96 = None
        view_193 = torch.ops.aten.view.default(addmm_51, [2, 256, 768]);  addmm_51 = None
        add_75 = torch.ops.aten.add.Tensor(view_193, add_73);  view_193 = add_73 = None
        var_mean_17 = torch.ops.aten.var_mean.correction(add_75, [2], correction = 0, keepdim = True)
        getitem_34 = var_mean_17[0]
        getitem_35 = var_mean_17[1];  var_mean_17 = None
        add_76 = torch.ops.aten.add.Tensor(getitem_34, 1e-12);  getitem_34 = None
        rsqrt_17 = torch.ops.aten.rsqrt.default(add_76);  add_76 = None
        sub_29 = torch.ops.aten.sub.Tensor(add_75, getitem_35);  add_75 = getitem_35 = None
        mul_68 = torch.ops.aten.mul.Tensor(sub_29, rsqrt_17);  sub_29 = rsqrt_17 = None
        mul_69 = torch.ops.aten.mul.Tensor(mul_68, arg149_1);  mul_68 = arg149_1 = None
        add_77 = torch.ops.aten.add.Tensor(mul_69, arg150_1);  mul_69 = arg150_1 = None
        view_194 = torch.ops.aten.view.default(add_77, [512, 768])
        permute_97 = torch.ops.aten.permute.default(arg151_1, [1, 0]);  arg151_1 = None
        addmm_52 = torch.ops.aten.addmm.default(arg152_1, view_194, permute_97);  arg152_1 = view_194 = permute_97 = None
        view_195 = torch.ops.aten.view.default(addmm_52, [2, 256, 3072]);  addmm_52 = None
        mul_70 = torch.ops.aten.mul.Tensor(view_195, 0.5)
        mul_71 = torch.ops.aten.mul.Tensor(view_195, 0.7071067811865476);  view_195 = None
        erf_8 = torch.ops.aten.erf.default(mul_71);  mul_71 = None
        add_78 = torch.ops.aten.add.Tensor(erf_8, 1);  erf_8 = None
        mul_72 = torch.ops.aten.mul.Tensor(mul_70, add_78);  mul_70 = add_78 = None
        view_196 = torch.ops.aten.view.default(mul_72, [512, 3072]);  mul_72 = None
        permute_98 = torch.ops.aten.permute.default(arg153_1, [1, 0]);  arg153_1 = None
        addmm_53 = torch.ops.aten.addmm.default(arg154_1, view_196, permute_98);  arg154_1 = view_196 = permute_98 = None
        view_197 = torch.ops.aten.view.default(addmm_53, [2, 256, 768]);  addmm_53 = None
        add_79 = torch.ops.aten.add.Tensor(view_197, add_77);  view_197 = add_77 = None
        var_mean_18 = torch.ops.aten.var_mean.correction(add_79, [2], correction = 0, keepdim = True)
        getitem_36 = var_mean_18[0]
        getitem_37 = var_mean_18[1];  var_mean_18 = None
        add_80 = torch.ops.aten.add.Tensor(getitem_36, 1e-12);  getitem_36 = None
        rsqrt_18 = torch.ops.aten.rsqrt.default(add_80);  add_80 = None
        sub_30 = torch.ops.aten.sub.Tensor(add_79, getitem_37);  add_79 = getitem_37 = None
        mul_73 = torch.ops.aten.mul.Tensor(sub_30, rsqrt_18);  sub_30 = rsqrt_18 = None
        mul_74 = torch.ops.aten.mul.Tensor(mul_73, arg155_1);  mul_73 = arg155_1 = None
        add_81 = torch.ops.aten.add.Tensor(mul_74, arg156_1);  mul_74 = arg156_1 = None
        view_198 = torch.ops.aten.view.default(add_81, [512, 768])
        permute_99 = torch.ops.aten.permute.default(arg157_1, [1, 0]);  arg157_1 = None
        addmm_54 = torch.ops.aten.addmm.default(arg158_1, view_198, permute_99);  arg158_1 = view_198 = permute_99 = None
        view_199 = torch.ops.aten.view.default(addmm_54, [2, 256, 768]);  addmm_54 = None
        view_200 = torch.ops.aten.view.default(view_199, [2, 256, -1, 64]);  view_199 = None
        permute_100 = torch.ops.aten.permute.default(view_200, [0, 2, 1, 3]);  view_200 = None
        view_201 = torch.ops.aten.view.default(add_81, [512, 768])
        permute_101 = torch.ops.aten.permute.default(arg159_1, [1, 0]);  arg159_1 = None
        addmm_55 = torch.ops.aten.addmm.default(arg160_1, view_201, permute_101);  arg160_1 = view_201 = permute_101 = None
        view_202 = torch.ops.aten.view.default(addmm_55, [2, 256, 768]);  addmm_55 = None
        view_203 = torch.ops.aten.view.default(view_202, [2, 256, -1, 64]);  view_202 = None
        permute_102 = torch.ops.aten.permute.default(view_203, [0, 2, 1, 3]);  view_203 = None
        view_204 = torch.ops.aten.view.default(add_81, [512, 768])
        permute_103 = torch.ops.aten.permute.default(arg161_1, [1, 0]);  arg161_1 = None
        addmm_56 = torch.ops.aten.addmm.default(arg162_1, view_204, permute_103);  arg162_1 = view_204 = permute_103 = None
        view_205 = torch.ops.aten.view.default(addmm_56, [2, 256, 768]);  addmm_56 = None
        view_206 = torch.ops.aten.view.default(view_205, [2, 256, -1, 64]);  view_205 = None
        permute_104 = torch.ops.aten.permute.default(view_206, [0, 2, 1, 3]);  view_206 = None
        permute_105 = torch.ops.aten.permute.default(permute_102, [0, 1, 3, 2]);  permute_102 = None
        expand_36 = torch.ops.aten.expand.default(permute_100, [2, 12, 256, 64]);  permute_100 = None
        clone_64 = torch.ops.aten.clone.default(expand_36, memory_format = torch.contiguous_format);  expand_36 = None
        view_207 = torch.ops.aten.view.default(clone_64, [24, 256, 64]);  clone_64 = None
        expand_37 = torch.ops.aten.expand.default(permute_105, [2, 12, 64, 256]);  permute_105 = None
        clone_65 = torch.ops.aten.clone.default(expand_37, memory_format = torch.contiguous_format);  expand_37 = None
        view_208 = torch.ops.aten.view.default(clone_65, [24, 64, 256]);  clone_65 = None
        bmm_18 = torch.ops.aten.bmm.default(view_207, view_208);  view_207 = view_208 = None
        view_209 = torch.ops.aten.view.default(bmm_18, [2, 12, 256, 256]);  bmm_18 = None
        mul_75 = torch.ops.aten.mul.Tensor(view_209, 0.125);  view_209 = None
        add_82 = torch.ops.aten.add.Tensor(mul_75, mul);  mul_75 = None
        amax_9 = torch.ops.aten.amax.default(add_82, [-1], True)
        sub_31 = torch.ops.aten.sub.Tensor(add_82, amax_9);  add_82 = amax_9 = None
        exp_9 = torch.ops.aten.exp.default(sub_31);  sub_31 = None
        sum_10 = torch.ops.aten.sum.dim_IntList(exp_9, [-1], True)
        div_9 = torch.ops.aten.div.Tensor(exp_9, sum_10);  exp_9 = sum_10 = None
        expand_38 = torch.ops.aten.expand.default(div_9, [2, 12, 256, 256]);  div_9 = None
        view_210 = torch.ops.aten.view.default(expand_38, [24, 256, 256]);  expand_38 = None
        expand_39 = torch.ops.aten.expand.default(permute_104, [2, 12, 256, 64]);  permute_104 = None
        clone_67 = torch.ops.aten.clone.default(expand_39, memory_format = torch.contiguous_format);  expand_39 = None
        view_211 = torch.ops.aten.view.default(clone_67, [24, 256, 64]);  clone_67 = None
        bmm_19 = torch.ops.aten.bmm.default(view_210, view_211);  view_210 = view_211 = None
        view_212 = torch.ops.aten.view.default(bmm_19, [2, 12, 256, 64]);  bmm_19 = None
        permute_106 = torch.ops.aten.permute.default(view_212, [0, 2, 1, 3]);  view_212 = None
        clone_68 = torch.ops.aten.clone.default(permute_106, memory_format = torch.contiguous_format);  permute_106 = None
        view_213 = torch.ops.aten.view.default(clone_68, [2, 256, -1]);  clone_68 = None
        view_214 = torch.ops.aten.view.default(view_213, [512, 768]);  view_213 = None
        permute_107 = torch.ops.aten.permute.default(arg163_1, [1, 0]);  arg163_1 = None
        addmm_57 = torch.ops.aten.addmm.default(arg164_1, view_214, permute_107);  arg164_1 = view_214 = permute_107 = None
        view_215 = torch.ops.aten.view.default(addmm_57, [2, 256, 768]);  addmm_57 = None
        add_83 = torch.ops.aten.add.Tensor(view_215, add_81);  view_215 = add_81 = None
        var_mean_19 = torch.ops.aten.var_mean.correction(add_83, [2], correction = 0, keepdim = True)
        getitem_38 = var_mean_19[0]
        getitem_39 = var_mean_19[1];  var_mean_19 = None
        add_84 = torch.ops.aten.add.Tensor(getitem_38, 1e-12);  getitem_38 = None
        rsqrt_19 = torch.ops.aten.rsqrt.default(add_84);  add_84 = None
        sub_32 = torch.ops.aten.sub.Tensor(add_83, getitem_39);  add_83 = getitem_39 = None
        mul_76 = torch.ops.aten.mul.Tensor(sub_32, rsqrt_19);  sub_32 = rsqrt_19 = None
        mul_77 = torch.ops.aten.mul.Tensor(mul_76, arg165_1);  mul_76 = arg165_1 = None
        add_85 = torch.ops.aten.add.Tensor(mul_77, arg166_1);  mul_77 = arg166_1 = None
        view_216 = torch.ops.aten.view.default(add_85, [512, 768])
        permute_108 = torch.ops.aten.permute.default(arg167_1, [1, 0]);  arg167_1 = None
        addmm_58 = torch.ops.aten.addmm.default(arg168_1, view_216, permute_108);  arg168_1 = view_216 = permute_108 = None
        view_217 = torch.ops.aten.view.default(addmm_58, [2, 256, 3072]);  addmm_58 = None
        mul_78 = torch.ops.aten.mul.Tensor(view_217, 0.5)
        mul_79 = torch.ops.aten.mul.Tensor(view_217, 0.7071067811865476);  view_217 = None
        erf_9 = torch.ops.aten.erf.default(mul_79);  mul_79 = None
        add_86 = torch.ops.aten.add.Tensor(erf_9, 1);  erf_9 = None
        mul_80 = torch.ops.aten.mul.Tensor(mul_78, add_86);  mul_78 = add_86 = None
        view_218 = torch.ops.aten.view.default(mul_80, [512, 3072]);  mul_80 = None
        permute_109 = torch.ops.aten.permute.default(arg169_1, [1, 0]);  arg169_1 = None
        addmm_59 = torch.ops.aten.addmm.default(arg170_1, view_218, permute_109);  arg170_1 = view_218 = permute_109 = None
        view_219 = torch.ops.aten.view.default(addmm_59, [2, 256, 768]);  addmm_59 = None
        add_87 = torch.ops.aten.add.Tensor(view_219, add_85);  view_219 = add_85 = None
        var_mean_20 = torch.ops.aten.var_mean.correction(add_87, [2], correction = 0, keepdim = True)
        getitem_40 = var_mean_20[0]
        getitem_41 = var_mean_20[1];  var_mean_20 = None
        add_88 = torch.ops.aten.add.Tensor(getitem_40, 1e-12);  getitem_40 = None
        rsqrt_20 = torch.ops.aten.rsqrt.default(add_88);  add_88 = None
        sub_33 = torch.ops.aten.sub.Tensor(add_87, getitem_41);  add_87 = getitem_41 = None
        mul_81 = torch.ops.aten.mul.Tensor(sub_33, rsqrt_20);  sub_33 = rsqrt_20 = None
        mul_82 = torch.ops.aten.mul.Tensor(mul_81, arg171_1);  mul_81 = arg171_1 = None
        add_89 = torch.ops.aten.add.Tensor(mul_82, arg172_1);  mul_82 = arg172_1 = None
        view_220 = torch.ops.aten.view.default(add_89, [512, 768])
        permute_110 = torch.ops.aten.permute.default(arg173_1, [1, 0]);  arg173_1 = None
        addmm_60 = torch.ops.aten.addmm.default(arg174_1, view_220, permute_110);  arg174_1 = view_220 = permute_110 = None
        view_221 = torch.ops.aten.view.default(addmm_60, [2, 256, 768]);  addmm_60 = None
        view_222 = torch.ops.aten.view.default(view_221, [2, 256, -1, 64]);  view_221 = None
        permute_111 = torch.ops.aten.permute.default(view_222, [0, 2, 1, 3]);  view_222 = None
        view_223 = torch.ops.aten.view.default(add_89, [512, 768])
        permute_112 = torch.ops.aten.permute.default(arg175_1, [1, 0]);  arg175_1 = None
        addmm_61 = torch.ops.aten.addmm.default(arg176_1, view_223, permute_112);  arg176_1 = view_223 = permute_112 = None
        view_224 = torch.ops.aten.view.default(addmm_61, [2, 256, 768]);  addmm_61 = None
        view_225 = torch.ops.aten.view.default(view_224, [2, 256, -1, 64]);  view_224 = None
        permute_113 = torch.ops.aten.permute.default(view_225, [0, 2, 1, 3]);  view_225 = None
        view_226 = torch.ops.aten.view.default(add_89, [512, 768])
        permute_114 = torch.ops.aten.permute.default(arg177_1, [1, 0]);  arg177_1 = None
        addmm_62 = torch.ops.aten.addmm.default(arg178_1, view_226, permute_114);  arg178_1 = view_226 = permute_114 = None
        view_227 = torch.ops.aten.view.default(addmm_62, [2, 256, 768]);  addmm_62 = None
        view_228 = torch.ops.aten.view.default(view_227, [2, 256, -1, 64]);  view_227 = None
        permute_115 = torch.ops.aten.permute.default(view_228, [0, 2, 1, 3]);  view_228 = None
        permute_116 = torch.ops.aten.permute.default(permute_113, [0, 1, 3, 2]);  permute_113 = None
        expand_40 = torch.ops.aten.expand.default(permute_111, [2, 12, 256, 64]);  permute_111 = None
        clone_71 = torch.ops.aten.clone.default(expand_40, memory_format = torch.contiguous_format);  expand_40 = None
        view_229 = torch.ops.aten.view.default(clone_71, [24, 256, 64]);  clone_71 = None
        expand_41 = torch.ops.aten.expand.default(permute_116, [2, 12, 64, 256]);  permute_116 = None
        clone_72 = torch.ops.aten.clone.default(expand_41, memory_format = torch.contiguous_format);  expand_41 = None
        view_230 = torch.ops.aten.view.default(clone_72, [24, 64, 256]);  clone_72 = None
        bmm_20 = torch.ops.aten.bmm.default(view_229, view_230);  view_229 = view_230 = None
        view_231 = torch.ops.aten.view.default(bmm_20, [2, 12, 256, 256]);  bmm_20 = None
        mul_83 = torch.ops.aten.mul.Tensor(view_231, 0.125);  view_231 = None
        add_90 = torch.ops.aten.add.Tensor(mul_83, mul);  mul_83 = None
        amax_10 = torch.ops.aten.amax.default(add_90, [-1], True)
        sub_34 = torch.ops.aten.sub.Tensor(add_90, amax_10);  add_90 = amax_10 = None
        exp_10 = torch.ops.aten.exp.default(sub_34);  sub_34 = None
        sum_11 = torch.ops.aten.sum.dim_IntList(exp_10, [-1], True)
        div_10 = torch.ops.aten.div.Tensor(exp_10, sum_11);  exp_10 = sum_11 = None
        expand_42 = torch.ops.aten.expand.default(div_10, [2, 12, 256, 256]);  div_10 = None
        view_232 = torch.ops.aten.view.default(expand_42, [24, 256, 256]);  expand_42 = None
        expand_43 = torch.ops.aten.expand.default(permute_115, [2, 12, 256, 64]);  permute_115 = None
        clone_74 = torch.ops.aten.clone.default(expand_43, memory_format = torch.contiguous_format);  expand_43 = None
        view_233 = torch.ops.aten.view.default(clone_74, [24, 256, 64]);  clone_74 = None
        bmm_21 = torch.ops.aten.bmm.default(view_232, view_233);  view_232 = view_233 = None
        view_234 = torch.ops.aten.view.default(bmm_21, [2, 12, 256, 64]);  bmm_21 = None
        permute_117 = torch.ops.aten.permute.default(view_234, [0, 2, 1, 3]);  view_234 = None
        clone_75 = torch.ops.aten.clone.default(permute_117, memory_format = torch.contiguous_format);  permute_117 = None
        view_235 = torch.ops.aten.view.default(clone_75, [2, 256, -1]);  clone_75 = None
        view_236 = torch.ops.aten.view.default(view_235, [512, 768]);  view_235 = None
        permute_118 = torch.ops.aten.permute.default(arg179_1, [1, 0]);  arg179_1 = None
        addmm_63 = torch.ops.aten.addmm.default(arg180_1, view_236, permute_118);  arg180_1 = view_236 = permute_118 = None
        view_237 = torch.ops.aten.view.default(addmm_63, [2, 256, 768]);  addmm_63 = None
        add_91 = torch.ops.aten.add.Tensor(view_237, add_89);  view_237 = add_89 = None
        var_mean_21 = torch.ops.aten.var_mean.correction(add_91, [2], correction = 0, keepdim = True)
        getitem_42 = var_mean_21[0]
        getitem_43 = var_mean_21[1];  var_mean_21 = None
        add_92 = torch.ops.aten.add.Tensor(getitem_42, 1e-12);  getitem_42 = None
        rsqrt_21 = torch.ops.aten.rsqrt.default(add_92);  add_92 = None
        sub_35 = torch.ops.aten.sub.Tensor(add_91, getitem_43);  add_91 = getitem_43 = None
        mul_84 = torch.ops.aten.mul.Tensor(sub_35, rsqrt_21);  sub_35 = rsqrt_21 = None
        mul_85 = torch.ops.aten.mul.Tensor(mul_84, arg181_1);  mul_84 = arg181_1 = None
        add_93 = torch.ops.aten.add.Tensor(mul_85, arg182_1);  mul_85 = arg182_1 = None
        view_238 = torch.ops.aten.view.default(add_93, [512, 768])
        permute_119 = torch.ops.aten.permute.default(arg183_1, [1, 0]);  arg183_1 = None
        addmm_64 = torch.ops.aten.addmm.default(arg184_1, view_238, permute_119);  arg184_1 = view_238 = permute_119 = None
        view_239 = torch.ops.aten.view.default(addmm_64, [2, 256, 3072]);  addmm_64 = None
        mul_86 = torch.ops.aten.mul.Tensor(view_239, 0.5)
        mul_87 = torch.ops.aten.mul.Tensor(view_239, 0.7071067811865476);  view_239 = None
        erf_10 = torch.ops.aten.erf.default(mul_87);  mul_87 = None
        add_94 = torch.ops.aten.add.Tensor(erf_10, 1);  erf_10 = None
        mul_88 = torch.ops.aten.mul.Tensor(mul_86, add_94);  mul_86 = add_94 = None
        view_240 = torch.ops.aten.view.default(mul_88, [512, 3072]);  mul_88 = None
        permute_120 = torch.ops.aten.permute.default(arg185_1, [1, 0]);  arg185_1 = None
        addmm_65 = torch.ops.aten.addmm.default(arg186_1, view_240, permute_120);  arg186_1 = view_240 = permute_120 = None
        view_241 = torch.ops.aten.view.default(addmm_65, [2, 256, 768]);  addmm_65 = None
        add_95 = torch.ops.aten.add.Tensor(view_241, add_93);  view_241 = add_93 = None
        var_mean_22 = torch.ops.aten.var_mean.correction(add_95, [2], correction = 0, keepdim = True)
        getitem_44 = var_mean_22[0]
        getitem_45 = var_mean_22[1];  var_mean_22 = None
        add_96 = torch.ops.aten.add.Tensor(getitem_44, 1e-12);  getitem_44 = None
        rsqrt_22 = torch.ops.aten.rsqrt.default(add_96);  add_96 = None
        sub_36 = torch.ops.aten.sub.Tensor(add_95, getitem_45);  add_95 = getitem_45 = None
        mul_89 = torch.ops.aten.mul.Tensor(sub_36, rsqrt_22);  sub_36 = rsqrt_22 = None
        mul_90 = torch.ops.aten.mul.Tensor(mul_89, arg187_1);  mul_89 = arg187_1 = None
        add_97 = torch.ops.aten.add.Tensor(mul_90, arg188_1);  mul_90 = arg188_1 = None
        view_242 = torch.ops.aten.view.default(add_97, [512, 768])
        permute_121 = torch.ops.aten.permute.default(arg189_1, [1, 0]);  arg189_1 = None
        addmm_66 = torch.ops.aten.addmm.default(arg190_1, view_242, permute_121);  arg190_1 = view_242 = permute_121 = None
        view_243 = torch.ops.aten.view.default(addmm_66, [2, 256, 768]);  addmm_66 = None
        view_244 = torch.ops.aten.view.default(view_243, [2, 256, -1, 64]);  view_243 = None
        permute_122 = torch.ops.aten.permute.default(view_244, [0, 2, 1, 3]);  view_244 = None
        view_245 = torch.ops.aten.view.default(add_97, [512, 768])
        permute_123 = torch.ops.aten.permute.default(arg191_1, [1, 0]);  arg191_1 = None
        addmm_67 = torch.ops.aten.addmm.default(arg192_1, view_245, permute_123);  arg192_1 = view_245 = permute_123 = None
        view_246 = torch.ops.aten.view.default(addmm_67, [2, 256, 768]);  addmm_67 = None
        view_247 = torch.ops.aten.view.default(view_246, [2, 256, -1, 64]);  view_246 = None
        permute_124 = torch.ops.aten.permute.default(view_247, [0, 2, 1, 3]);  view_247 = None
        view_248 = torch.ops.aten.view.default(add_97, [512, 768])
        permute_125 = torch.ops.aten.permute.default(arg193_1, [1, 0]);  arg193_1 = None
        addmm_68 = torch.ops.aten.addmm.default(arg194_1, view_248, permute_125);  arg194_1 = view_248 = permute_125 = None
        view_249 = torch.ops.aten.view.default(addmm_68, [2, 256, 768]);  addmm_68 = None
        view_250 = torch.ops.aten.view.default(view_249, [2, 256, -1, 64]);  view_249 = None
        permute_126 = torch.ops.aten.permute.default(view_250, [0, 2, 1, 3]);  view_250 = None
        permute_127 = torch.ops.aten.permute.default(permute_124, [0, 1, 3, 2]);  permute_124 = None
        expand_44 = torch.ops.aten.expand.default(permute_122, [2, 12, 256, 64]);  permute_122 = None
        clone_78 = torch.ops.aten.clone.default(expand_44, memory_format = torch.contiguous_format);  expand_44 = None
        view_251 = torch.ops.aten.view.default(clone_78, [24, 256, 64]);  clone_78 = None
        expand_45 = torch.ops.aten.expand.default(permute_127, [2, 12, 64, 256]);  permute_127 = None
        clone_79 = torch.ops.aten.clone.default(expand_45, memory_format = torch.contiguous_format);  expand_45 = None
        view_252 = torch.ops.aten.view.default(clone_79, [24, 64, 256]);  clone_79 = None
        bmm_22 = torch.ops.aten.bmm.default(view_251, view_252);  view_251 = view_252 = None
        view_253 = torch.ops.aten.view.default(bmm_22, [2, 12, 256, 256]);  bmm_22 = None
        mul_91 = torch.ops.aten.mul.Tensor(view_253, 0.125);  view_253 = None
        add_98 = torch.ops.aten.add.Tensor(mul_91, mul);  mul_91 = mul = None
        amax_11 = torch.ops.aten.amax.default(add_98, [-1], True)
        sub_37 = torch.ops.aten.sub.Tensor(add_98, amax_11);  add_98 = amax_11 = None
        exp_11 = torch.ops.aten.exp.default(sub_37);  sub_37 = None
        sum_12 = torch.ops.aten.sum.dim_IntList(exp_11, [-1], True)
        div_11 = torch.ops.aten.div.Tensor(exp_11, sum_12);  exp_11 = sum_12 = None
        expand_46 = torch.ops.aten.expand.default(div_11, [2, 12, 256, 256]);  div_11 = None
        view_254 = torch.ops.aten.view.default(expand_46, [24, 256, 256]);  expand_46 = None
        expand_47 = torch.ops.aten.expand.default(permute_126, [2, 12, 256, 64]);  permute_126 = None
        clone_81 = torch.ops.aten.clone.default(expand_47, memory_format = torch.contiguous_format);  expand_47 = None
        view_255 = torch.ops.aten.view.default(clone_81, [24, 256, 64]);  clone_81 = None
        bmm_23 = torch.ops.aten.bmm.default(view_254, view_255);  view_254 = view_255 = None
        view_256 = torch.ops.aten.view.default(bmm_23, [2, 12, 256, 64]);  bmm_23 = None
        permute_128 = torch.ops.aten.permute.default(view_256, [0, 2, 1, 3]);  view_256 = None
        clone_82 = torch.ops.aten.clone.default(permute_128, memory_format = torch.contiguous_format);  permute_128 = None
        view_257 = torch.ops.aten.view.default(clone_82, [2, 256, -1]);  clone_82 = None
        view_258 = torch.ops.aten.view.default(view_257, [512, 768]);  view_257 = None
        permute_129 = torch.ops.aten.permute.default(arg195_1, [1, 0]);  arg195_1 = None
        addmm_69 = torch.ops.aten.addmm.default(arg196_1, view_258, permute_129);  arg196_1 = view_258 = permute_129 = None
        view_259 = torch.ops.aten.view.default(addmm_69, [2, 256, 768]);  addmm_69 = None
        add_99 = torch.ops.aten.add.Tensor(view_259, add_97);  view_259 = add_97 = None
        var_mean_23 = torch.ops.aten.var_mean.correction(add_99, [2], correction = 0, keepdim = True)
        getitem_46 = var_mean_23[0]
        getitem_47 = var_mean_23[1];  var_mean_23 = None
        add_100 = torch.ops.aten.add.Tensor(getitem_46, 1e-12);  getitem_46 = None
        rsqrt_23 = torch.ops.aten.rsqrt.default(add_100);  add_100 = None
        sub_38 = torch.ops.aten.sub.Tensor(add_99, getitem_47);  add_99 = getitem_47 = None
        mul_92 = torch.ops.aten.mul.Tensor(sub_38, rsqrt_23);  sub_38 = rsqrt_23 = None
        mul_93 = torch.ops.aten.mul.Tensor(mul_92, arg197_1);  mul_92 = arg197_1 = None
        add_101 = torch.ops.aten.add.Tensor(mul_93, arg198_1);  mul_93 = arg198_1 = None
        view_260 = torch.ops.aten.view.default(add_101, [512, 768])
        permute_130 = torch.ops.aten.permute.default(arg199_1, [1, 0]);  arg199_1 = None
        addmm_70 = torch.ops.aten.addmm.default(arg200_1, view_260, permute_130);  arg200_1 = view_260 = permute_130 = None
        view_261 = torch.ops.aten.view.default(addmm_70, [2, 256, 3072]);  addmm_70 = None
        mul_94 = torch.ops.aten.mul.Tensor(view_261, 0.5)
        mul_95 = torch.ops.aten.mul.Tensor(view_261, 0.7071067811865476);  view_261 = None
        erf_11 = torch.ops.aten.erf.default(mul_95);  mul_95 = None
        add_102 = torch.ops.aten.add.Tensor(erf_11, 1);  erf_11 = None
        mul_96 = torch.ops.aten.mul.Tensor(mul_94, add_102);  mul_94 = add_102 = None
        view_262 = torch.ops.aten.view.default(mul_96, [512, 3072]);  mul_96 = None
        permute_131 = torch.ops.aten.permute.default(arg201_1, [1, 0]);  arg201_1 = None
        addmm_71 = torch.ops.aten.addmm.default(arg202_1, view_262, permute_131);  arg202_1 = view_262 = permute_131 = None
        view_263 = torch.ops.aten.view.default(addmm_71, [2, 256, 768]);  addmm_71 = None
        add_103 = torch.ops.aten.add.Tensor(view_263, add_101);  view_263 = add_101 = None
        var_mean_24 = torch.ops.aten.var_mean.correction(add_103, [2], correction = 0, keepdim = True)
        getitem_48 = var_mean_24[0]
        getitem_49 = var_mean_24[1];  var_mean_24 = None
        add_104 = torch.ops.aten.add.Tensor(getitem_48, 1e-12);  getitem_48 = None
        rsqrt_24 = torch.ops.aten.rsqrt.default(add_104);  add_104 = None
        sub_39 = torch.ops.aten.sub.Tensor(add_103, getitem_49);  add_103 = getitem_49 = None
        mul_97 = torch.ops.aten.mul.Tensor(sub_39, rsqrt_24);  sub_39 = rsqrt_24 = None
        mul_98 = torch.ops.aten.mul.Tensor(mul_97, arg203_1);  mul_97 = arg203_1 = None
        add_105 = torch.ops.aten.add.Tensor(mul_98, arg204_1);  mul_98 = arg204_1 = None
        select_8 = torch.ops.aten.select.int(add_105, 1, 0)
        permute_132 = torch.ops.aten.permute.default(arg205_1, [1, 0]);  arg205_1 = None
        addmm_72 = torch.ops.aten.addmm.default(arg206_1, select_8, permute_132);  arg206_1 = select_8 = permute_132 = None
        tanh = torch.ops.aten.tanh.default(addmm_72);  addmm_72 = None
        return (add_105, tanh)
        
def load_args(reader):
    buf0 = reader.storage(None, 4096, device=device(type='cuda', index=0), dtype_hint=torch.int64)
    reader.tensor(buf0, (2, 256), dtype=torch.int64, is_leaf=True)  # arg0_1
    buf1 = reader.storage(None, 4096, device=device(type='cuda', index=0), dtype_hint=torch.int64)
    reader.tensor(buf1, (2, 256), dtype=torch.int64, is_leaf=True)  # arg1_1
    buf2 = reader.storage(None, 4096, device=device(type='cuda', index=0), dtype_hint=torch.int64)
    reader.tensor(buf2, (2, 256), dtype=torch.int64, is_leaf=True)  # arg2_1
    buf3 = reader.storage(None, 16384, device=device(type='cuda', index=0), dtype_hint=torch.int64)
    reader.tensor(buf3, (2, 256, 4), dtype=torch.int64, is_leaf=True)  # arg3_1
    buf4 = reader.storage(None, 93763584, device=device(type='cuda', index=0))
    reader.tensor(buf4, (30522, 768), is_leaf=True)  # arg4_1
    buf5 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf5, (512, 768), is_leaf=True)  # arg5_1
    buf6 = reader.storage(None, 3145728, device=device(type='cuda', index=0))
    reader.tensor(buf6, (1024, 768), is_leaf=True)  # arg6_1
    buf7 = reader.storage(None, 3145728, device=device(type='cuda', index=0))
    reader.tensor(buf7, (1024, 768), is_leaf=True)  # arg7_1
    buf8 = reader.storage(None, 3145728, device=device(type='cuda', index=0))
    reader.tensor(buf8, (1024, 768), is_leaf=True)  # arg8_1
    buf9 = reader.storage(None, 3145728, device=device(type='cuda', index=0))
    reader.tensor(buf9, (1024, 768), is_leaf=True)  # arg9_1
    buf10 = reader.storage(None, 6144, device=device(type='cuda', index=0))
    reader.tensor(buf10, (2, 768), is_leaf=True)  # arg10_1
    buf11 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf11, (768,), is_leaf=True)  # arg11_1
    buf12 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf12, (768,), is_leaf=True)  # arg12_1
    buf13 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf13, (768, 768), is_leaf=True)  # arg13_1
    buf14 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf14, (768,), is_leaf=True)  # arg14_1
    buf15 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf15, (768, 768), is_leaf=True)  # arg15_1
    buf16 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf16, (768,), is_leaf=True)  # arg16_1
    buf17 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf17, (768, 768), is_leaf=True)  # arg17_1
    buf18 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf18, (768,), is_leaf=True)  # arg18_1
    buf19 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf19, (768, 768), is_leaf=True)  # arg19_1
    buf20 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf20, (768,), is_leaf=True)  # arg20_1
    buf21 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf21, (768,), is_leaf=True)  # arg21_1
    buf22 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf22, (768,), is_leaf=True)  # arg22_1
    buf23 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf23, (3072, 768), is_leaf=True)  # arg23_1
    buf24 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf24, (3072,), is_leaf=True)  # arg24_1
    buf25 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf25, (768, 3072), is_leaf=True)  # arg25_1
    buf26 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf26, (768,), is_leaf=True)  # arg26_1
    buf27 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf27, (768,), is_leaf=True)  # arg27_1
    buf28 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf28, (768,), is_leaf=True)  # arg28_1
    buf29 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf29, (768, 768), is_leaf=True)  # arg29_1
    buf30 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf30, (768,), is_leaf=True)  # arg30_1
    buf31 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf31, (768, 768), is_leaf=True)  # arg31_1
    buf32 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf32, (768,), is_leaf=True)  # arg32_1
    buf33 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf33, (768, 768), is_leaf=True)  # arg33_1
    buf34 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf34, (768,), is_leaf=True)  # arg34_1
    buf35 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf35, (768, 768), is_leaf=True)  # arg35_1
    buf36 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf36, (768,), is_leaf=True)  # arg36_1
    buf37 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf37, (768,), is_leaf=True)  # arg37_1
    buf38 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf38, (768,), is_leaf=True)  # arg38_1
    buf39 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf39, (3072, 768), is_leaf=True)  # arg39_1
    buf40 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf40, (3072,), is_leaf=True)  # arg40_1
    buf41 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf41, (768, 3072), is_leaf=True)  # arg41_1
    buf42 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf42, (768,), is_leaf=True)  # arg42_1
    buf43 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf43, (768,), is_leaf=True)  # arg43_1
    buf44 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf44, (768,), is_leaf=True)  # arg44_1
    buf45 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf45, (768, 768), is_leaf=True)  # arg45_1
    buf46 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf46, (768,), is_leaf=True)  # arg46_1
    buf47 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf47, (768, 768), is_leaf=True)  # arg47_1
    buf48 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf48, (768,), is_leaf=True)  # arg48_1
    buf49 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf49, (768, 768), is_leaf=True)  # arg49_1
    buf50 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf50, (768,), is_leaf=True)  # arg50_1
    buf51 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf51, (768, 768), is_leaf=True)  # arg51_1
    buf52 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf52, (768,), is_leaf=True)  # arg52_1
    buf53 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf53, (768,), is_leaf=True)  # arg53_1
    buf54 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf54, (768,), is_leaf=True)  # arg54_1
    buf55 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf55, (3072, 768), is_leaf=True)  # arg55_1
    buf56 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf56, (3072,), is_leaf=True)  # arg56_1
    buf57 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf57, (768, 3072), is_leaf=True)  # arg57_1
    buf58 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf58, (768,), is_leaf=True)  # arg58_1
    buf59 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf59, (768,), is_leaf=True)  # arg59_1
    buf60 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf60, (768,), is_leaf=True)  # arg60_1
    buf61 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf61, (768, 768), is_leaf=True)  # arg61_1
    buf62 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf62, (768,), is_leaf=True)  # arg62_1
    buf63 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf63, (768, 768), is_leaf=True)  # arg63_1
    buf64 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf64, (768,), is_leaf=True)  # arg64_1
    buf65 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf65, (768, 768), is_leaf=True)  # arg65_1
    buf66 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf66, (768,), is_leaf=True)  # arg66_1
    buf67 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf67, (768, 768), is_leaf=True)  # arg67_1
    buf68 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf68, (768,), is_leaf=True)  # arg68_1
    buf69 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf69, (768,), is_leaf=True)  # arg69_1
    buf70 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf70, (768,), is_leaf=True)  # arg70_1
    buf71 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf71, (3072, 768), is_leaf=True)  # arg71_1
    buf72 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf72, (3072,), is_leaf=True)  # arg72_1
    buf73 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf73, (768, 3072), is_leaf=True)  # arg73_1
    buf74 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf74, (768,), is_leaf=True)  # arg74_1
    buf75 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf75, (768,), is_leaf=True)  # arg75_1
    buf76 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf76, (768,), is_leaf=True)  # arg76_1
    buf77 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf77, (768, 768), is_leaf=True)  # arg77_1
    buf78 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf78, (768,), is_leaf=True)  # arg78_1
    buf79 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf79, (768, 768), is_leaf=True)  # arg79_1
    buf80 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf80, (768,), is_leaf=True)  # arg80_1
    buf81 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf81, (768, 768), is_leaf=True)  # arg81_1
    buf82 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf82, (768,), is_leaf=True)  # arg82_1
    buf83 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf83, (768, 768), is_leaf=True)  # arg83_1
    buf84 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf84, (768,), is_leaf=True)  # arg84_1
    buf85 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf85, (768,), is_leaf=True)  # arg85_1
    buf86 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf86, (768,), is_leaf=True)  # arg86_1
    buf87 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf87, (3072, 768), is_leaf=True)  # arg87_1
    buf88 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf88, (3072,), is_leaf=True)  # arg88_1
    buf89 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf89, (768, 3072), is_leaf=True)  # arg89_1
    buf90 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf90, (768,), is_leaf=True)  # arg90_1
    buf91 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf91, (768,), is_leaf=True)  # arg91_1
    buf92 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf92, (768,), is_leaf=True)  # arg92_1
    buf93 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf93, (768, 768), is_leaf=True)  # arg93_1
    buf94 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf94, (768,), is_leaf=True)  # arg94_1
    buf95 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf95, (768, 768), is_leaf=True)  # arg95_1
    buf96 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf96, (768,), is_leaf=True)  # arg96_1
    buf97 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf97, (768, 768), is_leaf=True)  # arg97_1
    buf98 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf98, (768,), is_leaf=True)  # arg98_1
    buf99 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf99, (768, 768), is_leaf=True)  # arg99_1
    buf100 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf100, (768,), is_leaf=True)  # arg100_1
    buf101 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf101, (768,), is_leaf=True)  # arg101_1
    buf102 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf102, (768,), is_leaf=True)  # arg102_1
    buf103 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf103, (3072, 768), is_leaf=True)  # arg103_1
    buf104 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf104, (3072,), is_leaf=True)  # arg104_1
    buf105 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf105, (768, 3072), is_leaf=True)  # arg105_1
    buf106 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf106, (768,), is_leaf=True)  # arg106_1
    buf107 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf107, (768,), is_leaf=True)  # arg107_1
    buf108 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf108, (768,), is_leaf=True)  # arg108_1
    buf109 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf109, (768, 768), is_leaf=True)  # arg109_1
    buf110 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf110, (768,), is_leaf=True)  # arg110_1
    buf111 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf111, (768, 768), is_leaf=True)  # arg111_1
    buf112 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf112, (768,), is_leaf=True)  # arg112_1
    buf113 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf113, (768, 768), is_leaf=True)  # arg113_1
    buf114 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf114, (768,), is_leaf=True)  # arg114_1
    buf115 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf115, (768, 768), is_leaf=True)  # arg115_1
    buf116 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf116, (768,), is_leaf=True)  # arg116_1
    buf117 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf117, (768,), is_leaf=True)  # arg117_1
    buf118 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf118, (768,), is_leaf=True)  # arg118_1
    buf119 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf119, (3072, 768), is_leaf=True)  # arg119_1
    buf120 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf120, (3072,), is_leaf=True)  # arg120_1
    buf121 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf121, (768, 3072), is_leaf=True)  # arg121_1
    buf122 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf122, (768,), is_leaf=True)  # arg122_1
    buf123 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf123, (768,), is_leaf=True)  # arg123_1
    buf124 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf124, (768,), is_leaf=True)  # arg124_1
    buf125 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf125, (768, 768), is_leaf=True)  # arg125_1
    buf126 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf126, (768,), is_leaf=True)  # arg126_1
    buf127 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf127, (768, 768), is_leaf=True)  # arg127_1
    buf128 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf128, (768,), is_leaf=True)  # arg128_1
    buf129 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf129, (768, 768), is_leaf=True)  # arg129_1
    buf130 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf130, (768,), is_leaf=True)  # arg130_1
    buf131 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf131, (768, 768), is_leaf=True)  # arg131_1
    buf132 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf132, (768,), is_leaf=True)  # arg132_1
    buf133 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf133, (768,), is_leaf=True)  # arg133_1
    buf134 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf134, (768,), is_leaf=True)  # arg134_1
    buf135 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf135, (3072, 768), is_leaf=True)  # arg135_1
    buf136 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf136, (3072,), is_leaf=True)  # arg136_1
    buf137 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf137, (768, 3072), is_leaf=True)  # arg137_1
    buf138 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf138, (768,), is_leaf=True)  # arg138_1
    buf139 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf139, (768,), is_leaf=True)  # arg139_1
    buf140 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf140, (768,), is_leaf=True)  # arg140_1
    buf141 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf141, (768, 768), is_leaf=True)  # arg141_1
    buf142 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf142, (768,), is_leaf=True)  # arg142_1
    buf143 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf143, (768, 768), is_leaf=True)  # arg143_1
    buf144 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf144, (768,), is_leaf=True)  # arg144_1
    buf145 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf145, (768, 768), is_leaf=True)  # arg145_1
    buf146 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf146, (768,), is_leaf=True)  # arg146_1
    buf147 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf147, (768, 768), is_leaf=True)  # arg147_1
    buf148 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf148, (768,), is_leaf=True)  # arg148_1
    buf149 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf149, (768,), is_leaf=True)  # arg149_1
    buf150 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf150, (768,), is_leaf=True)  # arg150_1
    buf151 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf151, (3072, 768), is_leaf=True)  # arg151_1
    buf152 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf152, (3072,), is_leaf=True)  # arg152_1
    buf153 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf153, (768, 3072), is_leaf=True)  # arg153_1
    buf154 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf154, (768,), is_leaf=True)  # arg154_1
    buf155 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf155, (768,), is_leaf=True)  # arg155_1
    buf156 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf156, (768,), is_leaf=True)  # arg156_1
    buf157 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf157, (768, 768), is_leaf=True)  # arg157_1
    buf158 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf158, (768,), is_leaf=True)  # arg158_1
    buf159 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf159, (768, 768), is_leaf=True)  # arg159_1
    buf160 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf160, (768,), is_leaf=True)  # arg160_1
    buf161 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf161, (768, 768), is_leaf=True)  # arg161_1
    buf162 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf162, (768,), is_leaf=True)  # arg162_1
    buf163 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf163, (768, 768), is_leaf=True)  # arg163_1
    buf164 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf164, (768,), is_leaf=True)  # arg164_1
    buf165 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf165, (768,), is_leaf=True)  # arg165_1
    buf166 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf166, (768,), is_leaf=True)  # arg166_1
    buf167 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf167, (3072, 768), is_leaf=True)  # arg167_1
    buf168 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf168, (3072,), is_leaf=True)  # arg168_1
    buf169 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf169, (768, 3072), is_leaf=True)  # arg169_1
    buf170 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf170, (768,), is_leaf=True)  # arg170_1
    buf171 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf171, (768,), is_leaf=True)  # arg171_1
    buf172 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf172, (768,), is_leaf=True)  # arg172_1
    buf173 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf173, (768, 768), is_leaf=True)  # arg173_1
    buf174 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf174, (768,), is_leaf=True)  # arg174_1
    buf175 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf175, (768, 768), is_leaf=True)  # arg175_1
    buf176 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf176, (768,), is_leaf=True)  # arg176_1
    buf177 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf177, (768, 768), is_leaf=True)  # arg177_1
    buf178 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf178, (768,), is_leaf=True)  # arg178_1
    buf179 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf179, (768, 768), is_leaf=True)  # arg179_1
    buf180 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf180, (768,), is_leaf=True)  # arg180_1
    buf181 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf181, (768,), is_leaf=True)  # arg181_1
    buf182 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf182, (768,), is_leaf=True)  # arg182_1
    buf183 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf183, (3072, 768), is_leaf=True)  # arg183_1
    buf184 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf184, (3072,), is_leaf=True)  # arg184_1
    buf185 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf185, (768, 3072), is_leaf=True)  # arg185_1
    buf186 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf186, (768,), is_leaf=True)  # arg186_1
    buf187 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf187, (768,), is_leaf=True)  # arg187_1
    buf188 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf188, (768,), is_leaf=True)  # arg188_1
    buf189 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf189, (768, 768), is_leaf=True)  # arg189_1
    buf190 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf190, (768,), is_leaf=True)  # arg190_1
    buf191 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf191, (768, 768), is_leaf=True)  # arg191_1
    buf192 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf192, (768,), is_leaf=True)  # arg192_1
    buf193 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf193, (768, 768), is_leaf=True)  # arg193_1
    buf194 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf194, (768,), is_leaf=True)  # arg194_1
    buf195 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf195, (768, 768), is_leaf=True)  # arg195_1
    buf196 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf196, (768,), is_leaf=True)  # arg196_1
    buf197 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf197, (768,), is_leaf=True)  # arg197_1
    buf198 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf198, (768,), is_leaf=True)  # arg198_1
    buf199 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf199, (3072, 768), is_leaf=True)  # arg199_1
    buf200 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf200, (3072,), is_leaf=True)  # arg200_1
    buf201 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf201, (768, 3072), is_leaf=True)  # arg201_1
    buf202 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf202, (768,), is_leaf=True)  # arg202_1
    buf203 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf203, (768,), is_leaf=True)  # arg203_1
    buf204 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf204, (768,), is_leaf=True)  # arg204_1
    buf205 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf205, (768, 768), is_leaf=True)  # arg205_1
    buf206 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf206, (768,), is_leaf=True)  # arg206_1
    buf207 = reader.storage(None, 4096, device=device(type='cuda', index=0), dtype_hint=torch.int64)
    reader.tensor(buf207, (1, 512), dtype=torch.int64, is_leaf=True)  # arg207_1
load_args._version = 0
mod = Repro()
if __name__ == '__main__':
    from torch._dynamo.repro.after_aot import run_repro
    with torch.no_grad():
        run_repro(mod, load_args, accuracy=False, command='run', save_dir=None, tracing_mode='real', check_str=None)
        # To run it separately, do 
        # mod, args = run_repro(mod, load_args, accuracy=False, command='get_args', save_dir=None, tracing_mode='real', check_str=None)
        # mod(*args)

# ===== run_2025_10_19_04_14_08_043050-pid_19/torchinductor/model__1_inference_1.1/fx_graph_transformed.py =====
class <lambda>(torch.nn.Module):
    def forward(self, arg0_1: "i64[2, 256]", arg1_1: "i64[2, 256]", arg2_1: "i64[2, 256]", arg3_1: "i64[2, 256, 4]", arg4_1: "f32[30522, 768]", arg5_1: "f32[512, 768]", arg6_1: "f32[1024, 768]", arg7_1: "f32[1024, 768]", arg8_1: "f32[1024, 768]", arg9_1: "f32[1024, 768]", arg10_1: "f32[2, 768]", arg11_1: "f32[768]", arg12_1: "f32[768]", arg13_1: "f32[768, 768]", arg14_1: "f32[768]", arg15_1: "f32[768, 768]", arg16_1: "f32[768]", arg17_1: "f32[768, 768]", arg18_1: "f32[768]", arg19_1: "f32[768, 768]", arg20_1: "f32[768]", arg21_1: "f32[768]", arg22_1: "f32[768]", arg23_1: "f32[3072, 768]", arg24_1: "f32[3072]", arg25_1: "f32[768, 3072]", arg26_1: "f32[768]", arg27_1: "f32[768]", arg28_1: "f32[768]", arg29_1: "f32[768, 768]", arg30_1: "f32[768]", arg31_1: "f32[768, 768]", arg32_1: "f32[768]", arg33_1: "f32[768, 768]", arg34_1: "f32[768]", arg35_1: "f32[768, 768]", arg36_1: "f32[768]", arg37_1: "f32[768]", arg38_1: "f32[768]", arg39_1: "f32[3072, 768]", arg40_1: "f32[3072]", arg41_1: "f32[768, 3072]", arg42_1: "f32[768]", arg43_1: "f32[768]", arg44_1: "f32[768]", arg45_1: "f32[768, 768]", arg46_1: "f32[768]", arg47_1: "f32[768, 768]", arg48_1: "f32[768]", arg49_1: "f32[768, 768]", arg50_1: "f32[768]", arg51_1: "f32[768, 768]", arg52_1: "f32[768]", arg53_1: "f32[768]", arg54_1: "f32[768]", arg55_1: "f32[3072, 768]", arg56_1: "f32[3072]", arg57_1: "f32[768, 3072]", arg58_1: "f32[768]", arg59_1: "f32[768]", arg60_1: "f32[768]", arg61_1: "f32[768, 768]", arg62_1: "f32[768]", arg63_1: "f32[768, 768]", arg64_1: "f32[768]", arg65_1: "f32[768, 768]", arg66_1: "f32[768]", arg67_1: "f32[768, 768]", arg68_1: "f32[768]", arg69_1: "f32[768]", arg70_1: "f32[768]", arg71_1: "f32[3072, 768]", arg72_1: "f32[3072]", arg73_1: "f32[768, 3072]", arg74_1: "f32[768]", arg75_1: "f32[768]", arg76_1: "f32[768]", arg77_1: "f32[768, 768]", arg78_1: "f32[768]", arg79_1: "f32[768, 768]", arg80_1: "f32[768]", arg81_1: "f32[768, 768]", arg82_1: "f32[768]", arg83_1: "f32[768, 768]", arg84_1: "f32[768]", arg85_1: "f32[768]", arg86_1: "f32[768]", arg87_1: "f32[3072, 768]", arg88_1: "f32[3072]", arg89_1: "f32[768, 3072]", arg90_1: "f32[768]", arg91_1: "f32[768]", arg92_1: "f32[768]", arg93_1: "f32[768, 768]", arg94_1: "f32[768]", arg95_1: "f32[768, 768]", arg96_1: "f32[768]", arg97_1: "f32[768, 768]", arg98_1: "f32[768]", arg99_1: "f32[768, 768]", arg100_1: "f32[768]", arg101_1: "f32[768]", arg102_1: "f32[768]", arg103_1: "f32[3072, 768]", arg104_1: "f32[3072]", arg105_1: "f32[768, 3072]", arg106_1: "f32[768]", arg107_1: "f32[768]", arg108_1: "f32[768]", arg109_1: "f32[768, 768]", arg110_1: "f32[768]", arg111_1: "f32[768, 768]", arg112_1: "f32[768]", arg113_1: "f32[768, 768]", arg114_1: "f32[768]", arg115_1: "f32[768, 768]", arg116_1: "f32[768]", arg117_1: "f32[768]", arg118_1: "f32[768]", arg119_1: "f32[3072, 768]", arg120_1: "f32[3072]", arg121_1: "f32[768, 3072]", arg122_1: "f32[768]", arg123_1: "f32[768]", arg124_1: "f32[768]", arg125_1: "f32[768, 768]", arg126_1: "f32[768]", arg127_1: "f32[768, 768]", arg128_1: "f32[768]", arg129_1: "f32[768, 768]", arg130_1: "f32[768]", arg131_1: "f32[768, 768]", arg132_1: "f32[768]", arg133_1: "f32[768]", arg134_1: "f32[768]", arg135_1: "f32[3072, 768]", arg136_1: "f32[3072]", arg137_1: "f32[768, 3072]", arg138_1: "f32[768]", arg139_1: "f32[768]", arg140_1: "f32[768]", arg141_1: "f32[768, 768]", arg142_1: "f32[768]", arg143_1: "f32[768, 768]", arg144_1: "f32[768]", arg145_1: "f32[768, 768]", arg146_1: "f32[768]", arg147_1: "f32[768, 768]", arg148_1: "f32[768]", arg149_1: "f32[768]", arg150_1: "f32[768]", arg151_1: "f32[3072, 768]", arg152_1: "f32[3072]", arg153_1: "f32[768, 3072]", arg154_1: "f32[768]", arg155_1: "f32[768]", arg156_1: "f32[768]", arg157_1: "f32[768, 768]", arg158_1: "f32[768]", arg159_1: "f32[768, 768]", arg160_1: "f32[768]", arg161_1: "f32[768, 768]", arg162_1: "f32[768]", arg163_1: "f32[768, 768]", arg164_1: "f32[768]", arg165_1: "f32[768]", arg166_1: "f32[768]", arg167_1: "f32[3072, 768]", arg168_1: "f32[3072]", arg169_1: "f32[768, 3072]", arg170_1: "f32[768]", arg171_1: "f32[768]", arg172_1: "f32[768]", arg173_1: "f32[768, 768]", arg174_1: "f32[768]", arg175_1: "f32[768, 768]", arg176_1: "f32[768]", arg177_1: "f32[768, 768]", arg178_1: "f32[768]", arg179_1: "f32[768, 768]", arg180_1: "f32[768]", arg181_1: "f32[768]", arg182_1: "f32[768]", arg183_1: "f32[3072, 768]", arg184_1: "f32[3072]", arg185_1: "f32[768, 3072]", arg186_1: "f32[768]", arg187_1: "f32[768]", arg188_1: "f32[768]", arg189_1: "f32[768, 768]", arg190_1: "f32[768]", arg191_1: "f32[768, 768]", arg192_1: "f32[768]", arg193_1: "f32[768, 768]", arg194_1: "f32[768]", arg195_1: "f32[768, 768]", arg196_1: "f32[768]", arg197_1: "f32[768]", arg198_1: "f32[768]", arg199_1: "f32[3072, 768]", arg200_1: "f32[3072]", arg201_1: "f32[768, 3072]", arg202_1: "f32[768]", arg203_1: "f32[768]", arg204_1: "f32[768]", arg205_1: "f32[768, 768]", arg206_1: "f32[768]", arg207_1: "i64[1, 512]"):
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:89 in forward, code: inputs_embeds = self.word_embeddings(input_ids)
        embedding: "f32[2, 256, 768]" = torch.ops.aten.embedding.default(arg4_1, arg0_1, 0);  arg4_1 = arg0_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:83 in forward, code: position_ids = self.position_ids[:, :seq_length]
        slice_2: "i64[1, 256]" = torch.ops.aten.slice.Tensor(arg207_1, 1, 0, 256);  arg207_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:92 in forward, code: position_embeddings = self.position_embeddings(position_ids)
        embedding_1: "f32[1, 256, 768]" = torch.ops.aten.embedding.default(arg5_1, slice_2);  arg5_1 = slice_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:106 in forward, code: words_embeddings
        add: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(embedding, embedding_1);  embedding = embedding_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:94 in forward, code: left_position_embeddings = self.x_position_embeddings(bbox[:, :, 0])
        select: "i64[2, 256]" = torch.ops.aten.select.int(arg3_1, 2, 0)
        embedding_2: "f32[2, 256, 768]" = torch.ops.aten.embedding.default(arg6_1, select);  select = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:106 in forward, code: words_embeddings
        add_1: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(add, embedding_2);  add = embedding_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:95 in forward, code: upper_position_embeddings = self.y_position_embeddings(bbox[:, :, 1])
        select_1: "i64[2, 256]" = torch.ops.aten.select.int(arg3_1, 2, 1)
        embedding_3: "f32[2, 256, 768]" = torch.ops.aten.embedding.default(arg7_1, select_1);  select_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:106 in forward, code: words_embeddings
        add_2: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(add_1, embedding_3);  add_1 = embedding_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:96 in forward, code: right_position_embeddings = self.x_position_embeddings(bbox[:, :, 2])
        select_2: "i64[2, 256]" = torch.ops.aten.select.int(arg3_1, 2, 2)
        embedding_4: "f32[2, 256, 768]" = torch.ops.aten.embedding.default(arg6_1, select_2);  arg6_1 = select_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:106 in forward, code: words_embeddings
        add_3: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(add_2, embedding_4);  add_2 = embedding_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:97 in forward, code: lower_position_embeddings = self.y_position_embeddings(bbox[:, :, 3])
        select_3: "i64[2, 256]" = torch.ops.aten.select.int(arg3_1, 2, 3)
        embedding_5: "f32[2, 256, 768]" = torch.ops.aten.embedding.default(arg7_1, select_3);  arg7_1 = select_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:106 in forward, code: words_embeddings
        add_4: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(add_3, embedding_5);  add_3 = embedding_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:101 in forward, code: h_position_embeddings = self.h_position_embeddings(bbox[:, :, 3] - bbox[:, :, 1])
        select_4: "i64[2, 256]" = torch.ops.aten.select.int(arg3_1, 2, 3)
        select_5: "i64[2, 256]" = torch.ops.aten.select.int(arg3_1, 2, 1)
        sub_1: "i64[2, 256]" = torch.ops.aten.sub.Tensor(select_4, select_5);  select_4 = select_5 = None
        embedding_6: "f32[2, 256, 768]" = torch.ops.aten.embedding.default(arg8_1, sub_1);  arg8_1 = sub_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:106 in forward, code: words_embeddings
        add_5: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(add_4, embedding_6);  add_4 = embedding_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:102 in forward, code: w_position_embeddings = self.w_position_embeddings(bbox[:, :, 2] - bbox[:, :, 0])
        select_6: "i64[2, 256]" = torch.ops.aten.select.int(arg3_1, 2, 2)
        select_7: "i64[2, 256]" = torch.ops.aten.select.int(arg3_1, 2, 0);  arg3_1 = None
        sub_2: "i64[2, 256]" = torch.ops.aten.sub.Tensor(select_6, select_7);  select_6 = select_7 = None
        embedding_7: "f32[2, 256, 768]" = torch.ops.aten.embedding.default(arg9_1, sub_2);  arg9_1 = sub_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:106 in forward, code: words_embeddings
        add_6: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(add_5, embedding_7);  add_5 = embedding_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:103 in forward, code: token_type_embeddings = self.token_type_embeddings(token_type_ids)
        embedding_8: "f32[2, 256, 768]" = torch.ops.aten.embedding.default(arg10_1, arg2_1);  arg10_1 = arg2_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:106 in forward, code: words_embeddings
        add_7: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(add_6, embedding_8);  add_6 = embedding_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:116 in forward, code: embeddings = self.LayerNorm(embeddings)
        var_mean = torch.ops.aten.var_mean.correction(add_7, [2], correction = 0, keepdim = True)
        getitem: "f32[2, 256, 1]" = var_mean[0]
        getitem_1: "f32[2, 256, 1]" = var_mean[1];  var_mean = None
        sub_3: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_7, getitem_1);  add_7 = getitem_1 = None
        add_8: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem, 1e-12);  getitem = None
        rsqrt: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_8);  add_8 = None
        mul_1: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_3, rsqrt);  sub_3 = rsqrt = None
        mul_2: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_1, arg11_1);  mul_1 = arg11_1 = None
        add_9: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_2, arg12_1);  mul_2 = arg12_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view: "f32[512, 768]" = torch.ops.aten.reshape.default(add_9, [512, 768])
        permute: "f32[768, 768]" = torch.ops.aten.permute.default(arg13_1, [1, 0]);  arg13_1 = None
        
        # No stacktrace found for following nodes
        mm_default_72: "f32[512, 768]" = torch.ops.aten.mm.default(view, permute);  view = permute = None
        add_tensor_72: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_72, arg14_1);  mm_default_72 = arg14_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_1: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_72, [2, 256, 768]);  add_tensor_72 = None
        view_2: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_1, [2, 256, -1, 64]);  view_1 = None
        permute_1: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_2, [0, 2, 1, 3]);  view_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        expand: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_1, [2, 12, 256, 64]);  permute_1 = None
        clone_1: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand, memory_format = torch.contiguous_format);  expand = None
        view_9: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_1, [24, 256, 64]);  clone_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_3: "f32[512, 768]" = torch.ops.aten.reshape.default(add_9, [512, 768])
        permute_2: "f32[768, 768]" = torch.ops.aten.permute.default(arg15_1, [1, 0]);  arg15_1 = None
        
        # No stacktrace found for following nodes
        mm_default_71: "f32[512, 768]" = torch.ops.aten.mm.default(view_3, permute_2);  view_3 = permute_2 = None
        add_tensor_71: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_71, arg16_1);  mm_default_71 = arg16_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_4: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_71, [2, 256, 768]);  add_tensor_71 = None
        view_5: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_4, [2, 256, -1, 64]);  view_4 = None
        permute_3: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_5, [0, 2, 1, 3]);  view_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_6: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_3, [0, 1, 3, 2]);  permute_3 = None
        expand_1: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_6, [2, 12, 64, 256]);  permute_6 = None
        clone_2: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_1, memory_format = torch.contiguous_format);  expand_1 = None
        view_10: "f32[24, 64, 256]" = torch.ops.aten.reshape.default(clone_2, [24, 64, 256]);  clone_2 = None
        bmm: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_9, view_10);  view_9 = view_10 = None
        view_11: "f32[2, 12, 256, 256]" = torch.ops.aten.reshape.default(bmm, [2, 12, 256, 256]);  bmm = None
        mul_3: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_11, 0.125);  view_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:591 in forward, code: extended_attention_mask = attention_mask.unsqueeze(1).unsqueeze(2)
        unsqueeze: "i64[2, 1, 256]" = torch.ops.aten.unsqueeze.default(arg1_1, 1);  arg1_1 = None
        unsqueeze_1: "i64[2, 1, 1, 256]" = torch.ops.aten.unsqueeze.default(unsqueeze, 2);  unsqueeze = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:593 in forward, code: extended_attention_mask = extended_attention_mask.to(dtype=self.dtype)
        convert_element_type: "f32[2, 1, 1, 256]" = torch.ops.prims.convert_element_type.default(unsqueeze_1, torch.float32);  unsqueeze_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:594 in forward, code: extended_attention_mask = (1.0 - extended_attention_mask) * torch.finfo(self.dtype).min
        sub: "f32[2, 1, 1, 256]" = torch.ops.aten.sub.Tensor(1.0, convert_element_type);  convert_element_type = None
        mul: "f32[2, 1, 1, 256]" = torch.ops.aten.mul.Tensor(sub, -3.4028234663852886e+38);  sub = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_10: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_3, mul);  mul_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_10, [-1], True)
        sub_4: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_10, amax);  add_10 = amax = None
        exp: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_4);  sub_4 = None
        sum_1: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp, [-1], True)
        div: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp, sum_1);  exp = sum_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_2: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div, [2, 12, 256, 256]);  div = None
        view_12: "f32[24, 256, 256]" = torch.ops.aten.reshape.default(expand_2, [24, 256, 256]);  expand_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_6: "f32[512, 768]" = torch.ops.aten.reshape.default(add_9, [512, 768])
        permute_4: "f32[768, 768]" = torch.ops.aten.permute.default(arg17_1, [1, 0]);  arg17_1 = None
        
        # No stacktrace found for following nodes
        mm_default_70: "f32[512, 768]" = torch.ops.aten.mm.default(view_6, permute_4);  view_6 = permute_4 = None
        add_tensor_70: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_70, arg18_1);  mm_default_70 = arg18_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_7: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_70, [2, 256, 768]);  add_tensor_70 = None
        view_8: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_7, [2, 256, -1, 64]);  view_7 = None
        permute_5: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_8, [0, 2, 1, 3]);  view_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_3: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_5, [2, 12, 256, 64]);  permute_5 = None
        clone_4: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_3, memory_format = torch.contiguous_format);  expand_3 = None
        view_13: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_4, [24, 256, 64]);  clone_4 = None
        bmm_1: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_12, view_13);  view_12 = view_13 = None
        view_14: "f32[2, 12, 256, 64]" = torch.ops.aten.reshape.default(bmm_1, [2, 12, 256, 64]);  bmm_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_7: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_14, [0, 2, 1, 3]);  view_14 = None
        clone_5: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_7, memory_format = torch.contiguous_format);  permute_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_15: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(clone_5, [2, 256, -1]);  clone_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_16: "f32[512, 768]" = torch.ops.aten.reshape.default(view_15, [512, 768]);  view_15 = None
        permute_8: "f32[768, 768]" = torch.ops.aten.permute.default(arg19_1, [1, 0]);  arg19_1 = None
        
        # No stacktrace found for following nodes
        mm_default_69: "f32[512, 768]" = torch.ops.aten.mm.default(view_16, permute_8);  view_16 = permute_8 = None
        add_tensor_69: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_69, arg20_1);  mm_default_69 = arg20_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_17: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_69, [2, 256, 768]);  add_tensor_69 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_11: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_17, add_9);  view_17 = add_9 = None
        var_mean_1 = torch.ops.aten.var_mean.correction(add_11, [2], correction = 0, keepdim = True)
        getitem_2: "f32[2, 256, 1]" = var_mean_1[0]
        getitem_3: "f32[2, 256, 1]" = var_mean_1[1];  var_mean_1 = None
        sub_5: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_11, getitem_3);  add_11 = getitem_3 = None
        add_12: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_2, 1e-12);  getitem_2 = None
        rsqrt_1: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_12);  add_12 = None
        mul_4: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_5, rsqrt_1);  sub_5 = rsqrt_1 = None
        mul_5: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_4, arg21_1);  mul_4 = arg21_1 = None
        add_13: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_5, arg22_1);  mul_5 = arg22_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_18: "f32[512, 768]" = torch.ops.aten.reshape.default(add_13, [512, 768])
        permute_9: "f32[768, 3072]" = torch.ops.aten.permute.default(arg23_1, [1, 0]);  arg23_1 = None
        
        # No stacktrace found for following nodes
        mm_default_68: "f32[512, 3072]" = torch.ops.aten.mm.default(view_18, permute_9);  view_18 = permute_9 = None
        add_tensor_68: "f32[512, 3072]" = torch.ops.aten.add.Tensor(mm_default_68, arg24_1);  mm_default_68 = arg24_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_19: "f32[2, 256, 3072]" = torch.ops.aten.reshape.default(add_tensor_68, [2, 256, 3072]);  add_tensor_68 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_6: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_19, 0.5)
        mul_7: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_19, 0.7071067811865476);  view_19 = None
        erf: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_7);  mul_7 = None
        add_14: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf, 1);  erf = None
        mul_8: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_6, add_14);  mul_6 = add_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_20: "f32[512, 3072]" = torch.ops.aten.reshape.default(mul_8, [512, 3072]);  mul_8 = None
        permute_10: "f32[3072, 768]" = torch.ops.aten.permute.default(arg25_1, [1, 0]);  arg25_1 = None
        
        # No stacktrace found for following nodes
        mm_default_67: "f32[512, 768]" = torch.ops.aten.mm.default(view_20, permute_10);  view_20 = permute_10 = None
        add_tensor_67: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_67, arg26_1);  mm_default_67 = arg26_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_21: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_67, [2, 256, 768]);  add_tensor_67 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_15: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_21, add_13);  view_21 = add_13 = None
        var_mean_2 = torch.ops.aten.var_mean.correction(add_15, [2], correction = 0, keepdim = True)
        getitem_4: "f32[2, 256, 1]" = var_mean_2[0]
        getitem_5: "f32[2, 256, 1]" = var_mean_2[1];  var_mean_2 = None
        sub_6: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_15, getitem_5);  add_15 = getitem_5 = None
        add_16: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_4, 1e-12);  getitem_4 = None
        rsqrt_2: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_16);  add_16 = None
        mul_9: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_6, rsqrt_2);  sub_6 = rsqrt_2 = None
        mul_10: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_9, arg27_1);  mul_9 = arg27_1 = None
        add_17: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_10, arg28_1);  mul_10 = arg28_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_22: "f32[512, 768]" = torch.ops.aten.reshape.default(add_17, [512, 768])
        permute_11: "f32[768, 768]" = torch.ops.aten.permute.default(arg29_1, [1, 0]);  arg29_1 = None
        
        # No stacktrace found for following nodes
        mm_default_66: "f32[512, 768]" = torch.ops.aten.mm.default(view_22, permute_11);  view_22 = permute_11 = None
        add_tensor_66: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_66, arg30_1);  mm_default_66 = arg30_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_23: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_66, [2, 256, 768]);  add_tensor_66 = None
        view_24: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_23, [2, 256, -1, 64]);  view_23 = None
        permute_12: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_24, [0, 2, 1, 3]);  view_24 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        expand_4: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_12, [2, 12, 256, 64]);  permute_12 = None
        clone_8: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_4, memory_format = torch.contiguous_format);  expand_4 = None
        view_31: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_8, [24, 256, 64]);  clone_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_25: "f32[512, 768]" = torch.ops.aten.reshape.default(add_17, [512, 768])
        permute_13: "f32[768, 768]" = torch.ops.aten.permute.default(arg31_1, [1, 0]);  arg31_1 = None
        
        # No stacktrace found for following nodes
        mm_default_65: "f32[512, 768]" = torch.ops.aten.mm.default(view_25, permute_13);  view_25 = permute_13 = None
        add_tensor_65: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_65, arg32_1);  mm_default_65 = arg32_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_26: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_65, [2, 256, 768]);  add_tensor_65 = None
        view_27: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_26, [2, 256, -1, 64]);  view_26 = None
        permute_14: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_27, [0, 2, 1, 3]);  view_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_17: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_14, [0, 1, 3, 2]);  permute_14 = None
        expand_5: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_17, [2, 12, 64, 256]);  permute_17 = None
        clone_9: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_5, memory_format = torch.contiguous_format);  expand_5 = None
        view_32: "f32[24, 64, 256]" = torch.ops.aten.reshape.default(clone_9, [24, 64, 256]);  clone_9 = None
        bmm_2: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_31, view_32);  view_31 = view_32 = None
        view_33: "f32[2, 12, 256, 256]" = torch.ops.aten.reshape.default(bmm_2, [2, 12, 256, 256]);  bmm_2 = None
        mul_11: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_33, 0.125);  view_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_18: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_11, mul);  mul_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_1: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_18, [-1], True)
        sub_7: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_18, amax_1);  add_18 = amax_1 = None
        exp_1: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_7);  sub_7 = None
        sum_2: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_1, [-1], True)
        div_1: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_1, sum_2);  exp_1 = sum_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_6: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_1, [2, 12, 256, 256]);  div_1 = None
        view_34: "f32[24, 256, 256]" = torch.ops.aten.reshape.default(expand_6, [24, 256, 256]);  expand_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_28: "f32[512, 768]" = torch.ops.aten.reshape.default(add_17, [512, 768])
        permute_15: "f32[768, 768]" = torch.ops.aten.permute.default(arg33_1, [1, 0]);  arg33_1 = None
        
        # No stacktrace found for following nodes
        mm_default_64: "f32[512, 768]" = torch.ops.aten.mm.default(view_28, permute_15);  view_28 = permute_15 = None
        add_tensor_64: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_64, arg34_1);  mm_default_64 = arg34_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_29: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_64, [2, 256, 768]);  add_tensor_64 = None
        view_30: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_29, [2, 256, -1, 64]);  view_29 = None
        permute_16: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_30, [0, 2, 1, 3]);  view_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_7: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_16, [2, 12, 256, 64]);  permute_16 = None
        clone_11: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_7, memory_format = torch.contiguous_format);  expand_7 = None
        view_35: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_11, [24, 256, 64]);  clone_11 = None
        bmm_3: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_34, view_35);  view_34 = view_35 = None
        view_36: "f32[2, 12, 256, 64]" = torch.ops.aten.reshape.default(bmm_3, [2, 12, 256, 64]);  bmm_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_18: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_36, [0, 2, 1, 3]);  view_36 = None
        clone_12: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_18, memory_format = torch.contiguous_format);  permute_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_37: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(clone_12, [2, 256, -1]);  clone_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_38: "f32[512, 768]" = torch.ops.aten.reshape.default(view_37, [512, 768]);  view_37 = None
        permute_19: "f32[768, 768]" = torch.ops.aten.permute.default(arg35_1, [1, 0]);  arg35_1 = None
        
        # No stacktrace found for following nodes
        mm_default_63: "f32[512, 768]" = torch.ops.aten.mm.default(view_38, permute_19);  view_38 = permute_19 = None
        add_tensor_63: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_63, arg36_1);  mm_default_63 = arg36_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_39: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_63, [2, 256, 768]);  add_tensor_63 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_19: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_39, add_17);  view_39 = add_17 = None
        var_mean_3 = torch.ops.aten.var_mean.correction(add_19, [2], correction = 0, keepdim = True)
        getitem_6: "f32[2, 256, 1]" = var_mean_3[0]
        getitem_7: "f32[2, 256, 1]" = var_mean_3[1];  var_mean_3 = None
        sub_8: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_19, getitem_7);  add_19 = getitem_7 = None
        add_20: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_6, 1e-12);  getitem_6 = None
        rsqrt_3: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_20);  add_20 = None
        mul_12: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_8, rsqrt_3);  sub_8 = rsqrt_3 = None
        mul_13: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_12, arg37_1);  mul_12 = arg37_1 = None
        add_21: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_13, arg38_1);  mul_13 = arg38_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_40: "f32[512, 768]" = torch.ops.aten.reshape.default(add_21, [512, 768])
        permute_20: "f32[768, 3072]" = torch.ops.aten.permute.default(arg39_1, [1, 0]);  arg39_1 = None
        
        # No stacktrace found for following nodes
        mm_default_62: "f32[512, 3072]" = torch.ops.aten.mm.default(view_40, permute_20);  view_40 = permute_20 = None
        add_tensor_62: "f32[512, 3072]" = torch.ops.aten.add.Tensor(mm_default_62, arg40_1);  mm_default_62 = arg40_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_41: "f32[2, 256, 3072]" = torch.ops.aten.reshape.default(add_tensor_62, [2, 256, 3072]);  add_tensor_62 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_14: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_41, 0.5)
        mul_15: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_41, 0.7071067811865476);  view_41 = None
        erf_1: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_15);  mul_15 = None
        add_22: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_1, 1);  erf_1 = None
        mul_16: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_14, add_22);  mul_14 = add_22 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_42: "f32[512, 3072]" = torch.ops.aten.reshape.default(mul_16, [512, 3072]);  mul_16 = None
        permute_21: "f32[3072, 768]" = torch.ops.aten.permute.default(arg41_1, [1, 0]);  arg41_1 = None
        
        # No stacktrace found for following nodes
        mm_default_61: "f32[512, 768]" = torch.ops.aten.mm.default(view_42, permute_21);  view_42 = permute_21 = None
        add_tensor_61: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_61, arg42_1);  mm_default_61 = arg42_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_43: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_61, [2, 256, 768]);  add_tensor_61 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_23: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_43, add_21);  view_43 = add_21 = None
        var_mean_4 = torch.ops.aten.var_mean.correction(add_23, [2], correction = 0, keepdim = True)
        getitem_8: "f32[2, 256, 1]" = var_mean_4[0]
        getitem_9: "f32[2, 256, 1]" = var_mean_4[1];  var_mean_4 = None
        sub_9: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_23, getitem_9);  add_23 = getitem_9 = None
        add_24: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_8, 1e-12);  getitem_8 = None
        rsqrt_4: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_24);  add_24 = None
        mul_17: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_9, rsqrt_4);  sub_9 = rsqrt_4 = None
        mul_18: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_17, arg43_1);  mul_17 = arg43_1 = None
        add_25: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_18, arg44_1);  mul_18 = arg44_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_44: "f32[512, 768]" = torch.ops.aten.reshape.default(add_25, [512, 768])
        permute_22: "f32[768, 768]" = torch.ops.aten.permute.default(arg45_1, [1, 0]);  arg45_1 = None
        
        # No stacktrace found for following nodes
        mm_default_60: "f32[512, 768]" = torch.ops.aten.mm.default(view_44, permute_22);  view_44 = permute_22 = None
        add_tensor_60: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_60, arg46_1);  mm_default_60 = arg46_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_45: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_60, [2, 256, 768]);  add_tensor_60 = None
        view_46: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_45, [2, 256, -1, 64]);  view_45 = None
        permute_23: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_46, [0, 2, 1, 3]);  view_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        expand_8: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_23, [2, 12, 256, 64]);  permute_23 = None
        clone_15: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_8, memory_format = torch.contiguous_format);  expand_8 = None
        view_53: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_15, [24, 256, 64]);  clone_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_47: "f32[512, 768]" = torch.ops.aten.reshape.default(add_25, [512, 768])
        permute_24: "f32[768, 768]" = torch.ops.aten.permute.default(arg47_1, [1, 0]);  arg47_1 = None
        
        # No stacktrace found for following nodes
        mm_default_59: "f32[512, 768]" = torch.ops.aten.mm.default(view_47, permute_24);  view_47 = permute_24 = None
        add_tensor_59: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_59, arg48_1);  mm_default_59 = arg48_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_48: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_59, [2, 256, 768]);  add_tensor_59 = None
        view_49: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_48, [2, 256, -1, 64]);  view_48 = None
        permute_25: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_49, [0, 2, 1, 3]);  view_49 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_28: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_25, [0, 1, 3, 2]);  permute_25 = None
        expand_9: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_28, [2, 12, 64, 256]);  permute_28 = None
        clone_16: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_9, memory_format = torch.contiguous_format);  expand_9 = None
        view_54: "f32[24, 64, 256]" = torch.ops.aten.reshape.default(clone_16, [24, 64, 256]);  clone_16 = None
        bmm_4: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_53, view_54);  view_53 = view_54 = None
        view_55: "f32[2, 12, 256, 256]" = torch.ops.aten.reshape.default(bmm_4, [2, 12, 256, 256]);  bmm_4 = None
        mul_19: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_55, 0.125);  view_55 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_26: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_19, mul);  mul_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_2: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_26, [-1], True)
        sub_10: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_26, amax_2);  add_26 = amax_2 = None
        exp_2: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_10);  sub_10 = None
        sum_3: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_2, [-1], True)
        div_2: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_2, sum_3);  exp_2 = sum_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_10: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_2, [2, 12, 256, 256]);  div_2 = None
        view_56: "f32[24, 256, 256]" = torch.ops.aten.reshape.default(expand_10, [24, 256, 256]);  expand_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_50: "f32[512, 768]" = torch.ops.aten.reshape.default(add_25, [512, 768])
        permute_26: "f32[768, 768]" = torch.ops.aten.permute.default(arg49_1, [1, 0]);  arg49_1 = None
        
        # No stacktrace found for following nodes
        mm_default_58: "f32[512, 768]" = torch.ops.aten.mm.default(view_50, permute_26);  view_50 = permute_26 = None
        add_tensor_58: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_58, arg50_1);  mm_default_58 = arg50_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_51: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_58, [2, 256, 768]);  add_tensor_58 = None
        view_52: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_51, [2, 256, -1, 64]);  view_51 = None
        permute_27: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_52, [0, 2, 1, 3]);  view_52 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_11: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_27, [2, 12, 256, 64]);  permute_27 = None
        clone_18: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_11, memory_format = torch.contiguous_format);  expand_11 = None
        view_57: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_18, [24, 256, 64]);  clone_18 = None
        bmm_5: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_56, view_57);  view_56 = view_57 = None
        view_58: "f32[2, 12, 256, 64]" = torch.ops.aten.reshape.default(bmm_5, [2, 12, 256, 64]);  bmm_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_29: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_58, [0, 2, 1, 3]);  view_58 = None
        clone_19: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_29, memory_format = torch.contiguous_format);  permute_29 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_59: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(clone_19, [2, 256, -1]);  clone_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_60: "f32[512, 768]" = torch.ops.aten.reshape.default(view_59, [512, 768]);  view_59 = None
        permute_30: "f32[768, 768]" = torch.ops.aten.permute.default(arg51_1, [1, 0]);  arg51_1 = None
        
        # No stacktrace found for following nodes
        mm_default_57: "f32[512, 768]" = torch.ops.aten.mm.default(view_60, permute_30);  view_60 = permute_30 = None
        add_tensor_57: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_57, arg52_1);  mm_default_57 = arg52_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_61: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_57, [2, 256, 768]);  add_tensor_57 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_27: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_61, add_25);  view_61 = add_25 = None
        var_mean_5 = torch.ops.aten.var_mean.correction(add_27, [2], correction = 0, keepdim = True)
        getitem_10: "f32[2, 256, 1]" = var_mean_5[0]
        getitem_11: "f32[2, 256, 1]" = var_mean_5[1];  var_mean_5 = None
        sub_11: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_27, getitem_11);  add_27 = getitem_11 = None
        add_28: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_10, 1e-12);  getitem_10 = None
        rsqrt_5: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_28);  add_28 = None
        mul_20: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_11, rsqrt_5);  sub_11 = rsqrt_5 = None
        mul_21: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_20, arg53_1);  mul_20 = arg53_1 = None
        add_29: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_21, arg54_1);  mul_21 = arg54_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_62: "f32[512, 768]" = torch.ops.aten.reshape.default(add_29, [512, 768])
        permute_31: "f32[768, 3072]" = torch.ops.aten.permute.default(arg55_1, [1, 0]);  arg55_1 = None
        
        # No stacktrace found for following nodes
        mm_default_56: "f32[512, 3072]" = torch.ops.aten.mm.default(view_62, permute_31);  view_62 = permute_31 = None
        add_tensor_56: "f32[512, 3072]" = torch.ops.aten.add.Tensor(mm_default_56, arg56_1);  mm_default_56 = arg56_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_63: "f32[2, 256, 3072]" = torch.ops.aten.reshape.default(add_tensor_56, [2, 256, 3072]);  add_tensor_56 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_22: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_63, 0.5)
        mul_23: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_63, 0.7071067811865476);  view_63 = None
        erf_2: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_23);  mul_23 = None
        add_30: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_2, 1);  erf_2 = None
        mul_24: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_22, add_30);  mul_22 = add_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_64: "f32[512, 3072]" = torch.ops.aten.reshape.default(mul_24, [512, 3072]);  mul_24 = None
        permute_32: "f32[3072, 768]" = torch.ops.aten.permute.default(arg57_1, [1, 0]);  arg57_1 = None
        
        # No stacktrace found for following nodes
        mm_default_55: "f32[512, 768]" = torch.ops.aten.mm.default(view_64, permute_32);  view_64 = permute_32 = None
        add_tensor_55: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_55, arg58_1);  mm_default_55 = arg58_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_65: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_55, [2, 256, 768]);  add_tensor_55 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_31: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_65, add_29);  view_65 = add_29 = None
        var_mean_6 = torch.ops.aten.var_mean.correction(add_31, [2], correction = 0, keepdim = True)
        getitem_12: "f32[2, 256, 1]" = var_mean_6[0]
        getitem_13: "f32[2, 256, 1]" = var_mean_6[1];  var_mean_6 = None
        sub_12: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_31, getitem_13);  add_31 = getitem_13 = None
        add_32: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_12, 1e-12);  getitem_12 = None
        rsqrt_6: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_32);  add_32 = None
        mul_25: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_12, rsqrt_6);  sub_12 = rsqrt_6 = None
        mul_26: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_25, arg59_1);  mul_25 = arg59_1 = None
        add_33: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_26, arg60_1);  mul_26 = arg60_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_66: "f32[512, 768]" = torch.ops.aten.reshape.default(add_33, [512, 768])
        permute_33: "f32[768, 768]" = torch.ops.aten.permute.default(arg61_1, [1, 0]);  arg61_1 = None
        
        # No stacktrace found for following nodes
        mm_default_54: "f32[512, 768]" = torch.ops.aten.mm.default(view_66, permute_33);  view_66 = permute_33 = None
        add_tensor_54: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_54, arg62_1);  mm_default_54 = arg62_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_67: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_54, [2, 256, 768]);  add_tensor_54 = None
        view_68: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_67, [2, 256, -1, 64]);  view_67 = None
        permute_34: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_68, [0, 2, 1, 3]);  view_68 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        expand_12: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_34, [2, 12, 256, 64]);  permute_34 = None
        clone_22: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_12, memory_format = torch.contiguous_format);  expand_12 = None
        view_75: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_22, [24, 256, 64]);  clone_22 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_69: "f32[512, 768]" = torch.ops.aten.reshape.default(add_33, [512, 768])
        permute_35: "f32[768, 768]" = torch.ops.aten.permute.default(arg63_1, [1, 0]);  arg63_1 = None
        
        # No stacktrace found for following nodes
        mm_default_53: "f32[512, 768]" = torch.ops.aten.mm.default(view_69, permute_35);  view_69 = permute_35 = None
        add_tensor_53: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_53, arg64_1);  mm_default_53 = arg64_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_70: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_53, [2, 256, 768]);  add_tensor_53 = None
        view_71: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_70, [2, 256, -1, 64]);  view_70 = None
        permute_36: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_71, [0, 2, 1, 3]);  view_71 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_39: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_36, [0, 1, 3, 2]);  permute_36 = None
        expand_13: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_39, [2, 12, 64, 256]);  permute_39 = None
        clone_23: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_13, memory_format = torch.contiguous_format);  expand_13 = None
        view_76: "f32[24, 64, 256]" = torch.ops.aten.reshape.default(clone_23, [24, 64, 256]);  clone_23 = None
        bmm_6: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_75, view_76);  view_75 = view_76 = None
        view_77: "f32[2, 12, 256, 256]" = torch.ops.aten.reshape.default(bmm_6, [2, 12, 256, 256]);  bmm_6 = None
        mul_27: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_77, 0.125);  view_77 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_34: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_27, mul);  mul_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_3: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_34, [-1], True)
        sub_13: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_34, amax_3);  add_34 = amax_3 = None
        exp_3: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_13);  sub_13 = None
        sum_4: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_3, [-1], True)
        div_3: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_3, sum_4);  exp_3 = sum_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_14: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_3, [2, 12, 256, 256]);  div_3 = None
        view_78: "f32[24, 256, 256]" = torch.ops.aten.reshape.default(expand_14, [24, 256, 256]);  expand_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_72: "f32[512, 768]" = torch.ops.aten.reshape.default(add_33, [512, 768])
        permute_37: "f32[768, 768]" = torch.ops.aten.permute.default(arg65_1, [1, 0]);  arg65_1 = None
        
        # No stacktrace found for following nodes
        mm_default_52: "f32[512, 768]" = torch.ops.aten.mm.default(view_72, permute_37);  view_72 = permute_37 = None
        add_tensor_52: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_52, arg66_1);  mm_default_52 = arg66_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_73: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_52, [2, 256, 768]);  add_tensor_52 = None
        view_74: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_73, [2, 256, -1, 64]);  view_73 = None
        permute_38: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_74, [0, 2, 1, 3]);  view_74 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_15: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_38, [2, 12, 256, 64]);  permute_38 = None
        clone_25: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_15, memory_format = torch.contiguous_format);  expand_15 = None
        view_79: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_25, [24, 256, 64]);  clone_25 = None
        bmm_7: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_78, view_79);  view_78 = view_79 = None
        view_80: "f32[2, 12, 256, 64]" = torch.ops.aten.reshape.default(bmm_7, [2, 12, 256, 64]);  bmm_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_40: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_80, [0, 2, 1, 3]);  view_80 = None
        clone_26: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_40, memory_format = torch.contiguous_format);  permute_40 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_81: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(clone_26, [2, 256, -1]);  clone_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_82: "f32[512, 768]" = torch.ops.aten.reshape.default(view_81, [512, 768]);  view_81 = None
        permute_41: "f32[768, 768]" = torch.ops.aten.permute.default(arg67_1, [1, 0]);  arg67_1 = None
        
        # No stacktrace found for following nodes
        mm_default_51: "f32[512, 768]" = torch.ops.aten.mm.default(view_82, permute_41);  view_82 = permute_41 = None
        add_tensor_51: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_51, arg68_1);  mm_default_51 = arg68_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_83: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_51, [2, 256, 768]);  add_tensor_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_35: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_83, add_33);  view_83 = add_33 = None
        var_mean_7 = torch.ops.aten.var_mean.correction(add_35, [2], correction = 0, keepdim = True)
        getitem_14: "f32[2, 256, 1]" = var_mean_7[0]
        getitem_15: "f32[2, 256, 1]" = var_mean_7[1];  var_mean_7 = None
        sub_14: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_35, getitem_15);  add_35 = getitem_15 = None
        add_36: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_14, 1e-12);  getitem_14 = None
        rsqrt_7: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_36);  add_36 = None
        mul_28: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_14, rsqrt_7);  sub_14 = rsqrt_7 = None
        mul_29: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_28, arg69_1);  mul_28 = arg69_1 = None
        add_37: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_29, arg70_1);  mul_29 = arg70_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_84: "f32[512, 768]" = torch.ops.aten.reshape.default(add_37, [512, 768])
        permute_42: "f32[768, 3072]" = torch.ops.aten.permute.default(arg71_1, [1, 0]);  arg71_1 = None
        
        # No stacktrace found for following nodes
        mm_default_50: "f32[512, 3072]" = torch.ops.aten.mm.default(view_84, permute_42);  view_84 = permute_42 = None
        add_tensor_50: "f32[512, 3072]" = torch.ops.aten.add.Tensor(mm_default_50, arg72_1);  mm_default_50 = arg72_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_85: "f32[2, 256, 3072]" = torch.ops.aten.reshape.default(add_tensor_50, [2, 256, 3072]);  add_tensor_50 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_30: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_85, 0.5)
        mul_31: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_85, 0.7071067811865476);  view_85 = None
        erf_3: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_31);  mul_31 = None
        add_38: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_3, 1);  erf_3 = None
        mul_32: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_30, add_38);  mul_30 = add_38 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_86: "f32[512, 3072]" = torch.ops.aten.reshape.default(mul_32, [512, 3072]);  mul_32 = None
        permute_43: "f32[3072, 768]" = torch.ops.aten.permute.default(arg73_1, [1, 0]);  arg73_1 = None
        
        # No stacktrace found for following nodes
        mm_default_49: "f32[512, 768]" = torch.ops.aten.mm.default(view_86, permute_43);  view_86 = permute_43 = None
        add_tensor_49: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_49, arg74_1);  mm_default_49 = arg74_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_87: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_49, [2, 256, 768]);  add_tensor_49 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_39: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_87, add_37);  view_87 = add_37 = None
        var_mean_8 = torch.ops.aten.var_mean.correction(add_39, [2], correction = 0, keepdim = True)
        getitem_16: "f32[2, 256, 1]" = var_mean_8[0]
        getitem_17: "f32[2, 256, 1]" = var_mean_8[1];  var_mean_8 = None
        sub_15: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_39, getitem_17);  add_39 = getitem_17 = None
        add_40: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_16, 1e-12);  getitem_16 = None
        rsqrt_8: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_40);  add_40 = None
        mul_33: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_15, rsqrt_8);  sub_15 = rsqrt_8 = None
        mul_34: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_33, arg75_1);  mul_33 = arg75_1 = None
        add_41: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_34, arg76_1);  mul_34 = arg76_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_88: "f32[512, 768]" = torch.ops.aten.reshape.default(add_41, [512, 768])
        permute_44: "f32[768, 768]" = torch.ops.aten.permute.default(arg77_1, [1, 0]);  arg77_1 = None
        
        # No stacktrace found for following nodes
        mm_default_48: "f32[512, 768]" = torch.ops.aten.mm.default(view_88, permute_44);  view_88 = permute_44 = None
        add_tensor_48: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_48, arg78_1);  mm_default_48 = arg78_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_89: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_48, [2, 256, 768]);  add_tensor_48 = None
        view_90: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_89, [2, 256, -1, 64]);  view_89 = None
        permute_45: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_90, [0, 2, 1, 3]);  view_90 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        expand_16: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_45, [2, 12, 256, 64]);  permute_45 = None
        clone_29: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_16, memory_format = torch.contiguous_format);  expand_16 = None
        view_97: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_29, [24, 256, 64]);  clone_29 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_91: "f32[512, 768]" = torch.ops.aten.reshape.default(add_41, [512, 768])
        permute_46: "f32[768, 768]" = torch.ops.aten.permute.default(arg79_1, [1, 0]);  arg79_1 = None
        
        # No stacktrace found for following nodes
        mm_default_47: "f32[512, 768]" = torch.ops.aten.mm.default(view_91, permute_46);  view_91 = permute_46 = None
        add_tensor_47: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_47, arg80_1);  mm_default_47 = arg80_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_92: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_47, [2, 256, 768]);  add_tensor_47 = None
        view_93: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_92, [2, 256, -1, 64]);  view_92 = None
        permute_47: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_93, [0, 2, 1, 3]);  view_93 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_50: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_47, [0, 1, 3, 2]);  permute_47 = None
        expand_17: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_50, [2, 12, 64, 256]);  permute_50 = None
        clone_30: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_17, memory_format = torch.contiguous_format);  expand_17 = None
        view_98: "f32[24, 64, 256]" = torch.ops.aten.reshape.default(clone_30, [24, 64, 256]);  clone_30 = None
        bmm_8: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_97, view_98);  view_97 = view_98 = None
        view_99: "f32[2, 12, 256, 256]" = torch.ops.aten.reshape.default(bmm_8, [2, 12, 256, 256]);  bmm_8 = None
        mul_35: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_99, 0.125);  view_99 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_42: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_35, mul);  mul_35 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_4: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_42, [-1], True)
        sub_16: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_42, amax_4);  add_42 = amax_4 = None
        exp_4: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_16);  sub_16 = None
        sum_5: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_4, [-1], True)
        div_4: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_4, sum_5);  exp_4 = sum_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_18: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_4, [2, 12, 256, 256]);  div_4 = None
        view_100: "f32[24, 256, 256]" = torch.ops.aten.reshape.default(expand_18, [24, 256, 256]);  expand_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_94: "f32[512, 768]" = torch.ops.aten.reshape.default(add_41, [512, 768])
        permute_48: "f32[768, 768]" = torch.ops.aten.permute.default(arg81_1, [1, 0]);  arg81_1 = None
        
        # No stacktrace found for following nodes
        mm_default_46: "f32[512, 768]" = torch.ops.aten.mm.default(view_94, permute_48);  view_94 = permute_48 = None
        add_tensor_46: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_46, arg82_1);  mm_default_46 = arg82_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_95: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_46, [2, 256, 768]);  add_tensor_46 = None
        view_96: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_95, [2, 256, -1, 64]);  view_95 = None
        permute_49: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_96, [0, 2, 1, 3]);  view_96 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_19: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_49, [2, 12, 256, 64]);  permute_49 = None
        clone_32: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_19, memory_format = torch.contiguous_format);  expand_19 = None
        view_101: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_32, [24, 256, 64]);  clone_32 = None
        bmm_9: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_100, view_101);  view_100 = view_101 = None
        view_102: "f32[2, 12, 256, 64]" = torch.ops.aten.reshape.default(bmm_9, [2, 12, 256, 64]);  bmm_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_51: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_102, [0, 2, 1, 3]);  view_102 = None
        clone_33: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_51, memory_format = torch.contiguous_format);  permute_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_103: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(clone_33, [2, 256, -1]);  clone_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_104: "f32[512, 768]" = torch.ops.aten.reshape.default(view_103, [512, 768]);  view_103 = None
        permute_52: "f32[768, 768]" = torch.ops.aten.permute.default(arg83_1, [1, 0]);  arg83_1 = None
        
        # No stacktrace found for following nodes
        mm_default_45: "f32[512, 768]" = torch.ops.aten.mm.default(view_104, permute_52);  view_104 = permute_52 = None
        add_tensor_45: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_45, arg84_1);  mm_default_45 = arg84_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_105: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_45, [2, 256, 768]);  add_tensor_45 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_43: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_105, add_41);  view_105 = add_41 = None
        var_mean_9 = torch.ops.aten.var_mean.correction(add_43, [2], correction = 0, keepdim = True)
        getitem_18: "f32[2, 256, 1]" = var_mean_9[0]
        getitem_19: "f32[2, 256, 1]" = var_mean_9[1];  var_mean_9 = None
        sub_17: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_43, getitem_19);  add_43 = getitem_19 = None
        add_44: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_18, 1e-12);  getitem_18 = None
        rsqrt_9: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_44);  add_44 = None
        mul_36: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_17, rsqrt_9);  sub_17 = rsqrt_9 = None
        mul_37: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_36, arg85_1);  mul_36 = arg85_1 = None
        add_45: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_37, arg86_1);  mul_37 = arg86_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_106: "f32[512, 768]" = torch.ops.aten.reshape.default(add_45, [512, 768])
        permute_53: "f32[768, 3072]" = torch.ops.aten.permute.default(arg87_1, [1, 0]);  arg87_1 = None
        
        # No stacktrace found for following nodes
        mm_default_44: "f32[512, 3072]" = torch.ops.aten.mm.default(view_106, permute_53);  view_106 = permute_53 = None
        add_tensor_44: "f32[512, 3072]" = torch.ops.aten.add.Tensor(mm_default_44, arg88_1);  mm_default_44 = arg88_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_107: "f32[2, 256, 3072]" = torch.ops.aten.reshape.default(add_tensor_44, [2, 256, 3072]);  add_tensor_44 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_38: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_107, 0.5)
        mul_39: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_107, 0.7071067811865476);  view_107 = None
        erf_4: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_39);  mul_39 = None
        add_46: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_4, 1);  erf_4 = None
        mul_40: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_38, add_46);  mul_38 = add_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_108: "f32[512, 3072]" = torch.ops.aten.reshape.default(mul_40, [512, 3072]);  mul_40 = None
        permute_54: "f32[3072, 768]" = torch.ops.aten.permute.default(arg89_1, [1, 0]);  arg89_1 = None
        
        # No stacktrace found for following nodes
        mm_default_43: "f32[512, 768]" = torch.ops.aten.mm.default(view_108, permute_54);  view_108 = permute_54 = None
        add_tensor_43: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_43, arg90_1);  mm_default_43 = arg90_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_109: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_43, [2, 256, 768]);  add_tensor_43 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_47: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_109, add_45);  view_109 = add_45 = None
        var_mean_10 = torch.ops.aten.var_mean.correction(add_47, [2], correction = 0, keepdim = True)
        getitem_20: "f32[2, 256, 1]" = var_mean_10[0]
        getitem_21: "f32[2, 256, 1]" = var_mean_10[1];  var_mean_10 = None
        sub_18: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_47, getitem_21);  add_47 = getitem_21 = None
        add_48: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_20, 1e-12);  getitem_20 = None
        rsqrt_10: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_48);  add_48 = None
        mul_41: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_18, rsqrt_10);  sub_18 = rsqrt_10 = None
        mul_42: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_41, arg91_1);  mul_41 = arg91_1 = None
        add_49: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_42, arg92_1);  mul_42 = arg92_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_110: "f32[512, 768]" = torch.ops.aten.reshape.default(add_49, [512, 768])
        permute_55: "f32[768, 768]" = torch.ops.aten.permute.default(arg93_1, [1, 0]);  arg93_1 = None
        
        # No stacktrace found for following nodes
        mm_default_42: "f32[512, 768]" = torch.ops.aten.mm.default(view_110, permute_55);  view_110 = permute_55 = None
        add_tensor_42: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_42, arg94_1);  mm_default_42 = arg94_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_111: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_42, [2, 256, 768]);  add_tensor_42 = None
        view_112: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_111, [2, 256, -1, 64]);  view_111 = None
        permute_56: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_112, [0, 2, 1, 3]);  view_112 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        expand_20: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_56, [2, 12, 256, 64]);  permute_56 = None
        clone_36: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_20, memory_format = torch.contiguous_format);  expand_20 = None
        view_119: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_36, [24, 256, 64]);  clone_36 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_113: "f32[512, 768]" = torch.ops.aten.reshape.default(add_49, [512, 768])
        permute_57: "f32[768, 768]" = torch.ops.aten.permute.default(arg95_1, [1, 0]);  arg95_1 = None
        
        # No stacktrace found for following nodes
        mm_default_41: "f32[512, 768]" = torch.ops.aten.mm.default(view_113, permute_57);  view_113 = permute_57 = None
        add_tensor_41: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_41, arg96_1);  mm_default_41 = arg96_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_114: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_41, [2, 256, 768]);  add_tensor_41 = None
        view_115: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_114, [2, 256, -1, 64]);  view_114 = None
        permute_58: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_115, [0, 2, 1, 3]);  view_115 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_61: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_58, [0, 1, 3, 2]);  permute_58 = None
        expand_21: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_61, [2, 12, 64, 256]);  permute_61 = None
        clone_37: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_21, memory_format = torch.contiguous_format);  expand_21 = None
        view_120: "f32[24, 64, 256]" = torch.ops.aten.reshape.default(clone_37, [24, 64, 256]);  clone_37 = None
        bmm_10: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_119, view_120);  view_119 = view_120 = None
        view_121: "f32[2, 12, 256, 256]" = torch.ops.aten.reshape.default(bmm_10, [2, 12, 256, 256]);  bmm_10 = None
        mul_43: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_121, 0.125);  view_121 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_50: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_43, mul);  mul_43 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_5: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_50, [-1], True)
        sub_19: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_50, amax_5);  add_50 = amax_5 = None
        exp_5: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_19);  sub_19 = None
        sum_6: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_5, [-1], True)
        div_5: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_5, sum_6);  exp_5 = sum_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_22: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_5, [2, 12, 256, 256]);  div_5 = None
        view_122: "f32[24, 256, 256]" = torch.ops.aten.reshape.default(expand_22, [24, 256, 256]);  expand_22 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_116: "f32[512, 768]" = torch.ops.aten.reshape.default(add_49, [512, 768])
        permute_59: "f32[768, 768]" = torch.ops.aten.permute.default(arg97_1, [1, 0]);  arg97_1 = None
        
        # No stacktrace found for following nodes
        mm_default_40: "f32[512, 768]" = torch.ops.aten.mm.default(view_116, permute_59);  view_116 = permute_59 = None
        add_tensor_40: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_40, arg98_1);  mm_default_40 = arg98_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_117: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_40, [2, 256, 768]);  add_tensor_40 = None
        view_118: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_117, [2, 256, -1, 64]);  view_117 = None
        permute_60: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_118, [0, 2, 1, 3]);  view_118 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_23: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_60, [2, 12, 256, 64]);  permute_60 = None
        clone_39: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_23, memory_format = torch.contiguous_format);  expand_23 = None
        view_123: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_39, [24, 256, 64]);  clone_39 = None
        bmm_11: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_122, view_123);  view_122 = view_123 = None
        view_124: "f32[2, 12, 256, 64]" = torch.ops.aten.reshape.default(bmm_11, [2, 12, 256, 64]);  bmm_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_62: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_124, [0, 2, 1, 3]);  view_124 = None
        clone_40: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_62, memory_format = torch.contiguous_format);  permute_62 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_125: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(clone_40, [2, 256, -1]);  clone_40 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_126: "f32[512, 768]" = torch.ops.aten.reshape.default(view_125, [512, 768]);  view_125 = None
        permute_63: "f32[768, 768]" = torch.ops.aten.permute.default(arg99_1, [1, 0]);  arg99_1 = None
        
        # No stacktrace found for following nodes
        mm_default_39: "f32[512, 768]" = torch.ops.aten.mm.default(view_126, permute_63);  view_126 = permute_63 = None
        add_tensor_39: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_39, arg100_1);  mm_default_39 = arg100_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_127: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_39, [2, 256, 768]);  add_tensor_39 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_51: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_127, add_49);  view_127 = add_49 = None
        var_mean_11 = torch.ops.aten.var_mean.correction(add_51, [2], correction = 0, keepdim = True)
        getitem_22: "f32[2, 256, 1]" = var_mean_11[0]
        getitem_23: "f32[2, 256, 1]" = var_mean_11[1];  var_mean_11 = None
        sub_20: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_51, getitem_23);  add_51 = getitem_23 = None
        add_52: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_22, 1e-12);  getitem_22 = None
        rsqrt_11: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_52);  add_52 = None
        mul_44: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_20, rsqrt_11);  sub_20 = rsqrt_11 = None
        mul_45: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_44, arg101_1);  mul_44 = arg101_1 = None
        add_53: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_45, arg102_1);  mul_45 = arg102_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_128: "f32[512, 768]" = torch.ops.aten.reshape.default(add_53, [512, 768])
        permute_64: "f32[768, 3072]" = torch.ops.aten.permute.default(arg103_1, [1, 0]);  arg103_1 = None
        
        # No stacktrace found for following nodes
        mm_default_38: "f32[512, 3072]" = torch.ops.aten.mm.default(view_128, permute_64);  view_128 = permute_64 = None
        add_tensor_38: "f32[512, 3072]" = torch.ops.aten.add.Tensor(mm_default_38, arg104_1);  mm_default_38 = arg104_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_129: "f32[2, 256, 3072]" = torch.ops.aten.reshape.default(add_tensor_38, [2, 256, 3072]);  add_tensor_38 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_46: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_129, 0.5)
        mul_47: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_129, 0.7071067811865476);  view_129 = None
        erf_5: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_47);  mul_47 = None
        add_54: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_5, 1);  erf_5 = None
        mul_48: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_46, add_54);  mul_46 = add_54 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_130: "f32[512, 3072]" = torch.ops.aten.reshape.default(mul_48, [512, 3072]);  mul_48 = None
        permute_65: "f32[3072, 768]" = torch.ops.aten.permute.default(arg105_1, [1, 0]);  arg105_1 = None
        
        # No stacktrace found for following nodes
        mm_default_37: "f32[512, 768]" = torch.ops.aten.mm.default(view_130, permute_65);  view_130 = permute_65 = None
        add_tensor_37: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_37, arg106_1);  mm_default_37 = arg106_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_131: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_37, [2, 256, 768]);  add_tensor_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_55: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_131, add_53);  view_131 = add_53 = None
        var_mean_12 = torch.ops.aten.var_mean.correction(add_55, [2], correction = 0, keepdim = True)
        getitem_24: "f32[2, 256, 1]" = var_mean_12[0]
        getitem_25: "f32[2, 256, 1]" = var_mean_12[1];  var_mean_12 = None
        sub_21: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_55, getitem_25);  add_55 = getitem_25 = None
        add_56: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_24, 1e-12);  getitem_24 = None
        rsqrt_12: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_56);  add_56 = None
        mul_49: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_21, rsqrt_12);  sub_21 = rsqrt_12 = None
        mul_50: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_49, arg107_1);  mul_49 = arg107_1 = None
        add_57: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_50, arg108_1);  mul_50 = arg108_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_132: "f32[512, 768]" = torch.ops.aten.reshape.default(add_57, [512, 768])
        permute_66: "f32[768, 768]" = torch.ops.aten.permute.default(arg109_1, [1, 0]);  arg109_1 = None
        
        # No stacktrace found for following nodes
        mm_default_36: "f32[512, 768]" = torch.ops.aten.mm.default(view_132, permute_66);  view_132 = permute_66 = None
        add_tensor_36: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_36, arg110_1);  mm_default_36 = arg110_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_133: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_36, [2, 256, 768]);  add_tensor_36 = None
        view_134: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_133, [2, 256, -1, 64]);  view_133 = None
        permute_67: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_134, [0, 2, 1, 3]);  view_134 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        expand_24: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_67, [2, 12, 256, 64]);  permute_67 = None
        clone_43: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_24, memory_format = torch.contiguous_format);  expand_24 = None
        view_141: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_43, [24, 256, 64]);  clone_43 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_135: "f32[512, 768]" = torch.ops.aten.reshape.default(add_57, [512, 768])
        permute_68: "f32[768, 768]" = torch.ops.aten.permute.default(arg111_1, [1, 0]);  arg111_1 = None
        
        # No stacktrace found for following nodes
        mm_default_35: "f32[512, 768]" = torch.ops.aten.mm.default(view_135, permute_68);  view_135 = permute_68 = None
        add_tensor_35: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_35, arg112_1);  mm_default_35 = arg112_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_136: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_35, [2, 256, 768]);  add_tensor_35 = None
        view_137: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_136, [2, 256, -1, 64]);  view_136 = None
        permute_69: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_137, [0, 2, 1, 3]);  view_137 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_72: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_69, [0, 1, 3, 2]);  permute_69 = None
        expand_25: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_72, [2, 12, 64, 256]);  permute_72 = None
        clone_44: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_25, memory_format = torch.contiguous_format);  expand_25 = None
        view_142: "f32[24, 64, 256]" = torch.ops.aten.reshape.default(clone_44, [24, 64, 256]);  clone_44 = None
        bmm_12: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_141, view_142);  view_141 = view_142 = None
        view_143: "f32[2, 12, 256, 256]" = torch.ops.aten.reshape.default(bmm_12, [2, 12, 256, 256]);  bmm_12 = None
        mul_51: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_143, 0.125);  view_143 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_58: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_51, mul);  mul_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_6: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_58, [-1], True)
        sub_22: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_58, amax_6);  add_58 = amax_6 = None
        exp_6: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_22);  sub_22 = None
        sum_7: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_6, [-1], True)
        div_6: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_6, sum_7);  exp_6 = sum_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_26: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_6, [2, 12, 256, 256]);  div_6 = None
        view_144: "f32[24, 256, 256]" = torch.ops.aten.reshape.default(expand_26, [24, 256, 256]);  expand_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_138: "f32[512, 768]" = torch.ops.aten.reshape.default(add_57, [512, 768])
        permute_70: "f32[768, 768]" = torch.ops.aten.permute.default(arg113_1, [1, 0]);  arg113_1 = None
        
        # No stacktrace found for following nodes
        mm_default_34: "f32[512, 768]" = torch.ops.aten.mm.default(view_138, permute_70);  view_138 = permute_70 = None
        add_tensor_34: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_34, arg114_1);  mm_default_34 = arg114_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_139: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_34, [2, 256, 768]);  add_tensor_34 = None
        view_140: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_139, [2, 256, -1, 64]);  view_139 = None
        permute_71: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_140, [0, 2, 1, 3]);  view_140 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_27: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_71, [2, 12, 256, 64]);  permute_71 = None
        clone_46: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_27, memory_format = torch.contiguous_format);  expand_27 = None
        view_145: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_46, [24, 256, 64]);  clone_46 = None
        bmm_13: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_144, view_145);  view_144 = view_145 = None
        view_146: "f32[2, 12, 256, 64]" = torch.ops.aten.reshape.default(bmm_13, [2, 12, 256, 64]);  bmm_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_73: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_146, [0, 2, 1, 3]);  view_146 = None
        clone_47: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_73, memory_format = torch.contiguous_format);  permute_73 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_147: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(clone_47, [2, 256, -1]);  clone_47 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_148: "f32[512, 768]" = torch.ops.aten.reshape.default(view_147, [512, 768]);  view_147 = None
        permute_74: "f32[768, 768]" = torch.ops.aten.permute.default(arg115_1, [1, 0]);  arg115_1 = None
        
        # No stacktrace found for following nodes
        mm_default_33: "f32[512, 768]" = torch.ops.aten.mm.default(view_148, permute_74);  view_148 = permute_74 = None
        add_tensor_33: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_33, arg116_1);  mm_default_33 = arg116_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_149: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_33, [2, 256, 768]);  add_tensor_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_59: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_149, add_57);  view_149 = add_57 = None
        var_mean_13 = torch.ops.aten.var_mean.correction(add_59, [2], correction = 0, keepdim = True)
        getitem_26: "f32[2, 256, 1]" = var_mean_13[0]
        getitem_27: "f32[2, 256, 1]" = var_mean_13[1];  var_mean_13 = None
        sub_23: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_59, getitem_27);  add_59 = getitem_27 = None
        add_60: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_26, 1e-12);  getitem_26 = None
        rsqrt_13: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_60);  add_60 = None
        mul_52: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_23, rsqrt_13);  sub_23 = rsqrt_13 = None
        mul_53: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_52, arg117_1);  mul_52 = arg117_1 = None
        add_61: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_53, arg118_1);  mul_53 = arg118_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_150: "f32[512, 768]" = torch.ops.aten.reshape.default(add_61, [512, 768])
        permute_75: "f32[768, 3072]" = torch.ops.aten.permute.default(arg119_1, [1, 0]);  arg119_1 = None
        
        # No stacktrace found for following nodes
        mm_default_32: "f32[512, 3072]" = torch.ops.aten.mm.default(view_150, permute_75);  view_150 = permute_75 = None
        add_tensor_32: "f32[512, 3072]" = torch.ops.aten.add.Tensor(mm_default_32, arg120_1);  mm_default_32 = arg120_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_151: "f32[2, 256, 3072]" = torch.ops.aten.reshape.default(add_tensor_32, [2, 256, 3072]);  add_tensor_32 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_54: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_151, 0.5)
        mul_55: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_151, 0.7071067811865476);  view_151 = None
        erf_6: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_55);  mul_55 = None
        add_62: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_6, 1);  erf_6 = None
        mul_56: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_54, add_62);  mul_54 = add_62 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_152: "f32[512, 3072]" = torch.ops.aten.reshape.default(mul_56, [512, 3072]);  mul_56 = None
        permute_76: "f32[3072, 768]" = torch.ops.aten.permute.default(arg121_1, [1, 0]);  arg121_1 = None
        
        # No stacktrace found for following nodes
        mm_default_31: "f32[512, 768]" = torch.ops.aten.mm.default(view_152, permute_76);  view_152 = permute_76 = None
        add_tensor_31: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_31, arg122_1);  mm_default_31 = arg122_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_153: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_31, [2, 256, 768]);  add_tensor_31 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_63: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_153, add_61);  view_153 = add_61 = None
        var_mean_14 = torch.ops.aten.var_mean.correction(add_63, [2], correction = 0, keepdim = True)
        getitem_28: "f32[2, 256, 1]" = var_mean_14[0]
        getitem_29: "f32[2, 256, 1]" = var_mean_14[1];  var_mean_14 = None
        sub_24: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_63, getitem_29);  add_63 = getitem_29 = None
        add_64: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_28, 1e-12);  getitem_28 = None
        rsqrt_14: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_64);  add_64 = None
        mul_57: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_24, rsqrt_14);  sub_24 = rsqrt_14 = None
        mul_58: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_57, arg123_1);  mul_57 = arg123_1 = None
        add_65: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_58, arg124_1);  mul_58 = arg124_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_154: "f32[512, 768]" = torch.ops.aten.reshape.default(add_65, [512, 768])
        permute_77: "f32[768, 768]" = torch.ops.aten.permute.default(arg125_1, [1, 0]);  arg125_1 = None
        
        # No stacktrace found for following nodes
        mm_default_30: "f32[512, 768]" = torch.ops.aten.mm.default(view_154, permute_77);  view_154 = permute_77 = None
        add_tensor_30: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_30, arg126_1);  mm_default_30 = arg126_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_155: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_30, [2, 256, 768]);  add_tensor_30 = None
        view_156: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_155, [2, 256, -1, 64]);  view_155 = None
        permute_78: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_156, [0, 2, 1, 3]);  view_156 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        expand_28: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_78, [2, 12, 256, 64]);  permute_78 = None
        clone_50: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_28, memory_format = torch.contiguous_format);  expand_28 = None
        view_163: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_50, [24, 256, 64]);  clone_50 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_157: "f32[512, 768]" = torch.ops.aten.reshape.default(add_65, [512, 768])
        permute_79: "f32[768, 768]" = torch.ops.aten.permute.default(arg127_1, [1, 0]);  arg127_1 = None
        
        # No stacktrace found for following nodes
        mm_default_29: "f32[512, 768]" = torch.ops.aten.mm.default(view_157, permute_79);  view_157 = permute_79 = None
        add_tensor_29: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_29, arg128_1);  mm_default_29 = arg128_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_158: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_29, [2, 256, 768]);  add_tensor_29 = None
        view_159: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_158, [2, 256, -1, 64]);  view_158 = None
        permute_80: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_159, [0, 2, 1, 3]);  view_159 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_83: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_80, [0, 1, 3, 2]);  permute_80 = None
        expand_29: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_83, [2, 12, 64, 256]);  permute_83 = None
        clone_51: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_29, memory_format = torch.contiguous_format);  expand_29 = None
        view_164: "f32[24, 64, 256]" = torch.ops.aten.reshape.default(clone_51, [24, 64, 256]);  clone_51 = None
        bmm_14: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_163, view_164);  view_163 = view_164 = None
        view_165: "f32[2, 12, 256, 256]" = torch.ops.aten.reshape.default(bmm_14, [2, 12, 256, 256]);  bmm_14 = None
        mul_59: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_165, 0.125);  view_165 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_66: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_59, mul);  mul_59 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_7: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_66, [-1], True)
        sub_25: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_66, amax_7);  add_66 = amax_7 = None
        exp_7: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_25);  sub_25 = None
        sum_8: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_7, [-1], True)
        div_7: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_7, sum_8);  exp_7 = sum_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_30: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_7, [2, 12, 256, 256]);  div_7 = None
        view_166: "f32[24, 256, 256]" = torch.ops.aten.reshape.default(expand_30, [24, 256, 256]);  expand_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_160: "f32[512, 768]" = torch.ops.aten.reshape.default(add_65, [512, 768])
        permute_81: "f32[768, 768]" = torch.ops.aten.permute.default(arg129_1, [1, 0]);  arg129_1 = None
        
        # No stacktrace found for following nodes
        mm_default_28: "f32[512, 768]" = torch.ops.aten.mm.default(view_160, permute_81);  view_160 = permute_81 = None
        add_tensor_28: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_28, arg130_1);  mm_default_28 = arg130_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_161: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_28, [2, 256, 768]);  add_tensor_28 = None
        view_162: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_161, [2, 256, -1, 64]);  view_161 = None
        permute_82: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_162, [0, 2, 1, 3]);  view_162 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_31: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_82, [2, 12, 256, 64]);  permute_82 = None
        clone_53: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_31, memory_format = torch.contiguous_format);  expand_31 = None
        view_167: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_53, [24, 256, 64]);  clone_53 = None
        bmm_15: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_166, view_167);  view_166 = view_167 = None
        view_168: "f32[2, 12, 256, 64]" = torch.ops.aten.reshape.default(bmm_15, [2, 12, 256, 64]);  bmm_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_84: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_168, [0, 2, 1, 3]);  view_168 = None
        clone_54: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_84, memory_format = torch.contiguous_format);  permute_84 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_169: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(clone_54, [2, 256, -1]);  clone_54 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_170: "f32[512, 768]" = torch.ops.aten.reshape.default(view_169, [512, 768]);  view_169 = None
        permute_85: "f32[768, 768]" = torch.ops.aten.permute.default(arg131_1, [1, 0]);  arg131_1 = None
        
        # No stacktrace found for following nodes
        mm_default_27: "f32[512, 768]" = torch.ops.aten.mm.default(view_170, permute_85);  view_170 = permute_85 = None
        add_tensor_27: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_27, arg132_1);  mm_default_27 = arg132_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_171: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_27, [2, 256, 768]);  add_tensor_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_67: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_171, add_65);  view_171 = add_65 = None
        var_mean_15 = torch.ops.aten.var_mean.correction(add_67, [2], correction = 0, keepdim = True)
        getitem_30: "f32[2, 256, 1]" = var_mean_15[0]
        getitem_31: "f32[2, 256, 1]" = var_mean_15[1];  var_mean_15 = None
        sub_26: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_67, getitem_31);  add_67 = getitem_31 = None
        add_68: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_30, 1e-12);  getitem_30 = None
        rsqrt_15: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_68);  add_68 = None
        mul_60: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_26, rsqrt_15);  sub_26 = rsqrt_15 = None
        mul_61: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_60, arg133_1);  mul_60 = arg133_1 = None
        add_69: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_61, arg134_1);  mul_61 = arg134_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_172: "f32[512, 768]" = torch.ops.aten.reshape.default(add_69, [512, 768])
        permute_86: "f32[768, 3072]" = torch.ops.aten.permute.default(arg135_1, [1, 0]);  arg135_1 = None
        
        # No stacktrace found for following nodes
        mm_default_26: "f32[512, 3072]" = torch.ops.aten.mm.default(view_172, permute_86);  view_172 = permute_86 = None
        add_tensor_26: "f32[512, 3072]" = torch.ops.aten.add.Tensor(mm_default_26, arg136_1);  mm_default_26 = arg136_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_173: "f32[2, 256, 3072]" = torch.ops.aten.reshape.default(add_tensor_26, [2, 256, 3072]);  add_tensor_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_62: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_173, 0.5)
        mul_63: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_173, 0.7071067811865476);  view_173 = None
        erf_7: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_63);  mul_63 = None
        add_70: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_7, 1);  erf_7 = None
        mul_64: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_62, add_70);  mul_62 = add_70 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_174: "f32[512, 3072]" = torch.ops.aten.reshape.default(mul_64, [512, 3072]);  mul_64 = None
        permute_87: "f32[3072, 768]" = torch.ops.aten.permute.default(arg137_1, [1, 0]);  arg137_1 = None
        
        # No stacktrace found for following nodes
        mm_default_25: "f32[512, 768]" = torch.ops.aten.mm.default(view_174, permute_87);  view_174 = permute_87 = None
        add_tensor_25: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_25, arg138_1);  mm_default_25 = arg138_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_175: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_25, [2, 256, 768]);  add_tensor_25 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_71: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_175, add_69);  view_175 = add_69 = None
        var_mean_16 = torch.ops.aten.var_mean.correction(add_71, [2], correction = 0, keepdim = True)
        getitem_32: "f32[2, 256, 1]" = var_mean_16[0]
        getitem_33: "f32[2, 256, 1]" = var_mean_16[1];  var_mean_16 = None
        sub_27: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_71, getitem_33);  add_71 = getitem_33 = None
        add_72: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_32, 1e-12);  getitem_32 = None
        rsqrt_16: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_72);  add_72 = None
        mul_65: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_27, rsqrt_16);  sub_27 = rsqrt_16 = None
        mul_66: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_65, arg139_1);  mul_65 = arg139_1 = None
        add_73: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_66, arg140_1);  mul_66 = arg140_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_176: "f32[512, 768]" = torch.ops.aten.reshape.default(add_73, [512, 768])
        permute_88: "f32[768, 768]" = torch.ops.aten.permute.default(arg141_1, [1, 0]);  arg141_1 = None
        
        # No stacktrace found for following nodes
        mm_default_24: "f32[512, 768]" = torch.ops.aten.mm.default(view_176, permute_88);  view_176 = permute_88 = None
        add_tensor_24: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_24, arg142_1);  mm_default_24 = arg142_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_177: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_24, [2, 256, 768]);  add_tensor_24 = None
        view_178: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_177, [2, 256, -1, 64]);  view_177 = None
        permute_89: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_178, [0, 2, 1, 3]);  view_178 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        expand_32: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_89, [2, 12, 256, 64]);  permute_89 = None
        clone_57: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_32, memory_format = torch.contiguous_format);  expand_32 = None
        view_185: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_57, [24, 256, 64]);  clone_57 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_179: "f32[512, 768]" = torch.ops.aten.reshape.default(add_73, [512, 768])
        permute_90: "f32[768, 768]" = torch.ops.aten.permute.default(arg143_1, [1, 0]);  arg143_1 = None
        
        # No stacktrace found for following nodes
        mm_default_23: "f32[512, 768]" = torch.ops.aten.mm.default(view_179, permute_90);  view_179 = permute_90 = None
        add_tensor_23: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_23, arg144_1);  mm_default_23 = arg144_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_180: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_23, [2, 256, 768]);  add_tensor_23 = None
        view_181: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_180, [2, 256, -1, 64]);  view_180 = None
        permute_91: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_181, [0, 2, 1, 3]);  view_181 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_94: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_91, [0, 1, 3, 2]);  permute_91 = None
        expand_33: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_94, [2, 12, 64, 256]);  permute_94 = None
        clone_58: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_33, memory_format = torch.contiguous_format);  expand_33 = None
        view_186: "f32[24, 64, 256]" = torch.ops.aten.reshape.default(clone_58, [24, 64, 256]);  clone_58 = None
        bmm_16: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_185, view_186);  view_185 = view_186 = None
        view_187: "f32[2, 12, 256, 256]" = torch.ops.aten.reshape.default(bmm_16, [2, 12, 256, 256]);  bmm_16 = None
        mul_67: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_187, 0.125);  view_187 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_74: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_67, mul);  mul_67 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_8: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_74, [-1], True)
        sub_28: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_74, amax_8);  add_74 = amax_8 = None
        exp_8: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_28);  sub_28 = None
        sum_9: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_8, [-1], True)
        div_8: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_8, sum_9);  exp_8 = sum_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_34: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_8, [2, 12, 256, 256]);  div_8 = None
        view_188: "f32[24, 256, 256]" = torch.ops.aten.reshape.default(expand_34, [24, 256, 256]);  expand_34 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_182: "f32[512, 768]" = torch.ops.aten.reshape.default(add_73, [512, 768])
        permute_92: "f32[768, 768]" = torch.ops.aten.permute.default(arg145_1, [1, 0]);  arg145_1 = None
        
        # No stacktrace found for following nodes
        mm_default_22: "f32[512, 768]" = torch.ops.aten.mm.default(view_182, permute_92);  view_182 = permute_92 = None
        add_tensor_22: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_22, arg146_1);  mm_default_22 = arg146_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_183: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_22, [2, 256, 768]);  add_tensor_22 = None
        view_184: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_183, [2, 256, -1, 64]);  view_183 = None
        permute_93: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_184, [0, 2, 1, 3]);  view_184 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_35: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_93, [2, 12, 256, 64]);  permute_93 = None
        clone_60: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_35, memory_format = torch.contiguous_format);  expand_35 = None
        view_189: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_60, [24, 256, 64]);  clone_60 = None
        bmm_17: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_188, view_189);  view_188 = view_189 = None
        view_190: "f32[2, 12, 256, 64]" = torch.ops.aten.reshape.default(bmm_17, [2, 12, 256, 64]);  bmm_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_95: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_190, [0, 2, 1, 3]);  view_190 = None
        clone_61: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_95, memory_format = torch.contiguous_format);  permute_95 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_191: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(clone_61, [2, 256, -1]);  clone_61 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_192: "f32[512, 768]" = torch.ops.aten.reshape.default(view_191, [512, 768]);  view_191 = None
        permute_96: "f32[768, 768]" = torch.ops.aten.permute.default(arg147_1, [1, 0]);  arg147_1 = None
        
        # No stacktrace found for following nodes
        mm_default_21: "f32[512, 768]" = torch.ops.aten.mm.default(view_192, permute_96);  view_192 = permute_96 = None
        add_tensor_21: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_21, arg148_1);  mm_default_21 = arg148_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_193: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_21, [2, 256, 768]);  add_tensor_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_75: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_193, add_73);  view_193 = add_73 = None
        var_mean_17 = torch.ops.aten.var_mean.correction(add_75, [2], correction = 0, keepdim = True)
        getitem_34: "f32[2, 256, 1]" = var_mean_17[0]
        getitem_35: "f32[2, 256, 1]" = var_mean_17[1];  var_mean_17 = None
        sub_29: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_75, getitem_35);  add_75 = getitem_35 = None
        add_76: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_34, 1e-12);  getitem_34 = None
        rsqrt_17: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_76);  add_76 = None
        mul_68: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_29, rsqrt_17);  sub_29 = rsqrt_17 = None
        mul_69: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_68, arg149_1);  mul_68 = arg149_1 = None
        add_77: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_69, arg150_1);  mul_69 = arg150_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_194: "f32[512, 768]" = torch.ops.aten.reshape.default(add_77, [512, 768])
        permute_97: "f32[768, 3072]" = torch.ops.aten.permute.default(arg151_1, [1, 0]);  arg151_1 = None
        
        # No stacktrace found for following nodes
        mm_default_20: "f32[512, 3072]" = torch.ops.aten.mm.default(view_194, permute_97);  view_194 = permute_97 = None
        add_tensor_20: "f32[512, 3072]" = torch.ops.aten.add.Tensor(mm_default_20, arg152_1);  mm_default_20 = arg152_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_195: "f32[2, 256, 3072]" = torch.ops.aten.reshape.default(add_tensor_20, [2, 256, 3072]);  add_tensor_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_70: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_195, 0.5)
        mul_71: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_195, 0.7071067811865476);  view_195 = None
        erf_8: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_71);  mul_71 = None
        add_78: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_8, 1);  erf_8 = None
        mul_72: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_70, add_78);  mul_70 = add_78 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_196: "f32[512, 3072]" = torch.ops.aten.reshape.default(mul_72, [512, 3072]);  mul_72 = None
        permute_98: "f32[3072, 768]" = torch.ops.aten.permute.default(arg153_1, [1, 0]);  arg153_1 = None
        
        # No stacktrace found for following nodes
        mm_default_19: "f32[512, 768]" = torch.ops.aten.mm.default(view_196, permute_98);  view_196 = permute_98 = None
        add_tensor_19: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_19, arg154_1);  mm_default_19 = arg154_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_197: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_19, [2, 256, 768]);  add_tensor_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_79: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_197, add_77);  view_197 = add_77 = None
        var_mean_18 = torch.ops.aten.var_mean.correction(add_79, [2], correction = 0, keepdim = True)
        getitem_36: "f32[2, 256, 1]" = var_mean_18[0]
        getitem_37: "f32[2, 256, 1]" = var_mean_18[1];  var_mean_18 = None
        sub_30: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_79, getitem_37);  add_79 = getitem_37 = None
        add_80: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_36, 1e-12);  getitem_36 = None
        rsqrt_18: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_80);  add_80 = None
        mul_73: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_30, rsqrt_18);  sub_30 = rsqrt_18 = None
        mul_74: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_73, arg155_1);  mul_73 = arg155_1 = None
        add_81: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_74, arg156_1);  mul_74 = arg156_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_198: "f32[512, 768]" = torch.ops.aten.reshape.default(add_81, [512, 768])
        permute_99: "f32[768, 768]" = torch.ops.aten.permute.default(arg157_1, [1, 0]);  arg157_1 = None
        
        # No stacktrace found for following nodes
        mm_default_18: "f32[512, 768]" = torch.ops.aten.mm.default(view_198, permute_99);  view_198 = permute_99 = None
        add_tensor_18: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_18, arg158_1);  mm_default_18 = arg158_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_199: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_18, [2, 256, 768]);  add_tensor_18 = None
        view_200: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_199, [2, 256, -1, 64]);  view_199 = None
        permute_100: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_200, [0, 2, 1, 3]);  view_200 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        expand_36: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_100, [2, 12, 256, 64]);  permute_100 = None
        clone_64: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_36, memory_format = torch.contiguous_format);  expand_36 = None
        view_207: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_64, [24, 256, 64]);  clone_64 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_201: "f32[512, 768]" = torch.ops.aten.reshape.default(add_81, [512, 768])
        permute_101: "f32[768, 768]" = torch.ops.aten.permute.default(arg159_1, [1, 0]);  arg159_1 = None
        
        # No stacktrace found for following nodes
        mm_default_17: "f32[512, 768]" = torch.ops.aten.mm.default(view_201, permute_101);  view_201 = permute_101 = None
        add_tensor_17: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_17, arg160_1);  mm_default_17 = arg160_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_202: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_17, [2, 256, 768]);  add_tensor_17 = None
        view_203: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_202, [2, 256, -1, 64]);  view_202 = None
        permute_102: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_203, [0, 2, 1, 3]);  view_203 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_105: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_102, [0, 1, 3, 2]);  permute_102 = None
        expand_37: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_105, [2, 12, 64, 256]);  permute_105 = None
        clone_65: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_37, memory_format = torch.contiguous_format);  expand_37 = None
        view_208: "f32[24, 64, 256]" = torch.ops.aten.reshape.default(clone_65, [24, 64, 256]);  clone_65 = None
        bmm_18: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_207, view_208);  view_207 = view_208 = None
        view_209: "f32[2, 12, 256, 256]" = torch.ops.aten.reshape.default(bmm_18, [2, 12, 256, 256]);  bmm_18 = None
        mul_75: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_209, 0.125);  view_209 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_82: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_75, mul);  mul_75 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_9: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_82, [-1], True)
        sub_31: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_82, amax_9);  add_82 = amax_9 = None
        exp_9: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_31);  sub_31 = None
        sum_10: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_9, [-1], True)
        div_9: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_9, sum_10);  exp_9 = sum_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_38: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_9, [2, 12, 256, 256]);  div_9 = None
        view_210: "f32[24, 256, 256]" = torch.ops.aten.reshape.default(expand_38, [24, 256, 256]);  expand_38 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_204: "f32[512, 768]" = torch.ops.aten.reshape.default(add_81, [512, 768])
        permute_103: "f32[768, 768]" = torch.ops.aten.permute.default(arg161_1, [1, 0]);  arg161_1 = None
        
        # No stacktrace found for following nodes
        mm_default_16: "f32[512, 768]" = torch.ops.aten.mm.default(view_204, permute_103);  view_204 = permute_103 = None
        add_tensor_16: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_16, arg162_1);  mm_default_16 = arg162_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_205: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_16, [2, 256, 768]);  add_tensor_16 = None
        view_206: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_205, [2, 256, -1, 64]);  view_205 = None
        permute_104: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_206, [0, 2, 1, 3]);  view_206 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_39: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_104, [2, 12, 256, 64]);  permute_104 = None
        clone_67: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_39, memory_format = torch.contiguous_format);  expand_39 = None
        view_211: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_67, [24, 256, 64]);  clone_67 = None
        bmm_19: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_210, view_211);  view_210 = view_211 = None
        view_212: "f32[2, 12, 256, 64]" = torch.ops.aten.reshape.default(bmm_19, [2, 12, 256, 64]);  bmm_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_106: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_212, [0, 2, 1, 3]);  view_212 = None
        clone_68: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_106, memory_format = torch.contiguous_format);  permute_106 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_213: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(clone_68, [2, 256, -1]);  clone_68 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_214: "f32[512, 768]" = torch.ops.aten.reshape.default(view_213, [512, 768]);  view_213 = None
        permute_107: "f32[768, 768]" = torch.ops.aten.permute.default(arg163_1, [1, 0]);  arg163_1 = None
        
        # No stacktrace found for following nodes
        mm_default_15: "f32[512, 768]" = torch.ops.aten.mm.default(view_214, permute_107);  view_214 = permute_107 = None
        add_tensor_15: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_15, arg164_1);  mm_default_15 = arg164_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_215: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_15, [2, 256, 768]);  add_tensor_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_83: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_215, add_81);  view_215 = add_81 = None
        var_mean_19 = torch.ops.aten.var_mean.correction(add_83, [2], correction = 0, keepdim = True)
        getitem_38: "f32[2, 256, 1]" = var_mean_19[0]
        getitem_39: "f32[2, 256, 1]" = var_mean_19[1];  var_mean_19 = None
        sub_32: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_83, getitem_39);  add_83 = getitem_39 = None
        add_84: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_38, 1e-12);  getitem_38 = None
        rsqrt_19: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_84);  add_84 = None
        mul_76: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_32, rsqrt_19);  sub_32 = rsqrt_19 = None
        mul_77: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_76, arg165_1);  mul_76 = arg165_1 = None
        add_85: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_77, arg166_1);  mul_77 = arg166_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_216: "f32[512, 768]" = torch.ops.aten.reshape.default(add_85, [512, 768])
        permute_108: "f32[768, 3072]" = torch.ops.aten.permute.default(arg167_1, [1, 0]);  arg167_1 = None
        
        # No stacktrace found for following nodes
        mm_default_14: "f32[512, 3072]" = torch.ops.aten.mm.default(view_216, permute_108);  view_216 = permute_108 = None
        add_tensor_14: "f32[512, 3072]" = torch.ops.aten.add.Tensor(mm_default_14, arg168_1);  mm_default_14 = arg168_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_217: "f32[2, 256, 3072]" = torch.ops.aten.reshape.default(add_tensor_14, [2, 256, 3072]);  add_tensor_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_78: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_217, 0.5)
        mul_79: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_217, 0.7071067811865476);  view_217 = None
        erf_9: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_79);  mul_79 = None
        add_86: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_9, 1);  erf_9 = None
        mul_80: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_78, add_86);  mul_78 = add_86 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_218: "f32[512, 3072]" = torch.ops.aten.reshape.default(mul_80, [512, 3072]);  mul_80 = None
        permute_109: "f32[3072, 768]" = torch.ops.aten.permute.default(arg169_1, [1, 0]);  arg169_1 = None
        
        # No stacktrace found for following nodes
        mm_default_13: "f32[512, 768]" = torch.ops.aten.mm.default(view_218, permute_109);  view_218 = permute_109 = None
        add_tensor_13: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_13, arg170_1);  mm_default_13 = arg170_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_219: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_13, [2, 256, 768]);  add_tensor_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_87: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_219, add_85);  view_219 = add_85 = None
        var_mean_20 = torch.ops.aten.var_mean.correction(add_87, [2], correction = 0, keepdim = True)
        getitem_40: "f32[2, 256, 1]" = var_mean_20[0]
        getitem_41: "f32[2, 256, 1]" = var_mean_20[1];  var_mean_20 = None
        sub_33: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_87, getitem_41);  add_87 = getitem_41 = None
        add_88: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_40, 1e-12);  getitem_40 = None
        rsqrt_20: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_88);  add_88 = None
        mul_81: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_33, rsqrt_20);  sub_33 = rsqrt_20 = None
        mul_82: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_81, arg171_1);  mul_81 = arg171_1 = None
        add_89: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_82, arg172_1);  mul_82 = arg172_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_220: "f32[512, 768]" = torch.ops.aten.reshape.default(add_89, [512, 768])
        permute_110: "f32[768, 768]" = torch.ops.aten.permute.default(arg173_1, [1, 0]);  arg173_1 = None
        
        # No stacktrace found for following nodes
        mm_default_12: "f32[512, 768]" = torch.ops.aten.mm.default(view_220, permute_110);  view_220 = permute_110 = None
        add_tensor_12: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_12, arg174_1);  mm_default_12 = arg174_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_221: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_12, [2, 256, 768]);  add_tensor_12 = None
        view_222: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_221, [2, 256, -1, 64]);  view_221 = None
        permute_111: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_222, [0, 2, 1, 3]);  view_222 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        expand_40: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_111, [2, 12, 256, 64]);  permute_111 = None
        clone_71: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_40, memory_format = torch.contiguous_format);  expand_40 = None
        view_229: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_71, [24, 256, 64]);  clone_71 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_223: "f32[512, 768]" = torch.ops.aten.reshape.default(add_89, [512, 768])
        permute_112: "f32[768, 768]" = torch.ops.aten.permute.default(arg175_1, [1, 0]);  arg175_1 = None
        
        # No stacktrace found for following nodes
        mm_default_11: "f32[512, 768]" = torch.ops.aten.mm.default(view_223, permute_112);  view_223 = permute_112 = None
        add_tensor_11: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_11, arg176_1);  mm_default_11 = arg176_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_224: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_11, [2, 256, 768]);  add_tensor_11 = None
        view_225: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_224, [2, 256, -1, 64]);  view_224 = None
        permute_113: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_225, [0, 2, 1, 3]);  view_225 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_116: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_113, [0, 1, 3, 2]);  permute_113 = None
        expand_41: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_116, [2, 12, 64, 256]);  permute_116 = None
        clone_72: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_41, memory_format = torch.contiguous_format);  expand_41 = None
        view_230: "f32[24, 64, 256]" = torch.ops.aten.reshape.default(clone_72, [24, 64, 256]);  clone_72 = None
        bmm_20: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_229, view_230);  view_229 = view_230 = None
        view_231: "f32[2, 12, 256, 256]" = torch.ops.aten.reshape.default(bmm_20, [2, 12, 256, 256]);  bmm_20 = None
        mul_83: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_231, 0.125);  view_231 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_90: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_83, mul);  mul_83 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_10: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_90, [-1], True)
        sub_34: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_90, amax_10);  add_90 = amax_10 = None
        exp_10: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_34);  sub_34 = None
        sum_11: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_10, [-1], True)
        div_10: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_10, sum_11);  exp_10 = sum_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_42: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_10, [2, 12, 256, 256]);  div_10 = None
        view_232: "f32[24, 256, 256]" = torch.ops.aten.reshape.default(expand_42, [24, 256, 256]);  expand_42 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_226: "f32[512, 768]" = torch.ops.aten.reshape.default(add_89, [512, 768])
        permute_114: "f32[768, 768]" = torch.ops.aten.permute.default(arg177_1, [1, 0]);  arg177_1 = None
        
        # No stacktrace found for following nodes
        mm_default_10: "f32[512, 768]" = torch.ops.aten.mm.default(view_226, permute_114);  view_226 = permute_114 = None
        add_tensor_10: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_10, arg178_1);  mm_default_10 = arg178_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_227: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_10, [2, 256, 768]);  add_tensor_10 = None
        view_228: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_227, [2, 256, -1, 64]);  view_227 = None
        permute_115: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_228, [0, 2, 1, 3]);  view_228 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_43: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_115, [2, 12, 256, 64]);  permute_115 = None
        clone_74: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_43, memory_format = torch.contiguous_format);  expand_43 = None
        view_233: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_74, [24, 256, 64]);  clone_74 = None
        bmm_21: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_232, view_233);  view_232 = view_233 = None
        view_234: "f32[2, 12, 256, 64]" = torch.ops.aten.reshape.default(bmm_21, [2, 12, 256, 64]);  bmm_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_117: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_234, [0, 2, 1, 3]);  view_234 = None
        clone_75: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_117, memory_format = torch.contiguous_format);  permute_117 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_235: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(clone_75, [2, 256, -1]);  clone_75 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_236: "f32[512, 768]" = torch.ops.aten.reshape.default(view_235, [512, 768]);  view_235 = None
        permute_118: "f32[768, 768]" = torch.ops.aten.permute.default(arg179_1, [1, 0]);  arg179_1 = None
        
        # No stacktrace found for following nodes
        mm_default_9: "f32[512, 768]" = torch.ops.aten.mm.default(view_236, permute_118);  view_236 = permute_118 = None
        add_tensor_9: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_9, arg180_1);  mm_default_9 = arg180_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_237: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_9, [2, 256, 768]);  add_tensor_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_91: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_237, add_89);  view_237 = add_89 = None
        var_mean_21 = torch.ops.aten.var_mean.correction(add_91, [2], correction = 0, keepdim = True)
        getitem_42: "f32[2, 256, 1]" = var_mean_21[0]
        getitem_43: "f32[2, 256, 1]" = var_mean_21[1];  var_mean_21 = None
        sub_35: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_91, getitem_43);  add_91 = getitem_43 = None
        add_92: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_42, 1e-12);  getitem_42 = None
        rsqrt_21: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_92);  add_92 = None
        mul_84: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_35, rsqrt_21);  sub_35 = rsqrt_21 = None
        mul_85: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_84, arg181_1);  mul_84 = arg181_1 = None
        add_93: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_85, arg182_1);  mul_85 = arg182_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_238: "f32[512, 768]" = torch.ops.aten.reshape.default(add_93, [512, 768])
        permute_119: "f32[768, 3072]" = torch.ops.aten.permute.default(arg183_1, [1, 0]);  arg183_1 = None
        
        # No stacktrace found for following nodes
        mm_default_8: "f32[512, 3072]" = torch.ops.aten.mm.default(view_238, permute_119);  view_238 = permute_119 = None
        add_tensor_8: "f32[512, 3072]" = torch.ops.aten.add.Tensor(mm_default_8, arg184_1);  mm_default_8 = arg184_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_239: "f32[2, 256, 3072]" = torch.ops.aten.reshape.default(add_tensor_8, [2, 256, 3072]);  add_tensor_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_86: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_239, 0.5)
        mul_87: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_239, 0.7071067811865476);  view_239 = None
        erf_10: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_87);  mul_87 = None
        add_94: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_10, 1);  erf_10 = None
        mul_88: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_86, add_94);  mul_86 = add_94 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_240: "f32[512, 3072]" = torch.ops.aten.reshape.default(mul_88, [512, 3072]);  mul_88 = None
        permute_120: "f32[3072, 768]" = torch.ops.aten.permute.default(arg185_1, [1, 0]);  arg185_1 = None
        
        # No stacktrace found for following nodes
        mm_default_7: "f32[512, 768]" = torch.ops.aten.mm.default(view_240, permute_120);  view_240 = permute_120 = None
        add_tensor_7: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_7, arg186_1);  mm_default_7 = arg186_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_241: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_7, [2, 256, 768]);  add_tensor_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_95: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_241, add_93);  view_241 = add_93 = None
        var_mean_22 = torch.ops.aten.var_mean.correction(add_95, [2], correction = 0, keepdim = True)
        getitem_44: "f32[2, 256, 1]" = var_mean_22[0]
        getitem_45: "f32[2, 256, 1]" = var_mean_22[1];  var_mean_22 = None
        sub_36: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_95, getitem_45);  add_95 = getitem_45 = None
        add_96: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_44, 1e-12);  getitem_44 = None
        rsqrt_22: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_96);  add_96 = None
        mul_89: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_36, rsqrt_22);  sub_36 = rsqrt_22 = None
        mul_90: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_89, arg187_1);  mul_89 = arg187_1 = None
        add_97: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_90, arg188_1);  mul_90 = arg188_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_242: "f32[512, 768]" = torch.ops.aten.reshape.default(add_97, [512, 768])
        permute_121: "f32[768, 768]" = torch.ops.aten.permute.default(arg189_1, [1, 0]);  arg189_1 = None
        
        # No stacktrace found for following nodes
        mm_default_6: "f32[512, 768]" = torch.ops.aten.mm.default(view_242, permute_121);  view_242 = permute_121 = None
        add_tensor_6: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_6, arg190_1);  mm_default_6 = arg190_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:183 in forward, code: query_states = self.query(hidden_states).view(hidden_shape).transpose(1, 2)
        view_243: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_6, [2, 256, 768]);  add_tensor_6 = None
        view_244: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_243, [2, 256, -1, 64]);  view_243 = None
        permute_122: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_244, [0, 2, 1, 3]);  view_244 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        expand_44: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_122, [2, 12, 256, 64]);  permute_122 = None
        clone_78: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_44, memory_format = torch.contiguous_format);  expand_44 = None
        view_251: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_78, [24, 256, 64]);  clone_78 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_245: "f32[512, 768]" = torch.ops.aten.reshape.default(add_97, [512, 768])
        permute_123: "f32[768, 768]" = torch.ops.aten.permute.default(arg191_1, [1, 0]);  arg191_1 = None
        
        # No stacktrace found for following nodes
        mm_default_5: "f32[512, 768]" = torch.ops.aten.mm.default(view_245, permute_123);  view_245 = permute_123 = None
        add_tensor_5: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_5, arg192_1);  mm_default_5 = arg192_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:184 in forward, code: key_states = self.key(hidden_states).view(hidden_shape).transpose(1, 2)
        view_246: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_5, [2, 256, 768]);  add_tensor_5 = None
        view_247: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_246, [2, 256, -1, 64]);  view_246 = None
        permute_124: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_247, [0, 2, 1, 3]);  view_247 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:133 in eager_attention_forward, code: attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
        permute_127: "f32[2, 12, 64, 256]" = torch.ops.aten.permute.default(permute_124, [0, 1, 3, 2]);  permute_124 = None
        expand_45: "f32[2, 12, 64, 256]" = torch.ops.aten.expand.default(permute_127, [2, 12, 64, 256]);  permute_127 = None
        clone_79: "f32[2, 12, 64, 256]" = torch.ops.aten.clone.default(expand_45, memory_format = torch.contiguous_format);  expand_45 = None
        view_252: "f32[24, 64, 256]" = torch.ops.aten.reshape.default(clone_79, [24, 64, 256]);  clone_79 = None
        bmm_22: "f32[24, 256, 256]" = torch.ops.aten.bmm.default(view_251, view_252);  view_251 = view_252 = None
        view_253: "f32[2, 12, 256, 256]" = torch.ops.aten.reshape.default(bmm_22, [2, 12, 256, 256]);  bmm_22 = None
        mul_91: "f32[2, 12, 256, 256]" = torch.ops.aten.mul.Tensor(view_253, 0.125);  view_253 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:136 in eager_attention_forward, code: attn_weights = attn_weights + causal_mask
        add_98: "f32[2, 12, 256, 256]" = torch.ops.aten.add.Tensor(mul_91, mul);  mul_91 = mul = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:138 in eager_attention_forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
        amax_11: "f32[2, 12, 256, 1]" = torch.ops.aten.amax.default(add_98, [-1], True)
        sub_37: "f32[2, 12, 256, 256]" = torch.ops.aten.sub.Tensor(add_98, amax_11);  add_98 = amax_11 = None
        exp_11: "f32[2, 12, 256, 256]" = torch.ops.aten.exp.default(sub_37);  sub_37 = None
        sum_12: "f32[2, 12, 256, 1]" = torch.ops.aten.sum.dim_IntList(exp_11, [-1], True)
        div_11: "f32[2, 12, 256, 256]" = torch.ops.aten.div.Tensor(exp_11, sum_12);  exp_11 = sum_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_46: "f32[2, 12, 256, 256]" = torch.ops.aten.expand.default(div_11, [2, 12, 256, 256]);  div_11 = None
        view_254: "f32[24, 256, 256]" = torch.ops.aten.reshape.default(expand_46, [24, 256, 256]);  expand_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_248: "f32[512, 768]" = torch.ops.aten.reshape.default(add_97, [512, 768])
        permute_125: "f32[768, 768]" = torch.ops.aten.permute.default(arg193_1, [1, 0]);  arg193_1 = None
        
        # No stacktrace found for following nodes
        mm_default_4: "f32[512, 768]" = torch.ops.aten.mm.default(view_248, permute_125);  view_248 = permute_125 = None
        add_tensor_4: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_4, arg194_1);  mm_default_4 = arg194_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:185 in forward, code: value_states = self.value(hidden_states).view(hidden_shape).transpose(1, 2)
        view_249: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_4, [2, 256, 768]);  add_tensor_4 = None
        view_250: "f32[2, 256, 12, 64]" = torch.ops.aten.reshape.default(view_249, [2, 256, -1, 64]);  view_249 = None
        permute_126: "f32[2, 12, 256, 64]" = torch.ops.aten.permute.default(view_250, [0, 2, 1, 3]);  view_250 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:144 in eager_attention_forward, code: attn_output = torch.matmul(attn_weights, value)
        expand_47: "f32[2, 12, 256, 64]" = torch.ops.aten.expand.default(permute_126, [2, 12, 256, 64]);  permute_126 = None
        clone_81: "f32[2, 12, 256, 64]" = torch.ops.aten.clone.default(expand_47, memory_format = torch.contiguous_format);  expand_47 = None
        view_255: "f32[24, 256, 64]" = torch.ops.aten.reshape.default(clone_81, [24, 256, 64]);  clone_81 = None
        bmm_23: "f32[24, 256, 64]" = torch.ops.aten.bmm.default(view_254, view_255);  view_254 = view_255 = None
        view_256: "f32[2, 12, 256, 64]" = torch.ops.aten.reshape.default(bmm_23, [2, 12, 256, 64]);  bmm_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:145 in eager_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_128: "f32[2, 256, 12, 64]" = torch.ops.aten.permute.default(view_256, [0, 2, 1, 3]);  view_256 = None
        clone_82: "f32[2, 256, 12, 64]" = torch.ops.aten.clone.default(permute_128, memory_format = torch.contiguous_format);  permute_128 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:203 in forward, code: attn_output = attn_output.reshape(*input_shape, -1).contiguous()
        view_257: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(clone_82, [2, 256, -1]);  clone_82 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_258: "f32[512, 768]" = torch.ops.aten.reshape.default(view_257, [512, 768]);  view_257 = None
        permute_129: "f32[768, 768]" = torch.ops.aten.permute.default(arg195_1, [1, 0]);  arg195_1 = None
        
        # No stacktrace found for following nodes
        mm_default_3: "f32[512, 768]" = torch.ops.aten.mm.default(view_258, permute_129);  view_258 = permute_129 = None
        add_tensor_3: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_3, arg196_1);  mm_default_3 = arg196_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:217 in forward, code: hidden_states = self.dense(hidden_states)
        view_259: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_3, [2, 256, 768]);  add_tensor_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:219 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_99: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_259, add_97);  view_259 = add_97 = None
        var_mean_23 = torch.ops.aten.var_mean.correction(add_99, [2], correction = 0, keepdim = True)
        getitem_46: "f32[2, 256, 1]" = var_mean_23[0]
        getitem_47: "f32[2, 256, 1]" = var_mean_23[1];  var_mean_23 = None
        sub_38: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_99, getitem_47);  add_99 = getitem_47 = None
        add_100: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_46, 1e-12);  getitem_46 = None
        rsqrt_23: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_100);  add_100 = None
        mul_92: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_38, rsqrt_23);  sub_38 = rsqrt_23 = None
        mul_93: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_92, arg197_1);  mul_92 = arg197_1 = None
        add_101: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_93, arg198_1);  mul_93 = arg198_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_260: "f32[512, 768]" = torch.ops.aten.reshape.default(add_101, [512, 768])
        permute_130: "f32[768, 3072]" = torch.ops.aten.permute.default(arg199_1, [1, 0]);  arg199_1 = None
        
        # No stacktrace found for following nodes
        mm_default_2: "f32[512, 3072]" = torch.ops.aten.mm.default(view_260, permute_130);  view_260 = permute_130 = None
        add_tensor_2: "f32[512, 3072]" = torch.ops.aten.add.Tensor(mm_default_2, arg200_1);  mm_default_2 = arg200_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:280 in forward, code: hidden_states = self.dense(hidden_states)
        view_261: "f32[2, 256, 3072]" = torch.ops.aten.reshape.default(add_tensor_2, [2, 256, 3072]);  add_tensor_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_94: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_261, 0.5)
        mul_95: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(view_261, 0.7071067811865476);  view_261 = None
        erf_11: "f32[2, 256, 3072]" = torch.ops.aten.erf.default(mul_95);  mul_95 = None
        add_102: "f32[2, 256, 3072]" = torch.ops.aten.add.Tensor(erf_11, 1);  erf_11 = None
        mul_96: "f32[2, 256, 3072]" = torch.ops.aten.mul.Tensor(mul_94, add_102);  mul_94 = add_102 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_262: "f32[512, 3072]" = torch.ops.aten.reshape.default(mul_96, [512, 3072]);  mul_96 = None
        permute_131: "f32[3072, 768]" = torch.ops.aten.permute.default(arg201_1, [1, 0]);  arg201_1 = None
        
        # No stacktrace found for following nodes
        mm_default_1: "f32[512, 768]" = torch.ops.aten.mm.default(view_262, permute_131);  view_262 = permute_131 = None
        add_tensor_1: "f32[512, 768]" = torch.ops.aten.add.Tensor(mm_default_1, arg202_1);  mm_default_1 = arg202_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:294 in forward, code: hidden_states = self.dense(hidden_states)
        view_263: "f32[2, 256, 768]" = torch.ops.aten.reshape.default(add_tensor_1, [2, 256, 768]);  add_tensor_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:296 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_103: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(view_263, add_101);  view_263 = add_101 = None
        var_mean_24 = torch.ops.aten.var_mean.correction(add_103, [2], correction = 0, keepdim = True)
        getitem_48: "f32[2, 256, 1]" = var_mean_24[0]
        getitem_49: "f32[2, 256, 1]" = var_mean_24[1];  var_mean_24 = None
        sub_39: "f32[2, 256, 768]" = torch.ops.aten.sub.Tensor(add_103, getitem_49);  add_103 = getitem_49 = None
        add_104: "f32[2, 256, 1]" = torch.ops.aten.add.Tensor(getitem_48, 1e-12);  getitem_48 = None
        rsqrt_24: "f32[2, 256, 1]" = torch.ops.aten.rsqrt.default(add_104);  add_104 = None
        mul_97: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(sub_39, rsqrt_24);  sub_39 = rsqrt_24 = None
        mul_98: "f32[2, 256, 768]" = torch.ops.aten.mul.Tensor(mul_97, arg203_1);  mul_97 = arg203_1 = None
        add_105: "f32[2, 256, 768]" = torch.ops.aten.add.Tensor(mul_98, arg204_1);  mul_98 = arg204_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:401 in forward, code: first_token_tensor = hidden_states[:, 0]
        select_8: "f32[2, 768]" = torch.ops.aten.select.int(add_105, 1, 0)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:402 in forward, code: pooled_output = self.dense(first_token_tensor)
        permute_132: "f32[768, 768]" = torch.ops.aten.permute.default(arg205_1, [1, 0]);  arg205_1 = None
        
        # No stacktrace found for following nodes
        mm_default: "f32[2, 768]" = torch.ops.aten.mm.default(select_8, permute_132);  select_8 = permute_132 = None
        add_tensor: "f32[2, 768]" = torch.ops.aten.add.Tensor(mm_default, arg206_1);  mm_default = arg206_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/layoutlm/modeling_layoutlm.py:403 in forward, code: pooled_output = self.activation(pooled_output)
        tanh: "f32[2, 768]" = torch.ops.aten.tanh.default(add_tensor);  add_tensor = None
        return (add_105, tanh)
        

# ===== run_2025_10_19_04_14_08_043050-pid_19/torchinductor/model__1_inference_1.1/ir_post_fusion.txt =====
op0_op1_op2_op3_op5: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op0_op1_op2_op3_op5.writes = 
    [   MemoryDep('buf0', c0, {c0: 393216}),
        MemoryDep('buf1', c0, {c0: 393216}),
        MemoryDep('buf2', c0, {c0: 512}),
        MemoryDep('buf3', c0, {c0: 512}),
        MemoryDep('buf5', c0, {c0: 393216})]
op0_op1_op2_op3_op5.unmet_dependencies = []
op0_op1_op2_op3_op5.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 512}),
        MemoryDep('arg10_1', c1 + 768*tmp3, {c0: 512, c1: 768}),
        MemoryDep('arg11_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg12_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg207_1', c1, {c0: 2, c1: 256}),
        MemoryDep('arg2_1', c0, {c0: 512}),
        MemoryDep('arg3_1', 4*c0 + 1, {c0: 512}),
        MemoryDep('arg3_1', 4*c0 + 2, {c0: 512}),
        MemoryDep('arg3_1', 4*c0 + 3, {c0: 512}),
        MemoryDep('arg3_1', 4*c0, {c0: 512}),
        MemoryDep('arg4_1', c1 + 768*tmp0, {c0: 512, c1: 768}),
        MemoryDep('arg5_1', c1 + 768*tmp1, {c0: 512, c1: 768}),
        MemoryDep('arg6_1', c1 + 768*tmp2, {c0: 512, c1: 768}),
        MemoryDep('arg6_1', c1 + 768*tmp4, {c0: 512, c1: 768}),
        MemoryDep('arg7_1', c1 + 768*tmp0, {c0: 512, c1: 768}),
        MemoryDep('arg7_1', c1 + 768*tmp3, {c0: 512, c1: 768}),
        MemoryDep('arg8_1', c1 + 768*tmp1, {c0: 512, c1: 768}),
        MemoryDep('arg9_1', c1 + 768*tmp2, {c0: 512, c1: 768})]
op0_op1_op2_op3_op5.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=True, is_weak=False)]
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False),
    ]
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf2.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf3.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf5.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False),
    ]
]
op0_op1_op2_op3_op5.snodes[0] =
op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 393216})]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 512}),
        MemoryDep('arg207_1', c1, {c0: 2, c1: 256}),
        MemoryDep('arg3_1', 4*c0 + 1, {c0: 512}),
        MemoryDep('arg3_1', 4*c0 + 2, {c0: 512}),
        MemoryDep('arg3_1', 4*c0, {c0: 512}),
        MemoryDep('arg4_1', c1 + 768*tmp0, {c0: 512, c1: 768}),
        MemoryDep('arg5_1', c1 + 768*tmp1, {c0: 512, c1: 768}),
        MemoryDep('arg6_1', c1 + 768*tmp2, {c0: 512, c1: 768}),
        MemoryDep('arg6_1', c1 + 768*tmp4, {c0: 512, c1: 768}),
        MemoryDep('arg7_1', c1 + 768*tmp3, {c0: 512, c1: 768})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=True, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (393216, 1)
op0.sizes = ([2, 256, 768], [])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.float32, size=[30522, 768], stride=[768, 1])
arg207_1_layout = FixedLayout('cuda:0', torch.int64, size=[1, 512], stride=[512, 1])
arg5_1_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 4], stride=[1024, 4, 1])
arg6_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 768], stride=[768, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 4], stride=[1024, 4, 1])
arg7_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 768], stride=[768, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 4], stride=[1024, 4, 1])
arg6_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 768], stride=[768, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op0_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 768}
    index0 = 256*p0 + p1
    index1 = 768*indirect0 + p2
    index2 = p1
    index3 = 768*indirect1 + p2
    index4 = 1024*p0 + 4*p1
    index5 = 768*indirect2 + p2
    index6 = 1024*p0 + 4*p1 + 1
    index7 = 768*indirect3 + p2
    index8 = 1024*p0 + 4*p1 + 2
    index9 = 768*indirect4 + p2
    index10 = 196608*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg207_1', get_index_2)
        set_indirect1 = self.set_indirect1(load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg5_1', get_index_3)
        add = ops.add(load_1, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg3_1', get_index_4)
        set_indirect2 = self.set_indirect2(load_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg6_1', get_index_5)
        add_1 = ops.add(add, load_5)
        get_index_6 = self.get_index('index6')
        load_6 = ops.load('arg3_1', get_index_6)
        set_indirect3 = self.set_indirect3(load_6)
        get_index_7 = self.get_index('index7')
        load_7 = ops.load('arg7_1', get_index_7)
        add_2 = ops.add(add_1, load_7)
        get_index_8 = self.get_index('index8')
        load_8 = ops.load('arg3_1', get_index_8)
        set_indirect4 = self.set_indirect4(load_8)
        get_index_9 = self.get_index('index9')
        load_9 = ops.load('arg6_1', get_index_9)
        add_3 = ops.add(add_2, load_9)
        get_index_10 = self.get_index('index10')
        store = ops.store('buf0', get_index_10, add_3, None)
        return store
op0_op1_op2_op3_op5.snodes[1] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 393216})]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 393216})]
op1.met_dependencies = 
    [   MemoryDep('arg10_1', c1 + 768*tmp3, {c0: 512, c1: 768}),
        MemoryDep('arg2_1', c0, {c0: 512}),
        MemoryDep('arg3_1', 4*c0 + 1, {c0: 512}),
        MemoryDep('arg3_1', 4*c0 + 2, {c0: 512}),
        MemoryDep('arg3_1', 4*c0 + 3, {c0: 512}),
        MemoryDep('arg3_1', 4*c0, {c0: 512}),
        MemoryDep('arg7_1', c1 + 768*tmp0, {c0: 512, c1: 768}),
        MemoryDep('arg8_1', c1 + 768*tmp1, {c0: 512, c1: 768}),
        MemoryDep('arg9_1', c1 + 768*tmp2, {c0: 512, c1: 768})]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (393216, 1)
op1.sizes = ([512, 768], [])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 4], stride=[1024, 4, 1])
arg7_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 768], stride=[768, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 4], stride=[1024, 4, 1])
arg8_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 768], stride=[768, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 4], stride=[1024, 4, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 4], stride=[1024, 4, 1])
arg9_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 768], stride=[768, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
arg10_1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op1_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = 4*p0 + 3
    index2 = 768*indirect0 + p1
    index3 = 4*p0 + 1
    index4 = 768*indirect1 + p1
    index5 = 4*p0 + 2
    index6 = 4*p0
    index7 = 768*indirect2 + p1
    index8 = p0
    index9 = 768*indirect3 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg3_1', get_index_1)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg7_1', get_index_2)
        add = ops.add(load, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg3_1', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg3_1', get_index_4)
        sub = ops.sub(load_3, load_4)
        set_indirect1 = self.set_indirect1(sub)
        get_index_5 = self.get_index('index4')
        load_5 = ops.load('arg8_1', get_index_5)
        add_1 = ops.add(add, load_5)
        get_index_6 = self.get_index('index5')
        load_6 = ops.load('arg3_1', get_index_6)
        get_index_7 = self.get_index('index6')
        load_7 = ops.load('arg3_1', get_index_7)
        sub_1 = ops.sub(load_6, load_7)
        set_indirect2 = self.set_indirect2(sub_1)
        get_index_8 = self.get_index('index7')
        load_8 = ops.load('arg9_1', get_index_8)
        add_2 = ops.add(add_1, load_8)
        get_index_9 = self.get_index('index8')
        load_9 = ops.load('arg2_1', get_index_9)
        set_indirect3 = self.set_indirect3(load_9)
        get_index_10 = self.get_index('index9')
        load_10 = ops.load('arg10_1', get_index_10)
        add_3 = ops.add(add_2, load_10)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf1', get_index_11, add_3, None)
        return store
op0_op1_op2_op3_op5.snodes[2] =
op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 512})]
op2.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 393216})]
op2.met_dependencies = []
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf2.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op2.group.device = cuda:0
op2.group.iteration = (512, 768)
op2.sizes = ([512], [768])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op2_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf2', get_index_1, getitem)
        return store_reduction
op0_op1_op2_op3_op5.snodes[3] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 512})]
op3.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 393216})]
op3.met_dependencies = []
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf3.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (512, 768)
op3.sizes = ([512], [768])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op3_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf3', get_index_1, getitem_1)
        return store_reduction
op0_op1_op2_op3_op5.snodes[4] =
op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 393216})]
op5.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 393216}),
        MemoryDep('buf2', c0, {c0: 512}),
        MemoryDep('buf3', c0, {c0: 512})]
op5.met_dependencies = 
    [   MemoryDep('arg11_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg12_1', c1, {c0: 512, c1: 768})]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf5.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False),
    ]
]
op5.group.device = cuda:0
op5.group.iteration = (393216, 1)
op5.sizes = ([512, 768], [])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg11_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg12_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op5_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf3', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg11_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg12_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf5', get_index_5, add_1, None)
        return store


op6: ExternKernelSchedulerNode(ExternKernelOut)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op6.met_dependencies = [StarDep(name='arg13_1', mode=None)]
op6.outputs = [
    buf6: ExternKernelOut
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf6.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op6.node.kernel = extern_kernels.mm


op7: ExternKernelSchedulerNode(ExternKernelOut)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op7.met_dependencies = [StarDep(name='arg15_1', mode=None)]
op7.outputs = [
    buf7: ExternKernelOut
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf7.users = [NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False)]
]
op7.node.kernel = extern_kernels.mm


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 393216})]
op8.unmet_dependencies = [   MemoryDep('buf6', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op8.met_dependencies = [MemoryDep('arg14_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (393216, 1)
op8.sizes = ([2, 12, 256, 64], [])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg14_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op8_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg14_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf8', get_index_2, add, None)
        return store


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 393216})]
op9.unmet_dependencies = [MemoryDep('buf7', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op9.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 2, c1: 768})]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (393216, 1)
op9.sizes = ([2, 768, 256], [])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg16_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf9_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op9_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg16_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf9', get_index_2, add, None)
        return store


op10: ExternKernelSchedulerNode(ExternKernelOut)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf8', mode=None), StarDep(name='buf9', mode=None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ExternKernelOut
    buf10.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf10.users = [
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=True, is_weak=False),
    ]
]
op10.node.kernel = extern_kernels.bmm


op11_op12_op14: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op11_op12_op14.writes = 
    [   MemoryDep('buf11', c0, {c0: 6144}),
        MemoryDep('buf12', c0, {c0: 6144}),
        MemoryDep('buf14', c0, {c0: 1572864})]
op11_op12_op14.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 1572864})]
op11_op12_op14.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op11_op12_op14.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf11.users = [
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
    ]
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf12.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op11_op12_op14.snodes[0] =
op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 6144})]
op11.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 1572864})]
op11.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf11.users = [
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
    ]
]
op11.group.device = cuda:0
op11.group.iteration = (6144, 256)
op11.sizes = ([2, 3072], [256])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op11_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf11', get_index_2, reduction)
        return store_reduction
op11_op12_op14.snodes[1] =
op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 6144})]
op12.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 1572864}), MemoryDep('buf11', c0, {c0: 6144})]
op12.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf12.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (6144, 256)
op12.sizes = ([2, 3072], [256])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op12_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf11', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf12', get_index_3, reduction)
        return store_reduction
op11_op12_op14.snodes[2] =
op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 1572864})]
op14.unmet_dependencies = 
    [   MemoryDep('buf10', c0, {c0: 1572864}),
        MemoryDep('buf11', c0, {c0: 6144}),
        MemoryDep('buf12', c0, {c0: 6144})]
op14.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (1572864, 1)
op14.sizes = ([2, 3072, 256], [])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf14_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op14_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf11', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf12', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf14', get_index_4, truediv, None)
        return store


op13: ExternKernelSchedulerNode(ExternKernelOut)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op13.met_dependencies = [StarDep(name='arg17_1', mode=None)]
op13.outputs = [
    buf13: ExternKernelOut
    buf13.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf13.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op13.node.kernel = extern_kernels.mm


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 393216})]
op15.unmet_dependencies = [   MemoryDep('buf13', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op15.met_dependencies = [MemoryDep('arg18_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (393216, 1)
op15.sizes = ([2, 12, 256, 64], [])
buf13_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg18_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op15_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg18_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf15', get_index_2, add, None)
        return store


op16: ExternKernelSchedulerNode(ExternKernelOut)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf14', mode=None), StarDep(name='buf15', mode=None)]
op16.met_dependencies = []
op16.outputs = [
    buf16: ExternKernelOut
    buf16.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.node.kernel = extern_kernels.bmm


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 393216})]
op17.unmet_dependencies = [   MemoryDep('buf16', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op17.met_dependencies = []
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (393216, 1)
op17.sizes = ([2, 256, 12, 64], [])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op17_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf17', get_index_1, load, None)
        return store


op18: ExternKernelSchedulerNode(ExternKernelOut)
op18.writes = [StarDep(name='buf18', mode=None)]
op18.unmet_dependencies = [StarDep(name='buf17', mode=None)]
op18.met_dependencies = [StarDep(name='arg19_1', mode=None)]
op18.outputs = [
    buf18: ExternKernelOut
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf18.users = [
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False),
    ]
]
op18.node.kernel = extern_kernels.mm


op19_op20_op22: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op19_op20_op22.writes = 
    [   MemoryDep('buf19', c0, {c0: 512}),
        MemoryDep('buf20', c0, {c0: 512}),
        MemoryDep('buf22', c0, {c0: 393216})]
op19_op20_op22.unmet_dependencies = [MemoryDep('buf18', c0, {c0: 393216}), MemoryDep('buf5', c0, {c0: 393216})]
op19_op20_op22.met_dependencies = 
    [   MemoryDep('arg20_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg21_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg22_1', c1, {c0: 512, c1: 768})]
op19_op20_op22.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf19.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf20.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf22.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False),
    ]
]
op19_op20_op22.snodes[0] =
op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 512})]
op19.unmet_dependencies = [MemoryDep('buf18', c0, {c0: 393216}), MemoryDep('buf5', c0, {c0: 393216})]
op19.met_dependencies = [MemoryDep('arg20_1', c1, {c0: 512, c1: 768})]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf19.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (512, 768)
op19.sizes = ([512], [768])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg20_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op19_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg20_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf5', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf19', get_index_3, getitem)
        return store_reduction
op19_op20_op22.snodes[1] =
op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 512})]
op20.unmet_dependencies = [MemoryDep('buf18', c0, {c0: 393216}), MemoryDep('buf5', c0, {c0: 393216})]
op20.met_dependencies = [MemoryDep('arg20_1', c1, {c0: 512, c1: 768})]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf20.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (512, 768)
op20.sizes = ([512], [768])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg20_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf20_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op20_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg20_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf5', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf20', get_index_3, getitem_1)
        return store_reduction
op19_op20_op22.snodes[2] =
op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 393216})]
op22.unmet_dependencies = 
    [   MemoryDep('buf18', c0, {c0: 393216}),
        MemoryDep('buf19', c0, {c0: 512}),
        MemoryDep('buf20', c0, {c0: 512}),
        MemoryDep('buf5', c0, {c0: 393216})]
op22.met_dependencies = 
    [   MemoryDep('arg20_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg21_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg22_1', c1, {c0: 512, c1: 768})]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf22.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False),
    ]
]
op22.group.device = cuda:0
op22.group.iteration = (393216, 1)
op22.sizes = ([512, 768], [])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg20_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf20_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg21_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg22_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op22_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg20_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf5', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf19', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf20', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg21_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg22_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf22', get_index_7, add_3, None)
        return store


op23: ExternKernelSchedulerNode(ExternKernelOut)
op23.writes = [StarDep(name='buf23', mode=None)]
op23.unmet_dependencies = [StarDep(name='buf22', mode=None)]
op23.met_dependencies = [StarDep(name='arg23_1', mode=None)]
op23.outputs = [
    buf23: ExternKernelOut
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf23.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=True, is_weak=False)]
]
op23.node.kernel = extern_kernels.mm


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 1572864})]
op24.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 1572864})]
op24.met_dependencies = [MemoryDep('arg24_1', c1, {c0: 512, c1: 3072})]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf24.users = [NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (1572864, 1)
op24.sizes = ([512, 3072], [])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg24_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op24_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf23', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf24', get_index_4, mul_2, None)
        return store


op25: ExternKernelSchedulerNode(ExternKernelOut)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = [StarDep(name='buf24', mode=None)]
op25.met_dependencies = [StarDep(name='arg25_1', mode=None)]
op25.outputs = [
    buf25: ExternKernelOut
    buf25.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf25.users = [
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False),
    ]
]
op25.node.kernel = extern_kernels.mm


op26_op27_op29: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op26_op27_op29.writes = 
    [   MemoryDep('buf26', c0, {c0: 512}),
        MemoryDep('buf27', c0, {c0: 512}),
        MemoryDep('buf29', c0, {c0: 393216})]
op26_op27_op29.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 393216}), MemoryDep('buf25', c0, {c0: 393216})]
op26_op27_op29.met_dependencies = 
    [   MemoryDep('arg26_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg27_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg28_1', c1, {c0: 512, c1: 768})]
op26_op27_op29.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf26.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf27.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf29.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
    ]
]
op26_op27_op29.snodes[0] =
op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 512})]
op26.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 393216}), MemoryDep('buf25', c0, {c0: 393216})]
op26.met_dependencies = [MemoryDep('arg26_1', c1, {c0: 512, c1: 768})]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf26.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (512, 768)
op26.sizes = ([512], [768])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg26_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op26_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf22', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf26', get_index_3, getitem)
        return store_reduction
op26_op27_op29.snodes[1] =
op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 512})]
op27.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 393216}), MemoryDep('buf25', c0, {c0: 393216})]
op27.met_dependencies = [MemoryDep('arg26_1', c1, {c0: 512, c1: 768})]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf27.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (512, 768)
op27.sizes = ([512], [768])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg26_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op27_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf22', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf27', get_index_3, getitem_1)
        return store_reduction
op26_op27_op29.snodes[2] =
op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 393216})]
op29.unmet_dependencies = 
    [   MemoryDep('buf22', c0, {c0: 393216}),
        MemoryDep('buf25', c0, {c0: 393216}),
        MemoryDep('buf26', c0, {c0: 512}),
        MemoryDep('buf27', c0, {c0: 512})]
op29.met_dependencies = 
    [   MemoryDep('arg26_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg27_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg28_1', c1, {c0: 512, c1: 768})]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf29.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
    ]
]
op29.group.device = cuda:0
op29.group.iteration = (393216, 1)
op29.sizes = ([512, 768], [])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg26_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg27_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg28_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op29_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf22', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf26', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf27', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg27_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg28_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf29', get_index_7, add_3, None)
        return store


op30: ExternKernelSchedulerNode(ExternKernelOut)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = [StarDep(name='arg29_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelOut
    buf30.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf30.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op30.node.kernel = extern_kernels.mm


op31: ExternKernelSchedulerNode(ExternKernelOut)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op31.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op31.outputs = [
    buf31: ExternKernelOut
    buf31.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf31.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op31.node.kernel = extern_kernels.mm


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 393216})]
op32.unmet_dependencies = [   MemoryDep('buf30', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op32.met_dependencies = [MemoryDep('arg30_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (393216, 1)
op32.sizes = ([2, 12, 256, 64], [])
buf30_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg30_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op32_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg30_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf32', get_index_2, add, None)
        return store


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 393216})]
op33.unmet_dependencies = [MemoryDep('buf31', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op33.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 2, c1: 768})]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf33.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (393216, 1)
op33.sizes = ([2, 768, 256], [])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg32_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op33_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf33', get_index_2, add, None)
        return store


op34: ExternKernelSchedulerNode(ExternKernelOut)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf32', mode=None), StarDep(name='buf33', mode=None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: ExternKernelOut
    buf34.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False),
    ]
]
op34.node.kernel = extern_kernels.bmm


op35_op36_op38: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op35_op36_op38.writes = 
    [   MemoryDep('buf35', c0, {c0: 6144}),
        MemoryDep('buf36', c0, {c0: 6144}),
        MemoryDep('buf38', c0, {c0: 1572864})]
op35_op36_op38.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 1572864})]
op35_op36_op38.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op35_op36_op38.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf35.users = [
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
    ]
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf36.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op35_op36_op38.snodes[0] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 6144})]
op35.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 1572864})]
op35.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf35.users = [
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
    ]
]
op35.group.device = cuda:0
op35.group.iteration = (6144, 256)
op35.sizes = ([2, 3072], [256])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op35_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf35', get_index_2, reduction)
        return store_reduction
op35_op36_op38.snodes[1] =
op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 6144})]
op36.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 1572864}), MemoryDep('buf35', c0, {c0: 6144})]
op36.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf36.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (6144, 256)
op36.sizes = ([2, 3072], [256])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op36_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf35', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf36', get_index_3, reduction)
        return store_reduction
op35_op36_op38.snodes[2] =
op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 1572864})]
op38.unmet_dependencies = 
    [   MemoryDep('buf34', c0, {c0: 1572864}),
        MemoryDep('buf35', c0, {c0: 6144}),
        MemoryDep('buf36', c0, {c0: 6144})]
op38.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (1572864, 1)
op38.sizes = ([2, 3072, 256], [])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op38_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf35', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf36', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf38', get_index_4, truediv, None)
        return store


op37: ExternKernelSchedulerNode(ExternKernelOut)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op37.met_dependencies = [StarDep(name='arg33_1', mode=None)]
op37.outputs = [
    buf37: ExternKernelOut
    buf37.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf37.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op37.node.kernel = extern_kernels.mm


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 393216})]
op39.unmet_dependencies = [   MemoryDep('buf37', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op39.met_dependencies = [MemoryDep('arg34_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (393216, 1)
op39.sizes = ([2, 12, 256, 64], [])
buf37_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg34_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op39_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg34_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf39', get_index_2, add, None)
        return store


op40: ExternKernelSchedulerNode(ExternKernelOut)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf38', mode=None), StarDep(name='buf39', mode=None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: ExternKernelOut
    buf40.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf40.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.node.kernel = extern_kernels.bmm


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 393216})]
op41.unmet_dependencies = [   MemoryDep('buf40', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op41.met_dependencies = []
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf41.users = [NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (393216, 1)
op41.sizes = ([2, 256, 12, 64], [])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op41_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf41', get_index_1, load, None)
        return store


op42: ExternKernelSchedulerNode(ExternKernelOut)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf41', mode=None)]
op42.met_dependencies = [StarDep(name='arg35_1', mode=None)]
op42.outputs = [
    buf42: ExternKernelOut
    buf42.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
    ]
]
op42.node.kernel = extern_kernels.mm


op43_op44_op46: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op43_op44_op46.writes = 
    [   MemoryDep('buf43', c0, {c0: 512}),
        MemoryDep('buf44', c0, {c0: 512}),
        MemoryDep('buf46', c0, {c0: 393216})]
op43_op44_op46.unmet_dependencies = [MemoryDep('buf29', c0, {c0: 393216}), MemoryDep('buf42', c0, {c0: 393216})]
op43_op44_op46.met_dependencies = 
    [   MemoryDep('arg36_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg37_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg38_1', c1, {c0: 512, c1: 768})]
op43_op44_op46.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf43.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf44.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf46.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
    ]
]
op43_op44_op46.snodes[0] =
op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 512})]
op43.unmet_dependencies = [MemoryDep('buf29', c0, {c0: 393216}), MemoryDep('buf42', c0, {c0: 393216})]
op43.met_dependencies = [MemoryDep('arg36_1', c1, {c0: 512, c1: 768})]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf43.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (512, 768)
op43.sizes = ([512], [768])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg36_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op43_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf29', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf43', get_index_3, getitem)
        return store_reduction
op43_op44_op46.snodes[1] =
op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 512})]
op44.unmet_dependencies = [MemoryDep('buf29', c0, {c0: 393216}), MemoryDep('buf42', c0, {c0: 393216})]
op44.met_dependencies = [MemoryDep('arg36_1', c1, {c0: 512, c1: 768})]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf44.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (512, 768)
op44.sizes = ([512], [768])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg36_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op44_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf29', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf44', get_index_3, getitem_1)
        return store_reduction
op43_op44_op46.snodes[2] =
op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 393216})]
op46.unmet_dependencies = 
    [   MemoryDep('buf29', c0, {c0: 393216}),
        MemoryDep('buf42', c0, {c0: 393216}),
        MemoryDep('buf43', c0, {c0: 512}),
        MemoryDep('buf44', c0, {c0: 512})]
op46.met_dependencies = 
    [   MemoryDep('arg36_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg37_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg38_1', c1, {c0: 512, c1: 768})]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf46.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
    ]
]
op46.group.device = cuda:0
op46.group.iteration = (393216, 1)
op46.sizes = ([512, 768], [])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg36_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg37_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg38_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op46_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf29', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf43', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf44', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg37_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg38_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf46', get_index_7, add_3, None)
        return store


op47: ExternKernelSchedulerNode(ExternKernelOut)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg39_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelOut
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.node.kernel = extern_kernels.mm


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 1572864})]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 1572864})]
op48.met_dependencies = [MemoryDep('arg40_1', c1, {c0: 512, c1: 3072})]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (1572864, 1)
op48.sizes = ([512, 3072], [])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg40_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op48_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg40_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf47', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg40_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf48', get_index_4, mul_2, None)
        return store


op49: ExternKernelSchedulerNode(ExternKernelOut)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op49.outputs = [
    buf49: ExternKernelOut
    buf49.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf49.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
    ]
]
op49.node.kernel = extern_kernels.mm


op50_op51_op53: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op50_op51_op53.writes = 
    [   MemoryDep('buf50', c0, {c0: 512}),
        MemoryDep('buf51', c0, {c0: 512}),
        MemoryDep('buf53', c0, {c0: 393216})]
op50_op51_op53.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 393216}), MemoryDep('buf49', c0, {c0: 393216})]
op50_op51_op53.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg43_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg44_1', c1, {c0: 512, c1: 768})]
op50_op51_op53.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf50.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf51.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf53.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False),
    ]
]
op50_op51_op53.snodes[0] =
op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 512})]
op50.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 393216}), MemoryDep('buf49', c0, {c0: 393216})]
op50.met_dependencies = [MemoryDep('arg42_1', c1, {c0: 512, c1: 768})]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf50.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (512, 768)
op50.sizes = ([512], [768])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg42_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op50_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf46', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf50', get_index_3, getitem)
        return store_reduction
op50_op51_op53.snodes[1] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 512})]
op51.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 393216}), MemoryDep('buf49', c0, {c0: 393216})]
op51.met_dependencies = [MemoryDep('arg42_1', c1, {c0: 512, c1: 768})]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf51.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (512, 768)
op51.sizes = ([512], [768])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg42_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op51_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf46', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf51', get_index_3, getitem_1)
        return store_reduction
op50_op51_op53.snodes[2] =
op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 393216})]
op53.unmet_dependencies = 
    [   MemoryDep('buf46', c0, {c0: 393216}),
        MemoryDep('buf49', c0, {c0: 393216}),
        MemoryDep('buf50', c0, {c0: 512}),
        MemoryDep('buf51', c0, {c0: 512})]
op53.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg43_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg44_1', c1, {c0: 512, c1: 768})]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf53.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False),
    ]
]
op53.group.device = cuda:0
op53.group.iteration = (393216, 1)
op53.sizes = ([512, 768], [])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg42_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg43_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg44_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op53_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf46', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf50', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf51', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg43_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg44_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf53', get_index_7, add_3, None)
        return store


op54: ExternKernelSchedulerNode(ExternKernelOut)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op54.met_dependencies = [StarDep(name='arg45_1', mode=None)]
op54.outputs = [
    buf54: ExternKernelOut
    buf54.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf54.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op54.node.kernel = extern_kernels.mm


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op55.met_dependencies = [StarDep(name='arg47_1', mode=None)]
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op55.node.kernel = extern_kernels.mm


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 393216})]
op56.unmet_dependencies = [   MemoryDep('buf54', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op56.met_dependencies = [MemoryDep('arg46_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (393216, 1)
op56.sizes = ([2, 12, 256, 64], [])
buf54_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg46_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf56_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op56_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf56', get_index_2, add, None)
        return store


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 393216})]
op57.unmet_dependencies = [MemoryDep('buf55', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op57.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 2, c1: 768})]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf57.users = [NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (393216, 1)
op57.sizes = ([2, 768, 256], [])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg48_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op57_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf57', get_index_2, add, None)
        return store


op58: ExternKernelSchedulerNode(ExternKernelOut)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = [StarDep(name='buf56', mode=None), StarDep(name='buf57', mode=None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ExternKernelOut
    buf58.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False),
    ]
]
op58.node.kernel = extern_kernels.bmm


op59_op60_op62: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op59_op60_op62.writes = 
    [   MemoryDep('buf59', c0, {c0: 6144}),
        MemoryDep('buf60', c0, {c0: 6144}),
        MemoryDep('buf62', c0, {c0: 1572864})]
op59_op60_op62.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 1572864})]
op59_op60_op62.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op59_op60_op62.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf59.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
    ]
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf60.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op59_op60_op62.snodes[0] =
op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 6144})]
op59.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 1572864})]
op59.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf59.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
    ]
]
op59.group.device = cuda:0
op59.group.iteration = (6144, 256)
op59.sizes = ([2, 3072], [256])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op59_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf59', get_index_2, reduction)
        return store_reduction
op59_op60_op62.snodes[1] =
op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 6144})]
op60.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 1572864}), MemoryDep('buf59', c0, {c0: 6144})]
op60.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf60.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (6144, 256)
op60.sizes = ([2, 3072], [256])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf60_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op60_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf59', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf60', get_index_3, reduction)
        return store_reduction
op59_op60_op62.snodes[2] =
op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 1572864})]
op62.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 1572864}),
        MemoryDep('buf59', c0, {c0: 6144}),
        MemoryDep('buf60', c0, {c0: 6144})]
op62.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (1572864, 1)
op62.sizes = ([2, 3072, 256], [])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf60_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op62_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf59', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf60', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf62', get_index_4, truediv, None)
        return store


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op61.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf61.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op61.node.kernel = extern_kernels.mm


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 393216})]
op63.unmet_dependencies = [   MemoryDep('buf61', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op63.met_dependencies = [MemoryDep('arg50_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (393216, 1)
op63.sizes = ([2, 12, 256, 64], [])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg50_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op63_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg50_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf63', get_index_2, add, None)
        return store


op64: ExternKernelSchedulerNode(ExternKernelOut)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf62', mode=None), StarDep(name='buf63', mode=None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: ExternKernelOut
    buf64.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf64.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op64.node.kernel = extern_kernels.bmm


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 393216})]
op65.unmet_dependencies = [   MemoryDep('buf64', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (393216, 1)
op65.sizes = ([2, 256, 12, 64], [])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op65_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf65', get_index_1, load, None)
        return store


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf66.users = [
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False),
    ]
]
op66.node.kernel = extern_kernels.mm


op67_op68_op70: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op67_op68_op70.writes = 
    [   MemoryDep('buf67', c0, {c0: 512}),
        MemoryDep('buf68', c0, {c0: 512}),
        MemoryDep('buf70', c0, {c0: 393216})]
op67_op68_op70.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 393216}), MemoryDep('buf66', c0, {c0: 393216})]
op67_op68_op70.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg53_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg54_1', c1, {c0: 512, c1: 768})]
op67_op68_op70.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf67.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf68.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf70.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
    ]
]
op67_op68_op70.snodes[0] =
op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 512})]
op67.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 393216}), MemoryDep('buf66', c0, {c0: 393216})]
op67.met_dependencies = [MemoryDep('arg52_1', c1, {c0: 512, c1: 768})]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf67.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (512, 768)
op67.sizes = ([512], [768])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg52_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op67_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg52_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf53', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf67', get_index_3, getitem)
        return store_reduction
op67_op68_op70.snodes[1] =
op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 512})]
op68.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 393216}), MemoryDep('buf66', c0, {c0: 393216})]
op68.met_dependencies = [MemoryDep('arg52_1', c1, {c0: 512, c1: 768})]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf68.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (512, 768)
op68.sizes = ([512], [768])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg52_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op68_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg52_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf53', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf68', get_index_3, getitem_1)
        return store_reduction
op67_op68_op70.snodes[2] =
op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 393216})]
op70.unmet_dependencies = 
    [   MemoryDep('buf53', c0, {c0: 393216}),
        MemoryDep('buf66', c0, {c0: 393216}),
        MemoryDep('buf67', c0, {c0: 512}),
        MemoryDep('buf68', c0, {c0: 512})]
op70.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg53_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg54_1', c1, {c0: 512, c1: 768})]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf70.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
    ]
]
op70.group.device = cuda:0
op70.group.iteration = (393216, 1)
op70.sizes = ([512, 768], [])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg52_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg53_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg54_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op70_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg52_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf53', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf67', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf68', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg53_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg54_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf70', get_index_7, add_3, None)
        return store


op71: ExternKernelSchedulerNode(ExternKernelOut)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf70', mode=None)]
op71.met_dependencies = [StarDep(name='arg55_1', mode=None)]
op71.outputs = [
    buf71: ExternKernelOut
    buf71.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf71.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False)]
]
op71.node.kernel = extern_kernels.mm


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 1572864})]
op72.unmet_dependencies = [MemoryDep('buf71', c0, {c0: 1572864})]
op72.met_dependencies = [MemoryDep('arg56_1', c1, {c0: 512, c1: 3072})]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (1572864, 1)
op72.sizes = ([512, 3072], [])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg56_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op72_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg56_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf71', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg56_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf72', get_index_4, mul_2, None)
        return store


op73: ExternKernelSchedulerNode(ExternKernelOut)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf72', mode=None)]
op73.met_dependencies = [StarDep(name='arg57_1', mode=None)]
op73.outputs = [
    buf73: ExternKernelOut
    buf73.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
    ]
]
op73.node.kernel = extern_kernels.mm


op74_op75_op77: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op74_op75_op77.writes = 
    [   MemoryDep('buf74', c0, {c0: 512}),
        MemoryDep('buf75', c0, {c0: 512}),
        MemoryDep('buf77', c0, {c0: 393216})]
op74_op75_op77.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 393216}), MemoryDep('buf73', c0, {c0: 393216})]
op74_op75_op77.met_dependencies = 
    [   MemoryDep('arg58_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg59_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg60_1', c1, {c0: 512, c1: 768})]
op74_op75_op77.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf74.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf75.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf77.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
    ]
]
op74_op75_op77.snodes[0] =
op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 512})]
op74.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 393216}), MemoryDep('buf73', c0, {c0: 393216})]
op74.met_dependencies = [MemoryDep('arg58_1', c1, {c0: 512, c1: 768})]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf74.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (512, 768)
op74.sizes = ([512], [768])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg58_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op74_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg58_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf70', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf74', get_index_3, getitem)
        return store_reduction
op74_op75_op77.snodes[1] =
op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 512})]
op75.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 393216}), MemoryDep('buf73', c0, {c0: 393216})]
op75.met_dependencies = [MemoryDep('arg58_1', c1, {c0: 512, c1: 768})]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf75.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (512, 768)
op75.sizes = ([512], [768])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg58_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op75_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg58_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf70', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf75', get_index_3, getitem_1)
        return store_reduction
op74_op75_op77.snodes[2] =
op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 393216})]
op77.unmet_dependencies = 
    [   MemoryDep('buf70', c0, {c0: 393216}),
        MemoryDep('buf73', c0, {c0: 393216}),
        MemoryDep('buf74', c0, {c0: 512}),
        MemoryDep('buf75', c0, {c0: 512})]
op77.met_dependencies = 
    [   MemoryDep('arg58_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg59_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg60_1', c1, {c0: 512, c1: 768})]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf77.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
    ]
]
op77.group.device = cuda:0
op77.group.iteration = (393216, 1)
op77.sizes = ([512, 768], [])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg58_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg59_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg60_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op77_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg58_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf70', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf74', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf75', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg59_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg60_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf77', get_index_7, add_3, None)
        return store


op78: ExternKernelSchedulerNode(ExternKernelOut)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op78.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op78.outputs = [
    buf78: ExternKernelOut
    buf78.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf78.users = [NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op78.node.kernel = extern_kernels.mm


op79: ExternKernelSchedulerNode(ExternKernelOut)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op79.met_dependencies = [StarDep(name='arg63_1', mode=None)]
op79.outputs = [
    buf79: ExternKernelOut
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf79.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op79.node.kernel = extern_kernels.mm


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 393216})]
op80.unmet_dependencies = [   MemoryDep('buf78', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op80.met_dependencies = [MemoryDep('arg62_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf80.users = [NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (393216, 1)
op80.sizes = ([2, 12, 256, 64], [])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg62_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op80_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf80', get_index_2, add, None)
        return store


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 393216})]
op81.unmet_dependencies = [MemoryDep('buf79', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op81.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 2, c1: 768})]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (393216, 1)
op81.sizes = ([2, 768, 256], [])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg64_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf81_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op81_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg64_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf81', get_index_2, add, None)
        return store


op82: ExternKernelSchedulerNode(ExternKernelOut)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf80', mode=None), StarDep(name='buf81', mode=None)]
op82.met_dependencies = []
op82.outputs = [
    buf82: ExternKernelOut
    buf82.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf82.users = [
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False),
    ]
]
op82.node.kernel = extern_kernels.bmm


op83_op84_op86: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op83_op84_op86.writes = 
    [   MemoryDep('buf83', c0, {c0: 6144}),
        MemoryDep('buf84', c0, {c0: 6144}),
        MemoryDep('buf86', c0, {c0: 1572864})]
op83_op84_op86.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 1572864})]
op83_op84_op86.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op83_op84_op86.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf83.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
    ]
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf84.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op83_op84_op86.snodes[0] =
op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 6144})]
op83.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 1572864})]
op83.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf83.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
    ]
]
op83.group.device = cuda:0
op83.group.iteration = (6144, 256)
op83.sizes = ([2, 3072], [256])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op83_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf83', get_index_2, reduction)
        return store_reduction
op83_op84_op86.snodes[1] =
op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 6144})]
op84.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 1572864}), MemoryDep('buf83', c0, {c0: 6144})]
op84.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf84.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (6144, 256)
op84.sizes = ([2, 3072], [256])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op84_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf83', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf84', get_index_3, reduction)
        return store_reduction
op83_op84_op86.snodes[2] =
op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 1572864})]
op86.unmet_dependencies = 
    [   MemoryDep('buf82', c0, {c0: 1572864}),
        MemoryDep('buf83', c0, {c0: 6144}),
        MemoryDep('buf84', c0, {c0: 6144})]
op86.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (1572864, 1)
op86.sizes = ([2, 3072, 256], [])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf86_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op86_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf83', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf84', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf86', get_index_4, truediv, None)
        return store


op85: ExternKernelSchedulerNode(ExternKernelOut)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op85.met_dependencies = [StarDep(name='arg65_1', mode=None)]
op85.outputs = [
    buf85: ExternKernelOut
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf85.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op85.node.kernel = extern_kernels.mm


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 393216})]
op87.unmet_dependencies = [   MemoryDep('buf85', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op87.met_dependencies = [MemoryDep('arg66_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (393216, 1)
op87.sizes = ([2, 12, 256, 64], [])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg66_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op87_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg66_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf87', get_index_2, add, None)
        return store


op88: ExternKernelSchedulerNode(ExternKernelOut)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf86', mode=None), StarDep(name='buf87', mode=None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ExternKernelOut
    buf88.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf88.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.node.kernel = extern_kernels.bmm


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 393216})]
op89.unmet_dependencies = [   MemoryDep('buf88', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op89.met_dependencies = []
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (393216, 1)
op89.sizes = ([2, 256, 12, 64], [])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op89_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf89', get_index_1, load, None)
        return store


op90: ExternKernelSchedulerNode(ExternKernelOut)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op90.met_dependencies = [StarDep(name='arg67_1', mode=None)]
op90.outputs = [
    buf90: ExternKernelOut
    buf90.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf90.users = [
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
    ]
]
op90.node.kernel = extern_kernels.mm


op91_op92_op94: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op91_op92_op94.writes = 
    [   MemoryDep('buf91', c0, {c0: 512}),
        MemoryDep('buf92', c0, {c0: 512}),
        MemoryDep('buf94', c0, {c0: 393216})]
op91_op92_op94.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 393216}), MemoryDep('buf90', c0, {c0: 393216})]
op91_op92_op94.met_dependencies = 
    [   MemoryDep('arg68_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg69_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg70_1', c1, {c0: 512, c1: 768})]
op91_op92_op94.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf91.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf92.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf94.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False),
    ]
]
op91_op92_op94.snodes[0] =
op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 512})]
op91.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 393216}), MemoryDep('buf90', c0, {c0: 393216})]
op91.met_dependencies = [MemoryDep('arg68_1', c1, {c0: 512, c1: 768})]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf91.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (512, 768)
op91.sizes = ([512], [768])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg68_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op91_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg68_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf77', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf91', get_index_3, getitem)
        return store_reduction
op91_op92_op94.snodes[1] =
op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 512})]
op92.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 393216}), MemoryDep('buf90', c0, {c0: 393216})]
op92.met_dependencies = [MemoryDep('arg68_1', c1, {c0: 512, c1: 768})]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf92.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (512, 768)
op92.sizes = ([512], [768])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg68_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op92_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg68_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf77', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf92', get_index_3, getitem_1)
        return store_reduction
op91_op92_op94.snodes[2] =
op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 393216})]
op94.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 393216}),
        MemoryDep('buf90', c0, {c0: 393216}),
        MemoryDep('buf91', c0, {c0: 512}),
        MemoryDep('buf92', c0, {c0: 512})]
op94.met_dependencies = 
    [   MemoryDep('arg68_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg69_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg70_1', c1, {c0: 512, c1: 768})]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf94.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False),
    ]
]
op94.group.device = cuda:0
op94.group.iteration = (393216, 1)
op94.sizes = ([512, 768], [])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg68_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg69_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg70_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op94_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg68_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf77', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf91', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf92', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg69_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg70_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf94', get_index_7, add_3, None)
        return store


op95: ExternKernelSchedulerNode(ExternKernelOut)
op95.writes = [StarDep(name='buf95', mode=None)]
op95.unmet_dependencies = [StarDep(name='buf94', mode=None)]
op95.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op95.outputs = [
    buf95: ExternKernelOut
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf95.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False)]
]
op95.node.kernel = extern_kernels.mm


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 1572864})]
op96.unmet_dependencies = [MemoryDep('buf95', c0, {c0: 1572864})]
op96.met_dependencies = [MemoryDep('arg72_1', c1, {c0: 512, c1: 3072})]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (1572864, 1)
op96.sizes = ([512, 3072], [])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg72_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op96_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf95', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg72_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf96', get_index_4, mul_2, None)
        return store


op97: ExternKernelSchedulerNode(ExternKernelOut)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op97.met_dependencies = [StarDep(name='arg73_1', mode=None)]
op97.outputs = [
    buf97: ExternKernelOut
    buf97.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf97.users = [
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False),
    ]
]
op97.node.kernel = extern_kernels.mm


op98_op99_op101: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op98_op99_op101.writes = 
    [   MemoryDep('buf101', c0, {c0: 393216}),
        MemoryDep('buf98', c0, {c0: 512}),
        MemoryDep('buf99', c0, {c0: 512})]
op98_op99_op101.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 393216}), MemoryDep('buf97', c0, {c0: 393216})]
op98_op99_op101.met_dependencies = 
    [   MemoryDep('arg74_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg75_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg76_1', c1, {c0: 512, c1: 768})]
op98_op99_op101.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf98.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf99.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf101.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
    ]
]
op98_op99_op101.snodes[0] =
op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 512})]
op98.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 393216}), MemoryDep('buf97', c0, {c0: 393216})]
op98.met_dependencies = [MemoryDep('arg74_1', c1, {c0: 512, c1: 768})]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf98.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (512, 768)
op98.sizes = ([512], [768])
buf97_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg74_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op98_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg74_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf94', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf98', get_index_3, getitem)
        return store_reduction
op98_op99_op101.snodes[1] =
op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 512})]
op99.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 393216}), MemoryDep('buf97', c0, {c0: 393216})]
op99.met_dependencies = [MemoryDep('arg74_1', c1, {c0: 512, c1: 768})]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf99.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (512, 768)
op99.sizes = ([512], [768])
buf97_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg74_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op99_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg74_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf94', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf99', get_index_3, getitem_1)
        return store_reduction
op98_op99_op101.snodes[2] =
op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 393216})]
op101.unmet_dependencies = 
    [   MemoryDep('buf94', c0, {c0: 393216}),
        MemoryDep('buf97', c0, {c0: 393216}),
        MemoryDep('buf98', c0, {c0: 512}),
        MemoryDep('buf99', c0, {c0: 512})]
op101.met_dependencies = 
    [   MemoryDep('arg74_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg75_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg76_1', c1, {c0: 512, c1: 768})]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf101.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
    ]
]
op101.group.device = cuda:0
op101.group.iteration = (393216, 1)
op101.sizes = ([512, 768], [])
buf97_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg74_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg75_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg76_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op101_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg74_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf94', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf98', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf99', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg75_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg76_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf101', get_index_7, add_3, None)
        return store


op102: ExternKernelSchedulerNode(ExternKernelOut)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op102.met_dependencies = [StarDep(name='arg77_1', mode=None)]
op102.outputs = [
    buf102: ExternKernelOut
    buf102.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf102.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op102.node.kernel = extern_kernels.mm


op103: ExternKernelSchedulerNode(ExternKernelOut)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op103.met_dependencies = [StarDep(name='arg79_1', mode=None)]
op103.outputs = [
    buf103: ExternKernelOut
    buf103.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf103.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op103.node.kernel = extern_kernels.mm


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 393216})]
op104.unmet_dependencies = [   MemoryDep('buf102', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op104.met_dependencies = [MemoryDep('arg78_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf104.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (393216, 1)
op104.sizes = ([2, 12, 256, 64], [])
buf102_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg78_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op104_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg78_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf104', get_index_2, add, None)
        return store


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 393216})]
op105.unmet_dependencies = [MemoryDep('buf103', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op105.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 2, c1: 768})]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (393216, 1)
op105.sizes = ([2, 768, 256], [])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg80_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op105_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg80_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf105', get_index_2, add, None)
        return store


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf104', mode=None), StarDep(name='buf105', mode=None)]
op106.met_dependencies = []
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf106.users = [
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
    ]
]
op106.node.kernel = extern_kernels.bmm


op107_op108_op110: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op107_op108_op110.writes = 
    [   MemoryDep('buf107', c0, {c0: 6144}),
        MemoryDep('buf108', c0, {c0: 6144}),
        MemoryDep('buf110', c0, {c0: 1572864})]
op107_op108_op110.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 1572864})]
op107_op108_op110.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op107_op108_op110.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf107.users = [
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
    ]
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf108.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op107_op108_op110.snodes[0] =
op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 6144})]
op107.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 1572864})]
op107.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf107.users = [
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
    ]
]
op107.group.device = cuda:0
op107.group.iteration = (6144, 256)
op107.sizes = ([2, 3072], [256])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op107_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf107', get_index_2, reduction)
        return store_reduction
op107_op108_op110.snodes[1] =
op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 6144})]
op108.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 1572864}), MemoryDep('buf107', c0, {c0: 6144})]
op108.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf108.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (6144, 256)
op108.sizes = ([2, 3072], [256])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op108_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf107', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf108', get_index_3, reduction)
        return store_reduction
op107_op108_op110.snodes[2] =
op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 1572864})]
op110.unmet_dependencies = 
    [   MemoryDep('buf106', c0, {c0: 1572864}),
        MemoryDep('buf107', c0, {c0: 6144}),
        MemoryDep('buf108', c0, {c0: 6144})]
op110.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (1572864, 1)
op110.sizes = ([2, 3072, 256], [])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op110_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf107', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf108', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf110', get_index_4, truediv, None)
        return store


op109: ExternKernelSchedulerNode(ExternKernelOut)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op109.met_dependencies = [StarDep(name='arg81_1', mode=None)]
op109.outputs = [
    buf109: ExternKernelOut
    buf109.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf109.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op109.node.kernel = extern_kernels.mm


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 393216})]
op111.unmet_dependencies = [   MemoryDep('buf109', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op111.met_dependencies = [MemoryDep('arg82_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (393216, 1)
op111.sizes = ([2, 12, 256, 64], [])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg82_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op111_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg82_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf111', get_index_2, add, None)
        return store


op112: ExternKernelSchedulerNode(ExternKernelOut)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf110', mode=None), StarDep(name='buf111', mode=None)]
op112.met_dependencies = []
op112.outputs = [
    buf112: ExternKernelOut
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf112.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op112.node.kernel = extern_kernels.bmm


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 393216})]
op113.unmet_dependencies = [   MemoryDep('buf112', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op113.met_dependencies = []
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (393216, 1)
op113.sizes = ([2, 256, 12, 64], [])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op113_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf113', get_index_1, load, None)
        return store


op114: ExternKernelSchedulerNode(ExternKernelOut)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf113', mode=None)]
op114.met_dependencies = [StarDep(name='arg83_1', mode=None)]
op114.outputs = [
    buf114: ExternKernelOut
    buf114.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf114.users = [
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
    ]
]
op114.node.kernel = extern_kernels.mm


op115_op116_op118: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op115_op116_op118.writes = 
    [   MemoryDep('buf115', c0, {c0: 512}),
        MemoryDep('buf116', c0, {c0: 512}),
        MemoryDep('buf118', c0, {c0: 393216})]
op115_op116_op118.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 393216}), MemoryDep('buf114', c0, {c0: 393216})]
op115_op116_op118.met_dependencies = 
    [   MemoryDep('arg84_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg85_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg86_1', c1, {c0: 512, c1: 768})]
op115_op116_op118.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf115.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf116.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf118.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False),
    ]
]
op115_op116_op118.snodes[0] =
op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 512})]
op115.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 393216}), MemoryDep('buf114', c0, {c0: 393216})]
op115.met_dependencies = [MemoryDep('arg84_1', c1, {c0: 512, c1: 768})]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf115.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (512, 768)
op115.sizes = ([512], [768])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg84_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op115_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf101', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf115', get_index_3, getitem)
        return store_reduction
op115_op116_op118.snodes[1] =
op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 512})]
op116.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 393216}), MemoryDep('buf114', c0, {c0: 393216})]
op116.met_dependencies = [MemoryDep('arg84_1', c1, {c0: 512, c1: 768})]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf116.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (512, 768)
op116.sizes = ([512], [768])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg84_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf116_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op116_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf101', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf116', get_index_3, getitem_1)
        return store_reduction
op115_op116_op118.snodes[2] =
op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 393216})]
op118.unmet_dependencies = 
    [   MemoryDep('buf101', c0, {c0: 393216}),
        MemoryDep('buf114', c0, {c0: 393216}),
        MemoryDep('buf115', c0, {c0: 512}),
        MemoryDep('buf116', c0, {c0: 512})]
op118.met_dependencies = 
    [   MemoryDep('arg84_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg85_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg86_1', c1, {c0: 512, c1: 768})]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf118.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False),
    ]
]
op118.group.device = cuda:0
op118.group.iteration = (393216, 1)
op118.sizes = ([512, 768], [])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg84_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf116_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg85_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg86_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op118_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf101', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf115', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf116', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg85_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg86_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf118', get_index_7, add_3, None)
        return store


op119: ExternKernelSchedulerNode(ExternKernelOut)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf118', mode=None)]
op119.met_dependencies = [StarDep(name='arg87_1', mode=None)]
op119.outputs = [
    buf119: ExternKernelOut
    buf119.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf119.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=True, is_weak=False)]
]
op119.node.kernel = extern_kernels.mm


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 1572864})]
op120.unmet_dependencies = [MemoryDep('buf119', c0, {c0: 1572864})]
op120.met_dependencies = [MemoryDep('arg88_1', c1, {c0: 512, c1: 3072})]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (1572864, 1)
op120.sizes = ([512, 3072], [])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg88_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op120_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg88_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf119', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg88_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf120', get_index_4, mul_2, None)
        return store


op121: ExternKernelSchedulerNode(ExternKernelOut)
op121.writes = [StarDep(name='buf121', mode=None)]
op121.unmet_dependencies = [StarDep(name='buf120', mode=None)]
op121.met_dependencies = [StarDep(name='arg89_1', mode=None)]
op121.outputs = [
    buf121: ExternKernelOut
    buf121.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf121.users = [
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False),
    ]
]
op121.node.kernel = extern_kernels.mm


op122_op123_op125: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op122_op123_op125.writes = 
    [   MemoryDep('buf122', c0, {c0: 512}),
        MemoryDep('buf123', c0, {c0: 512}),
        MemoryDep('buf125', c0, {c0: 393216})]
op122_op123_op125.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 393216}), MemoryDep('buf121', c0, {c0: 393216})]
op122_op123_op125.met_dependencies = 
    [   MemoryDep('arg90_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg91_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg92_1', c1, {c0: 512, c1: 768})]
op122_op123_op125.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf122.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf123.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf125.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op122_op123_op125.snodes[0] =
op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 512})]
op122.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 393216}), MemoryDep('buf121', c0, {c0: 393216})]
op122.met_dependencies = [MemoryDep('arg90_1', c1, {c0: 512, c1: 768})]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf122.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (512, 768)
op122.sizes = ([512], [768])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg90_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op122_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf118', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf122', get_index_3, getitem)
        return store_reduction
op122_op123_op125.snodes[1] =
op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 512})]
op123.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 393216}), MemoryDep('buf121', c0, {c0: 393216})]
op123.met_dependencies = [MemoryDep('arg90_1', c1, {c0: 512, c1: 768})]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf123.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (512, 768)
op123.sizes = ([512], [768])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg90_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op123_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf118', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf123', get_index_3, getitem_1)
        return store_reduction
op122_op123_op125.snodes[2] =
op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 393216})]
op125.unmet_dependencies = 
    [   MemoryDep('buf118', c0, {c0: 393216}),
        MemoryDep('buf121', c0, {c0: 393216}),
        MemoryDep('buf122', c0, {c0: 512}),
        MemoryDep('buf123', c0, {c0: 512})]
op125.met_dependencies = 
    [   MemoryDep('arg90_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg91_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg92_1', c1, {c0: 512, c1: 768})]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf125.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op125.group.device = cuda:0
op125.group.iteration = (393216, 1)
op125.sizes = ([512, 768], [])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg90_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg91_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg92_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op125_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf118', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf122', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf123', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg91_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg92_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf125', get_index_7, add_3, None)
        return store


op126: ExternKernelSchedulerNode(ExternKernelOut)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op126.met_dependencies = [StarDep(name='arg93_1', mode=None)]
op126.outputs = [
    buf126: ExternKernelOut
    buf126.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf126.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op126.node.kernel = extern_kernels.mm


op127: ExternKernelSchedulerNode(ExternKernelOut)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op127.met_dependencies = [StarDep(name='arg95_1', mode=None)]
op127.outputs = [
    buf127: ExternKernelOut
    buf127.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf127.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op127.node.kernel = extern_kernels.mm


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 393216})]
op128.unmet_dependencies = [   MemoryDep('buf126', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op128.met_dependencies = [MemoryDep('arg94_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf128.users = [NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (393216, 1)
op128.sizes = ([2, 12, 256, 64], [])
buf126_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg94_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op128_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg94_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf128', get_index_2, add, None)
        return store


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 393216})]
op129.unmet_dependencies = [MemoryDep('buf127', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op129.met_dependencies = [MemoryDep('arg96_1', c1, {c0: 2, c1: 768})]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (393216, 1)
op129.sizes = ([2, 768, 256], [])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg96_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op129_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf129', get_index_2, add, None)
        return store


op130: ExternKernelSchedulerNode(ExternKernelOut)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf128', mode=None), StarDep(name='buf129', mode=None)]
op130.met_dependencies = []
op130.outputs = [
    buf130: ExternKernelOut
    buf130.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf130.users = [
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False),
    ]
]
op130.node.kernel = extern_kernels.bmm


op131_op132_op134: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op131_op132_op134.writes = 
    [   MemoryDep('buf131', c0, {c0: 6144}),
        MemoryDep('buf132', c0, {c0: 6144}),
        MemoryDep('buf134', c0, {c0: 1572864})]
op131_op132_op134.unmet_dependencies = [MemoryDep('buf130', c0, {c0: 1572864})]
op131_op132_op134.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op131_op132_op134.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf131.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
    ]
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf132.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf134.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op131_op132_op134.snodes[0] =
op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 6144})]
op131.unmet_dependencies = [MemoryDep('buf130', c0, {c0: 1572864})]
op131.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf131.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
    ]
]
op131.group.device = cuda:0
op131.group.iteration = (6144, 256)
op131.sizes = ([2, 3072], [256])
buf130_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op131_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf131', get_index_2, reduction)
        return store_reduction
op131_op132_op134.snodes[1] =
op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 6144})]
op132.unmet_dependencies = [MemoryDep('buf130', c0, {c0: 1572864}), MemoryDep('buf131', c0, {c0: 6144})]
op132.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf132.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (6144, 256)
op132.sizes = ([2, 3072], [256])
buf130_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf132_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op132_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf131', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf132', get_index_3, reduction)
        return store_reduction
op131_op132_op134.snodes[2] =
op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 1572864})]
op134.unmet_dependencies = 
    [   MemoryDep('buf130', c0, {c0: 1572864}),
        MemoryDep('buf131', c0, {c0: 6144}),
        MemoryDep('buf132', c0, {c0: 6144})]
op134.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf134.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (1572864, 1)
op134.sizes = ([2, 3072, 256], [])
buf130_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf132_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op134_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf131', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf132', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf134', get_index_4, truediv, None)
        return store


op133: ExternKernelSchedulerNode(ExternKernelOut)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op133.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op133.outputs = [
    buf133: ExternKernelOut
    buf133.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf133.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op133.node.kernel = extern_kernels.mm


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 393216})]
op135.unmet_dependencies = [   MemoryDep('buf133', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op135.met_dependencies = [MemoryDep('arg98_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (393216, 1)
op135.sizes = ([2, 12, 256, 64], [])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg98_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op135_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg98_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf135', get_index_2, add, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelOut)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf134', mode=None), StarDep(name='buf135', mode=None)]
op136.met_dependencies = []
op136.outputs = [
    buf136: ExternKernelOut
    buf136.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf136.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.node.kernel = extern_kernels.bmm


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 393216})]
op137.unmet_dependencies = [   MemoryDep('buf136', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op137.met_dependencies = []
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf137.users = [NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (393216, 1)
op137.sizes = ([2, 256, 12, 64], [])
buf136_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op137_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf137', get_index_1, load, None)
        return store


op138: ExternKernelSchedulerNode(ExternKernelOut)
op138.writes = [StarDep(name='buf138', mode=None)]
op138.unmet_dependencies = [StarDep(name='buf137', mode=None)]
op138.met_dependencies = [StarDep(name='arg99_1', mode=None)]
op138.outputs = [
    buf138: ExternKernelOut
    buf138.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf138.users = [
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op138.node.kernel = extern_kernels.mm


op139_op140_op142: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op139_op140_op142.writes = 
    [   MemoryDep('buf139', c0, {c0: 512}),
        MemoryDep('buf140', c0, {c0: 512}),
        MemoryDep('buf142', c0, {c0: 393216})]
op139_op140_op142.unmet_dependencies = [MemoryDep('buf125', c0, {c0: 393216}), MemoryDep('buf138', c0, {c0: 393216})]
op139_op140_op142.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg101_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg102_1', c1, {c0: 512, c1: 768})]
op139_op140_op142.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf139.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf140.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf142.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
    ]
]
op139_op140_op142.snodes[0] =
op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 512})]
op139.unmet_dependencies = [MemoryDep('buf125', c0, {c0: 393216}), MemoryDep('buf138', c0, {c0: 393216})]
op139.met_dependencies = [MemoryDep('arg100_1', c1, {c0: 512, c1: 768})]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf139.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op139.group.device = cuda:0
op139.group.iteration = (512, 768)
op139.sizes = ([512], [768])
buf138_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg100_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op139_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg100_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf125', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf139', get_index_3, getitem)
        return store_reduction
op139_op140_op142.snodes[1] =
op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 512})]
op140.unmet_dependencies = [MemoryDep('buf125', c0, {c0: 393216}), MemoryDep('buf138', c0, {c0: 393216})]
op140.met_dependencies = [MemoryDep('arg100_1', c1, {c0: 512, c1: 768})]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf140.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (512, 768)
op140.sizes = ([512], [768])
buf138_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg100_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf140_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op140_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg100_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf125', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf140', get_index_3, getitem_1)
        return store_reduction
op139_op140_op142.snodes[2] =
op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 393216})]
op142.unmet_dependencies = 
    [   MemoryDep('buf125', c0, {c0: 393216}),
        MemoryDep('buf138', c0, {c0: 393216}),
        MemoryDep('buf139', c0, {c0: 512}),
        MemoryDep('buf140', c0, {c0: 512})]
op142.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg101_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg102_1', c1, {c0: 512, c1: 768})]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf142.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
    ]
]
op142.group.device = cuda:0
op142.group.iteration = (393216, 1)
op142.sizes = ([512, 768], [])
buf138_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg100_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf140_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg101_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg102_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op142_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg100_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf125', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf139', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf140', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg101_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg102_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf142', get_index_7, add_3, None)
        return store


op143: ExternKernelSchedulerNode(ExternKernelOut)
op143.writes = [StarDep(name='buf143', mode=None)]
op143.unmet_dependencies = [StarDep(name='buf142', mode=None)]
op143.met_dependencies = [StarDep(name='arg103_1', mode=None)]
op143.outputs = [
    buf143: ExternKernelOut
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf143.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False)]
]
op143.node.kernel = extern_kernels.mm


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 1572864})]
op144.unmet_dependencies = [MemoryDep('buf143', c0, {c0: 1572864})]
op144.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 512, c1: 3072})]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (1572864, 1)
op144.sizes = ([512, 3072], [])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg104_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf144_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op144_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg104_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf143', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg104_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf144', get_index_4, mul_2, None)
        return store


op145: ExternKernelSchedulerNode(ExternKernelOut)
op145.writes = [StarDep(name='buf145', mode=None)]
op145.unmet_dependencies = [StarDep(name='buf144', mode=None)]
op145.met_dependencies = [StarDep(name='arg105_1', mode=None)]
op145.outputs = [
    buf145: ExternKernelOut
    buf145.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf145.users = [
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
    ]
]
op145.node.kernel = extern_kernels.mm


op146_op147_op149: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op146_op147_op149.writes = 
    [   MemoryDep('buf146', c0, {c0: 512}),
        MemoryDep('buf147', c0, {c0: 512}),
        MemoryDep('buf149', c0, {c0: 393216})]
op146_op147_op149.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 393216}), MemoryDep('buf145', c0, {c0: 393216})]
op146_op147_op149.met_dependencies = 
    [   MemoryDep('arg106_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg107_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg108_1', c1, {c0: 512, c1: 768})]
op146_op147_op149.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf146.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf147.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf149.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
    ]
]
op146_op147_op149.snodes[0] =
op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 512})]
op146.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 393216}), MemoryDep('buf145', c0, {c0: 393216})]
op146.met_dependencies = [MemoryDep('arg106_1', c1, {c0: 512, c1: 768})]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf146.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (512, 768)
op146.sizes = ([512], [768])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg106_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op146_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf142', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf146', get_index_3, getitem)
        return store_reduction
op146_op147_op149.snodes[1] =
op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 512})]
op147.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 393216}), MemoryDep('buf145', c0, {c0: 393216})]
op147.met_dependencies = [MemoryDep('arg106_1', c1, {c0: 512, c1: 768})]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf147.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (512, 768)
op147.sizes = ([512], [768])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg106_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf147_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op147_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf142', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf147', get_index_3, getitem_1)
        return store_reduction
op146_op147_op149.snodes[2] =
op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 393216})]
op149.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 393216}),
        MemoryDep('buf145', c0, {c0: 393216}),
        MemoryDep('buf146', c0, {c0: 512}),
        MemoryDep('buf147', c0, {c0: 512})]
op149.met_dependencies = 
    [   MemoryDep('arg106_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg107_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg108_1', c1, {c0: 512, c1: 768})]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf149.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
    ]
]
op149.group.device = cuda:0
op149.group.iteration = (393216, 1)
op149.sizes = ([512, 768], [])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg106_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf147_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg107_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg108_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op149_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf142', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf146', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf147', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg107_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg108_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf149', get_index_7, add_3, None)
        return store


op150: ExternKernelSchedulerNode(ExternKernelOut)
op150.writes = [StarDep(name='buf150', mode=None)]
op150.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op150.met_dependencies = [StarDep(name='arg109_1', mode=None)]
op150.outputs = [
    buf150: ExternKernelOut
    buf150.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf150.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op150.node.kernel = extern_kernels.mm


op151: ExternKernelSchedulerNode(ExternKernelOut)
op151.writes = [StarDep(name='buf151', mode=None)]
op151.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op151.met_dependencies = [StarDep(name='arg111_1', mode=None)]
op151.outputs = [
    buf151: ExternKernelOut
    buf151.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf151.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op151.node.kernel = extern_kernels.mm


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 393216})]
op152.unmet_dependencies = [   MemoryDep('buf150', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op152.met_dependencies = [MemoryDep('arg110_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (393216, 1)
op152.sizes = ([2, 12, 256, 64], [])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg110_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op152_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg110_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf152', get_index_2, add, None)
        return store


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 393216})]
op153.unmet_dependencies = [MemoryDep('buf151', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op153.met_dependencies = [MemoryDep('arg112_1', c1, {c0: 2, c1: 768})]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf153.users = [NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (393216, 1)
op153.sizes = ([2, 768, 256], [])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg112_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op153_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg112_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf153', get_index_2, add, None)
        return store


op154: ExternKernelSchedulerNode(ExternKernelOut)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf152', mode=None), StarDep(name='buf153', mode=None)]
op154.met_dependencies = []
op154.outputs = [
    buf154: ExternKernelOut
    buf154.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf154.users = [
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False),
    ]
]
op154.node.kernel = extern_kernels.bmm


op155_op156_op158: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op155_op156_op158.writes = 
    [   MemoryDep('buf155', c0, {c0: 6144}),
        MemoryDep('buf156', c0, {c0: 6144}),
        MemoryDep('buf158', c0, {c0: 1572864})]
op155_op156_op158.unmet_dependencies = [MemoryDep('buf154', c0, {c0: 1572864})]
op155_op156_op158.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op155_op156_op158.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf155.users = [
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
    ]
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf156.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op155_op156_op158.snodes[0] =
op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 6144})]
op155.unmet_dependencies = [MemoryDep('buf154', c0, {c0: 1572864})]
op155.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf155.users = [
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
    ]
]
op155.group.device = cuda:0
op155.group.iteration = (6144, 256)
op155.sizes = ([2, 3072], [256])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op155_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf155', get_index_2, reduction)
        return store_reduction
op155_op156_op158.snodes[1] =
op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 6144})]
op156.unmet_dependencies = [MemoryDep('buf154', c0, {c0: 1572864}), MemoryDep('buf155', c0, {c0: 6144})]
op156.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf156.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (6144, 256)
op156.sizes = ([2, 3072], [256])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op156_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf155', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf156', get_index_3, reduction)
        return store_reduction
op155_op156_op158.snodes[2] =
op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 1572864})]
op158.unmet_dependencies = 
    [   MemoryDep('buf154', c0, {c0: 1572864}),
        MemoryDep('buf155', c0, {c0: 6144}),
        MemoryDep('buf156', c0, {c0: 6144})]
op158.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (1572864, 1)
op158.sizes = ([2, 3072, 256], [])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op158_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf155', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf156', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf158', get_index_4, truediv, None)
        return store


op157: ExternKernelSchedulerNode(ExternKernelOut)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op157.met_dependencies = [StarDep(name='arg113_1', mode=None)]
op157.outputs = [
    buf157: ExternKernelOut
    buf157.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf157.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op157.node.kernel = extern_kernels.mm


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 393216})]
op159.unmet_dependencies = [   MemoryDep('buf157', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op159.met_dependencies = [MemoryDep('arg114_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (393216, 1)
op159.sizes = ([2, 12, 256, 64], [])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg114_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op159_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg114_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf159', get_index_2, add, None)
        return store


op160: ExternKernelSchedulerNode(ExternKernelOut)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf158', mode=None), StarDep(name='buf159', mode=None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: ExternKernelOut
    buf160.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf160.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op160.node.kernel = extern_kernels.bmm


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 393216})]
op161.unmet_dependencies = [   MemoryDep('buf160', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op161.met_dependencies = []
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf161.users = [NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (393216, 1)
op161.sizes = ([2, 256, 12, 64], [])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op161_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf161', get_index_1, load, None)
        return store


op162: ExternKernelSchedulerNode(ExternKernelOut)
op162.writes = [StarDep(name='buf162', mode=None)]
op162.unmet_dependencies = [StarDep(name='buf161', mode=None)]
op162.met_dependencies = [StarDep(name='arg115_1', mode=None)]
op162.outputs = [
    buf162: ExternKernelOut
    buf162.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf162.users = [
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
    ]
]
op162.node.kernel = extern_kernels.mm


op163_op164_op166: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op163_op164_op166.writes = 
    [   MemoryDep('buf163', c0, {c0: 512}),
        MemoryDep('buf164', c0, {c0: 512}),
        MemoryDep('buf166', c0, {c0: 393216})]
op163_op164_op166.unmet_dependencies = [MemoryDep('buf149', c0, {c0: 393216}), MemoryDep('buf162', c0, {c0: 393216})]
op163_op164_op166.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg117_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg118_1', c1, {c0: 512, c1: 768})]
op163_op164_op166.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf163.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf164.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf166.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False),
    ]
]
op163_op164_op166.snodes[0] =
op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 512})]
op163.unmet_dependencies = [MemoryDep('buf149', c0, {c0: 393216}), MemoryDep('buf162', c0, {c0: 393216})]
op163.met_dependencies = [MemoryDep('arg116_1', c1, {c0: 512, c1: 768})]
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf163.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (512, 768)
op163.sizes = ([512], [768])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg116_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op163_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg116_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf149', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf163', get_index_3, getitem)
        return store_reduction
op163_op164_op166.snodes[1] =
op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 512})]
op164.unmet_dependencies = [MemoryDep('buf149', c0, {c0: 393216}), MemoryDep('buf162', c0, {c0: 393216})]
op164.met_dependencies = [MemoryDep('arg116_1', c1, {c0: 512, c1: 768})]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf164.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (512, 768)
op164.sizes = ([512], [768])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg116_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op164_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg116_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf149', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf164', get_index_3, getitem_1)
        return store_reduction
op163_op164_op166.snodes[2] =
op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 393216})]
op166.unmet_dependencies = 
    [   MemoryDep('buf149', c0, {c0: 393216}),
        MemoryDep('buf162', c0, {c0: 393216}),
        MemoryDep('buf163', c0, {c0: 512}),
        MemoryDep('buf164', c0, {c0: 512})]
op166.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg117_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg118_1', c1, {c0: 512, c1: 768})]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf166.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False),
    ]
]
op166.group.device = cuda:0
op166.group.iteration = (393216, 1)
op166.sizes = ([512, 768], [])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg116_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg117_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg118_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op166_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg116_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf149', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf163', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf164', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg117_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg118_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf166', get_index_7, add_3, None)
        return store


op167: ExternKernelSchedulerNode(ExternKernelOut)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf166', mode=None)]
op167.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op167.outputs = [
    buf167: ExternKernelOut
    buf167.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf167.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False)]
]
op167.node.kernel = extern_kernels.mm


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 1572864})]
op168.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 1572864})]
op168.met_dependencies = [MemoryDep('arg120_1', c1, {c0: 512, c1: 3072})]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf168.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (1572864, 1)
op168.sizes = ([512, 3072], [])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg120_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf168_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op168_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg120_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf167', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg120_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf168', get_index_4, mul_2, None)
        return store


op169: ExternKernelSchedulerNode(ExternKernelOut)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf168', mode=None)]
op169.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op169.outputs = [
    buf169: ExternKernelOut
    buf169.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf169.users = [
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False),
    ]
]
op169.node.kernel = extern_kernels.mm


op170_op171_op173: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op170_op171_op173.writes = 
    [   MemoryDep('buf170', c0, {c0: 512}),
        MemoryDep('buf171', c0, {c0: 512}),
        MemoryDep('buf173', c0, {c0: 393216})]
op170_op171_op173.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 393216}), MemoryDep('buf169', c0, {c0: 393216})]
op170_op171_op173.met_dependencies = 
    [   MemoryDep('arg122_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg123_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg124_1', c1, {c0: 512, c1: 768})]
op170_op171_op173.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf170.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf171.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf173.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=True, is_weak=False),
    ]
]
op170_op171_op173.snodes[0] =
op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 512})]
op170.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 393216}), MemoryDep('buf169', c0, {c0: 393216})]
op170.met_dependencies = [MemoryDep('arg122_1', c1, {c0: 512, c1: 768})]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf170.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (512, 768)
op170.sizes = ([512], [768])
buf169_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg122_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op170_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf166', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf170', get_index_3, getitem)
        return store_reduction
op170_op171_op173.snodes[1] =
op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 512})]
op171.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 393216}), MemoryDep('buf169', c0, {c0: 393216})]
op171.met_dependencies = [MemoryDep('arg122_1', c1, {c0: 512, c1: 768})]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf171.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (512, 768)
op171.sizes = ([512], [768])
buf169_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg122_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op171_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf166', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf171', get_index_3, getitem_1)
        return store_reduction
op170_op171_op173.snodes[2] =
op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 393216})]
op173.unmet_dependencies = 
    [   MemoryDep('buf166', c0, {c0: 393216}),
        MemoryDep('buf169', c0, {c0: 393216}),
        MemoryDep('buf170', c0, {c0: 512}),
        MemoryDep('buf171', c0, {c0: 512})]
op173.met_dependencies = 
    [   MemoryDep('arg122_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg123_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg124_1', c1, {c0: 512, c1: 768})]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf173.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=True, is_weak=False),
    ]
]
op173.group.device = cuda:0
op173.group.iteration = (393216, 1)
op173.sizes = ([512, 768], [])
buf169_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg122_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg123_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg124_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op173_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf166', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf170', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf171', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg123_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg124_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf173', get_index_7, add_3, None)
        return store


op174: ExternKernelSchedulerNode(ExternKernelOut)
op174.writes = [StarDep(name='buf174', mode=None)]
op174.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op174.met_dependencies = [StarDep(name='arg125_1', mode=None)]
op174.outputs = [
    buf174: ExternKernelOut
    buf174.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf174.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op174.node.kernel = extern_kernels.mm


op175: ExternKernelSchedulerNode(ExternKernelOut)
op175.writes = [StarDep(name='buf175', mode=None)]
op175.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op175.met_dependencies = [StarDep(name='arg127_1', mode=None)]
op175.outputs = [
    buf175: ExternKernelOut
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf175.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op175.node.kernel = extern_kernels.mm


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 393216})]
op176.unmet_dependencies = [   MemoryDep('buf174', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op176.met_dependencies = [MemoryDep('arg126_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (393216, 1)
op176.sizes = ([2, 12, 256, 64], [])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg126_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op176_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf176', get_index_2, add, None)
        return store


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 393216})]
op177.unmet_dependencies = [MemoryDep('buf175', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op177.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 2, c1: 768})]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (393216, 1)
op177.sizes = ([2, 768, 256], [])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg128_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf177_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op177_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg128_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf177', get_index_2, add, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf176', mode=None), StarDep(name='buf177', mode=None)]
op178.met_dependencies = []
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf178.users = [
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False),
    ]
]
op178.node.kernel = extern_kernels.bmm


op179_op180_op182: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op179_op180_op182.writes = 
    [   MemoryDep('buf179', c0, {c0: 6144}),
        MemoryDep('buf180', c0, {c0: 6144}),
        MemoryDep('buf182', c0, {c0: 1572864})]
op179_op180_op182.unmet_dependencies = [MemoryDep('buf178', c0, {c0: 1572864})]
op179_op180_op182.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op179_op180_op182.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
    ]
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf180.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf182.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op179_op180_op182.snodes[0] =
op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 6144})]
op179.unmet_dependencies = [MemoryDep('buf178', c0, {c0: 1572864})]
op179.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
    ]
]
op179.group.device = cuda:0
op179.group.iteration = (6144, 256)
op179.sizes = ([2, 3072], [256])
buf178_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op179_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf179', get_index_2, reduction)
        return store_reduction
op179_op180_op182.snodes[1] =
op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 6144})]
op180.unmet_dependencies = [MemoryDep('buf178', c0, {c0: 1572864}), MemoryDep('buf179', c0, {c0: 6144})]
op180.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf180.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (6144, 256)
op180.sizes = ([2, 3072], [256])
buf178_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op180_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf179', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf180', get_index_3, reduction)
        return store_reduction
op179_op180_op182.snodes[2] =
op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 1572864})]
op182.unmet_dependencies = 
    [   MemoryDep('buf178', c0, {c0: 1572864}),
        MemoryDep('buf179', c0, {c0: 6144}),
        MemoryDep('buf180', c0, {c0: 6144})]
op182.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf182.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (1572864, 1)
op182.sizes = ([2, 3072, 256], [])
buf178_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf182_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op182_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf179', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf180', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf182', get_index_4, truediv, None)
        return store


op181: ExternKernelSchedulerNode(ExternKernelOut)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op181.met_dependencies = [StarDep(name='arg129_1', mode=None)]
op181.outputs = [
    buf181: ExternKernelOut
    buf181.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf181.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op181.node.kernel = extern_kernels.mm


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 393216})]
op183.unmet_dependencies = [   MemoryDep('buf181', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op183.met_dependencies = [MemoryDep('arg130_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf183.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (393216, 1)
op183.sizes = ([2, 12, 256, 64], [])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg130_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op183_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg130_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf183', get_index_2, add, None)
        return store


op184: ExternKernelSchedulerNode(ExternKernelOut)
op184.writes = [StarDep(name='buf184', mode=None)]
op184.unmet_dependencies = [StarDep(name='buf182', mode=None), StarDep(name='buf183', mode=None)]
op184.met_dependencies = []
op184.outputs = [
    buf184: ExternKernelOut
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf184.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op184.node.kernel = extern_kernels.bmm


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 393216})]
op185.unmet_dependencies = [   MemoryDep('buf184', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op185.met_dependencies = []
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (393216, 1)
op185.sizes = ([2, 256, 12, 64], [])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op185_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf185', get_index_1, load, None)
        return store


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = [StarDep(name='arg131_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf186.users = [
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=True, is_weak=False),
    ]
]
op186.node.kernel = extern_kernels.mm


op187_op188_op190: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op187_op188_op190.writes = 
    [   MemoryDep('buf187', c0, {c0: 512}),
        MemoryDep('buf188', c0, {c0: 512}),
        MemoryDep('buf190', c0, {c0: 393216})]
op187_op188_op190.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 393216}), MemoryDep('buf186', c0, {c0: 393216})]
op187_op188_op190.met_dependencies = 
    [   MemoryDep('arg132_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg133_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg134_1', c1, {c0: 512, c1: 768})]
op187_op188_op190.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf187.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf188.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf190.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
    ]
]
op187_op188_op190.snodes[0] =
op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 512})]
op187.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 393216}), MemoryDep('buf186', c0, {c0: 393216})]
op187.met_dependencies = [MemoryDep('arg132_1', c1, {c0: 512, c1: 768})]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf187.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (512, 768)
op187.sizes = ([512], [768])
buf186_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg132_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op187_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg132_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf173', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf187', get_index_3, getitem)
        return store_reduction
op187_op188_op190.snodes[1] =
op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 512})]
op188.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 393216}), MemoryDep('buf186', c0, {c0: 393216})]
op188.met_dependencies = [MemoryDep('arg132_1', c1, {c0: 512, c1: 768})]
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf188.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (512, 768)
op188.sizes = ([512], [768])
buf186_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg132_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op188_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg132_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf173', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf188', get_index_3, getitem_1)
        return store_reduction
op187_op188_op190.snodes[2] =
op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 393216})]
op190.unmet_dependencies = 
    [   MemoryDep('buf173', c0, {c0: 393216}),
        MemoryDep('buf186', c0, {c0: 393216}),
        MemoryDep('buf187', c0, {c0: 512}),
        MemoryDep('buf188', c0, {c0: 512})]
op190.met_dependencies = 
    [   MemoryDep('arg132_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg133_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg134_1', c1, {c0: 512, c1: 768})]
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf190.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
    ]
]
op190.group.device = cuda:0
op190.group.iteration = (393216, 1)
op190.sizes = ([512, 768], [])
buf186_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg132_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg133_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg134_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op190_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg132_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf173', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf187', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf188', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg133_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg134_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf190', get_index_7, add_3, None)
        return store


op191: ExternKernelSchedulerNode(ExternKernelOut)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op191.met_dependencies = [StarDep(name='arg135_1', mode=None)]
op191.outputs = [
    buf191: ExternKernelOut
    buf191.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf191.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False)]
]
op191.node.kernel = extern_kernels.mm


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 1572864})]
op192.unmet_dependencies = [MemoryDep('buf191', c0, {c0: 1572864})]
op192.met_dependencies = [MemoryDep('arg136_1', c1, {c0: 512, c1: 3072})]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (1572864, 1)
op192.sizes = ([512, 3072], [])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg136_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op192_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf191', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg136_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf192', get_index_4, mul_2, None)
        return store


op193: ExternKernelSchedulerNode(ExternKernelOut)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf192', mode=None)]
op193.met_dependencies = [StarDep(name='arg137_1', mode=None)]
op193.outputs = [
    buf193: ExternKernelOut
    buf193.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf193.users = [
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
    ]
]
op193.node.kernel = extern_kernels.mm


op194_op195_op197: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op194_op195_op197.writes = 
    [   MemoryDep('buf194', c0, {c0: 512}),
        MemoryDep('buf195', c0, {c0: 512}),
        MemoryDep('buf197', c0, {c0: 393216})]
op194_op195_op197.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 393216}), MemoryDep('buf193', c0, {c0: 393216})]
op194_op195_op197.met_dependencies = 
    [   MemoryDep('arg138_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg139_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg140_1', c1, {c0: 512, c1: 768})]
op194_op195_op197.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf194.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf195.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf197.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False),
    ]
]
op194_op195_op197.snodes[0] =
op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 512})]
op194.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 393216}), MemoryDep('buf193', c0, {c0: 393216})]
op194.met_dependencies = [MemoryDep('arg138_1', c1, {c0: 512, c1: 768})]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf194.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (512, 768)
op194.sizes = ([512], [768])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg138_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op194_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg138_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf190', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf194', get_index_3, getitem)
        return store_reduction
op194_op195_op197.snodes[1] =
op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 512})]
op195.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 393216}), MemoryDep('buf193', c0, {c0: 393216})]
op195.met_dependencies = [MemoryDep('arg138_1', c1, {c0: 512, c1: 768})]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf195.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (512, 768)
op195.sizes = ([512], [768])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg138_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf195_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op195_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg138_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf190', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf195', get_index_3, getitem_1)
        return store_reduction
op194_op195_op197.snodes[2] =
op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 393216})]
op197.unmet_dependencies = 
    [   MemoryDep('buf190', c0, {c0: 393216}),
        MemoryDep('buf193', c0, {c0: 393216}),
        MemoryDep('buf194', c0, {c0: 512}),
        MemoryDep('buf195', c0, {c0: 512})]
op197.met_dependencies = 
    [   MemoryDep('arg138_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg139_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg140_1', c1, {c0: 512, c1: 768})]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf197.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False),
    ]
]
op197.group.device = cuda:0
op197.group.iteration = (393216, 1)
op197.sizes = ([512, 768], [])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg138_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf195_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg139_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg140_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op197_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg138_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf190', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf194', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf195', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg139_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg140_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf197', get_index_7, add_3, None)
        return store


op198: ExternKernelSchedulerNode(ExternKernelOut)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op198.met_dependencies = [StarDep(name='arg141_1', mode=None)]
op198.outputs = [
    buf198: ExternKernelOut
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf198.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op198.node.kernel = extern_kernels.mm


op199: ExternKernelSchedulerNode(ExternKernelOut)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op199.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelOut
    buf199.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf199.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op199.node.kernel = extern_kernels.mm


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 393216})]
op200.unmet_dependencies = [   MemoryDep('buf198', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op200.met_dependencies = [MemoryDep('arg142_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (393216, 1)
op200.sizes = ([2, 12, 256, 64], [])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg142_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op200_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg142_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf200', get_index_2, add, None)
        return store


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 393216})]
op201.unmet_dependencies = [MemoryDep('buf199', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op201.met_dependencies = [MemoryDep('arg144_1', c1, {c0: 2, c1: 768})]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (393216, 1)
op201.sizes = ([2, 768, 256], [])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg144_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op201_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg144_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf201', get_index_2, add, None)
        return store


op202: ExternKernelSchedulerNode(ExternKernelOut)
op202.writes = [StarDep(name='buf202', mode=None)]
op202.unmet_dependencies = [StarDep(name='buf200', mode=None), StarDep(name='buf201', mode=None)]
op202.met_dependencies = []
op202.outputs = [
    buf202: ExternKernelOut
    buf202.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf202.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
    ]
]
op202.node.kernel = extern_kernels.bmm


op203_op204_op206: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op203_op204_op206.writes = 
    [   MemoryDep('buf203', c0, {c0: 6144}),
        MemoryDep('buf204', c0, {c0: 6144}),
        MemoryDep('buf206', c0, {c0: 1572864})]
op203_op204_op206.unmet_dependencies = [MemoryDep('buf202', c0, {c0: 1572864})]
op203_op204_op206.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op203_op204_op206.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf203.users = [
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
    ]
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf204.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op203_op204_op206.snodes[0] =
op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 6144})]
op203.unmet_dependencies = [MemoryDep('buf202', c0, {c0: 1572864})]
op203.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf203.users = [
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
    ]
]
op203.group.device = cuda:0
op203.group.iteration = (6144, 256)
op203.sizes = ([2, 3072], [256])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op203_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf203', get_index_2, reduction)
        return store_reduction
op203_op204_op206.snodes[1] =
op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 6144})]
op204.unmet_dependencies = [MemoryDep('buf202', c0, {c0: 1572864}), MemoryDep('buf203', c0, {c0: 6144})]
op204.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf204.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (6144, 256)
op204.sizes = ([2, 3072], [256])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf204_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op204_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf203', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf204', get_index_3, reduction)
        return store_reduction
op203_op204_op206.snodes[2] =
op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 1572864})]
op206.unmet_dependencies = 
    [   MemoryDep('buf202', c0, {c0: 1572864}),
        MemoryDep('buf203', c0, {c0: 6144}),
        MemoryDep('buf204', c0, {c0: 6144})]
op206.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (1572864, 1)
op206.sizes = ([2, 3072, 256], [])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf204_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op206_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf203', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf204', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf206', get_index_4, truediv, None)
        return store


op205: ExternKernelSchedulerNode(ExternKernelOut)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op205.met_dependencies = [StarDep(name='arg145_1', mode=None)]
op205.outputs = [
    buf205: ExternKernelOut
    buf205.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf205.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op205.node.kernel = extern_kernels.mm


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 393216})]
op207.unmet_dependencies = [   MemoryDep('buf205', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op207.met_dependencies = [MemoryDep('arg146_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (393216, 1)
op207.sizes = ([2, 12, 256, 64], [])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg146_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op207_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg146_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf207', get_index_2, add, None)
        return store


op208: ExternKernelSchedulerNode(ExternKernelOut)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = [StarDep(name='buf206', mode=None), StarDep(name='buf207', mode=None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: ExternKernelOut
    buf208.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf208.users = [NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op208.node.kernel = extern_kernels.bmm


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 393216})]
op209.unmet_dependencies = [   MemoryDep('buf208', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op209.met_dependencies = []
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (393216, 1)
op209.sizes = ([2, 256, 12, 64], [])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op209_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf209', get_index_1, load, None)
        return store


op210: ExternKernelSchedulerNode(ExternKernelOut)
op210.writes = [StarDep(name='buf210', mode=None)]
op210.unmet_dependencies = [StarDep(name='buf209', mode=None)]
op210.met_dependencies = [StarDep(name='arg147_1', mode=None)]
op210.outputs = [
    buf210: ExternKernelOut
    buf210.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf210.users = [
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False),
    ]
]
op210.node.kernel = extern_kernels.mm


op211_op212_op214: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op211_op212_op214.writes = 
    [   MemoryDep('buf211', c0, {c0: 512}),
        MemoryDep('buf212', c0, {c0: 512}),
        MemoryDep('buf214', c0, {c0: 393216})]
op211_op212_op214.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 393216}), MemoryDep('buf210', c0, {c0: 393216})]
op211_op212_op214.met_dependencies = 
    [   MemoryDep('arg148_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg149_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg150_1', c1, {c0: 512, c1: 768})]
op211_op212_op214.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf211.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf212.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf214.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
    ]
]
op211_op212_op214.snodes[0] =
op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 512})]
op211.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 393216}), MemoryDep('buf210', c0, {c0: 393216})]
op211.met_dependencies = [MemoryDep('arg148_1', c1, {c0: 512, c1: 768})]
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf211.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (512, 768)
op211.sizes = ([512], [768])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg148_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op211_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg148_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf197', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf211', get_index_3, getitem)
        return store_reduction
op211_op212_op214.snodes[1] =
op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 512})]
op212.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 393216}), MemoryDep('buf210', c0, {c0: 393216})]
op212.met_dependencies = [MemoryDep('arg148_1', c1, {c0: 512, c1: 768})]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf212.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (512, 768)
op212.sizes = ([512], [768])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg148_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op212_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg148_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf197', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf212', get_index_3, getitem_1)
        return store_reduction
op211_op212_op214.snodes[2] =
op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 393216})]
op214.unmet_dependencies = 
    [   MemoryDep('buf197', c0, {c0: 393216}),
        MemoryDep('buf210', c0, {c0: 393216}),
        MemoryDep('buf211', c0, {c0: 512}),
        MemoryDep('buf212', c0, {c0: 512})]
op214.met_dependencies = 
    [   MemoryDep('arg148_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg149_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg150_1', c1, {c0: 512, c1: 768})]
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf214.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
    ]
]
op214.group.device = cuda:0
op214.group.iteration = (393216, 1)
op214.sizes = ([512, 768], [])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg148_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg149_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg150_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op214_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg148_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf197', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf211', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf212', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg149_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg150_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf214', get_index_7, add_3, None)
        return store


op215: ExternKernelSchedulerNode(ExternKernelOut)
op215.writes = [StarDep(name='buf215', mode=None)]
op215.unmet_dependencies = [StarDep(name='buf214', mode=None)]
op215.met_dependencies = [StarDep(name='arg151_1', mode=None)]
op215.outputs = [
    buf215: ExternKernelOut
    buf215.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf215.users = [NodeUser(node=SchedulerNode(name='op216'), can_inplace=True, is_weak=False)]
]
op215.node.kernel = extern_kernels.mm


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 1572864})]
op216.unmet_dependencies = [MemoryDep('buf215', c0, {c0: 1572864})]
op216.met_dependencies = [MemoryDep('arg152_1', c1, {c0: 512, c1: 3072})]
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf216.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (1572864, 1)
op216.sizes = ([512, 3072], [])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg152_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op216_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf215', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg152_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf215', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg152_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf216', get_index_4, mul_2, None)
        return store


op217: ExternKernelSchedulerNode(ExternKernelOut)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf216', mode=None)]
op217.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op217.outputs = [
    buf217: ExternKernelOut
    buf217.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
    ]
]
op217.node.kernel = extern_kernels.mm


op218_op219_op221: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op218_op219_op221.writes = 
    [   MemoryDep('buf218', c0, {c0: 512}),
        MemoryDep('buf219', c0, {c0: 512}),
        MemoryDep('buf221', c0, {c0: 393216})]
op218_op219_op221.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 393216}), MemoryDep('buf217', c0, {c0: 393216})]
op218_op219_op221.met_dependencies = 
    [   MemoryDep('arg154_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg155_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg156_1', c1, {c0: 512, c1: 768})]
op218_op219_op221.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf218.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf219.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf221.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False),
    ]
]
op218_op219_op221.snodes[0] =
op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 512})]
op218.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 393216}), MemoryDep('buf217', c0, {c0: 393216})]
op218.met_dependencies = [MemoryDep('arg154_1', c1, {c0: 512, c1: 768})]
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf218.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (512, 768)
op218.sizes = ([512], [768])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg154_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op218_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf214', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf218', get_index_3, getitem)
        return store_reduction
op218_op219_op221.snodes[1] =
op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 512})]
op219.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 393216}), MemoryDep('buf217', c0, {c0: 393216})]
op219.met_dependencies = [MemoryDep('arg154_1', c1, {c0: 512, c1: 768})]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf219.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (512, 768)
op219.sizes = ([512], [768])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg154_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf219_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op219_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf214', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf219', get_index_3, getitem_1)
        return store_reduction
op218_op219_op221.snodes[2] =
op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 393216})]
op221.unmet_dependencies = 
    [   MemoryDep('buf214', c0, {c0: 393216}),
        MemoryDep('buf217', c0, {c0: 393216}),
        MemoryDep('buf218', c0, {c0: 512}),
        MemoryDep('buf219', c0, {c0: 512})]
op221.met_dependencies = 
    [   MemoryDep('arg154_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg155_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg156_1', c1, {c0: 512, c1: 768})]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf221.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False),
    ]
]
op221.group.device = cuda:0
op221.group.iteration = (393216, 1)
op221.sizes = ([512, 768], [])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg154_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf219_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg155_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg156_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf221_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op221_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf214', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf218', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf219', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg155_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg156_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf221', get_index_7, add_3, None)
        return store


op222: ExternKernelSchedulerNode(ExternKernelOut)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='arg157_1', mode=None)]
op222.outputs = [
    buf222: ExternKernelOut
    buf222.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf222.users = [NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op222.node.kernel = extern_kernels.mm


op223: ExternKernelSchedulerNode(ExternKernelOut)
op223.writes = [StarDep(name='buf223', mode=None)]
op223.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op223.met_dependencies = [StarDep(name='arg159_1', mode=None)]
op223.outputs = [
    buf223: ExternKernelOut
    buf223.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf223.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op223.node.kernel = extern_kernels.mm


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 393216})]
op224.unmet_dependencies = [   MemoryDep('buf222', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op224.met_dependencies = [MemoryDep('arg158_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (393216, 1)
op224.sizes = ([2, 12, 256, 64], [])
buf222_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg158_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op224_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg158_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf224', get_index_2, add, None)
        return store


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 393216})]
op225.unmet_dependencies = [MemoryDep('buf223', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op225.met_dependencies = [MemoryDep('arg160_1', c1, {c0: 2, c1: 768})]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf225.users = [NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (393216, 1)
op225.sizes = ([2, 768, 256], [])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg160_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op225_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg160_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf225', get_index_2, add, None)
        return store


op226: ExternKernelSchedulerNode(ExternKernelOut)
op226.writes = [StarDep(name='buf226', mode=None)]
op226.unmet_dependencies = [StarDep(name='buf224', mode=None), StarDep(name='buf225', mode=None)]
op226.met_dependencies = []
op226.outputs = [
    buf226: ExternKernelOut
    buf226.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf226.users = [
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=True, is_weak=False),
    ]
]
op226.node.kernel = extern_kernels.bmm


op227_op228_op230: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op227_op228_op230.writes = 
    [   MemoryDep('buf227', c0, {c0: 6144}),
        MemoryDep('buf228', c0, {c0: 6144}),
        MemoryDep('buf230', c0, {c0: 1572864})]
op227_op228_op230.unmet_dependencies = [MemoryDep('buf226', c0, {c0: 1572864})]
op227_op228_op230.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op227_op228_op230.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
    ]
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf228.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf230.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op227_op228_op230.snodes[0] =
op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 6144})]
op227.unmet_dependencies = [MemoryDep('buf226', c0, {c0: 1572864})]
op227.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
    ]
]
op227.group.device = cuda:0
op227.group.iteration = (6144, 256)
op227.sizes = ([2, 3072], [256])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op227_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf227', get_index_2, reduction)
        return store_reduction
op227_op228_op230.snodes[1] =
op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 6144})]
op228.unmet_dependencies = [MemoryDep('buf226', c0, {c0: 1572864}), MemoryDep('buf227', c0, {c0: 6144})]
op228.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf228.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (6144, 256)
op228.sizes = ([2, 3072], [256])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op228_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf227', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf228', get_index_3, reduction)
        return store_reduction
op227_op228_op230.snodes[2] =
op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 1572864})]
op230.unmet_dependencies = 
    [   MemoryDep('buf226', c0, {c0: 1572864}),
        MemoryDep('buf227', c0, {c0: 6144}),
        MemoryDep('buf228', c0, {c0: 6144})]
op230.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf230.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (1572864, 1)
op230.sizes = ([2, 3072, 256], [])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op230_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf227', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf228', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf230', get_index_4, truediv, None)
        return store


op229: ExternKernelSchedulerNode(ExternKernelOut)
op229.writes = [StarDep(name='buf229', mode=None)]
op229.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op229.met_dependencies = [StarDep(name='arg161_1', mode=None)]
op229.outputs = [
    buf229: ExternKernelOut
    buf229.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf229.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op229.node.kernel = extern_kernels.mm


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 393216})]
op231.unmet_dependencies = [   MemoryDep('buf229', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op231.met_dependencies = [MemoryDep('arg162_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (393216, 1)
op231.sizes = ([2, 12, 256, 64], [])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg162_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op231_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg162_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf231', get_index_2, add, None)
        return store


op232: ExternKernelSchedulerNode(ExternKernelOut)
op232.writes = [StarDep(name='buf232', mode=None)]
op232.unmet_dependencies = [StarDep(name='buf230', mode=None), StarDep(name='buf231', mode=None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: ExternKernelOut
    buf232.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf232.users = [NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.node.kernel = extern_kernels.bmm


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 393216})]
op233.unmet_dependencies = [   MemoryDep('buf232', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op233.met_dependencies = []
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf233.users = [NodeUser(node=ExternKernelSchedulerNode(name='op234'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (393216, 1)
op233.sizes = ([2, 256, 12, 64], [])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op233_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf233', get_index_1, load, None)
        return store


op234: ExternKernelSchedulerNode(ExternKernelOut)
op234.writes = [StarDep(name='buf234', mode=None)]
op234.unmet_dependencies = [StarDep(name='buf233', mode=None)]
op234.met_dependencies = [StarDep(name='arg163_1', mode=None)]
op234.outputs = [
    buf234: ExternKernelOut
    buf234.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf234.users = [
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False),
    ]
]
op234.node.kernel = extern_kernels.mm


op235_op236_op238: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op235_op236_op238.writes = 
    [   MemoryDep('buf235', c0, {c0: 512}),
        MemoryDep('buf236', c0, {c0: 512}),
        MemoryDep('buf238', c0, {c0: 393216})]
op235_op236_op238.unmet_dependencies = [MemoryDep('buf221', c0, {c0: 393216}), MemoryDep('buf234', c0, {c0: 393216})]
op235_op236_op238.met_dependencies = 
    [   MemoryDep('arg164_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg165_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg166_1', c1, {c0: 512, c1: 768})]
op235_op236_op238.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf235.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf236.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf238.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False),
    ]
]
op235_op236_op238.snodes[0] =
op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 512})]
op235.unmet_dependencies = [MemoryDep('buf221', c0, {c0: 393216}), MemoryDep('buf234', c0, {c0: 393216})]
op235.met_dependencies = [MemoryDep('arg164_1', c1, {c0: 512, c1: 768})]
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf235.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (512, 768)
op235.sizes = ([512], [768])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg164_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf221_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op235_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg164_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf221', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf235', get_index_3, getitem)
        return store_reduction
op235_op236_op238.snodes[1] =
op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 512})]
op236.unmet_dependencies = [MemoryDep('buf221', c0, {c0: 393216}), MemoryDep('buf234', c0, {c0: 393216})]
op236.met_dependencies = [MemoryDep('arg164_1', c1, {c0: 512, c1: 768})]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf236.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (512, 768)
op236.sizes = ([512], [768])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg164_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf221_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op236_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg164_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf221', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf236', get_index_3, getitem_1)
        return store_reduction
op235_op236_op238.snodes[2] =
op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 393216})]
op238.unmet_dependencies = 
    [   MemoryDep('buf221', c0, {c0: 393216}),
        MemoryDep('buf234', c0, {c0: 393216}),
        MemoryDep('buf235', c0, {c0: 512}),
        MemoryDep('buf236', c0, {c0: 512})]
op238.met_dependencies = 
    [   MemoryDep('arg164_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg165_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg166_1', c1, {c0: 512, c1: 768})]
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf238.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False),
    ]
]
op238.group.device = cuda:0
op238.group.iteration = (393216, 1)
op238.sizes = ([512, 768], [])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg164_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf221_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg165_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg166_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op238_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg164_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf221', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf235', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf236', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg165_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg166_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf238', get_index_7, add_3, None)
        return store


op239: ExternKernelSchedulerNode(ExternKernelOut)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf238', mode=None)]
op239.met_dependencies = [StarDep(name='arg167_1', mode=None)]
op239.outputs = [
    buf239: ExternKernelOut
    buf239.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf239.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=True, is_weak=False)]
]
op239.node.kernel = extern_kernels.mm


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 1572864})]
op240.unmet_dependencies = [MemoryDep('buf239', c0, {c0: 1572864})]
op240.met_dependencies = [MemoryDep('arg168_1', c1, {c0: 512, c1: 3072})]
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (1572864, 1)
op240.sizes = ([512, 3072], [])
buf239_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg168_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf240_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op240_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg168_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf239', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg168_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf240', get_index_4, mul_2, None)
        return store


op241: ExternKernelSchedulerNode(ExternKernelOut)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op241.met_dependencies = [StarDep(name='arg169_1', mode=None)]
op241.outputs = [
    buf241: ExternKernelOut
    buf241.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf241.users = [
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False),
    ]
]
op241.node.kernel = extern_kernels.mm


op242_op243_op245: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op242_op243_op245.writes = 
    [   MemoryDep('buf242', c0, {c0: 512}),
        MemoryDep('buf243', c0, {c0: 512}),
        MemoryDep('buf245', c0, {c0: 393216})]
op242_op243_op245.unmet_dependencies = [MemoryDep('buf238', c0, {c0: 393216}), MemoryDep('buf241', c0, {c0: 393216})]
op242_op243_op245.met_dependencies = 
    [   MemoryDep('arg170_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg171_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg172_1', c1, {c0: 512, c1: 768})]
op242_op243_op245.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf242.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf243.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf245.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False),
    ]
]
op242_op243_op245.snodes[0] =
op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 512})]
op242.unmet_dependencies = [MemoryDep('buf238', c0, {c0: 393216}), MemoryDep('buf241', c0, {c0: 393216})]
op242.met_dependencies = [MemoryDep('arg170_1', c1, {c0: 512, c1: 768})]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf242.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op242.group.device = cuda:0
op242.group.iteration = (512, 768)
op242.sizes = ([512], [768])
buf241_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg170_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op242_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg170_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf238', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf242', get_index_3, getitem)
        return store_reduction
op242_op243_op245.snodes[1] =
op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 512})]
op243.unmet_dependencies = [MemoryDep('buf238', c0, {c0: 393216}), MemoryDep('buf241', c0, {c0: 393216})]
op243.met_dependencies = [MemoryDep('arg170_1', c1, {c0: 512, c1: 768})]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf243.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (512, 768)
op243.sizes = ([512], [768])
buf241_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg170_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op243_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg170_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf238', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf243', get_index_3, getitem_1)
        return store_reduction
op242_op243_op245.snodes[2] =
op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 393216})]
op245.unmet_dependencies = 
    [   MemoryDep('buf238', c0, {c0: 393216}),
        MemoryDep('buf241', c0, {c0: 393216}),
        MemoryDep('buf242', c0, {c0: 512}),
        MemoryDep('buf243', c0, {c0: 512})]
op245.met_dependencies = 
    [   MemoryDep('arg170_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg171_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg172_1', c1, {c0: 512, c1: 768})]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf245.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False),
    ]
]
op245.group.device = cuda:0
op245.group.iteration = (393216, 1)
op245.sizes = ([512, 768], [])
buf241_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg170_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg171_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg172_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op245_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg170_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf238', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf242', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf243', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg171_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg172_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf245', get_index_7, add_3, None)
        return store


op246: ExternKernelSchedulerNode(ExternKernelOut)
op246.writes = [StarDep(name='buf246', mode=None)]
op246.unmet_dependencies = [StarDep(name='buf245', mode=None)]
op246.met_dependencies = [StarDep(name='arg173_1', mode=None)]
op246.outputs = [
    buf246: ExternKernelOut
    buf246.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf246.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op246.node.kernel = extern_kernels.mm


op247: ExternKernelSchedulerNode(ExternKernelOut)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf245', mode=None)]
op247.met_dependencies = [StarDep(name='arg175_1', mode=None)]
op247.outputs = [
    buf247: ExternKernelOut
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf247.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op247.node.kernel = extern_kernels.mm


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 393216})]
op248.unmet_dependencies = [   MemoryDep('buf246', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op248.met_dependencies = [MemoryDep('arg174_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (393216, 1)
op248.sizes = ([2, 12, 256, 64], [])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg174_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op248_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf246', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg174_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf248', get_index_2, add, None)
        return store


op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 393216})]
op249.unmet_dependencies = [MemoryDep('buf247', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op249.met_dependencies = [MemoryDep('arg176_1', c1, {c0: 2, c1: 768})]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf249.users = [NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (393216, 1)
op249.sizes = ([2, 768, 256], [])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg176_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op249_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg176_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf249', get_index_2, add, None)
        return store


op250: ExternKernelSchedulerNode(ExternKernelOut)
op250.writes = [StarDep(name='buf250', mode=None)]
op250.unmet_dependencies = [StarDep(name='buf248', mode=None), StarDep(name='buf249', mode=None)]
op250.met_dependencies = []
op250.outputs = [
    buf250: ExternKernelOut
    buf250.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf250.users = [
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=True, is_weak=False),
    ]
]
op250.node.kernel = extern_kernels.bmm


op251_op252_op254: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op251_op252_op254.writes = 
    [   MemoryDep('buf251', c0, {c0: 6144}),
        MemoryDep('buf252', c0, {c0: 6144}),
        MemoryDep('buf254', c0, {c0: 1572864})]
op251_op252_op254.unmet_dependencies = [MemoryDep('buf250', c0, {c0: 1572864})]
op251_op252_op254.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op251_op252_op254.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf251.users = [
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
    ]
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf252.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf254.users = [NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op251_op252_op254.snodes[0] =
op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 6144})]
op251.unmet_dependencies = [MemoryDep('buf250', c0, {c0: 1572864})]
op251.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf251.users = [
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
    ]
]
op251.group.device = cuda:0
op251.group.iteration = (6144, 256)
op251.sizes = ([2, 3072], [256])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op251_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf251', get_index_2, reduction)
        return store_reduction
op251_op252_op254.snodes[1] =
op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 6144})]
op252.unmet_dependencies = [MemoryDep('buf250', c0, {c0: 1572864}), MemoryDep('buf251', c0, {c0: 6144})]
op252.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf252.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (6144, 256)
op252.sizes = ([2, 3072], [256])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op252_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf251', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf252', get_index_3, reduction)
        return store_reduction
op251_op252_op254.snodes[2] =
op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 1572864})]
op254.unmet_dependencies = 
    [   MemoryDep('buf250', c0, {c0: 1572864}),
        MemoryDep('buf251', c0, {c0: 6144}),
        MemoryDep('buf252', c0, {c0: 6144})]
op254.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf254.users = [NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (1572864, 1)
op254.sizes = ([2, 3072, 256], [])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf254_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op254_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf251', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf252', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf254', get_index_4, truediv, None)
        return store


op253: ExternKernelSchedulerNode(ExternKernelOut)
op253.writes = [StarDep(name='buf253', mode=None)]
op253.unmet_dependencies = [StarDep(name='buf245', mode=None)]
op253.met_dependencies = [StarDep(name='arg177_1', mode=None)]
op253.outputs = [
    buf253: ExternKernelOut
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf253.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op253.node.kernel = extern_kernels.mm


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 393216})]
op255.unmet_dependencies = [   MemoryDep('buf253', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op255.met_dependencies = [MemoryDep('arg178_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (393216, 1)
op255.sizes = ([2, 12, 256, 64], [])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg178_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op255_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg178_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf255', get_index_2, add, None)
        return store


op256: ExternKernelSchedulerNode(ExternKernelOut)
op256.writes = [StarDep(name='buf256', mode=None)]
op256.unmet_dependencies = [StarDep(name='buf254', mode=None), StarDep(name='buf255', mode=None)]
op256.met_dependencies = []
op256.outputs = [
    buf256: ExternKernelOut
    buf256.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf256.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op256.node.kernel = extern_kernels.bmm


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 393216})]
op257.unmet_dependencies = [   MemoryDep('buf256', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op257.met_dependencies = []
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf257.users = [NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (393216, 1)
op257.sizes = ([2, 256, 12, 64], [])
buf256_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op257_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf257', get_index_1, load, None)
        return store


op258: ExternKernelSchedulerNode(ExternKernelOut)
op258.writes = [StarDep(name='buf258', mode=None)]
op258.unmet_dependencies = [StarDep(name='buf257', mode=None)]
op258.met_dependencies = [StarDep(name='arg179_1', mode=None)]
op258.outputs = [
    buf258: ExternKernelOut
    buf258.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf258.users = [
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False),
    ]
]
op258.node.kernel = extern_kernels.mm


op259_op260_op262: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op259_op260_op262.writes = 
    [   MemoryDep('buf259', c0, {c0: 512}),
        MemoryDep('buf260', c0, {c0: 512}),
        MemoryDep('buf262', c0, {c0: 393216})]
op259_op260_op262.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 393216}), MemoryDep('buf258', c0, {c0: 393216})]
op259_op260_op262.met_dependencies = 
    [   MemoryDep('arg180_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg181_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg182_1', c1, {c0: 512, c1: 768})]
op259_op260_op262.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf259.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf260.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf262.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=True, is_weak=False),
    ]
]
op259_op260_op262.snodes[0] =
op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 512})]
op259.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 393216}), MemoryDep('buf258', c0, {c0: 393216})]
op259.met_dependencies = [MemoryDep('arg180_1', c1, {c0: 512, c1: 768})]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf259.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (512, 768)
op259.sizes = ([512], [768])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg180_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op259_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg180_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf245', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf259', get_index_3, getitem)
        return store_reduction
op259_op260_op262.snodes[1] =
op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 512})]
op260.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 393216}), MemoryDep('buf258', c0, {c0: 393216})]
op260.met_dependencies = [MemoryDep('arg180_1', c1, {c0: 512, c1: 768})]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf260.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (512, 768)
op260.sizes = ([512], [768])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg180_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op260_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg180_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf245', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf260', get_index_3, getitem_1)
        return store_reduction
op259_op260_op262.snodes[2] =
op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 393216})]
op262.unmet_dependencies = 
    [   MemoryDep('buf245', c0, {c0: 393216}),
        MemoryDep('buf258', c0, {c0: 393216}),
        MemoryDep('buf259', c0, {c0: 512}),
        MemoryDep('buf260', c0, {c0: 512})]
op262.met_dependencies = 
    [   MemoryDep('arg180_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg181_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg182_1', c1, {c0: 512, c1: 768})]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf262.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=True, is_weak=False),
    ]
]
op262.group.device = cuda:0
op262.group.iteration = (393216, 1)
op262.sizes = ([512, 768], [])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg180_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg181_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg182_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op262_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg180_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf245', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf259', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf260', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg181_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg182_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf262', get_index_7, add_3, None)
        return store


op263: ExternKernelSchedulerNode(ExternKernelOut)
op263.writes = [StarDep(name='buf263', mode=None)]
op263.unmet_dependencies = [StarDep(name='buf262', mode=None)]
op263.met_dependencies = [StarDep(name='arg183_1', mode=None)]
op263.outputs = [
    buf263: ExternKernelOut
    buf263.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf263.users = [NodeUser(node=SchedulerNode(name='op264'), can_inplace=True, is_weak=False)]
]
op263.node.kernel = extern_kernels.mm


op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 1572864})]
op264.unmet_dependencies = [MemoryDep('buf263', c0, {c0: 1572864})]
op264.met_dependencies = [MemoryDep('arg184_1', c1, {c0: 512, c1: 3072})]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf264.users = [NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (1572864, 1)
op264.sizes = ([512, 3072], [])
buf263_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg184_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op264_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg184_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf263', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg184_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf264', get_index_4, mul_2, None)
        return store


op265: ExternKernelSchedulerNode(ExternKernelOut)
op265.writes = [StarDep(name='buf265', mode=None)]
op265.unmet_dependencies = [StarDep(name='buf264', mode=None)]
op265.met_dependencies = [StarDep(name='arg185_1', mode=None)]
op265.outputs = [
    buf265: ExternKernelOut
    buf265.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf265.users = [
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=True, is_weak=False),
    ]
]
op265.node.kernel = extern_kernels.mm


op266_op267_op269: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op266_op267_op269.writes = 
    [   MemoryDep('buf266', c0, {c0: 512}),
        MemoryDep('buf267', c0, {c0: 512}),
        MemoryDep('buf269', c0, {c0: 393216})]
op266_op267_op269.unmet_dependencies = [MemoryDep('buf262', c0, {c0: 393216}), MemoryDep('buf265', c0, {c0: 393216})]
op266_op267_op269.met_dependencies = 
    [   MemoryDep('arg186_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg187_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg188_1', c1, {c0: 512, c1: 768})]
op266_op267_op269.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf266.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf267.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf269.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=True, is_weak=False),
    ]
]
op266_op267_op269.snodes[0] =
op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 512})]
op266.unmet_dependencies = [MemoryDep('buf262', c0, {c0: 393216}), MemoryDep('buf265', c0, {c0: 393216})]
op266.met_dependencies = [MemoryDep('arg186_1', c1, {c0: 512, c1: 768})]
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf266.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op266.group.device = cuda:0
op266.group.iteration = (512, 768)
op266.sizes = ([512], [768])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg186_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op266_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf262', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf266', get_index_3, getitem)
        return store_reduction
op266_op267_op269.snodes[1] =
op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 512})]
op267.unmet_dependencies = [MemoryDep('buf262', c0, {c0: 393216}), MemoryDep('buf265', c0, {c0: 393216})]
op267.met_dependencies = [MemoryDep('arg186_1', c1, {c0: 512, c1: 768})]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf267.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op267.group.device = cuda:0
op267.group.iteration = (512, 768)
op267.sizes = ([512], [768])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg186_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op267_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf262', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf267', get_index_3, getitem_1)
        return store_reduction
op266_op267_op269.snodes[2] =
op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 393216})]
op269.unmet_dependencies = 
    [   MemoryDep('buf262', c0, {c0: 393216}),
        MemoryDep('buf265', c0, {c0: 393216}),
        MemoryDep('buf266', c0, {c0: 512}),
        MemoryDep('buf267', c0, {c0: 512})]
op269.met_dependencies = 
    [   MemoryDep('arg186_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg187_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg188_1', c1, {c0: 512, c1: 768})]
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf269.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=True, is_weak=False),
    ]
]
op269.group.device = cuda:0
op269.group.iteration = (393216, 1)
op269.sizes = ([512, 768], [])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg186_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg187_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg188_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op269_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf262', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf266', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf267', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg187_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg188_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf269', get_index_7, add_3, None)
        return store


op270: ExternKernelSchedulerNode(ExternKernelOut)
op270.writes = [StarDep(name='buf270', mode=None)]
op270.unmet_dependencies = [StarDep(name='buf269', mode=None)]
op270.met_dependencies = [StarDep(name='arg189_1', mode=None)]
op270.outputs = [
    buf270: ExternKernelOut
    buf270.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf270.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op270.node.kernel = extern_kernels.mm


op271: ExternKernelSchedulerNode(ExternKernelOut)
op271.writes = [StarDep(name='buf271', mode=None)]
op271.unmet_dependencies = [StarDep(name='buf269', mode=None)]
op271.met_dependencies = [StarDep(name='arg191_1', mode=None)]
op271.outputs = [
    buf271: ExternKernelOut
    buf271.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf271.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
]
op271.node.kernel = extern_kernels.mm


op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', c0, {c0: 393216})]
op272.unmet_dependencies = [   MemoryDep('buf270', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op272.met_dependencies = [MemoryDep('arg190_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf272.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op272.group.device = cuda:0
op272.group.iteration = (393216, 1)
op272.sizes = ([2, 12, 256, 64], [])
buf270_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg190_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op272_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf270', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg190_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf272', get_index_2, add, None)
        return store


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 393216})]
op273.unmet_dependencies = [MemoryDep('buf271', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op273.met_dependencies = [MemoryDep('arg192_1', c1, {c0: 2, c1: 768})]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (393216, 1)
op273.sizes = ([2, 768, 256], [])
buf271_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg192_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op273_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg192_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf273', get_index_2, add, None)
        return store


op274: ExternKernelSchedulerNode(ExternKernelOut)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf272', mode=None), StarDep(name='buf273', mode=None)]
op274.met_dependencies = []
op274.outputs = [
    buf274: ExternKernelOut
    buf274.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf274.users = [
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
    ]
]
op274.node.kernel = extern_kernels.bmm


op275_op276_op278: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op275_op276_op278.writes = 
    [   MemoryDep('buf275', c0, {c0: 6144}),
        MemoryDep('buf276', c0, {c0: 6144}),
        MemoryDep('buf278', c0, {c0: 1572864})]
op275_op276_op278.unmet_dependencies = [MemoryDep('buf274', c0, {c0: 1572864})]
op275_op276_op278.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op275_op276_op278.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf275.users = [
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
    ]
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf276.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf278.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op275_op276_op278.snodes[0] =
op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 6144})]
op275.unmet_dependencies = [MemoryDep('buf274', c0, {c0: 1572864})]
op275.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf275.users = [
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
    ]
]
op275.group.device = cuda:0
op275.group.iteration = (6144, 256)
op275.sizes = ([2, 3072], [256])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op275_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf275', get_index_2, reduction)
        return store_reduction
op275_op276_op278.snodes[1] =
op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 6144})]
op276.unmet_dependencies = [MemoryDep('buf274', c0, {c0: 1572864}), MemoryDep('buf275', c0, {c0: 6144})]
op276.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf276.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (6144, 256)
op276.sizes = ([2, 3072], [256])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op276_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf275', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf276', get_index_3, reduction)
        return store_reduction
op275_op276_op278.snodes[2] =
op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 1572864})]
op278.unmet_dependencies = 
    [   MemoryDep('buf274', c0, {c0: 1572864}),
        MemoryDep('buf275', c0, {c0: 6144}),
        MemoryDep('buf276', c0, {c0: 6144})]
op278.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf278.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op278.group.device = cuda:0
op278.group.iteration = (1572864, 1)
op278.sizes = ([2, 3072, 256], [])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf278_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op278_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf275', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf276', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf278', get_index_4, truediv, None)
        return store


op277: ExternKernelSchedulerNode(ExternKernelOut)
op277.writes = [StarDep(name='buf277', mode=None)]
op277.unmet_dependencies = [StarDep(name='buf269', mode=None)]
op277.met_dependencies = [StarDep(name='arg193_1', mode=None)]
op277.outputs = [
    buf277: ExternKernelOut
    buf277.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf277.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op277.node.kernel = extern_kernels.mm


op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 393216})]
op279.unmet_dependencies = [   MemoryDep('buf277', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op279.met_dependencies = [MemoryDep('arg194_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (393216, 1)
op279.sizes = ([2, 12, 256, 64], [])
buf277_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg194_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf279_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op279_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg194_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf279', get_index_2, add, None)
        return store


op280: ExternKernelSchedulerNode(ExternKernelOut)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf278', mode=None), StarDep(name='buf279', mode=None)]
op280.met_dependencies = []
op280.outputs = [
    buf280: ExternKernelOut
    buf280.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf280.users = [NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op280.node.kernel = extern_kernels.bmm


op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 393216})]
op281.unmet_dependencies = [   MemoryDep('buf280', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op281.met_dependencies = []
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf281.users = [NodeUser(node=ExternKernelSchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op281.group.device = cuda:0
op281.group.iteration = (393216, 1)
op281.sizes = ([2, 256, 12, 64], [])
buf280_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf281_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op281_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf281', get_index_1, load, None)
        return store


op282: ExternKernelSchedulerNode(ExternKernelOut)
op282.writes = [StarDep(name='buf282', mode=None)]
op282.unmet_dependencies = [StarDep(name='buf281', mode=None)]
op282.met_dependencies = [StarDep(name='arg195_1', mode=None)]
op282.outputs = [
    buf282: ExternKernelOut
    buf282.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf282.users = [
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=True, is_weak=False),
    ]
]
op282.node.kernel = extern_kernels.mm


op283_op284_op286: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op283_op284_op286.writes = 
    [   MemoryDep('buf283', c0, {c0: 512}),
        MemoryDep('buf284', c0, {c0: 512}),
        MemoryDep('buf286', c0, {c0: 393216})]
op283_op284_op286.unmet_dependencies = [MemoryDep('buf269', c0, {c0: 393216}), MemoryDep('buf282', c0, {c0: 393216})]
op283_op284_op286.met_dependencies = 
    [   MemoryDep('arg196_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg197_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg198_1', c1, {c0: 512, c1: 768})]
op283_op284_op286.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf283.users = [NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf284.users = [NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf286.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False),
    ]
]
op283_op284_op286.snodes[0] =
op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 512})]
op283.unmet_dependencies = [MemoryDep('buf269', c0, {c0: 393216}), MemoryDep('buf282', c0, {c0: 393216})]
op283.met_dependencies = [MemoryDep('arg196_1', c1, {c0: 512, c1: 768})]
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf283.users = [NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op283.group.device = cuda:0
op283.group.iteration = (512, 768)
op283.sizes = ([512], [768])
buf282_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg196_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op283_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf282', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg196_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf269', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf283', get_index_3, getitem)
        return store_reduction
op283_op284_op286.snodes[1] =
op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 512})]
op284.unmet_dependencies = [MemoryDep('buf269', c0, {c0: 393216}), MemoryDep('buf282', c0, {c0: 393216})]
op284.met_dependencies = [MemoryDep('arg196_1', c1, {c0: 512, c1: 768})]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf284.users = [NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op284.group.device = cuda:0
op284.group.iteration = (512, 768)
op284.sizes = ([512], [768])
buf282_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg196_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op284_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf282', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg196_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf269', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf284', get_index_3, getitem_1)
        return store_reduction
op283_op284_op286.snodes[2] =
op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 393216})]
op286.unmet_dependencies = 
    [   MemoryDep('buf269', c0, {c0: 393216}),
        MemoryDep('buf282', c0, {c0: 393216}),
        MemoryDep('buf283', c0, {c0: 512}),
        MemoryDep('buf284', c0, {c0: 512})]
op286.met_dependencies = 
    [   MemoryDep('arg196_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg197_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg198_1', c1, {c0: 512, c1: 768})]
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf286.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False),
    ]
]
op286.group.device = cuda:0
op286.group.iteration = (393216, 1)
op286.sizes = ([512, 768], [])
buf282_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg196_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg197_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg198_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op286_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf282', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg196_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf269', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf283', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf284', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg197_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg198_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf286', get_index_7, add_3, None)
        return store


op287: ExternKernelSchedulerNode(ExternKernelOut)
op287.writes = [StarDep(name='buf287', mode=None)]
op287.unmet_dependencies = [StarDep(name='buf286', mode=None)]
op287.met_dependencies = [StarDep(name='arg199_1', mode=None)]
op287.outputs = [
    buf287: ExternKernelOut
    buf287.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf287.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=True, is_weak=False)]
]
op287.node.kernel = extern_kernels.mm


op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 1572864})]
op288.unmet_dependencies = [MemoryDep('buf287', c0, {c0: 1572864})]
op288.met_dependencies = [MemoryDep('arg200_1', c1, {c0: 512, c1: 3072})]
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf288.users = [NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (1572864, 1)
op288.sizes = ([512, 3072], [])
buf287_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg200_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf288_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op288_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf287', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg200_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf287', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg200_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf288', get_index_4, mul_2, None)
        return store


op289: ExternKernelSchedulerNode(ExternKernelOut)
op289.writes = [StarDep(name='buf289', mode=None)]
op289.unmet_dependencies = [StarDep(name='buf288', mode=None)]
op289.met_dependencies = [StarDep(name='arg201_1', mode=None)]
op289.outputs = [
    buf289: ExternKernelOut
    buf289.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf289.users = [
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False),
    ]
]
op289.node.kernel = extern_kernels.mm


op290_op291_op293: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op290_op291_op293.writes = 
    [   MemoryDep('buf290', c0, {c0: 512}),
        MemoryDep('buf291', c0, {c0: 512}),
        MemoryDep('buf293', c0, {c0: 393216})]
op290_op291_op293.unmet_dependencies = [MemoryDep('buf286', c0, {c0: 393216}), MemoryDep('buf289', c0, {c0: 393216})]
op290_op291_op293.met_dependencies = 
    [   MemoryDep('arg202_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg203_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg204_1', c1, {c0: 512, c1: 768})]
op290_op291_op293.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf290.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf291.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf293.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op290_op291_op293.snodes[0] =
op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 512})]
op290.unmet_dependencies = [MemoryDep('buf286', c0, {c0: 393216}), MemoryDep('buf289', c0, {c0: 393216})]
op290.met_dependencies = [MemoryDep('arg202_1', c1, {c0: 512, c1: 768})]
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf290.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (512, 768)
op290.sizes = ([512], [768])
buf289_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg202_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op290_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg202_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf286', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf290', get_index_3, getitem)
        return store_reduction
op290_op291_op293.snodes[1] =
op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 512})]
op291.unmet_dependencies = [MemoryDep('buf286', c0, {c0: 393216}), MemoryDep('buf289', c0, {c0: 393216})]
op291.met_dependencies = [MemoryDep('arg202_1', c1, {c0: 512, c1: 768})]
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf291.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
]
op291.group.device = cuda:0
op291.group.iteration = (512, 768)
op291.sizes = ([512], [768])
buf289_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg202_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf291_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op291_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg202_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf286', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf291', get_index_3, getitem_1)
        return store_reduction
op290_op291_op293.snodes[2] =
op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 393216})]
op293.unmet_dependencies = 
    [   MemoryDep('buf286', c0, {c0: 393216}),
        MemoryDep('buf289', c0, {c0: 393216}),
        MemoryDep('buf290', c0, {c0: 512}),
        MemoryDep('buf291', c0, {c0: 512})]
op293.met_dependencies = 
    [   MemoryDep('arg202_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg203_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg204_1', c1, {c0: 512, c1: 768})]
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf293.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op293.group.device = cuda:0
op293.group.iteration = (393216, 1)
op293.sizes = ([512, 768], [])
buf289_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg202_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf291_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg203_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg204_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf293_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op293_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg202_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf286', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf290', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf291', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg203_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg204_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf293', get_index_7, add_3, None)
        return store


op294: ExternKernelSchedulerNode(ExternKernelOut)
op294.writes = [StarDep(name='buf294', mode=None)]
op294.unmet_dependencies = [StarDep(name='buf293', mode=None)]
op294.met_dependencies = [StarDep(name='arg205_1', mode=None)]
op294.outputs = [
    buf294: ExternKernelOut
    buf294.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
    buf294.users = [NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False)]
]
op294.node.kernel = extern_kernels.mm


op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 1536})]
op295.unmet_dependencies = [MemoryDep('buf294', c0, {c0: 1536})]
op295.met_dependencies = [MemoryDep('arg206_1', c1, {c0: 2, c1: 768})]
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
    buf295.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op295.group.device = cuda:0
op295.group.iteration = (1536, 1)
op295.sizes = ([2, 768], [])
buf294_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
arg206_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf295_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
class op295_loop_body:
    var_ranges = {p0: 2, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg206_1', get_index_1)
        add = ops.add(load, load_1)
        tanh = ops.tanh(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf295', get_index_2, tanh, None)
        return store




# ===== run_2025_10_19_04_14_08_043050-pid_19/torchinductor/model__1_inference_1.1/ir_pre_fusion.txt =====
op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 393216})]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 512}),
        MemoryDep('arg207_1', c1, {c0: 2, c1: 256}),
        MemoryDep('arg3_1', 4*c0 + 1, {c0: 512}),
        MemoryDep('arg3_1', 4*c0 + 2, {c0: 512}),
        MemoryDep('arg3_1', 4*c0, {c0: 512}),
        MemoryDep('arg4_1', c1 + 768*tmp0, {c0: 512, c1: 768}),
        MemoryDep('arg5_1', c1 + 768*tmp1, {c0: 512, c1: 768}),
        MemoryDep('arg6_1', c1 + 768*tmp2, {c0: 512, c1: 768}),
        MemoryDep('arg6_1', c1 + 768*tmp4, {c0: 512, c1: 768}),
        MemoryDep('arg7_1', c1 + 768*tmp3, {c0: 512, c1: 768})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=True, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (393216, 1)
op0.sizes = ([2, 256, 768], [])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.float32, size=[30522, 768], stride=[768, 1])
arg207_1_layout = FixedLayout('cuda:0', torch.int64, size=[1, 512], stride=[512, 1])
arg5_1_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 4], stride=[1024, 4, 1])
arg6_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 768], stride=[768, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 4], stride=[1024, 4, 1])
arg7_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 768], stride=[768, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 4], stride=[1024, 4, 1])
arg6_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 768], stride=[768, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op0_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 768}
    index0 = 256*p0 + p1
    index1 = 768*indirect0 + p2
    index2 = p1
    index3 = 768*indirect1 + p2
    index4 = 1024*p0 + 4*p1
    index5 = 768*indirect2 + p2
    index6 = 1024*p0 + 4*p1 + 1
    index7 = 768*indirect3 + p2
    index8 = 1024*p0 + 4*p1 + 2
    index9 = 768*indirect4 + p2
    index10 = 196608*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg207_1', get_index_2)
        set_indirect1 = self.set_indirect1(load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg5_1', get_index_3)
        add = ops.add(load_1, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg3_1', get_index_4)
        set_indirect2 = self.set_indirect2(load_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg6_1', get_index_5)
        add_1 = ops.add(add, load_5)
        get_index_6 = self.get_index('index6')
        load_6 = ops.load('arg3_1', get_index_6)
        set_indirect3 = self.set_indirect3(load_6)
        get_index_7 = self.get_index('index7')
        load_7 = ops.load('arg7_1', get_index_7)
        add_2 = ops.add(add_1, load_7)
        get_index_8 = self.get_index('index8')
        load_8 = ops.load('arg3_1', get_index_8)
        set_indirect4 = self.set_indirect4(load_8)
        get_index_9 = self.get_index('index9')
        load_9 = ops.load('arg6_1', get_index_9)
        add_3 = ops.add(add_2, load_9)
        get_index_10 = self.get_index('index10')
        store = ops.store('buf0', get_index_10, add_3, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 393216})]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 393216})]
op1.met_dependencies = 
    [   MemoryDep('arg10_1', c1 + 768*tmp3, {c0: 512, c1: 768}),
        MemoryDep('arg2_1', c0, {c0: 512}),
        MemoryDep('arg3_1', 4*c0 + 1, {c0: 512}),
        MemoryDep('arg3_1', 4*c0 + 2, {c0: 512}),
        MemoryDep('arg3_1', 4*c0 + 3, {c0: 512}),
        MemoryDep('arg3_1', 4*c0, {c0: 512}),
        MemoryDep('arg7_1', c1 + 768*tmp0, {c0: 512, c1: 768}),
        MemoryDep('arg8_1', c1 + 768*tmp1, {c0: 512, c1: 768}),
        MemoryDep('arg9_1', c1 + 768*tmp2, {c0: 512, c1: 768})]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (393216, 1)
op1.sizes = ([512, 768], [])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 4], stride=[1024, 4, 1])
arg7_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 768], stride=[768, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 4], stride=[1024, 4, 1])
arg8_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 768], stride=[768, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 4], stride=[1024, 4, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256, 4], stride=[1024, 4, 1])
arg9_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 768], stride=[768, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
arg10_1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op1_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = 4*p0 + 3
    index2 = 768*indirect0 + p1
    index3 = 4*p0 + 1
    index4 = 768*indirect1 + p1
    index5 = 4*p0 + 2
    index6 = 4*p0
    index7 = 768*indirect2 + p1
    index8 = p0
    index9 = 768*indirect3 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg3_1', get_index_1)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg7_1', get_index_2)
        add = ops.add(load, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg3_1', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg3_1', get_index_4)
        sub = ops.sub(load_3, load_4)
        set_indirect1 = self.set_indirect1(sub)
        get_index_5 = self.get_index('index4')
        load_5 = ops.load('arg8_1', get_index_5)
        add_1 = ops.add(add, load_5)
        get_index_6 = self.get_index('index5')
        load_6 = ops.load('arg3_1', get_index_6)
        get_index_7 = self.get_index('index6')
        load_7 = ops.load('arg3_1', get_index_7)
        sub_1 = ops.sub(load_6, load_7)
        set_indirect2 = self.set_indirect2(sub_1)
        get_index_8 = self.get_index('index7')
        load_8 = ops.load('arg9_1', get_index_8)
        add_2 = ops.add(add_1, load_8)
        get_index_9 = self.get_index('index8')
        load_9 = ops.load('arg2_1', get_index_9)
        set_indirect3 = self.set_indirect3(load_9)
        get_index_10 = self.get_index('index9')
        load_10 = ops.load('arg10_1', get_index_10)
        add_3 = ops.add(add_2, load_10)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf1', get_index_11, add_3, None)
        return store


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 512})]
op2.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 393216})]
op2.met_dependencies = []
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf2.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op2.group.device = cuda:0
op2.group.iteration = (512, 768)
op2.sizes = ([512], [768])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op2_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf2', get_index_1, getitem)
        return store_reduction


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 512})]
op3.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 393216})]
op3.met_dependencies = []
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf3.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (512, 768)
op3.sizes = ([512], [768])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op3_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf3', get_index_1, getitem_1)
        return store_reduction


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 393216})]
op5.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 393216}),
        MemoryDep('buf2', c0, {c0: 512}),
        MemoryDep('buf3', c0, {c0: 512})]
op5.met_dependencies = 
    [   MemoryDep('arg11_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg12_1', c1, {c0: 512, c1: 768})]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf5.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False),
    ]
]
op5.group.device = cuda:0
op5.group.iteration = (393216, 1)
op5.sizes = ([512, 768], [])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg11_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg12_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op5_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf3', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg11_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg12_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf5', get_index_5, add_1, None)
        return store


op6: ExternKernelSchedulerNode(ExternKernelOut)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op6.met_dependencies = [StarDep(name='arg13_1', mode=None)]
op6.outputs = [
    buf6: ExternKernelOut
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf6.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op6.node.kernel = extern_kernels.mm


op7: ExternKernelSchedulerNode(ExternKernelOut)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op7.met_dependencies = [StarDep(name='arg15_1', mode=None)]
op7.outputs = [
    buf7: ExternKernelOut
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf7.users = [NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False)]
]
op7.node.kernel = extern_kernels.mm


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 393216})]
op8.unmet_dependencies = [   MemoryDep('buf6', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op8.met_dependencies = [MemoryDep('arg14_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (393216, 1)
op8.sizes = ([2, 12, 256, 64], [])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg14_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op8_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg14_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf8', get_index_2, add, None)
        return store


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 393216})]
op9.unmet_dependencies = [MemoryDep('buf7', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op9.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 2, c1: 768})]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (393216, 1)
op9.sizes = ([2, 768, 256], [])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg16_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf9_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op9_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg16_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf9', get_index_2, add, None)
        return store


op10: ExternKernelSchedulerNode(ExternKernelOut)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf8', mode=None), StarDep(name='buf9', mode=None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ExternKernelOut
    buf10.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf10.users = [
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=True, is_weak=False),
    ]
]
op10.node.kernel = extern_kernels.bmm


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 6144})]
op11.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 1572864})]
op11.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf11.users = [
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
    ]
]
op11.group.device = cuda:0
op11.group.iteration = (6144, 256)
op11.sizes = ([2, 3072], [256])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op11_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf11', get_index_2, reduction)
        return store_reduction


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 6144})]
op12.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 1572864}), MemoryDep('buf11', c0, {c0: 6144})]
op12.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf12.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (6144, 256)
op12.sizes = ([2, 3072], [256])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op12_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf11', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf12', get_index_3, reduction)
        return store_reduction


op13: ExternKernelSchedulerNode(ExternKernelOut)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op13.met_dependencies = [StarDep(name='arg17_1', mode=None)]
op13.outputs = [
    buf13: ExternKernelOut
    buf13.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf13.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op13.node.kernel = extern_kernels.mm


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 1572864})]
op14.unmet_dependencies = 
    [   MemoryDep('buf10', c0, {c0: 1572864}),
        MemoryDep('buf11', c0, {c0: 6144}),
        MemoryDep('buf12', c0, {c0: 6144})]
op14.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (1572864, 1)
op14.sizes = ([2, 3072, 256], [])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf14_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op14_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf11', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf12', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf14', get_index_4, truediv, None)
        return store


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 393216})]
op15.unmet_dependencies = [   MemoryDep('buf13', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op15.met_dependencies = [MemoryDep('arg18_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (393216, 1)
op15.sizes = ([2, 12, 256, 64], [])
buf13_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg18_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op15_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg18_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf15', get_index_2, add, None)
        return store


op16: ExternKernelSchedulerNode(ExternKernelOut)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf14', mode=None), StarDep(name='buf15', mode=None)]
op16.met_dependencies = []
op16.outputs = [
    buf16: ExternKernelOut
    buf16.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.node.kernel = extern_kernels.bmm


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 393216})]
op17.unmet_dependencies = [   MemoryDep('buf16', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op17.met_dependencies = []
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (393216, 1)
op17.sizes = ([2, 256, 12, 64], [])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op17_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf17', get_index_1, load, None)
        return store


op18: ExternKernelSchedulerNode(ExternKernelOut)
op18.writes = [StarDep(name='buf18', mode=None)]
op18.unmet_dependencies = [StarDep(name='buf17', mode=None)]
op18.met_dependencies = [StarDep(name='arg19_1', mode=None)]
op18.outputs = [
    buf18: ExternKernelOut
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf18.users = [
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False),
    ]
]
op18.node.kernel = extern_kernels.mm


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 512})]
op19.unmet_dependencies = [MemoryDep('buf18', c0, {c0: 393216}), MemoryDep('buf5', c0, {c0: 393216})]
op19.met_dependencies = [MemoryDep('arg20_1', c1, {c0: 512, c1: 768})]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf19.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (512, 768)
op19.sizes = ([512], [768])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg20_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op19_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg20_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf5', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf19', get_index_3, getitem)
        return store_reduction


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 512})]
op20.unmet_dependencies = [MemoryDep('buf18', c0, {c0: 393216}), MemoryDep('buf5', c0, {c0: 393216})]
op20.met_dependencies = [MemoryDep('arg20_1', c1, {c0: 512, c1: 768})]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf20.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (512, 768)
op20.sizes = ([512], [768])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg20_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf20_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op20_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg20_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf5', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf20', get_index_3, getitem_1)
        return store_reduction


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 393216})]
op22.unmet_dependencies = 
    [   MemoryDep('buf18', c0, {c0: 393216}),
        MemoryDep('buf19', c0, {c0: 512}),
        MemoryDep('buf20', c0, {c0: 512}),
        MemoryDep('buf5', c0, {c0: 393216})]
op22.met_dependencies = 
    [   MemoryDep('arg20_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg21_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg22_1', c1, {c0: 512, c1: 768})]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf22.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False),
    ]
]
op22.group.device = cuda:0
op22.group.iteration = (393216, 1)
op22.sizes = ([512, 768], [])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg20_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf20_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg21_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg22_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op22_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg20_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf5', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf19', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf20', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg21_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg22_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf22', get_index_7, add_3, None)
        return store


op23: ExternKernelSchedulerNode(ExternKernelOut)
op23.writes = [StarDep(name='buf23', mode=None)]
op23.unmet_dependencies = [StarDep(name='buf22', mode=None)]
op23.met_dependencies = [StarDep(name='arg23_1', mode=None)]
op23.outputs = [
    buf23: ExternKernelOut
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf23.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=True, is_weak=False)]
]
op23.node.kernel = extern_kernels.mm


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 1572864})]
op24.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 1572864})]
op24.met_dependencies = [MemoryDep('arg24_1', c1, {c0: 512, c1: 3072})]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf24.users = [NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (1572864, 1)
op24.sizes = ([512, 3072], [])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg24_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op24_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf23', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf24', get_index_4, mul_2, None)
        return store


op25: ExternKernelSchedulerNode(ExternKernelOut)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = [StarDep(name='buf24', mode=None)]
op25.met_dependencies = [StarDep(name='arg25_1', mode=None)]
op25.outputs = [
    buf25: ExternKernelOut
    buf25.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf25.users = [
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False),
    ]
]
op25.node.kernel = extern_kernels.mm


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 512})]
op26.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 393216}), MemoryDep('buf25', c0, {c0: 393216})]
op26.met_dependencies = [MemoryDep('arg26_1', c1, {c0: 512, c1: 768})]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf26.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (512, 768)
op26.sizes = ([512], [768])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg26_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op26_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf22', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf26', get_index_3, getitem)
        return store_reduction


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 512})]
op27.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 393216}), MemoryDep('buf25', c0, {c0: 393216})]
op27.met_dependencies = [MemoryDep('arg26_1', c1, {c0: 512, c1: 768})]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf27.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (512, 768)
op27.sizes = ([512], [768])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg26_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op27_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf22', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf27', get_index_3, getitem_1)
        return store_reduction


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 393216})]
op29.unmet_dependencies = 
    [   MemoryDep('buf22', c0, {c0: 393216}),
        MemoryDep('buf25', c0, {c0: 393216}),
        MemoryDep('buf26', c0, {c0: 512}),
        MemoryDep('buf27', c0, {c0: 512})]
op29.met_dependencies = 
    [   MemoryDep('arg26_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg27_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg28_1', c1, {c0: 512, c1: 768})]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf29.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
    ]
]
op29.group.device = cuda:0
op29.group.iteration = (393216, 1)
op29.sizes = ([512, 768], [])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg26_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg27_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg28_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op29_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf22', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf26', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf27', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg27_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg28_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf29', get_index_7, add_3, None)
        return store


op30: ExternKernelSchedulerNode(ExternKernelOut)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = [StarDep(name='arg29_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelOut
    buf30.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf30.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op30.node.kernel = extern_kernels.mm


op31: ExternKernelSchedulerNode(ExternKernelOut)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op31.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op31.outputs = [
    buf31: ExternKernelOut
    buf31.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf31.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op31.node.kernel = extern_kernels.mm


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 393216})]
op32.unmet_dependencies = [   MemoryDep('buf30', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op32.met_dependencies = [MemoryDep('arg30_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (393216, 1)
op32.sizes = ([2, 12, 256, 64], [])
buf30_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg30_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op32_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg30_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf32', get_index_2, add, None)
        return store


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 393216})]
op33.unmet_dependencies = [MemoryDep('buf31', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op33.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 2, c1: 768})]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf33.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (393216, 1)
op33.sizes = ([2, 768, 256], [])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg32_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op33_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf33', get_index_2, add, None)
        return store


op34: ExternKernelSchedulerNode(ExternKernelOut)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf32', mode=None), StarDep(name='buf33', mode=None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: ExternKernelOut
    buf34.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False),
    ]
]
op34.node.kernel = extern_kernels.bmm


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 6144})]
op35.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 1572864})]
op35.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf35.users = [
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
    ]
]
op35.group.device = cuda:0
op35.group.iteration = (6144, 256)
op35.sizes = ([2, 3072], [256])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op35_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf35', get_index_2, reduction)
        return store_reduction


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 6144})]
op36.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 1572864}), MemoryDep('buf35', c0, {c0: 6144})]
op36.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf36.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (6144, 256)
op36.sizes = ([2, 3072], [256])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op36_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf35', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf36', get_index_3, reduction)
        return store_reduction


op37: ExternKernelSchedulerNode(ExternKernelOut)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op37.met_dependencies = [StarDep(name='arg33_1', mode=None)]
op37.outputs = [
    buf37: ExternKernelOut
    buf37.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf37.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op37.node.kernel = extern_kernels.mm


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 1572864})]
op38.unmet_dependencies = 
    [   MemoryDep('buf34', c0, {c0: 1572864}),
        MemoryDep('buf35', c0, {c0: 6144}),
        MemoryDep('buf36', c0, {c0: 6144})]
op38.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (1572864, 1)
op38.sizes = ([2, 3072, 256], [])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op38_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf35', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf36', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf38', get_index_4, truediv, None)
        return store


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 393216})]
op39.unmet_dependencies = [   MemoryDep('buf37', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op39.met_dependencies = [MemoryDep('arg34_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (393216, 1)
op39.sizes = ([2, 12, 256, 64], [])
buf37_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg34_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op39_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg34_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf39', get_index_2, add, None)
        return store


op40: ExternKernelSchedulerNode(ExternKernelOut)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf38', mode=None), StarDep(name='buf39', mode=None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: ExternKernelOut
    buf40.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf40.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.node.kernel = extern_kernels.bmm


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 393216})]
op41.unmet_dependencies = [   MemoryDep('buf40', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op41.met_dependencies = []
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf41.users = [NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (393216, 1)
op41.sizes = ([2, 256, 12, 64], [])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op41_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf41', get_index_1, load, None)
        return store


op42: ExternKernelSchedulerNode(ExternKernelOut)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf41', mode=None)]
op42.met_dependencies = [StarDep(name='arg35_1', mode=None)]
op42.outputs = [
    buf42: ExternKernelOut
    buf42.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
    ]
]
op42.node.kernel = extern_kernels.mm


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 512})]
op43.unmet_dependencies = [MemoryDep('buf29', c0, {c0: 393216}), MemoryDep('buf42', c0, {c0: 393216})]
op43.met_dependencies = [MemoryDep('arg36_1', c1, {c0: 512, c1: 768})]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf43.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (512, 768)
op43.sizes = ([512], [768])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg36_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op43_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf29', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf43', get_index_3, getitem)
        return store_reduction


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 512})]
op44.unmet_dependencies = [MemoryDep('buf29', c0, {c0: 393216}), MemoryDep('buf42', c0, {c0: 393216})]
op44.met_dependencies = [MemoryDep('arg36_1', c1, {c0: 512, c1: 768})]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf44.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (512, 768)
op44.sizes = ([512], [768])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg36_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op44_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf29', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf44', get_index_3, getitem_1)
        return store_reduction


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 393216})]
op46.unmet_dependencies = 
    [   MemoryDep('buf29', c0, {c0: 393216}),
        MemoryDep('buf42', c0, {c0: 393216}),
        MemoryDep('buf43', c0, {c0: 512}),
        MemoryDep('buf44', c0, {c0: 512})]
op46.met_dependencies = 
    [   MemoryDep('arg36_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg37_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg38_1', c1, {c0: 512, c1: 768})]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf46.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
    ]
]
op46.group.device = cuda:0
op46.group.iteration = (393216, 1)
op46.sizes = ([512, 768], [])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg36_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg37_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg38_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op46_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf29', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf43', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf44', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg37_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg38_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf46', get_index_7, add_3, None)
        return store


op47: ExternKernelSchedulerNode(ExternKernelOut)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg39_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelOut
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.node.kernel = extern_kernels.mm


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 1572864})]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 1572864})]
op48.met_dependencies = [MemoryDep('arg40_1', c1, {c0: 512, c1: 3072})]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (1572864, 1)
op48.sizes = ([512, 3072], [])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg40_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op48_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg40_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf47', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg40_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf48', get_index_4, mul_2, None)
        return store


op49: ExternKernelSchedulerNode(ExternKernelOut)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op49.outputs = [
    buf49: ExternKernelOut
    buf49.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf49.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
    ]
]
op49.node.kernel = extern_kernels.mm


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 512})]
op50.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 393216}), MemoryDep('buf49', c0, {c0: 393216})]
op50.met_dependencies = [MemoryDep('arg42_1', c1, {c0: 512, c1: 768})]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf50.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (512, 768)
op50.sizes = ([512], [768])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg42_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op50_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf46', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf50', get_index_3, getitem)
        return store_reduction


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 512})]
op51.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 393216}), MemoryDep('buf49', c0, {c0: 393216})]
op51.met_dependencies = [MemoryDep('arg42_1', c1, {c0: 512, c1: 768})]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf51.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (512, 768)
op51.sizes = ([512], [768])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg42_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op51_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf46', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf51', get_index_3, getitem_1)
        return store_reduction


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 393216})]
op53.unmet_dependencies = 
    [   MemoryDep('buf46', c0, {c0: 393216}),
        MemoryDep('buf49', c0, {c0: 393216}),
        MemoryDep('buf50', c0, {c0: 512}),
        MemoryDep('buf51', c0, {c0: 512})]
op53.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg43_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg44_1', c1, {c0: 512, c1: 768})]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf53.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False),
    ]
]
op53.group.device = cuda:0
op53.group.iteration = (393216, 1)
op53.sizes = ([512, 768], [])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg42_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg43_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg44_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op53_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf46', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf50', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf51', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg43_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg44_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf53', get_index_7, add_3, None)
        return store


op54: ExternKernelSchedulerNode(ExternKernelOut)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op54.met_dependencies = [StarDep(name='arg45_1', mode=None)]
op54.outputs = [
    buf54: ExternKernelOut
    buf54.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf54.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op54.node.kernel = extern_kernels.mm


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op55.met_dependencies = [StarDep(name='arg47_1', mode=None)]
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op55.node.kernel = extern_kernels.mm


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 393216})]
op56.unmet_dependencies = [   MemoryDep('buf54', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op56.met_dependencies = [MemoryDep('arg46_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (393216, 1)
op56.sizes = ([2, 12, 256, 64], [])
buf54_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg46_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf56_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op56_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf56', get_index_2, add, None)
        return store


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 393216})]
op57.unmet_dependencies = [MemoryDep('buf55', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op57.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 2, c1: 768})]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf57.users = [NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (393216, 1)
op57.sizes = ([2, 768, 256], [])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg48_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op57_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf57', get_index_2, add, None)
        return store


op58: ExternKernelSchedulerNode(ExternKernelOut)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = [StarDep(name='buf56', mode=None), StarDep(name='buf57', mode=None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ExternKernelOut
    buf58.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False),
    ]
]
op58.node.kernel = extern_kernels.bmm


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 6144})]
op59.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 1572864})]
op59.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf59.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
    ]
]
op59.group.device = cuda:0
op59.group.iteration = (6144, 256)
op59.sizes = ([2, 3072], [256])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op59_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf59', get_index_2, reduction)
        return store_reduction


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 6144})]
op60.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 1572864}), MemoryDep('buf59', c0, {c0: 6144})]
op60.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf60.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (6144, 256)
op60.sizes = ([2, 3072], [256])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf60_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op60_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf59', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf60', get_index_3, reduction)
        return store_reduction


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op61.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf61.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op61.node.kernel = extern_kernels.mm


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 1572864})]
op62.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 1572864}),
        MemoryDep('buf59', c0, {c0: 6144}),
        MemoryDep('buf60', c0, {c0: 6144})]
op62.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (1572864, 1)
op62.sizes = ([2, 3072, 256], [])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf60_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op62_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf59', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf60', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf62', get_index_4, truediv, None)
        return store


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 393216})]
op63.unmet_dependencies = [   MemoryDep('buf61', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op63.met_dependencies = [MemoryDep('arg50_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (393216, 1)
op63.sizes = ([2, 12, 256, 64], [])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg50_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op63_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg50_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf63', get_index_2, add, None)
        return store


op64: ExternKernelSchedulerNode(ExternKernelOut)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf62', mode=None), StarDep(name='buf63', mode=None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: ExternKernelOut
    buf64.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf64.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op64.node.kernel = extern_kernels.bmm


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 393216})]
op65.unmet_dependencies = [   MemoryDep('buf64', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (393216, 1)
op65.sizes = ([2, 256, 12, 64], [])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op65_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf65', get_index_1, load, None)
        return store


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf66.users = [
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False),
    ]
]
op66.node.kernel = extern_kernels.mm


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 512})]
op67.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 393216}), MemoryDep('buf66', c0, {c0: 393216})]
op67.met_dependencies = [MemoryDep('arg52_1', c1, {c0: 512, c1: 768})]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf67.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (512, 768)
op67.sizes = ([512], [768])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg52_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op67_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg52_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf53', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf67', get_index_3, getitem)
        return store_reduction


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 512})]
op68.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 393216}), MemoryDep('buf66', c0, {c0: 393216})]
op68.met_dependencies = [MemoryDep('arg52_1', c1, {c0: 512, c1: 768})]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf68.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (512, 768)
op68.sizes = ([512], [768])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg52_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op68_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg52_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf53', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf68', get_index_3, getitem_1)
        return store_reduction


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 393216})]
op70.unmet_dependencies = 
    [   MemoryDep('buf53', c0, {c0: 393216}),
        MemoryDep('buf66', c0, {c0: 393216}),
        MemoryDep('buf67', c0, {c0: 512}),
        MemoryDep('buf68', c0, {c0: 512})]
op70.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg53_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg54_1', c1, {c0: 512, c1: 768})]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf70.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
    ]
]
op70.group.device = cuda:0
op70.group.iteration = (393216, 1)
op70.sizes = ([512, 768], [])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg52_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg53_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg54_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op70_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg52_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf53', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf67', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf68', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg53_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg54_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf70', get_index_7, add_3, None)
        return store


op71: ExternKernelSchedulerNode(ExternKernelOut)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf70', mode=None)]
op71.met_dependencies = [StarDep(name='arg55_1', mode=None)]
op71.outputs = [
    buf71: ExternKernelOut
    buf71.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf71.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False)]
]
op71.node.kernel = extern_kernels.mm


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 1572864})]
op72.unmet_dependencies = [MemoryDep('buf71', c0, {c0: 1572864})]
op72.met_dependencies = [MemoryDep('arg56_1', c1, {c0: 512, c1: 3072})]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (1572864, 1)
op72.sizes = ([512, 3072], [])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg56_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op72_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg56_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf71', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg56_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf72', get_index_4, mul_2, None)
        return store


op73: ExternKernelSchedulerNode(ExternKernelOut)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf72', mode=None)]
op73.met_dependencies = [StarDep(name='arg57_1', mode=None)]
op73.outputs = [
    buf73: ExternKernelOut
    buf73.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
    ]
]
op73.node.kernel = extern_kernels.mm


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 512})]
op74.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 393216}), MemoryDep('buf73', c0, {c0: 393216})]
op74.met_dependencies = [MemoryDep('arg58_1', c1, {c0: 512, c1: 768})]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf74.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (512, 768)
op74.sizes = ([512], [768])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg58_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op74_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg58_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf70', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf74', get_index_3, getitem)
        return store_reduction


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 512})]
op75.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 393216}), MemoryDep('buf73', c0, {c0: 393216})]
op75.met_dependencies = [MemoryDep('arg58_1', c1, {c0: 512, c1: 768})]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf75.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (512, 768)
op75.sizes = ([512], [768])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg58_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op75_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg58_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf70', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf75', get_index_3, getitem_1)
        return store_reduction


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 393216})]
op77.unmet_dependencies = 
    [   MemoryDep('buf70', c0, {c0: 393216}),
        MemoryDep('buf73', c0, {c0: 393216}),
        MemoryDep('buf74', c0, {c0: 512}),
        MemoryDep('buf75', c0, {c0: 512})]
op77.met_dependencies = 
    [   MemoryDep('arg58_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg59_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg60_1', c1, {c0: 512, c1: 768})]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf77.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
    ]
]
op77.group.device = cuda:0
op77.group.iteration = (393216, 1)
op77.sizes = ([512, 768], [])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg58_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg59_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg60_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op77_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg58_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf70', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf74', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf75', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg59_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg60_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf77', get_index_7, add_3, None)
        return store


op78: ExternKernelSchedulerNode(ExternKernelOut)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op78.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op78.outputs = [
    buf78: ExternKernelOut
    buf78.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf78.users = [NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op78.node.kernel = extern_kernels.mm


op79: ExternKernelSchedulerNode(ExternKernelOut)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op79.met_dependencies = [StarDep(name='arg63_1', mode=None)]
op79.outputs = [
    buf79: ExternKernelOut
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf79.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op79.node.kernel = extern_kernels.mm


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 393216})]
op80.unmet_dependencies = [   MemoryDep('buf78', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op80.met_dependencies = [MemoryDep('arg62_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf80.users = [NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (393216, 1)
op80.sizes = ([2, 12, 256, 64], [])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg62_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op80_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf80', get_index_2, add, None)
        return store


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 393216})]
op81.unmet_dependencies = [MemoryDep('buf79', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op81.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 2, c1: 768})]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (393216, 1)
op81.sizes = ([2, 768, 256], [])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg64_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf81_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op81_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg64_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf81', get_index_2, add, None)
        return store


op82: ExternKernelSchedulerNode(ExternKernelOut)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf80', mode=None), StarDep(name='buf81', mode=None)]
op82.met_dependencies = []
op82.outputs = [
    buf82: ExternKernelOut
    buf82.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf82.users = [
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False),
    ]
]
op82.node.kernel = extern_kernels.bmm


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 6144})]
op83.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 1572864})]
op83.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf83.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
    ]
]
op83.group.device = cuda:0
op83.group.iteration = (6144, 256)
op83.sizes = ([2, 3072], [256])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op83_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf83', get_index_2, reduction)
        return store_reduction


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 6144})]
op84.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 1572864}), MemoryDep('buf83', c0, {c0: 6144})]
op84.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf84.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (6144, 256)
op84.sizes = ([2, 3072], [256])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op84_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf83', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf84', get_index_3, reduction)
        return store_reduction


op85: ExternKernelSchedulerNode(ExternKernelOut)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op85.met_dependencies = [StarDep(name='arg65_1', mode=None)]
op85.outputs = [
    buf85: ExternKernelOut
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf85.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op85.node.kernel = extern_kernels.mm


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 1572864})]
op86.unmet_dependencies = 
    [   MemoryDep('buf82', c0, {c0: 1572864}),
        MemoryDep('buf83', c0, {c0: 6144}),
        MemoryDep('buf84', c0, {c0: 6144})]
op86.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (1572864, 1)
op86.sizes = ([2, 3072, 256], [])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf86_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op86_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf83', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf84', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf86', get_index_4, truediv, None)
        return store


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 393216})]
op87.unmet_dependencies = [   MemoryDep('buf85', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op87.met_dependencies = [MemoryDep('arg66_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (393216, 1)
op87.sizes = ([2, 12, 256, 64], [])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg66_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op87_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg66_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf87', get_index_2, add, None)
        return store


op88: ExternKernelSchedulerNode(ExternKernelOut)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf86', mode=None), StarDep(name='buf87', mode=None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ExternKernelOut
    buf88.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf88.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.node.kernel = extern_kernels.bmm


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 393216})]
op89.unmet_dependencies = [   MemoryDep('buf88', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op89.met_dependencies = []
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (393216, 1)
op89.sizes = ([2, 256, 12, 64], [])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op89_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf89', get_index_1, load, None)
        return store


op90: ExternKernelSchedulerNode(ExternKernelOut)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op90.met_dependencies = [StarDep(name='arg67_1', mode=None)]
op90.outputs = [
    buf90: ExternKernelOut
    buf90.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf90.users = [
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
    ]
]
op90.node.kernel = extern_kernels.mm


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 512})]
op91.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 393216}), MemoryDep('buf90', c0, {c0: 393216})]
op91.met_dependencies = [MemoryDep('arg68_1', c1, {c0: 512, c1: 768})]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf91.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (512, 768)
op91.sizes = ([512], [768])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg68_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op91_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg68_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf77', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf91', get_index_3, getitem)
        return store_reduction


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 512})]
op92.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 393216}), MemoryDep('buf90', c0, {c0: 393216})]
op92.met_dependencies = [MemoryDep('arg68_1', c1, {c0: 512, c1: 768})]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf92.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (512, 768)
op92.sizes = ([512], [768])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg68_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op92_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg68_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf77', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf92', get_index_3, getitem_1)
        return store_reduction


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 393216})]
op94.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 393216}),
        MemoryDep('buf90', c0, {c0: 393216}),
        MemoryDep('buf91', c0, {c0: 512}),
        MemoryDep('buf92', c0, {c0: 512})]
op94.met_dependencies = 
    [   MemoryDep('arg68_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg69_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg70_1', c1, {c0: 512, c1: 768})]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf94.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False),
    ]
]
op94.group.device = cuda:0
op94.group.iteration = (393216, 1)
op94.sizes = ([512, 768], [])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg68_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg69_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg70_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op94_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg68_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf77', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf91', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf92', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg69_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg70_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf94', get_index_7, add_3, None)
        return store


op95: ExternKernelSchedulerNode(ExternKernelOut)
op95.writes = [StarDep(name='buf95', mode=None)]
op95.unmet_dependencies = [StarDep(name='buf94', mode=None)]
op95.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op95.outputs = [
    buf95: ExternKernelOut
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf95.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False)]
]
op95.node.kernel = extern_kernels.mm


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 1572864})]
op96.unmet_dependencies = [MemoryDep('buf95', c0, {c0: 1572864})]
op96.met_dependencies = [MemoryDep('arg72_1', c1, {c0: 512, c1: 3072})]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (1572864, 1)
op96.sizes = ([512, 3072], [])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg72_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op96_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf95', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg72_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf96', get_index_4, mul_2, None)
        return store


op97: ExternKernelSchedulerNode(ExternKernelOut)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op97.met_dependencies = [StarDep(name='arg73_1', mode=None)]
op97.outputs = [
    buf97: ExternKernelOut
    buf97.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf97.users = [
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False),
    ]
]
op97.node.kernel = extern_kernels.mm


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 512})]
op98.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 393216}), MemoryDep('buf97', c0, {c0: 393216})]
op98.met_dependencies = [MemoryDep('arg74_1', c1, {c0: 512, c1: 768})]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf98.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (512, 768)
op98.sizes = ([512], [768])
buf97_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg74_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op98_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg74_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf94', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf98', get_index_3, getitem)
        return store_reduction


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 512})]
op99.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 393216}), MemoryDep('buf97', c0, {c0: 393216})]
op99.met_dependencies = [MemoryDep('arg74_1', c1, {c0: 512, c1: 768})]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf99.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (512, 768)
op99.sizes = ([512], [768])
buf97_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg74_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op99_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg74_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf94', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf99', get_index_3, getitem_1)
        return store_reduction


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 393216})]
op101.unmet_dependencies = 
    [   MemoryDep('buf94', c0, {c0: 393216}),
        MemoryDep('buf97', c0, {c0: 393216}),
        MemoryDep('buf98', c0, {c0: 512}),
        MemoryDep('buf99', c0, {c0: 512})]
op101.met_dependencies = 
    [   MemoryDep('arg74_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg75_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg76_1', c1, {c0: 512, c1: 768})]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf101.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
    ]
]
op101.group.device = cuda:0
op101.group.iteration = (393216, 1)
op101.sizes = ([512, 768], [])
buf97_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg74_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg75_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg76_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op101_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg74_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf94', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf98', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf99', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg75_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg76_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf101', get_index_7, add_3, None)
        return store


op102: ExternKernelSchedulerNode(ExternKernelOut)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op102.met_dependencies = [StarDep(name='arg77_1', mode=None)]
op102.outputs = [
    buf102: ExternKernelOut
    buf102.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf102.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op102.node.kernel = extern_kernels.mm


op103: ExternKernelSchedulerNode(ExternKernelOut)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op103.met_dependencies = [StarDep(name='arg79_1', mode=None)]
op103.outputs = [
    buf103: ExternKernelOut
    buf103.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf103.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op103.node.kernel = extern_kernels.mm


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 393216})]
op104.unmet_dependencies = [   MemoryDep('buf102', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op104.met_dependencies = [MemoryDep('arg78_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf104.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (393216, 1)
op104.sizes = ([2, 12, 256, 64], [])
buf102_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg78_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op104_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg78_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf104', get_index_2, add, None)
        return store


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 393216})]
op105.unmet_dependencies = [MemoryDep('buf103', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op105.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 2, c1: 768})]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (393216, 1)
op105.sizes = ([2, 768, 256], [])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg80_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op105_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg80_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf105', get_index_2, add, None)
        return store


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf104', mode=None), StarDep(name='buf105', mode=None)]
op106.met_dependencies = []
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf106.users = [
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
    ]
]
op106.node.kernel = extern_kernels.bmm


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 6144})]
op107.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 1572864})]
op107.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf107.users = [
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
    ]
]
op107.group.device = cuda:0
op107.group.iteration = (6144, 256)
op107.sizes = ([2, 3072], [256])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op107_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf107', get_index_2, reduction)
        return store_reduction


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 6144})]
op108.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 1572864}), MemoryDep('buf107', c0, {c0: 6144})]
op108.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf108.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (6144, 256)
op108.sizes = ([2, 3072], [256])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op108_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf107', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf108', get_index_3, reduction)
        return store_reduction


op109: ExternKernelSchedulerNode(ExternKernelOut)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op109.met_dependencies = [StarDep(name='arg81_1', mode=None)]
op109.outputs = [
    buf109: ExternKernelOut
    buf109.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf109.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op109.node.kernel = extern_kernels.mm


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 1572864})]
op110.unmet_dependencies = 
    [   MemoryDep('buf106', c0, {c0: 1572864}),
        MemoryDep('buf107', c0, {c0: 6144}),
        MemoryDep('buf108', c0, {c0: 6144})]
op110.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (1572864, 1)
op110.sizes = ([2, 3072, 256], [])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op110_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf107', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf108', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf110', get_index_4, truediv, None)
        return store


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 393216})]
op111.unmet_dependencies = [   MemoryDep('buf109', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op111.met_dependencies = [MemoryDep('arg82_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (393216, 1)
op111.sizes = ([2, 12, 256, 64], [])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg82_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op111_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg82_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf111', get_index_2, add, None)
        return store


op112: ExternKernelSchedulerNode(ExternKernelOut)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf110', mode=None), StarDep(name='buf111', mode=None)]
op112.met_dependencies = []
op112.outputs = [
    buf112: ExternKernelOut
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf112.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op112.node.kernel = extern_kernels.bmm


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 393216})]
op113.unmet_dependencies = [   MemoryDep('buf112', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op113.met_dependencies = []
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (393216, 1)
op113.sizes = ([2, 256, 12, 64], [])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op113_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf113', get_index_1, load, None)
        return store


op114: ExternKernelSchedulerNode(ExternKernelOut)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf113', mode=None)]
op114.met_dependencies = [StarDep(name='arg83_1', mode=None)]
op114.outputs = [
    buf114: ExternKernelOut
    buf114.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf114.users = [
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
    ]
]
op114.node.kernel = extern_kernels.mm


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 512})]
op115.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 393216}), MemoryDep('buf114', c0, {c0: 393216})]
op115.met_dependencies = [MemoryDep('arg84_1', c1, {c0: 512, c1: 768})]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf115.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (512, 768)
op115.sizes = ([512], [768])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg84_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op115_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf101', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf115', get_index_3, getitem)
        return store_reduction


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 512})]
op116.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 393216}), MemoryDep('buf114', c0, {c0: 393216})]
op116.met_dependencies = [MemoryDep('arg84_1', c1, {c0: 512, c1: 768})]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf116.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (512, 768)
op116.sizes = ([512], [768])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg84_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf116_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op116_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf101', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf116', get_index_3, getitem_1)
        return store_reduction


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 393216})]
op118.unmet_dependencies = 
    [   MemoryDep('buf101', c0, {c0: 393216}),
        MemoryDep('buf114', c0, {c0: 393216}),
        MemoryDep('buf115', c0, {c0: 512}),
        MemoryDep('buf116', c0, {c0: 512})]
op118.met_dependencies = 
    [   MemoryDep('arg84_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg85_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg86_1', c1, {c0: 512, c1: 768})]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf118.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False),
    ]
]
op118.group.device = cuda:0
op118.group.iteration = (393216, 1)
op118.sizes = ([512, 768], [])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg84_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf116_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg85_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg86_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op118_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf101', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf115', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf116', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg85_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg86_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf118', get_index_7, add_3, None)
        return store


op119: ExternKernelSchedulerNode(ExternKernelOut)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf118', mode=None)]
op119.met_dependencies = [StarDep(name='arg87_1', mode=None)]
op119.outputs = [
    buf119: ExternKernelOut
    buf119.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf119.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=True, is_weak=False)]
]
op119.node.kernel = extern_kernels.mm


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 1572864})]
op120.unmet_dependencies = [MemoryDep('buf119', c0, {c0: 1572864})]
op120.met_dependencies = [MemoryDep('arg88_1', c1, {c0: 512, c1: 3072})]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (1572864, 1)
op120.sizes = ([512, 3072], [])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg88_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op120_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg88_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf119', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg88_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf120', get_index_4, mul_2, None)
        return store


op121: ExternKernelSchedulerNode(ExternKernelOut)
op121.writes = [StarDep(name='buf121', mode=None)]
op121.unmet_dependencies = [StarDep(name='buf120', mode=None)]
op121.met_dependencies = [StarDep(name='arg89_1', mode=None)]
op121.outputs = [
    buf121: ExternKernelOut
    buf121.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf121.users = [
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False),
    ]
]
op121.node.kernel = extern_kernels.mm


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 512})]
op122.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 393216}), MemoryDep('buf121', c0, {c0: 393216})]
op122.met_dependencies = [MemoryDep('arg90_1', c1, {c0: 512, c1: 768})]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf122.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (512, 768)
op122.sizes = ([512], [768])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg90_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op122_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf118', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf122', get_index_3, getitem)
        return store_reduction


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 512})]
op123.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 393216}), MemoryDep('buf121', c0, {c0: 393216})]
op123.met_dependencies = [MemoryDep('arg90_1', c1, {c0: 512, c1: 768})]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf123.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (512, 768)
op123.sizes = ([512], [768])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg90_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op123_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf118', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf123', get_index_3, getitem_1)
        return store_reduction


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 393216})]
op125.unmet_dependencies = 
    [   MemoryDep('buf118', c0, {c0: 393216}),
        MemoryDep('buf121', c0, {c0: 393216}),
        MemoryDep('buf122', c0, {c0: 512}),
        MemoryDep('buf123', c0, {c0: 512})]
op125.met_dependencies = 
    [   MemoryDep('arg90_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg91_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg92_1', c1, {c0: 512, c1: 768})]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf125.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op125.group.device = cuda:0
op125.group.iteration = (393216, 1)
op125.sizes = ([512, 768], [])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg90_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg91_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg92_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op125_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf118', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf122', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf123', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg91_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg92_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf125', get_index_7, add_3, None)
        return store


op126: ExternKernelSchedulerNode(ExternKernelOut)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op126.met_dependencies = [StarDep(name='arg93_1', mode=None)]
op126.outputs = [
    buf126: ExternKernelOut
    buf126.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf126.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op126.node.kernel = extern_kernels.mm


op127: ExternKernelSchedulerNode(ExternKernelOut)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op127.met_dependencies = [StarDep(name='arg95_1', mode=None)]
op127.outputs = [
    buf127: ExternKernelOut
    buf127.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf127.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op127.node.kernel = extern_kernels.mm


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 393216})]
op128.unmet_dependencies = [   MemoryDep('buf126', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op128.met_dependencies = [MemoryDep('arg94_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf128.users = [NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (393216, 1)
op128.sizes = ([2, 12, 256, 64], [])
buf126_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg94_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op128_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg94_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf128', get_index_2, add, None)
        return store


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 393216})]
op129.unmet_dependencies = [MemoryDep('buf127', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op129.met_dependencies = [MemoryDep('arg96_1', c1, {c0: 2, c1: 768})]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (393216, 1)
op129.sizes = ([2, 768, 256], [])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg96_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op129_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf129', get_index_2, add, None)
        return store


op130: ExternKernelSchedulerNode(ExternKernelOut)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf128', mode=None), StarDep(name='buf129', mode=None)]
op130.met_dependencies = []
op130.outputs = [
    buf130: ExternKernelOut
    buf130.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf130.users = [
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False),
    ]
]
op130.node.kernel = extern_kernels.bmm


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 6144})]
op131.unmet_dependencies = [MemoryDep('buf130', c0, {c0: 1572864})]
op131.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf131.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
    ]
]
op131.group.device = cuda:0
op131.group.iteration = (6144, 256)
op131.sizes = ([2, 3072], [256])
buf130_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op131_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf131', get_index_2, reduction)
        return store_reduction


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 6144})]
op132.unmet_dependencies = [MemoryDep('buf130', c0, {c0: 1572864}), MemoryDep('buf131', c0, {c0: 6144})]
op132.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf132.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (6144, 256)
op132.sizes = ([2, 3072], [256])
buf130_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf132_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op132_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf131', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf132', get_index_3, reduction)
        return store_reduction


op133: ExternKernelSchedulerNode(ExternKernelOut)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op133.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op133.outputs = [
    buf133: ExternKernelOut
    buf133.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf133.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op133.node.kernel = extern_kernels.mm


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 1572864})]
op134.unmet_dependencies = 
    [   MemoryDep('buf130', c0, {c0: 1572864}),
        MemoryDep('buf131', c0, {c0: 6144}),
        MemoryDep('buf132', c0, {c0: 6144})]
op134.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf134.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (1572864, 1)
op134.sizes = ([2, 3072, 256], [])
buf130_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf132_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op134_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf131', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf132', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf134', get_index_4, truediv, None)
        return store


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 393216})]
op135.unmet_dependencies = [   MemoryDep('buf133', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op135.met_dependencies = [MemoryDep('arg98_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (393216, 1)
op135.sizes = ([2, 12, 256, 64], [])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg98_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op135_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg98_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf135', get_index_2, add, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelOut)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf134', mode=None), StarDep(name='buf135', mode=None)]
op136.met_dependencies = []
op136.outputs = [
    buf136: ExternKernelOut
    buf136.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf136.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.node.kernel = extern_kernels.bmm


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 393216})]
op137.unmet_dependencies = [   MemoryDep('buf136', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op137.met_dependencies = []
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf137.users = [NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (393216, 1)
op137.sizes = ([2, 256, 12, 64], [])
buf136_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op137_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf137', get_index_1, load, None)
        return store


op138: ExternKernelSchedulerNode(ExternKernelOut)
op138.writes = [StarDep(name='buf138', mode=None)]
op138.unmet_dependencies = [StarDep(name='buf137', mode=None)]
op138.met_dependencies = [StarDep(name='arg99_1', mode=None)]
op138.outputs = [
    buf138: ExternKernelOut
    buf138.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf138.users = [
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op138.node.kernel = extern_kernels.mm


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 512})]
op139.unmet_dependencies = [MemoryDep('buf125', c0, {c0: 393216}), MemoryDep('buf138', c0, {c0: 393216})]
op139.met_dependencies = [MemoryDep('arg100_1', c1, {c0: 512, c1: 768})]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf139.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op139.group.device = cuda:0
op139.group.iteration = (512, 768)
op139.sizes = ([512], [768])
buf138_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg100_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op139_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg100_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf125', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf139', get_index_3, getitem)
        return store_reduction


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 512})]
op140.unmet_dependencies = [MemoryDep('buf125', c0, {c0: 393216}), MemoryDep('buf138', c0, {c0: 393216})]
op140.met_dependencies = [MemoryDep('arg100_1', c1, {c0: 512, c1: 768})]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf140.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (512, 768)
op140.sizes = ([512], [768])
buf138_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg100_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf140_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op140_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg100_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf125', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf140', get_index_3, getitem_1)
        return store_reduction


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 393216})]
op142.unmet_dependencies = 
    [   MemoryDep('buf125', c0, {c0: 393216}),
        MemoryDep('buf138', c0, {c0: 393216}),
        MemoryDep('buf139', c0, {c0: 512}),
        MemoryDep('buf140', c0, {c0: 512})]
op142.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg101_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg102_1', c1, {c0: 512, c1: 768})]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf142.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
    ]
]
op142.group.device = cuda:0
op142.group.iteration = (393216, 1)
op142.sizes = ([512, 768], [])
buf138_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg100_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf140_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg101_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg102_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op142_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg100_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf125', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf139', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf140', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg101_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg102_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf142', get_index_7, add_3, None)
        return store


op143: ExternKernelSchedulerNode(ExternKernelOut)
op143.writes = [StarDep(name='buf143', mode=None)]
op143.unmet_dependencies = [StarDep(name='buf142', mode=None)]
op143.met_dependencies = [StarDep(name='arg103_1', mode=None)]
op143.outputs = [
    buf143: ExternKernelOut
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf143.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False)]
]
op143.node.kernel = extern_kernels.mm


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 1572864})]
op144.unmet_dependencies = [MemoryDep('buf143', c0, {c0: 1572864})]
op144.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 512, c1: 3072})]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (1572864, 1)
op144.sizes = ([512, 3072], [])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg104_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf144_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op144_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg104_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf143', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg104_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf144', get_index_4, mul_2, None)
        return store


op145: ExternKernelSchedulerNode(ExternKernelOut)
op145.writes = [StarDep(name='buf145', mode=None)]
op145.unmet_dependencies = [StarDep(name='buf144', mode=None)]
op145.met_dependencies = [StarDep(name='arg105_1', mode=None)]
op145.outputs = [
    buf145: ExternKernelOut
    buf145.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf145.users = [
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
    ]
]
op145.node.kernel = extern_kernels.mm


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 512})]
op146.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 393216}), MemoryDep('buf145', c0, {c0: 393216})]
op146.met_dependencies = [MemoryDep('arg106_1', c1, {c0: 512, c1: 768})]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf146.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (512, 768)
op146.sizes = ([512], [768])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg106_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op146_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf142', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf146', get_index_3, getitem)
        return store_reduction


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 512})]
op147.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 393216}), MemoryDep('buf145', c0, {c0: 393216})]
op147.met_dependencies = [MemoryDep('arg106_1', c1, {c0: 512, c1: 768})]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf147.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (512, 768)
op147.sizes = ([512], [768])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg106_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf147_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op147_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf142', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf147', get_index_3, getitem_1)
        return store_reduction


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 393216})]
op149.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 393216}),
        MemoryDep('buf145', c0, {c0: 393216}),
        MemoryDep('buf146', c0, {c0: 512}),
        MemoryDep('buf147', c0, {c0: 512})]
op149.met_dependencies = 
    [   MemoryDep('arg106_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg107_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg108_1', c1, {c0: 512, c1: 768})]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf149.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
    ]
]
op149.group.device = cuda:0
op149.group.iteration = (393216, 1)
op149.sizes = ([512, 768], [])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg106_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf147_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg107_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg108_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op149_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf142', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf146', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf147', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg107_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg108_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf149', get_index_7, add_3, None)
        return store


op150: ExternKernelSchedulerNode(ExternKernelOut)
op150.writes = [StarDep(name='buf150', mode=None)]
op150.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op150.met_dependencies = [StarDep(name='arg109_1', mode=None)]
op150.outputs = [
    buf150: ExternKernelOut
    buf150.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf150.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op150.node.kernel = extern_kernels.mm


op151: ExternKernelSchedulerNode(ExternKernelOut)
op151.writes = [StarDep(name='buf151', mode=None)]
op151.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op151.met_dependencies = [StarDep(name='arg111_1', mode=None)]
op151.outputs = [
    buf151: ExternKernelOut
    buf151.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf151.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op151.node.kernel = extern_kernels.mm


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 393216})]
op152.unmet_dependencies = [   MemoryDep('buf150', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op152.met_dependencies = [MemoryDep('arg110_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (393216, 1)
op152.sizes = ([2, 12, 256, 64], [])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg110_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op152_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg110_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf152', get_index_2, add, None)
        return store


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 393216})]
op153.unmet_dependencies = [MemoryDep('buf151', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op153.met_dependencies = [MemoryDep('arg112_1', c1, {c0: 2, c1: 768})]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf153.users = [NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (393216, 1)
op153.sizes = ([2, 768, 256], [])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg112_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op153_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg112_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf153', get_index_2, add, None)
        return store


op154: ExternKernelSchedulerNode(ExternKernelOut)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf152', mode=None), StarDep(name='buf153', mode=None)]
op154.met_dependencies = []
op154.outputs = [
    buf154: ExternKernelOut
    buf154.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf154.users = [
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False),
    ]
]
op154.node.kernel = extern_kernels.bmm


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 6144})]
op155.unmet_dependencies = [MemoryDep('buf154', c0, {c0: 1572864})]
op155.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf155.users = [
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
    ]
]
op155.group.device = cuda:0
op155.group.iteration = (6144, 256)
op155.sizes = ([2, 3072], [256])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op155_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf155', get_index_2, reduction)
        return store_reduction


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 6144})]
op156.unmet_dependencies = [MemoryDep('buf154', c0, {c0: 1572864}), MemoryDep('buf155', c0, {c0: 6144})]
op156.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf156.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (6144, 256)
op156.sizes = ([2, 3072], [256])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op156_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf155', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf156', get_index_3, reduction)
        return store_reduction


op157: ExternKernelSchedulerNode(ExternKernelOut)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op157.met_dependencies = [StarDep(name='arg113_1', mode=None)]
op157.outputs = [
    buf157: ExternKernelOut
    buf157.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf157.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op157.node.kernel = extern_kernels.mm


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 1572864})]
op158.unmet_dependencies = 
    [   MemoryDep('buf154', c0, {c0: 1572864}),
        MemoryDep('buf155', c0, {c0: 6144}),
        MemoryDep('buf156', c0, {c0: 6144})]
op158.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (1572864, 1)
op158.sizes = ([2, 3072, 256], [])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op158_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf155', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf156', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf158', get_index_4, truediv, None)
        return store


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 393216})]
op159.unmet_dependencies = [   MemoryDep('buf157', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op159.met_dependencies = [MemoryDep('arg114_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (393216, 1)
op159.sizes = ([2, 12, 256, 64], [])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg114_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op159_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg114_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf159', get_index_2, add, None)
        return store


op160: ExternKernelSchedulerNode(ExternKernelOut)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf158', mode=None), StarDep(name='buf159', mode=None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: ExternKernelOut
    buf160.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf160.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op160.node.kernel = extern_kernels.bmm


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 393216})]
op161.unmet_dependencies = [   MemoryDep('buf160', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op161.met_dependencies = []
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf161.users = [NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (393216, 1)
op161.sizes = ([2, 256, 12, 64], [])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op161_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf161', get_index_1, load, None)
        return store


op162: ExternKernelSchedulerNode(ExternKernelOut)
op162.writes = [StarDep(name='buf162', mode=None)]
op162.unmet_dependencies = [StarDep(name='buf161', mode=None)]
op162.met_dependencies = [StarDep(name='arg115_1', mode=None)]
op162.outputs = [
    buf162: ExternKernelOut
    buf162.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf162.users = [
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
    ]
]
op162.node.kernel = extern_kernels.mm


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 512})]
op163.unmet_dependencies = [MemoryDep('buf149', c0, {c0: 393216}), MemoryDep('buf162', c0, {c0: 393216})]
op163.met_dependencies = [MemoryDep('arg116_1', c1, {c0: 512, c1: 768})]
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf163.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (512, 768)
op163.sizes = ([512], [768])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg116_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op163_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg116_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf149', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf163', get_index_3, getitem)
        return store_reduction


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 512})]
op164.unmet_dependencies = [MemoryDep('buf149', c0, {c0: 393216}), MemoryDep('buf162', c0, {c0: 393216})]
op164.met_dependencies = [MemoryDep('arg116_1', c1, {c0: 512, c1: 768})]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf164.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (512, 768)
op164.sizes = ([512], [768])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg116_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op164_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg116_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf149', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf164', get_index_3, getitem_1)
        return store_reduction


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 393216})]
op166.unmet_dependencies = 
    [   MemoryDep('buf149', c0, {c0: 393216}),
        MemoryDep('buf162', c0, {c0: 393216}),
        MemoryDep('buf163', c0, {c0: 512}),
        MemoryDep('buf164', c0, {c0: 512})]
op166.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg117_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg118_1', c1, {c0: 512, c1: 768})]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf166.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False),
    ]
]
op166.group.device = cuda:0
op166.group.iteration = (393216, 1)
op166.sizes = ([512, 768], [])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg116_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg117_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg118_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op166_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg116_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf149', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf163', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf164', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg117_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg118_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf166', get_index_7, add_3, None)
        return store


op167: ExternKernelSchedulerNode(ExternKernelOut)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf166', mode=None)]
op167.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op167.outputs = [
    buf167: ExternKernelOut
    buf167.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf167.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False)]
]
op167.node.kernel = extern_kernels.mm


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 1572864})]
op168.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 1572864})]
op168.met_dependencies = [MemoryDep('arg120_1', c1, {c0: 512, c1: 3072})]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf168.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (1572864, 1)
op168.sizes = ([512, 3072], [])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg120_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf168_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op168_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg120_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf167', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg120_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf168', get_index_4, mul_2, None)
        return store


op169: ExternKernelSchedulerNode(ExternKernelOut)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf168', mode=None)]
op169.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op169.outputs = [
    buf169: ExternKernelOut
    buf169.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf169.users = [
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False),
    ]
]
op169.node.kernel = extern_kernels.mm


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 512})]
op170.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 393216}), MemoryDep('buf169', c0, {c0: 393216})]
op170.met_dependencies = [MemoryDep('arg122_1', c1, {c0: 512, c1: 768})]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf170.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (512, 768)
op170.sizes = ([512], [768])
buf169_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg122_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op170_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf166', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf170', get_index_3, getitem)
        return store_reduction


op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 512})]
op171.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 393216}), MemoryDep('buf169', c0, {c0: 393216})]
op171.met_dependencies = [MemoryDep('arg122_1', c1, {c0: 512, c1: 768})]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf171.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (512, 768)
op171.sizes = ([512], [768])
buf169_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg122_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op171_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf166', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf171', get_index_3, getitem_1)
        return store_reduction


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 393216})]
op173.unmet_dependencies = 
    [   MemoryDep('buf166', c0, {c0: 393216}),
        MemoryDep('buf169', c0, {c0: 393216}),
        MemoryDep('buf170', c0, {c0: 512}),
        MemoryDep('buf171', c0, {c0: 512})]
op173.met_dependencies = 
    [   MemoryDep('arg122_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg123_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg124_1', c1, {c0: 512, c1: 768})]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf173.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=True, is_weak=False),
    ]
]
op173.group.device = cuda:0
op173.group.iteration = (393216, 1)
op173.sizes = ([512, 768], [])
buf169_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg122_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg123_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg124_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op173_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf166', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf170', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf171', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg123_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg124_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf173', get_index_7, add_3, None)
        return store


op174: ExternKernelSchedulerNode(ExternKernelOut)
op174.writes = [StarDep(name='buf174', mode=None)]
op174.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op174.met_dependencies = [StarDep(name='arg125_1', mode=None)]
op174.outputs = [
    buf174: ExternKernelOut
    buf174.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf174.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op174.node.kernel = extern_kernels.mm


op175: ExternKernelSchedulerNode(ExternKernelOut)
op175.writes = [StarDep(name='buf175', mode=None)]
op175.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op175.met_dependencies = [StarDep(name='arg127_1', mode=None)]
op175.outputs = [
    buf175: ExternKernelOut
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf175.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op175.node.kernel = extern_kernels.mm


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 393216})]
op176.unmet_dependencies = [   MemoryDep('buf174', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op176.met_dependencies = [MemoryDep('arg126_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (393216, 1)
op176.sizes = ([2, 12, 256, 64], [])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg126_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op176_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf176', get_index_2, add, None)
        return store


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 393216})]
op177.unmet_dependencies = [MemoryDep('buf175', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op177.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 2, c1: 768})]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (393216, 1)
op177.sizes = ([2, 768, 256], [])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg128_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf177_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op177_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg128_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf177', get_index_2, add, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf176', mode=None), StarDep(name='buf177', mode=None)]
op178.met_dependencies = []
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf178.users = [
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False),
    ]
]
op178.node.kernel = extern_kernels.bmm


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 6144})]
op179.unmet_dependencies = [MemoryDep('buf178', c0, {c0: 1572864})]
op179.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
    ]
]
op179.group.device = cuda:0
op179.group.iteration = (6144, 256)
op179.sizes = ([2, 3072], [256])
buf178_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op179_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf179', get_index_2, reduction)
        return store_reduction


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 6144})]
op180.unmet_dependencies = [MemoryDep('buf178', c0, {c0: 1572864}), MemoryDep('buf179', c0, {c0: 6144})]
op180.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf180.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (6144, 256)
op180.sizes = ([2, 3072], [256])
buf178_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op180_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf179', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf180', get_index_3, reduction)
        return store_reduction


op181: ExternKernelSchedulerNode(ExternKernelOut)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op181.met_dependencies = [StarDep(name='arg129_1', mode=None)]
op181.outputs = [
    buf181: ExternKernelOut
    buf181.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf181.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op181.node.kernel = extern_kernels.mm


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 1572864})]
op182.unmet_dependencies = 
    [   MemoryDep('buf178', c0, {c0: 1572864}),
        MemoryDep('buf179', c0, {c0: 6144}),
        MemoryDep('buf180', c0, {c0: 6144})]
op182.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf182.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (1572864, 1)
op182.sizes = ([2, 3072, 256], [])
buf178_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf182_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op182_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf179', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf180', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf182', get_index_4, truediv, None)
        return store


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 393216})]
op183.unmet_dependencies = [   MemoryDep('buf181', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op183.met_dependencies = [MemoryDep('arg130_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf183.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (393216, 1)
op183.sizes = ([2, 12, 256, 64], [])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg130_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op183_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg130_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf183', get_index_2, add, None)
        return store


op184: ExternKernelSchedulerNode(ExternKernelOut)
op184.writes = [StarDep(name='buf184', mode=None)]
op184.unmet_dependencies = [StarDep(name='buf182', mode=None), StarDep(name='buf183', mode=None)]
op184.met_dependencies = []
op184.outputs = [
    buf184: ExternKernelOut
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf184.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op184.node.kernel = extern_kernels.bmm


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 393216})]
op185.unmet_dependencies = [   MemoryDep('buf184', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op185.met_dependencies = []
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (393216, 1)
op185.sizes = ([2, 256, 12, 64], [])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op185_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf185', get_index_1, load, None)
        return store


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = [StarDep(name='arg131_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf186.users = [
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=True, is_weak=False),
    ]
]
op186.node.kernel = extern_kernels.mm


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 512})]
op187.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 393216}), MemoryDep('buf186', c0, {c0: 393216})]
op187.met_dependencies = [MemoryDep('arg132_1', c1, {c0: 512, c1: 768})]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf187.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (512, 768)
op187.sizes = ([512], [768])
buf186_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg132_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op187_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg132_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf173', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf187', get_index_3, getitem)
        return store_reduction


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 512})]
op188.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 393216}), MemoryDep('buf186', c0, {c0: 393216})]
op188.met_dependencies = [MemoryDep('arg132_1', c1, {c0: 512, c1: 768})]
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf188.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (512, 768)
op188.sizes = ([512], [768])
buf186_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg132_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op188_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg132_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf173', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf188', get_index_3, getitem_1)
        return store_reduction


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 393216})]
op190.unmet_dependencies = 
    [   MemoryDep('buf173', c0, {c0: 393216}),
        MemoryDep('buf186', c0, {c0: 393216}),
        MemoryDep('buf187', c0, {c0: 512}),
        MemoryDep('buf188', c0, {c0: 512})]
op190.met_dependencies = 
    [   MemoryDep('arg132_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg133_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg134_1', c1, {c0: 512, c1: 768})]
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf190.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
    ]
]
op190.group.device = cuda:0
op190.group.iteration = (393216, 1)
op190.sizes = ([512, 768], [])
buf186_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg132_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg133_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg134_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op190_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg132_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf173', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf187', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf188', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg133_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg134_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf190', get_index_7, add_3, None)
        return store


op191: ExternKernelSchedulerNode(ExternKernelOut)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op191.met_dependencies = [StarDep(name='arg135_1', mode=None)]
op191.outputs = [
    buf191: ExternKernelOut
    buf191.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf191.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False)]
]
op191.node.kernel = extern_kernels.mm


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 1572864})]
op192.unmet_dependencies = [MemoryDep('buf191', c0, {c0: 1572864})]
op192.met_dependencies = [MemoryDep('arg136_1', c1, {c0: 512, c1: 3072})]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (1572864, 1)
op192.sizes = ([512, 3072], [])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg136_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op192_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf191', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg136_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf192', get_index_4, mul_2, None)
        return store


op193: ExternKernelSchedulerNode(ExternKernelOut)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf192', mode=None)]
op193.met_dependencies = [StarDep(name='arg137_1', mode=None)]
op193.outputs = [
    buf193: ExternKernelOut
    buf193.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf193.users = [
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
    ]
]
op193.node.kernel = extern_kernels.mm


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 512})]
op194.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 393216}), MemoryDep('buf193', c0, {c0: 393216})]
op194.met_dependencies = [MemoryDep('arg138_1', c1, {c0: 512, c1: 768})]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf194.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (512, 768)
op194.sizes = ([512], [768])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg138_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op194_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg138_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf190', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf194', get_index_3, getitem)
        return store_reduction


op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 512})]
op195.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 393216}), MemoryDep('buf193', c0, {c0: 393216})]
op195.met_dependencies = [MemoryDep('arg138_1', c1, {c0: 512, c1: 768})]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf195.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (512, 768)
op195.sizes = ([512], [768])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg138_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf195_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op195_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg138_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf190', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf195', get_index_3, getitem_1)
        return store_reduction


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 393216})]
op197.unmet_dependencies = 
    [   MemoryDep('buf190', c0, {c0: 393216}),
        MemoryDep('buf193', c0, {c0: 393216}),
        MemoryDep('buf194', c0, {c0: 512}),
        MemoryDep('buf195', c0, {c0: 512})]
op197.met_dependencies = 
    [   MemoryDep('arg138_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg139_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg140_1', c1, {c0: 512, c1: 768})]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf197.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False),
    ]
]
op197.group.device = cuda:0
op197.group.iteration = (393216, 1)
op197.sizes = ([512, 768], [])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg138_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf195_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg139_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg140_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op197_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg138_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf190', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf194', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf195', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg139_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg140_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf197', get_index_7, add_3, None)
        return store


op198: ExternKernelSchedulerNode(ExternKernelOut)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op198.met_dependencies = [StarDep(name='arg141_1', mode=None)]
op198.outputs = [
    buf198: ExternKernelOut
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf198.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op198.node.kernel = extern_kernels.mm


op199: ExternKernelSchedulerNode(ExternKernelOut)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op199.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelOut
    buf199.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf199.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op199.node.kernel = extern_kernels.mm


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 393216})]
op200.unmet_dependencies = [   MemoryDep('buf198', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op200.met_dependencies = [MemoryDep('arg142_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (393216, 1)
op200.sizes = ([2, 12, 256, 64], [])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg142_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op200_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg142_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf200', get_index_2, add, None)
        return store


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 393216})]
op201.unmet_dependencies = [MemoryDep('buf199', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op201.met_dependencies = [MemoryDep('arg144_1', c1, {c0: 2, c1: 768})]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (393216, 1)
op201.sizes = ([2, 768, 256], [])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg144_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op201_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg144_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf201', get_index_2, add, None)
        return store


op202: ExternKernelSchedulerNode(ExternKernelOut)
op202.writes = [StarDep(name='buf202', mode=None)]
op202.unmet_dependencies = [StarDep(name='buf200', mode=None), StarDep(name='buf201', mode=None)]
op202.met_dependencies = []
op202.outputs = [
    buf202: ExternKernelOut
    buf202.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf202.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
    ]
]
op202.node.kernel = extern_kernels.bmm


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 6144})]
op203.unmet_dependencies = [MemoryDep('buf202', c0, {c0: 1572864})]
op203.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf203.users = [
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
    ]
]
op203.group.device = cuda:0
op203.group.iteration = (6144, 256)
op203.sizes = ([2, 3072], [256])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op203_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf203', get_index_2, reduction)
        return store_reduction


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 6144})]
op204.unmet_dependencies = [MemoryDep('buf202', c0, {c0: 1572864}), MemoryDep('buf203', c0, {c0: 6144})]
op204.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf204.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (6144, 256)
op204.sizes = ([2, 3072], [256])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf204_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op204_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf203', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf204', get_index_3, reduction)
        return store_reduction


op205: ExternKernelSchedulerNode(ExternKernelOut)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op205.met_dependencies = [StarDep(name='arg145_1', mode=None)]
op205.outputs = [
    buf205: ExternKernelOut
    buf205.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf205.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op205.node.kernel = extern_kernels.mm


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 1572864})]
op206.unmet_dependencies = 
    [   MemoryDep('buf202', c0, {c0: 1572864}),
        MemoryDep('buf203', c0, {c0: 6144}),
        MemoryDep('buf204', c0, {c0: 6144})]
op206.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (1572864, 1)
op206.sizes = ([2, 3072, 256], [])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf204_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op206_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf203', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf204', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf206', get_index_4, truediv, None)
        return store


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 393216})]
op207.unmet_dependencies = [   MemoryDep('buf205', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op207.met_dependencies = [MemoryDep('arg146_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (393216, 1)
op207.sizes = ([2, 12, 256, 64], [])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg146_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op207_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg146_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf207', get_index_2, add, None)
        return store


op208: ExternKernelSchedulerNode(ExternKernelOut)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = [StarDep(name='buf206', mode=None), StarDep(name='buf207', mode=None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: ExternKernelOut
    buf208.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf208.users = [NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op208.node.kernel = extern_kernels.bmm


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 393216})]
op209.unmet_dependencies = [   MemoryDep('buf208', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op209.met_dependencies = []
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (393216, 1)
op209.sizes = ([2, 256, 12, 64], [])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op209_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf209', get_index_1, load, None)
        return store


op210: ExternKernelSchedulerNode(ExternKernelOut)
op210.writes = [StarDep(name='buf210', mode=None)]
op210.unmet_dependencies = [StarDep(name='buf209', mode=None)]
op210.met_dependencies = [StarDep(name='arg147_1', mode=None)]
op210.outputs = [
    buf210: ExternKernelOut
    buf210.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf210.users = [
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False),
    ]
]
op210.node.kernel = extern_kernels.mm


op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 512})]
op211.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 393216}), MemoryDep('buf210', c0, {c0: 393216})]
op211.met_dependencies = [MemoryDep('arg148_1', c1, {c0: 512, c1: 768})]
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf211.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (512, 768)
op211.sizes = ([512], [768])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg148_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op211_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg148_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf197', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf211', get_index_3, getitem)
        return store_reduction


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 512})]
op212.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 393216}), MemoryDep('buf210', c0, {c0: 393216})]
op212.met_dependencies = [MemoryDep('arg148_1', c1, {c0: 512, c1: 768})]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf212.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (512, 768)
op212.sizes = ([512], [768])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg148_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op212_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg148_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf197', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf212', get_index_3, getitem_1)
        return store_reduction


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 393216})]
op214.unmet_dependencies = 
    [   MemoryDep('buf197', c0, {c0: 393216}),
        MemoryDep('buf210', c0, {c0: 393216}),
        MemoryDep('buf211', c0, {c0: 512}),
        MemoryDep('buf212', c0, {c0: 512})]
op214.met_dependencies = 
    [   MemoryDep('arg148_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg149_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg150_1', c1, {c0: 512, c1: 768})]
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf214.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
    ]
]
op214.group.device = cuda:0
op214.group.iteration = (393216, 1)
op214.sizes = ([512, 768], [])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg148_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg149_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg150_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op214_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg148_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf197', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf211', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf212', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg149_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg150_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf214', get_index_7, add_3, None)
        return store


op215: ExternKernelSchedulerNode(ExternKernelOut)
op215.writes = [StarDep(name='buf215', mode=None)]
op215.unmet_dependencies = [StarDep(name='buf214', mode=None)]
op215.met_dependencies = [StarDep(name='arg151_1', mode=None)]
op215.outputs = [
    buf215: ExternKernelOut
    buf215.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf215.users = [NodeUser(node=SchedulerNode(name='op216'), can_inplace=True, is_weak=False)]
]
op215.node.kernel = extern_kernels.mm


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 1572864})]
op216.unmet_dependencies = [MemoryDep('buf215', c0, {c0: 1572864})]
op216.met_dependencies = [MemoryDep('arg152_1', c1, {c0: 512, c1: 3072})]
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf216.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (1572864, 1)
op216.sizes = ([512, 3072], [])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg152_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op216_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf215', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg152_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf215', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg152_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf216', get_index_4, mul_2, None)
        return store


op217: ExternKernelSchedulerNode(ExternKernelOut)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf216', mode=None)]
op217.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op217.outputs = [
    buf217: ExternKernelOut
    buf217.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
    ]
]
op217.node.kernel = extern_kernels.mm


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 512})]
op218.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 393216}), MemoryDep('buf217', c0, {c0: 393216})]
op218.met_dependencies = [MemoryDep('arg154_1', c1, {c0: 512, c1: 768})]
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf218.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (512, 768)
op218.sizes = ([512], [768])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg154_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op218_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf214', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf218', get_index_3, getitem)
        return store_reduction


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 512})]
op219.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 393216}), MemoryDep('buf217', c0, {c0: 393216})]
op219.met_dependencies = [MemoryDep('arg154_1', c1, {c0: 512, c1: 768})]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf219.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (512, 768)
op219.sizes = ([512], [768])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg154_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf219_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op219_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf214', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf219', get_index_3, getitem_1)
        return store_reduction


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 393216})]
op221.unmet_dependencies = 
    [   MemoryDep('buf214', c0, {c0: 393216}),
        MemoryDep('buf217', c0, {c0: 393216}),
        MemoryDep('buf218', c0, {c0: 512}),
        MemoryDep('buf219', c0, {c0: 512})]
op221.met_dependencies = 
    [   MemoryDep('arg154_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg155_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg156_1', c1, {c0: 512, c1: 768})]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf221.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False),
    ]
]
op221.group.device = cuda:0
op221.group.iteration = (393216, 1)
op221.sizes = ([512, 768], [])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg154_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf219_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg155_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg156_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf221_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op221_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf214', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf218', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf219', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg155_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg156_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf221', get_index_7, add_3, None)
        return store


op222: ExternKernelSchedulerNode(ExternKernelOut)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='arg157_1', mode=None)]
op222.outputs = [
    buf222: ExternKernelOut
    buf222.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf222.users = [NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op222.node.kernel = extern_kernels.mm


op223: ExternKernelSchedulerNode(ExternKernelOut)
op223.writes = [StarDep(name='buf223', mode=None)]
op223.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op223.met_dependencies = [StarDep(name='arg159_1', mode=None)]
op223.outputs = [
    buf223: ExternKernelOut
    buf223.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf223.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op223.node.kernel = extern_kernels.mm


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 393216})]
op224.unmet_dependencies = [   MemoryDep('buf222', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op224.met_dependencies = [MemoryDep('arg158_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (393216, 1)
op224.sizes = ([2, 12, 256, 64], [])
buf222_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg158_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op224_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg158_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf224', get_index_2, add, None)
        return store


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 393216})]
op225.unmet_dependencies = [MemoryDep('buf223', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op225.met_dependencies = [MemoryDep('arg160_1', c1, {c0: 2, c1: 768})]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf225.users = [NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (393216, 1)
op225.sizes = ([2, 768, 256], [])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg160_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op225_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg160_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf225', get_index_2, add, None)
        return store


op226: ExternKernelSchedulerNode(ExternKernelOut)
op226.writes = [StarDep(name='buf226', mode=None)]
op226.unmet_dependencies = [StarDep(name='buf224', mode=None), StarDep(name='buf225', mode=None)]
op226.met_dependencies = []
op226.outputs = [
    buf226: ExternKernelOut
    buf226.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf226.users = [
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=True, is_weak=False),
    ]
]
op226.node.kernel = extern_kernels.bmm


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 6144})]
op227.unmet_dependencies = [MemoryDep('buf226', c0, {c0: 1572864})]
op227.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
    ]
]
op227.group.device = cuda:0
op227.group.iteration = (6144, 256)
op227.sizes = ([2, 3072], [256])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op227_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf227', get_index_2, reduction)
        return store_reduction


op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 6144})]
op228.unmet_dependencies = [MemoryDep('buf226', c0, {c0: 1572864}), MemoryDep('buf227', c0, {c0: 6144})]
op228.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf228.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (6144, 256)
op228.sizes = ([2, 3072], [256])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op228_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf227', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf228', get_index_3, reduction)
        return store_reduction


op229: ExternKernelSchedulerNode(ExternKernelOut)
op229.writes = [StarDep(name='buf229', mode=None)]
op229.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op229.met_dependencies = [StarDep(name='arg161_1', mode=None)]
op229.outputs = [
    buf229: ExternKernelOut
    buf229.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf229.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op229.node.kernel = extern_kernels.mm


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 1572864})]
op230.unmet_dependencies = 
    [   MemoryDep('buf226', c0, {c0: 1572864}),
        MemoryDep('buf227', c0, {c0: 6144}),
        MemoryDep('buf228', c0, {c0: 6144})]
op230.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf230.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (1572864, 1)
op230.sizes = ([2, 3072, 256], [])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op230_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf227', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf228', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf230', get_index_4, truediv, None)
        return store


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 393216})]
op231.unmet_dependencies = [   MemoryDep('buf229', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op231.met_dependencies = [MemoryDep('arg162_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (393216, 1)
op231.sizes = ([2, 12, 256, 64], [])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg162_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op231_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg162_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf231', get_index_2, add, None)
        return store


op232: ExternKernelSchedulerNode(ExternKernelOut)
op232.writes = [StarDep(name='buf232', mode=None)]
op232.unmet_dependencies = [StarDep(name='buf230', mode=None), StarDep(name='buf231', mode=None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: ExternKernelOut
    buf232.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf232.users = [NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.node.kernel = extern_kernels.bmm


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 393216})]
op233.unmet_dependencies = [   MemoryDep('buf232', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op233.met_dependencies = []
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf233.users = [NodeUser(node=ExternKernelSchedulerNode(name='op234'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (393216, 1)
op233.sizes = ([2, 256, 12, 64], [])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op233_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf233', get_index_1, load, None)
        return store


op234: ExternKernelSchedulerNode(ExternKernelOut)
op234.writes = [StarDep(name='buf234', mode=None)]
op234.unmet_dependencies = [StarDep(name='buf233', mode=None)]
op234.met_dependencies = [StarDep(name='arg163_1', mode=None)]
op234.outputs = [
    buf234: ExternKernelOut
    buf234.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf234.users = [
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False),
    ]
]
op234.node.kernel = extern_kernels.mm


op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 512})]
op235.unmet_dependencies = [MemoryDep('buf221', c0, {c0: 393216}), MemoryDep('buf234', c0, {c0: 393216})]
op235.met_dependencies = [MemoryDep('arg164_1', c1, {c0: 512, c1: 768})]
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf235.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (512, 768)
op235.sizes = ([512], [768])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg164_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf221_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op235_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg164_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf221', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf235', get_index_3, getitem)
        return store_reduction


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 512})]
op236.unmet_dependencies = [MemoryDep('buf221', c0, {c0: 393216}), MemoryDep('buf234', c0, {c0: 393216})]
op236.met_dependencies = [MemoryDep('arg164_1', c1, {c0: 512, c1: 768})]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf236.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (512, 768)
op236.sizes = ([512], [768])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg164_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf221_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op236_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg164_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf221', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf236', get_index_3, getitem_1)
        return store_reduction


op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 393216})]
op238.unmet_dependencies = 
    [   MemoryDep('buf221', c0, {c0: 393216}),
        MemoryDep('buf234', c0, {c0: 393216}),
        MemoryDep('buf235', c0, {c0: 512}),
        MemoryDep('buf236', c0, {c0: 512})]
op238.met_dependencies = 
    [   MemoryDep('arg164_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg165_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg166_1', c1, {c0: 512, c1: 768})]
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf238.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False),
    ]
]
op238.group.device = cuda:0
op238.group.iteration = (393216, 1)
op238.sizes = ([512, 768], [])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg164_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf221_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg165_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg166_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op238_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg164_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf221', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf235', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf236', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg165_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg166_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf238', get_index_7, add_3, None)
        return store


op239: ExternKernelSchedulerNode(ExternKernelOut)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf238', mode=None)]
op239.met_dependencies = [StarDep(name='arg167_1', mode=None)]
op239.outputs = [
    buf239: ExternKernelOut
    buf239.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf239.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=True, is_weak=False)]
]
op239.node.kernel = extern_kernels.mm


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 1572864})]
op240.unmet_dependencies = [MemoryDep('buf239', c0, {c0: 1572864})]
op240.met_dependencies = [MemoryDep('arg168_1', c1, {c0: 512, c1: 3072})]
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (1572864, 1)
op240.sizes = ([512, 3072], [])
buf239_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg168_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf240_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op240_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg168_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf239', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg168_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf240', get_index_4, mul_2, None)
        return store


op241: ExternKernelSchedulerNode(ExternKernelOut)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op241.met_dependencies = [StarDep(name='arg169_1', mode=None)]
op241.outputs = [
    buf241: ExternKernelOut
    buf241.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf241.users = [
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False),
    ]
]
op241.node.kernel = extern_kernels.mm


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 512})]
op242.unmet_dependencies = [MemoryDep('buf238', c0, {c0: 393216}), MemoryDep('buf241', c0, {c0: 393216})]
op242.met_dependencies = [MemoryDep('arg170_1', c1, {c0: 512, c1: 768})]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf242.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op242.group.device = cuda:0
op242.group.iteration = (512, 768)
op242.sizes = ([512], [768])
buf241_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg170_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op242_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg170_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf238', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf242', get_index_3, getitem)
        return store_reduction


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 512})]
op243.unmet_dependencies = [MemoryDep('buf238', c0, {c0: 393216}), MemoryDep('buf241', c0, {c0: 393216})]
op243.met_dependencies = [MemoryDep('arg170_1', c1, {c0: 512, c1: 768})]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf243.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (512, 768)
op243.sizes = ([512], [768])
buf241_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg170_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op243_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg170_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf238', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf243', get_index_3, getitem_1)
        return store_reduction


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 393216})]
op245.unmet_dependencies = 
    [   MemoryDep('buf238', c0, {c0: 393216}),
        MemoryDep('buf241', c0, {c0: 393216}),
        MemoryDep('buf242', c0, {c0: 512}),
        MemoryDep('buf243', c0, {c0: 512})]
op245.met_dependencies = 
    [   MemoryDep('arg170_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg171_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg172_1', c1, {c0: 512, c1: 768})]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf245.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False),
    ]
]
op245.group.device = cuda:0
op245.group.iteration = (393216, 1)
op245.sizes = ([512, 768], [])
buf241_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg170_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg171_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg172_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op245_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg170_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf238', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf242', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf243', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg171_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg172_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf245', get_index_7, add_3, None)
        return store


op246: ExternKernelSchedulerNode(ExternKernelOut)
op246.writes = [StarDep(name='buf246', mode=None)]
op246.unmet_dependencies = [StarDep(name='buf245', mode=None)]
op246.met_dependencies = [StarDep(name='arg173_1', mode=None)]
op246.outputs = [
    buf246: ExternKernelOut
    buf246.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf246.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op246.node.kernel = extern_kernels.mm


op247: ExternKernelSchedulerNode(ExternKernelOut)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf245', mode=None)]
op247.met_dependencies = [StarDep(name='arg175_1', mode=None)]
op247.outputs = [
    buf247: ExternKernelOut
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf247.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op247.node.kernel = extern_kernels.mm


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 393216})]
op248.unmet_dependencies = [   MemoryDep('buf246', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op248.met_dependencies = [MemoryDep('arg174_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (393216, 1)
op248.sizes = ([2, 12, 256, 64], [])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg174_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op248_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf246', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg174_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf248', get_index_2, add, None)
        return store


op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 393216})]
op249.unmet_dependencies = [MemoryDep('buf247', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op249.met_dependencies = [MemoryDep('arg176_1', c1, {c0: 2, c1: 768})]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf249.users = [NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (393216, 1)
op249.sizes = ([2, 768, 256], [])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg176_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op249_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg176_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf249', get_index_2, add, None)
        return store


op250: ExternKernelSchedulerNode(ExternKernelOut)
op250.writes = [StarDep(name='buf250', mode=None)]
op250.unmet_dependencies = [StarDep(name='buf248', mode=None), StarDep(name='buf249', mode=None)]
op250.met_dependencies = []
op250.outputs = [
    buf250: ExternKernelOut
    buf250.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf250.users = [
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=True, is_weak=False),
    ]
]
op250.node.kernel = extern_kernels.bmm


op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 6144})]
op251.unmet_dependencies = [MemoryDep('buf250', c0, {c0: 1572864})]
op251.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf251.users = [
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
    ]
]
op251.group.device = cuda:0
op251.group.iteration = (6144, 256)
op251.sizes = ([2, 3072], [256])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op251_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf251', get_index_2, reduction)
        return store_reduction


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 6144})]
op252.unmet_dependencies = [MemoryDep('buf250', c0, {c0: 1572864}), MemoryDep('buf251', c0, {c0: 6144})]
op252.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf252.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (6144, 256)
op252.sizes = ([2, 3072], [256])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op252_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf251', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf252', get_index_3, reduction)
        return store_reduction


op253: ExternKernelSchedulerNode(ExternKernelOut)
op253.writes = [StarDep(name='buf253', mode=None)]
op253.unmet_dependencies = [StarDep(name='buf245', mode=None)]
op253.met_dependencies = [StarDep(name='arg177_1', mode=None)]
op253.outputs = [
    buf253: ExternKernelOut
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf253.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op253.node.kernel = extern_kernels.mm


op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 1572864})]
op254.unmet_dependencies = 
    [   MemoryDep('buf250', c0, {c0: 1572864}),
        MemoryDep('buf251', c0, {c0: 6144}),
        MemoryDep('buf252', c0, {c0: 6144})]
op254.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf254.users = [NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (1572864, 1)
op254.sizes = ([2, 3072, 256], [])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf254_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op254_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf251', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf252', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf254', get_index_4, truediv, None)
        return store


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 393216})]
op255.unmet_dependencies = [   MemoryDep('buf253', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op255.met_dependencies = [MemoryDep('arg178_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (393216, 1)
op255.sizes = ([2, 12, 256, 64], [])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg178_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op255_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg178_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf255', get_index_2, add, None)
        return store


op256: ExternKernelSchedulerNode(ExternKernelOut)
op256.writes = [StarDep(name='buf256', mode=None)]
op256.unmet_dependencies = [StarDep(name='buf254', mode=None), StarDep(name='buf255', mode=None)]
op256.met_dependencies = []
op256.outputs = [
    buf256: ExternKernelOut
    buf256.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf256.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op256.node.kernel = extern_kernels.bmm


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 393216})]
op257.unmet_dependencies = [   MemoryDep('buf256', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op257.met_dependencies = []
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf257.users = [NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (393216, 1)
op257.sizes = ([2, 256, 12, 64], [])
buf256_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op257_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf257', get_index_1, load, None)
        return store


op258: ExternKernelSchedulerNode(ExternKernelOut)
op258.writes = [StarDep(name='buf258', mode=None)]
op258.unmet_dependencies = [StarDep(name='buf257', mode=None)]
op258.met_dependencies = [StarDep(name='arg179_1', mode=None)]
op258.outputs = [
    buf258: ExternKernelOut
    buf258.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf258.users = [
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False),
    ]
]
op258.node.kernel = extern_kernels.mm


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 512})]
op259.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 393216}), MemoryDep('buf258', c0, {c0: 393216})]
op259.met_dependencies = [MemoryDep('arg180_1', c1, {c0: 512, c1: 768})]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf259.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (512, 768)
op259.sizes = ([512], [768])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg180_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op259_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg180_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf245', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf259', get_index_3, getitem)
        return store_reduction


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 512})]
op260.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 393216}), MemoryDep('buf258', c0, {c0: 393216})]
op260.met_dependencies = [MemoryDep('arg180_1', c1, {c0: 512, c1: 768})]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf260.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (512, 768)
op260.sizes = ([512], [768])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg180_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op260_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg180_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf245', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf260', get_index_3, getitem_1)
        return store_reduction


op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 393216})]
op262.unmet_dependencies = 
    [   MemoryDep('buf245', c0, {c0: 393216}),
        MemoryDep('buf258', c0, {c0: 393216}),
        MemoryDep('buf259', c0, {c0: 512}),
        MemoryDep('buf260', c0, {c0: 512})]
op262.met_dependencies = 
    [   MemoryDep('arg180_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg181_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg182_1', c1, {c0: 512, c1: 768})]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf262.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=True, is_weak=False),
    ]
]
op262.group.device = cuda:0
op262.group.iteration = (393216, 1)
op262.sizes = ([512, 768], [])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg180_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg181_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg182_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op262_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg180_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf245', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf259', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf260', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg181_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg182_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf262', get_index_7, add_3, None)
        return store


op263: ExternKernelSchedulerNode(ExternKernelOut)
op263.writes = [StarDep(name='buf263', mode=None)]
op263.unmet_dependencies = [StarDep(name='buf262', mode=None)]
op263.met_dependencies = [StarDep(name='arg183_1', mode=None)]
op263.outputs = [
    buf263: ExternKernelOut
    buf263.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf263.users = [NodeUser(node=SchedulerNode(name='op264'), can_inplace=True, is_weak=False)]
]
op263.node.kernel = extern_kernels.mm


op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 1572864})]
op264.unmet_dependencies = [MemoryDep('buf263', c0, {c0: 1572864})]
op264.met_dependencies = [MemoryDep('arg184_1', c1, {c0: 512, c1: 3072})]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf264.users = [NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (1572864, 1)
op264.sizes = ([512, 3072], [])
buf263_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg184_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op264_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg184_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf263', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg184_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf264', get_index_4, mul_2, None)
        return store


op265: ExternKernelSchedulerNode(ExternKernelOut)
op265.writes = [StarDep(name='buf265', mode=None)]
op265.unmet_dependencies = [StarDep(name='buf264', mode=None)]
op265.met_dependencies = [StarDep(name='arg185_1', mode=None)]
op265.outputs = [
    buf265: ExternKernelOut
    buf265.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf265.users = [
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=True, is_weak=False),
    ]
]
op265.node.kernel = extern_kernels.mm


op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 512})]
op266.unmet_dependencies = [MemoryDep('buf262', c0, {c0: 393216}), MemoryDep('buf265', c0, {c0: 393216})]
op266.met_dependencies = [MemoryDep('arg186_1', c1, {c0: 512, c1: 768})]
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf266.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op266.group.device = cuda:0
op266.group.iteration = (512, 768)
op266.sizes = ([512], [768])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg186_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op266_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf262', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf266', get_index_3, getitem)
        return store_reduction


op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 512})]
op267.unmet_dependencies = [MemoryDep('buf262', c0, {c0: 393216}), MemoryDep('buf265', c0, {c0: 393216})]
op267.met_dependencies = [MemoryDep('arg186_1', c1, {c0: 512, c1: 768})]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf267.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op267.group.device = cuda:0
op267.group.iteration = (512, 768)
op267.sizes = ([512], [768])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg186_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op267_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf262', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf267', get_index_3, getitem_1)
        return store_reduction


op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 393216})]
op269.unmet_dependencies = 
    [   MemoryDep('buf262', c0, {c0: 393216}),
        MemoryDep('buf265', c0, {c0: 393216}),
        MemoryDep('buf266', c0, {c0: 512}),
        MemoryDep('buf267', c0, {c0: 512})]
op269.met_dependencies = 
    [   MemoryDep('arg186_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg187_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg188_1', c1, {c0: 512, c1: 768})]
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf269.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=True, is_weak=False),
    ]
]
op269.group.device = cuda:0
op269.group.iteration = (393216, 1)
op269.sizes = ([512, 768], [])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg186_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg187_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg188_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op269_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf262', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf266', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf267', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg187_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg188_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf269', get_index_7, add_3, None)
        return store


op270: ExternKernelSchedulerNode(ExternKernelOut)
op270.writes = [StarDep(name='buf270', mode=None)]
op270.unmet_dependencies = [StarDep(name='buf269', mode=None)]
op270.met_dependencies = [StarDep(name='arg189_1', mode=None)]
op270.outputs = [
    buf270: ExternKernelOut
    buf270.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf270.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op270.node.kernel = extern_kernels.mm


op271: ExternKernelSchedulerNode(ExternKernelOut)
op271.writes = [StarDep(name='buf271', mode=None)]
op271.unmet_dependencies = [StarDep(name='buf269', mode=None)]
op271.met_dependencies = [StarDep(name='arg191_1', mode=None)]
op271.outputs = [
    buf271: ExternKernelOut
    buf271.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf271.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
]
op271.node.kernel = extern_kernels.mm


op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', c0, {c0: 393216})]
op272.unmet_dependencies = [   MemoryDep('buf270', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op272.met_dependencies = [MemoryDep('arg190_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf272.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op272.group.device = cuda:0
op272.group.iteration = (393216, 1)
op272.sizes = ([2, 12, 256, 64], [])
buf270_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg190_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op272_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf270', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg190_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf272', get_index_2, add, None)
        return store


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 393216})]
op273.unmet_dependencies = [MemoryDep('buf271', 196608*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 256})]
op273.met_dependencies = [MemoryDep('arg192_1', c1, {c0: 2, c1: 768})]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (393216, 1)
op273.sizes = ([2, 768, 256], [])
buf271_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg192_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 256], stride=[196608, 16384, 256, 1])
class op273_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = p1
    index2 = 196608*p0 + 256*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg192_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf273', get_index_2, add, None)
        return store


op274: ExternKernelSchedulerNode(ExternKernelOut)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf272', mode=None), StarDep(name='buf273', mode=None)]
op274.met_dependencies = []
op274.outputs = [
    buf274: ExternKernelOut
    buf274.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
    buf274.users = [
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
    ]
]
op274.node.kernel = extern_kernels.bmm


op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 6144})]
op275.unmet_dependencies = [MemoryDep('buf274', c0, {c0: 1572864})]
op275.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf275.users = [
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
    ]
]
op275.group.device = cuda:0
op275.group.iteration = (6144, 256)
op275.sizes = ([2, 3072], [256])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op275_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf275', get_index_2, reduction)
        return store_reduction


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 6144})]
op276.unmet_dependencies = [MemoryDep('buf274', c0, {c0: 1572864}), MemoryDep('buf275', c0, {c0: 6144})]
op276.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
    buf276.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (6144, 256)
op276.sizes = ([2, 3072], [256])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
class op276_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf275', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf276', get_index_3, reduction)
        return store_reduction


op277: ExternKernelSchedulerNode(ExternKernelOut)
op277.writes = [StarDep(name='buf277', mode=None)]
op277.unmet_dependencies = [StarDep(name='buf269', mode=None)]
op277.met_dependencies = [StarDep(name='arg193_1', mode=None)]
op277.outputs = [
    buf277: ExternKernelOut
    buf277.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf277.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op277.node.kernel = extern_kernels.mm


op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 1572864})]
op278.unmet_dependencies = 
    [   MemoryDep('buf274', c0, {c0: 1572864}),
        MemoryDep('buf275', c0, {c0: 6144}),
        MemoryDep('buf276', c0, {c0: 6144})]
op278.met_dependencies = [MemoryDep('arg1_1', 256*c0 + c2, {c0: 2, c1: 3072, c2: 256})]
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
    buf278.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op278.group.device = cuda:0
op278.group.iteration = (1572864, 1)
op278.sizes = ([2, 3072, 256], [])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 256], stride=[65536, 256, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 256], stride=[256, 1])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 1], stride=[3072, 256, 1, 6144])
buf278_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 256], stride=[786432, 65536, 256, 1])
class op278_loop_body:
    var_ranges = {p0: 2, p1: 3072, p2: 256}
    index0 = 786432*p0 + 256*p1 + p2
    index1 = 256*p0 + p2
    index2 = 3072*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, to_dtype)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf275', get_index_2)
        sub_1 = ops.sub(add, load_2)
        exp = ops.exp(sub_1)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf276', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf278', get_index_4, truediv, None)
        return store


op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 393216})]
op279.unmet_dependencies = [   MemoryDep('buf277', 196608*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op279.met_dependencies = [MemoryDep('arg194_1', 64*c1 + c3, {c0: 2, c1: 12, c2: 256, c3: 64})]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (393216, 1)
op279.sizes = ([2, 12, 256, 64], [])
buf277_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg194_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf279_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 256, 64], stride=[196608, 16384, 64, 1])
class op279_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 256, p3: 64}
    index0 = 196608*p0 + 64*p1 + 768*p2 + p3
    index1 = 64*p1 + p3
    index2 = 196608*p0 + 16384*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg194_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf279', get_index_2, add, None)
        return store


op280: ExternKernelSchedulerNode(ExternKernelOut)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf278', mode=None), StarDep(name='buf279', mode=None)]
op280.met_dependencies = []
op280.outputs = [
    buf280: ExternKernelOut
    buf280.layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
    buf280.users = [NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op280.node.kernel = extern_kernels.bmm


op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 393216})]
op281.unmet_dependencies = [   MemoryDep('buf280', 196608*c0 + 64*c1 + 16384*c2 + c3, {c0: 2, c1: 256, c2: 12, c3: 64})]
op281.met_dependencies = []
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
    buf281.users = [NodeUser(node=ExternKernelSchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op281.group.device = cuda:0
op281.group.iteration = (393216, 1)
op281.sizes = ([2, 256, 12, 64], [])
buf280_layout = FixedLayout('cuda:0', torch.float32, size=[24, 256, 64], stride=[16384, 64, 1])
buf281_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 12, 64], stride=[196608, 768, 64, 1])
class op281_loop_body:
    var_ranges = {p0: 2, p1: 256, p2: 12, p3: 64}
    index0 = 196608*p0 + 64*p1 + 16384*p2 + p3
    index1 = 196608*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf281', get_index_1, load, None)
        return store


op282: ExternKernelSchedulerNode(ExternKernelOut)
op282.writes = [StarDep(name='buf282', mode=None)]
op282.unmet_dependencies = [StarDep(name='buf281', mode=None)]
op282.met_dependencies = [StarDep(name='arg195_1', mode=None)]
op282.outputs = [
    buf282: ExternKernelOut
    buf282.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf282.users = [
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=True, is_weak=False),
    ]
]
op282.node.kernel = extern_kernels.mm


op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 512})]
op283.unmet_dependencies = [MemoryDep('buf269', c0, {c0: 393216}), MemoryDep('buf282', c0, {c0: 393216})]
op283.met_dependencies = [MemoryDep('arg196_1', c1, {c0: 512, c1: 768})]
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf283.users = [NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op283.group.device = cuda:0
op283.group.iteration = (512, 768)
op283.sizes = ([512], [768])
buf282_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg196_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op283_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf282', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg196_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf269', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf283', get_index_3, getitem)
        return store_reduction


op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 512})]
op284.unmet_dependencies = [MemoryDep('buf269', c0, {c0: 393216}), MemoryDep('buf282', c0, {c0: 393216})]
op284.met_dependencies = [MemoryDep('arg196_1', c1, {c0: 512, c1: 768})]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf284.users = [NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op284.group.device = cuda:0
op284.group.iteration = (512, 768)
op284.sizes = ([512], [768])
buf282_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg196_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op284_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf282', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg196_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf269', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf284', get_index_3, getitem_1)
        return store_reduction


op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 393216})]
op286.unmet_dependencies = 
    [   MemoryDep('buf269', c0, {c0: 393216}),
        MemoryDep('buf282', c0, {c0: 393216}),
        MemoryDep('buf283', c0, {c0: 512}),
        MemoryDep('buf284', c0, {c0: 512})]
op286.met_dependencies = 
    [   MemoryDep('arg196_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg197_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg198_1', c1, {c0: 512, c1: 768})]
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf286.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False),
    ]
]
op286.group.device = cuda:0
op286.group.iteration = (393216, 1)
op286.sizes = ([512, 768], [])
buf282_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg196_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg197_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg198_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op286_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf282', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg196_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf269', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf283', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf284', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg197_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg198_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf286', get_index_7, add_3, None)
        return store


op287: ExternKernelSchedulerNode(ExternKernelOut)
op287.writes = [StarDep(name='buf287', mode=None)]
op287.unmet_dependencies = [StarDep(name='buf286', mode=None)]
op287.met_dependencies = [StarDep(name='arg199_1', mode=None)]
op287.outputs = [
    buf287: ExternKernelOut
    buf287.layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
    buf287.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=True, is_weak=False)]
]
op287.node.kernel = extern_kernels.mm


op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 1572864})]
op288.unmet_dependencies = [MemoryDep('buf287', c0, {c0: 1572864})]
op288.met_dependencies = [MemoryDep('arg200_1', c1, {c0: 512, c1: 3072})]
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
    buf288.users = [NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (1572864, 1)
op288.sizes = ([512, 3072], [])
buf287_layout = FixedLayout('cuda:0', torch.float32, size=[512, 3072], stride=[3072, 1])
arg200_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf288_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 3072], stride=[786432, 3072, 1])
class op288_loop_body:
    var_ranges = {p0: 512, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf287', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg200_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf287', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg200_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf288', get_index_4, mul_2, None)
        return store


op289: ExternKernelSchedulerNode(ExternKernelOut)
op289.writes = [StarDep(name='buf289', mode=None)]
op289.unmet_dependencies = [StarDep(name='buf288', mode=None)]
op289.met_dependencies = [StarDep(name='arg201_1', mode=None)]
op289.outputs = [
    buf289: ExternKernelOut
    buf289.layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
    buf289.users = [
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False),
    ]
]
op289.node.kernel = extern_kernels.mm


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 512})]
op290.unmet_dependencies = [MemoryDep('buf286', c0, {c0: 393216}), MemoryDep('buf289', c0, {c0: 393216})]
op290.met_dependencies = [MemoryDep('arg202_1', c1, {c0: 512, c1: 768})]
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf290.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (512, 768)
op290.sizes = ([512], [768])
buf289_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg202_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op290_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg202_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf286', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf290', get_index_3, getitem)
        return store_reduction


op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 512})]
op291.unmet_dependencies = [MemoryDep('buf286', c0, {c0: 393216}), MemoryDep('buf289', c0, {c0: 393216})]
op291.met_dependencies = [MemoryDep('arg202_1', c1, {c0: 512, c1: 768})]
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
    buf291.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
]
op291.group.device = cuda:0
op291.group.iteration = (512, 768)
op291.sizes = ([512], [768])
buf289_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg202_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf291_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
class op291_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg202_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf286', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf291', get_index_3, getitem_1)
        return store_reduction


op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 393216})]
op293.unmet_dependencies = 
    [   MemoryDep('buf286', c0, {c0: 393216}),
        MemoryDep('buf289', c0, {c0: 393216}),
        MemoryDep('buf290', c0, {c0: 512}),
        MemoryDep('buf291', c0, {c0: 512})]
op293.met_dependencies = 
    [   MemoryDep('arg202_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg203_1', c1, {c0: 512, c1: 768}),
        MemoryDep('arg204_1', c1, {c0: 512, c1: 768})]
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
    buf293.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op293.group.device = cuda:0
op293.group.iteration = (393216, 1)
op293.sizes = ([512, 768], [])
buf289_layout = FixedLayout('cuda:0', torch.float32, size=[512, 768], stride=[768, 1])
arg202_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
buf291_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 1], stride=[256, 1, 512])
arg203_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg204_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf293_layout = FixedLayout('cuda:0', torch.float32, size=[2, 256, 768], stride=[196608, 768, 1])
class op293_loop_body:
    var_ranges = {p0: 512, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg202_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf286', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf290', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf291', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg203_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg204_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf293', get_index_7, add_3, None)
        return store


op294: ExternKernelSchedulerNode(ExternKernelOut)
op294.writes = [StarDep(name='buf294', mode=None)]
op294.unmet_dependencies = [StarDep(name='buf293', mode=None)]
op294.met_dependencies = [StarDep(name='arg205_1', mode=None)]
op294.outputs = [
    buf294: ExternKernelOut
    buf294.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
    buf294.users = [NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False)]
]
op294.node.kernel = extern_kernels.mm


op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 1536})]
op295.unmet_dependencies = [MemoryDep('buf294', c0, {c0: 1536})]
op295.met_dependencies = [MemoryDep('arg206_1', c1, {c0: 2, c1: 768})]
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
    buf295.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op295.group.device = cuda:0
op295.group.iteration = (1536, 1)
op295.sizes = ([2, 768], [])
buf294_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
arg206_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf295_layout = FixedLayout('cuda:0', torch.float32, size=[2, 768], stride=[768, 1])
class op295_loop_body:
    var_ranges = {p0: 2, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg206_1', get_index_1)
        add = ops.add(load, load_1)
        tanh = ops.tanh(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf295', get_index_2, tanh, None)
        return store




# ===== run_2025_10_19_04_14_08_043050-pid_19/torchinductor/model__1_inference_1.1/output_code.py =====
# AOT ID: ['1_inference']
from ctypes import c_void_p, c_long, c_int
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align
from torch import device, empty_strided
from torch._inductor.async_compile import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels
from torch._inductor.codegen.multi_kernel import MultiKernelCall
import triton
import triton.language as tl
from torch._inductor.runtime.triton_heuristics import (
    grid,
    split_scan_grid,
    grid_combo_kernels,
    start_graph,
    end_graph,
    cooperative_reduction_grid,
)
from torch._C import _cuda_getCurrentRawStream as get_raw_stream
from torch._C import _cuda_getCurrentRawStream as get_raw_stream

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
_quantized = torch.ops._quantized
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
alloc_from_pool = torch.ops.inductor._alloc_from_pool
async_compile = AsyncCompile()
empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p


# kernel path: /tmp/torchinductor_root/no/cnos3dww5ys4sjcktg2xsbxabjrue4cpqjag5ijpkj7qwzqjucto.py
# Topologically Sorted Source Nodes: [inputs_embeds, position_embeddings, add, left_position_embeddings, add_1, upper_position_embeddings, add_2, right_position_embeddings, add_3, lower_position_embeddings, add_4, sub_1, h_position_embeddings, add_5, sub_2, w_position_embeddings, add_6, token_type_embeddings, embeddings, embeddings_1], Original ATen: [aten.embedding, aten.add, aten.sub, aten.native_layer_norm]
# Source node to ATen node mapping:
#   add => add
#   add_1 => add_1
#   add_2 => add_2
#   add_3 => add_3
#   add_4 => add_4
#   add_5 => add_5
#   add_6 => add_6
#   embeddings => add_7
#   embeddings_1 => add_8, add_9, mul_1, mul_2, rsqrt, sub_3, var_mean
#   h_position_embeddings => embedding_6
#   inputs_embeds => embedding
#   left_position_embeddings => embedding_2
#   lower_position_embeddings => embedding_5
#   position_embeddings => embedding_1
#   right_position_embeddings => embedding_4
#   sub_1 => sub_1
#   sub_2 => sub_2
#   token_type_embeddings => embedding_8
#   upper_position_embeddings => embedding_3
#   w_position_embeddings => embedding_7
# Graph fragment:
#   %embedding : [num_users=1] = call_function[target=torch.ops.aten.embedding.default](args = (%arg4_1, %arg0_1, 0), kwargs = {})
#   %embedding_1 : [num_users=1] = call_function[target=torch.ops.aten.embedding.default](args = (%arg5_1, %slice_2), kwargs = {})
#   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%embedding, %embedding_1), kwargs = {})
#   %embedding_2 : [num_users=1] = call_function[target=torch.ops.aten.embedding.default](args = (%arg6_1, %select), kwargs = {})
#   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add, %embedding_2), kwargs = {})
#   %embedding_3 : [num_users=1] = call_function[target=torch.ops.aten.embedding.default](args = (%arg7_1, %select_1), kwargs = {})
#   %add_2 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_1, %embedding_3), kwargs = {})
#   %embedding_4 : [num_users=1] = call_function[target=torch.ops.aten.embedding.default](args = (%arg6_1, %select_2), kwargs = {})
#   %add_3 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_2, %embedding_4), kwargs = {})
#   %embedding_5 : [num_users=1] = call_function[target=torch.ops.aten.embedding.default](args = (%arg7_1, %select_3), kwargs = {})
#   %add_4 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_3, %embedding_5), kwargs = {})
#   %sub_1 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%select_4, %select_5), kwargs = {})
#   %embedding_6 : [num_users=1] = call_function[target=torch.ops.aten.embedding.default](args = (%arg8_1, %sub_1), kwargs = {})
#   %add_5 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_4, %embedding_6), kwargs = {})
#   %sub_2 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%select_6, %select_7), kwargs = {})
#   %embedding_7 : [num_users=1] = call_function[target=torch.ops.aten.embedding.default](args = (%arg9_1, %sub_2), kwargs = {})
#   %add_6 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_5, %embedding_7), kwargs = {})
#   %embedding_8 : [num_users=1] = call_function[target=torch.ops.aten.embedding.default](args = (%arg10_1, %arg2_1), kwargs = {})
#   %add_7 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_6, %embedding_8), kwargs = {})
#   %var_mean : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_7, [2]), kwargs = {correction: 0, keepdim: True})
#   %sub_3 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_7, %getitem_1), kwargs = {})
#   %add_8 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem, 1e-12), kwargs = {})
#   %rsqrt : [num_users=1] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_8,), kwargs = {})
#   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_3, %rsqrt), kwargs = {})
#   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_1, %arg11_1), kwargs = {})
#   %add_9 : [num_users=4] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_2, %arg12_1), kwargs = {})
triton_red_fused_add_embedding_native_layer_norm_sub_0 = async_compile.triton('triton_red_fused_add_embedding_native_layer_norm_sub_0', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 512, 'r': 1024},
    reduction_hint=ReductionHint.DEFAULT,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*i64', 'in_ptr1': '*fp32', 'in_ptr2': '*i64', 'in_ptr3': '*fp32', 'in_ptr4': '*i64', 'in_ptr5': '*fp32', 'in_ptr6': '*fp32', 'in_ptr7': '*fp32', 'in_ptr8': '*fp32', 'in_ptr9': '*i64', 'in_ptr10': '*fp32', 'in_ptr11': '*fp32', 'in_ptr12': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_embedding_native_layer_norm_sub_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 10, 'num_reduction': 2, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False}
)
@triton.jit
def triton_red_fused_add_embedding_native_layer_norm_sub_0(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 512
    rnumel = 768
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x3), xmask, eviction_policy='evict_last')
    x0 = (xindex % 256)
    tmp7 = tl.load(in_ptr2 + (x0), xmask, eviction_policy='evict_last')
    tmp15 = tl.load(in_ptr4 + (4*x3), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr4 + (1 + 4*x3), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr4 + (2 + 4*x3), xmask, eviction_policy='evict_last')
    tmp37 = tl.load(in_ptr4 + (3 + 4*x3), xmask, eviction_policy='evict_last')
    tmp58 = tl.load(in_ptr9 + (x3), xmask, eviction_policy='evict_last')
    tmp67_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp67_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp67_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp1 = tl.full([XBLOCK, RBLOCK], 30522, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert(((0 <= tmp4) & (tmp4 < 30522)) | ~(xmask), "index out of bounds: 0 <= tmp4 < 30522")
        tmp6 = tl.load(in_ptr1 + (r2 + 768*tmp4), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.full([XBLOCK, RBLOCK], 512, tl.int32)
        tmp9 = tmp7 + tmp8
        tmp10 = tmp7 < 0
        tmp11 = tl.where(tmp10, tmp9, tmp7)
        tl.device_assert(((0 <= tmp11) & (tmp11 < 512)) | ~(xmask), "index out of bounds: 0 <= tmp11 < 512")
        tmp13 = tl.load(in_ptr3 + (r2 + 768*tmp11), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp14 = tmp6 + tmp13
        tmp16 = tl.full([XBLOCK, RBLOCK], 1024, tl.int32)
        tmp17 = tmp15 + tmp16
        tmp18 = tmp15 < 0
        tmp19 = tl.where(tmp18, tmp17, tmp15)
        tl.device_assert(((0 <= tmp19) & (tmp19 < 1024)) | ~(xmask), "index out of bounds: 0 <= tmp19 < 1024")
        tmp21 = tl.load(in_ptr5 + (r2 + 768*tmp19), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tmp14 + tmp21
        tmp24 = tmp23 + tmp16
        tmp25 = tmp23 < 0
        tmp26 = tl.where(tmp25, tmp24, tmp23)
        tl.device_assert(((0 <= tmp26) & (tmp26 < 1024)) | ~(xmask), "index out of bounds: 0 <= tmp26 < 1024")
        tmp28 = tl.load(in_ptr6 + (r2 + 768*tmp26), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = tmp22 + tmp28
        tmp31 = tmp30 + tmp16
        tmp32 = tmp30 < 0
        tmp33 = tl.where(tmp32, tmp31, tmp30)
        tl.device_assert(((0 <= tmp33) & (tmp33 < 1024)) | ~(xmask), "index out of bounds: 0 <= tmp33 < 1024")
        tmp35 = tl.load(in_ptr5 + (r2 + 768*tmp33), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp36 = tmp29 + tmp35
        tmp38 = tmp37 + tmp16
        tmp39 = tmp37 < 0
        tmp40 = tl.where(tmp39, tmp38, tmp37)
        tl.device_assert(((0 <= tmp40) & (tmp40 < 1024)) | ~(xmask), "index out of bounds: 0 <= tmp40 < 1024")
        tmp42 = tl.load(in_ptr6 + (r2 + 768*tmp40), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp43 = tmp36 + tmp42
        tmp44 = tmp37 - tmp23
        tmp45 = tmp44 + tmp16
        tmp46 = tmp44 < 0
        tmp47 = tl.where(tmp46, tmp45, tmp44)
        tl.device_assert(((0 <= tmp47) & (tmp47 < 1024)) | ~(xmask), "index out of bounds: 0 <= tmp47 < 1024")
        tmp49 = tl.load(in_ptr7 + (r2 + 768*tmp47), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp50 = tmp43 + tmp49
        tmp51 = tmp30 - tmp15
        tmp52 = tmp51 + tmp16
        tmp53 = tmp51 < 0
        tmp54 = tl.where(tmp53, tmp52, tmp51)
        tl.device_assert(((0 <= tmp54) & (tmp54 < 1024)) | ~(xmask), "index out of bounds: 0 <= tmp54 < 1024")
        tmp56 = tl.load(in_ptr8 + (r2 + 768*tmp54), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp57 = tmp50 + tmp56
        tmp59 = tl.full([XBLOCK, RBLOCK], 2, tl.int32)
        tmp60 = tmp58 + tmp59
        tmp61 = tmp58 < 0
        tmp62 = tl.where(tmp61, tmp60, tmp58)
        tl.device_assert(((0 <= tmp62) & (tmp62 < 2)) | ~(xmask), "index out of bounds: 0 <= tmp62 < 2")
        tmp64 = tl.load(in_ptr10 + (r2 + 768*tmp62), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp65 = tmp57 + tmp64
        tmp66 = tl.broadcast_to(tmp65, [XBLOCK, RBLOCK])
        tmp67_mean_next, tmp67_m2_next, tmp67_weight_next = triton_helpers.welford_reduce(
            tmp66, tmp67_mean, tmp67_m2, tmp67_weight, roffset == 0
        )
        tmp67_mean = tl.where(rmask & xmask, tmp67_mean_next, tmp67_mean)
        tmp67_m2 = tl.where(rmask & xmask, tmp67_m2_next, tmp67_m2)
        tmp67_weight = tl.where(rmask & xmask, tmp67_weight_next, tmp67_weight)
        tl.store(in_out_ptr0 + (r2 + 768*x3), tmp65, rmask & xmask)
    tmp67_tmp, tmp68_tmp, tmp69_tmp = triton_helpers.welford(
        tmp67_mean, tmp67_m2, tmp67_weight, 1
    )
    tmp67 = tmp67_tmp[:, None]
    tmp68 = tmp68_tmp[:, None]
    tmp69 = tmp69_tmp[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp70 = tl.load(in_out_ptr0 + (r2 + 768*x3), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp78 = tl.load(in_ptr11 + (r2), rmask, eviction_policy='evict_last', other=0.0)
        tmp80 = tl.load(in_ptr12 + (r2), rmask, eviction_policy='evict_last', other=0.0)
        tmp71 = tmp70 - tmp67
        tmp72 = 768.0
        tmp73 = tmp68 / tmp72
        tmp74 = 1e-12
        tmp75 = tmp73 + tmp74
        tmp76 = libdevice.rsqrt(tmp75)
        tmp77 = tmp71 * tmp76
        tmp79 = tmp77 * tmp78
        tmp81 = tmp79 + tmp80
        tl.store(in_out_ptr0 + (r2 + 768*x3), tmp81, rmask & xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/gx/cgx3jgl3wtydqy5ycrrlpzybvulbx6d2yaiicnm5tbp3waijn3qi.py
# Topologically Sorted Source Nodes: [matmul], Original ATen: [aten.clone]
# Source node to ATen node mapping:
#   matmul => clone_1
# Graph fragment:
#   %clone_1 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%expand,), kwargs = {memory_format: torch.contiguous_format})
triton_poi_fused_clone_1 = async_compile.triton('triton_poi_fused_clone_1', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 524288}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_1', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_clone_1(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 393216
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = (xindex % 64)
    x1 = ((xindex // 64) % 256)
    x2 = ((xindex // 16384) % 12)
    x3 = xindex // 196608
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + 64*x2 + 768*x1 + 196608*x3), None)
    tmp1 = tl.load(in_ptr1 + (x0 + 64*x2), None, eviction_policy='evict_last')
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x4), tmp2, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/wa/cwalrnjymkrepjlya3j74ry4snfyj7v4myfwi4pwrgl64chdobcv.py
# Topologically Sorted Source Nodes: [matmul], Original ATen: [aten.clone]
# Source node to ATen node mapping:
#   matmul => clone_2
# Graph fragment:
#   %clone_2 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%expand_1,), kwargs = {memory_format: torch.contiguous_format})
triton_poi_fused_clone_2 = async_compile.triton('triton_poi_fused_clone_2', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'y': 2048, 'x': 256}, tile_hint=TileHint.DEFAULT,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_2', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_clone_2(in_ptr0, in_ptr1, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 1536
    xnumel = 256
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = yindex < ynumel
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x2 = xindex
    y0 = (yindex % 768)
    y1 = yindex // 768
    y3 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + 768*x2 + 196608*y1), xmask & ymask, eviction_policy='evict_last')
    tmp1 = tl.load(in_ptr1 + (y0), ymask, eviction_policy='evict_last')
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x2 + 256*y3), tmp2, xmask & ymask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/6l/c6lntc6rafv76lwtqltl323hywkn35hhsnvdca7wzoq4mjtujk4z.py
# Topologically Sorted Source Nodes: [attn_weights, extended_attention_mask_1, sub, extended_attention_mask_2, attn_weights_1, softmax], Original ATen: [aten.mul, aten._to_copy, aten.rsub, aten.add, aten._softmax]
# Source node to ATen node mapping:
#   attn_weights => mul_3
#   attn_weights_1 => add_10
#   extended_attention_mask_1 => convert_element_type
#   extended_attention_mask_2 => mul
#   softmax => amax, div, exp, sub_4, sum_1
#   sub => sub
# Graph fragment:
#   %mul_3 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_11, 0.125), kwargs = {})
#   %convert_element_type : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%unsqueeze_1, torch.float32), kwargs = {})
#   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (1.0, %convert_element_type), kwargs = {})
#   %mul : [num_users=12] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub, -3.4028234663852886e+38), kwargs = {})
#   %add_10 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_3, %mul), kwargs = {})
#   %amax : [num_users=1] = call_function[target=torch.ops.aten.amax.default](args = (%add_10, [-1], True), kwargs = {})
#   %sub_4 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_10, %amax), kwargs = {})
#   %exp : [num_users=2] = call_function[target=torch.ops.aten.exp.default](args = (%sub_4,), kwargs = {})
#   %sum_1 : [num_users=1] = call_function[target=torch.ops.aten.sum.dim_IntList](args = (%exp, [-1], True), kwargs = {})
#   %div : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%exp, %sum_1), kwargs = {})
triton_red_fused__softmax__to_copy_add_mul_rsub_3 = async_compile.triton('triton_red_fused__softmax__to_copy_add_mul_rsub_3', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 8192, 'r': 256},
    reduction_hint=ReductionHint.DEFAULT,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*i64', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused__softmax__to_copy_add_mul_rsub_3', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 6, 'num_reduction': 2, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False}
)
@triton.jit
def triton_red_fused__softmax__to_copy_add_mul_rsub_3(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x3 = xindex
    x1 = xindex // 3072
    _tmp11 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_out_ptr0 + (r2 + 256*x3), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr0 + (r2 + 256*x1), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp1 = 0.125
        tmp2 = tmp0 * tmp1
        tmp4 = tmp3.to(tl.float32)
        tmp5 = 1.0
        tmp6 = tmp5 - tmp4
        tmp7 = -3.4028234663852886e+38
        tmp8 = tmp6 * tmp7
        tmp9 = tmp2 + tmp8
        tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
        tmp12 = triton_helpers.maximum(_tmp11, tmp10)
        _tmp11 = tl.where(rmask & xmask, tmp12, _tmp11)
    tmp11 = triton_helpers.max2(_tmp11, 1)[:, None]
    _tmp26 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp13 = tl.load(in_out_ptr0 + (r2 + 256*x3), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp16 = tl.load(in_ptr0 + (r2 + 256*x1), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp14 = 0.125
        tmp15 = tmp13 * tmp14
        tmp17 = tmp16.to(tl.float32)
        tmp18 = 1.0
        tmp19 = tmp18 - tmp17
        tmp20 = -3.4028234663852886e+38
        tmp21 = tmp19 * tmp20
        tmp22 = tmp15 + tmp21
        tmp23 = tmp22 - tmp11
        tmp24 = tl_math.exp(tmp23)
        tmp25 = tl.broadcast_to(tmp24, [XBLOCK, RBLOCK])
        tmp27 = _tmp26 + tmp25
        _tmp26 = tl.where(rmask & xmask, tmp27, _tmp26)
    tmp26 = tl.sum(_tmp26, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp28 = tl.load(in_out_ptr0 + (r2 + 256*x3), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp31 = tl.load(in_ptr0 + (r2 + 256*x1), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp29 = 0.125
        tmp30 = tmp28 * tmp29
        tmp32 = tmp31.to(tl.float32)
        tmp33 = 1.0
        tmp34 = tmp33 - tmp32
        tmp35 = -3.4028234663852886e+38
        tmp36 = tmp34 * tmp35
        tmp37 = tmp30 + tmp36
        tmp38 = tmp37 - tmp11
        tmp39 = tl_math.exp(tmp38)
        tmp40 = tmp39 / tmp26
        tl.store(in_out_ptr0 + (r2 + 256*x3), tmp40, rmask & xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/iw/ciw7fe2jmum4ogxm5y4zseq6yn5wypqzoojngrtbs6ams6lacl6v.py
# Topologically Sorted Source Nodes: [attn_output_1], Original ATen: [aten.clone]
# Source node to ATen node mapping:
#   attn_output_1 => clone_5
# Graph fragment:
#   %clone_5 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%permute_7,), kwargs = {memory_format: torch.contiguous_format})
triton_poi_fused_clone_4 = async_compile.triton('triton_poi_fused_clone_4', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 524288}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_4', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_clone_4(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 393216
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = (xindex % 64)
    x1 = ((xindex // 64) % 12)
    x2 = ((xindex // 768) % 256)
    x3 = xindex // 196608
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + 64*x2 + 16384*x1 + 196608*x3), None)
    tl.store(out_ptr0 + (x4), tmp0, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/ml/cmlr56aejvg2oyzfepenemn56zulcgnw66azcxh63rxonw34q2rf.py
# Topologically Sorted Source Nodes: [add_9, hidden_states_2], Original ATen: [aten.add, aten.native_layer_norm]
# Source node to ATen node mapping:
#   add_9 => add_11
#   hidden_states_2 => add_12, add_13, mul_4, mul_5, rsqrt_1, sub_5, var_mean_1
# Graph fragment:
#   %add_11 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_17, %add_9), kwargs = {})
#   %var_mean_1 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_11, [2]), kwargs = {correction: 0, keepdim: True})
#   %sub_5 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_11, %getitem_3), kwargs = {})
#   %add_12 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_2, 1e-12), kwargs = {})
#   %rsqrt_1 : [num_users=1] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_12,), kwargs = {})
#   %mul_4 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_5, %rsqrt_1), kwargs = {})
#   %mul_5 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_4, %arg21_1), kwargs = {})
#   %add_13 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_5, %arg22_1), kwargs = {})
triton_per_fused_add_native_layer_norm_5 = async_compile.triton('triton_per_fused_add_native_layer_norm_5', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 512, 'r': 1024},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_native_layer_norm_5', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False}
)
@triton.jit
def triton_per_fused_add_native_layer_norm_5(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, rnumel):
    xnumel = 512
    XBLOCK: tl.constexpr = 1
    rnumel = 768
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (r1 + 768*x0), rmask, other=0.0)
    tmp1 = tl.load(in_ptr0 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + 768*x0), rmask, other=0.0)
    tmp28 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp30 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp2 = tmp0 + tmp1
    tmp4 = tmp2 + tmp3
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask, tmp5, 0)
    tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
    tmp10 = tl.where(rmask, tmp8, 0)
    tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
    tmp12 = tl.full([1], 768, tl.int32)
    tmp13 = tmp12.to(tl.float32)
    tmp14 = tmp11 / tmp13
    tmp15 = tmp5 - tmp14
    tmp16 = tmp15 * tmp15
    tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
    tmp19 = tl.where(rmask, tmp17, 0)
    tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
    tmp21 = tmp4 - tmp14
    tmp22 = 768.0
    tmp23 = tmp20 / tmp22
    tmp24 = 1e-12
    tmp25 = tmp23 + tmp24
    tmp26 = libdevice.rsqrt(tmp25)
    tmp27 = tmp21 * tmp26
    tmp29 = tmp27 * tmp28
    tmp31 = tmp29 + tmp30
    tl.store(in_out_ptr0 + (r1 + 768*x0), tmp31, rmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/he/chexhsp6aud5becdoqtttj6lil47krwjbhjewhrn525aauv5nny6.py
# Topologically Sorted Source Nodes: [hidden_states_4], Original ATen: [aten.gelu]
# Source node to ATen node mapping:
#   hidden_states_4 => add_14, erf, mul_6, mul_7, mul_8
# Graph fragment:
#   %mul_6 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_19, 0.5), kwargs = {})
#   %mul_7 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_19, 0.7071067811865476), kwargs = {})
#   %erf : [num_users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_7,), kwargs = {})
#   %add_14 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})
#   %mul_8 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_6, %add_14), kwargs = {})
triton_poi_fused_gelu_6 = async_compile.triton('triton_poi_fused_gelu_6', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 2097152}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_6', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_gelu_6(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1572864
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x2 = xindex
    x0 = (xindex % 3072)
    tmp0 = tl.load(in_out_ptr0 + (x2), None)
    tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
    tmp2 = tmp0 + tmp1
    tmp3 = 0.5
    tmp4 = tmp2 * tmp3
    tmp5 = 0.7071067811865476
    tmp6 = tmp2 * tmp5
    tmp7 = libdevice.erf(tmp6)
    tmp8 = 1.0
    tmp9 = tmp7 + tmp8
    tmp10 = tmp4 * tmp9
    tl.store(in_out_ptr0 + (x2), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/yq/cyqib57ifxqr6mni2wojc3sy2e2lzqxierktjdw5wrsf6yhz5ozl.py
# Topologically Sorted Source Nodes: [pooled_output, pooled_output_1], Original ATen: [aten.addmm, aten.tanh]
# Source node to ATen node mapping:
#   pooled_output => add_tensor
#   pooled_output_1 => tanh
# Graph fragment:
#   %add_tensor : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mm_default, %arg206_1), kwargs = {})
#   %tanh : [num_users=1] = call_function[target=torch.ops.aten.tanh.default](args = (%add_tensor,), kwargs = {})
triton_poi_fused_addmm_tanh_7 = async_compile.triton('triton_poi_fused_addmm_tanh_7', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 2048}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_addmm_tanh_7', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_addmm_tanh_7(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1536
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = xindex
    x0 = (xindex % 768)
    tmp0 = tl.load(in_out_ptr0 + (x2), xmask)
    tmp1 = tl.load(in_ptr0 + (x0), xmask, eviction_policy='evict_last')
    tmp2 = tmp0 + tmp1
    tmp3 = libdevice.tanh(tmp2)
    tl.store(in_out_ptr0 + (x2), tmp3, xmask)
''', device_str='cuda')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1, arg7_1, arg8_1, arg9_1, arg10_1, arg11_1, arg12_1, arg13_1, arg14_1, arg15_1, arg16_1, arg17_1, arg18_1, arg19_1, arg20_1, arg21_1, arg22_1, arg23_1, arg24_1, arg25_1, arg26_1, arg27_1, arg28_1, arg29_1, arg30_1, arg31_1, arg32_1, arg33_1, arg34_1, arg35_1, arg36_1, arg37_1, arg38_1, arg39_1, arg40_1, arg41_1, arg42_1, arg43_1, arg44_1, arg45_1, arg46_1, arg47_1, arg48_1, arg49_1, arg50_1, arg51_1, arg52_1, arg53_1, arg54_1, arg55_1, arg56_1, arg57_1, arg58_1, arg59_1, arg60_1, arg61_1, arg62_1, arg63_1, arg64_1, arg65_1, arg66_1, arg67_1, arg68_1, arg69_1, arg70_1, arg71_1, arg72_1, arg73_1, arg74_1, arg75_1, arg76_1, arg77_1, arg78_1, arg79_1, arg80_1, arg81_1, arg82_1, arg83_1, arg84_1, arg85_1, arg86_1, arg87_1, arg88_1, arg89_1, arg90_1, arg91_1, arg92_1, arg93_1, arg94_1, arg95_1, arg96_1, arg97_1, arg98_1, arg99_1, arg100_1, arg101_1, arg102_1, arg103_1, arg104_1, arg105_1, arg106_1, arg107_1, arg108_1, arg109_1, arg110_1, arg111_1, arg112_1, arg113_1, arg114_1, arg115_1, arg116_1, arg117_1, arg118_1, arg119_1, arg120_1, arg121_1, arg122_1, arg123_1, arg124_1, arg125_1, arg126_1, arg127_1, arg128_1, arg129_1, arg130_1, arg131_1, arg132_1, arg133_1, arg134_1, arg135_1, arg136_1, arg137_1, arg138_1, arg139_1, arg140_1, arg141_1, arg142_1, arg143_1, arg144_1, arg145_1, arg146_1, arg147_1, arg148_1, arg149_1, arg150_1, arg151_1, arg152_1, arg153_1, arg154_1, arg155_1, arg156_1, arg157_1, arg158_1, arg159_1, arg160_1, arg161_1, arg162_1, arg163_1, arg164_1, arg165_1, arg166_1, arg167_1, arg168_1, arg169_1, arg170_1, arg171_1, arg172_1, arg173_1, arg174_1, arg175_1, arg176_1, arg177_1, arg178_1, arg179_1, arg180_1, arg181_1, arg182_1, arg183_1, arg184_1, arg185_1, arg186_1, arg187_1, arg188_1, arg189_1, arg190_1, arg191_1, arg192_1, arg193_1, arg194_1, arg195_1, arg196_1, arg197_1, arg198_1, arg199_1, arg200_1, arg201_1, arg202_1, arg203_1, arg204_1, arg205_1, arg206_1, arg207_1 = args
    args.clear()
    assert_size_stride(arg0_1, (2, 256), (256, 1))
    assert_size_stride(arg1_1, (2, 256), (256, 1))
    assert_size_stride(arg2_1, (2, 256), (256, 1))
    assert_size_stride(arg3_1, (2, 256, 4), (1024, 4, 1))
    assert_size_stride(arg4_1, (30522, 768), (768, 1))
    assert_size_stride(arg5_1, (512, 768), (768, 1))
    assert_size_stride(arg6_1, (1024, 768), (768, 1))
    assert_size_stride(arg7_1, (1024, 768), (768, 1))
    assert_size_stride(arg8_1, (1024, 768), (768, 1))
    assert_size_stride(arg9_1, (1024, 768), (768, 1))
    assert_size_stride(arg10_1, (2, 768), (768, 1))
    assert_size_stride(arg11_1, (768, ), (1, ))
    assert_size_stride(arg12_1, (768, ), (1, ))
    assert_size_stride(arg13_1, (768, 768), (768, 1))
    assert_size_stride(arg14_1, (768, ), (1, ))
    assert_size_stride(arg15_1, (768, 768), (768, 1))
    assert_size_stride(arg16_1, (768, ), (1, ))
    assert_size_stride(arg17_1, (768, 768), (768, 1))
    assert_size_stride(arg18_1, (768, ), (1, ))
    assert_size_stride(arg19_1, (768, 768), (768, 1))
    assert_size_stride(arg20_1, (768, ), (1, ))
    assert_size_stride(arg21_1, (768, ), (1, ))
    assert_size_stride(arg22_1, (768, ), (1, ))
    assert_size_stride(arg23_1, (3072, 768), (768, 1))
    assert_size_stride(arg24_1, (3072, ), (1, ))
    assert_size_stride(arg25_1, (768, 3072), (3072, 1))
    assert_size_stride(arg26_1, (768, ), (1, ))
    assert_size_stride(arg27_1, (768, ), (1, ))
    assert_size_stride(arg28_1, (768, ), (1, ))
    assert_size_stride(arg29_1, (768, 768), (768, 1))
    assert_size_stride(arg30_1, (768, ), (1, ))
    assert_size_stride(arg31_1, (768, 768), (768, 1))
    assert_size_stride(arg32_1, (768, ), (1, ))
    assert_size_stride(arg33_1, (768, 768), (768, 1))
    assert_size_stride(arg34_1, (768, ), (1, ))
    assert_size_stride(arg35_1, (768, 768), (768, 1))
    assert_size_stride(arg36_1, (768, ), (1, ))
    assert_size_stride(arg37_1, (768, ), (1, ))
    assert_size_stride(arg38_1, (768, ), (1, ))
    assert_size_stride(arg39_1, (3072, 768), (768, 1))
    assert_size_stride(arg40_1, (3072, ), (1, ))
    assert_size_stride(arg41_1, (768, 3072), (3072, 1))
    assert_size_stride(arg42_1, (768, ), (1, ))
    assert_size_stride(arg43_1, (768, ), (1, ))
    assert_size_stride(arg44_1, (768, ), (1, ))
    assert_size_stride(arg45_1, (768, 768), (768, 1))
    assert_size_stride(arg46_1, (768, ), (1, ))
    assert_size_stride(arg47_1, (768, 768), (768, 1))
    assert_size_stride(arg48_1, (768, ), (1, ))
    assert_size_stride(arg49_1, (768, 768), (768, 1))
    assert_size_stride(arg50_1, (768, ), (1, ))
    assert_size_stride(arg51_1, (768, 768), (768, 1))
    assert_size_stride(arg52_1, (768, ), (1, ))
    assert_size_stride(arg53_1, (768, ), (1, ))
    assert_size_stride(arg54_1, (768, ), (1, ))
    assert_size_stride(arg55_1, (3072, 768), (768, 1))
    assert_size_stride(arg56_1, (3072, ), (1, ))
    assert_size_stride(arg57_1, (768, 3072), (3072, 1))
    assert_size_stride(arg58_1, (768, ), (1, ))
    assert_size_stride(arg59_1, (768, ), (1, ))
    assert_size_stride(arg60_1, (768, ), (1, ))
    assert_size_stride(arg61_1, (768, 768), (768, 1))
    assert_size_stride(arg62_1, (768, ), (1, ))
    assert_size_stride(arg63_1, (768, 768), (768, 1))
    assert_size_stride(arg64_1, (768, ), (1, ))
    assert_size_stride(arg65_1, (768, 768), (768, 1))
    assert_size_stride(arg66_1, (768, ), (1, ))
    assert_size_stride(arg67_1, (768, 768), (768, 1))
    assert_size_stride(arg68_1, (768, ), (1, ))
    assert_size_stride(arg69_1, (768, ), (1, ))
    assert_size_stride(arg70_1, (768, ), (1, ))
    assert_size_stride(arg71_1, (3072, 768), (768, 1))
    assert_size_stride(arg72_1, (3072, ), (1, ))
    assert_size_stride(arg73_1, (768, 3072), (3072, 1))
    assert_size_stride(arg74_1, (768, ), (1, ))
    assert_size_stride(arg75_1, (768, ), (1, ))
    assert_size_stride(arg76_1, (768, ), (1, ))
    assert_size_stride(arg77_1, (768, 768), (768, 1))
    assert_size_stride(arg78_1, (768, ), (1, ))
    assert_size_stride(arg79_1, (768, 768), (768, 1))
    assert_size_stride(arg80_1, (768, ), (1, ))
    assert_size_stride(arg81_1, (768, 768), (768, 1))
    assert_size_stride(arg82_1, (768, ), (1, ))
    assert_size_stride(arg83_1, (768, 768), (768, 1))
    assert_size_stride(arg84_1, (768, ), (1, ))
    assert_size_stride(arg85_1, (768, ), (1, ))
    assert_size_stride(arg86_1, (768, ), (1, ))
    assert_size_stride(arg87_1, (3072, 768), (768, 1))
    assert_size_stride(arg88_1, (3072, ), (1, ))
    assert_size_stride(arg89_1, (768, 3072), (3072, 1))
    assert_size_stride(arg90_1, (768, ), (1, ))
    assert_size_stride(arg91_1, (768, ), (1, ))
    assert_size_stride(arg92_1, (768, ), (1, ))
    assert_size_stride(arg93_1, (768, 768), (768, 1))
    assert_size_stride(arg94_1, (768, ), (1, ))
    assert_size_stride(arg95_1, (768, 768), (768, 1))
    assert_size_stride(arg96_1, (768, ), (1, ))
    assert_size_stride(arg97_1, (768, 768), (768, 1))
    assert_size_stride(arg98_1, (768, ), (1, ))
    assert_size_stride(arg99_1, (768, 768), (768, 1))
    assert_size_stride(arg100_1, (768, ), (1, ))
    assert_size_stride(arg101_1, (768, ), (1, ))
    assert_size_stride(arg102_1, (768, ), (1, ))
    assert_size_stride(arg103_1, (3072, 768), (768, 1))
    assert_size_stride(arg104_1, (3072, ), (1, ))
    assert_size_stride(arg105_1, (768, 3072), (3072, 1))
    assert_size_stride(arg106_1, (768, ), (1, ))
    assert_size_stride(arg107_1, (768, ), (1, ))
    assert_size_stride(arg108_1, (768, ), (1, ))
    assert_size_stride(arg109_1, (768, 768), (768, 1))
    assert_size_stride(arg110_1, (768, ), (1, ))
    assert_size_stride(arg111_1, (768, 768), (768, 1))
    assert_size_stride(arg112_1, (768, ), (1, ))
    assert_size_stride(arg113_1, (768, 768), (768, 1))
    assert_size_stride(arg114_1, (768, ), (1, ))
    assert_size_stride(arg115_1, (768, 768), (768, 1))
    assert_size_stride(arg116_1, (768, ), (1, ))
    assert_size_stride(arg117_1, (768, ), (1, ))
    assert_size_stride(arg118_1, (768, ), (1, ))
    assert_size_stride(arg119_1, (3072, 768), (768, 1))
    assert_size_stride(arg120_1, (3072, ), (1, ))
    assert_size_stride(arg121_1, (768, 3072), (3072, 1))
    assert_size_stride(arg122_1, (768, ), (1, ))
    assert_size_stride(arg123_1, (768, ), (1, ))
    assert_size_stride(arg124_1, (768, ), (1, ))
    assert_size_stride(arg125_1, (768, 768), (768, 1))
    assert_size_stride(arg126_1, (768, ), (1, ))
    assert_size_stride(arg127_1, (768, 768), (768, 1))
    assert_size_stride(arg128_1, (768, ), (1, ))
    assert_size_stride(arg129_1, (768, 768), (768, 1))
    assert_size_stride(arg130_1, (768, ), (1, ))
    assert_size_stride(arg131_1, (768, 768), (768, 1))
    assert_size_stride(arg132_1, (768, ), (1, ))
    assert_size_stride(arg133_1, (768, ), (1, ))
    assert_size_stride(arg134_1, (768, ), (1, ))
    assert_size_stride(arg135_1, (3072, 768), (768, 1))
    assert_size_stride(arg136_1, (3072, ), (1, ))
    assert_size_stride(arg137_1, (768, 3072), (3072, 1))
    assert_size_stride(arg138_1, (768, ), (1, ))
    assert_size_stride(arg139_1, (768, ), (1, ))
    assert_size_stride(arg140_1, (768, ), (1, ))
    assert_size_stride(arg141_1, (768, 768), (768, 1))
    assert_size_stride(arg142_1, (768, ), (1, ))
    assert_size_stride(arg143_1, (768, 768), (768, 1))
    assert_size_stride(arg144_1, (768, ), (1, ))
    assert_size_stride(arg145_1, (768, 768), (768, 1))
    assert_size_stride(arg146_1, (768, ), (1, ))
    assert_size_stride(arg147_1, (768, 768), (768, 1))
    assert_size_stride(arg148_1, (768, ), (1, ))
    assert_size_stride(arg149_1, (768, ), (1, ))
    assert_size_stride(arg150_1, (768, ), (1, ))
    assert_size_stride(arg151_1, (3072, 768), (768, 1))
    assert_size_stride(arg152_1, (3072, ), (1, ))
    assert_size_stride(arg153_1, (768, 3072), (3072, 1))
    assert_size_stride(arg154_1, (768, ), (1, ))
    assert_size_stride(arg155_1, (768, ), (1, ))
    assert_size_stride(arg156_1, (768, ), (1, ))
    assert_size_stride(arg157_1, (768, 768), (768, 1))
    assert_size_stride(arg158_1, (768, ), (1, ))
    assert_size_stride(arg159_1, (768, 768), (768, 1))
    assert_size_stride(arg160_1, (768, ), (1, ))
    assert_size_stride(arg161_1, (768, 768), (768, 1))
    assert_size_stride(arg162_1, (768, ), (1, ))
    assert_size_stride(arg163_1, (768, 768), (768, 1))
    assert_size_stride(arg164_1, (768, ), (1, ))
    assert_size_stride(arg165_1, (768, ), (1, ))
    assert_size_stride(arg166_1, (768, ), (1, ))
    assert_size_stride(arg167_1, (3072, 768), (768, 1))
    assert_size_stride(arg168_1, (3072, ), (1, ))
    assert_size_stride(arg169_1, (768, 3072), (3072, 1))
    assert_size_stride(arg170_1, (768, ), (1, ))
    assert_size_stride(arg171_1, (768, ), (1, ))
    assert_size_stride(arg172_1, (768, ), (1, ))
    assert_size_stride(arg173_1, (768, 768), (768, 1))
    assert_size_stride(arg174_1, (768, ), (1, ))
    assert_size_stride(arg175_1, (768, 768), (768, 1))
    assert_size_stride(arg176_1, (768, ), (1, ))
    assert_size_stride(arg177_1, (768, 768), (768, 1))
    assert_size_stride(arg178_1, (768, ), (1, ))
    assert_size_stride(arg179_1, (768, 768), (768, 1))
    assert_size_stride(arg180_1, (768, ), (1, ))
    assert_size_stride(arg181_1, (768, ), (1, ))
    assert_size_stride(arg182_1, (768, ), (1, ))
    assert_size_stride(arg183_1, (3072, 768), (768, 1))
    assert_size_stride(arg184_1, (3072, ), (1, ))
    assert_size_stride(arg185_1, (768, 3072), (3072, 1))
    assert_size_stride(arg186_1, (768, ), (1, ))
    assert_size_stride(arg187_1, (768, ), (1, ))
    assert_size_stride(arg188_1, (768, ), (1, ))
    assert_size_stride(arg189_1, (768, 768), (768, 1))
    assert_size_stride(arg190_1, (768, ), (1, ))
    assert_size_stride(arg191_1, (768, 768), (768, 1))
    assert_size_stride(arg192_1, (768, ), (1, ))
    assert_size_stride(arg193_1, (768, 768), (768, 1))
    assert_size_stride(arg194_1, (768, ), (1, ))
    assert_size_stride(arg195_1, (768, 768), (768, 1))
    assert_size_stride(arg196_1, (768, ), (1, ))
    assert_size_stride(arg197_1, (768, ), (1, ))
    assert_size_stride(arg198_1, (768, ), (1, ))
    assert_size_stride(arg199_1, (3072, 768), (768, 1))
    assert_size_stride(arg200_1, (3072, ), (1, ))
    assert_size_stride(arg201_1, (768, 3072), (3072, 1))
    assert_size_stride(arg202_1, (768, ), (1, ))
    assert_size_stride(arg203_1, (768, ), (1, ))
    assert_size_stride(arg204_1, (768, ), (1, ))
    assert_size_stride(arg205_1, (768, 768), (768, 1))
    assert_size_stride(arg206_1, (768, ), (1, ))
    assert_size_stride(arg207_1, (1, 512), (512, 1))
    with torch.cuda._DeviceGuard(0):
        torch.cuda.set_device(0)
        buf0 = empty_strided_cuda((2, 256, 768), (196608, 768, 1), torch.float32)
        buf1 = buf0; del buf0  # reuse
        buf5 = buf1; del buf1  # reuse
        # Topologically Sorted Source Nodes: [inputs_embeds, position_embeddings, add, left_position_embeddings, add_1, upper_position_embeddings, add_2, right_position_embeddings, add_3, lower_position_embeddings, add_4, sub_1, h_position_embeddings, add_5, sub_2, w_position_embeddings, add_6, token_type_embeddings, embeddings, embeddings_1], Original ATen: [aten.embedding, aten.add, aten.sub, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_embedding_native_layer_norm_sub_0.run(buf5, arg0_1, arg4_1, arg207_1, arg5_1, arg3_1, arg6_1, arg7_1, arg8_1, arg9_1, arg2_1, arg10_1, arg11_1, arg12_1, 512, 768, grid=grid(512), stream=stream0)
        del arg0_1
        del arg10_1
        del arg11_1
        del arg12_1
        del arg207_1
        del arg2_1
        del arg3_1
        del arg4_1
        del arg5_1
        del arg6_1
        del arg7_1
        del arg8_1
        del arg9_1
        buf6 = empty_strided_cuda((512, 768), (768, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf5, (512, 768), (768, 1), 0), reinterpret_tensor(arg13_1, (768, 768), (1, 768), 0), out=buf6)
        del arg13_1
        buf7 = empty_strided_cuda((512, 768), (768, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_1], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf5, (512, 768), (768, 1), 0), reinterpret_tensor(arg15_1, (768, 768), (1, 768), 0), out=buf7)
        del arg15_1
        buf8 = empty_strided_cuda((2, 12, 256, 64), (196608, 16384, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [matmul], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf6, arg14_1, buf8, 393216, grid=grid(393216), stream=stream0)
        del arg14_1
        buf9 = reinterpret_tensor(buf6, (2, 12, 64, 256), (196608, 16384, 256, 1), 0); del buf6  # reuse
        # Topologically Sorted Source Nodes: [matmul], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf7, arg16_1, buf9, 1536, 256, grid=grid(1536, 256), stream=stream0)
        del arg16_1
        buf10 = empty_strided_cuda((24, 256, 256), (65536, 256, 1), torch.float32)
        # Topologically Sorted Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf8, (24, 256, 64), (16384, 64, 1), 0), reinterpret_tensor(buf9, (24, 64, 256), (16384, 256, 1), 0), out=buf10)
        buf14 = reinterpret_tensor(buf10, (2, 12, 256, 256), (786432, 65536, 256, 1), 0); del buf10  # reuse
        # Topologically Sorted Source Nodes: [attn_weights, extended_attention_mask_1, sub, extended_attention_mask_2, attn_weights_1, softmax], Original ATen: [aten.mul, aten._to_copy, aten.rsub, aten.add, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_red_fused__softmax__to_copy_add_mul_rsub_3.run(buf14, arg1_1, 6144, 256, grid=grid(6144), stream=stream0)
        buf13 = reinterpret_tensor(buf9, (512, 768), (768, 1), 0); del buf9  # reuse
        # Topologically Sorted Source Nodes: [linear_2], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf5, (512, 768), (768, 1), 0), reinterpret_tensor(arg17_1, (768, 768), (1, 768), 0), out=buf13)
        del arg17_1
        buf15 = buf8; del buf8  # reuse
        # Topologically Sorted Source Nodes: [attn_output], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf13, arg18_1, buf15, 393216, grid=grid(393216), stream=stream0)
        del arg18_1
        buf16 = reinterpret_tensor(buf13, (24, 256, 64), (16384, 64, 1), 0); del buf13  # reuse
        # Topologically Sorted Source Nodes: [attn_output], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf14, (24, 256, 256), (65536, 256, 1), 0), reinterpret_tensor(buf15, (24, 256, 64), (16384, 64, 1), 0), out=buf16)
        buf17 = reinterpret_tensor(buf15, (2, 256, 12, 64), (196608, 768, 64, 1), 0); del buf15  # reuse
        # Topologically Sorted Source Nodes: [attn_output_1], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf16, buf17, 393216, grid=grid(393216), stream=stream0)
        buf18 = reinterpret_tensor(buf16, (512, 768), (768, 1), 0); del buf16  # reuse
        # Topologically Sorted Source Nodes: [hidden_states], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf17, (512, 768), (768, 1), 0), reinterpret_tensor(arg19_1, (768, 768), (1, 768), 0), out=buf18)
        del arg19_1
        buf22 = reinterpret_tensor(buf18, (2, 256, 768), (196608, 768, 1), 0); del buf18  # reuse
        # Topologically Sorted Source Nodes: [add_9, hidden_states_2], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf22, arg20_1, buf5, arg21_1, arg22_1, 512, 768, grid=grid(512), stream=stream0)
        del arg20_1
        del arg21_1
        del arg22_1
        buf23 = reinterpret_tensor(buf14, (512, 3072), (3072, 1), 0); del buf14  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_3], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf22, (512, 768), (768, 1), 0), reinterpret_tensor(arg23_1, (768, 3072), (1, 768), 0), out=buf23)
        del arg23_1
        buf24 = reinterpret_tensor(buf23, (2, 256, 3072), (786432, 3072, 1), 0); del buf23  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_4], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_6.run(buf24, arg24_1, 1572864, grid=grid(1572864), stream=stream0)
        del arg24_1
        buf25 = reinterpret_tensor(buf5, (512, 768), (768, 1), 0); del buf5  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_5], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf24, (512, 3072), (3072, 1), 0), reinterpret_tensor(arg25_1, (3072, 768), (1, 3072), 0), out=buf25)
        del arg25_1
        buf29 = reinterpret_tensor(buf25, (2, 256, 768), (196608, 768, 1), 0); del buf25  # reuse
        # Topologically Sorted Source Nodes: [add_10, hidden_states_7], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf29, arg26_1, buf22, arg27_1, arg28_1, 512, 768, grid=grid(512), stream=stream0)
        del arg26_1
        del arg27_1
        del arg28_1
        buf30 = reinterpret_tensor(buf22, (512, 768), (768, 1), 0); del buf22  # reuse
        # Topologically Sorted Source Nodes: [linear_6], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf29, (512, 768), (768, 1), 0), reinterpret_tensor(arg29_1, (768, 768), (1, 768), 0), out=buf30)
        del arg29_1
        buf31 = reinterpret_tensor(buf17, (512, 768), (768, 1), 0); del buf17  # reuse
        # Topologically Sorted Source Nodes: [linear_7], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf29, (512, 768), (768, 1), 0), reinterpret_tensor(arg31_1, (768, 768), (1, 768), 0), out=buf31)
        del arg31_1
        buf32 = reinterpret_tensor(buf7, (2, 12, 256, 64), (196608, 16384, 64, 1), 0); del buf7  # reuse
        # Topologically Sorted Source Nodes: [matmul_2], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf30, arg30_1, buf32, 393216, grid=grid(393216), stream=stream0)
        del arg30_1
        buf33 = reinterpret_tensor(buf30, (2, 12, 64, 256), (196608, 16384, 256, 1), 0); del buf30  # reuse
        # Topologically Sorted Source Nodes: [matmul_2], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf31, arg32_1, buf33, 1536, 256, grid=grid(1536, 256), stream=stream0)
        del arg32_1
        buf34 = reinterpret_tensor(buf24, (24, 256, 256), (65536, 256, 1), 0); del buf24  # reuse
        # Topologically Sorted Source Nodes: [matmul_2], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf32, (24, 256, 64), (16384, 64, 1), 0), reinterpret_tensor(buf33, (24, 64, 256), (16384, 256, 1), 0), out=buf34)
        buf38 = reinterpret_tensor(buf34, (2, 12, 256, 256), (786432, 65536, 256, 1), 0); del buf34  # reuse
        # Topologically Sorted Source Nodes: [extended_attention_mask_1, sub, extended_attention_mask_2, attn_weights_4, attn_weights_5, softmax_1], Original ATen: [aten._to_copy, aten.rsub, aten.mul, aten.add, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_red_fused__softmax__to_copy_add_mul_rsub_3.run(buf38, arg1_1, 6144, 256, grid=grid(6144), stream=stream0)
        buf37 = reinterpret_tensor(buf33, (512, 768), (768, 1), 0); del buf33  # reuse
        # Topologically Sorted Source Nodes: [linear_8], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf29, (512, 768), (768, 1), 0), reinterpret_tensor(arg33_1, (768, 768), (1, 768), 0), out=buf37)
        del arg33_1
        buf39 = buf32; del buf32  # reuse
        # Topologically Sorted Source Nodes: [attn_output_3], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf37, arg34_1, buf39, 393216, grid=grid(393216), stream=stream0)
        del arg34_1
        buf40 = reinterpret_tensor(buf37, (24, 256, 64), (16384, 64, 1), 0); del buf37  # reuse
        # Topologically Sorted Source Nodes: [attn_output_3], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf38, (24, 256, 256), (65536, 256, 1), 0), reinterpret_tensor(buf39, (24, 256, 64), (16384, 64, 1), 0), out=buf40)
        buf41 = reinterpret_tensor(buf39, (2, 256, 12, 64), (196608, 768, 64, 1), 0); del buf39  # reuse
        # Topologically Sorted Source Nodes: [attn_output_4], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf40, buf41, 393216, grid=grid(393216), stream=stream0)
        buf42 = reinterpret_tensor(buf40, (512, 768), (768, 1), 0); del buf40  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_8], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf41, (512, 768), (768, 1), 0), reinterpret_tensor(arg35_1, (768, 768), (1, 768), 0), out=buf42)
        del arg35_1
        buf46 = reinterpret_tensor(buf42, (2, 256, 768), (196608, 768, 1), 0); del buf42  # reuse
        # Topologically Sorted Source Nodes: [add_12, hidden_states_10], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf46, arg36_1, buf29, arg37_1, arg38_1, 512, 768, grid=grid(512), stream=stream0)
        del arg36_1
        del arg37_1
        del arg38_1
        buf47 = reinterpret_tensor(buf38, (512, 3072), (3072, 1), 0); del buf38  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_11], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf46, (512, 768), (768, 1), 0), reinterpret_tensor(arg39_1, (768, 3072), (1, 768), 0), out=buf47)
        del arg39_1
        buf48 = reinterpret_tensor(buf47, (2, 256, 3072), (786432, 3072, 1), 0); del buf47  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_12], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_6.run(buf48, arg40_1, 1572864, grid=grid(1572864), stream=stream0)
        del arg40_1
        buf49 = reinterpret_tensor(buf29, (512, 768), (768, 1), 0); del buf29  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_13], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf48, (512, 3072), (3072, 1), 0), reinterpret_tensor(arg41_1, (3072, 768), (1, 3072), 0), out=buf49)
        del arg41_1
        buf53 = reinterpret_tensor(buf49, (2, 256, 768), (196608, 768, 1), 0); del buf49  # reuse
        # Topologically Sorted Source Nodes: [add_13, hidden_states_15], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf53, arg42_1, buf46, arg43_1, arg44_1, 512, 768, grid=grid(512), stream=stream0)
        del arg42_1
        del arg43_1
        del arg44_1
        buf54 = reinterpret_tensor(buf46, (512, 768), (768, 1), 0); del buf46  # reuse
        # Topologically Sorted Source Nodes: [linear_12], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf53, (512, 768), (768, 1), 0), reinterpret_tensor(arg45_1, (768, 768), (1, 768), 0), out=buf54)
        del arg45_1
        buf55 = reinterpret_tensor(buf41, (512, 768), (768, 1), 0); del buf41  # reuse
        # Topologically Sorted Source Nodes: [linear_13], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf53, (512, 768), (768, 1), 0), reinterpret_tensor(arg47_1, (768, 768), (1, 768), 0), out=buf55)
        del arg47_1
        buf56 = reinterpret_tensor(buf31, (2, 12, 256, 64), (196608, 16384, 64, 1), 0); del buf31  # reuse
        # Topologically Sorted Source Nodes: [matmul_4], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf54, arg46_1, buf56, 393216, grid=grid(393216), stream=stream0)
        del arg46_1
        buf57 = reinterpret_tensor(buf54, (2, 12, 64, 256), (196608, 16384, 256, 1), 0); del buf54  # reuse
        # Topologically Sorted Source Nodes: [matmul_4], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf55, arg48_1, buf57, 1536, 256, grid=grid(1536, 256), stream=stream0)
        del arg48_1
        buf58 = reinterpret_tensor(buf48, (24, 256, 256), (65536, 256, 1), 0); del buf48  # reuse
        # Topologically Sorted Source Nodes: [matmul_4], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf56, (24, 256, 64), (16384, 64, 1), 0), reinterpret_tensor(buf57, (24, 64, 256), (16384, 256, 1), 0), out=buf58)
        buf62 = reinterpret_tensor(buf58, (2, 12, 256, 256), (786432, 65536, 256, 1), 0); del buf58  # reuse
        # Topologically Sorted Source Nodes: [extended_attention_mask_1, sub, extended_attention_mask_2, attn_weights_8, attn_weights_9, softmax_2], Original ATen: [aten._to_copy, aten.rsub, aten.mul, aten.add, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_red_fused__softmax__to_copy_add_mul_rsub_3.run(buf62, arg1_1, 6144, 256, grid=grid(6144), stream=stream0)
        buf61 = reinterpret_tensor(buf57, (512, 768), (768, 1), 0); del buf57  # reuse
        # Topologically Sorted Source Nodes: [linear_14], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf53, (512, 768), (768, 1), 0), reinterpret_tensor(arg49_1, (768, 768), (1, 768), 0), out=buf61)
        del arg49_1
        buf63 = buf56; del buf56  # reuse
        # Topologically Sorted Source Nodes: [attn_output_6], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf61, arg50_1, buf63, 393216, grid=grid(393216), stream=stream0)
        del arg50_1
        buf64 = reinterpret_tensor(buf61, (24, 256, 64), (16384, 64, 1), 0); del buf61  # reuse
        # Topologically Sorted Source Nodes: [attn_output_6], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf62, (24, 256, 256), (65536, 256, 1), 0), reinterpret_tensor(buf63, (24, 256, 64), (16384, 64, 1), 0), out=buf64)
        buf65 = reinterpret_tensor(buf63, (2, 256, 12, 64), (196608, 768, 64, 1), 0); del buf63  # reuse
        # Topologically Sorted Source Nodes: [attn_output_7], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf64, buf65, 393216, grid=grid(393216), stream=stream0)
        buf66 = reinterpret_tensor(buf64, (512, 768), (768, 1), 0); del buf64  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_16], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf65, (512, 768), (768, 1), 0), reinterpret_tensor(arg51_1, (768, 768), (1, 768), 0), out=buf66)
        del arg51_1
        buf70 = reinterpret_tensor(buf66, (2, 256, 768), (196608, 768, 1), 0); del buf66  # reuse
        # Topologically Sorted Source Nodes: [add_15, hidden_states_18], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf70, arg52_1, buf53, arg53_1, arg54_1, 512, 768, grid=grid(512), stream=stream0)
        del arg52_1
        del arg53_1
        del arg54_1
        buf71 = reinterpret_tensor(buf62, (512, 3072), (3072, 1), 0); del buf62  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_19], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf70, (512, 768), (768, 1), 0), reinterpret_tensor(arg55_1, (768, 3072), (1, 768), 0), out=buf71)
        del arg55_1
        buf72 = reinterpret_tensor(buf71, (2, 256, 3072), (786432, 3072, 1), 0); del buf71  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_20], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_6.run(buf72, arg56_1, 1572864, grid=grid(1572864), stream=stream0)
        del arg56_1
        buf73 = reinterpret_tensor(buf53, (512, 768), (768, 1), 0); del buf53  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_21], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf72, (512, 3072), (3072, 1), 0), reinterpret_tensor(arg57_1, (3072, 768), (1, 3072), 0), out=buf73)
        del arg57_1
        buf77 = reinterpret_tensor(buf73, (2, 256, 768), (196608, 768, 1), 0); del buf73  # reuse
        # Topologically Sorted Source Nodes: [add_16, hidden_states_23], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf77, arg58_1, buf70, arg59_1, arg60_1, 512, 768, grid=grid(512), stream=stream0)
        del arg58_1
        del arg59_1
        del arg60_1
        buf78 = reinterpret_tensor(buf70, (512, 768), (768, 1), 0); del buf70  # reuse
        # Topologically Sorted Source Nodes: [linear_18], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf77, (512, 768), (768, 1), 0), reinterpret_tensor(arg61_1, (768, 768), (1, 768), 0), out=buf78)
        del arg61_1
        buf79 = reinterpret_tensor(buf65, (512, 768), (768, 1), 0); del buf65  # reuse
        # Topologically Sorted Source Nodes: [linear_19], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf77, (512, 768), (768, 1), 0), reinterpret_tensor(arg63_1, (768, 768), (1, 768), 0), out=buf79)
        del arg63_1
        buf80 = reinterpret_tensor(buf55, (2, 12, 256, 64), (196608, 16384, 64, 1), 0); del buf55  # reuse
        # Topologically Sorted Source Nodes: [matmul_6], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf78, arg62_1, buf80, 393216, grid=grid(393216), stream=stream0)
        del arg62_1
        buf81 = reinterpret_tensor(buf78, (2, 12, 64, 256), (196608, 16384, 256, 1), 0); del buf78  # reuse
        # Topologically Sorted Source Nodes: [matmul_6], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf79, arg64_1, buf81, 1536, 256, grid=grid(1536, 256), stream=stream0)
        del arg64_1
        buf82 = reinterpret_tensor(buf72, (24, 256, 256), (65536, 256, 1), 0); del buf72  # reuse
        # Topologically Sorted Source Nodes: [matmul_6], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf80, (24, 256, 64), (16384, 64, 1), 0), reinterpret_tensor(buf81, (24, 64, 256), (16384, 256, 1), 0), out=buf82)
        buf86 = reinterpret_tensor(buf82, (2, 12, 256, 256), (786432, 65536, 256, 1), 0); del buf82  # reuse
        # Topologically Sorted Source Nodes: [extended_attention_mask_1, sub, extended_attention_mask_2, attn_weights_12, attn_weights_13, softmax_3], Original ATen: [aten._to_copy, aten.rsub, aten.mul, aten.add, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_red_fused__softmax__to_copy_add_mul_rsub_3.run(buf86, arg1_1, 6144, 256, grid=grid(6144), stream=stream0)
        buf85 = reinterpret_tensor(buf81, (512, 768), (768, 1), 0); del buf81  # reuse
        # Topologically Sorted Source Nodes: [linear_20], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf77, (512, 768), (768, 1), 0), reinterpret_tensor(arg65_1, (768, 768), (1, 768), 0), out=buf85)
        del arg65_1
        buf87 = buf80; del buf80  # reuse
        # Topologically Sorted Source Nodes: [attn_output_9], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf85, arg66_1, buf87, 393216, grid=grid(393216), stream=stream0)
        del arg66_1
        buf88 = reinterpret_tensor(buf85, (24, 256, 64), (16384, 64, 1), 0); del buf85  # reuse
        # Topologically Sorted Source Nodes: [attn_output_9], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf86, (24, 256, 256), (65536, 256, 1), 0), reinterpret_tensor(buf87, (24, 256, 64), (16384, 64, 1), 0), out=buf88)
        buf89 = reinterpret_tensor(buf87, (2, 256, 12, 64), (196608, 768, 64, 1), 0); del buf87  # reuse
        # Topologically Sorted Source Nodes: [attn_output_10], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf88, buf89, 393216, grid=grid(393216), stream=stream0)
        buf90 = reinterpret_tensor(buf88, (512, 768), (768, 1), 0); del buf88  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_24], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf89, (512, 768), (768, 1), 0), reinterpret_tensor(arg67_1, (768, 768), (1, 768), 0), out=buf90)
        del arg67_1
        buf94 = reinterpret_tensor(buf90, (2, 256, 768), (196608, 768, 1), 0); del buf90  # reuse
        # Topologically Sorted Source Nodes: [add_18, hidden_states_26], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf94, arg68_1, buf77, arg69_1, arg70_1, 512, 768, grid=grid(512), stream=stream0)
        del arg68_1
        del arg69_1
        del arg70_1
        buf95 = reinterpret_tensor(buf86, (512, 3072), (3072, 1), 0); del buf86  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_27], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf94, (512, 768), (768, 1), 0), reinterpret_tensor(arg71_1, (768, 3072), (1, 768), 0), out=buf95)
        del arg71_1
        buf96 = reinterpret_tensor(buf95, (2, 256, 3072), (786432, 3072, 1), 0); del buf95  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_28], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_6.run(buf96, arg72_1, 1572864, grid=grid(1572864), stream=stream0)
        del arg72_1
        buf97 = reinterpret_tensor(buf77, (512, 768), (768, 1), 0); del buf77  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_29], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf96, (512, 3072), (3072, 1), 0), reinterpret_tensor(arg73_1, (3072, 768), (1, 3072), 0), out=buf97)
        del arg73_1
        buf101 = reinterpret_tensor(buf97, (2, 256, 768), (196608, 768, 1), 0); del buf97  # reuse
        # Topologically Sorted Source Nodes: [add_19, hidden_states_31], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf101, arg74_1, buf94, arg75_1, arg76_1, 512, 768, grid=grid(512), stream=stream0)
        del arg74_1
        del arg75_1
        del arg76_1
        buf102 = reinterpret_tensor(buf94, (512, 768), (768, 1), 0); del buf94  # reuse
        # Topologically Sorted Source Nodes: [linear_24], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf101, (512, 768), (768, 1), 0), reinterpret_tensor(arg77_1, (768, 768), (1, 768), 0), out=buf102)
        del arg77_1
        buf103 = reinterpret_tensor(buf89, (512, 768), (768, 1), 0); del buf89  # reuse
        # Topologically Sorted Source Nodes: [linear_25], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf101, (512, 768), (768, 1), 0), reinterpret_tensor(arg79_1, (768, 768), (1, 768), 0), out=buf103)
        del arg79_1
        buf104 = reinterpret_tensor(buf79, (2, 12, 256, 64), (196608, 16384, 64, 1), 0); del buf79  # reuse
        # Topologically Sorted Source Nodes: [matmul_8], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf102, arg78_1, buf104, 393216, grid=grid(393216), stream=stream0)
        del arg78_1
        buf105 = reinterpret_tensor(buf102, (2, 12, 64, 256), (196608, 16384, 256, 1), 0); del buf102  # reuse
        # Topologically Sorted Source Nodes: [matmul_8], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf103, arg80_1, buf105, 1536, 256, grid=grid(1536, 256), stream=stream0)
        del arg80_1
        buf106 = reinterpret_tensor(buf96, (24, 256, 256), (65536, 256, 1), 0); del buf96  # reuse
        # Topologically Sorted Source Nodes: [matmul_8], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf104, (24, 256, 64), (16384, 64, 1), 0), reinterpret_tensor(buf105, (24, 64, 256), (16384, 256, 1), 0), out=buf106)
        buf110 = reinterpret_tensor(buf106, (2, 12, 256, 256), (786432, 65536, 256, 1), 0); del buf106  # reuse
        # Topologically Sorted Source Nodes: [extended_attention_mask_1, sub, extended_attention_mask_2, attn_weights_16, attn_weights_17, softmax_4], Original ATen: [aten._to_copy, aten.rsub, aten.mul, aten.add, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_red_fused__softmax__to_copy_add_mul_rsub_3.run(buf110, arg1_1, 6144, 256, grid=grid(6144), stream=stream0)
        buf109 = reinterpret_tensor(buf105, (512, 768), (768, 1), 0); del buf105  # reuse
        # Topologically Sorted Source Nodes: [linear_26], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf101, (512, 768), (768, 1), 0), reinterpret_tensor(arg81_1, (768, 768), (1, 768), 0), out=buf109)
        del arg81_1
        buf111 = buf104; del buf104  # reuse
        # Topologically Sorted Source Nodes: [attn_output_12], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf109, arg82_1, buf111, 393216, grid=grid(393216), stream=stream0)
        del arg82_1
        buf112 = reinterpret_tensor(buf109, (24, 256, 64), (16384, 64, 1), 0); del buf109  # reuse
        # Topologically Sorted Source Nodes: [attn_output_12], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf110, (24, 256, 256), (65536, 256, 1), 0), reinterpret_tensor(buf111, (24, 256, 64), (16384, 64, 1), 0), out=buf112)
        buf113 = reinterpret_tensor(buf111, (2, 256, 12, 64), (196608, 768, 64, 1), 0); del buf111  # reuse
        # Topologically Sorted Source Nodes: [attn_output_13], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf112, buf113, 393216, grid=grid(393216), stream=stream0)
        buf114 = reinterpret_tensor(buf112, (512, 768), (768, 1), 0); del buf112  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_32], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf113, (512, 768), (768, 1), 0), reinterpret_tensor(arg83_1, (768, 768), (1, 768), 0), out=buf114)
        del arg83_1
        buf118 = reinterpret_tensor(buf114, (2, 256, 768), (196608, 768, 1), 0); del buf114  # reuse
        # Topologically Sorted Source Nodes: [add_21, hidden_states_34], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf118, arg84_1, buf101, arg85_1, arg86_1, 512, 768, grid=grid(512), stream=stream0)
        del arg84_1
        del arg85_1
        del arg86_1
        buf119 = reinterpret_tensor(buf110, (512, 3072), (3072, 1), 0); del buf110  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_35], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf118, (512, 768), (768, 1), 0), reinterpret_tensor(arg87_1, (768, 3072), (1, 768), 0), out=buf119)
        del arg87_1
        buf120 = reinterpret_tensor(buf119, (2, 256, 3072), (786432, 3072, 1), 0); del buf119  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_36], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_6.run(buf120, arg88_1, 1572864, grid=grid(1572864), stream=stream0)
        del arg88_1
        buf121 = reinterpret_tensor(buf101, (512, 768), (768, 1), 0); del buf101  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_37], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf120, (512, 3072), (3072, 1), 0), reinterpret_tensor(arg89_1, (3072, 768), (1, 3072), 0), out=buf121)
        del arg89_1
        buf125 = reinterpret_tensor(buf121, (2, 256, 768), (196608, 768, 1), 0); del buf121  # reuse
        # Topologically Sorted Source Nodes: [add_22, hidden_states_39], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf125, arg90_1, buf118, arg91_1, arg92_1, 512, 768, grid=grid(512), stream=stream0)
        del arg90_1
        del arg91_1
        del arg92_1
        buf126 = reinterpret_tensor(buf118, (512, 768), (768, 1), 0); del buf118  # reuse
        # Topologically Sorted Source Nodes: [linear_30], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf125, (512, 768), (768, 1), 0), reinterpret_tensor(arg93_1, (768, 768), (1, 768), 0), out=buf126)
        del arg93_1
        buf127 = reinterpret_tensor(buf113, (512, 768), (768, 1), 0); del buf113  # reuse
        # Topologically Sorted Source Nodes: [linear_31], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf125, (512, 768), (768, 1), 0), reinterpret_tensor(arg95_1, (768, 768), (1, 768), 0), out=buf127)
        del arg95_1
        buf128 = reinterpret_tensor(buf103, (2, 12, 256, 64), (196608, 16384, 64, 1), 0); del buf103  # reuse
        # Topologically Sorted Source Nodes: [matmul_10], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf126, arg94_1, buf128, 393216, grid=grid(393216), stream=stream0)
        del arg94_1
        buf129 = reinterpret_tensor(buf126, (2, 12, 64, 256), (196608, 16384, 256, 1), 0); del buf126  # reuse
        # Topologically Sorted Source Nodes: [matmul_10], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf127, arg96_1, buf129, 1536, 256, grid=grid(1536, 256), stream=stream0)
        del arg96_1
        buf130 = reinterpret_tensor(buf120, (24, 256, 256), (65536, 256, 1), 0); del buf120  # reuse
        # Topologically Sorted Source Nodes: [matmul_10], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf128, (24, 256, 64), (16384, 64, 1), 0), reinterpret_tensor(buf129, (24, 64, 256), (16384, 256, 1), 0), out=buf130)
        buf134 = reinterpret_tensor(buf130, (2, 12, 256, 256), (786432, 65536, 256, 1), 0); del buf130  # reuse
        # Topologically Sorted Source Nodes: [extended_attention_mask_1, sub, extended_attention_mask_2, attn_weights_20, attn_weights_21, softmax_5], Original ATen: [aten._to_copy, aten.rsub, aten.mul, aten.add, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_red_fused__softmax__to_copy_add_mul_rsub_3.run(buf134, arg1_1, 6144, 256, grid=grid(6144), stream=stream0)
        buf133 = reinterpret_tensor(buf129, (512, 768), (768, 1), 0); del buf129  # reuse
        # Topologically Sorted Source Nodes: [linear_32], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf125, (512, 768), (768, 1), 0), reinterpret_tensor(arg97_1, (768, 768), (1, 768), 0), out=buf133)
        del arg97_1
        buf135 = buf128; del buf128  # reuse
        # Topologically Sorted Source Nodes: [attn_output_15], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf133, arg98_1, buf135, 393216, grid=grid(393216), stream=stream0)
        del arg98_1
        buf136 = reinterpret_tensor(buf133, (24, 256, 64), (16384, 64, 1), 0); del buf133  # reuse
        # Topologically Sorted Source Nodes: [attn_output_15], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf134, (24, 256, 256), (65536, 256, 1), 0), reinterpret_tensor(buf135, (24, 256, 64), (16384, 64, 1), 0), out=buf136)
        buf137 = reinterpret_tensor(buf135, (2, 256, 12, 64), (196608, 768, 64, 1), 0); del buf135  # reuse
        # Topologically Sorted Source Nodes: [attn_output_16], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf136, buf137, 393216, grid=grid(393216), stream=stream0)
        buf138 = reinterpret_tensor(buf136, (512, 768), (768, 1), 0); del buf136  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_40], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf137, (512, 768), (768, 1), 0), reinterpret_tensor(arg99_1, (768, 768), (1, 768), 0), out=buf138)
        del arg99_1
        buf142 = reinterpret_tensor(buf138, (2, 256, 768), (196608, 768, 1), 0); del buf138  # reuse
        # Topologically Sorted Source Nodes: [add_24, hidden_states_42], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf142, arg100_1, buf125, arg101_1, arg102_1, 512, 768, grid=grid(512), stream=stream0)
        del arg100_1
        del arg101_1
        del arg102_1
        buf143 = reinterpret_tensor(buf134, (512, 3072), (3072, 1), 0); del buf134  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_43], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf142, (512, 768), (768, 1), 0), reinterpret_tensor(arg103_1, (768, 3072), (1, 768), 0), out=buf143)
        del arg103_1
        buf144 = reinterpret_tensor(buf143, (2, 256, 3072), (786432, 3072, 1), 0); del buf143  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_44], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_6.run(buf144, arg104_1, 1572864, grid=grid(1572864), stream=stream0)
        del arg104_1
        buf145 = reinterpret_tensor(buf125, (512, 768), (768, 1), 0); del buf125  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_45], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf144, (512, 3072), (3072, 1), 0), reinterpret_tensor(arg105_1, (3072, 768), (1, 3072), 0), out=buf145)
        del arg105_1
        buf149 = reinterpret_tensor(buf145, (2, 256, 768), (196608, 768, 1), 0); del buf145  # reuse
        # Topologically Sorted Source Nodes: [add_25, hidden_states_47], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf149, arg106_1, buf142, arg107_1, arg108_1, 512, 768, grid=grid(512), stream=stream0)
        del arg106_1
        del arg107_1
        del arg108_1
        buf150 = reinterpret_tensor(buf142, (512, 768), (768, 1), 0); del buf142  # reuse
        # Topologically Sorted Source Nodes: [linear_36], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf149, (512, 768), (768, 1), 0), reinterpret_tensor(arg109_1, (768, 768), (1, 768), 0), out=buf150)
        del arg109_1
        buf151 = reinterpret_tensor(buf137, (512, 768), (768, 1), 0); del buf137  # reuse
        # Topologically Sorted Source Nodes: [linear_37], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf149, (512, 768), (768, 1), 0), reinterpret_tensor(arg111_1, (768, 768), (1, 768), 0), out=buf151)
        del arg111_1
        buf152 = reinterpret_tensor(buf127, (2, 12, 256, 64), (196608, 16384, 64, 1), 0); del buf127  # reuse
        # Topologically Sorted Source Nodes: [matmul_12], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf150, arg110_1, buf152, 393216, grid=grid(393216), stream=stream0)
        del arg110_1
        buf153 = reinterpret_tensor(buf150, (2, 12, 64, 256), (196608, 16384, 256, 1), 0); del buf150  # reuse
        # Topologically Sorted Source Nodes: [matmul_12], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf151, arg112_1, buf153, 1536, 256, grid=grid(1536, 256), stream=stream0)
        del arg112_1
        buf154 = reinterpret_tensor(buf144, (24, 256, 256), (65536, 256, 1), 0); del buf144  # reuse
        # Topologically Sorted Source Nodes: [matmul_12], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf152, (24, 256, 64), (16384, 64, 1), 0), reinterpret_tensor(buf153, (24, 64, 256), (16384, 256, 1), 0), out=buf154)
        buf158 = reinterpret_tensor(buf154, (2, 12, 256, 256), (786432, 65536, 256, 1), 0); del buf154  # reuse
        # Topologically Sorted Source Nodes: [extended_attention_mask_1, sub, extended_attention_mask_2, attn_weights_24, attn_weights_25, softmax_6], Original ATen: [aten._to_copy, aten.rsub, aten.mul, aten.add, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_red_fused__softmax__to_copy_add_mul_rsub_3.run(buf158, arg1_1, 6144, 256, grid=grid(6144), stream=stream0)
        buf157 = reinterpret_tensor(buf153, (512, 768), (768, 1), 0); del buf153  # reuse
        # Topologically Sorted Source Nodes: [linear_38], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf149, (512, 768), (768, 1), 0), reinterpret_tensor(arg113_1, (768, 768), (1, 768), 0), out=buf157)
        del arg113_1
        buf159 = buf152; del buf152  # reuse
        # Topologically Sorted Source Nodes: [attn_output_18], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf157, arg114_1, buf159, 393216, grid=grid(393216), stream=stream0)
        del arg114_1
        buf160 = reinterpret_tensor(buf157, (24, 256, 64), (16384, 64, 1), 0); del buf157  # reuse
        # Topologically Sorted Source Nodes: [attn_output_18], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf158, (24, 256, 256), (65536, 256, 1), 0), reinterpret_tensor(buf159, (24, 256, 64), (16384, 64, 1), 0), out=buf160)
        buf161 = reinterpret_tensor(buf159, (2, 256, 12, 64), (196608, 768, 64, 1), 0); del buf159  # reuse
        # Topologically Sorted Source Nodes: [attn_output_19], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf160, buf161, 393216, grid=grid(393216), stream=stream0)
        buf162 = reinterpret_tensor(buf160, (512, 768), (768, 1), 0); del buf160  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_48], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf161, (512, 768), (768, 1), 0), reinterpret_tensor(arg115_1, (768, 768), (1, 768), 0), out=buf162)
        del arg115_1
        buf166 = reinterpret_tensor(buf162, (2, 256, 768), (196608, 768, 1), 0); del buf162  # reuse
        # Topologically Sorted Source Nodes: [add_27, hidden_states_50], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf166, arg116_1, buf149, arg117_1, arg118_1, 512, 768, grid=grid(512), stream=stream0)
        del arg116_1
        del arg117_1
        del arg118_1
        buf167 = reinterpret_tensor(buf158, (512, 3072), (3072, 1), 0); del buf158  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_51], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf166, (512, 768), (768, 1), 0), reinterpret_tensor(arg119_1, (768, 3072), (1, 768), 0), out=buf167)
        del arg119_1
        buf168 = reinterpret_tensor(buf167, (2, 256, 3072), (786432, 3072, 1), 0); del buf167  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_52], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_6.run(buf168, arg120_1, 1572864, grid=grid(1572864), stream=stream0)
        del arg120_1
        buf169 = reinterpret_tensor(buf149, (512, 768), (768, 1), 0); del buf149  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_53], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf168, (512, 3072), (3072, 1), 0), reinterpret_tensor(arg121_1, (3072, 768), (1, 3072), 0), out=buf169)
        del arg121_1
        buf173 = reinterpret_tensor(buf169, (2, 256, 768), (196608, 768, 1), 0); del buf169  # reuse
        # Topologically Sorted Source Nodes: [add_28, hidden_states_55], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf173, arg122_1, buf166, arg123_1, arg124_1, 512, 768, grid=grid(512), stream=stream0)
        del arg122_1
        del arg123_1
        del arg124_1
        buf174 = reinterpret_tensor(buf166, (512, 768), (768, 1), 0); del buf166  # reuse
        # Topologically Sorted Source Nodes: [linear_42], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf173, (512, 768), (768, 1), 0), reinterpret_tensor(arg125_1, (768, 768), (1, 768), 0), out=buf174)
        del arg125_1
        buf175 = reinterpret_tensor(buf161, (512, 768), (768, 1), 0); del buf161  # reuse
        # Topologically Sorted Source Nodes: [linear_43], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf173, (512, 768), (768, 1), 0), reinterpret_tensor(arg127_1, (768, 768), (1, 768), 0), out=buf175)
        del arg127_1
        buf176 = reinterpret_tensor(buf151, (2, 12, 256, 64), (196608, 16384, 64, 1), 0); del buf151  # reuse
        # Topologically Sorted Source Nodes: [matmul_14], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf174, arg126_1, buf176, 393216, grid=grid(393216), stream=stream0)
        del arg126_1
        buf177 = reinterpret_tensor(buf174, (2, 12, 64, 256), (196608, 16384, 256, 1), 0); del buf174  # reuse
        # Topologically Sorted Source Nodes: [matmul_14], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf175, arg128_1, buf177, 1536, 256, grid=grid(1536, 256), stream=stream0)
        del arg128_1
        buf178 = reinterpret_tensor(buf168, (24, 256, 256), (65536, 256, 1), 0); del buf168  # reuse
        # Topologically Sorted Source Nodes: [matmul_14], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf176, (24, 256, 64), (16384, 64, 1), 0), reinterpret_tensor(buf177, (24, 64, 256), (16384, 256, 1), 0), out=buf178)
        buf182 = reinterpret_tensor(buf178, (2, 12, 256, 256), (786432, 65536, 256, 1), 0); del buf178  # reuse
        # Topologically Sorted Source Nodes: [extended_attention_mask_1, sub, extended_attention_mask_2, attn_weights_28, attn_weights_29, softmax_7], Original ATen: [aten._to_copy, aten.rsub, aten.mul, aten.add, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_red_fused__softmax__to_copy_add_mul_rsub_3.run(buf182, arg1_1, 6144, 256, grid=grid(6144), stream=stream0)
        buf181 = reinterpret_tensor(buf177, (512, 768), (768, 1), 0); del buf177  # reuse
        # Topologically Sorted Source Nodes: [linear_44], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf173, (512, 768), (768, 1), 0), reinterpret_tensor(arg129_1, (768, 768), (1, 768), 0), out=buf181)
        del arg129_1
        buf183 = buf176; del buf176  # reuse
        # Topologically Sorted Source Nodes: [attn_output_21], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf181, arg130_1, buf183, 393216, grid=grid(393216), stream=stream0)
        del arg130_1
        buf184 = reinterpret_tensor(buf181, (24, 256, 64), (16384, 64, 1), 0); del buf181  # reuse
        # Topologically Sorted Source Nodes: [attn_output_21], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf182, (24, 256, 256), (65536, 256, 1), 0), reinterpret_tensor(buf183, (24, 256, 64), (16384, 64, 1), 0), out=buf184)
        buf185 = reinterpret_tensor(buf183, (2, 256, 12, 64), (196608, 768, 64, 1), 0); del buf183  # reuse
        # Topologically Sorted Source Nodes: [attn_output_22], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf184, buf185, 393216, grid=grid(393216), stream=stream0)
        buf186 = reinterpret_tensor(buf184, (512, 768), (768, 1), 0); del buf184  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_56], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf185, (512, 768), (768, 1), 0), reinterpret_tensor(arg131_1, (768, 768), (1, 768), 0), out=buf186)
        del arg131_1
        buf190 = reinterpret_tensor(buf186, (2, 256, 768), (196608, 768, 1), 0); del buf186  # reuse
        # Topologically Sorted Source Nodes: [add_30, hidden_states_58], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf190, arg132_1, buf173, arg133_1, arg134_1, 512, 768, grid=grid(512), stream=stream0)
        del arg132_1
        del arg133_1
        del arg134_1
        buf191 = reinterpret_tensor(buf182, (512, 3072), (3072, 1), 0); del buf182  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_59], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf190, (512, 768), (768, 1), 0), reinterpret_tensor(arg135_1, (768, 3072), (1, 768), 0), out=buf191)
        del arg135_1
        buf192 = reinterpret_tensor(buf191, (2, 256, 3072), (786432, 3072, 1), 0); del buf191  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_60], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_6.run(buf192, arg136_1, 1572864, grid=grid(1572864), stream=stream0)
        del arg136_1
        buf193 = reinterpret_tensor(buf173, (512, 768), (768, 1), 0); del buf173  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_61], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf192, (512, 3072), (3072, 1), 0), reinterpret_tensor(arg137_1, (3072, 768), (1, 3072), 0), out=buf193)
        del arg137_1
        buf197 = reinterpret_tensor(buf193, (2, 256, 768), (196608, 768, 1), 0); del buf193  # reuse
        # Topologically Sorted Source Nodes: [add_31, hidden_states_63], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf197, arg138_1, buf190, arg139_1, arg140_1, 512, 768, grid=grid(512), stream=stream0)
        del arg138_1
        del arg139_1
        del arg140_1
        buf198 = reinterpret_tensor(buf190, (512, 768), (768, 1), 0); del buf190  # reuse
        # Topologically Sorted Source Nodes: [linear_48], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf197, (512, 768), (768, 1), 0), reinterpret_tensor(arg141_1, (768, 768), (1, 768), 0), out=buf198)
        del arg141_1
        buf199 = reinterpret_tensor(buf185, (512, 768), (768, 1), 0); del buf185  # reuse
        # Topologically Sorted Source Nodes: [linear_49], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf197, (512, 768), (768, 1), 0), reinterpret_tensor(arg143_1, (768, 768), (1, 768), 0), out=buf199)
        del arg143_1
        buf200 = reinterpret_tensor(buf175, (2, 12, 256, 64), (196608, 16384, 64, 1), 0); del buf175  # reuse
        # Topologically Sorted Source Nodes: [matmul_16], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf198, arg142_1, buf200, 393216, grid=grid(393216), stream=stream0)
        del arg142_1
        buf201 = reinterpret_tensor(buf198, (2, 12, 64, 256), (196608, 16384, 256, 1), 0); del buf198  # reuse
        # Topologically Sorted Source Nodes: [matmul_16], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf199, arg144_1, buf201, 1536, 256, grid=grid(1536, 256), stream=stream0)
        del arg144_1
        buf202 = reinterpret_tensor(buf192, (24, 256, 256), (65536, 256, 1), 0); del buf192  # reuse
        # Topologically Sorted Source Nodes: [matmul_16], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf200, (24, 256, 64), (16384, 64, 1), 0), reinterpret_tensor(buf201, (24, 64, 256), (16384, 256, 1), 0), out=buf202)
        buf206 = reinterpret_tensor(buf202, (2, 12, 256, 256), (786432, 65536, 256, 1), 0); del buf202  # reuse
        # Topologically Sorted Source Nodes: [extended_attention_mask_1, sub, extended_attention_mask_2, attn_weights_32, attn_weights_33, softmax_8], Original ATen: [aten._to_copy, aten.rsub, aten.mul, aten.add, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_red_fused__softmax__to_copy_add_mul_rsub_3.run(buf206, arg1_1, 6144, 256, grid=grid(6144), stream=stream0)
        buf205 = reinterpret_tensor(buf201, (512, 768), (768, 1), 0); del buf201  # reuse
        # Topologically Sorted Source Nodes: [linear_50], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf197, (512, 768), (768, 1), 0), reinterpret_tensor(arg145_1, (768, 768), (1, 768), 0), out=buf205)
        del arg145_1
        buf207 = buf200; del buf200  # reuse
        # Topologically Sorted Source Nodes: [attn_output_24], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf205, arg146_1, buf207, 393216, grid=grid(393216), stream=stream0)
        del arg146_1
        buf208 = reinterpret_tensor(buf205, (24, 256, 64), (16384, 64, 1), 0); del buf205  # reuse
        # Topologically Sorted Source Nodes: [attn_output_24], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf206, (24, 256, 256), (65536, 256, 1), 0), reinterpret_tensor(buf207, (24, 256, 64), (16384, 64, 1), 0), out=buf208)
        buf209 = reinterpret_tensor(buf207, (2, 256, 12, 64), (196608, 768, 64, 1), 0); del buf207  # reuse
        # Topologically Sorted Source Nodes: [attn_output_25], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf208, buf209, 393216, grid=grid(393216), stream=stream0)
        buf210 = reinterpret_tensor(buf208, (512, 768), (768, 1), 0); del buf208  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_64], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf209, (512, 768), (768, 1), 0), reinterpret_tensor(arg147_1, (768, 768), (1, 768), 0), out=buf210)
        del arg147_1
        buf214 = reinterpret_tensor(buf210, (2, 256, 768), (196608, 768, 1), 0); del buf210  # reuse
        # Topologically Sorted Source Nodes: [add_33, hidden_states_66], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf214, arg148_1, buf197, arg149_1, arg150_1, 512, 768, grid=grid(512), stream=stream0)
        del arg148_1
        del arg149_1
        del arg150_1
        buf215 = reinterpret_tensor(buf206, (512, 3072), (3072, 1), 0); del buf206  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_67], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf214, (512, 768), (768, 1), 0), reinterpret_tensor(arg151_1, (768, 3072), (1, 768), 0), out=buf215)
        del arg151_1
        buf216 = reinterpret_tensor(buf215, (2, 256, 3072), (786432, 3072, 1), 0); del buf215  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_68], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_6.run(buf216, arg152_1, 1572864, grid=grid(1572864), stream=stream0)
        del arg152_1
        buf217 = reinterpret_tensor(buf197, (512, 768), (768, 1), 0); del buf197  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_69], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf216, (512, 3072), (3072, 1), 0), reinterpret_tensor(arg153_1, (3072, 768), (1, 3072), 0), out=buf217)
        del arg153_1
        buf221 = reinterpret_tensor(buf217, (2, 256, 768), (196608, 768, 1), 0); del buf217  # reuse
        # Topologically Sorted Source Nodes: [add_34, hidden_states_71], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf221, arg154_1, buf214, arg155_1, arg156_1, 512, 768, grid=grid(512), stream=stream0)
        del arg154_1
        del arg155_1
        del arg156_1
        buf222 = reinterpret_tensor(buf214, (512, 768), (768, 1), 0); del buf214  # reuse
        # Topologically Sorted Source Nodes: [linear_54], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf221, (512, 768), (768, 1), 0), reinterpret_tensor(arg157_1, (768, 768), (1, 768), 0), out=buf222)
        del arg157_1
        buf223 = reinterpret_tensor(buf209, (512, 768), (768, 1), 0); del buf209  # reuse
        # Topologically Sorted Source Nodes: [linear_55], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf221, (512, 768), (768, 1), 0), reinterpret_tensor(arg159_1, (768, 768), (1, 768), 0), out=buf223)
        del arg159_1
        buf224 = reinterpret_tensor(buf199, (2, 12, 256, 64), (196608, 16384, 64, 1), 0); del buf199  # reuse
        # Topologically Sorted Source Nodes: [matmul_18], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf222, arg158_1, buf224, 393216, grid=grid(393216), stream=stream0)
        del arg158_1
        buf225 = reinterpret_tensor(buf222, (2, 12, 64, 256), (196608, 16384, 256, 1), 0); del buf222  # reuse
        # Topologically Sorted Source Nodes: [matmul_18], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf223, arg160_1, buf225, 1536, 256, grid=grid(1536, 256), stream=stream0)
        del arg160_1
        buf226 = reinterpret_tensor(buf216, (24, 256, 256), (65536, 256, 1), 0); del buf216  # reuse
        # Topologically Sorted Source Nodes: [matmul_18], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf224, (24, 256, 64), (16384, 64, 1), 0), reinterpret_tensor(buf225, (24, 64, 256), (16384, 256, 1), 0), out=buf226)
        buf230 = reinterpret_tensor(buf226, (2, 12, 256, 256), (786432, 65536, 256, 1), 0); del buf226  # reuse
        # Topologically Sorted Source Nodes: [extended_attention_mask_1, sub, extended_attention_mask_2, attn_weights_36, attn_weights_37, softmax_9], Original ATen: [aten._to_copy, aten.rsub, aten.mul, aten.add, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_red_fused__softmax__to_copy_add_mul_rsub_3.run(buf230, arg1_1, 6144, 256, grid=grid(6144), stream=stream0)
        buf229 = reinterpret_tensor(buf225, (512, 768), (768, 1), 0); del buf225  # reuse
        # Topologically Sorted Source Nodes: [linear_56], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf221, (512, 768), (768, 1), 0), reinterpret_tensor(arg161_1, (768, 768), (1, 768), 0), out=buf229)
        del arg161_1
        buf231 = buf224; del buf224  # reuse
        # Topologically Sorted Source Nodes: [attn_output_27], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf229, arg162_1, buf231, 393216, grid=grid(393216), stream=stream0)
        del arg162_1
        buf232 = reinterpret_tensor(buf229, (24, 256, 64), (16384, 64, 1), 0); del buf229  # reuse
        # Topologically Sorted Source Nodes: [attn_output_27], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf230, (24, 256, 256), (65536, 256, 1), 0), reinterpret_tensor(buf231, (24, 256, 64), (16384, 64, 1), 0), out=buf232)
        buf233 = reinterpret_tensor(buf231, (2, 256, 12, 64), (196608, 768, 64, 1), 0); del buf231  # reuse
        # Topologically Sorted Source Nodes: [attn_output_28], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf232, buf233, 393216, grid=grid(393216), stream=stream0)
        buf234 = reinterpret_tensor(buf232, (512, 768), (768, 1), 0); del buf232  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_72], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf233, (512, 768), (768, 1), 0), reinterpret_tensor(arg163_1, (768, 768), (1, 768), 0), out=buf234)
        del arg163_1
        buf238 = reinterpret_tensor(buf234, (2, 256, 768), (196608, 768, 1), 0); del buf234  # reuse
        # Topologically Sorted Source Nodes: [add_36, hidden_states_74], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf238, arg164_1, buf221, arg165_1, arg166_1, 512, 768, grid=grid(512), stream=stream0)
        del arg164_1
        del arg165_1
        del arg166_1
        buf239 = reinterpret_tensor(buf230, (512, 3072), (3072, 1), 0); del buf230  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_75], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf238, (512, 768), (768, 1), 0), reinterpret_tensor(arg167_1, (768, 3072), (1, 768), 0), out=buf239)
        del arg167_1
        buf240 = reinterpret_tensor(buf239, (2, 256, 3072), (786432, 3072, 1), 0); del buf239  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_76], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_6.run(buf240, arg168_1, 1572864, grid=grid(1572864), stream=stream0)
        del arg168_1
        buf241 = reinterpret_tensor(buf221, (512, 768), (768, 1), 0); del buf221  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_77], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf240, (512, 3072), (3072, 1), 0), reinterpret_tensor(arg169_1, (3072, 768), (1, 3072), 0), out=buf241)
        del arg169_1
        buf245 = reinterpret_tensor(buf241, (2, 256, 768), (196608, 768, 1), 0); del buf241  # reuse
        # Topologically Sorted Source Nodes: [add_37, hidden_states_79], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf245, arg170_1, buf238, arg171_1, arg172_1, 512, 768, grid=grid(512), stream=stream0)
        del arg170_1
        del arg171_1
        del arg172_1
        buf246 = reinterpret_tensor(buf238, (512, 768), (768, 1), 0); del buf238  # reuse
        # Topologically Sorted Source Nodes: [linear_60], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf245, (512, 768), (768, 1), 0), reinterpret_tensor(arg173_1, (768, 768), (1, 768), 0), out=buf246)
        del arg173_1
        buf247 = reinterpret_tensor(buf233, (512, 768), (768, 1), 0); del buf233  # reuse
        # Topologically Sorted Source Nodes: [linear_61], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf245, (512, 768), (768, 1), 0), reinterpret_tensor(arg175_1, (768, 768), (1, 768), 0), out=buf247)
        del arg175_1
        buf248 = reinterpret_tensor(buf223, (2, 12, 256, 64), (196608, 16384, 64, 1), 0); del buf223  # reuse
        # Topologically Sorted Source Nodes: [matmul_20], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf246, arg174_1, buf248, 393216, grid=grid(393216), stream=stream0)
        del arg174_1
        buf249 = reinterpret_tensor(buf246, (2, 12, 64, 256), (196608, 16384, 256, 1), 0); del buf246  # reuse
        # Topologically Sorted Source Nodes: [matmul_20], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf247, arg176_1, buf249, 1536, 256, grid=grid(1536, 256), stream=stream0)
        del arg176_1
        buf250 = reinterpret_tensor(buf240, (24, 256, 256), (65536, 256, 1), 0); del buf240  # reuse
        # Topologically Sorted Source Nodes: [matmul_20], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf248, (24, 256, 64), (16384, 64, 1), 0), reinterpret_tensor(buf249, (24, 64, 256), (16384, 256, 1), 0), out=buf250)
        buf254 = reinterpret_tensor(buf250, (2, 12, 256, 256), (786432, 65536, 256, 1), 0); del buf250  # reuse
        # Topologically Sorted Source Nodes: [extended_attention_mask_1, sub, extended_attention_mask_2, attn_weights_40, attn_weights_41, softmax_10], Original ATen: [aten._to_copy, aten.rsub, aten.mul, aten.add, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_red_fused__softmax__to_copy_add_mul_rsub_3.run(buf254, arg1_1, 6144, 256, grid=grid(6144), stream=stream0)
        buf253 = reinterpret_tensor(buf249, (512, 768), (768, 1), 0); del buf249  # reuse
        # Topologically Sorted Source Nodes: [linear_62], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf245, (512, 768), (768, 1), 0), reinterpret_tensor(arg177_1, (768, 768), (1, 768), 0), out=buf253)
        del arg177_1
        buf255 = buf248; del buf248  # reuse
        # Topologically Sorted Source Nodes: [attn_output_30], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf253, arg178_1, buf255, 393216, grid=grid(393216), stream=stream0)
        del arg178_1
        buf256 = reinterpret_tensor(buf253, (24, 256, 64), (16384, 64, 1), 0); del buf253  # reuse
        # Topologically Sorted Source Nodes: [attn_output_30], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf254, (24, 256, 256), (65536, 256, 1), 0), reinterpret_tensor(buf255, (24, 256, 64), (16384, 64, 1), 0), out=buf256)
        buf257 = reinterpret_tensor(buf255, (2, 256, 12, 64), (196608, 768, 64, 1), 0); del buf255  # reuse
        # Topologically Sorted Source Nodes: [attn_output_31], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf256, buf257, 393216, grid=grid(393216), stream=stream0)
        buf258 = reinterpret_tensor(buf256, (512, 768), (768, 1), 0); del buf256  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_80], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf257, (512, 768), (768, 1), 0), reinterpret_tensor(arg179_1, (768, 768), (1, 768), 0), out=buf258)
        del arg179_1
        buf262 = reinterpret_tensor(buf258, (2, 256, 768), (196608, 768, 1), 0); del buf258  # reuse
        # Topologically Sorted Source Nodes: [add_39, hidden_states_82], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf262, arg180_1, buf245, arg181_1, arg182_1, 512, 768, grid=grid(512), stream=stream0)
        del arg180_1
        del arg181_1
        del arg182_1
        buf263 = reinterpret_tensor(buf254, (512, 3072), (3072, 1), 0); del buf254  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_83], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf262, (512, 768), (768, 1), 0), reinterpret_tensor(arg183_1, (768, 3072), (1, 768), 0), out=buf263)
        del arg183_1
        buf264 = reinterpret_tensor(buf263, (2, 256, 3072), (786432, 3072, 1), 0); del buf263  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_84], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_6.run(buf264, arg184_1, 1572864, grid=grid(1572864), stream=stream0)
        del arg184_1
        buf265 = reinterpret_tensor(buf245, (512, 768), (768, 1), 0); del buf245  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_85], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf264, (512, 3072), (3072, 1), 0), reinterpret_tensor(arg185_1, (3072, 768), (1, 3072), 0), out=buf265)
        del arg185_1
        buf269 = reinterpret_tensor(buf265, (2, 256, 768), (196608, 768, 1), 0); del buf265  # reuse
        # Topologically Sorted Source Nodes: [add_40, hidden_states_87], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf269, arg186_1, buf262, arg187_1, arg188_1, 512, 768, grid=grid(512), stream=stream0)
        del arg186_1
        del arg187_1
        del arg188_1
        buf270 = reinterpret_tensor(buf262, (512, 768), (768, 1), 0); del buf262  # reuse
        # Topologically Sorted Source Nodes: [linear_66], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf269, (512, 768), (768, 1), 0), reinterpret_tensor(arg189_1, (768, 768), (1, 768), 0), out=buf270)
        del arg189_1
        buf271 = reinterpret_tensor(buf257, (512, 768), (768, 1), 0); del buf257  # reuse
        # Topologically Sorted Source Nodes: [linear_67], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf269, (512, 768), (768, 1), 0), reinterpret_tensor(arg191_1, (768, 768), (1, 768), 0), out=buf271)
        del arg191_1
        buf272 = reinterpret_tensor(buf247, (2, 12, 256, 64), (196608, 16384, 64, 1), 0); del buf247  # reuse
        # Topologically Sorted Source Nodes: [matmul_22], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf270, arg190_1, buf272, 393216, grid=grid(393216), stream=stream0)
        del arg190_1
        buf273 = reinterpret_tensor(buf270, (2, 12, 64, 256), (196608, 16384, 256, 1), 0); del buf270  # reuse
        # Topologically Sorted Source Nodes: [matmul_22], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf271, arg192_1, buf273, 1536, 256, grid=grid(1536, 256), stream=stream0)
        del arg192_1
        del buf271
        buf274 = reinterpret_tensor(buf264, (24, 256, 256), (65536, 256, 1), 0); del buf264  # reuse
        # Topologically Sorted Source Nodes: [matmul_22], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf272, (24, 256, 64), (16384, 64, 1), 0), reinterpret_tensor(buf273, (24, 64, 256), (16384, 256, 1), 0), out=buf274)
        buf278 = reinterpret_tensor(buf274, (2, 12, 256, 256), (786432, 65536, 256, 1), 0); del buf274  # reuse
        # Topologically Sorted Source Nodes: [extended_attention_mask_1, sub, extended_attention_mask_2, attn_weights_44, attn_weights_45, softmax_11], Original ATen: [aten._to_copy, aten.rsub, aten.mul, aten.add, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_red_fused__softmax__to_copy_add_mul_rsub_3.run(buf278, arg1_1, 6144, 256, grid=grid(6144), stream=stream0)
        del arg1_1
        buf277 = reinterpret_tensor(buf273, (512, 768), (768, 1), 0); del buf273  # reuse
        # Topologically Sorted Source Nodes: [linear_68], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf269, (512, 768), (768, 1), 0), reinterpret_tensor(arg193_1, (768, 768), (1, 768), 0), out=buf277)
        del arg193_1
        buf279 = buf272; del buf272  # reuse
        # Topologically Sorted Source Nodes: [attn_output_33], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf277, arg194_1, buf279, 393216, grid=grid(393216), stream=stream0)
        del arg194_1
        buf280 = reinterpret_tensor(buf277, (24, 256, 64), (16384, 64, 1), 0); del buf277  # reuse
        # Topologically Sorted Source Nodes: [attn_output_33], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf278, (24, 256, 256), (65536, 256, 1), 0), reinterpret_tensor(buf279, (24, 256, 64), (16384, 64, 1), 0), out=buf280)
        buf281 = reinterpret_tensor(buf279, (2, 256, 12, 64), (196608, 768, 64, 1), 0); del buf279  # reuse
        # Topologically Sorted Source Nodes: [attn_output_34], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf280, buf281, 393216, grid=grid(393216), stream=stream0)
        buf282 = reinterpret_tensor(buf280, (512, 768), (768, 1), 0); del buf280  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_88], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf281, (512, 768), (768, 1), 0), reinterpret_tensor(arg195_1, (768, 768), (1, 768), 0), out=buf282)
        del arg195_1
        del buf281
        buf286 = reinterpret_tensor(buf282, (2, 256, 768), (196608, 768, 1), 0); del buf282  # reuse
        # Topologically Sorted Source Nodes: [add_42, hidden_states_90], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf286, arg196_1, buf269, arg197_1, arg198_1, 512, 768, grid=grid(512), stream=stream0)
        del arg196_1
        del arg197_1
        del arg198_1
        buf287 = reinterpret_tensor(buf278, (512, 3072), (3072, 1), 0); del buf278  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_91], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf286, (512, 768), (768, 1), 0), reinterpret_tensor(arg199_1, (768, 3072), (1, 768), 0), out=buf287)
        del arg199_1
        buf288 = reinterpret_tensor(buf287, (2, 256, 3072), (786432, 3072, 1), 0); del buf287  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_92], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_6.run(buf288, arg200_1, 1572864, grid=grid(1572864), stream=stream0)
        del arg200_1
        buf289 = reinterpret_tensor(buf269, (512, 768), (768, 1), 0); del buf269  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_93], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf288, (512, 3072), (3072, 1), 0), reinterpret_tensor(arg201_1, (3072, 768), (1, 3072), 0), out=buf289)
        del arg201_1
        del buf288
        buf293 = reinterpret_tensor(buf289, (2, 256, 768), (196608, 768, 1), 0); del buf289  # reuse
        # Topologically Sorted Source Nodes: [add_43, hidden_states_95], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf293, arg202_1, buf286, arg203_1, arg204_1, 512, 768, grid=grid(512), stream=stream0)
        del arg202_1
        del arg203_1
        del arg204_1
        del buf286
        buf294 = empty_strided_cuda((2, 768), (768, 1), torch.float32)
        # Topologically Sorted Source Nodes: [pooled_output], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf293, (2, 768), (196608, 1), 0), reinterpret_tensor(arg205_1, (768, 768), (1, 768), 0), out=buf294)
        del arg205_1
        buf295 = buf294; del buf294  # reuse
        # Topologically Sorted Source Nodes: [pooled_output, pooled_output_1], Original ATen: [aten.addmm, aten.tanh]
        stream0 = get_raw_stream(0)
        triton_poi_fused_addmm_tanh_7.run(buf295, arg206_1, 1536, grid=grid(1536), stream=stream0)
        del arg206_1
    return (buf293, buf295, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((2, 256), (256, 1), device='cuda:0', dtype=torch.int64)
    arg1_1 = rand_strided((2, 256), (256, 1), device='cuda:0', dtype=torch.int64)
    arg2_1 = rand_strided((2, 256), (256, 1), device='cuda:0', dtype=torch.int64)
    arg3_1 = rand_strided((2, 256, 4), (1024, 4, 1), device='cuda:0', dtype=torch.int64)
    arg4_1 = rand_strided((30522, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg5_1 = rand_strided((512, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg6_1 = rand_strided((1024, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg7_1 = rand_strided((1024, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg8_1 = rand_strided((1024, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg9_1 = rand_strided((1024, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg10_1 = rand_strided((2, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg11_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg12_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg13_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg14_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg15_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg16_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg17_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg18_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg19_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg20_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg21_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg22_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg23_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg24_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg25_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg26_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg27_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg28_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg29_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg30_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg31_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg32_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg33_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg34_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg35_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg36_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg37_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg38_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg39_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg40_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg41_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg42_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg43_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg44_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg45_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg46_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg47_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg48_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg49_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg50_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg51_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg52_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg53_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg54_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg55_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg56_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg57_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg58_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg59_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg60_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg61_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg62_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg63_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg64_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg65_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg66_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg67_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg68_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg69_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg70_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg71_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg72_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg73_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg74_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg75_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg76_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg77_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg78_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg79_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg80_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg81_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg82_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg83_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg84_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg85_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg86_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg87_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg88_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg89_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg90_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg91_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg92_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg93_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg94_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg95_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg96_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg97_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg98_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg99_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg100_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg101_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg102_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg103_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg104_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg105_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg106_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg107_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg108_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg109_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg110_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg111_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg112_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg113_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg114_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg115_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg116_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg117_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg118_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg119_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg120_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg121_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg122_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg123_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg124_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg125_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg126_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg127_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg128_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg129_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg130_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg131_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg132_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg133_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg134_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg135_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg136_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg137_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg138_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg139_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg140_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg141_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg142_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg143_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg144_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg145_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg146_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg147_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg148_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg149_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg150_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg151_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg152_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg153_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg154_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg155_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg156_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg157_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg158_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg159_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg160_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg161_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg162_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg163_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg164_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg165_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg166_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg167_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg168_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg169_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg170_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg171_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg172_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg173_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg174_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg175_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg176_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg177_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg178_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg179_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg180_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg181_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg182_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg183_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg184_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg185_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg186_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg187_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg188_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg189_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg190_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg191_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg192_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg193_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg194_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg195_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg196_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg197_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg198_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg199_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg200_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg201_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg202_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg203_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg204_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg205_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg206_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg207_1 = rand_strided((1, 512), (512, 1), device='cuda:0', dtype=torch.int64)
    fn = lambda: call([arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1, arg7_1, arg8_1, arg9_1, arg10_1, arg11_1, arg12_1, arg13_1, arg14_1, arg15_1, arg16_1, arg17_1, arg18_1, arg19_1, arg20_1, arg21_1, arg22_1, arg23_1, arg24_1, arg25_1, arg26_1, arg27_1, arg28_1, arg29_1, arg30_1, arg31_1, arg32_1, arg33_1, arg34_1, arg35_1, arg36_1, arg37_1, arg38_1, arg39_1, arg40_1, arg41_1, arg42_1, arg43_1, arg44_1, arg45_1, arg46_1, arg47_1, arg48_1, arg49_1, arg50_1, arg51_1, arg52_1, arg53_1, arg54_1, arg55_1, arg56_1, arg57_1, arg58_1, arg59_1, arg60_1, arg61_1, arg62_1, arg63_1, arg64_1, arg65_1, arg66_1, arg67_1, arg68_1, arg69_1, arg70_1, arg71_1, arg72_1, arg73_1, arg74_1, arg75_1, arg76_1, arg77_1, arg78_1, arg79_1, arg80_1, arg81_1, arg82_1, arg83_1, arg84_1, arg85_1, arg86_1, arg87_1, arg88_1, arg89_1, arg90_1, arg91_1, arg92_1, arg93_1, arg94_1, arg95_1, arg96_1, arg97_1, arg98_1, arg99_1, arg100_1, arg101_1, arg102_1, arg103_1, arg104_1, arg105_1, arg106_1, arg107_1, arg108_1, arg109_1, arg110_1, arg111_1, arg112_1, arg113_1, arg114_1, arg115_1, arg116_1, arg117_1, arg118_1, arg119_1, arg120_1, arg121_1, arg122_1, arg123_1, arg124_1, arg125_1, arg126_1, arg127_1, arg128_1, arg129_1, arg130_1, arg131_1, arg132_1, arg133_1, arg134_1, arg135_1, arg136_1, arg137_1, arg138_1, arg139_1, arg140_1, arg141_1, arg142_1, arg143_1, arg144_1, arg145_1, arg146_1, arg147_1, arg148_1, arg149_1, arg150_1, arg151_1, arg152_1, arg153_1, arg154_1, arg155_1, arg156_1, arg157_1, arg158_1, arg159_1, arg160_1, arg161_1, arg162_1, arg163_1, arg164_1, arg165_1, arg166_1, arg167_1, arg168_1, arg169_1, arg170_1, arg171_1, arg172_1, arg173_1, arg174_1, arg175_1, arg176_1, arg177_1, arg178_1, arg179_1, arg180_1, arg181_1, arg182_1, arg183_1, arg184_1, arg185_1, arg186_1, arg187_1, arg188_1, arg189_1, arg190_1, arg191_1, arg192_1, arg193_1, arg194_1, arg195_1, arg196_1, arg197_1, arg198_1, arg199_1, arg200_1, arg201_1, arg202_1, arg203_1, arg204_1, arg205_1, arg206_1, arg207_1])
    return print_performance(fn, times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('None', benchmark_compiled_module)