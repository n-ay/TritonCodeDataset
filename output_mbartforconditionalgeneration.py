

# ===== run_2025_10_19_04_14_08_043050-pid_19/torchinductor/model__3_inference_3.3/fx_graph_readable.py =====
class <lambda>(torch.nn.Module):
    def forward(self, arg0_1: "i64[2, 128]", arg1_1: "f32[250027, 1024]", arg2_1: "f32[1026, 1024]", arg3_1: "f32[1024]", arg4_1: "f32[1024]", arg5_1: "i64[2, 128]", arg6_1: "f32[1024]", arg7_1: "f32[1024]", arg8_1: "f32[1024, 1024]", arg9_1: "f32[1024]", arg10_1: "f32[1024, 1024]", arg11_1: "f32[1024]", arg12_1: "f32[1024, 1024]", arg13_1: "f32[1024]", arg14_1: "f32[1024, 1024]", arg15_1: "f32[1024]", arg16_1: "f32[1024]", arg17_1: "f32[1024]", arg18_1: "f32[4096, 1024]", arg19_1: "f32[4096]", arg20_1: "f32[1024, 4096]", arg21_1: "f32[1024]", arg22_1: "f32[1024]", arg23_1: "f32[1024]", arg24_1: "f32[1024, 1024]", arg25_1: "f32[1024]", arg26_1: "f32[1024, 1024]", arg27_1: "f32[1024]", arg28_1: "f32[1024, 1024]", arg29_1: "f32[1024]", arg30_1: "f32[1024, 1024]", arg31_1: "f32[1024]", arg32_1: "f32[1024]", arg33_1: "f32[1024]", arg34_1: "f32[4096, 1024]", arg35_1: "f32[4096]", arg36_1: "f32[1024, 4096]", arg37_1: "f32[1024]", arg38_1: "f32[1024]", arg39_1: "f32[1024]", arg40_1: "f32[1024, 1024]", arg41_1: "f32[1024]", arg42_1: "f32[1024, 1024]", arg43_1: "f32[1024]", arg44_1: "f32[1024, 1024]", arg45_1: "f32[1024]", arg46_1: "f32[1024, 1024]", arg47_1: "f32[1024]", arg48_1: "f32[1024]", arg49_1: "f32[1024]", arg50_1: "f32[4096, 1024]", arg51_1: "f32[4096]", arg52_1: "f32[1024, 4096]", arg53_1: "f32[1024]", arg54_1: "f32[1024]", arg55_1: "f32[1024]", arg56_1: "f32[1024, 1024]", arg57_1: "f32[1024]", arg58_1: "f32[1024, 1024]", arg59_1: "f32[1024]", arg60_1: "f32[1024, 1024]", arg61_1: "f32[1024]", arg62_1: "f32[1024, 1024]", arg63_1: "f32[1024]", arg64_1: "f32[1024]", arg65_1: "f32[1024]", arg66_1: "f32[4096, 1024]", arg67_1: "f32[4096]", arg68_1: "f32[1024, 4096]", arg69_1: "f32[1024]", arg70_1: "f32[1024]", arg71_1: "f32[1024]", arg72_1: "f32[1024, 1024]", arg73_1: "f32[1024]", arg74_1: "f32[1024, 1024]", arg75_1: "f32[1024]", arg76_1: "f32[1024, 1024]", arg77_1: "f32[1024]", arg78_1: "f32[1024, 1024]", arg79_1: "f32[1024]", arg80_1: "f32[1024]", arg81_1: "f32[1024]", arg82_1: "f32[4096, 1024]", arg83_1: "f32[4096]", arg84_1: "f32[1024, 4096]", arg85_1: "f32[1024]", arg86_1: "f32[1024]", arg87_1: "f32[1024]", arg88_1: "f32[1024, 1024]", arg89_1: "f32[1024]", arg90_1: "f32[1024, 1024]", arg91_1: "f32[1024]", arg92_1: "f32[1024, 1024]", arg93_1: "f32[1024]", arg94_1: "f32[1024, 1024]", arg95_1: "f32[1024]", arg96_1: "f32[1024]", arg97_1: "f32[1024]", arg98_1: "f32[4096, 1024]", arg99_1: "f32[4096]", arg100_1: "f32[1024, 4096]", arg101_1: "f32[1024]", arg102_1: "f32[1024]", arg103_1: "f32[1024]", arg104_1: "f32[1024, 1024]", arg105_1: "f32[1024]", arg106_1: "f32[1024, 1024]", arg107_1: "f32[1024]", arg108_1: "f32[1024, 1024]", arg109_1: "f32[1024]", arg110_1: "f32[1024, 1024]", arg111_1: "f32[1024]", arg112_1: "f32[1024]", arg113_1: "f32[1024]", arg114_1: "f32[4096, 1024]", arg115_1: "f32[4096]", arg116_1: "f32[1024, 4096]", arg117_1: "f32[1024]", arg118_1: "f32[1024]", arg119_1: "f32[1024]", arg120_1: "f32[1024, 1024]", arg121_1: "f32[1024]", arg122_1: "f32[1024, 1024]", arg123_1: "f32[1024]", arg124_1: "f32[1024, 1024]", arg125_1: "f32[1024]", arg126_1: "f32[1024, 1024]", arg127_1: "f32[1024]", arg128_1: "f32[1024]", arg129_1: "f32[1024]", arg130_1: "f32[4096, 1024]", arg131_1: "f32[4096]", arg132_1: "f32[1024, 4096]", arg133_1: "f32[1024]", arg134_1: "f32[1024]", arg135_1: "f32[1024]", arg136_1: "f32[1024, 1024]", arg137_1: "f32[1024]", arg138_1: "f32[1024, 1024]", arg139_1: "f32[1024]", arg140_1: "f32[1024, 1024]", arg141_1: "f32[1024]", arg142_1: "f32[1024, 1024]", arg143_1: "f32[1024]", arg144_1: "f32[1024]", arg145_1: "f32[1024]", arg146_1: "f32[4096, 1024]", arg147_1: "f32[4096]", arg148_1: "f32[1024, 4096]", arg149_1: "f32[1024]", arg150_1: "f32[1024]", arg151_1: "f32[1024]", arg152_1: "f32[1024, 1024]", arg153_1: "f32[1024]", arg154_1: "f32[1024, 1024]", arg155_1: "f32[1024]", arg156_1: "f32[1024, 1024]", arg157_1: "f32[1024]", arg158_1: "f32[1024, 1024]", arg159_1: "f32[1024]", arg160_1: "f32[1024]", arg161_1: "f32[1024]", arg162_1: "f32[4096, 1024]", arg163_1: "f32[4096]", arg164_1: "f32[1024, 4096]", arg165_1: "f32[1024]", arg166_1: "f32[1024]", arg167_1: "f32[1024]", arg168_1: "f32[1024, 1024]", arg169_1: "f32[1024]", arg170_1: "f32[1024, 1024]", arg171_1: "f32[1024]", arg172_1: "f32[1024, 1024]", arg173_1: "f32[1024]", arg174_1: "f32[1024, 1024]", arg175_1: "f32[1024]", arg176_1: "f32[1024]", arg177_1: "f32[1024]", arg178_1: "f32[4096, 1024]", arg179_1: "f32[4096]", arg180_1: "f32[1024, 4096]", arg181_1: "f32[1024]", arg182_1: "f32[1024]", arg183_1: "f32[1024]", arg184_1: "f32[1024, 1024]", arg185_1: "f32[1024]", arg186_1: "f32[1024, 1024]", arg187_1: "f32[1024]", arg188_1: "f32[1024, 1024]", arg189_1: "f32[1024]", arg190_1: "f32[1024, 1024]", arg191_1: "f32[1024]", arg192_1: "f32[1024]", arg193_1: "f32[1024]", arg194_1: "f32[4096, 1024]", arg195_1: "f32[4096]", arg196_1: "f32[1024, 4096]", arg197_1: "f32[1024]", arg198_1: "f32[1024]", arg199_1: "f32[1024]"):
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:823 in forward, code: input_ids = input_ids.view(-1, input_shape[-1])
        view: "i64[2, 128]" = torch.ops.aten.view.default(arg0_1, [-1, 128]);  arg0_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:123 in forward, code: return super().forward(input_ids) * self.embed_scale
        embedding: "f32[2, 128, 1024]" = torch.ops.aten.embedding.default(arg1_1, view, 1);  arg1_1 = view = None
        mul: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(embedding, 32.0);  embedding = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:103 in forward, code: position_ids = torch.arange(
        iota: "i64[128]" = torch.ops.prims.iota.default(128, start = 0, step = 1, dtype = torch.int64, device = device(type='cuda', index=0), requires_grad = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:105 in forward, code: ).expand(bsz, -1)
        expand: "i64[2, 128]" = torch.ops.aten.expand.default(iota, [2, -1]);  iota = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:109 in forward, code: return super().forward(position_ids + self.offset)
        add: "i64[2, 128]" = torch.ops.aten.add.Tensor(expand, 2);  expand = None
        embedding_1: "f32[2, 128, 1024]" = torch.ops.aten.embedding.default(arg2_1, add);  arg2_1 = add = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:834 in forward, code: hidden_states = inputs_embeds + embed_pos.to(inputs_embeds.device)
        add_1: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul, embedding_1);  mul = embedding_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:835 in forward, code: hidden_states = self.layernorm_embedding(hidden_states)
        var_mean = torch.ops.aten.var_mean.correction(add_1, [2], correction = 0, keepdim = True)
        getitem: "f32[2, 128, 1]" = var_mean[0]
        getitem_1: "f32[2, 128, 1]" = var_mean[1];  var_mean = None
        add_2: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem, 1e-05);  getitem = None
        rsqrt: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_2);  add_2 = None
        sub: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_1, getitem_1);  add_1 = getitem_1 = None
        mul_1: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub, rsqrt);  sub = rsqrt = None
        mul_2: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_1, arg3_1);  mul_1 = arg3_1 = None
        add_3: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_2, arg4_1);  mul_2 = arg4_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:194 in _expand_mask, code: expanded_mask = mask[:, None, None, :].expand(bsz, 1, tgt_len, src_len).to(dtype)
        unsqueeze: "i64[2, 1, 128]" = torch.ops.aten.unsqueeze.default(arg5_1, 1);  arg5_1 = None
        unsqueeze_1: "i64[2, 1, 1, 128]" = torch.ops.aten.unsqueeze.default(unsqueeze, 2);  unsqueeze = None
        expand_1: "i64[2, 1, 128, 128]" = torch.ops.aten.expand.default(unsqueeze_1, [2, 1, 128, 128]);  unsqueeze_1 = None
        convert_element_type: "f32[2, 1, 128, 128]" = torch.ops.prims.convert_element_type.default(expand_1, torch.float32);  expand_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:196 in _expand_mask, code: inverted_mask = torch.tensor(1.0, dtype=dtype) - expanded_mask
        _tensor_constant0 = self._tensor_constant0;  _tensor_constant0 = None
        full_default: "f32[]" = torch.ops.aten.full.default([], 1.0, dtype = torch.float32, layout = torch.strided, device = device(type='cpu'), pin_memory = False)
        sub_1: "f32[2, 1, 128, 128]" = torch.ops.aten.sub.Tensor(full_default, convert_element_type);  full_default = convert_element_type = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:198 in _expand_mask, code: return inverted_mask.masked_fill(inverted_mask.to(torch.bool), torch.finfo(dtype).min)
        convert_element_type_1: "b8[2, 1, 128, 128]" = torch.ops.prims.convert_element_type.default(sub_1, torch.bool)
        full_default_1: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where: "f32[2, 1, 128, 128]" = torch.ops.aten.where.self(convert_element_type_1, full_default_1, sub_1);  convert_element_type_1 = full_default_1 = sub_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_1 = torch.ops.aten.var_mean.correction(add_3, [2], correction = 0, keepdim = True)
        getitem_2: "f32[2, 128, 1]" = var_mean_1[0]
        getitem_3: "f32[2, 128, 1]" = var_mean_1[1];  var_mean_1 = None
        add_4: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_2, 1e-05);  getitem_2 = None
        rsqrt_1: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_4);  add_4 = None
        sub_2: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_3, getitem_3);  getitem_3 = None
        mul_3: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_2, rsqrt_1);  sub_2 = rsqrt_1 = None
        mul_4: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_3, arg6_1);  mul_3 = arg6_1 = None
        add_5: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_4, arg7_1);  mul_4 = arg7_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_1: "f32[256, 1024]" = torch.ops.aten.view.default(add_5, [256, 1024])
        permute: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg8_1, [1, 0]);  arg8_1 = None
        addmm: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg9_1, view_1, permute);  arg9_1 = view_1 = permute = None
        view_2: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm, [2, 128, 1024]);  addmm = None
        view_3: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_2, [2, 128, -1, 64]);  view_2 = None
        permute_1: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_3, [0, 2, 1, 3]);  view_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_4: "f32[256, 1024]" = torch.ops.aten.view.default(add_5, [256, 1024])
        permute_2: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg10_1, [1, 0]);  arg10_1 = None
        addmm_1: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg11_1, view_4, permute_2);  arg11_1 = view_4 = permute_2 = None
        view_5: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_1, [2, 128, 1024]);  addmm_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_6: "f32[256, 1024]" = torch.ops.aten.view.default(add_5, [256, 1024]);  add_5 = None
        permute_3: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg12_1, [1, 0]);  arg12_1 = None
        addmm_2: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg13_1, view_6, permute_3);  arg13_1 = view_6 = permute_3 = None
        view_7: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_2, [2, 128, 1024]);  addmm_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_8: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_5, [2, 128, -1, 64]);  view_5 = None
        permute_4: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_8, [0, 2, 1, 3]);  view_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_9: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_7, [2, 128, -1, 64]);  view_7 = None
        permute_5: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_9, [0, 2, 1, 3]);  view_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_2: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_1, permute_4, permute_5, expand_2, False, scale = 0.125);  permute_1 = permute_4 = permute_5 = expand_2 = None
        getitem_4: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention[0];  _scaled_dot_product_efficient_attention = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_6: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_4, [0, 2, 1, 3]);  getitem_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_10: "f32[2, 128, 1024]" = torch.ops.aten.view.default(permute_6, [2, 128, -1]);  permute_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_11: "f32[256, 1024]" = torch.ops.aten.view.default(view_10, [256, 1024]);  view_10 = None
        permute_7: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg14_1, [1, 0]);  arg14_1 = None
        addmm_3: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg15_1, view_11, permute_7);  arg15_1 = view_11 = permute_7 = None
        view_12: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_3, [2, 128, 1024]);  addmm_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_6: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_3, view_12);  add_3 = view_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_2 = torch.ops.aten.var_mean.correction(add_6, [2], correction = 0, keepdim = True)
        getitem_8: "f32[2, 128, 1]" = var_mean_2[0]
        getitem_9: "f32[2, 128, 1]" = var_mean_2[1];  var_mean_2 = None
        add_7: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_8, 1e-05);  getitem_8 = None
        rsqrt_2: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_7);  add_7 = None
        sub_3: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_6, getitem_9);  getitem_9 = None
        mul_5: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_3, rsqrt_2);  sub_3 = rsqrt_2 = None
        mul_6: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_5, arg16_1);  mul_5 = arg16_1 = None
        add_8: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_6, arg17_1);  mul_6 = arg17_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_13: "f32[256, 1024]" = torch.ops.aten.view.default(add_8, [256, 1024]);  add_8 = None
        permute_8: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg18_1, [1, 0]);  arg18_1 = None
        addmm_4: "f32[256, 4096]" = torch.ops.aten.addmm.default(arg19_1, view_13, permute_8);  arg19_1 = view_13 = permute_8 = None
        view_14: "f32[2, 128, 4096]" = torch.ops.aten.view.default(addmm_4, [2, 128, 4096]);  addmm_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_7: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_14, 0.5)
        mul_8: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_14, 0.7071067811865476);  view_14 = None
        erf: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_8);  mul_8 = None
        add_9: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf, 1);  erf = None
        mul_9: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_7, add_9);  mul_7 = add_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_15: "f32[256, 4096]" = torch.ops.aten.view.default(mul_9, [256, 4096]);  mul_9 = None
        permute_9: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg20_1, [1, 0]);  arg20_1 = None
        addmm_5: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg21_1, view_15, permute_9);  arg21_1 = view_15 = permute_9 = None
        view_16: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_5, [2, 128, 1024]);  addmm_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_10: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_6, view_16);  add_6 = view_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_3 = torch.ops.aten.var_mean.correction(add_10, [2], correction = 0, keepdim = True)
        getitem_10: "f32[2, 128, 1]" = var_mean_3[0]
        getitem_11: "f32[2, 128, 1]" = var_mean_3[1];  var_mean_3 = None
        add_11: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_10, 1e-05);  getitem_10 = None
        rsqrt_3: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_11);  add_11 = None
        sub_4: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_10, getitem_11);  getitem_11 = None
        mul_10: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_4, rsqrt_3);  sub_4 = rsqrt_3 = None
        mul_11: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_10, arg22_1);  mul_10 = arg22_1 = None
        add_12: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_11, arg23_1);  mul_11 = arg23_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_17: "f32[256, 1024]" = torch.ops.aten.view.default(add_12, [256, 1024])
        permute_10: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg24_1, [1, 0]);  arg24_1 = None
        addmm_6: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg25_1, view_17, permute_10);  arg25_1 = view_17 = permute_10 = None
        view_18: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_6, [2, 128, 1024]);  addmm_6 = None
        view_19: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_18, [2, 128, -1, 64]);  view_18 = None
        permute_11: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_19, [0, 2, 1, 3]);  view_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_20: "f32[256, 1024]" = torch.ops.aten.view.default(add_12, [256, 1024])
        permute_12: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg26_1, [1, 0]);  arg26_1 = None
        addmm_7: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg27_1, view_20, permute_12);  arg27_1 = view_20 = permute_12 = None
        view_21: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_7, [2, 128, 1024]);  addmm_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_22: "f32[256, 1024]" = torch.ops.aten.view.default(add_12, [256, 1024]);  add_12 = None
        permute_13: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg28_1, [1, 0]);  arg28_1 = None
        addmm_8: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg29_1, view_22, permute_13);  arg29_1 = view_22 = permute_13 = None
        view_23: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_8, [2, 128, 1024]);  addmm_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_24: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_21, [2, 128, -1, 64]);  view_21 = None
        permute_14: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_24, [0, 2, 1, 3]);  view_24 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_25: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_23, [2, 128, -1, 64]);  view_23 = None
        permute_15: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_25, [0, 2, 1, 3]);  view_25 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_3: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_1 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_11, permute_14, permute_15, expand_3, False, scale = 0.125);  permute_11 = permute_14 = permute_15 = expand_3 = None
        getitem_12: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_1[0];  _scaled_dot_product_efficient_attention_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_16: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_12, [0, 2, 1, 3]);  getitem_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_26: "f32[2, 128, 1024]" = torch.ops.aten.view.default(permute_16, [2, 128, -1]);  permute_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_27: "f32[256, 1024]" = torch.ops.aten.view.default(view_26, [256, 1024]);  view_26 = None
        permute_17: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg30_1, [1, 0]);  arg30_1 = None
        addmm_9: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg31_1, view_27, permute_17);  arg31_1 = view_27 = permute_17 = None
        view_28: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_9, [2, 128, 1024]);  addmm_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_13: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_10, view_28);  add_10 = view_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_4 = torch.ops.aten.var_mean.correction(add_13, [2], correction = 0, keepdim = True)
        getitem_16: "f32[2, 128, 1]" = var_mean_4[0]
        getitem_17: "f32[2, 128, 1]" = var_mean_4[1];  var_mean_4 = None
        add_14: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_16, 1e-05);  getitem_16 = None
        rsqrt_4: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_14);  add_14 = None
        sub_5: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_13, getitem_17);  getitem_17 = None
        mul_12: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_5, rsqrt_4);  sub_5 = rsqrt_4 = None
        mul_13: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_12, arg32_1);  mul_12 = arg32_1 = None
        add_15: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_13, arg33_1);  mul_13 = arg33_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_29: "f32[256, 1024]" = torch.ops.aten.view.default(add_15, [256, 1024]);  add_15 = None
        permute_18: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg34_1, [1, 0]);  arg34_1 = None
        addmm_10: "f32[256, 4096]" = torch.ops.aten.addmm.default(arg35_1, view_29, permute_18);  arg35_1 = view_29 = permute_18 = None
        view_30: "f32[2, 128, 4096]" = torch.ops.aten.view.default(addmm_10, [2, 128, 4096]);  addmm_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_14: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_30, 0.5)
        mul_15: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_30, 0.7071067811865476);  view_30 = None
        erf_1: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_15);  mul_15 = None
        add_16: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_1, 1);  erf_1 = None
        mul_16: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_14, add_16);  mul_14 = add_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_31: "f32[256, 4096]" = torch.ops.aten.view.default(mul_16, [256, 4096]);  mul_16 = None
        permute_19: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg36_1, [1, 0]);  arg36_1 = None
        addmm_11: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg37_1, view_31, permute_19);  arg37_1 = view_31 = permute_19 = None
        view_32: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_11, [2, 128, 1024]);  addmm_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_17: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_13, view_32);  add_13 = view_32 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_5 = torch.ops.aten.var_mean.correction(add_17, [2], correction = 0, keepdim = True)
        getitem_18: "f32[2, 128, 1]" = var_mean_5[0]
        getitem_19: "f32[2, 128, 1]" = var_mean_5[1];  var_mean_5 = None
        add_18: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_18, 1e-05);  getitem_18 = None
        rsqrt_5: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_18);  add_18 = None
        sub_6: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_17, getitem_19);  getitem_19 = None
        mul_17: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_6, rsqrt_5);  sub_6 = rsqrt_5 = None
        mul_18: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_17, arg38_1);  mul_17 = arg38_1 = None
        add_19: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_18, arg39_1);  mul_18 = arg39_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_33: "f32[256, 1024]" = torch.ops.aten.view.default(add_19, [256, 1024])
        permute_20: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg40_1, [1, 0]);  arg40_1 = None
        addmm_12: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg41_1, view_33, permute_20);  arg41_1 = view_33 = permute_20 = None
        view_34: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_12, [2, 128, 1024]);  addmm_12 = None
        view_35: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_34, [2, 128, -1, 64]);  view_34 = None
        permute_21: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_35, [0, 2, 1, 3]);  view_35 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_36: "f32[256, 1024]" = torch.ops.aten.view.default(add_19, [256, 1024])
        permute_22: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg42_1, [1, 0]);  arg42_1 = None
        addmm_13: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg43_1, view_36, permute_22);  arg43_1 = view_36 = permute_22 = None
        view_37: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_13, [2, 128, 1024]);  addmm_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_38: "f32[256, 1024]" = torch.ops.aten.view.default(add_19, [256, 1024]);  add_19 = None
        permute_23: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg44_1, [1, 0]);  arg44_1 = None
        addmm_14: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg45_1, view_38, permute_23);  arg45_1 = view_38 = permute_23 = None
        view_39: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_14, [2, 128, 1024]);  addmm_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_40: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_37, [2, 128, -1, 64]);  view_37 = None
        permute_24: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_40, [0, 2, 1, 3]);  view_40 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_41: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_39, [2, 128, -1, 64]);  view_39 = None
        permute_25: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_41, [0, 2, 1, 3]);  view_41 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_4: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_2 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_21, permute_24, permute_25, expand_4, False, scale = 0.125);  permute_21 = permute_24 = permute_25 = expand_4 = None
        getitem_20: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_2[0];  _scaled_dot_product_efficient_attention_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_26: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_20, [0, 2, 1, 3]);  getitem_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_42: "f32[2, 128, 1024]" = torch.ops.aten.view.default(permute_26, [2, 128, -1]);  permute_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_43: "f32[256, 1024]" = torch.ops.aten.view.default(view_42, [256, 1024]);  view_42 = None
        permute_27: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg46_1, [1, 0]);  arg46_1 = None
        addmm_15: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg47_1, view_43, permute_27);  arg47_1 = view_43 = permute_27 = None
        view_44: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_15, [2, 128, 1024]);  addmm_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_20: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_17, view_44);  add_17 = view_44 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_6 = torch.ops.aten.var_mean.correction(add_20, [2], correction = 0, keepdim = True)
        getitem_24: "f32[2, 128, 1]" = var_mean_6[0]
        getitem_25: "f32[2, 128, 1]" = var_mean_6[1];  var_mean_6 = None
        add_21: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_24, 1e-05);  getitem_24 = None
        rsqrt_6: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_21);  add_21 = None
        sub_7: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_20, getitem_25);  getitem_25 = None
        mul_19: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_7, rsqrt_6);  sub_7 = rsqrt_6 = None
        mul_20: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_19, arg48_1);  mul_19 = arg48_1 = None
        add_22: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_20, arg49_1);  mul_20 = arg49_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_45: "f32[256, 1024]" = torch.ops.aten.view.default(add_22, [256, 1024]);  add_22 = None
        permute_28: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg50_1, [1, 0]);  arg50_1 = None
        addmm_16: "f32[256, 4096]" = torch.ops.aten.addmm.default(arg51_1, view_45, permute_28);  arg51_1 = view_45 = permute_28 = None
        view_46: "f32[2, 128, 4096]" = torch.ops.aten.view.default(addmm_16, [2, 128, 4096]);  addmm_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_21: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_46, 0.5)
        mul_22: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_46, 0.7071067811865476);  view_46 = None
        erf_2: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_22);  mul_22 = None
        add_23: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_2, 1);  erf_2 = None
        mul_23: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_21, add_23);  mul_21 = add_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_47: "f32[256, 4096]" = torch.ops.aten.view.default(mul_23, [256, 4096]);  mul_23 = None
        permute_29: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg52_1, [1, 0]);  arg52_1 = None
        addmm_17: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg53_1, view_47, permute_29);  arg53_1 = view_47 = permute_29 = None
        view_48: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_17, [2, 128, 1024]);  addmm_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_24: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_20, view_48);  add_20 = view_48 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_7 = torch.ops.aten.var_mean.correction(add_24, [2], correction = 0, keepdim = True)
        getitem_26: "f32[2, 128, 1]" = var_mean_7[0]
        getitem_27: "f32[2, 128, 1]" = var_mean_7[1];  var_mean_7 = None
        add_25: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_26, 1e-05);  getitem_26 = None
        rsqrt_7: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_25);  add_25 = None
        sub_8: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_24, getitem_27);  getitem_27 = None
        mul_24: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_8, rsqrt_7);  sub_8 = rsqrt_7 = None
        mul_25: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_24, arg54_1);  mul_24 = arg54_1 = None
        add_26: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_25, arg55_1);  mul_25 = arg55_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_49: "f32[256, 1024]" = torch.ops.aten.view.default(add_26, [256, 1024])
        permute_30: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg56_1, [1, 0]);  arg56_1 = None
        addmm_18: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg57_1, view_49, permute_30);  arg57_1 = view_49 = permute_30 = None
        view_50: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_18, [2, 128, 1024]);  addmm_18 = None
        view_51: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_50, [2, 128, -1, 64]);  view_50 = None
        permute_31: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_51, [0, 2, 1, 3]);  view_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_52: "f32[256, 1024]" = torch.ops.aten.view.default(add_26, [256, 1024])
        permute_32: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg58_1, [1, 0]);  arg58_1 = None
        addmm_19: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg59_1, view_52, permute_32);  arg59_1 = view_52 = permute_32 = None
        view_53: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_19, [2, 128, 1024]);  addmm_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_54: "f32[256, 1024]" = torch.ops.aten.view.default(add_26, [256, 1024]);  add_26 = None
        permute_33: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg60_1, [1, 0]);  arg60_1 = None
        addmm_20: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg61_1, view_54, permute_33);  arg61_1 = view_54 = permute_33 = None
        view_55: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_20, [2, 128, 1024]);  addmm_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_56: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_53, [2, 128, -1, 64]);  view_53 = None
        permute_34: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_56, [0, 2, 1, 3]);  view_56 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_57: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_55, [2, 128, -1, 64]);  view_55 = None
        permute_35: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_57, [0, 2, 1, 3]);  view_57 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_5: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_3 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_31, permute_34, permute_35, expand_5, False, scale = 0.125);  permute_31 = permute_34 = permute_35 = expand_5 = None
        getitem_28: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_3[0];  _scaled_dot_product_efficient_attention_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_36: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_28, [0, 2, 1, 3]);  getitem_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_58: "f32[2, 128, 1024]" = torch.ops.aten.view.default(permute_36, [2, 128, -1]);  permute_36 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_59: "f32[256, 1024]" = torch.ops.aten.view.default(view_58, [256, 1024]);  view_58 = None
        permute_37: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg62_1, [1, 0]);  arg62_1 = None
        addmm_21: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg63_1, view_59, permute_37);  arg63_1 = view_59 = permute_37 = None
        view_60: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_21, [2, 128, 1024]);  addmm_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_27: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_24, view_60);  add_24 = view_60 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_8 = torch.ops.aten.var_mean.correction(add_27, [2], correction = 0, keepdim = True)
        getitem_32: "f32[2, 128, 1]" = var_mean_8[0]
        getitem_33: "f32[2, 128, 1]" = var_mean_8[1];  var_mean_8 = None
        add_28: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_32, 1e-05);  getitem_32 = None
        rsqrt_8: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_28);  add_28 = None
        sub_9: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_27, getitem_33);  getitem_33 = None
        mul_26: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_9, rsqrt_8);  sub_9 = rsqrt_8 = None
        mul_27: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_26, arg64_1);  mul_26 = arg64_1 = None
        add_29: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_27, arg65_1);  mul_27 = arg65_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_61: "f32[256, 1024]" = torch.ops.aten.view.default(add_29, [256, 1024]);  add_29 = None
        permute_38: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg66_1, [1, 0]);  arg66_1 = None
        addmm_22: "f32[256, 4096]" = torch.ops.aten.addmm.default(arg67_1, view_61, permute_38);  arg67_1 = view_61 = permute_38 = None
        view_62: "f32[2, 128, 4096]" = torch.ops.aten.view.default(addmm_22, [2, 128, 4096]);  addmm_22 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_28: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_62, 0.5)
        mul_29: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_62, 0.7071067811865476);  view_62 = None
        erf_3: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_29);  mul_29 = None
        add_30: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_3, 1);  erf_3 = None
        mul_30: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_28, add_30);  mul_28 = add_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_63: "f32[256, 4096]" = torch.ops.aten.view.default(mul_30, [256, 4096]);  mul_30 = None
        permute_39: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg68_1, [1, 0]);  arg68_1 = None
        addmm_23: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg69_1, view_63, permute_39);  arg69_1 = view_63 = permute_39 = None
        view_64: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_23, [2, 128, 1024]);  addmm_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_31: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_27, view_64);  add_27 = view_64 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_9 = torch.ops.aten.var_mean.correction(add_31, [2], correction = 0, keepdim = True)
        getitem_34: "f32[2, 128, 1]" = var_mean_9[0]
        getitem_35: "f32[2, 128, 1]" = var_mean_9[1];  var_mean_9 = None
        add_32: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_34, 1e-05);  getitem_34 = None
        rsqrt_9: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_32);  add_32 = None
        sub_10: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_31, getitem_35);  getitem_35 = None
        mul_31: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_10, rsqrt_9);  sub_10 = rsqrt_9 = None
        mul_32: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_31, arg70_1);  mul_31 = arg70_1 = None
        add_33: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_32, arg71_1);  mul_32 = arg71_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_65: "f32[256, 1024]" = torch.ops.aten.view.default(add_33, [256, 1024])
        permute_40: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg72_1, [1, 0]);  arg72_1 = None
        addmm_24: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg73_1, view_65, permute_40);  arg73_1 = view_65 = permute_40 = None
        view_66: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_24, [2, 128, 1024]);  addmm_24 = None
        view_67: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_66, [2, 128, -1, 64]);  view_66 = None
        permute_41: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_67, [0, 2, 1, 3]);  view_67 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_68: "f32[256, 1024]" = torch.ops.aten.view.default(add_33, [256, 1024])
        permute_42: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg74_1, [1, 0]);  arg74_1 = None
        addmm_25: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg75_1, view_68, permute_42);  arg75_1 = view_68 = permute_42 = None
        view_69: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_25, [2, 128, 1024]);  addmm_25 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_70: "f32[256, 1024]" = torch.ops.aten.view.default(add_33, [256, 1024]);  add_33 = None
        permute_43: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg76_1, [1, 0]);  arg76_1 = None
        addmm_26: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg77_1, view_70, permute_43);  arg77_1 = view_70 = permute_43 = None
        view_71: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_26, [2, 128, 1024]);  addmm_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_72: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_69, [2, 128, -1, 64]);  view_69 = None
        permute_44: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_72, [0, 2, 1, 3]);  view_72 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_73: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_71, [2, 128, -1, 64]);  view_71 = None
        permute_45: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_73, [0, 2, 1, 3]);  view_73 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_6: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_4 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_41, permute_44, permute_45, expand_6, False, scale = 0.125);  permute_41 = permute_44 = permute_45 = expand_6 = None
        getitem_36: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_4[0];  _scaled_dot_product_efficient_attention_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_46: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_36, [0, 2, 1, 3]);  getitem_36 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_74: "f32[2, 128, 1024]" = torch.ops.aten.view.default(permute_46, [2, 128, -1]);  permute_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_75: "f32[256, 1024]" = torch.ops.aten.view.default(view_74, [256, 1024]);  view_74 = None
        permute_47: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg78_1, [1, 0]);  arg78_1 = None
        addmm_27: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg79_1, view_75, permute_47);  arg79_1 = view_75 = permute_47 = None
        view_76: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_27, [2, 128, 1024]);  addmm_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_34: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_31, view_76);  add_31 = view_76 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_10 = torch.ops.aten.var_mean.correction(add_34, [2], correction = 0, keepdim = True)
        getitem_40: "f32[2, 128, 1]" = var_mean_10[0]
        getitem_41: "f32[2, 128, 1]" = var_mean_10[1];  var_mean_10 = None
        add_35: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_40, 1e-05);  getitem_40 = None
        rsqrt_10: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_35);  add_35 = None
        sub_11: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_34, getitem_41);  getitem_41 = None
        mul_33: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_11, rsqrt_10);  sub_11 = rsqrt_10 = None
        mul_34: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_33, arg80_1);  mul_33 = arg80_1 = None
        add_36: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_34, arg81_1);  mul_34 = arg81_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_77: "f32[256, 1024]" = torch.ops.aten.view.default(add_36, [256, 1024]);  add_36 = None
        permute_48: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg82_1, [1, 0]);  arg82_1 = None
        addmm_28: "f32[256, 4096]" = torch.ops.aten.addmm.default(arg83_1, view_77, permute_48);  arg83_1 = view_77 = permute_48 = None
        view_78: "f32[2, 128, 4096]" = torch.ops.aten.view.default(addmm_28, [2, 128, 4096]);  addmm_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_35: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_78, 0.5)
        mul_36: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_78, 0.7071067811865476);  view_78 = None
        erf_4: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_36);  mul_36 = None
        add_37: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_4, 1);  erf_4 = None
        mul_37: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_35, add_37);  mul_35 = add_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_79: "f32[256, 4096]" = torch.ops.aten.view.default(mul_37, [256, 4096]);  mul_37 = None
        permute_49: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg84_1, [1, 0]);  arg84_1 = None
        addmm_29: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg85_1, view_79, permute_49);  arg85_1 = view_79 = permute_49 = None
        view_80: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_29, [2, 128, 1024]);  addmm_29 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_38: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_34, view_80);  add_34 = view_80 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_11 = torch.ops.aten.var_mean.correction(add_38, [2], correction = 0, keepdim = True)
        getitem_42: "f32[2, 128, 1]" = var_mean_11[0]
        getitem_43: "f32[2, 128, 1]" = var_mean_11[1];  var_mean_11 = None
        add_39: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_42, 1e-05);  getitem_42 = None
        rsqrt_11: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_39);  add_39 = None
        sub_12: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_38, getitem_43);  getitem_43 = None
        mul_38: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_12, rsqrt_11);  sub_12 = rsqrt_11 = None
        mul_39: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_38, arg86_1);  mul_38 = arg86_1 = None
        add_40: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_39, arg87_1);  mul_39 = arg87_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_81: "f32[256, 1024]" = torch.ops.aten.view.default(add_40, [256, 1024])
        permute_50: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg88_1, [1, 0]);  arg88_1 = None
        addmm_30: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg89_1, view_81, permute_50);  arg89_1 = view_81 = permute_50 = None
        view_82: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_30, [2, 128, 1024]);  addmm_30 = None
        view_83: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_82, [2, 128, -1, 64]);  view_82 = None
        permute_51: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_83, [0, 2, 1, 3]);  view_83 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_84: "f32[256, 1024]" = torch.ops.aten.view.default(add_40, [256, 1024])
        permute_52: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg90_1, [1, 0]);  arg90_1 = None
        addmm_31: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg91_1, view_84, permute_52);  arg91_1 = view_84 = permute_52 = None
        view_85: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_31, [2, 128, 1024]);  addmm_31 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_86: "f32[256, 1024]" = torch.ops.aten.view.default(add_40, [256, 1024]);  add_40 = None
        permute_53: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg92_1, [1, 0]);  arg92_1 = None
        addmm_32: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg93_1, view_86, permute_53);  arg93_1 = view_86 = permute_53 = None
        view_87: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_32, [2, 128, 1024]);  addmm_32 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_88: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_85, [2, 128, -1, 64]);  view_85 = None
        permute_54: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_88, [0, 2, 1, 3]);  view_88 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_89: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_87, [2, 128, -1, 64]);  view_87 = None
        permute_55: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_89, [0, 2, 1, 3]);  view_89 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_7: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_5 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_51, permute_54, permute_55, expand_7, False, scale = 0.125);  permute_51 = permute_54 = permute_55 = expand_7 = None
        getitem_44: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_5[0];  _scaled_dot_product_efficient_attention_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_56: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_44, [0, 2, 1, 3]);  getitem_44 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_90: "f32[2, 128, 1024]" = torch.ops.aten.view.default(permute_56, [2, 128, -1]);  permute_56 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_91: "f32[256, 1024]" = torch.ops.aten.view.default(view_90, [256, 1024]);  view_90 = None
        permute_57: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg94_1, [1, 0]);  arg94_1 = None
        addmm_33: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg95_1, view_91, permute_57);  arg95_1 = view_91 = permute_57 = None
        view_92: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_33, [2, 128, 1024]);  addmm_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_41: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_38, view_92);  add_38 = view_92 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_12 = torch.ops.aten.var_mean.correction(add_41, [2], correction = 0, keepdim = True)
        getitem_48: "f32[2, 128, 1]" = var_mean_12[0]
        getitem_49: "f32[2, 128, 1]" = var_mean_12[1];  var_mean_12 = None
        add_42: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_48, 1e-05);  getitem_48 = None
        rsqrt_12: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_42);  add_42 = None
        sub_13: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_41, getitem_49);  getitem_49 = None
        mul_40: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_13, rsqrt_12);  sub_13 = rsqrt_12 = None
        mul_41: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_40, arg96_1);  mul_40 = arg96_1 = None
        add_43: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_41, arg97_1);  mul_41 = arg97_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_93: "f32[256, 1024]" = torch.ops.aten.view.default(add_43, [256, 1024]);  add_43 = None
        permute_58: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg98_1, [1, 0]);  arg98_1 = None
        addmm_34: "f32[256, 4096]" = torch.ops.aten.addmm.default(arg99_1, view_93, permute_58);  arg99_1 = view_93 = permute_58 = None
        view_94: "f32[2, 128, 4096]" = torch.ops.aten.view.default(addmm_34, [2, 128, 4096]);  addmm_34 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_42: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_94, 0.5)
        mul_43: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_94, 0.7071067811865476);  view_94 = None
        erf_5: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_43);  mul_43 = None
        add_44: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_5, 1);  erf_5 = None
        mul_44: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_42, add_44);  mul_42 = add_44 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_95: "f32[256, 4096]" = torch.ops.aten.view.default(mul_44, [256, 4096]);  mul_44 = None
        permute_59: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg100_1, [1, 0]);  arg100_1 = None
        addmm_35: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg101_1, view_95, permute_59);  arg101_1 = view_95 = permute_59 = None
        view_96: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_35, [2, 128, 1024]);  addmm_35 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_45: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_41, view_96);  add_41 = view_96 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_13 = torch.ops.aten.var_mean.correction(add_45, [2], correction = 0, keepdim = True)
        getitem_50: "f32[2, 128, 1]" = var_mean_13[0]
        getitem_51: "f32[2, 128, 1]" = var_mean_13[1];  var_mean_13 = None
        add_46: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_50, 1e-05);  getitem_50 = None
        rsqrt_13: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_46);  add_46 = None
        sub_14: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_45, getitem_51);  getitem_51 = None
        mul_45: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_14, rsqrt_13);  sub_14 = rsqrt_13 = None
        mul_46: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_45, arg102_1);  mul_45 = arg102_1 = None
        add_47: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_46, arg103_1);  mul_46 = arg103_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_97: "f32[256, 1024]" = torch.ops.aten.view.default(add_47, [256, 1024])
        permute_60: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg104_1, [1, 0]);  arg104_1 = None
        addmm_36: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg105_1, view_97, permute_60);  arg105_1 = view_97 = permute_60 = None
        view_98: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_36, [2, 128, 1024]);  addmm_36 = None
        view_99: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_98, [2, 128, -1, 64]);  view_98 = None
        permute_61: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_99, [0, 2, 1, 3]);  view_99 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_100: "f32[256, 1024]" = torch.ops.aten.view.default(add_47, [256, 1024])
        permute_62: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg106_1, [1, 0]);  arg106_1 = None
        addmm_37: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg107_1, view_100, permute_62);  arg107_1 = view_100 = permute_62 = None
        view_101: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_37, [2, 128, 1024]);  addmm_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_102: "f32[256, 1024]" = torch.ops.aten.view.default(add_47, [256, 1024]);  add_47 = None
        permute_63: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg108_1, [1, 0]);  arg108_1 = None
        addmm_38: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg109_1, view_102, permute_63);  arg109_1 = view_102 = permute_63 = None
        view_103: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_38, [2, 128, 1024]);  addmm_38 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_104: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_101, [2, 128, -1, 64]);  view_101 = None
        permute_64: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_104, [0, 2, 1, 3]);  view_104 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_105: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_103, [2, 128, -1, 64]);  view_103 = None
        permute_65: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_105, [0, 2, 1, 3]);  view_105 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_8: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_6 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_61, permute_64, permute_65, expand_8, False, scale = 0.125);  permute_61 = permute_64 = permute_65 = expand_8 = None
        getitem_52: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_6[0];  _scaled_dot_product_efficient_attention_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_66: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_52, [0, 2, 1, 3]);  getitem_52 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_106: "f32[2, 128, 1024]" = torch.ops.aten.view.default(permute_66, [2, 128, -1]);  permute_66 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_107: "f32[256, 1024]" = torch.ops.aten.view.default(view_106, [256, 1024]);  view_106 = None
        permute_67: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg110_1, [1, 0]);  arg110_1 = None
        addmm_39: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg111_1, view_107, permute_67);  arg111_1 = view_107 = permute_67 = None
        view_108: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_39, [2, 128, 1024]);  addmm_39 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_48: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_45, view_108);  add_45 = view_108 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_14 = torch.ops.aten.var_mean.correction(add_48, [2], correction = 0, keepdim = True)
        getitem_56: "f32[2, 128, 1]" = var_mean_14[0]
        getitem_57: "f32[2, 128, 1]" = var_mean_14[1];  var_mean_14 = None
        add_49: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_56, 1e-05);  getitem_56 = None
        rsqrt_14: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_49);  add_49 = None
        sub_15: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_48, getitem_57);  getitem_57 = None
        mul_47: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_15, rsqrt_14);  sub_15 = rsqrt_14 = None
        mul_48: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_47, arg112_1);  mul_47 = arg112_1 = None
        add_50: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_48, arg113_1);  mul_48 = arg113_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_109: "f32[256, 1024]" = torch.ops.aten.view.default(add_50, [256, 1024]);  add_50 = None
        permute_68: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg114_1, [1, 0]);  arg114_1 = None
        addmm_40: "f32[256, 4096]" = torch.ops.aten.addmm.default(arg115_1, view_109, permute_68);  arg115_1 = view_109 = permute_68 = None
        view_110: "f32[2, 128, 4096]" = torch.ops.aten.view.default(addmm_40, [2, 128, 4096]);  addmm_40 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_49: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_110, 0.5)
        mul_50: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_110, 0.7071067811865476);  view_110 = None
        erf_6: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_50);  mul_50 = None
        add_51: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_6, 1);  erf_6 = None
        mul_51: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_49, add_51);  mul_49 = add_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_111: "f32[256, 4096]" = torch.ops.aten.view.default(mul_51, [256, 4096]);  mul_51 = None
        permute_69: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg116_1, [1, 0]);  arg116_1 = None
        addmm_41: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg117_1, view_111, permute_69);  arg117_1 = view_111 = permute_69 = None
        view_112: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_41, [2, 128, 1024]);  addmm_41 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_52: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_48, view_112);  add_48 = view_112 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_15 = torch.ops.aten.var_mean.correction(add_52, [2], correction = 0, keepdim = True)
        getitem_58: "f32[2, 128, 1]" = var_mean_15[0]
        getitem_59: "f32[2, 128, 1]" = var_mean_15[1];  var_mean_15 = None
        add_53: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_58, 1e-05);  getitem_58 = None
        rsqrt_15: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_53);  add_53 = None
        sub_16: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_52, getitem_59);  getitem_59 = None
        mul_52: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_16, rsqrt_15);  sub_16 = rsqrt_15 = None
        mul_53: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_52, arg118_1);  mul_52 = arg118_1 = None
        add_54: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_53, arg119_1);  mul_53 = arg119_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_113: "f32[256, 1024]" = torch.ops.aten.view.default(add_54, [256, 1024])
        permute_70: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg120_1, [1, 0]);  arg120_1 = None
        addmm_42: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg121_1, view_113, permute_70);  arg121_1 = view_113 = permute_70 = None
        view_114: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_42, [2, 128, 1024]);  addmm_42 = None
        view_115: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_114, [2, 128, -1, 64]);  view_114 = None
        permute_71: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_115, [0, 2, 1, 3]);  view_115 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_116: "f32[256, 1024]" = torch.ops.aten.view.default(add_54, [256, 1024])
        permute_72: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg122_1, [1, 0]);  arg122_1 = None
        addmm_43: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg123_1, view_116, permute_72);  arg123_1 = view_116 = permute_72 = None
        view_117: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_43, [2, 128, 1024]);  addmm_43 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_118: "f32[256, 1024]" = torch.ops.aten.view.default(add_54, [256, 1024]);  add_54 = None
        permute_73: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg124_1, [1, 0]);  arg124_1 = None
        addmm_44: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg125_1, view_118, permute_73);  arg125_1 = view_118 = permute_73 = None
        view_119: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_44, [2, 128, 1024]);  addmm_44 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_120: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_117, [2, 128, -1, 64]);  view_117 = None
        permute_74: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_120, [0, 2, 1, 3]);  view_120 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_121: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_119, [2, 128, -1, 64]);  view_119 = None
        permute_75: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_121, [0, 2, 1, 3]);  view_121 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_9: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_7 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_71, permute_74, permute_75, expand_9, False, scale = 0.125);  permute_71 = permute_74 = permute_75 = expand_9 = None
        getitem_60: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_7[0];  _scaled_dot_product_efficient_attention_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_76: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_60, [0, 2, 1, 3]);  getitem_60 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_122: "f32[2, 128, 1024]" = torch.ops.aten.view.default(permute_76, [2, 128, -1]);  permute_76 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_123: "f32[256, 1024]" = torch.ops.aten.view.default(view_122, [256, 1024]);  view_122 = None
        permute_77: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg126_1, [1, 0]);  arg126_1 = None
        addmm_45: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg127_1, view_123, permute_77);  arg127_1 = view_123 = permute_77 = None
        view_124: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_45, [2, 128, 1024]);  addmm_45 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_55: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_52, view_124);  add_52 = view_124 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_16 = torch.ops.aten.var_mean.correction(add_55, [2], correction = 0, keepdim = True)
        getitem_64: "f32[2, 128, 1]" = var_mean_16[0]
        getitem_65: "f32[2, 128, 1]" = var_mean_16[1];  var_mean_16 = None
        add_56: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_64, 1e-05);  getitem_64 = None
        rsqrt_16: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_56);  add_56 = None
        sub_17: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_55, getitem_65);  getitem_65 = None
        mul_54: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_17, rsqrt_16);  sub_17 = rsqrt_16 = None
        mul_55: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_54, arg128_1);  mul_54 = arg128_1 = None
        add_57: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_55, arg129_1);  mul_55 = arg129_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_125: "f32[256, 1024]" = torch.ops.aten.view.default(add_57, [256, 1024]);  add_57 = None
        permute_78: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg130_1, [1, 0]);  arg130_1 = None
        addmm_46: "f32[256, 4096]" = torch.ops.aten.addmm.default(arg131_1, view_125, permute_78);  arg131_1 = view_125 = permute_78 = None
        view_126: "f32[2, 128, 4096]" = torch.ops.aten.view.default(addmm_46, [2, 128, 4096]);  addmm_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_56: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_126, 0.5)
        mul_57: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_126, 0.7071067811865476);  view_126 = None
        erf_7: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_57);  mul_57 = None
        add_58: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_7, 1);  erf_7 = None
        mul_58: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_56, add_58);  mul_56 = add_58 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_127: "f32[256, 4096]" = torch.ops.aten.view.default(mul_58, [256, 4096]);  mul_58 = None
        permute_79: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg132_1, [1, 0]);  arg132_1 = None
        addmm_47: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg133_1, view_127, permute_79);  arg133_1 = view_127 = permute_79 = None
        view_128: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_47, [2, 128, 1024]);  addmm_47 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_59: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_55, view_128);  add_55 = view_128 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_17 = torch.ops.aten.var_mean.correction(add_59, [2], correction = 0, keepdim = True)
        getitem_66: "f32[2, 128, 1]" = var_mean_17[0]
        getitem_67: "f32[2, 128, 1]" = var_mean_17[1];  var_mean_17 = None
        add_60: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_66, 1e-05);  getitem_66 = None
        rsqrt_17: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_60);  add_60 = None
        sub_18: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_59, getitem_67);  getitem_67 = None
        mul_59: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_18, rsqrt_17);  sub_18 = rsqrt_17 = None
        mul_60: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_59, arg134_1);  mul_59 = arg134_1 = None
        add_61: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_60, arg135_1);  mul_60 = arg135_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_129: "f32[256, 1024]" = torch.ops.aten.view.default(add_61, [256, 1024])
        permute_80: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg136_1, [1, 0]);  arg136_1 = None
        addmm_48: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg137_1, view_129, permute_80);  arg137_1 = view_129 = permute_80 = None
        view_130: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_48, [2, 128, 1024]);  addmm_48 = None
        view_131: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_130, [2, 128, -1, 64]);  view_130 = None
        permute_81: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_131, [0, 2, 1, 3]);  view_131 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_132: "f32[256, 1024]" = torch.ops.aten.view.default(add_61, [256, 1024])
        permute_82: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg138_1, [1, 0]);  arg138_1 = None
        addmm_49: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg139_1, view_132, permute_82);  arg139_1 = view_132 = permute_82 = None
        view_133: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_49, [2, 128, 1024]);  addmm_49 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_134: "f32[256, 1024]" = torch.ops.aten.view.default(add_61, [256, 1024]);  add_61 = None
        permute_83: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg140_1, [1, 0]);  arg140_1 = None
        addmm_50: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg141_1, view_134, permute_83);  arg141_1 = view_134 = permute_83 = None
        view_135: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_50, [2, 128, 1024]);  addmm_50 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_136: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_133, [2, 128, -1, 64]);  view_133 = None
        permute_84: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_136, [0, 2, 1, 3]);  view_136 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_137: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_135, [2, 128, -1, 64]);  view_135 = None
        permute_85: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_137, [0, 2, 1, 3]);  view_137 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_10: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_8 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_81, permute_84, permute_85, expand_10, False, scale = 0.125);  permute_81 = permute_84 = permute_85 = expand_10 = None
        getitem_68: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_8[0];  _scaled_dot_product_efficient_attention_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_86: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_68, [0, 2, 1, 3]);  getitem_68 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_138: "f32[2, 128, 1024]" = torch.ops.aten.view.default(permute_86, [2, 128, -1]);  permute_86 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_139: "f32[256, 1024]" = torch.ops.aten.view.default(view_138, [256, 1024]);  view_138 = None
        permute_87: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg142_1, [1, 0]);  arg142_1 = None
        addmm_51: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg143_1, view_139, permute_87);  arg143_1 = view_139 = permute_87 = None
        view_140: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_51, [2, 128, 1024]);  addmm_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_62: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_59, view_140);  add_59 = view_140 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_18 = torch.ops.aten.var_mean.correction(add_62, [2], correction = 0, keepdim = True)
        getitem_72: "f32[2, 128, 1]" = var_mean_18[0]
        getitem_73: "f32[2, 128, 1]" = var_mean_18[1];  var_mean_18 = None
        add_63: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_72, 1e-05);  getitem_72 = None
        rsqrt_18: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_63);  add_63 = None
        sub_19: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_62, getitem_73);  getitem_73 = None
        mul_61: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_19, rsqrt_18);  sub_19 = rsqrt_18 = None
        mul_62: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_61, arg144_1);  mul_61 = arg144_1 = None
        add_64: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_62, arg145_1);  mul_62 = arg145_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_141: "f32[256, 1024]" = torch.ops.aten.view.default(add_64, [256, 1024]);  add_64 = None
        permute_88: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg146_1, [1, 0]);  arg146_1 = None
        addmm_52: "f32[256, 4096]" = torch.ops.aten.addmm.default(arg147_1, view_141, permute_88);  arg147_1 = view_141 = permute_88 = None
        view_142: "f32[2, 128, 4096]" = torch.ops.aten.view.default(addmm_52, [2, 128, 4096]);  addmm_52 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_63: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_142, 0.5)
        mul_64: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_142, 0.7071067811865476);  view_142 = None
        erf_8: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_64);  mul_64 = None
        add_65: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_8, 1);  erf_8 = None
        mul_65: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_63, add_65);  mul_63 = add_65 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_143: "f32[256, 4096]" = torch.ops.aten.view.default(mul_65, [256, 4096]);  mul_65 = None
        permute_89: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg148_1, [1, 0]);  arg148_1 = None
        addmm_53: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg149_1, view_143, permute_89);  arg149_1 = view_143 = permute_89 = None
        view_144: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_53, [2, 128, 1024]);  addmm_53 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_66: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_62, view_144);  add_62 = view_144 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_19 = torch.ops.aten.var_mean.correction(add_66, [2], correction = 0, keepdim = True)
        getitem_74: "f32[2, 128, 1]" = var_mean_19[0]
        getitem_75: "f32[2, 128, 1]" = var_mean_19[1];  var_mean_19 = None
        add_67: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_74, 1e-05);  getitem_74 = None
        rsqrt_19: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_67);  add_67 = None
        sub_20: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_66, getitem_75);  getitem_75 = None
        mul_66: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_20, rsqrt_19);  sub_20 = rsqrt_19 = None
        mul_67: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_66, arg150_1);  mul_66 = arg150_1 = None
        add_68: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_67, arg151_1);  mul_67 = arg151_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_145: "f32[256, 1024]" = torch.ops.aten.view.default(add_68, [256, 1024])
        permute_90: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg152_1, [1, 0]);  arg152_1 = None
        addmm_54: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg153_1, view_145, permute_90);  arg153_1 = view_145 = permute_90 = None
        view_146: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_54, [2, 128, 1024]);  addmm_54 = None
        view_147: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_146, [2, 128, -1, 64]);  view_146 = None
        permute_91: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_147, [0, 2, 1, 3]);  view_147 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_148: "f32[256, 1024]" = torch.ops.aten.view.default(add_68, [256, 1024])
        permute_92: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg154_1, [1, 0]);  arg154_1 = None
        addmm_55: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg155_1, view_148, permute_92);  arg155_1 = view_148 = permute_92 = None
        view_149: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_55, [2, 128, 1024]);  addmm_55 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_150: "f32[256, 1024]" = torch.ops.aten.view.default(add_68, [256, 1024]);  add_68 = None
        permute_93: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg156_1, [1, 0]);  arg156_1 = None
        addmm_56: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg157_1, view_150, permute_93);  arg157_1 = view_150 = permute_93 = None
        view_151: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_56, [2, 128, 1024]);  addmm_56 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_152: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_149, [2, 128, -1, 64]);  view_149 = None
        permute_94: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_152, [0, 2, 1, 3]);  view_152 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_153: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_151, [2, 128, -1, 64]);  view_151 = None
        permute_95: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_153, [0, 2, 1, 3]);  view_153 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_11: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_9 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_91, permute_94, permute_95, expand_11, False, scale = 0.125);  permute_91 = permute_94 = permute_95 = expand_11 = None
        getitem_76: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_9[0];  _scaled_dot_product_efficient_attention_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_96: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_76, [0, 2, 1, 3]);  getitem_76 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_154: "f32[2, 128, 1024]" = torch.ops.aten.view.default(permute_96, [2, 128, -1]);  permute_96 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_155: "f32[256, 1024]" = torch.ops.aten.view.default(view_154, [256, 1024]);  view_154 = None
        permute_97: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg158_1, [1, 0]);  arg158_1 = None
        addmm_57: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg159_1, view_155, permute_97);  arg159_1 = view_155 = permute_97 = None
        view_156: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_57, [2, 128, 1024]);  addmm_57 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_69: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_66, view_156);  add_66 = view_156 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_20 = torch.ops.aten.var_mean.correction(add_69, [2], correction = 0, keepdim = True)
        getitem_80: "f32[2, 128, 1]" = var_mean_20[0]
        getitem_81: "f32[2, 128, 1]" = var_mean_20[1];  var_mean_20 = None
        add_70: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_80, 1e-05);  getitem_80 = None
        rsqrt_20: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_70);  add_70 = None
        sub_21: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_69, getitem_81);  getitem_81 = None
        mul_68: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_21, rsqrt_20);  sub_21 = rsqrt_20 = None
        mul_69: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_68, arg160_1);  mul_68 = arg160_1 = None
        add_71: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_69, arg161_1);  mul_69 = arg161_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_157: "f32[256, 1024]" = torch.ops.aten.view.default(add_71, [256, 1024]);  add_71 = None
        permute_98: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg162_1, [1, 0]);  arg162_1 = None
        addmm_58: "f32[256, 4096]" = torch.ops.aten.addmm.default(arg163_1, view_157, permute_98);  arg163_1 = view_157 = permute_98 = None
        view_158: "f32[2, 128, 4096]" = torch.ops.aten.view.default(addmm_58, [2, 128, 4096]);  addmm_58 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_70: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_158, 0.5)
        mul_71: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_158, 0.7071067811865476);  view_158 = None
        erf_9: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_71);  mul_71 = None
        add_72: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_9, 1);  erf_9 = None
        mul_72: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_70, add_72);  mul_70 = add_72 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_159: "f32[256, 4096]" = torch.ops.aten.view.default(mul_72, [256, 4096]);  mul_72 = None
        permute_99: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg164_1, [1, 0]);  arg164_1 = None
        addmm_59: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg165_1, view_159, permute_99);  arg165_1 = view_159 = permute_99 = None
        view_160: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_59, [2, 128, 1024]);  addmm_59 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_73: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_69, view_160);  add_69 = view_160 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_21 = torch.ops.aten.var_mean.correction(add_73, [2], correction = 0, keepdim = True)
        getitem_82: "f32[2, 128, 1]" = var_mean_21[0]
        getitem_83: "f32[2, 128, 1]" = var_mean_21[1];  var_mean_21 = None
        add_74: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_82, 1e-05);  getitem_82 = None
        rsqrt_21: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_74);  add_74 = None
        sub_22: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_73, getitem_83);  getitem_83 = None
        mul_73: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_22, rsqrt_21);  sub_22 = rsqrt_21 = None
        mul_74: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_73, arg166_1);  mul_73 = arg166_1 = None
        add_75: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_74, arg167_1);  mul_74 = arg167_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_161: "f32[256, 1024]" = torch.ops.aten.view.default(add_75, [256, 1024])
        permute_100: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg168_1, [1, 0]);  arg168_1 = None
        addmm_60: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg169_1, view_161, permute_100);  arg169_1 = view_161 = permute_100 = None
        view_162: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_60, [2, 128, 1024]);  addmm_60 = None
        view_163: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_162, [2, 128, -1, 64]);  view_162 = None
        permute_101: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_163, [0, 2, 1, 3]);  view_163 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_164: "f32[256, 1024]" = torch.ops.aten.view.default(add_75, [256, 1024])
        permute_102: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg170_1, [1, 0]);  arg170_1 = None
        addmm_61: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg171_1, view_164, permute_102);  arg171_1 = view_164 = permute_102 = None
        view_165: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_61, [2, 128, 1024]);  addmm_61 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_166: "f32[256, 1024]" = torch.ops.aten.view.default(add_75, [256, 1024]);  add_75 = None
        permute_103: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg172_1, [1, 0]);  arg172_1 = None
        addmm_62: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg173_1, view_166, permute_103);  arg173_1 = view_166 = permute_103 = None
        view_167: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_62, [2, 128, 1024]);  addmm_62 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_168: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_165, [2, 128, -1, 64]);  view_165 = None
        permute_104: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_168, [0, 2, 1, 3]);  view_168 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_169: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_167, [2, 128, -1, 64]);  view_167 = None
        permute_105: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_169, [0, 2, 1, 3]);  view_169 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_12: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_10 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_101, permute_104, permute_105, expand_12, False, scale = 0.125);  permute_101 = permute_104 = permute_105 = expand_12 = None
        getitem_84: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_10[0];  _scaled_dot_product_efficient_attention_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_106: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_84, [0, 2, 1, 3]);  getitem_84 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_170: "f32[2, 128, 1024]" = torch.ops.aten.view.default(permute_106, [2, 128, -1]);  permute_106 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_171: "f32[256, 1024]" = torch.ops.aten.view.default(view_170, [256, 1024]);  view_170 = None
        permute_107: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg174_1, [1, 0]);  arg174_1 = None
        addmm_63: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg175_1, view_171, permute_107);  arg175_1 = view_171 = permute_107 = None
        view_172: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_63, [2, 128, 1024]);  addmm_63 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_76: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_73, view_172);  add_73 = view_172 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_22 = torch.ops.aten.var_mean.correction(add_76, [2], correction = 0, keepdim = True)
        getitem_88: "f32[2, 128, 1]" = var_mean_22[0]
        getitem_89: "f32[2, 128, 1]" = var_mean_22[1];  var_mean_22 = None
        add_77: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_88, 1e-05);  getitem_88 = None
        rsqrt_22: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_77);  add_77 = None
        sub_23: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_76, getitem_89);  getitem_89 = None
        mul_75: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_23, rsqrt_22);  sub_23 = rsqrt_22 = None
        mul_76: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_75, arg176_1);  mul_75 = arg176_1 = None
        add_78: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_76, arg177_1);  mul_76 = arg177_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_173: "f32[256, 1024]" = torch.ops.aten.view.default(add_78, [256, 1024]);  add_78 = None
        permute_108: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg178_1, [1, 0]);  arg178_1 = None
        addmm_64: "f32[256, 4096]" = torch.ops.aten.addmm.default(arg179_1, view_173, permute_108);  arg179_1 = view_173 = permute_108 = None
        view_174: "f32[2, 128, 4096]" = torch.ops.aten.view.default(addmm_64, [2, 128, 4096]);  addmm_64 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_77: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_174, 0.5)
        mul_78: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_174, 0.7071067811865476);  view_174 = None
        erf_10: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_78);  mul_78 = None
        add_79: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_10, 1);  erf_10 = None
        mul_79: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_77, add_79);  mul_77 = add_79 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_175: "f32[256, 4096]" = torch.ops.aten.view.default(mul_79, [256, 4096]);  mul_79 = None
        permute_109: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg180_1, [1, 0]);  arg180_1 = None
        addmm_65: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg181_1, view_175, permute_109);  arg181_1 = view_175 = permute_109 = None
        view_176: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_65, [2, 128, 1024]);  addmm_65 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_80: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_76, view_176);  add_76 = view_176 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_23 = torch.ops.aten.var_mean.correction(add_80, [2], correction = 0, keepdim = True)
        getitem_90: "f32[2, 128, 1]" = var_mean_23[0]
        getitem_91: "f32[2, 128, 1]" = var_mean_23[1];  var_mean_23 = None
        add_81: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_90, 1e-05);  getitem_90 = None
        rsqrt_23: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_81);  add_81 = None
        sub_24: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_80, getitem_91);  getitem_91 = None
        mul_80: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_24, rsqrt_23);  sub_24 = rsqrt_23 = None
        mul_81: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_80, arg182_1);  mul_80 = arg182_1 = None
        add_82: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_81, arg183_1);  mul_81 = arg183_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_177: "f32[256, 1024]" = torch.ops.aten.view.default(add_82, [256, 1024])
        permute_110: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg184_1, [1, 0]);  arg184_1 = None
        addmm_66: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg185_1, view_177, permute_110);  arg185_1 = view_177 = permute_110 = None
        view_178: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_66, [2, 128, 1024]);  addmm_66 = None
        view_179: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_178, [2, 128, -1, 64]);  view_178 = None
        permute_111: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_179, [0, 2, 1, 3]);  view_179 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_180: "f32[256, 1024]" = torch.ops.aten.view.default(add_82, [256, 1024])
        permute_112: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg186_1, [1, 0]);  arg186_1 = None
        addmm_67: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg187_1, view_180, permute_112);  arg187_1 = view_180 = permute_112 = None
        view_181: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_67, [2, 128, 1024]);  addmm_67 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_182: "f32[256, 1024]" = torch.ops.aten.view.default(add_82, [256, 1024]);  add_82 = None
        permute_113: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg188_1, [1, 0]);  arg188_1 = None
        addmm_68: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg189_1, view_182, permute_113);  arg189_1 = view_182 = permute_113 = None
        view_183: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_68, [2, 128, 1024]);  addmm_68 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_184: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_181, [2, 128, -1, 64]);  view_181 = None
        permute_114: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_184, [0, 2, 1, 3]);  view_184 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_185: "f32[2, 128, 16, 64]" = torch.ops.aten.view.default(view_183, [2, 128, -1, 64]);  view_183 = None
        permute_115: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_185, [0, 2, 1, 3]);  view_185 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_13: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128]);  where = None
        _scaled_dot_product_efficient_attention_11 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_111, permute_114, permute_115, expand_13, False, scale = 0.125);  permute_111 = permute_114 = permute_115 = expand_13 = None
        getitem_92: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_11[0];  _scaled_dot_product_efficient_attention_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_116: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_92, [0, 2, 1, 3]);  getitem_92 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_186: "f32[2, 128, 1024]" = torch.ops.aten.view.default(permute_116, [2, 128, -1]);  permute_116 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_187: "f32[256, 1024]" = torch.ops.aten.view.default(view_186, [256, 1024]);  view_186 = None
        permute_117: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg190_1, [1, 0]);  arg190_1 = None
        addmm_69: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg191_1, view_187, permute_117);  arg191_1 = view_187 = permute_117 = None
        view_188: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_69, [2, 128, 1024]);  addmm_69 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_83: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_80, view_188);  add_80 = view_188 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_24 = torch.ops.aten.var_mean.correction(add_83, [2], correction = 0, keepdim = True)
        getitem_96: "f32[2, 128, 1]" = var_mean_24[0]
        getitem_97: "f32[2, 128, 1]" = var_mean_24[1];  var_mean_24 = None
        add_84: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_96, 1e-05);  getitem_96 = None
        rsqrt_24: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_84);  add_84 = None
        sub_25: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_83, getitem_97);  getitem_97 = None
        mul_82: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_25, rsqrt_24);  sub_25 = rsqrt_24 = None
        mul_83: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_82, arg192_1);  mul_82 = arg192_1 = None
        add_85: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_83, arg193_1);  mul_83 = arg193_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_189: "f32[256, 1024]" = torch.ops.aten.view.default(add_85, [256, 1024]);  add_85 = None
        permute_118: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg194_1, [1, 0]);  arg194_1 = None
        addmm_70: "f32[256, 4096]" = torch.ops.aten.addmm.default(arg195_1, view_189, permute_118);  arg195_1 = view_189 = permute_118 = None
        view_190: "f32[2, 128, 4096]" = torch.ops.aten.view.default(addmm_70, [2, 128, 4096]);  addmm_70 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_84: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_190, 0.5)
        mul_85: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_190, 0.7071067811865476);  view_190 = None
        erf_11: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_85);  mul_85 = None
        add_86: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_11, 1);  erf_11 = None
        mul_86: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_84, add_86);  mul_84 = add_86 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_191: "f32[256, 4096]" = torch.ops.aten.view.default(mul_86, [256, 4096]);  mul_86 = None
        permute_119: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg196_1, [1, 0]);  arg196_1 = None
        addmm_71: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg197_1, view_191, permute_119);  arg197_1 = view_191 = permute_119 = None
        view_192: "f32[2, 128, 1024]" = torch.ops.aten.view.default(addmm_71, [2, 128, 1024]);  addmm_71 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_87: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_83, view_192);  add_83 = view_192 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:878 in forward, code: hidden_states = self.layer_norm(hidden_states)
        var_mean_25 = torch.ops.aten.var_mean.correction(add_87, [2], correction = 0, keepdim = True)
        getitem_98: "f32[2, 128, 1]" = var_mean_25[0]
        getitem_99: "f32[2, 128, 1]" = var_mean_25[1];  var_mean_25 = None
        add_88: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_98, 1e-05);  getitem_98 = None
        rsqrt_25: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_88);  add_88 = None
        sub_26: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_87, getitem_99);  add_87 = getitem_99 = None
        mul_87: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_26, rsqrt_25);  sub_26 = rsqrt_25 = None
        mul_88: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_87, arg198_1);  mul_87 = arg198_1 = None
        add_89: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_88, arg199_1);  mul_88 = arg199_1 = None
        return (add_89,)
        

# ===== run_2025_10_19_04_14_08_043050-pid_19/torchinductor/model__3_inference_3.3/fx_graph_runnable.py =====

import torch
from torch import tensor, device
import torch.fx as fx
from torch._dynamo.testing import rand_strided
from math import inf
import torch._inductor.inductor_prims

import torch._dynamo.config
import torch._inductor.config
import torch._functorch.config
import torch.fx.experimental._config
torch._dynamo.config.traceable_tensor_subclasses = set()
torch._dynamo.config.allowed_functions_module_string_ignorelist = {'torch._decomp', 'torch._prims', 'torch._refs', 'torch.testing', 'torch.distributions'}
torch._dynamo.config._ddp_optimization_mode = ['ddp_optimizer', 'python_reducer', 'python_reducer_without_compiled_forward', 'no_optimization']
torch._dynamo.config._save_config_ignore = {'constant_functions', 'repro_level', 'skipfiles_inline_module_allowlist', 'repro_after'}
torch._dynamo.config.reorderable_logging_functions = set()
torch._dynamo.config.ignore_logger_methods = set()
torch._dynamo.config._autograd_backward_strict_mode_banned_ops = ['stride', 'requires_grad', 'storage_offset', 'layout', 'data', 'is_coalesced', 'is_complex', 'is_conj', 'is_contiguous', 'is_cpu', 'is_cuda', 'is_distributed', 'is_floating_point', 'is_inference', 'is_ipu', 'is_leaf', 'is_maia', 'is_meta', 'is_mkldnn', 'is_mps', 'is_mtia', 'is_neg', 'is_nested', 'is_nonzero', 'is_pinned', 'is_quantized', 'is_same_size', 'is_set_to', 'is_shared', 'is_signed', 'is_sparse', 'is_sparse_csr', 'is_vulkan', 'is_xla', 'is_xpu']
torch._dynamo.config.compiled_autograd_kwargs_override = {}
torch._inductor.config.pre_grad_fusion_options = {}
torch._inductor.config.post_grad_fusion_options = {}
torch._inductor.config.fx_passes_numeric_check = {'pre_grad': False, 'precision': 0.0001, 'num_iterations': 1, 'requires_optimizer': True}
torch._inductor.config.reorder_for_compute_comm_overlap_passes = ['reorder_compute_for_overlap', 'sink_waits', 'raise_comms']
torch._inductor.config.max_autotune = True
torch._inductor.config.coordinate_descent_tuning = True
torch._inductor.config._fuse_ddp_communication_passes = ['fuse_ddp_with_concat_op', 'schedule_comm_wait']
torch._inductor.config.triton.cudagraphs = True
torch._inductor.config.aot_inductor.metadata = {}
torch._inductor.config.aot_inductor.presets = {}
torch._inductor.config.rocm.arch = []
torch._inductor.config.rocm.ck_supported_arch = ['gfx90a', 'gfx940', 'gfx941', 'gfx942']
torch._inductor.config.trace.enabled = False
torch._inductor.config.trace.save_real_tensors = False
torch._inductor.config._save_config_ignore = ['trace.upload_tar', 'joint_custom_pre_pass', 'joint_custom_post_pass', 'pre_grad_custom_pass']
torch._inductor.config._cache_config_ignore_prefix = ['trace', 'cuda.cutlass_dir', 'worker_start_method', 'compile_threads', 'post_grad_custom_post_pass', 'post_grad_custom_pre_pass', 'always_complex_memory_overlap_TESTING_ONLY']
torch._inductor.config.external_matmul = []
torch._functorch.config.functionalize_rng_ops = False
torch._functorch.config.debug_partitioner = True
torch._functorch.config.fake_tensor_allow_unsafe_data_ptr_access = True
torch._functorch.config.unlift_effect_tokens = True



isolate_fails_code_str = None




# torch version: 2.6.0+cu124
# torch cuda version: 12.4
# torch git version: 2236df1770800ffea5697b11b0bb0d910b2e59e1


# CUDA Info: 
# nvcc: NVIDIA (R) Cuda compiler driver 
# Copyright (c) 2005-2024 NVIDIA Corporation 
# Built on Thu_Jun__6_02:18:23_PDT_2024 
# Cuda compilation tools, release 12.5, V12.5.82 
# Build cuda_12.5.r12.5/compiler.34385749_0 

# GPU Hardware Info: 
# Tesla T4 : 2 


from torch.nn import *
class Repro(torch.nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.register_buffer('_tensor_constant0', tensor(1.))

    
    
    def forward(self, arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1, arg7_1, arg8_1, arg9_1, arg10_1, arg11_1, arg12_1, arg13_1, arg14_1, arg15_1, arg16_1, arg17_1, arg18_1, arg19_1, arg20_1, arg21_1, arg22_1, arg23_1, arg24_1, arg25_1, arg26_1, arg27_1, arg28_1, arg29_1, arg30_1, arg31_1, arg32_1, arg33_1, arg34_1, arg35_1, arg36_1, arg37_1, arg38_1, arg39_1, arg40_1, arg41_1, arg42_1, arg43_1, arg44_1, arg45_1, arg46_1, arg47_1, arg48_1, arg49_1, arg50_1, arg51_1, arg52_1, arg53_1, arg54_1, arg55_1, arg56_1, arg57_1, arg58_1, arg59_1, arg60_1, arg61_1, arg62_1, arg63_1, arg64_1, arg65_1, arg66_1, arg67_1, arg68_1, arg69_1, arg70_1, arg71_1, arg72_1, arg73_1, arg74_1, arg75_1, arg76_1, arg77_1, arg78_1, arg79_1, arg80_1, arg81_1, arg82_1, arg83_1, arg84_1, arg85_1, arg86_1, arg87_1, arg88_1, arg89_1, arg90_1, arg91_1, arg92_1, arg93_1, arg94_1, arg95_1, arg96_1, arg97_1, arg98_1, arg99_1, arg100_1, arg101_1, arg102_1, arg103_1, arg104_1, arg105_1, arg106_1, arg107_1, arg108_1, arg109_1, arg110_1, arg111_1, arg112_1, arg113_1, arg114_1, arg115_1, arg116_1, arg117_1, arg118_1, arg119_1, arg120_1, arg121_1, arg122_1, arg123_1, arg124_1, arg125_1, arg126_1, arg127_1, arg128_1, arg129_1, arg130_1, arg131_1, arg132_1, arg133_1, arg134_1, arg135_1, arg136_1, arg137_1, arg138_1, arg139_1, arg140_1, arg141_1, arg142_1, arg143_1, arg144_1, arg145_1, arg146_1, arg147_1, arg148_1, arg149_1, arg150_1, arg151_1, arg152_1, arg153_1, arg154_1, arg155_1, arg156_1, arg157_1, arg158_1, arg159_1, arg160_1, arg161_1, arg162_1, arg163_1, arg164_1, arg165_1, arg166_1, arg167_1, arg168_1, arg169_1, arg170_1, arg171_1, arg172_1, arg173_1, arg174_1, arg175_1, arg176_1, arg177_1, arg178_1, arg179_1, arg180_1, arg181_1, arg182_1, arg183_1, arg184_1, arg185_1, arg186_1, arg187_1, arg188_1, arg189_1, arg190_1, arg191_1, arg192_1, arg193_1, arg194_1, arg195_1, arg196_1, arg197_1, arg198_1, arg199_1):
        view = torch.ops.aten.view.default(arg0_1, [-1, 128]);  arg0_1 = None
        embedding = torch.ops.aten.embedding.default(arg1_1, view, 1);  arg1_1 = view = None
        mul = torch.ops.aten.mul.Tensor(embedding, 32.0);  embedding = None
        iota = torch.ops.prims.iota.default(128, start = 0, step = 1, dtype = torch.int64, device = device(type='cuda', index=0), requires_grad = False)
        expand = torch.ops.aten.expand.default(iota, [2, -1]);  iota = None
        add = torch.ops.aten.add.Tensor(expand, 2);  expand = None
        embedding_1 = torch.ops.aten.embedding.default(arg2_1, add);  arg2_1 = add = None
        add_1 = torch.ops.aten.add.Tensor(mul, embedding_1);  mul = embedding_1 = None
        var_mean = torch.ops.aten.var_mean.correction(add_1, [2], correction = 0, keepdim = True)
        getitem = var_mean[0]
        getitem_1 = var_mean[1];  var_mean = None
        add_2 = torch.ops.aten.add.Tensor(getitem, 1e-05);  getitem = None
        rsqrt = torch.ops.aten.rsqrt.default(add_2);  add_2 = None
        sub = torch.ops.aten.sub.Tensor(add_1, getitem_1);  add_1 = getitem_1 = None
        mul_1 = torch.ops.aten.mul.Tensor(sub, rsqrt);  sub = rsqrt = None
        mul_2 = torch.ops.aten.mul.Tensor(mul_1, arg3_1);  mul_1 = arg3_1 = None
        add_3 = torch.ops.aten.add.Tensor(mul_2, arg4_1);  mul_2 = arg4_1 = None
        unsqueeze = torch.ops.aten.unsqueeze.default(arg5_1, 1);  arg5_1 = None
        unsqueeze_1 = torch.ops.aten.unsqueeze.default(unsqueeze, 2);  unsqueeze = None
        expand_1 = torch.ops.aten.expand.default(unsqueeze_1, [2, 1, 128, 128]);  unsqueeze_1 = None
        convert_element_type = torch.ops.prims.convert_element_type.default(expand_1, torch.float32);  expand_1 = None
        _tensor_constant0 = self._tensor_constant0;  _tensor_constant0 = None
        full_default = torch.ops.aten.full.default([], 1.0, dtype = torch.float32, layout = torch.strided, device = device(type='cpu'), pin_memory = False)
        sub_1 = torch.ops.aten.sub.Tensor(full_default, convert_element_type);  full_default = convert_element_type = None
        convert_element_type_1 = torch.ops.prims.convert_element_type.default(sub_1, torch.bool)
        full_default_1 = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where = torch.ops.aten.where.self(convert_element_type_1, full_default_1, sub_1);  convert_element_type_1 = full_default_1 = sub_1 = None
        var_mean_1 = torch.ops.aten.var_mean.correction(add_3, [2], correction = 0, keepdim = True)
        getitem_2 = var_mean_1[0]
        getitem_3 = var_mean_1[1];  var_mean_1 = None
        add_4 = torch.ops.aten.add.Tensor(getitem_2, 1e-05);  getitem_2 = None
        rsqrt_1 = torch.ops.aten.rsqrt.default(add_4);  add_4 = None
        sub_2 = torch.ops.aten.sub.Tensor(add_3, getitem_3);  getitem_3 = None
        mul_3 = torch.ops.aten.mul.Tensor(sub_2, rsqrt_1);  sub_2 = rsqrt_1 = None
        mul_4 = torch.ops.aten.mul.Tensor(mul_3, arg6_1);  mul_3 = arg6_1 = None
        add_5 = torch.ops.aten.add.Tensor(mul_4, arg7_1);  mul_4 = arg7_1 = None
        view_1 = torch.ops.aten.view.default(add_5, [256, 1024])
        permute = torch.ops.aten.permute.default(arg8_1, [1, 0]);  arg8_1 = None
        addmm = torch.ops.aten.addmm.default(arg9_1, view_1, permute);  arg9_1 = view_1 = permute = None
        view_2 = torch.ops.aten.view.default(addmm, [2, 128, 1024]);  addmm = None
        view_3 = torch.ops.aten.view.default(view_2, [2, 128, -1, 64]);  view_2 = None
        permute_1 = torch.ops.aten.permute.default(view_3, [0, 2, 1, 3]);  view_3 = None
        view_4 = torch.ops.aten.view.default(add_5, [256, 1024])
        permute_2 = torch.ops.aten.permute.default(arg10_1, [1, 0]);  arg10_1 = None
        addmm_1 = torch.ops.aten.addmm.default(arg11_1, view_4, permute_2);  arg11_1 = view_4 = permute_2 = None
        view_5 = torch.ops.aten.view.default(addmm_1, [2, 128, 1024]);  addmm_1 = None
        view_6 = torch.ops.aten.view.default(add_5, [256, 1024]);  add_5 = None
        permute_3 = torch.ops.aten.permute.default(arg12_1, [1, 0]);  arg12_1 = None
        addmm_2 = torch.ops.aten.addmm.default(arg13_1, view_6, permute_3);  arg13_1 = view_6 = permute_3 = None
        view_7 = torch.ops.aten.view.default(addmm_2, [2, 128, 1024]);  addmm_2 = None
        view_8 = torch.ops.aten.view.default(view_5, [2, 128, -1, 64]);  view_5 = None
        permute_4 = torch.ops.aten.permute.default(view_8, [0, 2, 1, 3]);  view_8 = None
        view_9 = torch.ops.aten.view.default(view_7, [2, 128, -1, 64]);  view_7 = None
        permute_5 = torch.ops.aten.permute.default(view_9, [0, 2, 1, 3]);  view_9 = None
        expand_2 = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_1, permute_4, permute_5, expand_2, False, scale = 0.125);  permute_1 = permute_4 = permute_5 = expand_2 = None
        getitem_4 = _scaled_dot_product_efficient_attention[0];  _scaled_dot_product_efficient_attention = None
        permute_6 = torch.ops.aten.permute.default(getitem_4, [0, 2, 1, 3]);  getitem_4 = None
        view_10 = torch.ops.aten.view.default(permute_6, [2, 128, -1]);  permute_6 = None
        view_11 = torch.ops.aten.view.default(view_10, [256, 1024]);  view_10 = None
        permute_7 = torch.ops.aten.permute.default(arg14_1, [1, 0]);  arg14_1 = None
        addmm_3 = torch.ops.aten.addmm.default(arg15_1, view_11, permute_7);  arg15_1 = view_11 = permute_7 = None
        view_12 = torch.ops.aten.view.default(addmm_3, [2, 128, 1024]);  addmm_3 = None
        add_6 = torch.ops.aten.add.Tensor(add_3, view_12);  add_3 = view_12 = None
        var_mean_2 = torch.ops.aten.var_mean.correction(add_6, [2], correction = 0, keepdim = True)
        getitem_8 = var_mean_2[0]
        getitem_9 = var_mean_2[1];  var_mean_2 = None
        add_7 = torch.ops.aten.add.Tensor(getitem_8, 1e-05);  getitem_8 = None
        rsqrt_2 = torch.ops.aten.rsqrt.default(add_7);  add_7 = None
        sub_3 = torch.ops.aten.sub.Tensor(add_6, getitem_9);  getitem_9 = None
        mul_5 = torch.ops.aten.mul.Tensor(sub_3, rsqrt_2);  sub_3 = rsqrt_2 = None
        mul_6 = torch.ops.aten.mul.Tensor(mul_5, arg16_1);  mul_5 = arg16_1 = None
        add_8 = torch.ops.aten.add.Tensor(mul_6, arg17_1);  mul_6 = arg17_1 = None
        view_13 = torch.ops.aten.view.default(add_8, [256, 1024]);  add_8 = None
        permute_8 = torch.ops.aten.permute.default(arg18_1, [1, 0]);  arg18_1 = None
        addmm_4 = torch.ops.aten.addmm.default(arg19_1, view_13, permute_8);  arg19_1 = view_13 = permute_8 = None
        view_14 = torch.ops.aten.view.default(addmm_4, [2, 128, 4096]);  addmm_4 = None
        mul_7 = torch.ops.aten.mul.Tensor(view_14, 0.5)
        mul_8 = torch.ops.aten.mul.Tensor(view_14, 0.7071067811865476);  view_14 = None
        erf = torch.ops.aten.erf.default(mul_8);  mul_8 = None
        add_9 = torch.ops.aten.add.Tensor(erf, 1);  erf = None
        mul_9 = torch.ops.aten.mul.Tensor(mul_7, add_9);  mul_7 = add_9 = None
        view_15 = torch.ops.aten.view.default(mul_9, [256, 4096]);  mul_9 = None
        permute_9 = torch.ops.aten.permute.default(arg20_1, [1, 0]);  arg20_1 = None
        addmm_5 = torch.ops.aten.addmm.default(arg21_1, view_15, permute_9);  arg21_1 = view_15 = permute_9 = None
        view_16 = torch.ops.aten.view.default(addmm_5, [2, 128, 1024]);  addmm_5 = None
        add_10 = torch.ops.aten.add.Tensor(add_6, view_16);  add_6 = view_16 = None
        var_mean_3 = torch.ops.aten.var_mean.correction(add_10, [2], correction = 0, keepdim = True)
        getitem_10 = var_mean_3[0]
        getitem_11 = var_mean_3[1];  var_mean_3 = None
        add_11 = torch.ops.aten.add.Tensor(getitem_10, 1e-05);  getitem_10 = None
        rsqrt_3 = torch.ops.aten.rsqrt.default(add_11);  add_11 = None
        sub_4 = torch.ops.aten.sub.Tensor(add_10, getitem_11);  getitem_11 = None
        mul_10 = torch.ops.aten.mul.Tensor(sub_4, rsqrt_3);  sub_4 = rsqrt_3 = None
        mul_11 = torch.ops.aten.mul.Tensor(mul_10, arg22_1);  mul_10 = arg22_1 = None
        add_12 = torch.ops.aten.add.Tensor(mul_11, arg23_1);  mul_11 = arg23_1 = None
        view_17 = torch.ops.aten.view.default(add_12, [256, 1024])
        permute_10 = torch.ops.aten.permute.default(arg24_1, [1, 0]);  arg24_1 = None
        addmm_6 = torch.ops.aten.addmm.default(arg25_1, view_17, permute_10);  arg25_1 = view_17 = permute_10 = None
        view_18 = torch.ops.aten.view.default(addmm_6, [2, 128, 1024]);  addmm_6 = None
        view_19 = torch.ops.aten.view.default(view_18, [2, 128, -1, 64]);  view_18 = None
        permute_11 = torch.ops.aten.permute.default(view_19, [0, 2, 1, 3]);  view_19 = None
        view_20 = torch.ops.aten.view.default(add_12, [256, 1024])
        permute_12 = torch.ops.aten.permute.default(arg26_1, [1, 0]);  arg26_1 = None
        addmm_7 = torch.ops.aten.addmm.default(arg27_1, view_20, permute_12);  arg27_1 = view_20 = permute_12 = None
        view_21 = torch.ops.aten.view.default(addmm_7, [2, 128, 1024]);  addmm_7 = None
        view_22 = torch.ops.aten.view.default(add_12, [256, 1024]);  add_12 = None
        permute_13 = torch.ops.aten.permute.default(arg28_1, [1, 0]);  arg28_1 = None
        addmm_8 = torch.ops.aten.addmm.default(arg29_1, view_22, permute_13);  arg29_1 = view_22 = permute_13 = None
        view_23 = torch.ops.aten.view.default(addmm_8, [2, 128, 1024]);  addmm_8 = None
        view_24 = torch.ops.aten.view.default(view_21, [2, 128, -1, 64]);  view_21 = None
        permute_14 = torch.ops.aten.permute.default(view_24, [0, 2, 1, 3]);  view_24 = None
        view_25 = torch.ops.aten.view.default(view_23, [2, 128, -1, 64]);  view_23 = None
        permute_15 = torch.ops.aten.permute.default(view_25, [0, 2, 1, 3]);  view_25 = None
        expand_3 = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_1 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_11, permute_14, permute_15, expand_3, False, scale = 0.125);  permute_11 = permute_14 = permute_15 = expand_3 = None
        getitem_12 = _scaled_dot_product_efficient_attention_1[0];  _scaled_dot_product_efficient_attention_1 = None
        permute_16 = torch.ops.aten.permute.default(getitem_12, [0, 2, 1, 3]);  getitem_12 = None
        view_26 = torch.ops.aten.view.default(permute_16, [2, 128, -1]);  permute_16 = None
        view_27 = torch.ops.aten.view.default(view_26, [256, 1024]);  view_26 = None
        permute_17 = torch.ops.aten.permute.default(arg30_1, [1, 0]);  arg30_1 = None
        addmm_9 = torch.ops.aten.addmm.default(arg31_1, view_27, permute_17);  arg31_1 = view_27 = permute_17 = None
        view_28 = torch.ops.aten.view.default(addmm_9, [2, 128, 1024]);  addmm_9 = None
        add_13 = torch.ops.aten.add.Tensor(add_10, view_28);  add_10 = view_28 = None
        var_mean_4 = torch.ops.aten.var_mean.correction(add_13, [2], correction = 0, keepdim = True)
        getitem_16 = var_mean_4[0]
        getitem_17 = var_mean_4[1];  var_mean_4 = None
        add_14 = torch.ops.aten.add.Tensor(getitem_16, 1e-05);  getitem_16 = None
        rsqrt_4 = torch.ops.aten.rsqrt.default(add_14);  add_14 = None
        sub_5 = torch.ops.aten.sub.Tensor(add_13, getitem_17);  getitem_17 = None
        mul_12 = torch.ops.aten.mul.Tensor(sub_5, rsqrt_4);  sub_5 = rsqrt_4 = None
        mul_13 = torch.ops.aten.mul.Tensor(mul_12, arg32_1);  mul_12 = arg32_1 = None
        add_15 = torch.ops.aten.add.Tensor(mul_13, arg33_1);  mul_13 = arg33_1 = None
        view_29 = torch.ops.aten.view.default(add_15, [256, 1024]);  add_15 = None
        permute_18 = torch.ops.aten.permute.default(arg34_1, [1, 0]);  arg34_1 = None
        addmm_10 = torch.ops.aten.addmm.default(arg35_1, view_29, permute_18);  arg35_1 = view_29 = permute_18 = None
        view_30 = torch.ops.aten.view.default(addmm_10, [2, 128, 4096]);  addmm_10 = None
        mul_14 = torch.ops.aten.mul.Tensor(view_30, 0.5)
        mul_15 = torch.ops.aten.mul.Tensor(view_30, 0.7071067811865476);  view_30 = None
        erf_1 = torch.ops.aten.erf.default(mul_15);  mul_15 = None
        add_16 = torch.ops.aten.add.Tensor(erf_1, 1);  erf_1 = None
        mul_16 = torch.ops.aten.mul.Tensor(mul_14, add_16);  mul_14 = add_16 = None
        view_31 = torch.ops.aten.view.default(mul_16, [256, 4096]);  mul_16 = None
        permute_19 = torch.ops.aten.permute.default(arg36_1, [1, 0]);  arg36_1 = None
        addmm_11 = torch.ops.aten.addmm.default(arg37_1, view_31, permute_19);  arg37_1 = view_31 = permute_19 = None
        view_32 = torch.ops.aten.view.default(addmm_11, [2, 128, 1024]);  addmm_11 = None
        add_17 = torch.ops.aten.add.Tensor(add_13, view_32);  add_13 = view_32 = None
        var_mean_5 = torch.ops.aten.var_mean.correction(add_17, [2], correction = 0, keepdim = True)
        getitem_18 = var_mean_5[0]
        getitem_19 = var_mean_5[1];  var_mean_5 = None
        add_18 = torch.ops.aten.add.Tensor(getitem_18, 1e-05);  getitem_18 = None
        rsqrt_5 = torch.ops.aten.rsqrt.default(add_18);  add_18 = None
        sub_6 = torch.ops.aten.sub.Tensor(add_17, getitem_19);  getitem_19 = None
        mul_17 = torch.ops.aten.mul.Tensor(sub_6, rsqrt_5);  sub_6 = rsqrt_5 = None
        mul_18 = torch.ops.aten.mul.Tensor(mul_17, arg38_1);  mul_17 = arg38_1 = None
        add_19 = torch.ops.aten.add.Tensor(mul_18, arg39_1);  mul_18 = arg39_1 = None
        view_33 = torch.ops.aten.view.default(add_19, [256, 1024])
        permute_20 = torch.ops.aten.permute.default(arg40_1, [1, 0]);  arg40_1 = None
        addmm_12 = torch.ops.aten.addmm.default(arg41_1, view_33, permute_20);  arg41_1 = view_33 = permute_20 = None
        view_34 = torch.ops.aten.view.default(addmm_12, [2, 128, 1024]);  addmm_12 = None
        view_35 = torch.ops.aten.view.default(view_34, [2, 128, -1, 64]);  view_34 = None
        permute_21 = torch.ops.aten.permute.default(view_35, [0, 2, 1, 3]);  view_35 = None
        view_36 = torch.ops.aten.view.default(add_19, [256, 1024])
        permute_22 = torch.ops.aten.permute.default(arg42_1, [1, 0]);  arg42_1 = None
        addmm_13 = torch.ops.aten.addmm.default(arg43_1, view_36, permute_22);  arg43_1 = view_36 = permute_22 = None
        view_37 = torch.ops.aten.view.default(addmm_13, [2, 128, 1024]);  addmm_13 = None
        view_38 = torch.ops.aten.view.default(add_19, [256, 1024]);  add_19 = None
        permute_23 = torch.ops.aten.permute.default(arg44_1, [1, 0]);  arg44_1 = None
        addmm_14 = torch.ops.aten.addmm.default(arg45_1, view_38, permute_23);  arg45_1 = view_38 = permute_23 = None
        view_39 = torch.ops.aten.view.default(addmm_14, [2, 128, 1024]);  addmm_14 = None
        view_40 = torch.ops.aten.view.default(view_37, [2, 128, -1, 64]);  view_37 = None
        permute_24 = torch.ops.aten.permute.default(view_40, [0, 2, 1, 3]);  view_40 = None
        view_41 = torch.ops.aten.view.default(view_39, [2, 128, -1, 64]);  view_39 = None
        permute_25 = torch.ops.aten.permute.default(view_41, [0, 2, 1, 3]);  view_41 = None
        expand_4 = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_2 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_21, permute_24, permute_25, expand_4, False, scale = 0.125);  permute_21 = permute_24 = permute_25 = expand_4 = None
        getitem_20 = _scaled_dot_product_efficient_attention_2[0];  _scaled_dot_product_efficient_attention_2 = None
        permute_26 = torch.ops.aten.permute.default(getitem_20, [0, 2, 1, 3]);  getitem_20 = None
        view_42 = torch.ops.aten.view.default(permute_26, [2, 128, -1]);  permute_26 = None
        view_43 = torch.ops.aten.view.default(view_42, [256, 1024]);  view_42 = None
        permute_27 = torch.ops.aten.permute.default(arg46_1, [1, 0]);  arg46_1 = None
        addmm_15 = torch.ops.aten.addmm.default(arg47_1, view_43, permute_27);  arg47_1 = view_43 = permute_27 = None
        view_44 = torch.ops.aten.view.default(addmm_15, [2, 128, 1024]);  addmm_15 = None
        add_20 = torch.ops.aten.add.Tensor(add_17, view_44);  add_17 = view_44 = None
        var_mean_6 = torch.ops.aten.var_mean.correction(add_20, [2], correction = 0, keepdim = True)
        getitem_24 = var_mean_6[0]
        getitem_25 = var_mean_6[1];  var_mean_6 = None
        add_21 = torch.ops.aten.add.Tensor(getitem_24, 1e-05);  getitem_24 = None
        rsqrt_6 = torch.ops.aten.rsqrt.default(add_21);  add_21 = None
        sub_7 = torch.ops.aten.sub.Tensor(add_20, getitem_25);  getitem_25 = None
        mul_19 = torch.ops.aten.mul.Tensor(sub_7, rsqrt_6);  sub_7 = rsqrt_6 = None
        mul_20 = torch.ops.aten.mul.Tensor(mul_19, arg48_1);  mul_19 = arg48_1 = None
        add_22 = torch.ops.aten.add.Tensor(mul_20, arg49_1);  mul_20 = arg49_1 = None
        view_45 = torch.ops.aten.view.default(add_22, [256, 1024]);  add_22 = None
        permute_28 = torch.ops.aten.permute.default(arg50_1, [1, 0]);  arg50_1 = None
        addmm_16 = torch.ops.aten.addmm.default(arg51_1, view_45, permute_28);  arg51_1 = view_45 = permute_28 = None
        view_46 = torch.ops.aten.view.default(addmm_16, [2, 128, 4096]);  addmm_16 = None
        mul_21 = torch.ops.aten.mul.Tensor(view_46, 0.5)
        mul_22 = torch.ops.aten.mul.Tensor(view_46, 0.7071067811865476);  view_46 = None
        erf_2 = torch.ops.aten.erf.default(mul_22);  mul_22 = None
        add_23 = torch.ops.aten.add.Tensor(erf_2, 1);  erf_2 = None
        mul_23 = torch.ops.aten.mul.Tensor(mul_21, add_23);  mul_21 = add_23 = None
        view_47 = torch.ops.aten.view.default(mul_23, [256, 4096]);  mul_23 = None
        permute_29 = torch.ops.aten.permute.default(arg52_1, [1, 0]);  arg52_1 = None
        addmm_17 = torch.ops.aten.addmm.default(arg53_1, view_47, permute_29);  arg53_1 = view_47 = permute_29 = None
        view_48 = torch.ops.aten.view.default(addmm_17, [2, 128, 1024]);  addmm_17 = None
        add_24 = torch.ops.aten.add.Tensor(add_20, view_48);  add_20 = view_48 = None
        var_mean_7 = torch.ops.aten.var_mean.correction(add_24, [2], correction = 0, keepdim = True)
        getitem_26 = var_mean_7[0]
        getitem_27 = var_mean_7[1];  var_mean_7 = None
        add_25 = torch.ops.aten.add.Tensor(getitem_26, 1e-05);  getitem_26 = None
        rsqrt_7 = torch.ops.aten.rsqrt.default(add_25);  add_25 = None
        sub_8 = torch.ops.aten.sub.Tensor(add_24, getitem_27);  getitem_27 = None
        mul_24 = torch.ops.aten.mul.Tensor(sub_8, rsqrt_7);  sub_8 = rsqrt_7 = None
        mul_25 = torch.ops.aten.mul.Tensor(mul_24, arg54_1);  mul_24 = arg54_1 = None
        add_26 = torch.ops.aten.add.Tensor(mul_25, arg55_1);  mul_25 = arg55_1 = None
        view_49 = torch.ops.aten.view.default(add_26, [256, 1024])
        permute_30 = torch.ops.aten.permute.default(arg56_1, [1, 0]);  arg56_1 = None
        addmm_18 = torch.ops.aten.addmm.default(arg57_1, view_49, permute_30);  arg57_1 = view_49 = permute_30 = None
        view_50 = torch.ops.aten.view.default(addmm_18, [2, 128, 1024]);  addmm_18 = None
        view_51 = torch.ops.aten.view.default(view_50, [2, 128, -1, 64]);  view_50 = None
        permute_31 = torch.ops.aten.permute.default(view_51, [0, 2, 1, 3]);  view_51 = None
        view_52 = torch.ops.aten.view.default(add_26, [256, 1024])
        permute_32 = torch.ops.aten.permute.default(arg58_1, [1, 0]);  arg58_1 = None
        addmm_19 = torch.ops.aten.addmm.default(arg59_1, view_52, permute_32);  arg59_1 = view_52 = permute_32 = None
        view_53 = torch.ops.aten.view.default(addmm_19, [2, 128, 1024]);  addmm_19 = None
        view_54 = torch.ops.aten.view.default(add_26, [256, 1024]);  add_26 = None
        permute_33 = torch.ops.aten.permute.default(arg60_1, [1, 0]);  arg60_1 = None
        addmm_20 = torch.ops.aten.addmm.default(arg61_1, view_54, permute_33);  arg61_1 = view_54 = permute_33 = None
        view_55 = torch.ops.aten.view.default(addmm_20, [2, 128, 1024]);  addmm_20 = None
        view_56 = torch.ops.aten.view.default(view_53, [2, 128, -1, 64]);  view_53 = None
        permute_34 = torch.ops.aten.permute.default(view_56, [0, 2, 1, 3]);  view_56 = None
        view_57 = torch.ops.aten.view.default(view_55, [2, 128, -1, 64]);  view_55 = None
        permute_35 = torch.ops.aten.permute.default(view_57, [0, 2, 1, 3]);  view_57 = None
        expand_5 = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_3 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_31, permute_34, permute_35, expand_5, False, scale = 0.125);  permute_31 = permute_34 = permute_35 = expand_5 = None
        getitem_28 = _scaled_dot_product_efficient_attention_3[0];  _scaled_dot_product_efficient_attention_3 = None
        permute_36 = torch.ops.aten.permute.default(getitem_28, [0, 2, 1, 3]);  getitem_28 = None
        view_58 = torch.ops.aten.view.default(permute_36, [2, 128, -1]);  permute_36 = None
        view_59 = torch.ops.aten.view.default(view_58, [256, 1024]);  view_58 = None
        permute_37 = torch.ops.aten.permute.default(arg62_1, [1, 0]);  arg62_1 = None
        addmm_21 = torch.ops.aten.addmm.default(arg63_1, view_59, permute_37);  arg63_1 = view_59 = permute_37 = None
        view_60 = torch.ops.aten.view.default(addmm_21, [2, 128, 1024]);  addmm_21 = None
        add_27 = torch.ops.aten.add.Tensor(add_24, view_60);  add_24 = view_60 = None
        var_mean_8 = torch.ops.aten.var_mean.correction(add_27, [2], correction = 0, keepdim = True)
        getitem_32 = var_mean_8[0]
        getitem_33 = var_mean_8[1];  var_mean_8 = None
        add_28 = torch.ops.aten.add.Tensor(getitem_32, 1e-05);  getitem_32 = None
        rsqrt_8 = torch.ops.aten.rsqrt.default(add_28);  add_28 = None
        sub_9 = torch.ops.aten.sub.Tensor(add_27, getitem_33);  getitem_33 = None
        mul_26 = torch.ops.aten.mul.Tensor(sub_9, rsqrt_8);  sub_9 = rsqrt_8 = None
        mul_27 = torch.ops.aten.mul.Tensor(mul_26, arg64_1);  mul_26 = arg64_1 = None
        add_29 = torch.ops.aten.add.Tensor(mul_27, arg65_1);  mul_27 = arg65_1 = None
        view_61 = torch.ops.aten.view.default(add_29, [256, 1024]);  add_29 = None
        permute_38 = torch.ops.aten.permute.default(arg66_1, [1, 0]);  arg66_1 = None
        addmm_22 = torch.ops.aten.addmm.default(arg67_1, view_61, permute_38);  arg67_1 = view_61 = permute_38 = None
        view_62 = torch.ops.aten.view.default(addmm_22, [2, 128, 4096]);  addmm_22 = None
        mul_28 = torch.ops.aten.mul.Tensor(view_62, 0.5)
        mul_29 = torch.ops.aten.mul.Tensor(view_62, 0.7071067811865476);  view_62 = None
        erf_3 = torch.ops.aten.erf.default(mul_29);  mul_29 = None
        add_30 = torch.ops.aten.add.Tensor(erf_3, 1);  erf_3 = None
        mul_30 = torch.ops.aten.mul.Tensor(mul_28, add_30);  mul_28 = add_30 = None
        view_63 = torch.ops.aten.view.default(mul_30, [256, 4096]);  mul_30 = None
        permute_39 = torch.ops.aten.permute.default(arg68_1, [1, 0]);  arg68_1 = None
        addmm_23 = torch.ops.aten.addmm.default(arg69_1, view_63, permute_39);  arg69_1 = view_63 = permute_39 = None
        view_64 = torch.ops.aten.view.default(addmm_23, [2, 128, 1024]);  addmm_23 = None
        add_31 = torch.ops.aten.add.Tensor(add_27, view_64);  add_27 = view_64 = None
        var_mean_9 = torch.ops.aten.var_mean.correction(add_31, [2], correction = 0, keepdim = True)
        getitem_34 = var_mean_9[0]
        getitem_35 = var_mean_9[1];  var_mean_9 = None
        add_32 = torch.ops.aten.add.Tensor(getitem_34, 1e-05);  getitem_34 = None
        rsqrt_9 = torch.ops.aten.rsqrt.default(add_32);  add_32 = None
        sub_10 = torch.ops.aten.sub.Tensor(add_31, getitem_35);  getitem_35 = None
        mul_31 = torch.ops.aten.mul.Tensor(sub_10, rsqrt_9);  sub_10 = rsqrt_9 = None
        mul_32 = torch.ops.aten.mul.Tensor(mul_31, arg70_1);  mul_31 = arg70_1 = None
        add_33 = torch.ops.aten.add.Tensor(mul_32, arg71_1);  mul_32 = arg71_1 = None
        view_65 = torch.ops.aten.view.default(add_33, [256, 1024])
        permute_40 = torch.ops.aten.permute.default(arg72_1, [1, 0]);  arg72_1 = None
        addmm_24 = torch.ops.aten.addmm.default(arg73_1, view_65, permute_40);  arg73_1 = view_65 = permute_40 = None
        view_66 = torch.ops.aten.view.default(addmm_24, [2, 128, 1024]);  addmm_24 = None
        view_67 = torch.ops.aten.view.default(view_66, [2, 128, -1, 64]);  view_66 = None
        permute_41 = torch.ops.aten.permute.default(view_67, [0, 2, 1, 3]);  view_67 = None
        view_68 = torch.ops.aten.view.default(add_33, [256, 1024])
        permute_42 = torch.ops.aten.permute.default(arg74_1, [1, 0]);  arg74_1 = None
        addmm_25 = torch.ops.aten.addmm.default(arg75_1, view_68, permute_42);  arg75_1 = view_68 = permute_42 = None
        view_69 = torch.ops.aten.view.default(addmm_25, [2, 128, 1024]);  addmm_25 = None
        view_70 = torch.ops.aten.view.default(add_33, [256, 1024]);  add_33 = None
        permute_43 = torch.ops.aten.permute.default(arg76_1, [1, 0]);  arg76_1 = None
        addmm_26 = torch.ops.aten.addmm.default(arg77_1, view_70, permute_43);  arg77_1 = view_70 = permute_43 = None
        view_71 = torch.ops.aten.view.default(addmm_26, [2, 128, 1024]);  addmm_26 = None
        view_72 = torch.ops.aten.view.default(view_69, [2, 128, -1, 64]);  view_69 = None
        permute_44 = torch.ops.aten.permute.default(view_72, [0, 2, 1, 3]);  view_72 = None
        view_73 = torch.ops.aten.view.default(view_71, [2, 128, -1, 64]);  view_71 = None
        permute_45 = torch.ops.aten.permute.default(view_73, [0, 2, 1, 3]);  view_73 = None
        expand_6 = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_4 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_41, permute_44, permute_45, expand_6, False, scale = 0.125);  permute_41 = permute_44 = permute_45 = expand_6 = None
        getitem_36 = _scaled_dot_product_efficient_attention_4[0];  _scaled_dot_product_efficient_attention_4 = None
        permute_46 = torch.ops.aten.permute.default(getitem_36, [0, 2, 1, 3]);  getitem_36 = None
        view_74 = torch.ops.aten.view.default(permute_46, [2, 128, -1]);  permute_46 = None
        view_75 = torch.ops.aten.view.default(view_74, [256, 1024]);  view_74 = None
        permute_47 = torch.ops.aten.permute.default(arg78_1, [1, 0]);  arg78_1 = None
        addmm_27 = torch.ops.aten.addmm.default(arg79_1, view_75, permute_47);  arg79_1 = view_75 = permute_47 = None
        view_76 = torch.ops.aten.view.default(addmm_27, [2, 128, 1024]);  addmm_27 = None
        add_34 = torch.ops.aten.add.Tensor(add_31, view_76);  add_31 = view_76 = None
        var_mean_10 = torch.ops.aten.var_mean.correction(add_34, [2], correction = 0, keepdim = True)
        getitem_40 = var_mean_10[0]
        getitem_41 = var_mean_10[1];  var_mean_10 = None
        add_35 = torch.ops.aten.add.Tensor(getitem_40, 1e-05);  getitem_40 = None
        rsqrt_10 = torch.ops.aten.rsqrt.default(add_35);  add_35 = None
        sub_11 = torch.ops.aten.sub.Tensor(add_34, getitem_41);  getitem_41 = None
        mul_33 = torch.ops.aten.mul.Tensor(sub_11, rsqrt_10);  sub_11 = rsqrt_10 = None
        mul_34 = torch.ops.aten.mul.Tensor(mul_33, arg80_1);  mul_33 = arg80_1 = None
        add_36 = torch.ops.aten.add.Tensor(mul_34, arg81_1);  mul_34 = arg81_1 = None
        view_77 = torch.ops.aten.view.default(add_36, [256, 1024]);  add_36 = None
        permute_48 = torch.ops.aten.permute.default(arg82_1, [1, 0]);  arg82_1 = None
        addmm_28 = torch.ops.aten.addmm.default(arg83_1, view_77, permute_48);  arg83_1 = view_77 = permute_48 = None
        view_78 = torch.ops.aten.view.default(addmm_28, [2, 128, 4096]);  addmm_28 = None
        mul_35 = torch.ops.aten.mul.Tensor(view_78, 0.5)
        mul_36 = torch.ops.aten.mul.Tensor(view_78, 0.7071067811865476);  view_78 = None
        erf_4 = torch.ops.aten.erf.default(mul_36);  mul_36 = None
        add_37 = torch.ops.aten.add.Tensor(erf_4, 1);  erf_4 = None
        mul_37 = torch.ops.aten.mul.Tensor(mul_35, add_37);  mul_35 = add_37 = None
        view_79 = torch.ops.aten.view.default(mul_37, [256, 4096]);  mul_37 = None
        permute_49 = torch.ops.aten.permute.default(arg84_1, [1, 0]);  arg84_1 = None
        addmm_29 = torch.ops.aten.addmm.default(arg85_1, view_79, permute_49);  arg85_1 = view_79 = permute_49 = None
        view_80 = torch.ops.aten.view.default(addmm_29, [2, 128, 1024]);  addmm_29 = None
        add_38 = torch.ops.aten.add.Tensor(add_34, view_80);  add_34 = view_80 = None
        var_mean_11 = torch.ops.aten.var_mean.correction(add_38, [2], correction = 0, keepdim = True)
        getitem_42 = var_mean_11[0]
        getitem_43 = var_mean_11[1];  var_mean_11 = None
        add_39 = torch.ops.aten.add.Tensor(getitem_42, 1e-05);  getitem_42 = None
        rsqrt_11 = torch.ops.aten.rsqrt.default(add_39);  add_39 = None
        sub_12 = torch.ops.aten.sub.Tensor(add_38, getitem_43);  getitem_43 = None
        mul_38 = torch.ops.aten.mul.Tensor(sub_12, rsqrt_11);  sub_12 = rsqrt_11 = None
        mul_39 = torch.ops.aten.mul.Tensor(mul_38, arg86_1);  mul_38 = arg86_1 = None
        add_40 = torch.ops.aten.add.Tensor(mul_39, arg87_1);  mul_39 = arg87_1 = None
        view_81 = torch.ops.aten.view.default(add_40, [256, 1024])
        permute_50 = torch.ops.aten.permute.default(arg88_1, [1, 0]);  arg88_1 = None
        addmm_30 = torch.ops.aten.addmm.default(arg89_1, view_81, permute_50);  arg89_1 = view_81 = permute_50 = None
        view_82 = torch.ops.aten.view.default(addmm_30, [2, 128, 1024]);  addmm_30 = None
        view_83 = torch.ops.aten.view.default(view_82, [2, 128, -1, 64]);  view_82 = None
        permute_51 = torch.ops.aten.permute.default(view_83, [0, 2, 1, 3]);  view_83 = None
        view_84 = torch.ops.aten.view.default(add_40, [256, 1024])
        permute_52 = torch.ops.aten.permute.default(arg90_1, [1, 0]);  arg90_1 = None
        addmm_31 = torch.ops.aten.addmm.default(arg91_1, view_84, permute_52);  arg91_1 = view_84 = permute_52 = None
        view_85 = torch.ops.aten.view.default(addmm_31, [2, 128, 1024]);  addmm_31 = None
        view_86 = torch.ops.aten.view.default(add_40, [256, 1024]);  add_40 = None
        permute_53 = torch.ops.aten.permute.default(arg92_1, [1, 0]);  arg92_1 = None
        addmm_32 = torch.ops.aten.addmm.default(arg93_1, view_86, permute_53);  arg93_1 = view_86 = permute_53 = None
        view_87 = torch.ops.aten.view.default(addmm_32, [2, 128, 1024]);  addmm_32 = None
        view_88 = torch.ops.aten.view.default(view_85, [2, 128, -1, 64]);  view_85 = None
        permute_54 = torch.ops.aten.permute.default(view_88, [0, 2, 1, 3]);  view_88 = None
        view_89 = torch.ops.aten.view.default(view_87, [2, 128, -1, 64]);  view_87 = None
        permute_55 = torch.ops.aten.permute.default(view_89, [0, 2, 1, 3]);  view_89 = None
        expand_7 = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_5 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_51, permute_54, permute_55, expand_7, False, scale = 0.125);  permute_51 = permute_54 = permute_55 = expand_7 = None
        getitem_44 = _scaled_dot_product_efficient_attention_5[0];  _scaled_dot_product_efficient_attention_5 = None
        permute_56 = torch.ops.aten.permute.default(getitem_44, [0, 2, 1, 3]);  getitem_44 = None
        view_90 = torch.ops.aten.view.default(permute_56, [2, 128, -1]);  permute_56 = None
        view_91 = torch.ops.aten.view.default(view_90, [256, 1024]);  view_90 = None
        permute_57 = torch.ops.aten.permute.default(arg94_1, [1, 0]);  arg94_1 = None
        addmm_33 = torch.ops.aten.addmm.default(arg95_1, view_91, permute_57);  arg95_1 = view_91 = permute_57 = None
        view_92 = torch.ops.aten.view.default(addmm_33, [2, 128, 1024]);  addmm_33 = None
        add_41 = torch.ops.aten.add.Tensor(add_38, view_92);  add_38 = view_92 = None
        var_mean_12 = torch.ops.aten.var_mean.correction(add_41, [2], correction = 0, keepdim = True)
        getitem_48 = var_mean_12[0]
        getitem_49 = var_mean_12[1];  var_mean_12 = None
        add_42 = torch.ops.aten.add.Tensor(getitem_48, 1e-05);  getitem_48 = None
        rsqrt_12 = torch.ops.aten.rsqrt.default(add_42);  add_42 = None
        sub_13 = torch.ops.aten.sub.Tensor(add_41, getitem_49);  getitem_49 = None
        mul_40 = torch.ops.aten.mul.Tensor(sub_13, rsqrt_12);  sub_13 = rsqrt_12 = None
        mul_41 = torch.ops.aten.mul.Tensor(mul_40, arg96_1);  mul_40 = arg96_1 = None
        add_43 = torch.ops.aten.add.Tensor(mul_41, arg97_1);  mul_41 = arg97_1 = None
        view_93 = torch.ops.aten.view.default(add_43, [256, 1024]);  add_43 = None
        permute_58 = torch.ops.aten.permute.default(arg98_1, [1, 0]);  arg98_1 = None
        addmm_34 = torch.ops.aten.addmm.default(arg99_1, view_93, permute_58);  arg99_1 = view_93 = permute_58 = None
        view_94 = torch.ops.aten.view.default(addmm_34, [2, 128, 4096]);  addmm_34 = None
        mul_42 = torch.ops.aten.mul.Tensor(view_94, 0.5)
        mul_43 = torch.ops.aten.mul.Tensor(view_94, 0.7071067811865476);  view_94 = None
        erf_5 = torch.ops.aten.erf.default(mul_43);  mul_43 = None
        add_44 = torch.ops.aten.add.Tensor(erf_5, 1);  erf_5 = None
        mul_44 = torch.ops.aten.mul.Tensor(mul_42, add_44);  mul_42 = add_44 = None
        view_95 = torch.ops.aten.view.default(mul_44, [256, 4096]);  mul_44 = None
        permute_59 = torch.ops.aten.permute.default(arg100_1, [1, 0]);  arg100_1 = None
        addmm_35 = torch.ops.aten.addmm.default(arg101_1, view_95, permute_59);  arg101_1 = view_95 = permute_59 = None
        view_96 = torch.ops.aten.view.default(addmm_35, [2, 128, 1024]);  addmm_35 = None
        add_45 = torch.ops.aten.add.Tensor(add_41, view_96);  add_41 = view_96 = None
        var_mean_13 = torch.ops.aten.var_mean.correction(add_45, [2], correction = 0, keepdim = True)
        getitem_50 = var_mean_13[0]
        getitem_51 = var_mean_13[1];  var_mean_13 = None
        add_46 = torch.ops.aten.add.Tensor(getitem_50, 1e-05);  getitem_50 = None
        rsqrt_13 = torch.ops.aten.rsqrt.default(add_46);  add_46 = None
        sub_14 = torch.ops.aten.sub.Tensor(add_45, getitem_51);  getitem_51 = None
        mul_45 = torch.ops.aten.mul.Tensor(sub_14, rsqrt_13);  sub_14 = rsqrt_13 = None
        mul_46 = torch.ops.aten.mul.Tensor(mul_45, arg102_1);  mul_45 = arg102_1 = None
        add_47 = torch.ops.aten.add.Tensor(mul_46, arg103_1);  mul_46 = arg103_1 = None
        view_97 = torch.ops.aten.view.default(add_47, [256, 1024])
        permute_60 = torch.ops.aten.permute.default(arg104_1, [1, 0]);  arg104_1 = None
        addmm_36 = torch.ops.aten.addmm.default(arg105_1, view_97, permute_60);  arg105_1 = view_97 = permute_60 = None
        view_98 = torch.ops.aten.view.default(addmm_36, [2, 128, 1024]);  addmm_36 = None
        view_99 = torch.ops.aten.view.default(view_98, [2, 128, -1, 64]);  view_98 = None
        permute_61 = torch.ops.aten.permute.default(view_99, [0, 2, 1, 3]);  view_99 = None
        view_100 = torch.ops.aten.view.default(add_47, [256, 1024])
        permute_62 = torch.ops.aten.permute.default(arg106_1, [1, 0]);  arg106_1 = None
        addmm_37 = torch.ops.aten.addmm.default(arg107_1, view_100, permute_62);  arg107_1 = view_100 = permute_62 = None
        view_101 = torch.ops.aten.view.default(addmm_37, [2, 128, 1024]);  addmm_37 = None
        view_102 = torch.ops.aten.view.default(add_47, [256, 1024]);  add_47 = None
        permute_63 = torch.ops.aten.permute.default(arg108_1, [1, 0]);  arg108_1 = None
        addmm_38 = torch.ops.aten.addmm.default(arg109_1, view_102, permute_63);  arg109_1 = view_102 = permute_63 = None
        view_103 = torch.ops.aten.view.default(addmm_38, [2, 128, 1024]);  addmm_38 = None
        view_104 = torch.ops.aten.view.default(view_101, [2, 128, -1, 64]);  view_101 = None
        permute_64 = torch.ops.aten.permute.default(view_104, [0, 2, 1, 3]);  view_104 = None
        view_105 = torch.ops.aten.view.default(view_103, [2, 128, -1, 64]);  view_103 = None
        permute_65 = torch.ops.aten.permute.default(view_105, [0, 2, 1, 3]);  view_105 = None
        expand_8 = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_6 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_61, permute_64, permute_65, expand_8, False, scale = 0.125);  permute_61 = permute_64 = permute_65 = expand_8 = None
        getitem_52 = _scaled_dot_product_efficient_attention_6[0];  _scaled_dot_product_efficient_attention_6 = None
        permute_66 = torch.ops.aten.permute.default(getitem_52, [0, 2, 1, 3]);  getitem_52 = None
        view_106 = torch.ops.aten.view.default(permute_66, [2, 128, -1]);  permute_66 = None
        view_107 = torch.ops.aten.view.default(view_106, [256, 1024]);  view_106 = None
        permute_67 = torch.ops.aten.permute.default(arg110_1, [1, 0]);  arg110_1 = None
        addmm_39 = torch.ops.aten.addmm.default(arg111_1, view_107, permute_67);  arg111_1 = view_107 = permute_67 = None
        view_108 = torch.ops.aten.view.default(addmm_39, [2, 128, 1024]);  addmm_39 = None
        add_48 = torch.ops.aten.add.Tensor(add_45, view_108);  add_45 = view_108 = None
        var_mean_14 = torch.ops.aten.var_mean.correction(add_48, [2], correction = 0, keepdim = True)
        getitem_56 = var_mean_14[0]
        getitem_57 = var_mean_14[1];  var_mean_14 = None
        add_49 = torch.ops.aten.add.Tensor(getitem_56, 1e-05);  getitem_56 = None
        rsqrt_14 = torch.ops.aten.rsqrt.default(add_49);  add_49 = None
        sub_15 = torch.ops.aten.sub.Tensor(add_48, getitem_57);  getitem_57 = None
        mul_47 = torch.ops.aten.mul.Tensor(sub_15, rsqrt_14);  sub_15 = rsqrt_14 = None
        mul_48 = torch.ops.aten.mul.Tensor(mul_47, arg112_1);  mul_47 = arg112_1 = None
        add_50 = torch.ops.aten.add.Tensor(mul_48, arg113_1);  mul_48 = arg113_1 = None
        view_109 = torch.ops.aten.view.default(add_50, [256, 1024]);  add_50 = None
        permute_68 = torch.ops.aten.permute.default(arg114_1, [1, 0]);  arg114_1 = None
        addmm_40 = torch.ops.aten.addmm.default(arg115_1, view_109, permute_68);  arg115_1 = view_109 = permute_68 = None
        view_110 = torch.ops.aten.view.default(addmm_40, [2, 128, 4096]);  addmm_40 = None
        mul_49 = torch.ops.aten.mul.Tensor(view_110, 0.5)
        mul_50 = torch.ops.aten.mul.Tensor(view_110, 0.7071067811865476);  view_110 = None
        erf_6 = torch.ops.aten.erf.default(mul_50);  mul_50 = None
        add_51 = torch.ops.aten.add.Tensor(erf_6, 1);  erf_6 = None
        mul_51 = torch.ops.aten.mul.Tensor(mul_49, add_51);  mul_49 = add_51 = None
        view_111 = torch.ops.aten.view.default(mul_51, [256, 4096]);  mul_51 = None
        permute_69 = torch.ops.aten.permute.default(arg116_1, [1, 0]);  arg116_1 = None
        addmm_41 = torch.ops.aten.addmm.default(arg117_1, view_111, permute_69);  arg117_1 = view_111 = permute_69 = None
        view_112 = torch.ops.aten.view.default(addmm_41, [2, 128, 1024]);  addmm_41 = None
        add_52 = torch.ops.aten.add.Tensor(add_48, view_112);  add_48 = view_112 = None
        var_mean_15 = torch.ops.aten.var_mean.correction(add_52, [2], correction = 0, keepdim = True)
        getitem_58 = var_mean_15[0]
        getitem_59 = var_mean_15[1];  var_mean_15 = None
        add_53 = torch.ops.aten.add.Tensor(getitem_58, 1e-05);  getitem_58 = None
        rsqrt_15 = torch.ops.aten.rsqrt.default(add_53);  add_53 = None
        sub_16 = torch.ops.aten.sub.Tensor(add_52, getitem_59);  getitem_59 = None
        mul_52 = torch.ops.aten.mul.Tensor(sub_16, rsqrt_15);  sub_16 = rsqrt_15 = None
        mul_53 = torch.ops.aten.mul.Tensor(mul_52, arg118_1);  mul_52 = arg118_1 = None
        add_54 = torch.ops.aten.add.Tensor(mul_53, arg119_1);  mul_53 = arg119_1 = None
        view_113 = torch.ops.aten.view.default(add_54, [256, 1024])
        permute_70 = torch.ops.aten.permute.default(arg120_1, [1, 0]);  arg120_1 = None
        addmm_42 = torch.ops.aten.addmm.default(arg121_1, view_113, permute_70);  arg121_1 = view_113 = permute_70 = None
        view_114 = torch.ops.aten.view.default(addmm_42, [2, 128, 1024]);  addmm_42 = None
        view_115 = torch.ops.aten.view.default(view_114, [2, 128, -1, 64]);  view_114 = None
        permute_71 = torch.ops.aten.permute.default(view_115, [0, 2, 1, 3]);  view_115 = None
        view_116 = torch.ops.aten.view.default(add_54, [256, 1024])
        permute_72 = torch.ops.aten.permute.default(arg122_1, [1, 0]);  arg122_1 = None
        addmm_43 = torch.ops.aten.addmm.default(arg123_1, view_116, permute_72);  arg123_1 = view_116 = permute_72 = None
        view_117 = torch.ops.aten.view.default(addmm_43, [2, 128, 1024]);  addmm_43 = None
        view_118 = torch.ops.aten.view.default(add_54, [256, 1024]);  add_54 = None
        permute_73 = torch.ops.aten.permute.default(arg124_1, [1, 0]);  arg124_1 = None
        addmm_44 = torch.ops.aten.addmm.default(arg125_1, view_118, permute_73);  arg125_1 = view_118 = permute_73 = None
        view_119 = torch.ops.aten.view.default(addmm_44, [2, 128, 1024]);  addmm_44 = None
        view_120 = torch.ops.aten.view.default(view_117, [2, 128, -1, 64]);  view_117 = None
        permute_74 = torch.ops.aten.permute.default(view_120, [0, 2, 1, 3]);  view_120 = None
        view_121 = torch.ops.aten.view.default(view_119, [2, 128, -1, 64]);  view_119 = None
        permute_75 = torch.ops.aten.permute.default(view_121, [0, 2, 1, 3]);  view_121 = None
        expand_9 = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_7 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_71, permute_74, permute_75, expand_9, False, scale = 0.125);  permute_71 = permute_74 = permute_75 = expand_9 = None
        getitem_60 = _scaled_dot_product_efficient_attention_7[0];  _scaled_dot_product_efficient_attention_7 = None
        permute_76 = torch.ops.aten.permute.default(getitem_60, [0, 2, 1, 3]);  getitem_60 = None
        view_122 = torch.ops.aten.view.default(permute_76, [2, 128, -1]);  permute_76 = None
        view_123 = torch.ops.aten.view.default(view_122, [256, 1024]);  view_122 = None
        permute_77 = torch.ops.aten.permute.default(arg126_1, [1, 0]);  arg126_1 = None
        addmm_45 = torch.ops.aten.addmm.default(arg127_1, view_123, permute_77);  arg127_1 = view_123 = permute_77 = None
        view_124 = torch.ops.aten.view.default(addmm_45, [2, 128, 1024]);  addmm_45 = None
        add_55 = torch.ops.aten.add.Tensor(add_52, view_124);  add_52 = view_124 = None
        var_mean_16 = torch.ops.aten.var_mean.correction(add_55, [2], correction = 0, keepdim = True)
        getitem_64 = var_mean_16[0]
        getitem_65 = var_mean_16[1];  var_mean_16 = None
        add_56 = torch.ops.aten.add.Tensor(getitem_64, 1e-05);  getitem_64 = None
        rsqrt_16 = torch.ops.aten.rsqrt.default(add_56);  add_56 = None
        sub_17 = torch.ops.aten.sub.Tensor(add_55, getitem_65);  getitem_65 = None
        mul_54 = torch.ops.aten.mul.Tensor(sub_17, rsqrt_16);  sub_17 = rsqrt_16 = None
        mul_55 = torch.ops.aten.mul.Tensor(mul_54, arg128_1);  mul_54 = arg128_1 = None
        add_57 = torch.ops.aten.add.Tensor(mul_55, arg129_1);  mul_55 = arg129_1 = None
        view_125 = torch.ops.aten.view.default(add_57, [256, 1024]);  add_57 = None
        permute_78 = torch.ops.aten.permute.default(arg130_1, [1, 0]);  arg130_1 = None
        addmm_46 = torch.ops.aten.addmm.default(arg131_1, view_125, permute_78);  arg131_1 = view_125 = permute_78 = None
        view_126 = torch.ops.aten.view.default(addmm_46, [2, 128, 4096]);  addmm_46 = None
        mul_56 = torch.ops.aten.mul.Tensor(view_126, 0.5)
        mul_57 = torch.ops.aten.mul.Tensor(view_126, 0.7071067811865476);  view_126 = None
        erf_7 = torch.ops.aten.erf.default(mul_57);  mul_57 = None
        add_58 = torch.ops.aten.add.Tensor(erf_7, 1);  erf_7 = None
        mul_58 = torch.ops.aten.mul.Tensor(mul_56, add_58);  mul_56 = add_58 = None
        view_127 = torch.ops.aten.view.default(mul_58, [256, 4096]);  mul_58 = None
        permute_79 = torch.ops.aten.permute.default(arg132_1, [1, 0]);  arg132_1 = None
        addmm_47 = torch.ops.aten.addmm.default(arg133_1, view_127, permute_79);  arg133_1 = view_127 = permute_79 = None
        view_128 = torch.ops.aten.view.default(addmm_47, [2, 128, 1024]);  addmm_47 = None
        add_59 = torch.ops.aten.add.Tensor(add_55, view_128);  add_55 = view_128 = None
        var_mean_17 = torch.ops.aten.var_mean.correction(add_59, [2], correction = 0, keepdim = True)
        getitem_66 = var_mean_17[0]
        getitem_67 = var_mean_17[1];  var_mean_17 = None
        add_60 = torch.ops.aten.add.Tensor(getitem_66, 1e-05);  getitem_66 = None
        rsqrt_17 = torch.ops.aten.rsqrt.default(add_60);  add_60 = None
        sub_18 = torch.ops.aten.sub.Tensor(add_59, getitem_67);  getitem_67 = None
        mul_59 = torch.ops.aten.mul.Tensor(sub_18, rsqrt_17);  sub_18 = rsqrt_17 = None
        mul_60 = torch.ops.aten.mul.Tensor(mul_59, arg134_1);  mul_59 = arg134_1 = None
        add_61 = torch.ops.aten.add.Tensor(mul_60, arg135_1);  mul_60 = arg135_1 = None
        view_129 = torch.ops.aten.view.default(add_61, [256, 1024])
        permute_80 = torch.ops.aten.permute.default(arg136_1, [1, 0]);  arg136_1 = None
        addmm_48 = torch.ops.aten.addmm.default(arg137_1, view_129, permute_80);  arg137_1 = view_129 = permute_80 = None
        view_130 = torch.ops.aten.view.default(addmm_48, [2, 128, 1024]);  addmm_48 = None
        view_131 = torch.ops.aten.view.default(view_130, [2, 128, -1, 64]);  view_130 = None
        permute_81 = torch.ops.aten.permute.default(view_131, [0, 2, 1, 3]);  view_131 = None
        view_132 = torch.ops.aten.view.default(add_61, [256, 1024])
        permute_82 = torch.ops.aten.permute.default(arg138_1, [1, 0]);  arg138_1 = None
        addmm_49 = torch.ops.aten.addmm.default(arg139_1, view_132, permute_82);  arg139_1 = view_132 = permute_82 = None
        view_133 = torch.ops.aten.view.default(addmm_49, [2, 128, 1024]);  addmm_49 = None
        view_134 = torch.ops.aten.view.default(add_61, [256, 1024]);  add_61 = None
        permute_83 = torch.ops.aten.permute.default(arg140_1, [1, 0]);  arg140_1 = None
        addmm_50 = torch.ops.aten.addmm.default(arg141_1, view_134, permute_83);  arg141_1 = view_134 = permute_83 = None
        view_135 = torch.ops.aten.view.default(addmm_50, [2, 128, 1024]);  addmm_50 = None
        view_136 = torch.ops.aten.view.default(view_133, [2, 128, -1, 64]);  view_133 = None
        permute_84 = torch.ops.aten.permute.default(view_136, [0, 2, 1, 3]);  view_136 = None
        view_137 = torch.ops.aten.view.default(view_135, [2, 128, -1, 64]);  view_135 = None
        permute_85 = torch.ops.aten.permute.default(view_137, [0, 2, 1, 3]);  view_137 = None
        expand_10 = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_8 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_81, permute_84, permute_85, expand_10, False, scale = 0.125);  permute_81 = permute_84 = permute_85 = expand_10 = None
        getitem_68 = _scaled_dot_product_efficient_attention_8[0];  _scaled_dot_product_efficient_attention_8 = None
        permute_86 = torch.ops.aten.permute.default(getitem_68, [0, 2, 1, 3]);  getitem_68 = None
        view_138 = torch.ops.aten.view.default(permute_86, [2, 128, -1]);  permute_86 = None
        view_139 = torch.ops.aten.view.default(view_138, [256, 1024]);  view_138 = None
        permute_87 = torch.ops.aten.permute.default(arg142_1, [1, 0]);  arg142_1 = None
        addmm_51 = torch.ops.aten.addmm.default(arg143_1, view_139, permute_87);  arg143_1 = view_139 = permute_87 = None
        view_140 = torch.ops.aten.view.default(addmm_51, [2, 128, 1024]);  addmm_51 = None
        add_62 = torch.ops.aten.add.Tensor(add_59, view_140);  add_59 = view_140 = None
        var_mean_18 = torch.ops.aten.var_mean.correction(add_62, [2], correction = 0, keepdim = True)
        getitem_72 = var_mean_18[0]
        getitem_73 = var_mean_18[1];  var_mean_18 = None
        add_63 = torch.ops.aten.add.Tensor(getitem_72, 1e-05);  getitem_72 = None
        rsqrt_18 = torch.ops.aten.rsqrt.default(add_63);  add_63 = None
        sub_19 = torch.ops.aten.sub.Tensor(add_62, getitem_73);  getitem_73 = None
        mul_61 = torch.ops.aten.mul.Tensor(sub_19, rsqrt_18);  sub_19 = rsqrt_18 = None
        mul_62 = torch.ops.aten.mul.Tensor(mul_61, arg144_1);  mul_61 = arg144_1 = None
        add_64 = torch.ops.aten.add.Tensor(mul_62, arg145_1);  mul_62 = arg145_1 = None
        view_141 = torch.ops.aten.view.default(add_64, [256, 1024]);  add_64 = None
        permute_88 = torch.ops.aten.permute.default(arg146_1, [1, 0]);  arg146_1 = None
        addmm_52 = torch.ops.aten.addmm.default(arg147_1, view_141, permute_88);  arg147_1 = view_141 = permute_88 = None
        view_142 = torch.ops.aten.view.default(addmm_52, [2, 128, 4096]);  addmm_52 = None
        mul_63 = torch.ops.aten.mul.Tensor(view_142, 0.5)
        mul_64 = torch.ops.aten.mul.Tensor(view_142, 0.7071067811865476);  view_142 = None
        erf_8 = torch.ops.aten.erf.default(mul_64);  mul_64 = None
        add_65 = torch.ops.aten.add.Tensor(erf_8, 1);  erf_8 = None
        mul_65 = torch.ops.aten.mul.Tensor(mul_63, add_65);  mul_63 = add_65 = None
        view_143 = torch.ops.aten.view.default(mul_65, [256, 4096]);  mul_65 = None
        permute_89 = torch.ops.aten.permute.default(arg148_1, [1, 0]);  arg148_1 = None
        addmm_53 = torch.ops.aten.addmm.default(arg149_1, view_143, permute_89);  arg149_1 = view_143 = permute_89 = None
        view_144 = torch.ops.aten.view.default(addmm_53, [2, 128, 1024]);  addmm_53 = None
        add_66 = torch.ops.aten.add.Tensor(add_62, view_144);  add_62 = view_144 = None
        var_mean_19 = torch.ops.aten.var_mean.correction(add_66, [2], correction = 0, keepdim = True)
        getitem_74 = var_mean_19[0]
        getitem_75 = var_mean_19[1];  var_mean_19 = None
        add_67 = torch.ops.aten.add.Tensor(getitem_74, 1e-05);  getitem_74 = None
        rsqrt_19 = torch.ops.aten.rsqrt.default(add_67);  add_67 = None
        sub_20 = torch.ops.aten.sub.Tensor(add_66, getitem_75);  getitem_75 = None
        mul_66 = torch.ops.aten.mul.Tensor(sub_20, rsqrt_19);  sub_20 = rsqrt_19 = None
        mul_67 = torch.ops.aten.mul.Tensor(mul_66, arg150_1);  mul_66 = arg150_1 = None
        add_68 = torch.ops.aten.add.Tensor(mul_67, arg151_1);  mul_67 = arg151_1 = None
        view_145 = torch.ops.aten.view.default(add_68, [256, 1024])
        permute_90 = torch.ops.aten.permute.default(arg152_1, [1, 0]);  arg152_1 = None
        addmm_54 = torch.ops.aten.addmm.default(arg153_1, view_145, permute_90);  arg153_1 = view_145 = permute_90 = None
        view_146 = torch.ops.aten.view.default(addmm_54, [2, 128, 1024]);  addmm_54 = None
        view_147 = torch.ops.aten.view.default(view_146, [2, 128, -1, 64]);  view_146 = None
        permute_91 = torch.ops.aten.permute.default(view_147, [0, 2, 1, 3]);  view_147 = None
        view_148 = torch.ops.aten.view.default(add_68, [256, 1024])
        permute_92 = torch.ops.aten.permute.default(arg154_1, [1, 0]);  arg154_1 = None
        addmm_55 = torch.ops.aten.addmm.default(arg155_1, view_148, permute_92);  arg155_1 = view_148 = permute_92 = None
        view_149 = torch.ops.aten.view.default(addmm_55, [2, 128, 1024]);  addmm_55 = None
        view_150 = torch.ops.aten.view.default(add_68, [256, 1024]);  add_68 = None
        permute_93 = torch.ops.aten.permute.default(arg156_1, [1, 0]);  arg156_1 = None
        addmm_56 = torch.ops.aten.addmm.default(arg157_1, view_150, permute_93);  arg157_1 = view_150 = permute_93 = None
        view_151 = torch.ops.aten.view.default(addmm_56, [2, 128, 1024]);  addmm_56 = None
        view_152 = torch.ops.aten.view.default(view_149, [2, 128, -1, 64]);  view_149 = None
        permute_94 = torch.ops.aten.permute.default(view_152, [0, 2, 1, 3]);  view_152 = None
        view_153 = torch.ops.aten.view.default(view_151, [2, 128, -1, 64]);  view_151 = None
        permute_95 = torch.ops.aten.permute.default(view_153, [0, 2, 1, 3]);  view_153 = None
        expand_11 = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_9 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_91, permute_94, permute_95, expand_11, False, scale = 0.125);  permute_91 = permute_94 = permute_95 = expand_11 = None
        getitem_76 = _scaled_dot_product_efficient_attention_9[0];  _scaled_dot_product_efficient_attention_9 = None
        permute_96 = torch.ops.aten.permute.default(getitem_76, [0, 2, 1, 3]);  getitem_76 = None
        view_154 = torch.ops.aten.view.default(permute_96, [2, 128, -1]);  permute_96 = None
        view_155 = torch.ops.aten.view.default(view_154, [256, 1024]);  view_154 = None
        permute_97 = torch.ops.aten.permute.default(arg158_1, [1, 0]);  arg158_1 = None
        addmm_57 = torch.ops.aten.addmm.default(arg159_1, view_155, permute_97);  arg159_1 = view_155 = permute_97 = None
        view_156 = torch.ops.aten.view.default(addmm_57, [2, 128, 1024]);  addmm_57 = None
        add_69 = torch.ops.aten.add.Tensor(add_66, view_156);  add_66 = view_156 = None
        var_mean_20 = torch.ops.aten.var_mean.correction(add_69, [2], correction = 0, keepdim = True)
        getitem_80 = var_mean_20[0]
        getitem_81 = var_mean_20[1];  var_mean_20 = None
        add_70 = torch.ops.aten.add.Tensor(getitem_80, 1e-05);  getitem_80 = None
        rsqrt_20 = torch.ops.aten.rsqrt.default(add_70);  add_70 = None
        sub_21 = torch.ops.aten.sub.Tensor(add_69, getitem_81);  getitem_81 = None
        mul_68 = torch.ops.aten.mul.Tensor(sub_21, rsqrt_20);  sub_21 = rsqrt_20 = None
        mul_69 = torch.ops.aten.mul.Tensor(mul_68, arg160_1);  mul_68 = arg160_1 = None
        add_71 = torch.ops.aten.add.Tensor(mul_69, arg161_1);  mul_69 = arg161_1 = None
        view_157 = torch.ops.aten.view.default(add_71, [256, 1024]);  add_71 = None
        permute_98 = torch.ops.aten.permute.default(arg162_1, [1, 0]);  arg162_1 = None
        addmm_58 = torch.ops.aten.addmm.default(arg163_1, view_157, permute_98);  arg163_1 = view_157 = permute_98 = None
        view_158 = torch.ops.aten.view.default(addmm_58, [2, 128, 4096]);  addmm_58 = None
        mul_70 = torch.ops.aten.mul.Tensor(view_158, 0.5)
        mul_71 = torch.ops.aten.mul.Tensor(view_158, 0.7071067811865476);  view_158 = None
        erf_9 = torch.ops.aten.erf.default(mul_71);  mul_71 = None
        add_72 = torch.ops.aten.add.Tensor(erf_9, 1);  erf_9 = None
        mul_72 = torch.ops.aten.mul.Tensor(mul_70, add_72);  mul_70 = add_72 = None
        view_159 = torch.ops.aten.view.default(mul_72, [256, 4096]);  mul_72 = None
        permute_99 = torch.ops.aten.permute.default(arg164_1, [1, 0]);  arg164_1 = None
        addmm_59 = torch.ops.aten.addmm.default(arg165_1, view_159, permute_99);  arg165_1 = view_159 = permute_99 = None
        view_160 = torch.ops.aten.view.default(addmm_59, [2, 128, 1024]);  addmm_59 = None
        add_73 = torch.ops.aten.add.Tensor(add_69, view_160);  add_69 = view_160 = None
        var_mean_21 = torch.ops.aten.var_mean.correction(add_73, [2], correction = 0, keepdim = True)
        getitem_82 = var_mean_21[0]
        getitem_83 = var_mean_21[1];  var_mean_21 = None
        add_74 = torch.ops.aten.add.Tensor(getitem_82, 1e-05);  getitem_82 = None
        rsqrt_21 = torch.ops.aten.rsqrt.default(add_74);  add_74 = None
        sub_22 = torch.ops.aten.sub.Tensor(add_73, getitem_83);  getitem_83 = None
        mul_73 = torch.ops.aten.mul.Tensor(sub_22, rsqrt_21);  sub_22 = rsqrt_21 = None
        mul_74 = torch.ops.aten.mul.Tensor(mul_73, arg166_1);  mul_73 = arg166_1 = None
        add_75 = torch.ops.aten.add.Tensor(mul_74, arg167_1);  mul_74 = arg167_1 = None
        view_161 = torch.ops.aten.view.default(add_75, [256, 1024])
        permute_100 = torch.ops.aten.permute.default(arg168_1, [1, 0]);  arg168_1 = None
        addmm_60 = torch.ops.aten.addmm.default(arg169_1, view_161, permute_100);  arg169_1 = view_161 = permute_100 = None
        view_162 = torch.ops.aten.view.default(addmm_60, [2, 128, 1024]);  addmm_60 = None
        view_163 = torch.ops.aten.view.default(view_162, [2, 128, -1, 64]);  view_162 = None
        permute_101 = torch.ops.aten.permute.default(view_163, [0, 2, 1, 3]);  view_163 = None
        view_164 = torch.ops.aten.view.default(add_75, [256, 1024])
        permute_102 = torch.ops.aten.permute.default(arg170_1, [1, 0]);  arg170_1 = None
        addmm_61 = torch.ops.aten.addmm.default(arg171_1, view_164, permute_102);  arg171_1 = view_164 = permute_102 = None
        view_165 = torch.ops.aten.view.default(addmm_61, [2, 128, 1024]);  addmm_61 = None
        view_166 = torch.ops.aten.view.default(add_75, [256, 1024]);  add_75 = None
        permute_103 = torch.ops.aten.permute.default(arg172_1, [1, 0]);  arg172_1 = None
        addmm_62 = torch.ops.aten.addmm.default(arg173_1, view_166, permute_103);  arg173_1 = view_166 = permute_103 = None
        view_167 = torch.ops.aten.view.default(addmm_62, [2, 128, 1024]);  addmm_62 = None
        view_168 = torch.ops.aten.view.default(view_165, [2, 128, -1, 64]);  view_165 = None
        permute_104 = torch.ops.aten.permute.default(view_168, [0, 2, 1, 3]);  view_168 = None
        view_169 = torch.ops.aten.view.default(view_167, [2, 128, -1, 64]);  view_167 = None
        permute_105 = torch.ops.aten.permute.default(view_169, [0, 2, 1, 3]);  view_169 = None
        expand_12 = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_10 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_101, permute_104, permute_105, expand_12, False, scale = 0.125);  permute_101 = permute_104 = permute_105 = expand_12 = None
        getitem_84 = _scaled_dot_product_efficient_attention_10[0];  _scaled_dot_product_efficient_attention_10 = None
        permute_106 = torch.ops.aten.permute.default(getitem_84, [0, 2, 1, 3]);  getitem_84 = None
        view_170 = torch.ops.aten.view.default(permute_106, [2, 128, -1]);  permute_106 = None
        view_171 = torch.ops.aten.view.default(view_170, [256, 1024]);  view_170 = None
        permute_107 = torch.ops.aten.permute.default(arg174_1, [1, 0]);  arg174_1 = None
        addmm_63 = torch.ops.aten.addmm.default(arg175_1, view_171, permute_107);  arg175_1 = view_171 = permute_107 = None
        view_172 = torch.ops.aten.view.default(addmm_63, [2, 128, 1024]);  addmm_63 = None
        add_76 = torch.ops.aten.add.Tensor(add_73, view_172);  add_73 = view_172 = None
        var_mean_22 = torch.ops.aten.var_mean.correction(add_76, [2], correction = 0, keepdim = True)
        getitem_88 = var_mean_22[0]
        getitem_89 = var_mean_22[1];  var_mean_22 = None
        add_77 = torch.ops.aten.add.Tensor(getitem_88, 1e-05);  getitem_88 = None
        rsqrt_22 = torch.ops.aten.rsqrt.default(add_77);  add_77 = None
        sub_23 = torch.ops.aten.sub.Tensor(add_76, getitem_89);  getitem_89 = None
        mul_75 = torch.ops.aten.mul.Tensor(sub_23, rsqrt_22);  sub_23 = rsqrt_22 = None
        mul_76 = torch.ops.aten.mul.Tensor(mul_75, arg176_1);  mul_75 = arg176_1 = None
        add_78 = torch.ops.aten.add.Tensor(mul_76, arg177_1);  mul_76 = arg177_1 = None
        view_173 = torch.ops.aten.view.default(add_78, [256, 1024]);  add_78 = None
        permute_108 = torch.ops.aten.permute.default(arg178_1, [1, 0]);  arg178_1 = None
        addmm_64 = torch.ops.aten.addmm.default(arg179_1, view_173, permute_108);  arg179_1 = view_173 = permute_108 = None
        view_174 = torch.ops.aten.view.default(addmm_64, [2, 128, 4096]);  addmm_64 = None
        mul_77 = torch.ops.aten.mul.Tensor(view_174, 0.5)
        mul_78 = torch.ops.aten.mul.Tensor(view_174, 0.7071067811865476);  view_174 = None
        erf_10 = torch.ops.aten.erf.default(mul_78);  mul_78 = None
        add_79 = torch.ops.aten.add.Tensor(erf_10, 1);  erf_10 = None
        mul_79 = torch.ops.aten.mul.Tensor(mul_77, add_79);  mul_77 = add_79 = None
        view_175 = torch.ops.aten.view.default(mul_79, [256, 4096]);  mul_79 = None
        permute_109 = torch.ops.aten.permute.default(arg180_1, [1, 0]);  arg180_1 = None
        addmm_65 = torch.ops.aten.addmm.default(arg181_1, view_175, permute_109);  arg181_1 = view_175 = permute_109 = None
        view_176 = torch.ops.aten.view.default(addmm_65, [2, 128, 1024]);  addmm_65 = None
        add_80 = torch.ops.aten.add.Tensor(add_76, view_176);  add_76 = view_176 = None
        var_mean_23 = torch.ops.aten.var_mean.correction(add_80, [2], correction = 0, keepdim = True)
        getitem_90 = var_mean_23[0]
        getitem_91 = var_mean_23[1];  var_mean_23 = None
        add_81 = torch.ops.aten.add.Tensor(getitem_90, 1e-05);  getitem_90 = None
        rsqrt_23 = torch.ops.aten.rsqrt.default(add_81);  add_81 = None
        sub_24 = torch.ops.aten.sub.Tensor(add_80, getitem_91);  getitem_91 = None
        mul_80 = torch.ops.aten.mul.Tensor(sub_24, rsqrt_23);  sub_24 = rsqrt_23 = None
        mul_81 = torch.ops.aten.mul.Tensor(mul_80, arg182_1);  mul_80 = arg182_1 = None
        add_82 = torch.ops.aten.add.Tensor(mul_81, arg183_1);  mul_81 = arg183_1 = None
        view_177 = torch.ops.aten.view.default(add_82, [256, 1024])
        permute_110 = torch.ops.aten.permute.default(arg184_1, [1, 0]);  arg184_1 = None
        addmm_66 = torch.ops.aten.addmm.default(arg185_1, view_177, permute_110);  arg185_1 = view_177 = permute_110 = None
        view_178 = torch.ops.aten.view.default(addmm_66, [2, 128, 1024]);  addmm_66 = None
        view_179 = torch.ops.aten.view.default(view_178, [2, 128, -1, 64]);  view_178 = None
        permute_111 = torch.ops.aten.permute.default(view_179, [0, 2, 1, 3]);  view_179 = None
        view_180 = torch.ops.aten.view.default(add_82, [256, 1024])
        permute_112 = torch.ops.aten.permute.default(arg186_1, [1, 0]);  arg186_1 = None
        addmm_67 = torch.ops.aten.addmm.default(arg187_1, view_180, permute_112);  arg187_1 = view_180 = permute_112 = None
        view_181 = torch.ops.aten.view.default(addmm_67, [2, 128, 1024]);  addmm_67 = None
        view_182 = torch.ops.aten.view.default(add_82, [256, 1024]);  add_82 = None
        permute_113 = torch.ops.aten.permute.default(arg188_1, [1, 0]);  arg188_1 = None
        addmm_68 = torch.ops.aten.addmm.default(arg189_1, view_182, permute_113);  arg189_1 = view_182 = permute_113 = None
        view_183 = torch.ops.aten.view.default(addmm_68, [2, 128, 1024]);  addmm_68 = None
        view_184 = torch.ops.aten.view.default(view_181, [2, 128, -1, 64]);  view_181 = None
        permute_114 = torch.ops.aten.permute.default(view_184, [0, 2, 1, 3]);  view_184 = None
        view_185 = torch.ops.aten.view.default(view_183, [2, 128, -1, 64]);  view_183 = None
        permute_115 = torch.ops.aten.permute.default(view_185, [0, 2, 1, 3]);  view_185 = None
        expand_13 = torch.ops.aten.expand.default(where, [2, 16, 128, 128]);  where = None
        _scaled_dot_product_efficient_attention_11 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_111, permute_114, permute_115, expand_13, False, scale = 0.125);  permute_111 = permute_114 = permute_115 = expand_13 = None
        getitem_92 = _scaled_dot_product_efficient_attention_11[0];  _scaled_dot_product_efficient_attention_11 = None
        permute_116 = torch.ops.aten.permute.default(getitem_92, [0, 2, 1, 3]);  getitem_92 = None
        view_186 = torch.ops.aten.view.default(permute_116, [2, 128, -1]);  permute_116 = None
        view_187 = torch.ops.aten.view.default(view_186, [256, 1024]);  view_186 = None
        permute_117 = torch.ops.aten.permute.default(arg190_1, [1, 0]);  arg190_1 = None
        addmm_69 = torch.ops.aten.addmm.default(arg191_1, view_187, permute_117);  arg191_1 = view_187 = permute_117 = None
        view_188 = torch.ops.aten.view.default(addmm_69, [2, 128, 1024]);  addmm_69 = None
        add_83 = torch.ops.aten.add.Tensor(add_80, view_188);  add_80 = view_188 = None
        var_mean_24 = torch.ops.aten.var_mean.correction(add_83, [2], correction = 0, keepdim = True)
        getitem_96 = var_mean_24[0]
        getitem_97 = var_mean_24[1];  var_mean_24 = None
        add_84 = torch.ops.aten.add.Tensor(getitem_96, 1e-05);  getitem_96 = None
        rsqrt_24 = torch.ops.aten.rsqrt.default(add_84);  add_84 = None
        sub_25 = torch.ops.aten.sub.Tensor(add_83, getitem_97);  getitem_97 = None
        mul_82 = torch.ops.aten.mul.Tensor(sub_25, rsqrt_24);  sub_25 = rsqrt_24 = None
        mul_83 = torch.ops.aten.mul.Tensor(mul_82, arg192_1);  mul_82 = arg192_1 = None
        add_85 = torch.ops.aten.add.Tensor(mul_83, arg193_1);  mul_83 = arg193_1 = None
        view_189 = torch.ops.aten.view.default(add_85, [256, 1024]);  add_85 = None
        permute_118 = torch.ops.aten.permute.default(arg194_1, [1, 0]);  arg194_1 = None
        addmm_70 = torch.ops.aten.addmm.default(arg195_1, view_189, permute_118);  arg195_1 = view_189 = permute_118 = None
        view_190 = torch.ops.aten.view.default(addmm_70, [2, 128, 4096]);  addmm_70 = None
        mul_84 = torch.ops.aten.mul.Tensor(view_190, 0.5)
        mul_85 = torch.ops.aten.mul.Tensor(view_190, 0.7071067811865476);  view_190 = None
        erf_11 = torch.ops.aten.erf.default(mul_85);  mul_85 = None
        add_86 = torch.ops.aten.add.Tensor(erf_11, 1);  erf_11 = None
        mul_86 = torch.ops.aten.mul.Tensor(mul_84, add_86);  mul_84 = add_86 = None
        view_191 = torch.ops.aten.view.default(mul_86, [256, 4096]);  mul_86 = None
        permute_119 = torch.ops.aten.permute.default(arg196_1, [1, 0]);  arg196_1 = None
        addmm_71 = torch.ops.aten.addmm.default(arg197_1, view_191, permute_119);  arg197_1 = view_191 = permute_119 = None
        view_192 = torch.ops.aten.view.default(addmm_71, [2, 128, 1024]);  addmm_71 = None
        add_87 = torch.ops.aten.add.Tensor(add_83, view_192);  add_83 = view_192 = None
        var_mean_25 = torch.ops.aten.var_mean.correction(add_87, [2], correction = 0, keepdim = True)
        getitem_98 = var_mean_25[0]
        getitem_99 = var_mean_25[1];  var_mean_25 = None
        add_88 = torch.ops.aten.add.Tensor(getitem_98, 1e-05);  getitem_98 = None
        rsqrt_25 = torch.ops.aten.rsqrt.default(add_88);  add_88 = None
        sub_26 = torch.ops.aten.sub.Tensor(add_87, getitem_99);  add_87 = getitem_99 = None
        mul_87 = torch.ops.aten.mul.Tensor(sub_26, rsqrt_25);  sub_26 = rsqrt_25 = None
        mul_88 = torch.ops.aten.mul.Tensor(mul_87, arg198_1);  mul_87 = arg198_1 = None
        add_89 = torch.ops.aten.add.Tensor(mul_88, arg199_1);  mul_88 = arg199_1 = None
        return (add_89,)
        
def load_args(reader):
    buf0 = reader.storage(None, 2048, device=device(type='cuda', index=0), dtype_hint=torch.int64)
    reader.tensor(buf0, (2, 128), dtype=torch.int64, is_leaf=True)  # arg0_1
    buf1 = reader.storage(None, 1024110592, device=device(type='cuda', index=0))
    reader.tensor(buf1, (250027, 1024), is_leaf=True)  # arg1_1
    buf2 = reader.storage(None, 4202496, device=device(type='cuda', index=0))
    reader.tensor(buf2, (1026, 1024), is_leaf=True)  # arg2_1
    buf3 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf3, (1024,), is_leaf=True)  # arg3_1
    buf4 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf4, (1024,), is_leaf=True)  # arg4_1
    buf5 = reader.storage(None, 2048, device=device(type='cuda', index=0), dtype_hint=torch.int64)
    reader.tensor(buf5, (2, 128), dtype=torch.int64, is_leaf=True)  # arg5_1
    buf6 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf6, (1024,), is_leaf=True)  # arg6_1
    buf7 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf7, (1024,), is_leaf=True)  # arg7_1
    buf8 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf8, (1024, 1024), is_leaf=True)  # arg8_1
    buf9 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf9, (1024,), is_leaf=True)  # arg9_1
    buf10 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf10, (1024, 1024), is_leaf=True)  # arg10_1
    buf11 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf11, (1024,), is_leaf=True)  # arg11_1
    buf12 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf12, (1024, 1024), is_leaf=True)  # arg12_1
    buf13 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf13, (1024,), is_leaf=True)  # arg13_1
    buf14 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf14, (1024, 1024), is_leaf=True)  # arg14_1
    buf15 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf15, (1024,), is_leaf=True)  # arg15_1
    buf16 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf16, (1024,), is_leaf=True)  # arg16_1
    buf17 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf17, (1024,), is_leaf=True)  # arg17_1
    buf18 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf18, (4096, 1024), is_leaf=True)  # arg18_1
    buf19 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf19, (4096,), is_leaf=True)  # arg19_1
    buf20 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf20, (1024, 4096), is_leaf=True)  # arg20_1
    buf21 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf21, (1024,), is_leaf=True)  # arg21_1
    buf22 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf22, (1024,), is_leaf=True)  # arg22_1
    buf23 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf23, (1024,), is_leaf=True)  # arg23_1
    buf24 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf24, (1024, 1024), is_leaf=True)  # arg24_1
    buf25 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf25, (1024,), is_leaf=True)  # arg25_1
    buf26 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf26, (1024, 1024), is_leaf=True)  # arg26_1
    buf27 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf27, (1024,), is_leaf=True)  # arg27_1
    buf28 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf28, (1024, 1024), is_leaf=True)  # arg28_1
    buf29 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf29, (1024,), is_leaf=True)  # arg29_1
    buf30 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf30, (1024, 1024), is_leaf=True)  # arg30_1
    buf31 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf31, (1024,), is_leaf=True)  # arg31_1
    buf32 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf32, (1024,), is_leaf=True)  # arg32_1
    buf33 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf33, (1024,), is_leaf=True)  # arg33_1
    buf34 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf34, (4096, 1024), is_leaf=True)  # arg34_1
    buf35 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf35, (4096,), is_leaf=True)  # arg35_1
    buf36 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf36, (1024, 4096), is_leaf=True)  # arg36_1
    buf37 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf37, (1024,), is_leaf=True)  # arg37_1
    buf38 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf38, (1024,), is_leaf=True)  # arg38_1
    buf39 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf39, (1024,), is_leaf=True)  # arg39_1
    buf40 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf40, (1024, 1024), is_leaf=True)  # arg40_1
    buf41 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf41, (1024,), is_leaf=True)  # arg41_1
    buf42 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf42, (1024, 1024), is_leaf=True)  # arg42_1
    buf43 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf43, (1024,), is_leaf=True)  # arg43_1
    buf44 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf44, (1024, 1024), is_leaf=True)  # arg44_1
    buf45 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf45, (1024,), is_leaf=True)  # arg45_1
    buf46 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf46, (1024, 1024), is_leaf=True)  # arg46_1
    buf47 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf47, (1024,), is_leaf=True)  # arg47_1
    buf48 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf48, (1024,), is_leaf=True)  # arg48_1
    buf49 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf49, (1024,), is_leaf=True)  # arg49_1
    buf50 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf50, (4096, 1024), is_leaf=True)  # arg50_1
    buf51 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf51, (4096,), is_leaf=True)  # arg51_1
    buf52 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf52, (1024, 4096), is_leaf=True)  # arg52_1
    buf53 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf53, (1024,), is_leaf=True)  # arg53_1
    buf54 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf54, (1024,), is_leaf=True)  # arg54_1
    buf55 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf55, (1024,), is_leaf=True)  # arg55_1
    buf56 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf56, (1024, 1024), is_leaf=True)  # arg56_1
    buf57 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf57, (1024,), is_leaf=True)  # arg57_1
    buf58 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf58, (1024, 1024), is_leaf=True)  # arg58_1
    buf59 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf59, (1024,), is_leaf=True)  # arg59_1
    buf60 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf60, (1024, 1024), is_leaf=True)  # arg60_1
    buf61 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf61, (1024,), is_leaf=True)  # arg61_1
    buf62 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf62, (1024, 1024), is_leaf=True)  # arg62_1
    buf63 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf63, (1024,), is_leaf=True)  # arg63_1
    buf64 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf64, (1024,), is_leaf=True)  # arg64_1
    buf65 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf65, (1024,), is_leaf=True)  # arg65_1
    buf66 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf66, (4096, 1024), is_leaf=True)  # arg66_1
    buf67 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf67, (4096,), is_leaf=True)  # arg67_1
    buf68 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf68, (1024, 4096), is_leaf=True)  # arg68_1
    buf69 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf69, (1024,), is_leaf=True)  # arg69_1
    buf70 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf70, (1024,), is_leaf=True)  # arg70_1
    buf71 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf71, (1024,), is_leaf=True)  # arg71_1
    buf72 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf72, (1024, 1024), is_leaf=True)  # arg72_1
    buf73 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf73, (1024,), is_leaf=True)  # arg73_1
    buf74 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf74, (1024, 1024), is_leaf=True)  # arg74_1
    buf75 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf75, (1024,), is_leaf=True)  # arg75_1
    buf76 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf76, (1024, 1024), is_leaf=True)  # arg76_1
    buf77 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf77, (1024,), is_leaf=True)  # arg77_1
    buf78 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf78, (1024, 1024), is_leaf=True)  # arg78_1
    buf79 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf79, (1024,), is_leaf=True)  # arg79_1
    buf80 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf80, (1024,), is_leaf=True)  # arg80_1
    buf81 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf81, (1024,), is_leaf=True)  # arg81_1
    buf82 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf82, (4096, 1024), is_leaf=True)  # arg82_1
    buf83 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf83, (4096,), is_leaf=True)  # arg83_1
    buf84 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf84, (1024, 4096), is_leaf=True)  # arg84_1
    buf85 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf85, (1024,), is_leaf=True)  # arg85_1
    buf86 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf86, (1024,), is_leaf=True)  # arg86_1
    buf87 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf87, (1024,), is_leaf=True)  # arg87_1
    buf88 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf88, (1024, 1024), is_leaf=True)  # arg88_1
    buf89 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf89, (1024,), is_leaf=True)  # arg89_1
    buf90 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf90, (1024, 1024), is_leaf=True)  # arg90_1
    buf91 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf91, (1024,), is_leaf=True)  # arg91_1
    buf92 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf92, (1024, 1024), is_leaf=True)  # arg92_1
    buf93 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf93, (1024,), is_leaf=True)  # arg93_1
    buf94 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf94, (1024, 1024), is_leaf=True)  # arg94_1
    buf95 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf95, (1024,), is_leaf=True)  # arg95_1
    buf96 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf96, (1024,), is_leaf=True)  # arg96_1
    buf97 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf97, (1024,), is_leaf=True)  # arg97_1
    buf98 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf98, (4096, 1024), is_leaf=True)  # arg98_1
    buf99 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf99, (4096,), is_leaf=True)  # arg99_1
    buf100 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf100, (1024, 4096), is_leaf=True)  # arg100_1
    buf101 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf101, (1024,), is_leaf=True)  # arg101_1
    buf102 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf102, (1024,), is_leaf=True)  # arg102_1
    buf103 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf103, (1024,), is_leaf=True)  # arg103_1
    buf104 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf104, (1024, 1024), is_leaf=True)  # arg104_1
    buf105 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf105, (1024,), is_leaf=True)  # arg105_1
    buf106 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf106, (1024, 1024), is_leaf=True)  # arg106_1
    buf107 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf107, (1024,), is_leaf=True)  # arg107_1
    buf108 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf108, (1024, 1024), is_leaf=True)  # arg108_1
    buf109 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf109, (1024,), is_leaf=True)  # arg109_1
    buf110 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf110, (1024, 1024), is_leaf=True)  # arg110_1
    buf111 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf111, (1024,), is_leaf=True)  # arg111_1
    buf112 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf112, (1024,), is_leaf=True)  # arg112_1
    buf113 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf113, (1024,), is_leaf=True)  # arg113_1
    buf114 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf114, (4096, 1024), is_leaf=True)  # arg114_1
    buf115 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf115, (4096,), is_leaf=True)  # arg115_1
    buf116 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf116, (1024, 4096), is_leaf=True)  # arg116_1
    buf117 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf117, (1024,), is_leaf=True)  # arg117_1
    buf118 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf118, (1024,), is_leaf=True)  # arg118_1
    buf119 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf119, (1024,), is_leaf=True)  # arg119_1
    buf120 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf120, (1024, 1024), is_leaf=True)  # arg120_1
    buf121 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf121, (1024,), is_leaf=True)  # arg121_1
    buf122 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf122, (1024, 1024), is_leaf=True)  # arg122_1
    buf123 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf123, (1024,), is_leaf=True)  # arg123_1
    buf124 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf124, (1024, 1024), is_leaf=True)  # arg124_1
    buf125 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf125, (1024,), is_leaf=True)  # arg125_1
    buf126 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf126, (1024, 1024), is_leaf=True)  # arg126_1
    buf127 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf127, (1024,), is_leaf=True)  # arg127_1
    buf128 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf128, (1024,), is_leaf=True)  # arg128_1
    buf129 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf129, (1024,), is_leaf=True)  # arg129_1
    buf130 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf130, (4096, 1024), is_leaf=True)  # arg130_1
    buf131 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf131, (4096,), is_leaf=True)  # arg131_1
    buf132 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf132, (1024, 4096), is_leaf=True)  # arg132_1
    buf133 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf133, (1024,), is_leaf=True)  # arg133_1
    buf134 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf134, (1024,), is_leaf=True)  # arg134_1
    buf135 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf135, (1024,), is_leaf=True)  # arg135_1
    buf136 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf136, (1024, 1024), is_leaf=True)  # arg136_1
    buf137 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf137, (1024,), is_leaf=True)  # arg137_1
    buf138 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf138, (1024, 1024), is_leaf=True)  # arg138_1
    buf139 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf139, (1024,), is_leaf=True)  # arg139_1
    buf140 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf140, (1024, 1024), is_leaf=True)  # arg140_1
    buf141 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf141, (1024,), is_leaf=True)  # arg141_1
    buf142 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf142, (1024, 1024), is_leaf=True)  # arg142_1
    buf143 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf143, (1024,), is_leaf=True)  # arg143_1
    buf144 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf144, (1024,), is_leaf=True)  # arg144_1
    buf145 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf145, (1024,), is_leaf=True)  # arg145_1
    buf146 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf146, (4096, 1024), is_leaf=True)  # arg146_1
    buf147 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf147, (4096,), is_leaf=True)  # arg147_1
    buf148 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf148, (1024, 4096), is_leaf=True)  # arg148_1
    buf149 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf149, (1024,), is_leaf=True)  # arg149_1
    buf150 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf150, (1024,), is_leaf=True)  # arg150_1
    buf151 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf151, (1024,), is_leaf=True)  # arg151_1
    buf152 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf152, (1024, 1024), is_leaf=True)  # arg152_1
    buf153 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf153, (1024,), is_leaf=True)  # arg153_1
    buf154 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf154, (1024, 1024), is_leaf=True)  # arg154_1
    buf155 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf155, (1024,), is_leaf=True)  # arg155_1
    buf156 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf156, (1024, 1024), is_leaf=True)  # arg156_1
    buf157 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf157, (1024,), is_leaf=True)  # arg157_1
    buf158 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf158, (1024, 1024), is_leaf=True)  # arg158_1
    buf159 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf159, (1024,), is_leaf=True)  # arg159_1
    buf160 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf160, (1024,), is_leaf=True)  # arg160_1
    buf161 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf161, (1024,), is_leaf=True)  # arg161_1
    buf162 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf162, (4096, 1024), is_leaf=True)  # arg162_1
    buf163 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf163, (4096,), is_leaf=True)  # arg163_1
    buf164 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf164, (1024, 4096), is_leaf=True)  # arg164_1
    buf165 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf165, (1024,), is_leaf=True)  # arg165_1
    buf166 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf166, (1024,), is_leaf=True)  # arg166_1
    buf167 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf167, (1024,), is_leaf=True)  # arg167_1
    buf168 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf168, (1024, 1024), is_leaf=True)  # arg168_1
    buf169 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf169, (1024,), is_leaf=True)  # arg169_1
    buf170 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf170, (1024, 1024), is_leaf=True)  # arg170_1
    buf171 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf171, (1024,), is_leaf=True)  # arg171_1
    buf172 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf172, (1024, 1024), is_leaf=True)  # arg172_1
    buf173 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf173, (1024,), is_leaf=True)  # arg173_1
    buf174 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf174, (1024, 1024), is_leaf=True)  # arg174_1
    buf175 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf175, (1024,), is_leaf=True)  # arg175_1
    buf176 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf176, (1024,), is_leaf=True)  # arg176_1
    buf177 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf177, (1024,), is_leaf=True)  # arg177_1
    buf178 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf178, (4096, 1024), is_leaf=True)  # arg178_1
    buf179 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf179, (4096,), is_leaf=True)  # arg179_1
    buf180 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf180, (1024, 4096), is_leaf=True)  # arg180_1
    buf181 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf181, (1024,), is_leaf=True)  # arg181_1
    buf182 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf182, (1024,), is_leaf=True)  # arg182_1
    buf183 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf183, (1024,), is_leaf=True)  # arg183_1
    buf184 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf184, (1024, 1024), is_leaf=True)  # arg184_1
    buf185 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf185, (1024,), is_leaf=True)  # arg185_1
    buf186 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf186, (1024, 1024), is_leaf=True)  # arg186_1
    buf187 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf187, (1024,), is_leaf=True)  # arg187_1
    buf188 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf188, (1024, 1024), is_leaf=True)  # arg188_1
    buf189 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf189, (1024,), is_leaf=True)  # arg189_1
    buf190 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf190, (1024, 1024), is_leaf=True)  # arg190_1
    buf191 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf191, (1024,), is_leaf=True)  # arg191_1
    buf192 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf192, (1024,), is_leaf=True)  # arg192_1
    buf193 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf193, (1024,), is_leaf=True)  # arg193_1
    buf194 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf194, (4096, 1024), is_leaf=True)  # arg194_1
    buf195 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf195, (4096,), is_leaf=True)  # arg195_1
    buf196 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf196, (1024, 4096), is_leaf=True)  # arg196_1
    buf197 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf197, (1024,), is_leaf=True)  # arg197_1
    buf198 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf198, (1024,), is_leaf=True)  # arg198_1
    buf199 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf199, (1024,), is_leaf=True)  # arg199_1
load_args._version = 0
mod = Repro()
if __name__ == '__main__':
    from torch._dynamo.repro.after_aot import run_repro
    with torch.no_grad():
        run_repro(mod, load_args, accuracy=False, command='run', save_dir=None, tracing_mode='real', check_str=None)
        # To run it separately, do 
        # mod, args = run_repro(mod, load_args, accuracy=False, command='get_args', save_dir=None, tracing_mode='real', check_str=None)
        # mod(*args)

# ===== run_2025_10_19_04_14_08_043050-pid_19/torchinductor/model__3_inference_3.3/fx_graph_transformed.py =====
class <lambda>(torch.nn.Module):
    def forward(self, arg0_1: "i64[2, 128]", arg1_1: "f32[250027, 1024]", arg2_1: "f32[1026, 1024]", arg3_1: "f32[1024]", arg4_1: "f32[1024]", arg5_1: "i64[2, 128]", arg6_1: "f32[1024]", arg7_1: "f32[1024]", arg8_1: "f32[1024, 1024]", arg9_1: "f32[1024]", arg10_1: "f32[1024, 1024]", arg11_1: "f32[1024]", arg12_1: "f32[1024, 1024]", arg13_1: "f32[1024]", arg14_1: "f32[1024, 1024]", arg15_1: "f32[1024]", arg16_1: "f32[1024]", arg17_1: "f32[1024]", arg18_1: "f32[4096, 1024]", arg19_1: "f32[4096]", arg20_1: "f32[1024, 4096]", arg21_1: "f32[1024]", arg22_1: "f32[1024]", arg23_1: "f32[1024]", arg24_1: "f32[1024, 1024]", arg25_1: "f32[1024]", arg26_1: "f32[1024, 1024]", arg27_1: "f32[1024]", arg28_1: "f32[1024, 1024]", arg29_1: "f32[1024]", arg30_1: "f32[1024, 1024]", arg31_1: "f32[1024]", arg32_1: "f32[1024]", arg33_1: "f32[1024]", arg34_1: "f32[4096, 1024]", arg35_1: "f32[4096]", arg36_1: "f32[1024, 4096]", arg37_1: "f32[1024]", arg38_1: "f32[1024]", arg39_1: "f32[1024]", arg40_1: "f32[1024, 1024]", arg41_1: "f32[1024]", arg42_1: "f32[1024, 1024]", arg43_1: "f32[1024]", arg44_1: "f32[1024, 1024]", arg45_1: "f32[1024]", arg46_1: "f32[1024, 1024]", arg47_1: "f32[1024]", arg48_1: "f32[1024]", arg49_1: "f32[1024]", arg50_1: "f32[4096, 1024]", arg51_1: "f32[4096]", arg52_1: "f32[1024, 4096]", arg53_1: "f32[1024]", arg54_1: "f32[1024]", arg55_1: "f32[1024]", arg56_1: "f32[1024, 1024]", arg57_1: "f32[1024]", arg58_1: "f32[1024, 1024]", arg59_1: "f32[1024]", arg60_1: "f32[1024, 1024]", arg61_1: "f32[1024]", arg62_1: "f32[1024, 1024]", arg63_1: "f32[1024]", arg64_1: "f32[1024]", arg65_1: "f32[1024]", arg66_1: "f32[4096, 1024]", arg67_1: "f32[4096]", arg68_1: "f32[1024, 4096]", arg69_1: "f32[1024]", arg70_1: "f32[1024]", arg71_1: "f32[1024]", arg72_1: "f32[1024, 1024]", arg73_1: "f32[1024]", arg74_1: "f32[1024, 1024]", arg75_1: "f32[1024]", arg76_1: "f32[1024, 1024]", arg77_1: "f32[1024]", arg78_1: "f32[1024, 1024]", arg79_1: "f32[1024]", arg80_1: "f32[1024]", arg81_1: "f32[1024]", arg82_1: "f32[4096, 1024]", arg83_1: "f32[4096]", arg84_1: "f32[1024, 4096]", arg85_1: "f32[1024]", arg86_1: "f32[1024]", arg87_1: "f32[1024]", arg88_1: "f32[1024, 1024]", arg89_1: "f32[1024]", arg90_1: "f32[1024, 1024]", arg91_1: "f32[1024]", arg92_1: "f32[1024, 1024]", arg93_1: "f32[1024]", arg94_1: "f32[1024, 1024]", arg95_1: "f32[1024]", arg96_1: "f32[1024]", arg97_1: "f32[1024]", arg98_1: "f32[4096, 1024]", arg99_1: "f32[4096]", arg100_1: "f32[1024, 4096]", arg101_1: "f32[1024]", arg102_1: "f32[1024]", arg103_1: "f32[1024]", arg104_1: "f32[1024, 1024]", arg105_1: "f32[1024]", arg106_1: "f32[1024, 1024]", arg107_1: "f32[1024]", arg108_1: "f32[1024, 1024]", arg109_1: "f32[1024]", arg110_1: "f32[1024, 1024]", arg111_1: "f32[1024]", arg112_1: "f32[1024]", arg113_1: "f32[1024]", arg114_1: "f32[4096, 1024]", arg115_1: "f32[4096]", arg116_1: "f32[1024, 4096]", arg117_1: "f32[1024]", arg118_1: "f32[1024]", arg119_1: "f32[1024]", arg120_1: "f32[1024, 1024]", arg121_1: "f32[1024]", arg122_1: "f32[1024, 1024]", arg123_1: "f32[1024]", arg124_1: "f32[1024, 1024]", arg125_1: "f32[1024]", arg126_1: "f32[1024, 1024]", arg127_1: "f32[1024]", arg128_1: "f32[1024]", arg129_1: "f32[1024]", arg130_1: "f32[4096, 1024]", arg131_1: "f32[4096]", arg132_1: "f32[1024, 4096]", arg133_1: "f32[1024]", arg134_1: "f32[1024]", arg135_1: "f32[1024]", arg136_1: "f32[1024, 1024]", arg137_1: "f32[1024]", arg138_1: "f32[1024, 1024]", arg139_1: "f32[1024]", arg140_1: "f32[1024, 1024]", arg141_1: "f32[1024]", arg142_1: "f32[1024, 1024]", arg143_1: "f32[1024]", arg144_1: "f32[1024]", arg145_1: "f32[1024]", arg146_1: "f32[4096, 1024]", arg147_1: "f32[4096]", arg148_1: "f32[1024, 4096]", arg149_1: "f32[1024]", arg150_1: "f32[1024]", arg151_1: "f32[1024]", arg152_1: "f32[1024, 1024]", arg153_1: "f32[1024]", arg154_1: "f32[1024, 1024]", arg155_1: "f32[1024]", arg156_1: "f32[1024, 1024]", arg157_1: "f32[1024]", arg158_1: "f32[1024, 1024]", arg159_1: "f32[1024]", arg160_1: "f32[1024]", arg161_1: "f32[1024]", arg162_1: "f32[4096, 1024]", arg163_1: "f32[4096]", arg164_1: "f32[1024, 4096]", arg165_1: "f32[1024]", arg166_1: "f32[1024]", arg167_1: "f32[1024]", arg168_1: "f32[1024, 1024]", arg169_1: "f32[1024]", arg170_1: "f32[1024, 1024]", arg171_1: "f32[1024]", arg172_1: "f32[1024, 1024]", arg173_1: "f32[1024]", arg174_1: "f32[1024, 1024]", arg175_1: "f32[1024]", arg176_1: "f32[1024]", arg177_1: "f32[1024]", arg178_1: "f32[4096, 1024]", arg179_1: "f32[4096]", arg180_1: "f32[1024, 4096]", arg181_1: "f32[1024]", arg182_1: "f32[1024]", arg183_1: "f32[1024]", arg184_1: "f32[1024, 1024]", arg185_1: "f32[1024]", arg186_1: "f32[1024, 1024]", arg187_1: "f32[1024]", arg188_1: "f32[1024, 1024]", arg189_1: "f32[1024]", arg190_1: "f32[1024, 1024]", arg191_1: "f32[1024]", arg192_1: "f32[1024]", arg193_1: "f32[1024]", arg194_1: "f32[4096, 1024]", arg195_1: "f32[4096]", arg196_1: "f32[1024, 4096]", arg197_1: "f32[1024]", arg198_1: "f32[1024]", arg199_1: "f32[1024]"):
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:823 in forward, code: input_ids = input_ids.view(-1, input_shape[-1])
        view: "i64[2, 128]" = torch.ops.aten.reshape.default(arg0_1, [-1, 128]);  arg0_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:123 in forward, code: return super().forward(input_ids) * self.embed_scale
        embedding: "f32[2, 128, 1024]" = torch.ops.aten.embedding.default(arg1_1, view, 1);  arg1_1 = view = None
        mul: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(embedding, 32.0);  embedding = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:103 in forward, code: position_ids = torch.arange(
        iota: "i64[128]" = torch.ops.prims.iota.default(128, start = 0, step = 1, dtype = torch.int64, device = device(type='cuda', index=0), requires_grad = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:105 in forward, code: ).expand(bsz, -1)
        expand: "i64[2, 128]" = torch.ops.aten.expand.default(iota, [2, -1]);  iota = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:109 in forward, code: return super().forward(position_ids + self.offset)
        add: "i64[2, 128]" = torch.ops.aten.add.Tensor(expand, 2);  expand = None
        embedding_1: "f32[2, 128, 1024]" = torch.ops.aten.embedding.default(arg2_1, add);  arg2_1 = add = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:834 in forward, code: hidden_states = inputs_embeds + embed_pos.to(inputs_embeds.device)
        add_1: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul, embedding_1);  mul = embedding_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:835 in forward, code: hidden_states = self.layernorm_embedding(hidden_states)
        var_mean = torch.ops.aten.var_mean.correction(add_1, [2], correction = 0, keepdim = True)
        getitem: "f32[2, 128, 1]" = var_mean[0]
        getitem_1: "f32[2, 128, 1]" = var_mean[1];  var_mean = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:196 in _expand_mask, code: inverted_mask = torch.tensor(1.0, dtype=dtype) - expanded_mask
        _tensor_constant0: "f32[]" = self._tensor_constant0;  _tensor_constant0 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:835 in forward, code: hidden_states = self.layernorm_embedding(hidden_states)
        sub: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_1, getitem_1);  add_1 = getitem_1 = None
        add_2: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem, 1e-05);  getitem = None
        rsqrt: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_2);  add_2 = None
        mul_1: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub, rsqrt);  sub = rsqrt = None
        mul_2: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_1, arg3_1);  mul_1 = arg3_1 = None
        add_3: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_2, arg4_1);  mul_2 = arg4_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_1 = torch.ops.aten.var_mean.correction(add_3, [2], correction = 0, keepdim = True)
        getitem_2: "f32[2, 128, 1]" = var_mean_1[0]
        getitem_3: "f32[2, 128, 1]" = var_mean_1[1];  var_mean_1 = None
        sub_2: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_3, getitem_3);  getitem_3 = None
        add_4: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_2, 1e-05);  getitem_2 = None
        rsqrt_1: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_4);  add_4 = None
        mul_3: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_2, rsqrt_1);  sub_2 = rsqrt_1 = None
        mul_4: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_3, arg6_1);  mul_3 = arg6_1 = None
        add_5: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_4, arg7_1);  mul_4 = arg7_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_1: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_5, [256, 1024])
        permute: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg8_1, [1, 0]);  arg8_1 = None
        addmm: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg9_1, view_1, permute);  arg9_1 = view_1 = permute = None
        view_2: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm, [2, 128, 1024]);  addmm = None
        view_3: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_2, [2, 128, -1, 64]);  view_2 = None
        permute_1: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_3, [0, 2, 1, 3]);  view_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_4: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_5, [256, 1024])
        permute_2: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg10_1, [1, 0]);  arg10_1 = None
        addmm_1: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg11_1, view_4, permute_2);  arg11_1 = view_4 = permute_2 = None
        view_5: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_1, [2, 128, 1024]);  addmm_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_8: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_5, [2, 128, -1, 64]);  view_5 = None
        permute_4: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_8, [0, 2, 1, 3]);  view_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_6: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_5, [256, 1024]);  add_5 = None
        permute_3: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg12_1, [1, 0]);  arg12_1 = None
        addmm_2: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg13_1, view_6, permute_3);  arg13_1 = view_6 = permute_3 = None
        view_7: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_2, [2, 128, 1024]);  addmm_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_9: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_7, [2, 128, -1, 64]);  view_7 = None
        permute_5: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_9, [0, 2, 1, 3]);  view_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:196 in _expand_mask, code: inverted_mask = torch.tensor(1.0, dtype=dtype) - expanded_mask
        full_default: "f32[]" = torch.ops.aten.full.default([], 1.0, dtype = torch.float32, layout = torch.strided, device = device(type='cpu'), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:194 in _expand_mask, code: expanded_mask = mask[:, None, None, :].expand(bsz, 1, tgt_len, src_len).to(dtype)
        unsqueeze: "i64[2, 1, 128]" = torch.ops.aten.unsqueeze.default(arg5_1, 1);  arg5_1 = None
        unsqueeze_1: "i64[2, 1, 1, 128]" = torch.ops.aten.unsqueeze.default(unsqueeze, 2);  unsqueeze = None
        expand_1: "i64[2, 1, 128, 128]" = torch.ops.aten.expand.default(unsqueeze_1, [2, 1, 128, 128]);  unsqueeze_1 = None
        convert_element_type: "f32[2, 1, 128, 128]" = torch.ops.prims.convert_element_type.default(expand_1, torch.float32);  expand_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:196 in _expand_mask, code: inverted_mask = torch.tensor(1.0, dtype=dtype) - expanded_mask
        sub_1: "f32[2, 1, 128, 128]" = torch.ops.aten.sub.Tensor(full_default, convert_element_type);  full_default = convert_element_type = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:198 in _expand_mask, code: return inverted_mask.masked_fill(inverted_mask.to(torch.bool), torch.finfo(dtype).min)
        convert_element_type_1: "b8[2, 1, 128, 128]" = torch.ops.prims.convert_element_type.default(sub_1, torch.bool)
        full_default_1: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where: "f32[2, 1, 128, 128]" = torch.ops.aten.where.self(convert_element_type_1, full_default_1, sub_1);  convert_element_type_1 = full_default_1 = sub_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_2: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_1, permute_4, permute_5, expand_2, False, scale = 0.125);  permute_1 = permute_4 = permute_5 = expand_2 = None
        getitem_4: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention[0];  _scaled_dot_product_efficient_attention = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_6: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_4, [0, 2, 1, 3]);  getitem_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_10: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(permute_6, [2, 128, -1]);  permute_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_11: "f32[256, 1024]" = torch.ops.aten.reshape.default(view_10, [256, 1024]);  view_10 = None
        permute_7: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg14_1, [1, 0]);  arg14_1 = None
        
        # No stacktrace found for following nodes
        mm_default_35: "f32[256, 1024]" = torch.ops.aten.mm.default(view_11, permute_7);  view_11 = permute_7 = None
        add_tensor_35: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_35, arg15_1);  mm_default_35 = arg15_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_12: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_35, [2, 128, 1024]);  add_tensor_35 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_6: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_3, view_12);  add_3 = view_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_2 = torch.ops.aten.var_mean.correction(add_6, [2], correction = 0, keepdim = True)
        getitem_8: "f32[2, 128, 1]" = var_mean_2[0]
        getitem_9: "f32[2, 128, 1]" = var_mean_2[1];  var_mean_2 = None
        sub_3: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_6, getitem_9);  getitem_9 = None
        add_7: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_8, 1e-05);  getitem_8 = None
        rsqrt_2: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_7);  add_7 = None
        mul_5: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_3, rsqrt_2);  sub_3 = rsqrt_2 = None
        mul_6: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_5, arg16_1);  mul_5 = arg16_1 = None
        add_8: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_6, arg17_1);  mul_6 = arg17_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_13: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_8, [256, 1024]);  add_8 = None
        permute_8: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg18_1, [1, 0]);  arg18_1 = None
        
        # No stacktrace found for following nodes
        mm_default_34: "f32[256, 4096]" = torch.ops.aten.mm.default(view_13, permute_8);  view_13 = permute_8 = None
        add_tensor_34: "f32[256, 4096]" = torch.ops.aten.add.Tensor(mm_default_34, arg19_1);  mm_default_34 = arg19_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_14: "f32[2, 128, 4096]" = torch.ops.aten.reshape.default(add_tensor_34, [2, 128, 4096]);  add_tensor_34 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_7: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_14, 0.5)
        mul_8: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_14, 0.7071067811865476);  view_14 = None
        erf: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_8);  mul_8 = None
        add_9: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf, 1);  erf = None
        mul_9: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_7, add_9);  mul_7 = add_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_15: "f32[256, 4096]" = torch.ops.aten.reshape.default(mul_9, [256, 4096]);  mul_9 = None
        permute_9: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg20_1, [1, 0]);  arg20_1 = None
        
        # No stacktrace found for following nodes
        mm_default_33: "f32[256, 1024]" = torch.ops.aten.mm.default(view_15, permute_9);  view_15 = permute_9 = None
        add_tensor_33: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_33, arg21_1);  mm_default_33 = arg21_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_16: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_33, [2, 128, 1024]);  add_tensor_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_10: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_6, view_16);  add_6 = view_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_3 = torch.ops.aten.var_mean.correction(add_10, [2], correction = 0, keepdim = True)
        getitem_10: "f32[2, 128, 1]" = var_mean_3[0]
        getitem_11: "f32[2, 128, 1]" = var_mean_3[1];  var_mean_3 = None
        sub_4: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_10, getitem_11);  getitem_11 = None
        add_11: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_10, 1e-05);  getitem_10 = None
        rsqrt_3: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_11);  add_11 = None
        mul_10: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_4, rsqrt_3);  sub_4 = rsqrt_3 = None
        mul_11: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_10, arg22_1);  mul_10 = arg22_1 = None
        add_12: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_11, arg23_1);  mul_11 = arg23_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_17: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_12, [256, 1024])
        permute_10: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg24_1, [1, 0]);  arg24_1 = None
        addmm_6: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg25_1, view_17, permute_10);  arg25_1 = view_17 = permute_10 = None
        view_18: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_6, [2, 128, 1024]);  addmm_6 = None
        view_19: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_18, [2, 128, -1, 64]);  view_18 = None
        permute_11: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_19, [0, 2, 1, 3]);  view_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_20: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_12, [256, 1024])
        permute_12: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg26_1, [1, 0]);  arg26_1 = None
        addmm_7: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg27_1, view_20, permute_12);  arg27_1 = view_20 = permute_12 = None
        view_21: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_7, [2, 128, 1024]);  addmm_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_24: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_21, [2, 128, -1, 64]);  view_21 = None
        permute_14: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_24, [0, 2, 1, 3]);  view_24 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_22: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_12, [256, 1024]);  add_12 = None
        permute_13: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg28_1, [1, 0]);  arg28_1 = None
        addmm_8: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg29_1, view_22, permute_13);  arg29_1 = view_22 = permute_13 = None
        view_23: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_8, [2, 128, 1024]);  addmm_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_25: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_23, [2, 128, -1, 64]);  view_23 = None
        permute_15: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_25, [0, 2, 1, 3]);  view_25 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_3: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_1 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_11, permute_14, permute_15, expand_3, False, scale = 0.125);  permute_11 = permute_14 = permute_15 = expand_3 = None
        getitem_12: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_1[0];  _scaled_dot_product_efficient_attention_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_16: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_12, [0, 2, 1, 3]);  getitem_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_26: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(permute_16, [2, 128, -1]);  permute_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_27: "f32[256, 1024]" = torch.ops.aten.reshape.default(view_26, [256, 1024]);  view_26 = None
        permute_17: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg30_1, [1, 0]);  arg30_1 = None
        
        # No stacktrace found for following nodes
        mm_default_32: "f32[256, 1024]" = torch.ops.aten.mm.default(view_27, permute_17);  view_27 = permute_17 = None
        add_tensor_32: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_32, arg31_1);  mm_default_32 = arg31_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_28: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_32, [2, 128, 1024]);  add_tensor_32 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_13: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_10, view_28);  add_10 = view_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_4 = torch.ops.aten.var_mean.correction(add_13, [2], correction = 0, keepdim = True)
        getitem_16: "f32[2, 128, 1]" = var_mean_4[0]
        getitem_17: "f32[2, 128, 1]" = var_mean_4[1];  var_mean_4 = None
        sub_5: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_13, getitem_17);  getitem_17 = None
        add_14: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_16, 1e-05);  getitem_16 = None
        rsqrt_4: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_14);  add_14 = None
        mul_12: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_5, rsqrt_4);  sub_5 = rsqrt_4 = None
        mul_13: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_12, arg32_1);  mul_12 = arg32_1 = None
        add_15: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_13, arg33_1);  mul_13 = arg33_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_29: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_15, [256, 1024]);  add_15 = None
        permute_18: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg34_1, [1, 0]);  arg34_1 = None
        
        # No stacktrace found for following nodes
        mm_default_31: "f32[256, 4096]" = torch.ops.aten.mm.default(view_29, permute_18);  view_29 = permute_18 = None
        add_tensor_31: "f32[256, 4096]" = torch.ops.aten.add.Tensor(mm_default_31, arg35_1);  mm_default_31 = arg35_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_30: "f32[2, 128, 4096]" = torch.ops.aten.reshape.default(add_tensor_31, [2, 128, 4096]);  add_tensor_31 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_14: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_30, 0.5)
        mul_15: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_30, 0.7071067811865476);  view_30 = None
        erf_1: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_15);  mul_15 = None
        add_16: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_1, 1);  erf_1 = None
        mul_16: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_14, add_16);  mul_14 = add_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_31: "f32[256, 4096]" = torch.ops.aten.reshape.default(mul_16, [256, 4096]);  mul_16 = None
        permute_19: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg36_1, [1, 0]);  arg36_1 = None
        
        # No stacktrace found for following nodes
        mm_default_30: "f32[256, 1024]" = torch.ops.aten.mm.default(view_31, permute_19);  view_31 = permute_19 = None
        add_tensor_30: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_30, arg37_1);  mm_default_30 = arg37_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_32: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_30, [2, 128, 1024]);  add_tensor_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_17: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_13, view_32);  add_13 = view_32 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_5 = torch.ops.aten.var_mean.correction(add_17, [2], correction = 0, keepdim = True)
        getitem_18: "f32[2, 128, 1]" = var_mean_5[0]
        getitem_19: "f32[2, 128, 1]" = var_mean_5[1];  var_mean_5 = None
        sub_6: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_17, getitem_19);  getitem_19 = None
        add_18: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_18, 1e-05);  getitem_18 = None
        rsqrt_5: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_18);  add_18 = None
        mul_17: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_6, rsqrt_5);  sub_6 = rsqrt_5 = None
        mul_18: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_17, arg38_1);  mul_17 = arg38_1 = None
        add_19: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_18, arg39_1);  mul_18 = arg39_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_33: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_19, [256, 1024])
        permute_20: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg40_1, [1, 0]);  arg40_1 = None
        addmm_12: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg41_1, view_33, permute_20);  arg41_1 = view_33 = permute_20 = None
        view_34: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_12, [2, 128, 1024]);  addmm_12 = None
        view_35: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_34, [2, 128, -1, 64]);  view_34 = None
        permute_21: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_35, [0, 2, 1, 3]);  view_35 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_36: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_19, [256, 1024])
        permute_22: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg42_1, [1, 0]);  arg42_1 = None
        addmm_13: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg43_1, view_36, permute_22);  arg43_1 = view_36 = permute_22 = None
        view_37: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_13, [2, 128, 1024]);  addmm_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_40: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_37, [2, 128, -1, 64]);  view_37 = None
        permute_24: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_40, [0, 2, 1, 3]);  view_40 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_38: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_19, [256, 1024]);  add_19 = None
        permute_23: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg44_1, [1, 0]);  arg44_1 = None
        addmm_14: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg45_1, view_38, permute_23);  arg45_1 = view_38 = permute_23 = None
        view_39: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_14, [2, 128, 1024]);  addmm_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_41: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_39, [2, 128, -1, 64]);  view_39 = None
        permute_25: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_41, [0, 2, 1, 3]);  view_41 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_4: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_2 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_21, permute_24, permute_25, expand_4, False, scale = 0.125);  permute_21 = permute_24 = permute_25 = expand_4 = None
        getitem_20: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_2[0];  _scaled_dot_product_efficient_attention_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_26: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_20, [0, 2, 1, 3]);  getitem_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_42: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(permute_26, [2, 128, -1]);  permute_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_43: "f32[256, 1024]" = torch.ops.aten.reshape.default(view_42, [256, 1024]);  view_42 = None
        permute_27: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg46_1, [1, 0]);  arg46_1 = None
        
        # No stacktrace found for following nodes
        mm_default_29: "f32[256, 1024]" = torch.ops.aten.mm.default(view_43, permute_27);  view_43 = permute_27 = None
        add_tensor_29: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_29, arg47_1);  mm_default_29 = arg47_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_44: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_29, [2, 128, 1024]);  add_tensor_29 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_20: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_17, view_44);  add_17 = view_44 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_6 = torch.ops.aten.var_mean.correction(add_20, [2], correction = 0, keepdim = True)
        getitem_24: "f32[2, 128, 1]" = var_mean_6[0]
        getitem_25: "f32[2, 128, 1]" = var_mean_6[1];  var_mean_6 = None
        sub_7: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_20, getitem_25);  getitem_25 = None
        add_21: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_24, 1e-05);  getitem_24 = None
        rsqrt_6: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_21);  add_21 = None
        mul_19: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_7, rsqrt_6);  sub_7 = rsqrt_6 = None
        mul_20: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_19, arg48_1);  mul_19 = arg48_1 = None
        add_22: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_20, arg49_1);  mul_20 = arg49_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_45: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_22, [256, 1024]);  add_22 = None
        permute_28: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg50_1, [1, 0]);  arg50_1 = None
        
        # No stacktrace found for following nodes
        mm_default_28: "f32[256, 4096]" = torch.ops.aten.mm.default(view_45, permute_28);  view_45 = permute_28 = None
        add_tensor_28: "f32[256, 4096]" = torch.ops.aten.add.Tensor(mm_default_28, arg51_1);  mm_default_28 = arg51_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_46: "f32[2, 128, 4096]" = torch.ops.aten.reshape.default(add_tensor_28, [2, 128, 4096]);  add_tensor_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_21: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_46, 0.5)
        mul_22: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_46, 0.7071067811865476);  view_46 = None
        erf_2: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_22);  mul_22 = None
        add_23: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_2, 1);  erf_2 = None
        mul_23: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_21, add_23);  mul_21 = add_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_47: "f32[256, 4096]" = torch.ops.aten.reshape.default(mul_23, [256, 4096]);  mul_23 = None
        permute_29: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg52_1, [1, 0]);  arg52_1 = None
        
        # No stacktrace found for following nodes
        mm_default_27: "f32[256, 1024]" = torch.ops.aten.mm.default(view_47, permute_29);  view_47 = permute_29 = None
        add_tensor_27: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_27, arg53_1);  mm_default_27 = arg53_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_48: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_27, [2, 128, 1024]);  add_tensor_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_24: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_20, view_48);  add_20 = view_48 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_7 = torch.ops.aten.var_mean.correction(add_24, [2], correction = 0, keepdim = True)
        getitem_26: "f32[2, 128, 1]" = var_mean_7[0]
        getitem_27: "f32[2, 128, 1]" = var_mean_7[1];  var_mean_7 = None
        sub_8: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_24, getitem_27);  getitem_27 = None
        add_25: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_26, 1e-05);  getitem_26 = None
        rsqrt_7: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_25);  add_25 = None
        mul_24: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_8, rsqrt_7);  sub_8 = rsqrt_7 = None
        mul_25: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_24, arg54_1);  mul_24 = arg54_1 = None
        add_26: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_25, arg55_1);  mul_25 = arg55_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_49: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_26, [256, 1024])
        permute_30: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg56_1, [1, 0]);  arg56_1 = None
        addmm_18: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg57_1, view_49, permute_30);  arg57_1 = view_49 = permute_30 = None
        view_50: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_18, [2, 128, 1024]);  addmm_18 = None
        view_51: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_50, [2, 128, -1, 64]);  view_50 = None
        permute_31: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_51, [0, 2, 1, 3]);  view_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_52: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_26, [256, 1024])
        permute_32: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg58_1, [1, 0]);  arg58_1 = None
        addmm_19: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg59_1, view_52, permute_32);  arg59_1 = view_52 = permute_32 = None
        view_53: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_19, [2, 128, 1024]);  addmm_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_56: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_53, [2, 128, -1, 64]);  view_53 = None
        permute_34: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_56, [0, 2, 1, 3]);  view_56 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_54: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_26, [256, 1024]);  add_26 = None
        permute_33: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg60_1, [1, 0]);  arg60_1 = None
        addmm_20: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg61_1, view_54, permute_33);  arg61_1 = view_54 = permute_33 = None
        view_55: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_20, [2, 128, 1024]);  addmm_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_57: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_55, [2, 128, -1, 64]);  view_55 = None
        permute_35: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_57, [0, 2, 1, 3]);  view_57 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_5: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_3 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_31, permute_34, permute_35, expand_5, False, scale = 0.125);  permute_31 = permute_34 = permute_35 = expand_5 = None
        getitem_28: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_3[0];  _scaled_dot_product_efficient_attention_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_36: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_28, [0, 2, 1, 3]);  getitem_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_58: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(permute_36, [2, 128, -1]);  permute_36 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_59: "f32[256, 1024]" = torch.ops.aten.reshape.default(view_58, [256, 1024]);  view_58 = None
        permute_37: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg62_1, [1, 0]);  arg62_1 = None
        
        # No stacktrace found for following nodes
        mm_default_26: "f32[256, 1024]" = torch.ops.aten.mm.default(view_59, permute_37);  view_59 = permute_37 = None
        add_tensor_26: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_26, arg63_1);  mm_default_26 = arg63_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_60: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_26, [2, 128, 1024]);  add_tensor_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_27: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_24, view_60);  add_24 = view_60 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_8 = torch.ops.aten.var_mean.correction(add_27, [2], correction = 0, keepdim = True)
        getitem_32: "f32[2, 128, 1]" = var_mean_8[0]
        getitem_33: "f32[2, 128, 1]" = var_mean_8[1];  var_mean_8 = None
        sub_9: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_27, getitem_33);  getitem_33 = None
        add_28: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_32, 1e-05);  getitem_32 = None
        rsqrt_8: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_28);  add_28 = None
        mul_26: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_9, rsqrt_8);  sub_9 = rsqrt_8 = None
        mul_27: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_26, arg64_1);  mul_26 = arg64_1 = None
        add_29: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_27, arg65_1);  mul_27 = arg65_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_61: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_29, [256, 1024]);  add_29 = None
        permute_38: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg66_1, [1, 0]);  arg66_1 = None
        
        # No stacktrace found for following nodes
        mm_default_25: "f32[256, 4096]" = torch.ops.aten.mm.default(view_61, permute_38);  view_61 = permute_38 = None
        add_tensor_25: "f32[256, 4096]" = torch.ops.aten.add.Tensor(mm_default_25, arg67_1);  mm_default_25 = arg67_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_62: "f32[2, 128, 4096]" = torch.ops.aten.reshape.default(add_tensor_25, [2, 128, 4096]);  add_tensor_25 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_28: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_62, 0.5)
        mul_29: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_62, 0.7071067811865476);  view_62 = None
        erf_3: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_29);  mul_29 = None
        add_30: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_3, 1);  erf_3 = None
        mul_30: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_28, add_30);  mul_28 = add_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_63: "f32[256, 4096]" = torch.ops.aten.reshape.default(mul_30, [256, 4096]);  mul_30 = None
        permute_39: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg68_1, [1, 0]);  arg68_1 = None
        
        # No stacktrace found for following nodes
        mm_default_24: "f32[256, 1024]" = torch.ops.aten.mm.default(view_63, permute_39);  view_63 = permute_39 = None
        add_tensor_24: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_24, arg69_1);  mm_default_24 = arg69_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_64: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_24, [2, 128, 1024]);  add_tensor_24 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_31: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_27, view_64);  add_27 = view_64 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_9 = torch.ops.aten.var_mean.correction(add_31, [2], correction = 0, keepdim = True)
        getitem_34: "f32[2, 128, 1]" = var_mean_9[0]
        getitem_35: "f32[2, 128, 1]" = var_mean_9[1];  var_mean_9 = None
        sub_10: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_31, getitem_35);  getitem_35 = None
        add_32: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_34, 1e-05);  getitem_34 = None
        rsqrt_9: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_32);  add_32 = None
        mul_31: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_10, rsqrt_9);  sub_10 = rsqrt_9 = None
        mul_32: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_31, arg70_1);  mul_31 = arg70_1 = None
        add_33: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_32, arg71_1);  mul_32 = arg71_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_65: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_33, [256, 1024])
        permute_40: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg72_1, [1, 0]);  arg72_1 = None
        addmm_24: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg73_1, view_65, permute_40);  arg73_1 = view_65 = permute_40 = None
        view_66: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_24, [2, 128, 1024]);  addmm_24 = None
        view_67: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_66, [2, 128, -1, 64]);  view_66 = None
        permute_41: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_67, [0, 2, 1, 3]);  view_67 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_68: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_33, [256, 1024])
        permute_42: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg74_1, [1, 0]);  arg74_1 = None
        addmm_25: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg75_1, view_68, permute_42);  arg75_1 = view_68 = permute_42 = None
        view_69: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_25, [2, 128, 1024]);  addmm_25 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_72: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_69, [2, 128, -1, 64]);  view_69 = None
        permute_44: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_72, [0, 2, 1, 3]);  view_72 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_70: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_33, [256, 1024]);  add_33 = None
        permute_43: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg76_1, [1, 0]);  arg76_1 = None
        addmm_26: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg77_1, view_70, permute_43);  arg77_1 = view_70 = permute_43 = None
        view_71: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_26, [2, 128, 1024]);  addmm_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_73: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_71, [2, 128, -1, 64]);  view_71 = None
        permute_45: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_73, [0, 2, 1, 3]);  view_73 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_6: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_4 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_41, permute_44, permute_45, expand_6, False, scale = 0.125);  permute_41 = permute_44 = permute_45 = expand_6 = None
        getitem_36: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_4[0];  _scaled_dot_product_efficient_attention_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_46: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_36, [0, 2, 1, 3]);  getitem_36 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_74: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(permute_46, [2, 128, -1]);  permute_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_75: "f32[256, 1024]" = torch.ops.aten.reshape.default(view_74, [256, 1024]);  view_74 = None
        permute_47: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg78_1, [1, 0]);  arg78_1 = None
        
        # No stacktrace found for following nodes
        mm_default_23: "f32[256, 1024]" = torch.ops.aten.mm.default(view_75, permute_47);  view_75 = permute_47 = None
        add_tensor_23: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_23, arg79_1);  mm_default_23 = arg79_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_76: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_23, [2, 128, 1024]);  add_tensor_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_34: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_31, view_76);  add_31 = view_76 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_10 = torch.ops.aten.var_mean.correction(add_34, [2], correction = 0, keepdim = True)
        getitem_40: "f32[2, 128, 1]" = var_mean_10[0]
        getitem_41: "f32[2, 128, 1]" = var_mean_10[1];  var_mean_10 = None
        sub_11: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_34, getitem_41);  getitem_41 = None
        add_35: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_40, 1e-05);  getitem_40 = None
        rsqrt_10: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_35);  add_35 = None
        mul_33: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_11, rsqrt_10);  sub_11 = rsqrt_10 = None
        mul_34: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_33, arg80_1);  mul_33 = arg80_1 = None
        add_36: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_34, arg81_1);  mul_34 = arg81_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_77: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_36, [256, 1024]);  add_36 = None
        permute_48: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg82_1, [1, 0]);  arg82_1 = None
        
        # No stacktrace found for following nodes
        mm_default_22: "f32[256, 4096]" = torch.ops.aten.mm.default(view_77, permute_48);  view_77 = permute_48 = None
        add_tensor_22: "f32[256, 4096]" = torch.ops.aten.add.Tensor(mm_default_22, arg83_1);  mm_default_22 = arg83_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_78: "f32[2, 128, 4096]" = torch.ops.aten.reshape.default(add_tensor_22, [2, 128, 4096]);  add_tensor_22 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_35: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_78, 0.5)
        mul_36: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_78, 0.7071067811865476);  view_78 = None
        erf_4: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_36);  mul_36 = None
        add_37: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_4, 1);  erf_4 = None
        mul_37: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_35, add_37);  mul_35 = add_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_79: "f32[256, 4096]" = torch.ops.aten.reshape.default(mul_37, [256, 4096]);  mul_37 = None
        permute_49: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg84_1, [1, 0]);  arg84_1 = None
        
        # No stacktrace found for following nodes
        mm_default_21: "f32[256, 1024]" = torch.ops.aten.mm.default(view_79, permute_49);  view_79 = permute_49 = None
        add_tensor_21: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_21, arg85_1);  mm_default_21 = arg85_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_80: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_21, [2, 128, 1024]);  add_tensor_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_38: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_34, view_80);  add_34 = view_80 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_11 = torch.ops.aten.var_mean.correction(add_38, [2], correction = 0, keepdim = True)
        getitem_42: "f32[2, 128, 1]" = var_mean_11[0]
        getitem_43: "f32[2, 128, 1]" = var_mean_11[1];  var_mean_11 = None
        sub_12: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_38, getitem_43);  getitem_43 = None
        add_39: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_42, 1e-05);  getitem_42 = None
        rsqrt_11: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_39);  add_39 = None
        mul_38: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_12, rsqrt_11);  sub_12 = rsqrt_11 = None
        mul_39: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_38, arg86_1);  mul_38 = arg86_1 = None
        add_40: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_39, arg87_1);  mul_39 = arg87_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_81: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_40, [256, 1024])
        permute_50: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg88_1, [1, 0]);  arg88_1 = None
        addmm_30: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg89_1, view_81, permute_50);  arg89_1 = view_81 = permute_50 = None
        view_82: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_30, [2, 128, 1024]);  addmm_30 = None
        view_83: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_82, [2, 128, -1, 64]);  view_82 = None
        permute_51: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_83, [0, 2, 1, 3]);  view_83 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_84: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_40, [256, 1024])
        permute_52: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg90_1, [1, 0]);  arg90_1 = None
        addmm_31: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg91_1, view_84, permute_52);  arg91_1 = view_84 = permute_52 = None
        view_85: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_31, [2, 128, 1024]);  addmm_31 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_88: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_85, [2, 128, -1, 64]);  view_85 = None
        permute_54: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_88, [0, 2, 1, 3]);  view_88 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_86: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_40, [256, 1024]);  add_40 = None
        permute_53: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg92_1, [1, 0]);  arg92_1 = None
        addmm_32: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg93_1, view_86, permute_53);  arg93_1 = view_86 = permute_53 = None
        view_87: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_32, [2, 128, 1024]);  addmm_32 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_89: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_87, [2, 128, -1, 64]);  view_87 = None
        permute_55: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_89, [0, 2, 1, 3]);  view_89 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_7: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_5 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_51, permute_54, permute_55, expand_7, False, scale = 0.125);  permute_51 = permute_54 = permute_55 = expand_7 = None
        getitem_44: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_5[0];  _scaled_dot_product_efficient_attention_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_56: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_44, [0, 2, 1, 3]);  getitem_44 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_90: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(permute_56, [2, 128, -1]);  permute_56 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_91: "f32[256, 1024]" = torch.ops.aten.reshape.default(view_90, [256, 1024]);  view_90 = None
        permute_57: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg94_1, [1, 0]);  arg94_1 = None
        
        # No stacktrace found for following nodes
        mm_default_20: "f32[256, 1024]" = torch.ops.aten.mm.default(view_91, permute_57);  view_91 = permute_57 = None
        add_tensor_20: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_20, arg95_1);  mm_default_20 = arg95_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_92: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_20, [2, 128, 1024]);  add_tensor_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_41: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_38, view_92);  add_38 = view_92 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_12 = torch.ops.aten.var_mean.correction(add_41, [2], correction = 0, keepdim = True)
        getitem_48: "f32[2, 128, 1]" = var_mean_12[0]
        getitem_49: "f32[2, 128, 1]" = var_mean_12[1];  var_mean_12 = None
        sub_13: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_41, getitem_49);  getitem_49 = None
        add_42: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_48, 1e-05);  getitem_48 = None
        rsqrt_12: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_42);  add_42 = None
        mul_40: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_13, rsqrt_12);  sub_13 = rsqrt_12 = None
        mul_41: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_40, arg96_1);  mul_40 = arg96_1 = None
        add_43: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_41, arg97_1);  mul_41 = arg97_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_93: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_43, [256, 1024]);  add_43 = None
        permute_58: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg98_1, [1, 0]);  arg98_1 = None
        
        # No stacktrace found for following nodes
        mm_default_19: "f32[256, 4096]" = torch.ops.aten.mm.default(view_93, permute_58);  view_93 = permute_58 = None
        add_tensor_19: "f32[256, 4096]" = torch.ops.aten.add.Tensor(mm_default_19, arg99_1);  mm_default_19 = arg99_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_94: "f32[2, 128, 4096]" = torch.ops.aten.reshape.default(add_tensor_19, [2, 128, 4096]);  add_tensor_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_42: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_94, 0.5)
        mul_43: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_94, 0.7071067811865476);  view_94 = None
        erf_5: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_43);  mul_43 = None
        add_44: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_5, 1);  erf_5 = None
        mul_44: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_42, add_44);  mul_42 = add_44 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_95: "f32[256, 4096]" = torch.ops.aten.reshape.default(mul_44, [256, 4096]);  mul_44 = None
        permute_59: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg100_1, [1, 0]);  arg100_1 = None
        
        # No stacktrace found for following nodes
        mm_default_18: "f32[256, 1024]" = torch.ops.aten.mm.default(view_95, permute_59);  view_95 = permute_59 = None
        add_tensor_18: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_18, arg101_1);  mm_default_18 = arg101_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_96: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_18, [2, 128, 1024]);  add_tensor_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_45: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_41, view_96);  add_41 = view_96 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_13 = torch.ops.aten.var_mean.correction(add_45, [2], correction = 0, keepdim = True)
        getitem_50: "f32[2, 128, 1]" = var_mean_13[0]
        getitem_51: "f32[2, 128, 1]" = var_mean_13[1];  var_mean_13 = None
        sub_14: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_45, getitem_51);  getitem_51 = None
        add_46: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_50, 1e-05);  getitem_50 = None
        rsqrt_13: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_46);  add_46 = None
        mul_45: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_14, rsqrt_13);  sub_14 = rsqrt_13 = None
        mul_46: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_45, arg102_1);  mul_45 = arg102_1 = None
        add_47: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_46, arg103_1);  mul_46 = arg103_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_97: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_47, [256, 1024])
        permute_60: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg104_1, [1, 0]);  arg104_1 = None
        addmm_36: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg105_1, view_97, permute_60);  arg105_1 = view_97 = permute_60 = None
        view_98: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_36, [2, 128, 1024]);  addmm_36 = None
        view_99: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_98, [2, 128, -1, 64]);  view_98 = None
        permute_61: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_99, [0, 2, 1, 3]);  view_99 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_100: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_47, [256, 1024])
        permute_62: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg106_1, [1, 0]);  arg106_1 = None
        addmm_37: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg107_1, view_100, permute_62);  arg107_1 = view_100 = permute_62 = None
        view_101: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_37, [2, 128, 1024]);  addmm_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_104: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_101, [2, 128, -1, 64]);  view_101 = None
        permute_64: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_104, [0, 2, 1, 3]);  view_104 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_102: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_47, [256, 1024]);  add_47 = None
        permute_63: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg108_1, [1, 0]);  arg108_1 = None
        addmm_38: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg109_1, view_102, permute_63);  arg109_1 = view_102 = permute_63 = None
        view_103: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_38, [2, 128, 1024]);  addmm_38 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_105: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_103, [2, 128, -1, 64]);  view_103 = None
        permute_65: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_105, [0, 2, 1, 3]);  view_105 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_8: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_6 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_61, permute_64, permute_65, expand_8, False, scale = 0.125);  permute_61 = permute_64 = permute_65 = expand_8 = None
        getitem_52: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_6[0];  _scaled_dot_product_efficient_attention_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_66: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_52, [0, 2, 1, 3]);  getitem_52 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_106: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(permute_66, [2, 128, -1]);  permute_66 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_107: "f32[256, 1024]" = torch.ops.aten.reshape.default(view_106, [256, 1024]);  view_106 = None
        permute_67: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg110_1, [1, 0]);  arg110_1 = None
        
        # No stacktrace found for following nodes
        mm_default_17: "f32[256, 1024]" = torch.ops.aten.mm.default(view_107, permute_67);  view_107 = permute_67 = None
        add_tensor_17: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_17, arg111_1);  mm_default_17 = arg111_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_108: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_17, [2, 128, 1024]);  add_tensor_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_48: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_45, view_108);  add_45 = view_108 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_14 = torch.ops.aten.var_mean.correction(add_48, [2], correction = 0, keepdim = True)
        getitem_56: "f32[2, 128, 1]" = var_mean_14[0]
        getitem_57: "f32[2, 128, 1]" = var_mean_14[1];  var_mean_14 = None
        sub_15: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_48, getitem_57);  getitem_57 = None
        add_49: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_56, 1e-05);  getitem_56 = None
        rsqrt_14: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_49);  add_49 = None
        mul_47: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_15, rsqrt_14);  sub_15 = rsqrt_14 = None
        mul_48: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_47, arg112_1);  mul_47 = arg112_1 = None
        add_50: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_48, arg113_1);  mul_48 = arg113_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_109: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_50, [256, 1024]);  add_50 = None
        permute_68: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg114_1, [1, 0]);  arg114_1 = None
        
        # No stacktrace found for following nodes
        mm_default_16: "f32[256, 4096]" = torch.ops.aten.mm.default(view_109, permute_68);  view_109 = permute_68 = None
        add_tensor_16: "f32[256, 4096]" = torch.ops.aten.add.Tensor(mm_default_16, arg115_1);  mm_default_16 = arg115_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_110: "f32[2, 128, 4096]" = torch.ops.aten.reshape.default(add_tensor_16, [2, 128, 4096]);  add_tensor_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_49: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_110, 0.5)
        mul_50: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_110, 0.7071067811865476);  view_110 = None
        erf_6: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_50);  mul_50 = None
        add_51: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_6, 1);  erf_6 = None
        mul_51: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_49, add_51);  mul_49 = add_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_111: "f32[256, 4096]" = torch.ops.aten.reshape.default(mul_51, [256, 4096]);  mul_51 = None
        permute_69: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg116_1, [1, 0]);  arg116_1 = None
        
        # No stacktrace found for following nodes
        mm_default_15: "f32[256, 1024]" = torch.ops.aten.mm.default(view_111, permute_69);  view_111 = permute_69 = None
        add_tensor_15: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_15, arg117_1);  mm_default_15 = arg117_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_112: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_15, [2, 128, 1024]);  add_tensor_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_52: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_48, view_112);  add_48 = view_112 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_15 = torch.ops.aten.var_mean.correction(add_52, [2], correction = 0, keepdim = True)
        getitem_58: "f32[2, 128, 1]" = var_mean_15[0]
        getitem_59: "f32[2, 128, 1]" = var_mean_15[1];  var_mean_15 = None
        sub_16: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_52, getitem_59);  getitem_59 = None
        add_53: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_58, 1e-05);  getitem_58 = None
        rsqrt_15: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_53);  add_53 = None
        mul_52: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_16, rsqrt_15);  sub_16 = rsqrt_15 = None
        mul_53: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_52, arg118_1);  mul_52 = arg118_1 = None
        add_54: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_53, arg119_1);  mul_53 = arg119_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_113: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_54, [256, 1024])
        permute_70: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg120_1, [1, 0]);  arg120_1 = None
        addmm_42: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg121_1, view_113, permute_70);  arg121_1 = view_113 = permute_70 = None
        view_114: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_42, [2, 128, 1024]);  addmm_42 = None
        view_115: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_114, [2, 128, -1, 64]);  view_114 = None
        permute_71: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_115, [0, 2, 1, 3]);  view_115 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_116: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_54, [256, 1024])
        permute_72: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg122_1, [1, 0]);  arg122_1 = None
        addmm_43: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg123_1, view_116, permute_72);  arg123_1 = view_116 = permute_72 = None
        view_117: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_43, [2, 128, 1024]);  addmm_43 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_120: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_117, [2, 128, -1, 64]);  view_117 = None
        permute_74: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_120, [0, 2, 1, 3]);  view_120 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_118: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_54, [256, 1024]);  add_54 = None
        permute_73: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg124_1, [1, 0]);  arg124_1 = None
        addmm_44: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg125_1, view_118, permute_73);  arg125_1 = view_118 = permute_73 = None
        view_119: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_44, [2, 128, 1024]);  addmm_44 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_121: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_119, [2, 128, -1, 64]);  view_119 = None
        permute_75: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_121, [0, 2, 1, 3]);  view_121 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_9: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_7 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_71, permute_74, permute_75, expand_9, False, scale = 0.125);  permute_71 = permute_74 = permute_75 = expand_9 = None
        getitem_60: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_7[0];  _scaled_dot_product_efficient_attention_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_76: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_60, [0, 2, 1, 3]);  getitem_60 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_122: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(permute_76, [2, 128, -1]);  permute_76 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_123: "f32[256, 1024]" = torch.ops.aten.reshape.default(view_122, [256, 1024]);  view_122 = None
        permute_77: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg126_1, [1, 0]);  arg126_1 = None
        
        # No stacktrace found for following nodes
        mm_default_14: "f32[256, 1024]" = torch.ops.aten.mm.default(view_123, permute_77);  view_123 = permute_77 = None
        add_tensor_14: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_14, arg127_1);  mm_default_14 = arg127_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_124: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_14, [2, 128, 1024]);  add_tensor_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_55: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_52, view_124);  add_52 = view_124 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_16 = torch.ops.aten.var_mean.correction(add_55, [2], correction = 0, keepdim = True)
        getitem_64: "f32[2, 128, 1]" = var_mean_16[0]
        getitem_65: "f32[2, 128, 1]" = var_mean_16[1];  var_mean_16 = None
        sub_17: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_55, getitem_65);  getitem_65 = None
        add_56: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_64, 1e-05);  getitem_64 = None
        rsqrt_16: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_56);  add_56 = None
        mul_54: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_17, rsqrt_16);  sub_17 = rsqrt_16 = None
        mul_55: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_54, arg128_1);  mul_54 = arg128_1 = None
        add_57: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_55, arg129_1);  mul_55 = arg129_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_125: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_57, [256, 1024]);  add_57 = None
        permute_78: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg130_1, [1, 0]);  arg130_1 = None
        
        # No stacktrace found for following nodes
        mm_default_13: "f32[256, 4096]" = torch.ops.aten.mm.default(view_125, permute_78);  view_125 = permute_78 = None
        add_tensor_13: "f32[256, 4096]" = torch.ops.aten.add.Tensor(mm_default_13, arg131_1);  mm_default_13 = arg131_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_126: "f32[2, 128, 4096]" = torch.ops.aten.reshape.default(add_tensor_13, [2, 128, 4096]);  add_tensor_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_56: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_126, 0.5)
        mul_57: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_126, 0.7071067811865476);  view_126 = None
        erf_7: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_57);  mul_57 = None
        add_58: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_7, 1);  erf_7 = None
        mul_58: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_56, add_58);  mul_56 = add_58 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_127: "f32[256, 4096]" = torch.ops.aten.reshape.default(mul_58, [256, 4096]);  mul_58 = None
        permute_79: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg132_1, [1, 0]);  arg132_1 = None
        
        # No stacktrace found for following nodes
        mm_default_12: "f32[256, 1024]" = torch.ops.aten.mm.default(view_127, permute_79);  view_127 = permute_79 = None
        add_tensor_12: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_12, arg133_1);  mm_default_12 = arg133_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_128: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_12, [2, 128, 1024]);  add_tensor_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_59: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_55, view_128);  add_55 = view_128 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_17 = torch.ops.aten.var_mean.correction(add_59, [2], correction = 0, keepdim = True)
        getitem_66: "f32[2, 128, 1]" = var_mean_17[0]
        getitem_67: "f32[2, 128, 1]" = var_mean_17[1];  var_mean_17 = None
        sub_18: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_59, getitem_67);  getitem_67 = None
        add_60: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_66, 1e-05);  getitem_66 = None
        rsqrt_17: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_60);  add_60 = None
        mul_59: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_18, rsqrt_17);  sub_18 = rsqrt_17 = None
        mul_60: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_59, arg134_1);  mul_59 = arg134_1 = None
        add_61: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_60, arg135_1);  mul_60 = arg135_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_129: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_61, [256, 1024])
        permute_80: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg136_1, [1, 0]);  arg136_1 = None
        addmm_48: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg137_1, view_129, permute_80);  arg137_1 = view_129 = permute_80 = None
        view_130: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_48, [2, 128, 1024]);  addmm_48 = None
        view_131: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_130, [2, 128, -1, 64]);  view_130 = None
        permute_81: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_131, [0, 2, 1, 3]);  view_131 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_132: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_61, [256, 1024])
        permute_82: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg138_1, [1, 0]);  arg138_1 = None
        addmm_49: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg139_1, view_132, permute_82);  arg139_1 = view_132 = permute_82 = None
        view_133: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_49, [2, 128, 1024]);  addmm_49 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_136: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_133, [2, 128, -1, 64]);  view_133 = None
        permute_84: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_136, [0, 2, 1, 3]);  view_136 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_134: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_61, [256, 1024]);  add_61 = None
        permute_83: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg140_1, [1, 0]);  arg140_1 = None
        addmm_50: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg141_1, view_134, permute_83);  arg141_1 = view_134 = permute_83 = None
        view_135: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_50, [2, 128, 1024]);  addmm_50 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_137: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_135, [2, 128, -1, 64]);  view_135 = None
        permute_85: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_137, [0, 2, 1, 3]);  view_137 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_10: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_8 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_81, permute_84, permute_85, expand_10, False, scale = 0.125);  permute_81 = permute_84 = permute_85 = expand_10 = None
        getitem_68: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_8[0];  _scaled_dot_product_efficient_attention_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_86: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_68, [0, 2, 1, 3]);  getitem_68 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_138: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(permute_86, [2, 128, -1]);  permute_86 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_139: "f32[256, 1024]" = torch.ops.aten.reshape.default(view_138, [256, 1024]);  view_138 = None
        permute_87: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg142_1, [1, 0]);  arg142_1 = None
        
        # No stacktrace found for following nodes
        mm_default_11: "f32[256, 1024]" = torch.ops.aten.mm.default(view_139, permute_87);  view_139 = permute_87 = None
        add_tensor_11: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_11, arg143_1);  mm_default_11 = arg143_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_140: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_11, [2, 128, 1024]);  add_tensor_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_62: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_59, view_140);  add_59 = view_140 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_18 = torch.ops.aten.var_mean.correction(add_62, [2], correction = 0, keepdim = True)
        getitem_72: "f32[2, 128, 1]" = var_mean_18[0]
        getitem_73: "f32[2, 128, 1]" = var_mean_18[1];  var_mean_18 = None
        sub_19: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_62, getitem_73);  getitem_73 = None
        add_63: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_72, 1e-05);  getitem_72 = None
        rsqrt_18: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_63);  add_63 = None
        mul_61: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_19, rsqrt_18);  sub_19 = rsqrt_18 = None
        mul_62: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_61, arg144_1);  mul_61 = arg144_1 = None
        add_64: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_62, arg145_1);  mul_62 = arg145_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_141: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_64, [256, 1024]);  add_64 = None
        permute_88: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg146_1, [1, 0]);  arg146_1 = None
        
        # No stacktrace found for following nodes
        mm_default_10: "f32[256, 4096]" = torch.ops.aten.mm.default(view_141, permute_88);  view_141 = permute_88 = None
        add_tensor_10: "f32[256, 4096]" = torch.ops.aten.add.Tensor(mm_default_10, arg147_1);  mm_default_10 = arg147_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_142: "f32[2, 128, 4096]" = torch.ops.aten.reshape.default(add_tensor_10, [2, 128, 4096]);  add_tensor_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_63: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_142, 0.5)
        mul_64: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_142, 0.7071067811865476);  view_142 = None
        erf_8: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_64);  mul_64 = None
        add_65: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_8, 1);  erf_8 = None
        mul_65: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_63, add_65);  mul_63 = add_65 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_143: "f32[256, 4096]" = torch.ops.aten.reshape.default(mul_65, [256, 4096]);  mul_65 = None
        permute_89: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg148_1, [1, 0]);  arg148_1 = None
        
        # No stacktrace found for following nodes
        mm_default_9: "f32[256, 1024]" = torch.ops.aten.mm.default(view_143, permute_89);  view_143 = permute_89 = None
        add_tensor_9: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_9, arg149_1);  mm_default_9 = arg149_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_144: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_9, [2, 128, 1024]);  add_tensor_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_66: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_62, view_144);  add_62 = view_144 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_19 = torch.ops.aten.var_mean.correction(add_66, [2], correction = 0, keepdim = True)
        getitem_74: "f32[2, 128, 1]" = var_mean_19[0]
        getitem_75: "f32[2, 128, 1]" = var_mean_19[1];  var_mean_19 = None
        sub_20: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_66, getitem_75);  getitem_75 = None
        add_67: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_74, 1e-05);  getitem_74 = None
        rsqrt_19: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_67);  add_67 = None
        mul_66: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_20, rsqrt_19);  sub_20 = rsqrt_19 = None
        mul_67: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_66, arg150_1);  mul_66 = arg150_1 = None
        add_68: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_67, arg151_1);  mul_67 = arg151_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_145: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_68, [256, 1024])
        permute_90: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg152_1, [1, 0]);  arg152_1 = None
        addmm_54: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg153_1, view_145, permute_90);  arg153_1 = view_145 = permute_90 = None
        view_146: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_54, [2, 128, 1024]);  addmm_54 = None
        view_147: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_146, [2, 128, -1, 64]);  view_146 = None
        permute_91: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_147, [0, 2, 1, 3]);  view_147 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_148: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_68, [256, 1024])
        permute_92: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg154_1, [1, 0]);  arg154_1 = None
        addmm_55: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg155_1, view_148, permute_92);  arg155_1 = view_148 = permute_92 = None
        view_149: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_55, [2, 128, 1024]);  addmm_55 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_152: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_149, [2, 128, -1, 64]);  view_149 = None
        permute_94: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_152, [0, 2, 1, 3]);  view_152 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_150: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_68, [256, 1024]);  add_68 = None
        permute_93: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg156_1, [1, 0]);  arg156_1 = None
        addmm_56: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg157_1, view_150, permute_93);  arg157_1 = view_150 = permute_93 = None
        view_151: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_56, [2, 128, 1024]);  addmm_56 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_153: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_151, [2, 128, -1, 64]);  view_151 = None
        permute_95: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_153, [0, 2, 1, 3]);  view_153 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_11: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_9 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_91, permute_94, permute_95, expand_11, False, scale = 0.125);  permute_91 = permute_94 = permute_95 = expand_11 = None
        getitem_76: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_9[0];  _scaled_dot_product_efficient_attention_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_96: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_76, [0, 2, 1, 3]);  getitem_76 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_154: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(permute_96, [2, 128, -1]);  permute_96 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_155: "f32[256, 1024]" = torch.ops.aten.reshape.default(view_154, [256, 1024]);  view_154 = None
        permute_97: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg158_1, [1, 0]);  arg158_1 = None
        
        # No stacktrace found for following nodes
        mm_default_8: "f32[256, 1024]" = torch.ops.aten.mm.default(view_155, permute_97);  view_155 = permute_97 = None
        add_tensor_8: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_8, arg159_1);  mm_default_8 = arg159_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_156: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_8, [2, 128, 1024]);  add_tensor_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_69: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_66, view_156);  add_66 = view_156 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_20 = torch.ops.aten.var_mean.correction(add_69, [2], correction = 0, keepdim = True)
        getitem_80: "f32[2, 128, 1]" = var_mean_20[0]
        getitem_81: "f32[2, 128, 1]" = var_mean_20[1];  var_mean_20 = None
        sub_21: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_69, getitem_81);  getitem_81 = None
        add_70: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_80, 1e-05);  getitem_80 = None
        rsqrt_20: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_70);  add_70 = None
        mul_68: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_21, rsqrt_20);  sub_21 = rsqrt_20 = None
        mul_69: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_68, arg160_1);  mul_68 = arg160_1 = None
        add_71: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_69, arg161_1);  mul_69 = arg161_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_157: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_71, [256, 1024]);  add_71 = None
        permute_98: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg162_1, [1, 0]);  arg162_1 = None
        
        # No stacktrace found for following nodes
        mm_default_7: "f32[256, 4096]" = torch.ops.aten.mm.default(view_157, permute_98);  view_157 = permute_98 = None
        add_tensor_7: "f32[256, 4096]" = torch.ops.aten.add.Tensor(mm_default_7, arg163_1);  mm_default_7 = arg163_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_158: "f32[2, 128, 4096]" = torch.ops.aten.reshape.default(add_tensor_7, [2, 128, 4096]);  add_tensor_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_70: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_158, 0.5)
        mul_71: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_158, 0.7071067811865476);  view_158 = None
        erf_9: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_71);  mul_71 = None
        add_72: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_9, 1);  erf_9 = None
        mul_72: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_70, add_72);  mul_70 = add_72 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_159: "f32[256, 4096]" = torch.ops.aten.reshape.default(mul_72, [256, 4096]);  mul_72 = None
        permute_99: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg164_1, [1, 0]);  arg164_1 = None
        
        # No stacktrace found for following nodes
        mm_default_6: "f32[256, 1024]" = torch.ops.aten.mm.default(view_159, permute_99);  view_159 = permute_99 = None
        add_tensor_6: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_6, arg165_1);  mm_default_6 = arg165_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_160: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_6, [2, 128, 1024]);  add_tensor_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_73: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_69, view_160);  add_69 = view_160 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_21 = torch.ops.aten.var_mean.correction(add_73, [2], correction = 0, keepdim = True)
        getitem_82: "f32[2, 128, 1]" = var_mean_21[0]
        getitem_83: "f32[2, 128, 1]" = var_mean_21[1];  var_mean_21 = None
        sub_22: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_73, getitem_83);  getitem_83 = None
        add_74: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_82, 1e-05);  getitem_82 = None
        rsqrt_21: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_74);  add_74 = None
        mul_73: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_22, rsqrt_21);  sub_22 = rsqrt_21 = None
        mul_74: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_73, arg166_1);  mul_73 = arg166_1 = None
        add_75: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_74, arg167_1);  mul_74 = arg167_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_161: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_75, [256, 1024])
        permute_100: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg168_1, [1, 0]);  arg168_1 = None
        addmm_60: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg169_1, view_161, permute_100);  arg169_1 = view_161 = permute_100 = None
        view_162: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_60, [2, 128, 1024]);  addmm_60 = None
        view_163: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_162, [2, 128, -1, 64]);  view_162 = None
        permute_101: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_163, [0, 2, 1, 3]);  view_163 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_164: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_75, [256, 1024])
        permute_102: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg170_1, [1, 0]);  arg170_1 = None
        addmm_61: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg171_1, view_164, permute_102);  arg171_1 = view_164 = permute_102 = None
        view_165: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_61, [2, 128, 1024]);  addmm_61 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_168: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_165, [2, 128, -1, 64]);  view_165 = None
        permute_104: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_168, [0, 2, 1, 3]);  view_168 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_166: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_75, [256, 1024]);  add_75 = None
        permute_103: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg172_1, [1, 0]);  arg172_1 = None
        addmm_62: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg173_1, view_166, permute_103);  arg173_1 = view_166 = permute_103 = None
        view_167: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_62, [2, 128, 1024]);  addmm_62 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_169: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_167, [2, 128, -1, 64]);  view_167 = None
        permute_105: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_169, [0, 2, 1, 3]);  view_169 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_12: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128])
        _scaled_dot_product_efficient_attention_10 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_101, permute_104, permute_105, expand_12, False, scale = 0.125);  permute_101 = permute_104 = permute_105 = expand_12 = None
        getitem_84: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_10[0];  _scaled_dot_product_efficient_attention_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_106: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_84, [0, 2, 1, 3]);  getitem_84 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_170: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(permute_106, [2, 128, -1]);  permute_106 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_171: "f32[256, 1024]" = torch.ops.aten.reshape.default(view_170, [256, 1024]);  view_170 = None
        permute_107: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg174_1, [1, 0]);  arg174_1 = None
        
        # No stacktrace found for following nodes
        mm_default_5: "f32[256, 1024]" = torch.ops.aten.mm.default(view_171, permute_107);  view_171 = permute_107 = None
        add_tensor_5: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_5, arg175_1);  mm_default_5 = arg175_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_172: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_5, [2, 128, 1024]);  add_tensor_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_76: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_73, view_172);  add_73 = view_172 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_22 = torch.ops.aten.var_mean.correction(add_76, [2], correction = 0, keepdim = True)
        getitem_88: "f32[2, 128, 1]" = var_mean_22[0]
        getitem_89: "f32[2, 128, 1]" = var_mean_22[1];  var_mean_22 = None
        sub_23: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_76, getitem_89);  getitem_89 = None
        add_77: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_88, 1e-05);  getitem_88 = None
        rsqrt_22: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_77);  add_77 = None
        mul_75: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_23, rsqrt_22);  sub_23 = rsqrt_22 = None
        mul_76: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_75, arg176_1);  mul_75 = arg176_1 = None
        add_78: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_76, arg177_1);  mul_76 = arg177_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_173: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_78, [256, 1024]);  add_78 = None
        permute_108: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg178_1, [1, 0]);  arg178_1 = None
        
        # No stacktrace found for following nodes
        mm_default_4: "f32[256, 4096]" = torch.ops.aten.mm.default(view_173, permute_108);  view_173 = permute_108 = None
        add_tensor_4: "f32[256, 4096]" = torch.ops.aten.add.Tensor(mm_default_4, arg179_1);  mm_default_4 = arg179_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_174: "f32[2, 128, 4096]" = torch.ops.aten.reshape.default(add_tensor_4, [2, 128, 4096]);  add_tensor_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_77: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_174, 0.5)
        mul_78: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_174, 0.7071067811865476);  view_174 = None
        erf_10: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_78);  mul_78 = None
        add_79: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_10, 1);  erf_10 = None
        mul_79: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_77, add_79);  mul_77 = add_79 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_175: "f32[256, 4096]" = torch.ops.aten.reshape.default(mul_79, [256, 4096]);  mul_79 = None
        permute_109: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg180_1, [1, 0]);  arg180_1 = None
        
        # No stacktrace found for following nodes
        mm_default_3: "f32[256, 1024]" = torch.ops.aten.mm.default(view_175, permute_109);  view_175 = permute_109 = None
        add_tensor_3: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_3, arg181_1);  mm_default_3 = arg181_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_176: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_3, [2, 128, 1024]);  add_tensor_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_80: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_76, view_176);  add_76 = view_176 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:324 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_23 = torch.ops.aten.var_mean.correction(add_80, [2], correction = 0, keepdim = True)
        getitem_90: "f32[2, 128, 1]" = var_mean_23[0]
        getitem_91: "f32[2, 128, 1]" = var_mean_23[1];  var_mean_23 = None
        sub_24: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_80, getitem_91);  getitem_91 = None
        add_81: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_90, 1e-05);  getitem_90 = None
        rsqrt_23: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_81);  add_81 = None
        mul_80: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_24, rsqrt_23);  sub_24 = rsqrt_23 = None
        mul_81: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_80, arg182_1);  mul_80 = arg182_1 = None
        add_82: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_81, arg183_1);  mul_81 = arg183_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:228 in forward, code: query_states = self.q_proj(hidden_states).view(*q_input_shape).transpose(1, 2)
        view_177: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_82, [256, 1024])
        permute_110: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg184_1, [1, 0]);  arg184_1 = None
        addmm_66: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg185_1, view_177, permute_110);  arg185_1 = view_177 = permute_110 = None
        view_178: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_66, [2, 128, 1024]);  addmm_66 = None
        view_179: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_178, [2, 128, -1, 64]);  view_178 = None
        permute_111: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_179, [0, 2, 1, 3]);  view_179 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:248 in forward, code: key_states = self.k_proj(current_states)
        view_180: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_82, [256, 1024])
        permute_112: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg186_1, [1, 0]);  arg186_1 = None
        addmm_67: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg187_1, view_180, permute_112);  arg187_1 = view_180 = permute_112 = None
        view_181: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_67, [2, 128, 1024]);  addmm_67 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:250 in forward, code: key_states = key_states.view(*kv_input_shape).transpose(1, 2)
        view_184: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_181, [2, 128, -1, 64]);  view_181 = None
        permute_114: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_184, [0, 2, 1, 3]);  view_184 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:249 in forward, code: value_states = self.v_proj(current_states)
        view_182: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_82, [256, 1024]);  add_82 = None
        permute_113: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg188_1, [1, 0]);  arg188_1 = None
        addmm_68: "f32[256, 1024]" = torch.ops.aten.addmm.default(arg189_1, view_182, permute_113);  arg189_1 = view_182 = permute_113 = None
        view_183: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(addmm_68, [2, 128, 1024]);  addmm_68 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:251 in forward, code: value_states = value_states.view(*kv_input_shape).transpose(1, 2)
        view_185: "f32[2, 128, 16, 64]" = torch.ops.aten.reshape.default(view_183, [2, 128, -1, 64]);  view_183 = None
        permute_115: "f32[2, 16, 128, 64]" = torch.ops.aten.permute.default(view_185, [0, 2, 1, 3]);  view_185 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:96 in sdpa_attention_forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_13: "f32[2, 16, 128, 128]" = torch.ops.aten.expand.default(where, [2, 16, 128, 128]);  where = None
        _scaled_dot_product_efficient_attention_11 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_111, permute_114, permute_115, expand_13, False, scale = 0.125);  permute_111 = permute_114 = permute_115 = expand_13 = None
        getitem_92: "f32[2, 16, 128, 64]" = _scaled_dot_product_efficient_attention_11[0];  _scaled_dot_product_efficient_attention_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/integrations/sdpa_attention.py:106 in sdpa_attention_forward, code: attn_output = attn_output.transpose(1, 2).contiguous()
        permute_116: "f32[2, 128, 16, 64]" = torch.ops.aten.permute.default(getitem_92, [0, 2, 1, 3]);  getitem_92 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:280 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        view_186: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(permute_116, [2, 128, -1]);  permute_116 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_187: "f32[256, 1024]" = torch.ops.aten.reshape.default(view_186, [256, 1024]);  view_186 = None
        permute_117: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg190_1, [1, 0]);  arg190_1 = None
        
        # No stacktrace found for following nodes
        mm_default_2: "f32[256, 1024]" = torch.ops.aten.mm.default(view_187, permute_117);  view_187 = permute_117 = None
        add_tensor_2: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default_2, arg191_1);  mm_default_2 = arg191_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:281 in forward, code: attn_output = self.out_proj(attn_output)
        view_188: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor_2, [2, 128, 1024]);  add_tensor_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:332 in forward, code: hidden_states = residual + hidden_states
        add_83: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_80, view_188);  add_80 = view_188 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:335 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_24 = torch.ops.aten.var_mean.correction(add_83, [2], correction = 0, keepdim = True)
        getitem_96: "f32[2, 128, 1]" = var_mean_24[0]
        getitem_97: "f32[2, 128, 1]" = var_mean_24[1];  var_mean_24 = None
        sub_25: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_83, getitem_97);  getitem_97 = None
        add_84: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_96, 1e-05);  getitem_96 = None
        rsqrt_24: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_84);  add_84 = None
        mul_82: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_25, rsqrt_24);  sub_25 = rsqrt_24 = None
        mul_83: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_82, arg192_1);  mul_82 = arg192_1 = None
        add_85: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_83, arg193_1);  mul_83 = arg193_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_189: "f32[256, 1024]" = torch.ops.aten.reshape.default(add_85, [256, 1024]);  add_85 = None
        permute_118: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg194_1, [1, 0]);  arg194_1 = None
        
        # No stacktrace found for following nodes
        mm_default_1: "f32[256, 4096]" = torch.ops.aten.mm.default(view_189, permute_118);  view_189 = permute_118 = None
        add_tensor_1: "f32[256, 4096]" = torch.ops.aten.add.Tensor(mm_default_1, arg195_1);  mm_default_1 = arg195_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:336 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_190: "f32[2, 128, 4096]" = torch.ops.aten.reshape.default(add_tensor_1, [2, 128, 4096]);  add_tensor_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:85 in forward, code: return self.act(input)
        mul_84: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_190, 0.5)
        mul_85: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(view_190, 0.7071067811865476);  view_190 = None
        erf_11: "f32[2, 128, 4096]" = torch.ops.aten.erf.default(mul_85);  mul_85 = None
        add_86: "f32[2, 128, 4096]" = torch.ops.aten.add.Tensor(erf_11, 1);  erf_11 = None
        mul_86: "f32[2, 128, 4096]" = torch.ops.aten.mul.Tensor(mul_84, add_86);  mul_84 = add_86 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_191: "f32[256, 4096]" = torch.ops.aten.reshape.default(mul_86, [256, 4096]);  mul_86 = None
        permute_119: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg196_1, [1, 0]);  arg196_1 = None
        
        # No stacktrace found for following nodes
        mm_default: "f32[256, 1024]" = torch.ops.aten.mm.default(view_191, permute_119);  view_191 = permute_119 = None
        add_tensor: "f32[256, 1024]" = torch.ops.aten.add.Tensor(mm_default, arg197_1);  mm_default = arg197_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:338 in forward, code: hidden_states = self.fc2(hidden_states)
        view_192: "f32[2, 128, 1024]" = torch.ops.aten.reshape.default(add_tensor, [2, 128, 1024]);  add_tensor = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:340 in forward, code: hidden_states = residual + hidden_states
        add_87: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(add_83, view_192);  add_83 = view_192 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/mbart/modeling_mbart.py:878 in forward, code: hidden_states = self.layer_norm(hidden_states)
        var_mean_25 = torch.ops.aten.var_mean.correction(add_87, [2], correction = 0, keepdim = True)
        getitem_98: "f32[2, 128, 1]" = var_mean_25[0]
        getitem_99: "f32[2, 128, 1]" = var_mean_25[1];  var_mean_25 = None
        sub_26: "f32[2, 128, 1024]" = torch.ops.aten.sub.Tensor(add_87, getitem_99);  add_87 = getitem_99 = None
        add_88: "f32[2, 128, 1]" = torch.ops.aten.add.Tensor(getitem_98, 1e-05);  getitem_98 = None
        rsqrt_25: "f32[2, 128, 1]" = torch.ops.aten.rsqrt.default(add_88);  add_88 = None
        mul_87: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(sub_26, rsqrt_25);  sub_26 = rsqrt_25 = None
        mul_88: "f32[2, 128, 1024]" = torch.ops.aten.mul.Tensor(mul_87, arg198_1);  mul_87 = arg198_1 = None
        add_89: "f32[2, 128, 1024]" = torch.ops.aten.add.Tensor(mul_88, arg199_1);  mul_88 = arg199_1 = None
        return (add_89,)
        

# ===== run_2025_10_19_04_14_08_043050-pid_19/torchinductor/model__3_inference_3.3/ir_post_fusion.txt =====
op0_op1_op3_op4_op5_op7: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op0_op1_op3_op4_op5_op7.writes = 
    [   MemoryDep('buf0', c0, {c0: 256}),
        MemoryDep('buf1', c0, {c0: 256}),
        MemoryDep('buf3', c0, {c0: 262144}),
        MemoryDep('buf4', c0, {c0: 256}),
        MemoryDep('buf5', c0, {c0: 256}),
        MemoryDep('buf7', c0, {c0: 262144})]
op0_op1_op3_op4_op5_op7.unmet_dependencies = []
op0_op1_op3_op4_op5_op7.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 256}),
        MemoryDep('arg1_1', c1 + 1024*tmp0, {c0: 256, c1: 1024}),
        MemoryDep('arg2_1', c1 + 2048, {c0: 2, c1: 131072}),
        MemoryDep('arg3_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg4_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg6_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg7_1', c1, {c0: 256, c1: 1024})]
op0_op1_op3_op4_op5_op7.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf0.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf1.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
    ]
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf4.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
    ]
]
op0_op1_op3_op4_op5_op7.snodes[0] =
op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 256})]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 256}),
        MemoryDep('arg1_1', c1 + 1024*tmp0, {c0: 256, c1: 1024}),
        MemoryDep('arg2_1', c1 + 2048, {c0: 2, c1: 131072})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf0.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (256, 1024)
op0.sizes = ([2, 128], [1024])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[250027, 1024], stride=[1024, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.float32, size=[1026, 1024], stride=[1024, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op0_loop_body:
    var_ranges = {p0: 2, p1: 128, p2: 1024}
    index0 = 128*p0 + p1
    index1 = 1024*indirect0 + p2
    index2 = p1 + 2
    index3 = 1026
    index4 = 1024*p1 + p2 + 2048
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        constant = ops.constant(32.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf0', get_index_5, getitem)
        return store_reduction
op0_op1_op3_op4_op5_op7.snodes[1] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 256})]
op1.unmet_dependencies = []
op1.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 256}),
        MemoryDep('arg1_1', c1 + 1024*tmp0, {c0: 256, c1: 1024}),
        MemoryDep('arg2_1', c1 + 2048, {c0: 2, c1: 131072})]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf1.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (256, 1024)
op1.sizes = ([2, 128], [1024])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[250027, 1024], stride=[1024, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.float32, size=[1026, 1024], stride=[1024, 1])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op1_loop_body:
    var_ranges = {p0: 2, p1: 128, p2: 1024}
    index0 = 128*p0 + p1
    index1 = 1024*indirect0 + p2
    index2 = p1 + 2
    index3 = 1026
    index4 = 1024*p1 + p2 + 2048
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        constant = ops.constant(32.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf1', get_index_5, getitem_1)
        return store_reduction
op0_op1_op3_op4_op5_op7.snodes[2] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 262144})]
op3.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 256}), MemoryDep('buf1', c0, {c0: 256})]
op3.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 256}),
        MemoryDep('arg1_1', c1 + 1024*tmp0, {c0: 256, c1: 1024}),
        MemoryDep('arg2_1', c1 + 2048, {c0: 2, c1: 131072}),
        MemoryDep('arg3_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg4_1', c1, {c0: 256, c1: 1024})]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (262144, 1)
op3.sizes = ([2, 128, 1024], [])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[250027, 1024], stride=[1024, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.float32, size=[1026, 1024], stride=[1024, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg3_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg4_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op3_loop_body:
    var_ranges = {p0: 2, p1: 128, p2: 1024}
    index0 = 128*p0 + p1
    index1 = 1024*indirect0 + p2
    index2 = p1 + 2
    index3 = 1026
    index4 = 1024*p1 + p2 + 2048
    index5 = p2
    index6 = 131072*p0 + 1024*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        constant = ops.constant(32.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(mul, load_2)
        get_index_5 = self.get_index('index0')
        load_3 = ops.load('buf0', get_index_5)
        sub = ops.sub(add, load_3)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_6)
        constant_1 = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_1)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_7 = self.get_index('index5')
        load_5 = ops.load('arg3_1', get_index_7)
        mul_2 = ops.mul(mul_1, load_5)
        get_index_8 = self.get_index('index5')
        load_6 = ops.load('arg4_1', get_index_8)
        add_2 = ops.add(mul_2, load_6)
        get_index_9 = self.get_index('index6')
        store = ops.store('buf3', get_index_9, add_2, None)
        return store
op0_op1_op3_op4_op5_op7.snodes[3] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 256})]
op4.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 262144})]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf4.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (256, 1024)
op4.sizes = ([256], [1024])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op4_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf4', get_index_1, getitem)
        return store_reduction
op0_op1_op3_op4_op5_op7.snodes[4] =
op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 256})]
op5.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 262144})]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (256, 1024)
op5.sizes = ([256], [1024])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op5_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf5', get_index_1, getitem_1)
        return store_reduction
op0_op1_op3_op4_op5_op7.snodes[5] =
op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 262144})]
op7.unmet_dependencies = 
    [   MemoryDep('buf3', c0, {c0: 262144}),
        MemoryDep('buf4', c0, {c0: 256}),
        MemoryDep('buf5', c0, {c0: 256})]
op7.met_dependencies = 
    [   MemoryDep('arg6_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg7_1', c1, {c0: 256, c1: 1024})]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
    ]
]
op7.group.device = cuda:0
op7.group.iteration = (262144, 1)
op7.sizes = ([256, 1024], [])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg6_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg7_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op7_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf4', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf5', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg6_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg7_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf7', get_index_5, add_1, None)
        return store


op8: ExternKernelSchedulerNode(ExternKernelOut)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op8.met_dependencies = [StarDep(name='arg8_1', mode=None), StarDep(name='arg9_1', mode=None)]
op8.outputs = [
    buf8: ExternKernelOut
    buf8.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op8.node.kernel = extern_kernels.addmm


op9: ExternKernelSchedulerNode(ExternKernelOut)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op9.met_dependencies = [StarDep(name='arg10_1', mode=None), StarDep(name='arg11_1', mode=None)]
op9.outputs = [
    buf9: ExternKernelOut
    buf9.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op9.node.kernel = extern_kernels.addmm


op10: ExternKernelSchedulerNode(ExternKernelOut)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op10.met_dependencies = [StarDep(name='arg12_1', mode=None), StarDep(name='arg13_1', mode=None)]
op10.outputs = [
    buf10: ExternKernelOut
    buf10.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf10.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op10.node.kernel = extern_kernels.addmm


op11_op33_op55_op77: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op11_op33_op55_op77.writes = 
    [   MemoryDep('buf11', c0, {c0: 524288}),
        MemoryDep('buf33', c0, {c0: 524288}),
        MemoryDep('buf55', c0, {c0: 524288}),
        MemoryDep('buf77', c0, {c0: 524288})]
op11_op33_op55_op77.unmet_dependencies = []
op11_op33_op55_op77.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op11_op33_op55_op77.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf33.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf55.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op11_op33_op55_op77.snodes[0] =
op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 524288})]
op11.unmet_dependencies = []
op11.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (524288, 1)
op11.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op11_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf11', get_index_2, where, None)
        return store
op11_op33_op55_op77.snodes[1] =
op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 524288})]
op33.unmet_dependencies = []
op33.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf33.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (524288, 1)
op33.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op33_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf33', get_index_2, where, None)
        return store
op11_op33_op55_op77.snodes[2] =
op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 524288})]
op55.unmet_dependencies = []
op55.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf55.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (524288, 1)
op55.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op55_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf55', get_index_2, where, None)
        return store
op11_op33_op55_op77.snodes[3] =
op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 524288})]
op77.unmet_dependencies = []
op77.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (524288, 1)
op77.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op77_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf77', get_index_2, where, None)
        return store


op12: ExternKernelSchedulerNode(FallbackKernel)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = 
    [   StarDep(name='buf10', mode=None),
        StarDep(name='buf11', mode=None),
        StarDep(name='buf8', mode=None),
        StarDep(name='buf9', mode=None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: FallbackKernel
    buf12.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op13: ExternKernelSchedulerNode(MultiOutput)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf12', mode=None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: MultiOutput
    buf13.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op13.node.kernel = None


op17: ExternKernelSchedulerNode(ExternKernelOut)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf13', mode=None)]
op17.met_dependencies = [StarDep(name='arg14_1', mode=None)]
op17.outputs = [
    buf17: ExternKernelOut
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
    ]
]
op17.node.kernel = extern_kernels.mm


op18_op19_op21: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op18_op19_op21.writes = 
    [   MemoryDep('buf18', c0, {c0: 256}),
        MemoryDep('buf19', c0, {c0: 256}),
        MemoryDep('buf21', c0, {c0: 262144})]
op18_op19_op21.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 262144}), MemoryDep('buf3', c0, {c0: 262144})]
op18_op19_op21.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg16_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg17_1', c1, {c0: 256, c1: 1024})]
op18_op19_op21.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op18_op19_op21.snodes[0] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 256})]
op18.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 262144}), MemoryDep('buf3', c0, {c0: 262144})]
op18.met_dependencies = [MemoryDep('arg15_1', c1, {c0: 256, c1: 1024})]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (256, 1024)
op18.sizes = ([256], [1024])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg15_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op18_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg15_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf18', get_index_3, getitem)
        return store_reduction
op18_op19_op21.snodes[1] =
op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 256})]
op19.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 262144}), MemoryDep('buf3', c0, {c0: 262144})]
op19.met_dependencies = [MemoryDep('arg15_1', c1, {c0: 256, c1: 1024})]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (256, 1024)
op19.sizes = ([256], [1024])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg15_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op19_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg15_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf19', get_index_3, getitem_1)
        return store_reduction
op18_op19_op21.snodes[2] =
op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 262144})]
op21.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 262144}),
        MemoryDep('buf18', c0, {c0: 256}),
        MemoryDep('buf19', c0, {c0: 256}),
        MemoryDep('buf3', c0, {c0: 262144})]
op21.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg16_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg17_1', c1, {c0: 256, c1: 1024})]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (262144, 1)
op21.sizes = ([256, 1024], [])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg15_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg16_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg17_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op21_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg15_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf18', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf19', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg16_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg17_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf21', get_index_7, add_3, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg18_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.node.kernel = extern_kernels.mm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 1048576})]
op23.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 1048576})]
op23.met_dependencies = [MemoryDep('arg19_1', c1, {c0: 256, c1: 4096})]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (1048576, 1)
op23.sizes = ([256, 4096], [])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg19_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op23_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg19_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf22', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf23', get_index_4, mul_2, None)
        return store


op24: ExternKernelSchedulerNode(ExternKernelOut)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='arg20_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelOut
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf24.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False)]
]
op24.node.kernel = extern_kernels.mm


op25_op26_op27_op29: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op25_op26_op27_op29.writes = 
    [   MemoryDep('buf25', c0, {c0: 262144}),
        MemoryDep('buf26', c0, {c0: 256}),
        MemoryDep('buf27', c0, {c0: 256}),
        MemoryDep('buf29', c0, {c0: 262144})]
op25_op26_op27_op29.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 262144}),
        MemoryDep('buf24', c0, {c0: 262144}),
        MemoryDep('buf3', c0, {c0: 262144})]
op25_op26_op27_op29.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg21_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg22_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg23_1', c1, {c0: 256, c1: 1024})]
op25_op26_op27_op29.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf25.users = [
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
    ]
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf26.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf27.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf29.users = [
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
    ]
]
op25_op26_op27_op29.snodes[0] =
op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 262144})]
op25.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 262144}),
        MemoryDep('buf24', c0, {c0: 262144}),
        MemoryDep('buf3', c0, {c0: 262144})]
op25.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg21_1', c1, {c0: 256, c1: 1024})]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf25.users = [
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
    ]
]
op25.group.device = cuda:0
op25.group.iteration = (262144, 1)
op25.sizes = ([256, 1024], [])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg15_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg21_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op25_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg15_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf24', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg21_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf25', get_index_5, add_3, None)
        return store
op25_op26_op27_op29.snodes[1] =
op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 256})]
op26.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 262144})]
op26.met_dependencies = []
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf26.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (256, 1024)
op26.sizes = ([256], [1024])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op26_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf26', get_index_1, getitem)
        return store_reduction
op25_op26_op27_op29.snodes[2] =
op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 256})]
op27.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 262144})]
op27.met_dependencies = []
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf27.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (256, 1024)
op27.sizes = ([256], [1024])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op27_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf27', get_index_1, getitem_1)
        return store_reduction
op25_op26_op27_op29.snodes[3] =
op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 262144})]
op29.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 262144}),
        MemoryDep('buf26', c0, {c0: 256}),
        MemoryDep('buf27', c0, {c0: 256})]
op29.met_dependencies = 
    [   MemoryDep('arg22_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg23_1', c1, {c0: 256, c1: 1024})]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf29.users = [
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
    ]
]
op29.group.device = cuda:0
op29.group.iteration = (262144, 1)
op29.sizes = ([256, 1024], [])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg22_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg23_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op29_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf26', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf27', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg22_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg23_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf29', get_index_5, add_1, None)
        return store


op30: ExternKernelSchedulerNode(ExternKernelOut)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = [StarDep(name='arg24_1', mode=None), StarDep(name='arg25_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelOut
    buf30.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op30.node.kernel = extern_kernels.addmm


op31: ExternKernelSchedulerNode(ExternKernelOut)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op31.met_dependencies = [StarDep(name='arg26_1', mode=None), StarDep(name='arg27_1', mode=None)]
op31.outputs = [
    buf31: ExternKernelOut
    buf31.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op31.node.kernel = extern_kernels.addmm


op32: ExternKernelSchedulerNode(ExternKernelOut)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op32.met_dependencies = [StarDep(name='arg28_1', mode=None), StarDep(name='arg29_1', mode=None)]
op32.outputs = [
    buf32: ExternKernelOut
    buf32.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op32.node.kernel = extern_kernels.addmm


op34: ExternKernelSchedulerNode(FallbackKernel)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = 
    [   StarDep(name='buf30', mode=None),
        StarDep(name='buf31', mode=None),
        StarDep(name='buf32', mode=None),
        StarDep(name='buf33', mode=None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: FallbackKernel
    buf34.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf34.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op34.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op35: ExternKernelSchedulerNode(MultiOutput)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf34', mode=None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: MultiOutput
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf35.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op35.node.kernel = None


op39: ExternKernelSchedulerNode(ExternKernelOut)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf35', mode=None)]
op39.met_dependencies = [StarDep(name='arg30_1', mode=None)]
op39.outputs = [
    buf39: ExternKernelOut
    buf39.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
    ]
]
op39.node.kernel = extern_kernels.mm


op40_op41_op43: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op40_op41_op43.writes = 
    [   MemoryDep('buf40', c0, {c0: 256}),
        MemoryDep('buf41', c0, {c0: 256}),
        MemoryDep('buf43', c0, {c0: 262144})]
op40_op41_op43.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 262144}), MemoryDep('buf39', c0, {c0: 262144})]
op40_op41_op43.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg32_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg33_1', c1, {c0: 256, c1: 1024})]
op40_op41_op43.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf40.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf41.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op40_op41_op43.snodes[0] =
op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 256})]
op40.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 262144}), MemoryDep('buf39', c0, {c0: 262144})]
op40.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 256, c1: 1024})]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf40.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (256, 1024)
op40.sizes = ([256], [1024])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op40_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf39', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf40', get_index_3, getitem)
        return store_reduction
op40_op41_op43.snodes[1] =
op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 256})]
op41.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 262144}), MemoryDep('buf39', c0, {c0: 262144})]
op41.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 256, c1: 1024})]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf41.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (256, 1024)
op41.sizes = ([256], [1024])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op41_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf39', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf41', get_index_3, getitem_1)
        return store_reduction
op40_op41_op43.snodes[2] =
op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 262144})]
op43.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 262144}),
        MemoryDep('buf39', c0, {c0: 262144}),
        MemoryDep('buf40', c0, {c0: 256}),
        MemoryDep('buf41', c0, {c0: 256})]
op43.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg32_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg33_1', c1, {c0: 256, c1: 1024})]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (262144, 1)
op43.sizes = ([256, 1024], [])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg32_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg33_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op43_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf39', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf40', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf41', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg32_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg33_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf43', get_index_7, add_3, None)
        return store


op44: ExternKernelSchedulerNode(ExternKernelOut)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf43', mode=None)]
op44.met_dependencies = [StarDep(name='arg34_1', mode=None)]
op44.outputs = [
    buf44: ExternKernelOut
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False)]
]
op44.node.kernel = extern_kernels.mm


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 1048576})]
op45.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 1048576})]
op45.met_dependencies = [MemoryDep('arg35_1', c1, {c0: 256, c1: 4096})]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (1048576, 1)
op45.sizes = ([256, 4096], [])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg35_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op45_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg35_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf44', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg35_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf45', get_index_4, mul_2, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelOut)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op46.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op46.outputs = [
    buf46: ExternKernelOut
    buf46.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf46.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False)]
]
op46.node.kernel = extern_kernels.mm


op47_op48_op49_op51: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op47_op48_op49_op51.writes = 
    [   MemoryDep('buf47', c0, {c0: 262144}),
        MemoryDep('buf48', c0, {c0: 256}),
        MemoryDep('buf49', c0, {c0: 256}),
        MemoryDep('buf51', c0, {c0: 262144})]
op47_op48_op49_op51.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 262144}),
        MemoryDep('buf39', c0, {c0: 262144}),
        MemoryDep('buf46', c0, {c0: 262144})]
op47_op48_op49_op51.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg37_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg38_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg39_1', c1, {c0: 256, c1: 1024})]
op47_op48_op49_op51.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
    ]
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf48.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf49.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
    ]
]
op47_op48_op49_op51.snodes[0] =
op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 262144})]
op47.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 262144}),
        MemoryDep('buf39', c0, {c0: 262144}),
        MemoryDep('buf46', c0, {c0: 262144})]
op47.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg37_1', c1, {c0: 256, c1: 1024})]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
    ]
]
op47.group.device = cuda:0
op47.group.iteration = (262144, 1)
op47.sizes = ([256, 1024], [])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg37_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op47_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf39', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf46', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg37_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf47', get_index_5, add_3, None)
        return store
op47_op48_op49_op51.snodes[1] =
op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 256})]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 262144})]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf48.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (256, 1024)
op48.sizes = ([256], [1024])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op48_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf48', get_index_1, getitem)
        return store_reduction
op47_op48_op49_op51.snodes[2] =
op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 256})]
op49.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 262144})]
op49.met_dependencies = []
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf49.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (256, 1024)
op49.sizes = ([256], [1024])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op49_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf49', get_index_1, getitem_1)
        return store_reduction
op47_op48_op49_op51.snodes[3] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 262144})]
op51.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 262144}),
        MemoryDep('buf48', c0, {c0: 256}),
        MemoryDep('buf49', c0, {c0: 256})]
op51.met_dependencies = 
    [   MemoryDep('arg38_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg39_1', c1, {c0: 256, c1: 1024})]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
    ]
]
op51.group.device = cuda:0
op51.group.iteration = (262144, 1)
op51.sizes = ([256, 1024], [])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg38_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg39_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op51_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf48', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf49', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg38_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg39_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf51', get_index_5, add_1, None)
        return store


op52: ExternKernelSchedulerNode(ExternKernelOut)
op52.writes = [StarDep(name='buf52', mode=None)]
op52.unmet_dependencies = [StarDep(name='buf51', mode=None)]
op52.met_dependencies = [StarDep(name='arg40_1', mode=None), StarDep(name='arg41_1', mode=None)]
op52.outputs = [
    buf52: ExternKernelOut
    buf52.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op52.node.kernel = extern_kernels.addmm


op53: ExternKernelSchedulerNode(ExternKernelOut)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf51', mode=None)]
op53.met_dependencies = [StarDep(name='arg42_1', mode=None), StarDep(name='arg43_1', mode=None)]
op53.outputs = [
    buf53: ExternKernelOut
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op53.node.kernel = extern_kernels.addmm


op54: ExternKernelSchedulerNode(ExternKernelOut)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf51', mode=None)]
op54.met_dependencies = [StarDep(name='arg44_1', mode=None), StarDep(name='arg45_1', mode=None)]
op54.outputs = [
    buf54: ExternKernelOut
    buf54.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op54.node.kernel = extern_kernels.addmm


op56: ExternKernelSchedulerNode(FallbackKernel)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = 
    [   StarDep(name='buf52', mode=None),
        StarDep(name='buf53', mode=None),
        StarDep(name='buf54', mode=None),
        StarDep(name='buf55', mode=None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: FallbackKernel
    buf56.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op56.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op57: ExternKernelSchedulerNode(MultiOutput)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf56', mode=None)]
op57.met_dependencies = []
op57.outputs = [
    buf57: MultiOutput
    buf57.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf57.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op57.node.kernel = None


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf57', mode=None)]
op61.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf61.users = [
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
    ]
]
op61.node.kernel = extern_kernels.mm


op62_op63_op65: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op62_op63_op65.writes = 
    [   MemoryDep('buf62', c0, {c0: 256}),
        MemoryDep('buf63', c0, {c0: 256}),
        MemoryDep('buf65', c0, {c0: 262144})]
op62_op63_op65.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 262144}), MemoryDep('buf61', c0, {c0: 262144})]
op62_op63_op65.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg48_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg49_1', c1, {c0: 256, c1: 1024})]
op62_op63_op65.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf62.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf63.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op62_op63_op65.snodes[0] =
op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 256})]
op62.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 262144}), MemoryDep('buf61', c0, {c0: 262144})]
op62.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 256, c1: 1024})]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf62.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (256, 1024)
op62.sizes = ([256], [1024])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg47_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op62_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg47_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf62', get_index_3, getitem)
        return store_reduction
op62_op63_op65.snodes[1] =
op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 256})]
op63.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 262144}), MemoryDep('buf61', c0, {c0: 262144})]
op63.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 256, c1: 1024})]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf63.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (256, 1024)
op63.sizes = ([256], [1024])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg47_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op63_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg47_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf63', get_index_3, getitem_1)
        return store_reduction
op62_op63_op65.snodes[2] =
op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 262144})]
op65.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 262144}),
        MemoryDep('buf61', c0, {c0: 262144}),
        MemoryDep('buf62', c0, {c0: 256}),
        MemoryDep('buf63', c0, {c0: 256})]
op65.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg48_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg49_1', c1, {c0: 256, c1: 1024})]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (262144, 1)
op65.sizes = ([256, 1024], [])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg47_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg48_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg49_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op65_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg47_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf62', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf63', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg48_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg49_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf65', get_index_7, add_3, None)
        return store


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='arg50_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False)]
]
op66.node.kernel = extern_kernels.mm


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 1048576})]
op67.unmet_dependencies = [MemoryDep('buf66', c0, {c0: 1048576})]
op67.met_dependencies = [MemoryDep('arg51_1', c1, {c0: 256, c1: 4096})]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (1048576, 1)
op67.sizes = ([256, 4096], [])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg51_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op67_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg51_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf66', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg51_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf67', get_index_4, mul_2, None)
        return store


op68: ExternKernelSchedulerNode(ExternKernelOut)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf67', mode=None)]
op68.met_dependencies = [StarDep(name='arg52_1', mode=None)]
op68.outputs = [
    buf68: ExternKernelOut
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf68.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False)]
]
op68.node.kernel = extern_kernels.mm


op69_op70_op71_op73: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op69_op70_op71_op73.writes = 
    [   MemoryDep('buf69', c0, {c0: 262144}),
        MemoryDep('buf70', c0, {c0: 256}),
        MemoryDep('buf71', c0, {c0: 256}),
        MemoryDep('buf73', c0, {c0: 262144})]
op69_op70_op71_op73.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 262144}),
        MemoryDep('buf61', c0, {c0: 262144}),
        MemoryDep('buf68', c0, {c0: 262144})]
op69_op70_op71_op73.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg53_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg54_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg55_1', c1, {c0: 256, c1: 1024})]
op69_op70_op71_op73.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf69.users = [
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False),
    ]
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf70.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf71.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
    ]
]
op69_op70_op71_op73.snodes[0] =
op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 262144})]
op69.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 262144}),
        MemoryDep('buf61', c0, {c0: 262144}),
        MemoryDep('buf68', c0, {c0: 262144})]
op69.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg53_1', c1, {c0: 256, c1: 1024})]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf69.users = [
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False),
    ]
]
op69.group.device = cuda:0
op69.group.iteration = (262144, 1)
op69.sizes = ([256, 1024], [])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg47_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg53_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op69_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg47_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf68', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg53_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf69', get_index_5, add_3, None)
        return store
op69_op70_op71_op73.snodes[1] =
op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 256})]
op70.unmet_dependencies = [MemoryDep('buf69', c0, {c0: 262144})]
op70.met_dependencies = []
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf70.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (256, 1024)
op70.sizes = ([256], [1024])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op70_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf70', get_index_1, getitem)
        return store_reduction
op69_op70_op71_op73.snodes[2] =
op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 256})]
op71.unmet_dependencies = [MemoryDep('buf69', c0, {c0: 262144})]
op71.met_dependencies = []
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf71.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (256, 1024)
op71.sizes = ([256], [1024])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op71_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf71', get_index_1, getitem_1)
        return store_reduction
op69_op70_op71_op73.snodes[3] =
op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 262144})]
op73.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 262144}),
        MemoryDep('buf70', c0, {c0: 256}),
        MemoryDep('buf71', c0, {c0: 256})]
op73.met_dependencies = 
    [   MemoryDep('arg54_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg55_1', c1, {c0: 256, c1: 1024})]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
    ]
]
op73.group.device = cuda:0
op73.group.iteration = (262144, 1)
op73.sizes = ([256, 1024], [])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg54_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg55_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op73_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf70', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf71', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg54_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg55_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf73', get_index_5, add_1, None)
        return store


op74: ExternKernelSchedulerNode(ExternKernelOut)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = [StarDep(name='arg56_1', mode=None), StarDep(name='arg57_1', mode=None)]
op74.outputs = [
    buf74: ExternKernelOut
    buf74.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op74.node.kernel = extern_kernels.addmm


op75: ExternKernelSchedulerNode(ExternKernelOut)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op75.met_dependencies = [StarDep(name='arg58_1', mode=None), StarDep(name='arg59_1', mode=None)]
op75.outputs = [
    buf75: ExternKernelOut
    buf75.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf75.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op75.node.kernel = extern_kernels.addmm


op76: ExternKernelSchedulerNode(ExternKernelOut)
op76.writes = [StarDep(name='buf76', mode=None)]
op76.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op76.met_dependencies = [StarDep(name='arg60_1', mode=None), StarDep(name='arg61_1', mode=None)]
op76.outputs = [
    buf76: ExternKernelOut
    buf76.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf76.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op76.node.kernel = extern_kernels.addmm


op78: ExternKernelSchedulerNode(FallbackKernel)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = 
    [   StarDep(name='buf74', mode=None),
        StarDep(name='buf75', mode=None),
        StarDep(name='buf76', mode=None),
        StarDep(name='buf77', mode=None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: FallbackKernel
    buf78.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf78.users = [NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op78.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op79: ExternKernelSchedulerNode(MultiOutput)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op79.met_dependencies = []
op79.outputs = [
    buf79: MultiOutput
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op79.node.kernel = None


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op83.met_dependencies = [StarDep(name='arg62_1', mode=None)]
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf83.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False),
    ]
]
op83.node.kernel = extern_kernels.mm


op84_op85_op87: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op84_op85_op87.writes = 
    [   MemoryDep('buf84', c0, {c0: 256}),
        MemoryDep('buf85', c0, {c0: 256}),
        MemoryDep('buf87', c0, {c0: 262144})]
op84_op85_op87.unmet_dependencies = [MemoryDep('buf69', c0, {c0: 262144}), MemoryDep('buf83', c0, {c0: 262144})]
op84_op85_op87.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg64_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg65_1', c1, {c0: 256, c1: 1024})]
op84_op85_op87.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf84.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf85.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op84_op85_op87.snodes[0] =
op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 256})]
op84.unmet_dependencies = [MemoryDep('buf69', c0, {c0: 262144}), MemoryDep('buf83', c0, {c0: 262144})]
op84.met_dependencies = [MemoryDep('arg63_1', c1, {c0: 256, c1: 1024})]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf84.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (256, 1024)
op84.sizes = ([256], [1024])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg63_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op84_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf83', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf84', get_index_3, getitem)
        return store_reduction
op84_op85_op87.snodes[1] =
op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 256})]
op85.unmet_dependencies = [MemoryDep('buf69', c0, {c0: 262144}), MemoryDep('buf83', c0, {c0: 262144})]
op85.met_dependencies = [MemoryDep('arg63_1', c1, {c0: 256, c1: 1024})]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf85.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (256, 1024)
op85.sizes = ([256], [1024])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg63_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op85_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf83', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf85', get_index_3, getitem_1)
        return store_reduction
op84_op85_op87.snodes[2] =
op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 262144})]
op87.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 262144}),
        MemoryDep('buf83', c0, {c0: 262144}),
        MemoryDep('buf84', c0, {c0: 256}),
        MemoryDep('buf85', c0, {c0: 256})]
op87.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg64_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg65_1', c1, {c0: 256, c1: 1024})]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (262144, 1)
op87.sizes = ([256, 1024], [])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg63_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg64_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg65_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op87_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf83', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf84', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf85', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg64_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg65_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf87', get_index_7, add_3, None)
        return store


op88: ExternKernelSchedulerNode(ExternKernelOut)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op88.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op88.outputs = [
    buf88: ExternKernelOut
    buf88.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf88.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False)]
]
op88.node.kernel = extern_kernels.mm


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 1048576})]
op89.unmet_dependencies = [MemoryDep('buf88', c0, {c0: 1048576})]
op89.met_dependencies = [MemoryDep('arg67_1', c1, {c0: 256, c1: 4096})]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (1048576, 1)
op89.sizes = ([256, 4096], [])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg67_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op89_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf88', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg67_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf89', get_index_4, mul_2, None)
        return store


op90: ExternKernelSchedulerNode(ExternKernelOut)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op90.met_dependencies = [StarDep(name='arg68_1', mode=None)]
op90.outputs = [
    buf90: ExternKernelOut
    buf90.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf90.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False)]
]
op90.node.kernel = extern_kernels.mm


op91_op92_op93_op95: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op91_op92_op93_op95.writes = 
    [   MemoryDep('buf91', c0, {c0: 262144}),
        MemoryDep('buf92', c0, {c0: 256}),
        MemoryDep('buf93', c0, {c0: 256}),
        MemoryDep('buf95', c0, {c0: 262144})]
op91_op92_op93_op95.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 262144}),
        MemoryDep('buf83', c0, {c0: 262144}),
        MemoryDep('buf90', c0, {c0: 262144})]
op91_op92_op93_op95.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg69_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg70_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg71_1', c1, {c0: 256, c1: 1024})]
op91_op92_op93_op95.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf91.users = [
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False),
    ]
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf92.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf93.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf95.users = [
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
    ]
]
op91_op92_op93_op95.snodes[0] =
op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 262144})]
op91.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 262144}),
        MemoryDep('buf83', c0, {c0: 262144}),
        MemoryDep('buf90', c0, {c0: 262144})]
op91.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg69_1', c1, {c0: 256, c1: 1024})]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf91.users = [
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False),
    ]
]
op91.group.device = cuda:0
op91.group.iteration = (262144, 1)
op91.sizes = ([256, 1024], [])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg63_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg69_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op91_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf83', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf90', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg69_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf91', get_index_5, add_3, None)
        return store
op91_op92_op93_op95.snodes[1] =
op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 256})]
op92.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 262144})]
op92.met_dependencies = []
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf92.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (256, 1024)
op92.sizes = ([256], [1024])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op92_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf92', get_index_1, getitem)
        return store_reduction
op91_op92_op93_op95.snodes[2] =
op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 256})]
op93.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 262144})]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf93.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (256, 1024)
op93.sizes = ([256], [1024])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op93_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf93', get_index_1, getitem_1)
        return store_reduction
op91_op92_op93_op95.snodes[3] =
op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 262144})]
op95.unmet_dependencies = 
    [   MemoryDep('buf91', c0, {c0: 262144}),
        MemoryDep('buf92', c0, {c0: 256}),
        MemoryDep('buf93', c0, {c0: 256})]
op95.met_dependencies = 
    [   MemoryDep('arg70_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg71_1', c1, {c0: 256, c1: 1024})]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf95.users = [
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
    ]
]
op95.group.device = cuda:0
op95.group.iteration = (262144, 1)
op95.sizes = ([256, 1024], [])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg70_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg71_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op95_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf92', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf93', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg70_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg71_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf95', get_index_5, add_1, None)
        return store


op96: ExternKernelSchedulerNode(ExternKernelOut)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op96.met_dependencies = [StarDep(name='arg72_1', mode=None), StarDep(name='arg73_1', mode=None)]
op96.outputs = [
    buf96: ExternKernelOut
    buf96.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op96.node.kernel = extern_kernels.addmm


op97: ExternKernelSchedulerNode(ExternKernelOut)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op97.met_dependencies = [StarDep(name='arg74_1', mode=None), StarDep(name='arg75_1', mode=None)]
op97.outputs = [
    buf97: ExternKernelOut
    buf97.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op97.node.kernel = extern_kernels.addmm


op98: ExternKernelSchedulerNode(ExternKernelOut)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op98.met_dependencies = [StarDep(name='arg76_1', mode=None), StarDep(name='arg77_1', mode=None)]
op98.outputs = [
    buf98: ExternKernelOut
    buf98.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op98.node.kernel = extern_kernels.addmm


op99_op121_op143_op165: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op99_op121_op143_op165.writes = 
    [   MemoryDep('buf121', c0, {c0: 524288}),
        MemoryDep('buf143', c0, {c0: 524288}),
        MemoryDep('buf165', c0, {c0: 524288}),
        MemoryDep('buf99', c0, {c0: 524288})]
op99_op121_op143_op165.unmet_dependencies = []
op99_op121_op143_op165.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op99_op121_op143_op165.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op99_op121_op143_op165.snodes[0] =
op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 524288})]
op99.unmet_dependencies = []
op99.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (524288, 1)
op99.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op99_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf99', get_index_2, where, None)
        return store
op99_op121_op143_op165.snodes[1] =
op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 524288})]
op121.unmet_dependencies = []
op121.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (524288, 1)
op121.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op121_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf121', get_index_2, where, None)
        return store
op99_op121_op143_op165.snodes[2] =
op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 524288})]
op143.unmet_dependencies = []
op143.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (524288, 1)
op143.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op143_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf143', get_index_2, where, None)
        return store
op99_op121_op143_op165.snodes[3] =
op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 524288})]
op165.unmet_dependencies = []
op165.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (524288, 1)
op165.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf165_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op165_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf165', get_index_2, where, None)
        return store


op100: ExternKernelSchedulerNode(FallbackKernel)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = 
    [   StarDep(name='buf96', mode=None),
        StarDep(name='buf97', mode=None),
        StarDep(name='buf98', mode=None),
        StarDep(name='buf99', mode=None)]
op100.met_dependencies = []
op100.outputs = [
    buf100: FallbackKernel
    buf100.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf100.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op101: ExternKernelSchedulerNode(MultiOutput)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: MultiOutput
    buf101.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op101.node.kernel = None


op105: ExternKernelSchedulerNode(ExternKernelOut)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op105.met_dependencies = [StarDep(name='arg78_1', mode=None)]
op105.outputs = [
    buf105: ExternKernelOut
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf105.users = [
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False),
    ]
]
op105.node.kernel = extern_kernels.mm


op106_op107_op109: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op106_op107_op109.writes = 
    [   MemoryDep('buf106', c0, {c0: 256}),
        MemoryDep('buf107', c0, {c0: 256}),
        MemoryDep('buf109', c0, {c0: 262144})]
op106_op107_op109.unmet_dependencies = [MemoryDep('buf105', c0, {c0: 262144}), MemoryDep('buf91', c0, {c0: 262144})]
op106_op107_op109.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg80_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg81_1', c1, {c0: 256, c1: 1024})]
op106_op107_op109.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf106.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf107.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op106_op107_op109.snodes[0] =
op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 256})]
op106.unmet_dependencies = [MemoryDep('buf105', c0, {c0: 262144}), MemoryDep('buf91', c0, {c0: 262144})]
op106.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 256, c1: 1024})]
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf106.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (256, 1024)
op106.sizes = ([256], [1024])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg79_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op106_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf105', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf106', get_index_3, getitem)
        return store_reduction
op106_op107_op109.snodes[1] =
op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 256})]
op107.unmet_dependencies = [MemoryDep('buf105', c0, {c0: 262144}), MemoryDep('buf91', c0, {c0: 262144})]
op107.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 256, c1: 1024})]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf107.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (256, 1024)
op107.sizes = ([256], [1024])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg79_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op107_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf105', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf107', get_index_3, getitem_1)
        return store_reduction
op106_op107_op109.snodes[2] =
op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 262144})]
op109.unmet_dependencies = 
    [   MemoryDep('buf105', c0, {c0: 262144}),
        MemoryDep('buf106', c0, {c0: 256}),
        MemoryDep('buf107', c0, {c0: 256}),
        MemoryDep('buf91', c0, {c0: 262144})]
op109.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg80_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg81_1', c1, {c0: 256, c1: 1024})]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (262144, 1)
op109.sizes = ([256, 1024], [])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg79_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg80_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg81_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op109_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf105', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf106', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf107', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg80_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg81_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf109', get_index_7, add_3, None)
        return store


op110: ExternKernelSchedulerNode(ExternKernelOut)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf109', mode=None)]
op110.met_dependencies = [StarDep(name='arg82_1', mode=None)]
op110.outputs = [
    buf110: ExternKernelOut
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False)]
]
op110.node.kernel = extern_kernels.mm


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 1048576})]
op111.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 1048576})]
op111.met_dependencies = [MemoryDep('arg83_1', c1, {c0: 256, c1: 4096})]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (1048576, 1)
op111.sizes = ([256, 4096], [])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg83_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op111_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg83_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf110', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg83_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf111', get_index_4, mul_2, None)
        return store


op112: ExternKernelSchedulerNode(ExternKernelOut)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf111', mode=None)]
op112.met_dependencies = [StarDep(name='arg84_1', mode=None)]
op112.outputs = [
    buf112: ExternKernelOut
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf112.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False)]
]
op112.node.kernel = extern_kernels.mm


op113_op114_op115_op117: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op113_op114_op115_op117.writes = 
    [   MemoryDep('buf113', c0, {c0: 262144}),
        MemoryDep('buf114', c0, {c0: 256}),
        MemoryDep('buf115', c0, {c0: 256}),
        MemoryDep('buf117', c0, {c0: 262144})]
op113_op114_op115_op117.unmet_dependencies = 
    [   MemoryDep('buf105', c0, {c0: 262144}),
        MemoryDep('buf112', c0, {c0: 262144}),
        MemoryDep('buf91', c0, {c0: 262144})]
op113_op114_op115_op117.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg85_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg86_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg87_1', c1, {c0: 256, c1: 1024})]
op113_op114_op115_op117.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf113.users = [
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
    ]
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf114.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf115.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
    ]
]
op113_op114_op115_op117.snodes[0] =
op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 262144})]
op113.unmet_dependencies = 
    [   MemoryDep('buf105', c0, {c0: 262144}),
        MemoryDep('buf112', c0, {c0: 262144}),
        MemoryDep('buf91', c0, {c0: 262144})]
op113.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg85_1', c1, {c0: 256, c1: 1024})]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf113.users = [
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
    ]
]
op113.group.device = cuda:0
op113.group.iteration = (262144, 1)
op113.sizes = ([256, 1024], [])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg79_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg85_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op113_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf105', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf112', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg85_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf113', get_index_5, add_3, None)
        return store
op113_op114_op115_op117.snodes[1] =
op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 256})]
op114.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 262144})]
op114.met_dependencies = []
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf114.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (256, 1024)
op114.sizes = ([256], [1024])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op114_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf114', get_index_1, getitem)
        return store_reduction
op113_op114_op115_op117.snodes[2] =
op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 256})]
op115.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 262144})]
op115.met_dependencies = []
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf115.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (256, 1024)
op115.sizes = ([256], [1024])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op115_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf115', get_index_1, getitem_1)
        return store_reduction
op113_op114_op115_op117.snodes[3] =
op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 262144})]
op117.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 262144}),
        MemoryDep('buf114', c0, {c0: 256}),
        MemoryDep('buf115', c0, {c0: 256})]
op117.met_dependencies = 
    [   MemoryDep('arg86_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg87_1', c1, {c0: 256, c1: 1024})]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
    ]
]
op117.group.device = cuda:0
op117.group.iteration = (262144, 1)
op117.sizes = ([256, 1024], [])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg86_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg87_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op117_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf114', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf115', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg86_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg87_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf117', get_index_5, add_1, None)
        return store


op118: ExternKernelSchedulerNode(ExternKernelOut)
op118.writes = [StarDep(name='buf118', mode=None)]
op118.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op118.met_dependencies = [StarDep(name='arg88_1', mode=None), StarDep(name='arg89_1', mode=None)]
op118.outputs = [
    buf118: ExternKernelOut
    buf118.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf118.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op118.node.kernel = extern_kernels.addmm


op119: ExternKernelSchedulerNode(ExternKernelOut)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op119.met_dependencies = [StarDep(name='arg90_1', mode=None), StarDep(name='arg91_1', mode=None)]
op119.outputs = [
    buf119: ExternKernelOut
    buf119.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op119.node.kernel = extern_kernels.addmm


op120: ExternKernelSchedulerNode(ExternKernelOut)
op120.writes = [StarDep(name='buf120', mode=None)]
op120.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op120.met_dependencies = [StarDep(name='arg92_1', mode=None), StarDep(name='arg93_1', mode=None)]
op120.outputs = [
    buf120: ExternKernelOut
    buf120.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op120.node.kernel = extern_kernels.addmm


op122: ExternKernelSchedulerNode(FallbackKernel)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = 
    [   StarDep(name='buf118', mode=None),
        StarDep(name='buf119', mode=None),
        StarDep(name='buf120', mode=None),
        StarDep(name='buf121', mode=None)]
op122.met_dependencies = []
op122.outputs = [
    buf122: FallbackKernel
    buf122.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op123: ExternKernelSchedulerNode(MultiOutput)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op123.met_dependencies = []
op123.outputs = [
    buf123: MultiOutput
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op123.node.kernel = None


op127: ExternKernelSchedulerNode(ExternKernelOut)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op127.met_dependencies = [StarDep(name='arg94_1', mode=None)]
op127.outputs = [
    buf127: ExternKernelOut
    buf127.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf127.users = [
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
    ]
]
op127.node.kernel = extern_kernels.mm


op128_op129_op131: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op128_op129_op131.writes = 
    [   MemoryDep('buf128', c0, {c0: 256}),
        MemoryDep('buf129', c0, {c0: 256}),
        MemoryDep('buf131', c0, {c0: 262144})]
op128_op129_op131.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 262144}), MemoryDep('buf127', c0, {c0: 262144})]
op128_op129_op131.met_dependencies = 
    [   MemoryDep('arg95_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg96_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg97_1', c1, {c0: 256, c1: 1024})]
op128_op129_op131.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf128.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf129.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op128_op129_op131.snodes[0] =
op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 256})]
op128.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 262144}), MemoryDep('buf127', c0, {c0: 262144})]
op128.met_dependencies = [MemoryDep('arg95_1', c1, {c0: 256, c1: 1024})]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf128.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (256, 1024)
op128.sizes = ([256], [1024])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg95_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op128_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf127', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg95_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf128', get_index_3, getitem)
        return store_reduction
op128_op129_op131.snodes[1] =
op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 256})]
op129.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 262144}), MemoryDep('buf127', c0, {c0: 262144})]
op129.met_dependencies = [MemoryDep('arg95_1', c1, {c0: 256, c1: 1024})]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf129.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (256, 1024)
op129.sizes = ([256], [1024])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg95_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op129_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf127', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg95_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf129', get_index_3, getitem_1)
        return store_reduction
op128_op129_op131.snodes[2] =
op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 262144})]
op131.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 262144}),
        MemoryDep('buf127', c0, {c0: 262144}),
        MemoryDep('buf128', c0, {c0: 256}),
        MemoryDep('buf129', c0, {c0: 256})]
op131.met_dependencies = 
    [   MemoryDep('arg95_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg96_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg97_1', c1, {c0: 256, c1: 1024})]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (262144, 1)
op131.sizes = ([256, 1024], [])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg95_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg96_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg97_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op131_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf127', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg95_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf128', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf129', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg96_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg97_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf131', get_index_7, add_3, None)
        return store


op132: ExternKernelSchedulerNode(ExternKernelOut)
op132.writes = [StarDep(name='buf132', mode=None)]
op132.unmet_dependencies = [StarDep(name='buf131', mode=None)]
op132.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op132.outputs = [
    buf132: ExternKernelOut
    buf132.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf132.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False)]
]
op132.node.kernel = extern_kernels.mm


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 1048576})]
op133.unmet_dependencies = [MemoryDep('buf132', c0, {c0: 1048576})]
op133.met_dependencies = [MemoryDep('arg99_1', c1, {c0: 256, c1: 4096})]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (1048576, 1)
op133.sizes = ([256, 4096], [])
buf132_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg99_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op133_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg99_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf132', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg99_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf133', get_index_4, mul_2, None)
        return store


op134: ExternKernelSchedulerNode(ExternKernelOut)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf133', mode=None)]
op134.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op134.outputs = [
    buf134: ExternKernelOut
    buf134.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
]
op134.node.kernel = extern_kernels.mm


op135_op136_op137_op139: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op135_op136_op137_op139.writes = 
    [   MemoryDep('buf135', c0, {c0: 262144}),
        MemoryDep('buf136', c0, {c0: 256}),
        MemoryDep('buf137', c0, {c0: 256}),
        MemoryDep('buf139', c0, {c0: 262144})]
op135_op136_op137_op139.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 262144}),
        MemoryDep('buf127', c0, {c0: 262144}),
        MemoryDep('buf134', c0, {c0: 262144})]
op135_op136_op137_op139.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg102_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg103_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg95_1', c1, {c0: 256, c1: 1024})]
op135_op136_op137_op139.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf135.users = [
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False),
    ]
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf136.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf137.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op135_op136_op137_op139.snodes[0] =
op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 262144})]
op135.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 262144}),
        MemoryDep('buf127', c0, {c0: 262144}),
        MemoryDep('buf134', c0, {c0: 262144})]
op135.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg95_1', c1, {c0: 256, c1: 1024})]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf135.users = [
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False),
    ]
]
op135.group.device = cuda:0
op135.group.iteration = (262144, 1)
op135.sizes = ([256, 1024], [])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg95_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg101_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op135_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf127', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg95_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf134', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg101_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf135', get_index_5, add_3, None)
        return store
op135_op136_op137_op139.snodes[1] =
op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 256})]
op136.unmet_dependencies = [MemoryDep('buf135', c0, {c0: 262144})]
op136.met_dependencies = []
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf136.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (256, 1024)
op136.sizes = ([256], [1024])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf136_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op136_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf136', get_index_1, getitem)
        return store_reduction
op135_op136_op137_op139.snodes[2] =
op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 256})]
op137.unmet_dependencies = [MemoryDep('buf135', c0, {c0: 262144})]
op137.met_dependencies = []
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf137.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (256, 1024)
op137.sizes = ([256], [1024])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op137_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf137', get_index_1, getitem_1)
        return store_reduction
op135_op136_op137_op139.snodes[3] =
op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 262144})]
op139.unmet_dependencies = 
    [   MemoryDep('buf135', c0, {c0: 262144}),
        MemoryDep('buf136', c0, {c0: 256}),
        MemoryDep('buf137', c0, {c0: 256})]
op139.met_dependencies = 
    [   MemoryDep('arg102_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg103_1', c1, {c0: 256, c1: 1024})]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op139.group.device = cuda:0
op139.group.iteration = (262144, 1)
op139.sizes = ([256, 1024], [])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf136_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg102_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg103_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op139_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf136', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf137', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg102_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg103_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf139', get_index_5, add_1, None)
        return store


op140: ExternKernelSchedulerNode(ExternKernelOut)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf139', mode=None)]
op140.met_dependencies = [StarDep(name='arg104_1', mode=None), StarDep(name='arg105_1', mode=None)]
op140.outputs = [
    buf140: ExternKernelOut
    buf140.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op140.node.kernel = extern_kernels.addmm


op141: ExternKernelSchedulerNode(ExternKernelOut)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf139', mode=None)]
op141.met_dependencies = [StarDep(name='arg106_1', mode=None), StarDep(name='arg107_1', mode=None)]
op141.outputs = [
    buf141: ExternKernelOut
    buf141.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op141.node.kernel = extern_kernels.addmm


op142: ExternKernelSchedulerNode(ExternKernelOut)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf139', mode=None)]
op142.met_dependencies = [StarDep(name='arg108_1', mode=None), StarDep(name='arg109_1', mode=None)]
op142.outputs = [
    buf142: ExternKernelOut
    buf142.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op142.node.kernel = extern_kernels.addmm


op144: ExternKernelSchedulerNode(FallbackKernel)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = 
    [   StarDep(name='buf140', mode=None),
        StarDep(name='buf141', mode=None),
        StarDep(name='buf142', mode=None),
        StarDep(name='buf143', mode=None)]
op144.met_dependencies = []
op144.outputs = [
    buf144: FallbackKernel
    buf144.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op144.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op145: ExternKernelSchedulerNode(MultiOutput)
op145.writes = [StarDep(name='buf145', mode=None)]
op145.unmet_dependencies = [StarDep(name='buf144', mode=None)]
op145.met_dependencies = []
op145.outputs = [
    buf145: MultiOutput
    buf145.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op145.node.kernel = None


op149: ExternKernelSchedulerNode(ExternKernelOut)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op149.met_dependencies = [StarDep(name='arg110_1', mode=None)]
op149.outputs = [
    buf149: ExternKernelOut
    buf149.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf149.users = [
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False),
    ]
]
op149.node.kernel = extern_kernels.mm


op150_op151_op153: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op150_op151_op153.writes = 
    [   MemoryDep('buf150', c0, {c0: 256}),
        MemoryDep('buf151', c0, {c0: 256}),
        MemoryDep('buf153', c0, {c0: 262144})]
op150_op151_op153.unmet_dependencies = [MemoryDep('buf135', c0, {c0: 262144}), MemoryDep('buf149', c0, {c0: 262144})]
op150_op151_op153.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg112_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg113_1', c1, {c0: 256, c1: 1024})]
op150_op151_op153.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf150.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf151.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf153.users = [NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op150_op151_op153.snodes[0] =
op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 256})]
op150.unmet_dependencies = [MemoryDep('buf135', c0, {c0: 262144}), MemoryDep('buf149', c0, {c0: 262144})]
op150.met_dependencies = [MemoryDep('arg111_1', c1, {c0: 256, c1: 1024})]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf150.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (256, 1024)
op150.sizes = ([256], [1024])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg111_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op150_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg111_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf150', get_index_3, getitem)
        return store_reduction
op150_op151_op153.snodes[1] =
op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 256})]
op151.unmet_dependencies = [MemoryDep('buf135', c0, {c0: 262144}), MemoryDep('buf149', c0, {c0: 262144})]
op151.met_dependencies = [MemoryDep('arg111_1', c1, {c0: 256, c1: 1024})]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf151.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (256, 1024)
op151.sizes = ([256], [1024])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg111_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op151_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg111_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf151', get_index_3, getitem_1)
        return store_reduction
op150_op151_op153.snodes[2] =
op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 262144})]
op153.unmet_dependencies = 
    [   MemoryDep('buf135', c0, {c0: 262144}),
        MemoryDep('buf149', c0, {c0: 262144}),
        MemoryDep('buf150', c0, {c0: 256}),
        MemoryDep('buf151', c0, {c0: 256})]
op153.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg112_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg113_1', c1, {c0: 256, c1: 1024})]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf153.users = [NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (262144, 1)
op153.sizes = ([256, 1024], [])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg111_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg112_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg113_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op153_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg111_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf150', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf151', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg112_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg113_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf153', get_index_7, add_3, None)
        return store


op154: ExternKernelSchedulerNode(ExternKernelOut)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op154.met_dependencies = [StarDep(name='arg114_1', mode=None)]
op154.outputs = [
    buf154: ExternKernelOut
    buf154.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf154.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False)]
]
op154.node.kernel = extern_kernels.mm


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 1048576})]
op155.unmet_dependencies = [MemoryDep('buf154', c0, {c0: 1048576})]
op155.met_dependencies = [MemoryDep('arg115_1', c1, {c0: 256, c1: 4096})]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (1048576, 1)
op155.sizes = ([256, 4096], [])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg115_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op155_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg115_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf154', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg115_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf155', get_index_4, mul_2, None)
        return store


op156: ExternKernelSchedulerNode(ExternKernelOut)
op156.writes = [StarDep(name='buf156', mode=None)]
op156.unmet_dependencies = [StarDep(name='buf155', mode=None)]
op156.met_dependencies = [StarDep(name='arg116_1', mode=None)]
op156.outputs = [
    buf156: ExternKernelOut
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf156.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False)]
]
op156.node.kernel = extern_kernels.mm


op157_op158_op159_op161: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op157_op158_op159_op161.writes = 
    [   MemoryDep('buf157', c0, {c0: 262144}),
        MemoryDep('buf158', c0, {c0: 256}),
        MemoryDep('buf159', c0, {c0: 256}),
        MemoryDep('buf161', c0, {c0: 262144})]
op157_op158_op159_op161.unmet_dependencies = 
    [   MemoryDep('buf135', c0, {c0: 262144}),
        MemoryDep('buf149', c0, {c0: 262144}),
        MemoryDep('buf156', c0, {c0: 262144})]
op157_op158_op159_op161.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg117_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg118_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg119_1', c1, {c0: 256, c1: 1024})]
op157_op158_op159_op161.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf157.users = [
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf158.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf159.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf161.users = [
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
    ]
]
op157_op158_op159_op161.snodes[0] =
op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 262144})]
op157.unmet_dependencies = 
    [   MemoryDep('buf135', c0, {c0: 262144}),
        MemoryDep('buf149', c0, {c0: 262144}),
        MemoryDep('buf156', c0, {c0: 262144})]
op157.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg117_1', c1, {c0: 256, c1: 1024})]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf157.users = [
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
]
op157.group.device = cuda:0
op157.group.iteration = (262144, 1)
op157.sizes = ([256, 1024], [])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg111_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg117_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op157_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg111_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf156', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg117_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf157', get_index_5, add_3, None)
        return store
op157_op158_op159_op161.snodes[1] =
op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 256})]
op158.unmet_dependencies = [MemoryDep('buf157', c0, {c0: 262144})]
op158.met_dependencies = []
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf158.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (256, 1024)
op158.sizes = ([256], [1024])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op158_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf158', get_index_1, getitem)
        return store_reduction
op157_op158_op159_op161.snodes[2] =
op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 256})]
op159.unmet_dependencies = [MemoryDep('buf157', c0, {c0: 262144})]
op159.met_dependencies = []
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf159.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (256, 1024)
op159.sizes = ([256], [1024])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op159_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf159', get_index_1, getitem_1)
        return store_reduction
op157_op158_op159_op161.snodes[3] =
op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 262144})]
op161.unmet_dependencies = 
    [   MemoryDep('buf157', c0, {c0: 262144}),
        MemoryDep('buf158', c0, {c0: 256}),
        MemoryDep('buf159', c0, {c0: 256})]
op161.met_dependencies = 
    [   MemoryDep('arg118_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg119_1', c1, {c0: 256, c1: 1024})]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf161.users = [
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
    ]
]
op161.group.device = cuda:0
op161.group.iteration = (262144, 1)
op161.sizes = ([256, 1024], [])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg118_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg119_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op161_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf158', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf159', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg118_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg119_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf161', get_index_5, add_1, None)
        return store


op162: ExternKernelSchedulerNode(ExternKernelOut)
op162.writes = [StarDep(name='buf162', mode=None)]
op162.unmet_dependencies = [StarDep(name='buf161', mode=None)]
op162.met_dependencies = [StarDep(name='arg120_1', mode=None), StarDep(name='arg121_1', mode=None)]
op162.outputs = [
    buf162: ExternKernelOut
    buf162.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf162.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op162.node.kernel = extern_kernels.addmm


op163: ExternKernelSchedulerNode(ExternKernelOut)
op163.writes = [StarDep(name='buf163', mode=None)]
op163.unmet_dependencies = [StarDep(name='buf161', mode=None)]
op163.met_dependencies = [StarDep(name='arg122_1', mode=None), StarDep(name='arg123_1', mode=None)]
op163.outputs = [
    buf163: ExternKernelOut
    buf163.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op163.node.kernel = extern_kernels.addmm


op164: ExternKernelSchedulerNode(ExternKernelOut)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf161', mode=None)]
op164.met_dependencies = [StarDep(name='arg124_1', mode=None), StarDep(name='arg125_1', mode=None)]
op164.outputs = [
    buf164: ExternKernelOut
    buf164.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf164.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op164.node.kernel = extern_kernels.addmm


op166: ExternKernelSchedulerNode(FallbackKernel)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = 
    [   StarDep(name='buf162', mode=None),
        StarDep(name='buf163', mode=None),
        StarDep(name='buf164', mode=None),
        StarDep(name='buf165', mode=None)]
op166.met_dependencies = []
op166.outputs = [
    buf166: FallbackKernel
    buf166.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf166.users = [NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op166.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op167: ExternKernelSchedulerNode(MultiOutput)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf166', mode=None)]
op167.met_dependencies = []
op167.outputs = [
    buf167: MultiOutput
    buf167.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op167.node.kernel = None


op171: ExternKernelSchedulerNode(ExternKernelOut)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op171.met_dependencies = [StarDep(name='arg126_1', mode=None)]
op171.outputs = [
    buf171: ExternKernelOut
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
]
op171.node.kernel = extern_kernels.mm


op172_op173_op175: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op172_op173_op175.writes = 
    [   MemoryDep('buf172', c0, {c0: 256}),
        MemoryDep('buf173', c0, {c0: 256}),
        MemoryDep('buf175', c0, {c0: 262144})]
op172_op173_op175.unmet_dependencies = [MemoryDep('buf157', c0, {c0: 262144}), MemoryDep('buf171', c0, {c0: 262144})]
op172_op173_op175.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg128_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg129_1', c1, {c0: 256, c1: 1024})]
op172_op173_op175.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf172.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf173.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op172_op173_op175.snodes[0] =
op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 256})]
op172.unmet_dependencies = [MemoryDep('buf157', c0, {c0: 262144}), MemoryDep('buf171', c0, {c0: 262144})]
op172.met_dependencies = [MemoryDep('arg127_1', c1, {c0: 256, c1: 1024})]
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf172.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (256, 1024)
op172.sizes = ([256], [1024])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg127_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op172_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf171', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf172', get_index_3, getitem)
        return store_reduction
op172_op173_op175.snodes[1] =
op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 256})]
op173.unmet_dependencies = [MemoryDep('buf157', c0, {c0: 262144}), MemoryDep('buf171', c0, {c0: 262144})]
op173.met_dependencies = [MemoryDep('arg127_1', c1, {c0: 256, c1: 1024})]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf173.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (256, 1024)
op173.sizes = ([256], [1024])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg127_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op173_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf171', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf173', get_index_3, getitem_1)
        return store_reduction
op172_op173_op175.snodes[2] =
op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 262144})]
op175.unmet_dependencies = 
    [   MemoryDep('buf157', c0, {c0: 262144}),
        MemoryDep('buf171', c0, {c0: 262144}),
        MemoryDep('buf172', c0, {c0: 256}),
        MemoryDep('buf173', c0, {c0: 256})]
op175.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg128_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg129_1', c1, {c0: 256, c1: 1024})]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (262144, 1)
op175.sizes = ([256, 1024], [])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg127_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg128_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg129_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op175_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf171', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf172', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf173', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg128_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg129_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf175', get_index_7, add_3, None)
        return store


op176: ExternKernelSchedulerNode(ExternKernelOut)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf175', mode=None)]
op176.met_dependencies = [StarDep(name='arg130_1', mode=None)]
op176.outputs = [
    buf176: ExternKernelOut
    buf176.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf176.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False)]
]
op176.node.kernel = extern_kernels.mm


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 1048576})]
op177.unmet_dependencies = [MemoryDep('buf176', c0, {c0: 1048576})]
op177.met_dependencies = [MemoryDep('arg131_1', c1, {c0: 256, c1: 4096})]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (1048576, 1)
op177.sizes = ([256, 4096], [])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg131_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf177_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op177_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg131_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf176', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg131_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf177', get_index_4, mul_2, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op178.met_dependencies = [StarDep(name='arg132_1', mode=None)]
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf178.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False)]
]
op178.node.kernel = extern_kernels.mm


op179_op180_op181_op183: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op179_op180_op181_op183.writes = 
    [   MemoryDep('buf179', c0, {c0: 262144}),
        MemoryDep('buf180', c0, {c0: 256}),
        MemoryDep('buf181', c0, {c0: 256}),
        MemoryDep('buf183', c0, {c0: 262144})]
op179_op180_op181_op183.unmet_dependencies = 
    [   MemoryDep('buf157', c0, {c0: 262144}),
        MemoryDep('buf171', c0, {c0: 262144}),
        MemoryDep('buf178', c0, {c0: 262144})]
op179_op180_op181_op183.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg133_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg134_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg135_1', c1, {c0: 256, c1: 1024})]
op179_op180_op181_op183.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False),
    ]
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf180.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf181.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
    ]
]
op179_op180_op181_op183.snodes[0] =
op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 262144})]
op179.unmet_dependencies = 
    [   MemoryDep('buf157', c0, {c0: 262144}),
        MemoryDep('buf171', c0, {c0: 262144}),
        MemoryDep('buf178', c0, {c0: 262144})]
op179.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg133_1', c1, {c0: 256, c1: 1024})]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False),
    ]
]
op179.group.device = cuda:0
op179.group.iteration = (262144, 1)
op179.sizes = ([256, 1024], [])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg127_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf178_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg133_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op179_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf171', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf178', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg133_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf179', get_index_5, add_3, None)
        return store
op179_op180_op181_op183.snodes[1] =
op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 256})]
op180.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 262144})]
op180.met_dependencies = []
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf180.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (256, 1024)
op180.sizes = ([256], [1024])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op180_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf180', get_index_1, getitem)
        return store_reduction
op179_op180_op181_op183.snodes[2] =
op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 256})]
op181.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 262144})]
op181.met_dependencies = []
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf181.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (256, 1024)
op181.sizes = ([256], [1024])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op181_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf181', get_index_1, getitem_1)
        return store_reduction
op179_op180_op181_op183.snodes[3] =
op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 262144})]
op183.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 262144}),
        MemoryDep('buf180', c0, {c0: 256}),
        MemoryDep('buf181', c0, {c0: 256})]
op183.met_dependencies = 
    [   MemoryDep('arg134_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg135_1', c1, {c0: 256, c1: 1024})]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
    ]
]
op183.group.device = cuda:0
op183.group.iteration = (262144, 1)
op183.sizes = ([256, 1024], [])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg134_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg135_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op183_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf180', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf181', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg134_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg135_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf183', get_index_5, add_1, None)
        return store


op184: ExternKernelSchedulerNode(ExternKernelOut)
op184.writes = [StarDep(name='buf184', mode=None)]
op184.unmet_dependencies = [StarDep(name='buf183', mode=None)]
op184.met_dependencies = [StarDep(name='arg136_1', mode=None), StarDep(name='arg137_1', mode=None)]
op184.outputs = [
    buf184: ExternKernelOut
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf184.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op184.node.kernel = extern_kernels.addmm


op185: ExternKernelSchedulerNode(ExternKernelOut)
op185.writes = [StarDep(name='buf185', mode=None)]
op185.unmet_dependencies = [StarDep(name='buf183', mode=None)]
op185.met_dependencies = [StarDep(name='arg138_1', mode=None), StarDep(name='arg139_1', mode=None)]
op185.outputs = [
    buf185: ExternKernelOut
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op185.node.kernel = extern_kernels.addmm


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf183', mode=None)]
op186.met_dependencies = [StarDep(name='arg140_1', mode=None), StarDep(name='arg141_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf186.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op186.node.kernel = extern_kernels.addmm


op187_op209_op231_op253: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op187_op209_op231_op253.writes = 
    [   MemoryDep('buf187', c0, {c0: 524288}),
        MemoryDep('buf209', c0, {c0: 524288}),
        MemoryDep('buf231', c0, {c0: 524288}),
        MemoryDep('buf253', c0, {c0: 524288})]
op187_op209_op231_op253.unmet_dependencies = []
op187_op209_op231_op253.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op187_op209_op231_op253.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf253.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op187_op209_op231_op253.snodes[0] =
op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 524288})]
op187.unmet_dependencies = []
op187.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (524288, 1)
op187.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op187_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf187', get_index_2, where, None)
        return store
op187_op209_op231_op253.snodes[1] =
op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 524288})]
op209.unmet_dependencies = []
op209.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (524288, 1)
op209.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op209_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf209', get_index_2, where, None)
        return store
op187_op209_op231_op253.snodes[2] =
op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 524288})]
op231.unmet_dependencies = []
op231.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (524288, 1)
op231.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op231_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf231', get_index_2, where, None)
        return store
op187_op209_op231_op253.snodes[3] =
op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 524288})]
op253.unmet_dependencies = []
op253.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf253.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (524288, 1)
op253.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op253_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf253', get_index_2, where, None)
        return store


op188: ExternKernelSchedulerNode(FallbackKernel)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = 
    [   StarDep(name='buf184', mode=None),
        StarDep(name='buf185', mode=None),
        StarDep(name='buf186', mode=None),
        StarDep(name='buf187', mode=None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: FallbackKernel
    buf188.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf188.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op188.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op189: ExternKernelSchedulerNode(MultiOutput)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf188', mode=None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: MultiOutput
    buf189.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op189.node.kernel = None


op193: ExternKernelSchedulerNode(ExternKernelOut)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op193.met_dependencies = [StarDep(name='arg142_1', mode=None)]
op193.outputs = [
    buf193: ExternKernelOut
    buf193.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf193.users = [
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False),
    ]
]
op193.node.kernel = extern_kernels.mm


op194_op195_op197: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op194_op195_op197.writes = 
    [   MemoryDep('buf194', c0, {c0: 256}),
        MemoryDep('buf195', c0, {c0: 256}),
        MemoryDep('buf197', c0, {c0: 262144})]
op194_op195_op197.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 262144}), MemoryDep('buf193', c0, {c0: 262144})]
op194_op195_op197.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg144_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg145_1', c1, {c0: 256, c1: 1024})]
op194_op195_op197.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf194.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf195.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op194_op195_op197.snodes[0] =
op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 256})]
op194.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 262144}), MemoryDep('buf193', c0, {c0: 262144})]
op194.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 256, c1: 1024})]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf194.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (256, 1024)
op194.sizes = ([256], [1024])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op194_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf193', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf194', get_index_3, getitem)
        return store_reduction
op194_op195_op197.snodes[1] =
op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 256})]
op195.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 262144}), MemoryDep('buf193', c0, {c0: 262144})]
op195.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 256, c1: 1024})]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf195.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (256, 1024)
op195.sizes = ([256], [1024])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf195_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op195_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf193', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf195', get_index_3, getitem_1)
        return store_reduction
op194_op195_op197.snodes[2] =
op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 262144})]
op197.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 262144}),
        MemoryDep('buf193', c0, {c0: 262144}),
        MemoryDep('buf194', c0, {c0: 256}),
        MemoryDep('buf195', c0, {c0: 256})]
op197.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg144_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg145_1', c1, {c0: 256, c1: 1024})]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (262144, 1)
op197.sizes = ([256, 1024], [])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf195_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg144_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg145_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op197_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf193', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf194', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf195', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg144_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg145_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf197', get_index_7, add_3, None)
        return store


op198: ExternKernelSchedulerNode(ExternKernelOut)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op198.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op198.outputs = [
    buf198: ExternKernelOut
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf198.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False)]
]
op198.node.kernel = extern_kernels.mm


op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 1048576})]
op199.unmet_dependencies = [MemoryDep('buf198', c0, {c0: 1048576})]
op199.met_dependencies = [MemoryDep('arg147_1', c1, {c0: 256, c1: 4096})]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf199.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (1048576, 1)
op199.sizes = ([256, 4096], [])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg147_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op199_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg147_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf198', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg147_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf199', get_index_4, mul_2, None)
        return store


op200: ExternKernelSchedulerNode(ExternKernelOut)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op200.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op200.outputs = [
    buf200: ExternKernelOut
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf200.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False)]
]
op200.node.kernel = extern_kernels.mm


op201_op202_op203_op205: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op201_op202_op203_op205.writes = 
    [   MemoryDep('buf201', c0, {c0: 262144}),
        MemoryDep('buf202', c0, {c0: 256}),
        MemoryDep('buf203', c0, {c0: 256}),
        MemoryDep('buf205', c0, {c0: 262144})]
op201_op202_op203_op205.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 262144}),
        MemoryDep('buf193', c0, {c0: 262144}),
        MemoryDep('buf200', c0, {c0: 262144})]
op201_op202_op203_op205.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg149_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg150_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg151_1', c1, {c0: 256, c1: 1024})]
op201_op202_op203_op205.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf201.users = [
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False),
    ]
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf202.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf203.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf205.users = [
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
    ]
]
op201_op202_op203_op205.snodes[0] =
op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 262144})]
op201.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 262144}),
        MemoryDep('buf193', c0, {c0: 262144}),
        MemoryDep('buf200', c0, {c0: 262144})]
op201.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg149_1', c1, {c0: 256, c1: 1024})]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf201.users = [
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False),
    ]
]
op201.group.device = cuda:0
op201.group.iteration = (262144, 1)
op201.sizes = ([256, 1024], [])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg149_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op201_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf193', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf200', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg149_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf201', get_index_5, add_3, None)
        return store
op201_op202_op203_op205.snodes[1] =
op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 256})]
op202.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 262144})]
op202.met_dependencies = []
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf202.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (256, 1024)
op202.sizes = ([256], [1024])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op202_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf202', get_index_1, getitem)
        return store_reduction
op201_op202_op203_op205.snodes[2] =
op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 256})]
op203.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 262144})]
op203.met_dependencies = []
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf203.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (256, 1024)
op203.sizes = ([256], [1024])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op203_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf203', get_index_1, getitem_1)
        return store_reduction
op201_op202_op203_op205.snodes[3] =
op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 262144})]
op205.unmet_dependencies = 
    [   MemoryDep('buf201', c0, {c0: 262144}),
        MemoryDep('buf202', c0, {c0: 256}),
        MemoryDep('buf203', c0, {c0: 256})]
op205.met_dependencies = 
    [   MemoryDep('arg150_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg151_1', c1, {c0: 256, c1: 1024})]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf205.users = [
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
    ]
]
op205.group.device = cuda:0
op205.group.iteration = (262144, 1)
op205.sizes = ([256, 1024], [])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg150_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg151_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op205_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf202', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf203', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg150_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg151_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf205', get_index_5, add_1, None)
        return store


op206: ExternKernelSchedulerNode(ExternKernelOut)
op206.writes = [StarDep(name='buf206', mode=None)]
op206.unmet_dependencies = [StarDep(name='buf205', mode=None)]
op206.met_dependencies = [StarDep(name='arg152_1', mode=None), StarDep(name='arg153_1', mode=None)]
op206.outputs = [
    buf206: ExternKernelOut
    buf206.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op206.node.kernel = extern_kernels.addmm


op207: ExternKernelSchedulerNode(ExternKernelOut)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf205', mode=None)]
op207.met_dependencies = [StarDep(name='arg154_1', mode=None), StarDep(name='arg155_1', mode=None)]
op207.outputs = [
    buf207: ExternKernelOut
    buf207.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op207.node.kernel = extern_kernels.addmm


op208: ExternKernelSchedulerNode(ExternKernelOut)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = [StarDep(name='buf205', mode=None)]
op208.met_dependencies = [StarDep(name='arg156_1', mode=None), StarDep(name='arg157_1', mode=None)]
op208.outputs = [
    buf208: ExternKernelOut
    buf208.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op208.node.kernel = extern_kernels.addmm


op210: ExternKernelSchedulerNode(FallbackKernel)
op210.writes = [StarDep(name='buf210', mode=None)]
op210.unmet_dependencies = 
    [   StarDep(name='buf206', mode=None),
        StarDep(name='buf207', mode=None),
        StarDep(name='buf208', mode=None),
        StarDep(name='buf209', mode=None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: FallbackKernel
    buf210.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op211: ExternKernelSchedulerNode(MultiOutput)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op211.met_dependencies = []
op211.outputs = [
    buf211: MultiOutput
    buf211.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf211.users = [NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op211.node.kernel = None


op215: ExternKernelSchedulerNode(ExternKernelOut)
op215.writes = [StarDep(name='buf215', mode=None)]
op215.unmet_dependencies = [StarDep(name='buf211', mode=None)]
op215.met_dependencies = [StarDep(name='arg158_1', mode=None)]
op215.outputs = [
    buf215: ExternKernelOut
    buf215.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf215.users = [
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False),
    ]
]
op215.node.kernel = extern_kernels.mm


op216_op217_op219: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op216_op217_op219.writes = 
    [   MemoryDep('buf216', c0, {c0: 256}),
        MemoryDep('buf217', c0, {c0: 256}),
        MemoryDep('buf219', c0, {c0: 262144})]
op216_op217_op219.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 262144}), MemoryDep('buf215', c0, {c0: 262144})]
op216_op217_op219.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg160_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg161_1', c1, {c0: 256, c1: 1024})]
op216_op217_op219.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf216.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf217.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf219.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op216_op217_op219.snodes[0] =
op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 256})]
op216.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 262144}), MemoryDep('buf215', c0, {c0: 262144})]
op216.met_dependencies = [MemoryDep('arg159_1', c1, {c0: 256, c1: 1024})]
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf216.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (256, 1024)
op216.sizes = ([256], [1024])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg159_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op216_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf215', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg159_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf216', get_index_3, getitem)
        return store_reduction
op216_op217_op219.snodes[1] =
op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 256})]
op217.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 262144}), MemoryDep('buf215', c0, {c0: 262144})]
op217.met_dependencies = [MemoryDep('arg159_1', c1, {c0: 256, c1: 1024})]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf217.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (256, 1024)
op217.sizes = ([256], [1024])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg159_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op217_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf215', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg159_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf217', get_index_3, getitem_1)
        return store_reduction
op216_op217_op219.snodes[2] =
op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 262144})]
op219.unmet_dependencies = 
    [   MemoryDep('buf201', c0, {c0: 262144}),
        MemoryDep('buf215', c0, {c0: 262144}),
        MemoryDep('buf216', c0, {c0: 256}),
        MemoryDep('buf217', c0, {c0: 256})]
op219.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg160_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg161_1', c1, {c0: 256, c1: 1024})]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf219.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (262144, 1)
op219.sizes = ([256, 1024], [])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg159_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg160_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg161_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf219_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op219_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf215', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg159_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf216', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf217', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg160_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg161_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf219', get_index_7, add_3, None)
        return store


op220: ExternKernelSchedulerNode(ExternKernelOut)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op220.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op220.outputs = [
    buf220: ExternKernelOut
    buf220.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf220.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False)]
]
op220.node.kernel = extern_kernels.mm


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 1048576})]
op221.unmet_dependencies = [MemoryDep('buf220', c0, {c0: 1048576})]
op221.met_dependencies = [MemoryDep('arg163_1', c1, {c0: 256, c1: 4096})]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (1048576, 1)
op221.sizes = ([256, 4096], [])
buf220_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg163_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf221_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op221_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg163_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf220', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg163_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf221', get_index_4, mul_2, None)
        return store


op222: ExternKernelSchedulerNode(ExternKernelOut)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='arg164_1', mode=None)]
op222.outputs = [
    buf222: ExternKernelOut
    buf222.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf222.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False)]
]
op222.node.kernel = extern_kernels.mm


op223_op224_op225_op227: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op223_op224_op225_op227.writes = 
    [   MemoryDep('buf223', c0, {c0: 262144}),
        MemoryDep('buf224', c0, {c0: 256}),
        MemoryDep('buf225', c0, {c0: 256}),
        MemoryDep('buf227', c0, {c0: 262144})]
op223_op224_op225_op227.unmet_dependencies = 
    [   MemoryDep('buf201', c0, {c0: 262144}),
        MemoryDep('buf215', c0, {c0: 262144}),
        MemoryDep('buf222', c0, {c0: 262144})]
op223_op224_op225_op227.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg165_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg166_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg167_1', c1, {c0: 256, c1: 1024})]
op223_op224_op225_op227.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf223.users = [
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False),
    ]
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf224.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf225.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
    ]
]
op223_op224_op225_op227.snodes[0] =
op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 262144})]
op223.unmet_dependencies = 
    [   MemoryDep('buf201', c0, {c0: 262144}),
        MemoryDep('buf215', c0, {c0: 262144}),
        MemoryDep('buf222', c0, {c0: 262144})]
op223.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg165_1', c1, {c0: 256, c1: 1024})]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf223.users = [
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False),
    ]
]
op223.group.device = cuda:0
op223.group.iteration = (262144, 1)
op223.sizes = ([256, 1024], [])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg159_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf222_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg165_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op223_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf215', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg159_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf222', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg165_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf223', get_index_5, add_3, None)
        return store
op223_op224_op225_op227.snodes[1] =
op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 256})]
op224.unmet_dependencies = [MemoryDep('buf223', c0, {c0: 262144})]
op224.met_dependencies = []
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf224.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (256, 1024)
op224.sizes = ([256], [1024])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op224_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf224', get_index_1, getitem)
        return store_reduction
op223_op224_op225_op227.snodes[2] =
op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 256})]
op225.unmet_dependencies = [MemoryDep('buf223', c0, {c0: 262144})]
op225.met_dependencies = []
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf225.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (256, 1024)
op225.sizes = ([256], [1024])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op225_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf225', get_index_1, getitem_1)
        return store_reduction
op223_op224_op225_op227.snodes[3] =
op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 262144})]
op227.unmet_dependencies = 
    [   MemoryDep('buf223', c0, {c0: 262144}),
        MemoryDep('buf224', c0, {c0: 256}),
        MemoryDep('buf225', c0, {c0: 256})]
op227.met_dependencies = 
    [   MemoryDep('arg166_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg167_1', c1, {c0: 256, c1: 1024})]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
    ]
]
op227.group.device = cuda:0
op227.group.iteration = (262144, 1)
op227.sizes = ([256, 1024], [])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg166_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg167_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op227_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf224', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf225', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg166_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg167_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf227', get_index_5, add_1, None)
        return store


op228: ExternKernelSchedulerNode(ExternKernelOut)
op228.writes = [StarDep(name='buf228', mode=None)]
op228.unmet_dependencies = [StarDep(name='buf227', mode=None)]
op228.met_dependencies = [StarDep(name='arg168_1', mode=None), StarDep(name='arg169_1', mode=None)]
op228.outputs = [
    buf228: ExternKernelOut
    buf228.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf228.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op228.node.kernel = extern_kernels.addmm


op229: ExternKernelSchedulerNode(ExternKernelOut)
op229.writes = [StarDep(name='buf229', mode=None)]
op229.unmet_dependencies = [StarDep(name='buf227', mode=None)]
op229.met_dependencies = [StarDep(name='arg170_1', mode=None), StarDep(name='arg171_1', mode=None)]
op229.outputs = [
    buf229: ExternKernelOut
    buf229.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op229.node.kernel = extern_kernels.addmm


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf227', mode=None)]
op230.met_dependencies = [StarDep(name='arg172_1', mode=None), StarDep(name='arg173_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf230.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op230.node.kernel = extern_kernels.addmm


op232: ExternKernelSchedulerNode(FallbackKernel)
op232.writes = [StarDep(name='buf232', mode=None)]
op232.unmet_dependencies = 
    [   StarDep(name='buf228', mode=None),
        StarDep(name='buf229', mode=None),
        StarDep(name='buf230', mode=None),
        StarDep(name='buf231', mode=None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: FallbackKernel
    buf232.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op233: ExternKernelSchedulerNode(MultiOutput)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf232', mode=None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: MultiOutput
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf233.users = [NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op233.node.kernel = None


op237: ExternKernelSchedulerNode(ExternKernelOut)
op237.writes = [StarDep(name='buf237', mode=None)]
op237.unmet_dependencies = [StarDep(name='buf233', mode=None)]
op237.met_dependencies = [StarDep(name='arg174_1', mode=None)]
op237.outputs = [
    buf237: ExternKernelOut
    buf237.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf237.users = [
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False),
    ]
]
op237.node.kernel = extern_kernels.mm


op238_op239_op241: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op238_op239_op241.writes = 
    [   MemoryDep('buf238', c0, {c0: 256}),
        MemoryDep('buf239', c0, {c0: 256}),
        MemoryDep('buf241', c0, {c0: 262144})]
op238_op239_op241.unmet_dependencies = [MemoryDep('buf223', c0, {c0: 262144}), MemoryDep('buf237', c0, {c0: 262144})]
op238_op239_op241.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg176_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg177_1', c1, {c0: 256, c1: 1024})]
op238_op239_op241.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf238.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf239.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf241.users = [NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op238_op239_op241.snodes[0] =
op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 256})]
op238.unmet_dependencies = [MemoryDep('buf223', c0, {c0: 262144}), MemoryDep('buf237', c0, {c0: 262144})]
op238.met_dependencies = [MemoryDep('arg175_1', c1, {c0: 256, c1: 1024})]
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf238.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (256, 1024)
op238.sizes = ([256], [1024])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg175_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op238_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf237', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf238', get_index_3, getitem)
        return store_reduction
op238_op239_op241.snodes[1] =
op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 256})]
op239.unmet_dependencies = [MemoryDep('buf223', c0, {c0: 262144}), MemoryDep('buf237', c0, {c0: 262144})]
op239.met_dependencies = [MemoryDep('arg175_1', c1, {c0: 256, c1: 1024})]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf239.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (256, 1024)
op239.sizes = ([256], [1024])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg175_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf239_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op239_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf237', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf239', get_index_3, getitem_1)
        return store_reduction
op238_op239_op241.snodes[2] =
op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 262144})]
op241.unmet_dependencies = 
    [   MemoryDep('buf223', c0, {c0: 262144}),
        MemoryDep('buf237', c0, {c0: 262144}),
        MemoryDep('buf238', c0, {c0: 256}),
        MemoryDep('buf239', c0, {c0: 256})]
op241.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg176_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg177_1', c1, {c0: 256, c1: 1024})]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf241.users = [NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (262144, 1)
op241.sizes = ([256, 1024], [])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg175_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf239_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg176_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg177_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf241_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op241_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf237', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf238', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf239', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg176_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg177_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf241', get_index_7, add_3, None)
        return store


op242: ExternKernelSchedulerNode(ExternKernelOut)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf241', mode=None)]
op242.met_dependencies = [StarDep(name='arg178_1', mode=None)]
op242.outputs = [
    buf242: ExternKernelOut
    buf242.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf242.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False)]
]
op242.node.kernel = extern_kernels.mm


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 1048576})]
op243.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 1048576})]
op243.met_dependencies = [MemoryDep('arg179_1', c1, {c0: 256, c1: 4096})]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf243.users = [NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (1048576, 1)
op243.sizes = ([256, 4096], [])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg179_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op243_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg179_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf242', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg179_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf243', get_index_4, mul_2, None)
        return store


op244: ExternKernelSchedulerNode(ExternKernelOut)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf243', mode=None)]
op244.met_dependencies = [StarDep(name='arg180_1', mode=None)]
op244.outputs = [
    buf244: ExternKernelOut
    buf244.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf244.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False)]
]
op244.node.kernel = extern_kernels.mm


op245_op246_op247_op249: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op245_op246_op247_op249.writes = 
    [   MemoryDep('buf245', c0, {c0: 262144}),
        MemoryDep('buf246', c0, {c0: 256}),
        MemoryDep('buf247', c0, {c0: 256}),
        MemoryDep('buf249', c0, {c0: 262144})]
op245_op246_op247_op249.unmet_dependencies = 
    [   MemoryDep('buf223', c0, {c0: 262144}),
        MemoryDep('buf237', c0, {c0: 262144}),
        MemoryDep('buf244', c0, {c0: 262144})]
op245_op246_op247_op249.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg181_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg182_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg183_1', c1, {c0: 256, c1: 1024})]
op245_op246_op247_op249.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf245.users = [
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf246.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf247.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf249.users = [
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
    ]
]
op245_op246_op247_op249.snodes[0] =
op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 262144})]
op245.unmet_dependencies = 
    [   MemoryDep('buf223', c0, {c0: 262144}),
        MemoryDep('buf237', c0, {c0: 262144}),
        MemoryDep('buf244', c0, {c0: 262144})]
op245.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg181_1', c1, {c0: 256, c1: 1024})]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf245.users = [
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op245.group.device = cuda:0
op245.group.iteration = (262144, 1)
op245.sizes = ([256, 1024], [])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg175_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf244_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg181_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op245_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf237', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf244', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg181_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf245', get_index_5, add_3, None)
        return store
op245_op246_op247_op249.snodes[1] =
op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 256})]
op246.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 262144})]
op246.met_dependencies = []
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf246.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (256, 1024)
op246.sizes = ([256], [1024])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op246_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf246', get_index_1, getitem)
        return store_reduction
op245_op246_op247_op249.snodes[2] =
op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 256})]
op247.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 262144})]
op247.met_dependencies = []
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf247.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (256, 1024)
op247.sizes = ([256], [1024])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op247_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf247', get_index_1, getitem_1)
        return store_reduction
op245_op246_op247_op249.snodes[3] =
op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 262144})]
op249.unmet_dependencies = 
    [   MemoryDep('buf245', c0, {c0: 262144}),
        MemoryDep('buf246', c0, {c0: 256}),
        MemoryDep('buf247', c0, {c0: 256})]
op249.met_dependencies = 
    [   MemoryDep('arg182_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg183_1', c1, {c0: 256, c1: 1024})]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf249.users = [
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
    ]
]
op249.group.device = cuda:0
op249.group.iteration = (262144, 1)
op249.sizes = ([256, 1024], [])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg182_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg183_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op249_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf246', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf247', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg182_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg183_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf249', get_index_5, add_1, None)
        return store


op250: ExternKernelSchedulerNode(ExternKernelOut)
op250.writes = [StarDep(name='buf250', mode=None)]
op250.unmet_dependencies = [StarDep(name='buf249', mode=None)]
op250.met_dependencies = [StarDep(name='arg184_1', mode=None), StarDep(name='arg185_1', mode=None)]
op250.outputs = [
    buf250: ExternKernelOut
    buf250.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf250.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op250.node.kernel = extern_kernels.addmm


op251: ExternKernelSchedulerNode(ExternKernelOut)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf249', mode=None)]
op251.met_dependencies = [StarDep(name='arg186_1', mode=None), StarDep(name='arg187_1', mode=None)]
op251.outputs = [
    buf251: ExternKernelOut
    buf251.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf251.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op251.node.kernel = extern_kernels.addmm


op252: ExternKernelSchedulerNode(ExternKernelOut)
op252.writes = [StarDep(name='buf252', mode=None)]
op252.unmet_dependencies = [StarDep(name='buf249', mode=None)]
op252.met_dependencies = [StarDep(name='arg188_1', mode=None), StarDep(name='arg189_1', mode=None)]
op252.outputs = [
    buf252: ExternKernelOut
    buf252.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op252.node.kernel = extern_kernels.addmm


op254: ExternKernelSchedulerNode(FallbackKernel)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = 
    [   StarDep(name='buf250', mode=None),
        StarDep(name='buf251', mode=None),
        StarDep(name='buf252', mode=None),
        StarDep(name='buf253', mode=None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: FallbackKernel
    buf254.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf254.users = [NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op254.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op255: ExternKernelSchedulerNode(MultiOutput)
op255.writes = [StarDep(name='buf255', mode=None)]
op255.unmet_dependencies = [StarDep(name='buf254', mode=None)]
op255.met_dependencies = []
op255.outputs = [
    buf255: MultiOutput
    buf255.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op255.node.kernel = None


op259: ExternKernelSchedulerNode(ExternKernelOut)
op259.writes = [StarDep(name='buf259', mode=None)]
op259.unmet_dependencies = [StarDep(name='buf255', mode=None)]
op259.met_dependencies = [StarDep(name='arg190_1', mode=None)]
op259.outputs = [
    buf259: ExternKernelOut
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op259.node.kernel = extern_kernels.mm


op260_op261_op263: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op260_op261_op263.writes = 
    [   MemoryDep('buf260', c0, {c0: 256}),
        MemoryDep('buf261', c0, {c0: 256}),
        MemoryDep('buf263', c0, {c0: 262144})]
op260_op261_op263.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 262144}), MemoryDep('buf259', c0, {c0: 262144})]
op260_op261_op263.met_dependencies = 
    [   MemoryDep('arg191_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg192_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg193_1', c1, {c0: 256, c1: 1024})]
op260_op261_op263.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf260.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf261.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op260_op261_op263.snodes[0] =
op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 256})]
op260.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 262144}), MemoryDep('buf259', c0, {c0: 262144})]
op260.met_dependencies = [MemoryDep('arg191_1', c1, {c0: 256, c1: 1024})]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf260.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (256, 1024)
op260.sizes = ([256], [1024])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg191_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op260_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf260', get_index_3, getitem)
        return store_reduction
op260_op261_op263.snodes[1] =
op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 256})]
op261.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 262144}), MemoryDep('buf259', c0, {c0: 262144})]
op261.met_dependencies = [MemoryDep('arg191_1', c1, {c0: 256, c1: 1024})]
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf261.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op261.group.device = cuda:0
op261.group.iteration = (256, 1024)
op261.sizes = ([256], [1024])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg191_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf261_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op261_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf261', get_index_3, getitem_1)
        return store_reduction
op260_op261_op263.snodes[2] =
op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 262144})]
op263.unmet_dependencies = 
    [   MemoryDep('buf245', c0, {c0: 262144}),
        MemoryDep('buf259', c0, {c0: 262144}),
        MemoryDep('buf260', c0, {c0: 256}),
        MemoryDep('buf261', c0, {c0: 256})]
op263.met_dependencies = 
    [   MemoryDep('arg191_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg192_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg193_1', c1, {c0: 256, c1: 1024})]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (262144, 1)
op263.sizes = ([256, 1024], [])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg191_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf261_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg192_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg193_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf263_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op263_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf260', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf261', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg192_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg193_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf263', get_index_7, add_3, None)
        return store


op264: ExternKernelSchedulerNode(ExternKernelOut)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = [StarDep(name='buf263', mode=None)]
op264.met_dependencies = [StarDep(name='arg194_1', mode=None)]
op264.outputs = [
    buf264: ExternKernelOut
    buf264.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf264.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=True, is_weak=False)]
]
op264.node.kernel = extern_kernels.mm


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 1048576})]
op265.unmet_dependencies = [MemoryDep('buf264', c0, {c0: 1048576})]
op265.met_dependencies = [MemoryDep('arg195_1', c1, {c0: 256, c1: 4096})]
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (1048576, 1)
op265.sizes = ([256, 4096], [])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg195_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op265_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg195_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf264', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg195_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf265', get_index_4, mul_2, None)
        return store


op266: ExternKernelSchedulerNode(ExternKernelOut)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op266.met_dependencies = [StarDep(name='arg196_1', mode=None)]
op266.outputs = [
    buf266: ExternKernelOut
    buf266.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf266.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False)]
]
op266.node.kernel = extern_kernels.mm


op267_op268_op269_op271: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op267_op268_op269_op271.writes = 
    [   MemoryDep('buf267', c0, {c0: 262144}),
        MemoryDep('buf268', c0, {c0: 256}),
        MemoryDep('buf269', c0, {c0: 256}),
        MemoryDep('buf271', c0, {c0: 262144})]
op267_op268_op269_op271.unmet_dependencies = 
    [   MemoryDep('buf245', c0, {c0: 262144}),
        MemoryDep('buf259', c0, {c0: 262144}),
        MemoryDep('buf266', c0, {c0: 262144})]
op267_op268_op269_op271.met_dependencies = 
    [   MemoryDep('arg191_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg197_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg198_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg199_1', c1, {c0: 256, c1: 1024})]
op267_op268_op269_op271.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False),
    ]
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf268.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf269.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf271.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op267_op268_op269_op271.snodes[0] =
op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 262144})]
op267.unmet_dependencies = 
    [   MemoryDep('buf245', c0, {c0: 262144}),
        MemoryDep('buf259', c0, {c0: 262144}),
        MemoryDep('buf266', c0, {c0: 262144})]
op267.met_dependencies = 
    [   MemoryDep('arg191_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg197_1', c1, {c0: 256, c1: 1024})]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False),
    ]
]
op267.group.device = cuda:0
op267.group.iteration = (262144, 1)
op267.sizes = ([256, 1024], [])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg191_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg197_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op267_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf266', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg197_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf267', get_index_5, add_3, None)
        return store
op267_op268_op269_op271.snodes[1] =
op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 256})]
op268.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 262144})]
op268.met_dependencies = []
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf268.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (256, 1024)
op268.sizes = ([256], [1024])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf268_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op268_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf268', get_index_1, getitem)
        return store_reduction
op267_op268_op269_op271.snodes[2] =
op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 256})]
op269.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 262144})]
op269.met_dependencies = []
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf269.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (256, 1024)
op269.sizes = ([256], [1024])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op269_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf269', get_index_1, getitem_1)
        return store_reduction
op267_op268_op269_op271.snodes[3] =
op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 262144})]
op271.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 262144}),
        MemoryDep('buf268', c0, {c0: 256}),
        MemoryDep('buf269', c0, {c0: 256})]
op271.met_dependencies = 
    [   MemoryDep('arg198_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg199_1', c1, {c0: 256, c1: 1024})]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf271.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (262144, 1)
op271.sizes = ([256, 1024], [])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf268_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg198_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg199_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf271_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op271_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf268', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf269', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg198_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg199_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf271', get_index_5, add_1, None)
        return store




# ===== run_2025_10_19_04_14_08_043050-pid_19/torchinductor/model__3_inference_3.3/ir_pre_fusion.txt =====
op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 256})]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 256}),
        MemoryDep('arg1_1', c1 + 1024*tmp0, {c0: 256, c1: 1024}),
        MemoryDep('arg2_1', c1 + 2048, {c0: 2, c1: 131072})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf0.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (256, 1024)
op0.sizes = ([2, 128], [1024])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[250027, 1024], stride=[1024, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.float32, size=[1026, 1024], stride=[1024, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op0_loop_body:
    var_ranges = {p0: 2, p1: 128, p2: 1024}
    index0 = 128*p0 + p1
    index1 = 1024*indirect0 + p2
    index2 = p1 + 2
    index3 = 1026
    index4 = 1024*p1 + p2 + 2048
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        constant = ops.constant(32.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf0', get_index_5, getitem)
        return store_reduction


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 256})]
op1.unmet_dependencies = []
op1.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 256}),
        MemoryDep('arg1_1', c1 + 1024*tmp0, {c0: 256, c1: 1024}),
        MemoryDep('arg2_1', c1 + 2048, {c0: 2, c1: 131072})]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf1.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (256, 1024)
op1.sizes = ([2, 128], [1024])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[250027, 1024], stride=[1024, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.float32, size=[1026, 1024], stride=[1024, 1])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op1_loop_body:
    var_ranges = {p0: 2, p1: 128, p2: 1024}
    index0 = 128*p0 + p1
    index1 = 1024*indirect0 + p2
    index2 = p1 + 2
    index3 = 1026
    index4 = 1024*p1 + p2 + 2048
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        constant = ops.constant(32.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf1', get_index_5, getitem_1)
        return store_reduction


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 262144})]
op3.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 256}), MemoryDep('buf1', c0, {c0: 256})]
op3.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 256}),
        MemoryDep('arg1_1', c1 + 1024*tmp0, {c0: 256, c1: 1024}),
        MemoryDep('arg2_1', c1 + 2048, {c0: 2, c1: 131072}),
        MemoryDep('arg3_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg4_1', c1, {c0: 256, c1: 1024})]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (262144, 1)
op3.sizes = ([2, 128, 1024], [])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[250027, 1024], stride=[1024, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.float32, size=[1026, 1024], stride=[1024, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg3_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg4_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op3_loop_body:
    var_ranges = {p0: 2, p1: 128, p2: 1024}
    index0 = 128*p0 + p1
    index1 = 1024*indirect0 + p2
    index2 = p1 + 2
    index3 = 1026
    index4 = 1024*p1 + p2 + 2048
    index5 = p2
    index6 = 131072*p0 + 1024*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        constant = ops.constant(32.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(mul, load_2)
        get_index_5 = self.get_index('index0')
        load_3 = ops.load('buf0', get_index_5)
        sub = ops.sub(add, load_3)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_6)
        constant_1 = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_1)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_7 = self.get_index('index5')
        load_5 = ops.load('arg3_1', get_index_7)
        mul_2 = ops.mul(mul_1, load_5)
        get_index_8 = self.get_index('index5')
        load_6 = ops.load('arg4_1', get_index_8)
        add_2 = ops.add(mul_2, load_6)
        get_index_9 = self.get_index('index6')
        store = ops.store('buf3', get_index_9, add_2, None)
        return store


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 256})]
op4.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 262144})]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf4.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (256, 1024)
op4.sizes = ([256], [1024])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op4_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf4', get_index_1, getitem)
        return store_reduction


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 256})]
op5.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 262144})]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (256, 1024)
op5.sizes = ([256], [1024])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op5_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf5', get_index_1, getitem_1)
        return store_reduction


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 262144})]
op7.unmet_dependencies = 
    [   MemoryDep('buf3', c0, {c0: 262144}),
        MemoryDep('buf4', c0, {c0: 256}),
        MemoryDep('buf5', c0, {c0: 256})]
op7.met_dependencies = 
    [   MemoryDep('arg6_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg7_1', c1, {c0: 256, c1: 1024})]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
    ]
]
op7.group.device = cuda:0
op7.group.iteration = (262144, 1)
op7.sizes = ([256, 1024], [])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg6_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg7_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op7_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf4', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf5', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg6_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg7_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf7', get_index_5, add_1, None)
        return store


op8: SchedulerNode(MultiTemplateBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 262144})]
op8.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op8.met_dependencies = [StarDep(name='arg8_1', mode=None), StarDep(name='arg9_1', mode=None)]
op8.outputs = [
    buf8: MultiTemplateBuffer
    buf8.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (262144, 1)
op8.sizes = ([256, 1024], ())
arg9_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg8_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op9: SchedulerNode(MultiTemplateBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 262144})]
op9.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op9.met_dependencies = [StarDep(name='arg10_1', mode=None), StarDep(name='arg11_1', mode=None)]
op9.outputs = [
    buf9: MultiTemplateBuffer
    buf9.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (262144, 1)
op9.sizes = ([256, 1024], ())
arg11_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg10_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf9_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op10: SchedulerNode(MultiTemplateBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 262144})]
op10.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op10.met_dependencies = [StarDep(name='arg12_1', mode=None), StarDep(name='arg13_1', mode=None)]
op10.outputs = [
    buf10: MultiTemplateBuffer
    buf10.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf10.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (262144, 1)
op10.sizes = ([256, 1024], ())
arg13_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg12_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 524288})]
op11.unmet_dependencies = []
op11.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (524288, 1)
op11.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op11_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf11', get_index_2, where, None)
        return store


op12: ExternKernelSchedulerNode(FallbackKernel)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = 
    [   StarDep(name='buf10', mode=None),
        StarDep(name='buf11', mode=None),
        StarDep(name='buf8', mode=None),
        StarDep(name='buf9', mode=None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: FallbackKernel
    buf12.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op13: ExternKernelSchedulerNode(MultiOutput)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf12', mode=None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: MultiOutput
    buf13.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op13.node.kernel = None


op17: ExternKernelSchedulerNode(ExternKernelOut)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf13', mode=None)]
op17.met_dependencies = [StarDep(name='arg14_1', mode=None)]
op17.outputs = [
    buf17: ExternKernelOut
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
    ]
]
op17.node.kernel = extern_kernels.mm


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 256})]
op18.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 262144}), MemoryDep('buf3', c0, {c0: 262144})]
op18.met_dependencies = [MemoryDep('arg15_1', c1, {c0: 256, c1: 1024})]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (256, 1024)
op18.sizes = ([256], [1024])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg15_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op18_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg15_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf18', get_index_3, getitem)
        return store_reduction


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 256})]
op19.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 262144}), MemoryDep('buf3', c0, {c0: 262144})]
op19.met_dependencies = [MemoryDep('arg15_1', c1, {c0: 256, c1: 1024})]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (256, 1024)
op19.sizes = ([256], [1024])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg15_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op19_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg15_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf19', get_index_3, getitem_1)
        return store_reduction


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 262144})]
op21.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 262144}),
        MemoryDep('buf18', c0, {c0: 256}),
        MemoryDep('buf19', c0, {c0: 256}),
        MemoryDep('buf3', c0, {c0: 262144})]
op21.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg16_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg17_1', c1, {c0: 256, c1: 1024})]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (262144, 1)
op21.sizes = ([256, 1024], [])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg15_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg16_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg17_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op21_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg15_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf18', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf19', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg16_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg17_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf21', get_index_7, add_3, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg18_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.node.kernel = extern_kernels.mm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 1048576})]
op23.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 1048576})]
op23.met_dependencies = [MemoryDep('arg19_1', c1, {c0: 256, c1: 4096})]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (1048576, 1)
op23.sizes = ([256, 4096], [])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg19_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op23_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg19_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf22', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf23', get_index_4, mul_2, None)
        return store


op24: ExternKernelSchedulerNode(ExternKernelOut)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='arg20_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelOut
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf24.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False)]
]
op24.node.kernel = extern_kernels.mm


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 262144})]
op25.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 262144}),
        MemoryDep('buf24', c0, {c0: 262144}),
        MemoryDep('buf3', c0, {c0: 262144})]
op25.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg21_1', c1, {c0: 256, c1: 1024})]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf25.users = [
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
    ]
]
op25.group.device = cuda:0
op25.group.iteration = (262144, 1)
op25.sizes = ([256, 1024], [])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg15_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg21_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op25_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg15_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf24', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg21_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf25', get_index_5, add_3, None)
        return store


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 256})]
op26.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 262144})]
op26.met_dependencies = []
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf26.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (256, 1024)
op26.sizes = ([256], [1024])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op26_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf26', get_index_1, getitem)
        return store_reduction


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 256})]
op27.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 262144})]
op27.met_dependencies = []
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf27.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (256, 1024)
op27.sizes = ([256], [1024])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op27_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf27', get_index_1, getitem_1)
        return store_reduction


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 262144})]
op29.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 262144}),
        MemoryDep('buf26', c0, {c0: 256}),
        MemoryDep('buf27', c0, {c0: 256})]
op29.met_dependencies = 
    [   MemoryDep('arg22_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg23_1', c1, {c0: 256, c1: 1024})]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf29.users = [
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
    ]
]
op29.group.device = cuda:0
op29.group.iteration = (262144, 1)
op29.sizes = ([256, 1024], [])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg22_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg23_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op29_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf26', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf27', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg22_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg23_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf29', get_index_5, add_1, None)
        return store


op30: SchedulerNode(MultiTemplateBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 262144})]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = [StarDep(name='arg24_1', mode=None), StarDep(name='arg25_1', mode=None)]
op30.outputs = [
    buf30: MultiTemplateBuffer
    buf30.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (262144, 1)
op30.sizes = ([256, 1024], ())
arg25_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg24_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf30_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op31: SchedulerNode(MultiTemplateBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 262144})]
op31.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op31.met_dependencies = [StarDep(name='arg26_1', mode=None), StarDep(name='arg27_1', mode=None)]
op31.outputs = [
    buf31: MultiTemplateBuffer
    buf31.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (262144, 1)
op31.sizes = ([256, 1024], ())
arg27_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg26_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op32: SchedulerNode(MultiTemplateBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 262144})]
op32.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op32.met_dependencies = [StarDep(name='arg28_1', mode=None), StarDep(name='arg29_1', mode=None)]
op32.outputs = [
    buf32: MultiTemplateBuffer
    buf32.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (262144, 1)
op32.sizes = ([256, 1024], ())
arg29_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg28_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 524288})]
op33.unmet_dependencies = []
op33.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf33.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (524288, 1)
op33.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op33_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf33', get_index_2, where, None)
        return store


op34: ExternKernelSchedulerNode(FallbackKernel)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = 
    [   StarDep(name='buf30', mode=None),
        StarDep(name='buf31', mode=None),
        StarDep(name='buf32', mode=None),
        StarDep(name='buf33', mode=None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: FallbackKernel
    buf34.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf34.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op34.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op35: ExternKernelSchedulerNode(MultiOutput)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf34', mode=None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: MultiOutput
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf35.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op35.node.kernel = None


op39: ExternKernelSchedulerNode(ExternKernelOut)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf35', mode=None)]
op39.met_dependencies = [StarDep(name='arg30_1', mode=None)]
op39.outputs = [
    buf39: ExternKernelOut
    buf39.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
    ]
]
op39.node.kernel = extern_kernels.mm


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 256})]
op40.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 262144}), MemoryDep('buf39', c0, {c0: 262144})]
op40.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 256, c1: 1024})]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf40.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (256, 1024)
op40.sizes = ([256], [1024])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op40_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf39', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf40', get_index_3, getitem)
        return store_reduction


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 256})]
op41.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 262144}), MemoryDep('buf39', c0, {c0: 262144})]
op41.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 256, c1: 1024})]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf41.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (256, 1024)
op41.sizes = ([256], [1024])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op41_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf39', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf41', get_index_3, getitem_1)
        return store_reduction


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 262144})]
op43.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 262144}),
        MemoryDep('buf39', c0, {c0: 262144}),
        MemoryDep('buf40', c0, {c0: 256}),
        MemoryDep('buf41', c0, {c0: 256})]
op43.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg32_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg33_1', c1, {c0: 256, c1: 1024})]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (262144, 1)
op43.sizes = ([256, 1024], [])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg32_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg33_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op43_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf39', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf40', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf41', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg32_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg33_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf43', get_index_7, add_3, None)
        return store


op44: ExternKernelSchedulerNode(ExternKernelOut)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf43', mode=None)]
op44.met_dependencies = [StarDep(name='arg34_1', mode=None)]
op44.outputs = [
    buf44: ExternKernelOut
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False)]
]
op44.node.kernel = extern_kernels.mm


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 1048576})]
op45.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 1048576})]
op45.met_dependencies = [MemoryDep('arg35_1', c1, {c0: 256, c1: 4096})]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (1048576, 1)
op45.sizes = ([256, 4096], [])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg35_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op45_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg35_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf44', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg35_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf45', get_index_4, mul_2, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelOut)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op46.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op46.outputs = [
    buf46: ExternKernelOut
    buf46.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf46.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False)]
]
op46.node.kernel = extern_kernels.mm


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 262144})]
op47.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 262144}),
        MemoryDep('buf39', c0, {c0: 262144}),
        MemoryDep('buf46', c0, {c0: 262144})]
op47.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg37_1', c1, {c0: 256, c1: 1024})]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
    ]
]
op47.group.device = cuda:0
op47.group.iteration = (262144, 1)
op47.sizes = ([256, 1024], [])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg37_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op47_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf39', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf46', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg37_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf47', get_index_5, add_3, None)
        return store


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 256})]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 262144})]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf48.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (256, 1024)
op48.sizes = ([256], [1024])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op48_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf48', get_index_1, getitem)
        return store_reduction


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 256})]
op49.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 262144})]
op49.met_dependencies = []
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf49.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (256, 1024)
op49.sizes = ([256], [1024])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op49_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf49', get_index_1, getitem_1)
        return store_reduction


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 262144})]
op51.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 262144}),
        MemoryDep('buf48', c0, {c0: 256}),
        MemoryDep('buf49', c0, {c0: 256})]
op51.met_dependencies = 
    [   MemoryDep('arg38_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg39_1', c1, {c0: 256, c1: 1024})]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
    ]
]
op51.group.device = cuda:0
op51.group.iteration = (262144, 1)
op51.sizes = ([256, 1024], [])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg38_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg39_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op51_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf48', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf49', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg38_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg39_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf51', get_index_5, add_1, None)
        return store


op52: SchedulerNode(MultiTemplateBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 262144})]
op52.unmet_dependencies = [StarDep(name='buf51', mode=None)]
op52.met_dependencies = [StarDep(name='arg40_1', mode=None), StarDep(name='arg41_1', mode=None)]
op52.outputs = [
    buf52: MultiTemplateBuffer
    buf52.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (262144, 1)
op52.sizes = ([256, 1024], ())
arg41_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg40_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op53: SchedulerNode(MultiTemplateBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 262144})]
op53.unmet_dependencies = [StarDep(name='buf51', mode=None)]
op53.met_dependencies = [StarDep(name='arg42_1', mode=None), StarDep(name='arg43_1', mode=None)]
op53.outputs = [
    buf53: MultiTemplateBuffer
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (262144, 1)
op53.sizes = ([256, 1024], ())
arg43_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg42_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op54: SchedulerNode(MultiTemplateBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 262144})]
op54.unmet_dependencies = [StarDep(name='buf51', mode=None)]
op54.met_dependencies = [StarDep(name='arg44_1', mode=None), StarDep(name='arg45_1', mode=None)]
op54.outputs = [
    buf54: MultiTemplateBuffer
    buf54.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (262144, 1)
op54.sizes = ([256, 1024], ())
arg45_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg44_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf54_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 524288})]
op55.unmet_dependencies = []
op55.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf55.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (524288, 1)
op55.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op55_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf55', get_index_2, where, None)
        return store


op56: ExternKernelSchedulerNode(FallbackKernel)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = 
    [   StarDep(name='buf52', mode=None),
        StarDep(name='buf53', mode=None),
        StarDep(name='buf54', mode=None),
        StarDep(name='buf55', mode=None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: FallbackKernel
    buf56.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op56.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op57: ExternKernelSchedulerNode(MultiOutput)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf56', mode=None)]
op57.met_dependencies = []
op57.outputs = [
    buf57: MultiOutput
    buf57.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf57.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op57.node.kernel = None


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf57', mode=None)]
op61.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf61.users = [
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
    ]
]
op61.node.kernel = extern_kernels.mm


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 256})]
op62.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 262144}), MemoryDep('buf61', c0, {c0: 262144})]
op62.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 256, c1: 1024})]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf62.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (256, 1024)
op62.sizes = ([256], [1024])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg47_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op62_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg47_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf62', get_index_3, getitem)
        return store_reduction


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 256})]
op63.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 262144}), MemoryDep('buf61', c0, {c0: 262144})]
op63.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 256, c1: 1024})]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf63.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (256, 1024)
op63.sizes = ([256], [1024])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg47_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op63_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg47_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf63', get_index_3, getitem_1)
        return store_reduction


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 262144})]
op65.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 262144}),
        MemoryDep('buf61', c0, {c0: 262144}),
        MemoryDep('buf62', c0, {c0: 256}),
        MemoryDep('buf63', c0, {c0: 256})]
op65.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg48_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg49_1', c1, {c0: 256, c1: 1024})]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (262144, 1)
op65.sizes = ([256, 1024], [])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg47_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg48_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg49_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op65_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg47_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf62', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf63', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg48_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg49_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf65', get_index_7, add_3, None)
        return store


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='arg50_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False)]
]
op66.node.kernel = extern_kernels.mm


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 1048576})]
op67.unmet_dependencies = [MemoryDep('buf66', c0, {c0: 1048576})]
op67.met_dependencies = [MemoryDep('arg51_1', c1, {c0: 256, c1: 4096})]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (1048576, 1)
op67.sizes = ([256, 4096], [])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg51_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op67_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg51_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf66', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg51_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf67', get_index_4, mul_2, None)
        return store


op68: ExternKernelSchedulerNode(ExternKernelOut)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf67', mode=None)]
op68.met_dependencies = [StarDep(name='arg52_1', mode=None)]
op68.outputs = [
    buf68: ExternKernelOut
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf68.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False)]
]
op68.node.kernel = extern_kernels.mm


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 262144})]
op69.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 262144}),
        MemoryDep('buf61', c0, {c0: 262144}),
        MemoryDep('buf68', c0, {c0: 262144})]
op69.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg53_1', c1, {c0: 256, c1: 1024})]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf69.users = [
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False),
    ]
]
op69.group.device = cuda:0
op69.group.iteration = (262144, 1)
op69.sizes = ([256, 1024], [])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg47_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg53_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op69_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg47_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf68', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg53_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf69', get_index_5, add_3, None)
        return store


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 256})]
op70.unmet_dependencies = [MemoryDep('buf69', c0, {c0: 262144})]
op70.met_dependencies = []
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf70.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (256, 1024)
op70.sizes = ([256], [1024])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op70_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf70', get_index_1, getitem)
        return store_reduction


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 256})]
op71.unmet_dependencies = [MemoryDep('buf69', c0, {c0: 262144})]
op71.met_dependencies = []
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf71.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (256, 1024)
op71.sizes = ([256], [1024])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op71_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf71', get_index_1, getitem_1)
        return store_reduction


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 262144})]
op73.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 262144}),
        MemoryDep('buf70', c0, {c0: 256}),
        MemoryDep('buf71', c0, {c0: 256})]
op73.met_dependencies = 
    [   MemoryDep('arg54_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg55_1', c1, {c0: 256, c1: 1024})]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
    ]
]
op73.group.device = cuda:0
op73.group.iteration = (262144, 1)
op73.sizes = ([256, 1024], [])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg54_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg55_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op73_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf70', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf71', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg54_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg55_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf73', get_index_5, add_1, None)
        return store


op74: SchedulerNode(MultiTemplateBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 262144})]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = [StarDep(name='arg56_1', mode=None), StarDep(name='arg57_1', mode=None)]
op74.outputs = [
    buf74: MultiTemplateBuffer
    buf74.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (262144, 1)
op74.sizes = ([256, 1024], ())
arg57_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg56_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op75: SchedulerNode(MultiTemplateBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 262144})]
op75.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op75.met_dependencies = [StarDep(name='arg58_1', mode=None), StarDep(name='arg59_1', mode=None)]
op75.outputs = [
    buf75: MultiTemplateBuffer
    buf75.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf75.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (262144, 1)
op75.sizes = ([256, 1024], ())
arg59_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg58_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op76: SchedulerNode(MultiTemplateBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 262144})]
op76.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op76.met_dependencies = [StarDep(name='arg60_1', mode=None), StarDep(name='arg61_1', mode=None)]
op76.outputs = [
    buf76: MultiTemplateBuffer
    buf76.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf76.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (262144, 1)
op76.sizes = ([256, 1024], ())
arg61_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg60_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf76_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 524288})]
op77.unmet_dependencies = []
op77.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (524288, 1)
op77.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op77_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf77', get_index_2, where, None)
        return store


op78: ExternKernelSchedulerNode(FallbackKernel)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = 
    [   StarDep(name='buf74', mode=None),
        StarDep(name='buf75', mode=None),
        StarDep(name='buf76', mode=None),
        StarDep(name='buf77', mode=None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: FallbackKernel
    buf78.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf78.users = [NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op78.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op79: ExternKernelSchedulerNode(MultiOutput)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op79.met_dependencies = []
op79.outputs = [
    buf79: MultiOutput
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op79.node.kernel = None


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op83.met_dependencies = [StarDep(name='arg62_1', mode=None)]
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf83.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False),
    ]
]
op83.node.kernel = extern_kernels.mm


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 256})]
op84.unmet_dependencies = [MemoryDep('buf69', c0, {c0: 262144}), MemoryDep('buf83', c0, {c0: 262144})]
op84.met_dependencies = [MemoryDep('arg63_1', c1, {c0: 256, c1: 1024})]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf84.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (256, 1024)
op84.sizes = ([256], [1024])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg63_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op84_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf83', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf84', get_index_3, getitem)
        return store_reduction


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 256})]
op85.unmet_dependencies = [MemoryDep('buf69', c0, {c0: 262144}), MemoryDep('buf83', c0, {c0: 262144})]
op85.met_dependencies = [MemoryDep('arg63_1', c1, {c0: 256, c1: 1024})]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf85.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (256, 1024)
op85.sizes = ([256], [1024])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg63_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op85_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf83', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf85', get_index_3, getitem_1)
        return store_reduction


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 262144})]
op87.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 262144}),
        MemoryDep('buf83', c0, {c0: 262144}),
        MemoryDep('buf84', c0, {c0: 256}),
        MemoryDep('buf85', c0, {c0: 256})]
op87.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg64_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg65_1', c1, {c0: 256, c1: 1024})]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (262144, 1)
op87.sizes = ([256, 1024], [])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg63_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg64_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg65_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op87_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf83', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf84', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf85', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg64_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg65_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf87', get_index_7, add_3, None)
        return store


op88: ExternKernelSchedulerNode(ExternKernelOut)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op88.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op88.outputs = [
    buf88: ExternKernelOut
    buf88.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf88.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False)]
]
op88.node.kernel = extern_kernels.mm


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 1048576})]
op89.unmet_dependencies = [MemoryDep('buf88', c0, {c0: 1048576})]
op89.met_dependencies = [MemoryDep('arg67_1', c1, {c0: 256, c1: 4096})]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (1048576, 1)
op89.sizes = ([256, 4096], [])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg67_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op89_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf88', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg67_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf89', get_index_4, mul_2, None)
        return store


op90: ExternKernelSchedulerNode(ExternKernelOut)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op90.met_dependencies = [StarDep(name='arg68_1', mode=None)]
op90.outputs = [
    buf90: ExternKernelOut
    buf90.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf90.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False)]
]
op90.node.kernel = extern_kernels.mm


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 262144})]
op91.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 262144}),
        MemoryDep('buf83', c0, {c0: 262144}),
        MemoryDep('buf90', c0, {c0: 262144})]
op91.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg69_1', c1, {c0: 256, c1: 1024})]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf91.users = [
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False),
    ]
]
op91.group.device = cuda:0
op91.group.iteration = (262144, 1)
op91.sizes = ([256, 1024], [])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg63_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg69_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op91_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf83', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf90', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg69_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf91', get_index_5, add_3, None)
        return store


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 256})]
op92.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 262144})]
op92.met_dependencies = []
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf92.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (256, 1024)
op92.sizes = ([256], [1024])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op92_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf92', get_index_1, getitem)
        return store_reduction


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 256})]
op93.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 262144})]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf93.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (256, 1024)
op93.sizes = ([256], [1024])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op93_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf93', get_index_1, getitem_1)
        return store_reduction


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 262144})]
op95.unmet_dependencies = 
    [   MemoryDep('buf91', c0, {c0: 262144}),
        MemoryDep('buf92', c0, {c0: 256}),
        MemoryDep('buf93', c0, {c0: 256})]
op95.met_dependencies = 
    [   MemoryDep('arg70_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg71_1', c1, {c0: 256, c1: 1024})]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf95.users = [
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
    ]
]
op95.group.device = cuda:0
op95.group.iteration = (262144, 1)
op95.sizes = ([256, 1024], [])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg70_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg71_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op95_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf92', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf93', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg70_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg71_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf95', get_index_5, add_1, None)
        return store


op96: SchedulerNode(MultiTemplateBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 262144})]
op96.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op96.met_dependencies = [StarDep(name='arg72_1', mode=None), StarDep(name='arg73_1', mode=None)]
op96.outputs = [
    buf96: MultiTemplateBuffer
    buf96.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (262144, 1)
op96.sizes = ([256, 1024], ())
arg73_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg72_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op97: SchedulerNode(MultiTemplateBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 262144})]
op97.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op97.met_dependencies = [StarDep(name='arg74_1', mode=None), StarDep(name='arg75_1', mode=None)]
op97.outputs = [
    buf97: MultiTemplateBuffer
    buf97.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (262144, 1)
op97.sizes = ([256, 1024], ())
arg75_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg74_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf97_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op98: SchedulerNode(MultiTemplateBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 262144})]
op98.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op98.met_dependencies = [StarDep(name='arg76_1', mode=None), StarDep(name='arg77_1', mode=None)]
op98.outputs = [
    buf98: MultiTemplateBuffer
    buf98.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (262144, 1)
op98.sizes = ([256, 1024], ())
arg77_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg76_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 524288})]
op99.unmet_dependencies = []
op99.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (524288, 1)
op99.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op99_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf99', get_index_2, where, None)
        return store


op100: ExternKernelSchedulerNode(FallbackKernel)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = 
    [   StarDep(name='buf96', mode=None),
        StarDep(name='buf97', mode=None),
        StarDep(name='buf98', mode=None),
        StarDep(name='buf99', mode=None)]
op100.met_dependencies = []
op100.outputs = [
    buf100: FallbackKernel
    buf100.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf100.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op101: ExternKernelSchedulerNode(MultiOutput)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: MultiOutput
    buf101.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op101.node.kernel = None


op105: ExternKernelSchedulerNode(ExternKernelOut)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op105.met_dependencies = [StarDep(name='arg78_1', mode=None)]
op105.outputs = [
    buf105: ExternKernelOut
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf105.users = [
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False),
    ]
]
op105.node.kernel = extern_kernels.mm


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 256})]
op106.unmet_dependencies = [MemoryDep('buf105', c0, {c0: 262144}), MemoryDep('buf91', c0, {c0: 262144})]
op106.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 256, c1: 1024})]
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf106.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (256, 1024)
op106.sizes = ([256], [1024])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg79_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op106_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf105', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf106', get_index_3, getitem)
        return store_reduction


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 256})]
op107.unmet_dependencies = [MemoryDep('buf105', c0, {c0: 262144}), MemoryDep('buf91', c0, {c0: 262144})]
op107.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 256, c1: 1024})]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf107.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (256, 1024)
op107.sizes = ([256], [1024])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg79_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op107_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf105', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf107', get_index_3, getitem_1)
        return store_reduction


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 262144})]
op109.unmet_dependencies = 
    [   MemoryDep('buf105', c0, {c0: 262144}),
        MemoryDep('buf106', c0, {c0: 256}),
        MemoryDep('buf107', c0, {c0: 256}),
        MemoryDep('buf91', c0, {c0: 262144})]
op109.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg80_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg81_1', c1, {c0: 256, c1: 1024})]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (262144, 1)
op109.sizes = ([256, 1024], [])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg79_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg80_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg81_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op109_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf105', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf106', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf107', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg80_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg81_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf109', get_index_7, add_3, None)
        return store


op110: ExternKernelSchedulerNode(ExternKernelOut)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf109', mode=None)]
op110.met_dependencies = [StarDep(name='arg82_1', mode=None)]
op110.outputs = [
    buf110: ExternKernelOut
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False)]
]
op110.node.kernel = extern_kernels.mm


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 1048576})]
op111.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 1048576})]
op111.met_dependencies = [MemoryDep('arg83_1', c1, {c0: 256, c1: 4096})]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (1048576, 1)
op111.sizes = ([256, 4096], [])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg83_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op111_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg83_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf110', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg83_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf111', get_index_4, mul_2, None)
        return store


op112: ExternKernelSchedulerNode(ExternKernelOut)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf111', mode=None)]
op112.met_dependencies = [StarDep(name='arg84_1', mode=None)]
op112.outputs = [
    buf112: ExternKernelOut
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf112.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False)]
]
op112.node.kernel = extern_kernels.mm


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 262144})]
op113.unmet_dependencies = 
    [   MemoryDep('buf105', c0, {c0: 262144}),
        MemoryDep('buf112', c0, {c0: 262144}),
        MemoryDep('buf91', c0, {c0: 262144})]
op113.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg85_1', c1, {c0: 256, c1: 1024})]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf113.users = [
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
    ]
]
op113.group.device = cuda:0
op113.group.iteration = (262144, 1)
op113.sizes = ([256, 1024], [])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg79_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg85_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op113_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf105', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf112', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg85_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf113', get_index_5, add_3, None)
        return store


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 256})]
op114.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 262144})]
op114.met_dependencies = []
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf114.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (256, 1024)
op114.sizes = ([256], [1024])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op114_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf114', get_index_1, getitem)
        return store_reduction


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 256})]
op115.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 262144})]
op115.met_dependencies = []
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf115.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (256, 1024)
op115.sizes = ([256], [1024])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op115_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf115', get_index_1, getitem_1)
        return store_reduction


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 262144})]
op117.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 262144}),
        MemoryDep('buf114', c0, {c0: 256}),
        MemoryDep('buf115', c0, {c0: 256})]
op117.met_dependencies = 
    [   MemoryDep('arg86_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg87_1', c1, {c0: 256, c1: 1024})]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
    ]
]
op117.group.device = cuda:0
op117.group.iteration = (262144, 1)
op117.sizes = ([256, 1024], [])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg86_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg87_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op117_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf114', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf115', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg86_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg87_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf117', get_index_5, add_1, None)
        return store


op118: SchedulerNode(MultiTemplateBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 262144})]
op118.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op118.met_dependencies = [StarDep(name='arg88_1', mode=None), StarDep(name='arg89_1', mode=None)]
op118.outputs = [
    buf118: MultiTemplateBuffer
    buf118.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf118.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (262144, 1)
op118.sizes = ([256, 1024], ())
arg89_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg88_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op119: SchedulerNode(MultiTemplateBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 262144})]
op119.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op119.met_dependencies = [StarDep(name='arg90_1', mode=None), StarDep(name='arg91_1', mode=None)]
op119.outputs = [
    buf119: MultiTemplateBuffer
    buf119.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (262144, 1)
op119.sizes = ([256, 1024], ())
arg91_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg90_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op120: SchedulerNode(MultiTemplateBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 262144})]
op120.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op120.met_dependencies = [StarDep(name='arg92_1', mode=None), StarDep(name='arg93_1', mode=None)]
op120.outputs = [
    buf120: MultiTemplateBuffer
    buf120.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (262144, 1)
op120.sizes = ([256, 1024], ())
arg93_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg92_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 524288})]
op121.unmet_dependencies = []
op121.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (524288, 1)
op121.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op121_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf121', get_index_2, where, None)
        return store


op122: ExternKernelSchedulerNode(FallbackKernel)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = 
    [   StarDep(name='buf118', mode=None),
        StarDep(name='buf119', mode=None),
        StarDep(name='buf120', mode=None),
        StarDep(name='buf121', mode=None)]
op122.met_dependencies = []
op122.outputs = [
    buf122: FallbackKernel
    buf122.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op123: ExternKernelSchedulerNode(MultiOutput)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op123.met_dependencies = []
op123.outputs = [
    buf123: MultiOutput
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op123.node.kernel = None


op127: ExternKernelSchedulerNode(ExternKernelOut)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op127.met_dependencies = [StarDep(name='arg94_1', mode=None)]
op127.outputs = [
    buf127: ExternKernelOut
    buf127.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf127.users = [
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
    ]
]
op127.node.kernel = extern_kernels.mm


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 256})]
op128.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 262144}), MemoryDep('buf127', c0, {c0: 262144})]
op128.met_dependencies = [MemoryDep('arg95_1', c1, {c0: 256, c1: 1024})]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf128.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (256, 1024)
op128.sizes = ([256], [1024])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg95_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op128_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf127', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg95_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf128', get_index_3, getitem)
        return store_reduction


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 256})]
op129.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 262144}), MemoryDep('buf127', c0, {c0: 262144})]
op129.met_dependencies = [MemoryDep('arg95_1', c1, {c0: 256, c1: 1024})]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf129.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (256, 1024)
op129.sizes = ([256], [1024])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg95_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op129_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf127', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg95_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf129', get_index_3, getitem_1)
        return store_reduction


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 262144})]
op131.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 262144}),
        MemoryDep('buf127', c0, {c0: 262144}),
        MemoryDep('buf128', c0, {c0: 256}),
        MemoryDep('buf129', c0, {c0: 256})]
op131.met_dependencies = 
    [   MemoryDep('arg95_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg96_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg97_1', c1, {c0: 256, c1: 1024})]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (262144, 1)
op131.sizes = ([256, 1024], [])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg95_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg96_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg97_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op131_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf127', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg95_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf128', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf129', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg96_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg97_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf131', get_index_7, add_3, None)
        return store


op132: ExternKernelSchedulerNode(ExternKernelOut)
op132.writes = [StarDep(name='buf132', mode=None)]
op132.unmet_dependencies = [StarDep(name='buf131', mode=None)]
op132.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op132.outputs = [
    buf132: ExternKernelOut
    buf132.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf132.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False)]
]
op132.node.kernel = extern_kernels.mm


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 1048576})]
op133.unmet_dependencies = [MemoryDep('buf132', c0, {c0: 1048576})]
op133.met_dependencies = [MemoryDep('arg99_1', c1, {c0: 256, c1: 4096})]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (1048576, 1)
op133.sizes = ([256, 4096], [])
buf132_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg99_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op133_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg99_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf132', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg99_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf133', get_index_4, mul_2, None)
        return store


op134: ExternKernelSchedulerNode(ExternKernelOut)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf133', mode=None)]
op134.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op134.outputs = [
    buf134: ExternKernelOut
    buf134.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
]
op134.node.kernel = extern_kernels.mm


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 262144})]
op135.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 262144}),
        MemoryDep('buf127', c0, {c0: 262144}),
        MemoryDep('buf134', c0, {c0: 262144})]
op135.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg95_1', c1, {c0: 256, c1: 1024})]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf135.users = [
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False),
    ]
]
op135.group.device = cuda:0
op135.group.iteration = (262144, 1)
op135.sizes = ([256, 1024], [])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg95_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg101_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op135_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf127', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg95_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf134', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg101_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf135', get_index_5, add_3, None)
        return store


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 256})]
op136.unmet_dependencies = [MemoryDep('buf135', c0, {c0: 262144})]
op136.met_dependencies = []
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf136.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (256, 1024)
op136.sizes = ([256], [1024])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf136_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op136_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf136', get_index_1, getitem)
        return store_reduction


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 256})]
op137.unmet_dependencies = [MemoryDep('buf135', c0, {c0: 262144})]
op137.met_dependencies = []
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf137.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (256, 1024)
op137.sizes = ([256], [1024])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op137_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf137', get_index_1, getitem_1)
        return store_reduction


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 262144})]
op139.unmet_dependencies = 
    [   MemoryDep('buf135', c0, {c0: 262144}),
        MemoryDep('buf136', c0, {c0: 256}),
        MemoryDep('buf137', c0, {c0: 256})]
op139.met_dependencies = 
    [   MemoryDep('arg102_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg103_1', c1, {c0: 256, c1: 1024})]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op139.group.device = cuda:0
op139.group.iteration = (262144, 1)
op139.sizes = ([256, 1024], [])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf136_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg102_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg103_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op139_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf136', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf137', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg102_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg103_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf139', get_index_5, add_1, None)
        return store


op140: SchedulerNode(MultiTemplateBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 262144})]
op140.unmet_dependencies = [StarDep(name='buf139', mode=None)]
op140.met_dependencies = [StarDep(name='arg104_1', mode=None), StarDep(name='arg105_1', mode=None)]
op140.outputs = [
    buf140: MultiTemplateBuffer
    buf140.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (262144, 1)
op140.sizes = ([256, 1024], ())
arg105_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg104_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf140_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op141: SchedulerNode(MultiTemplateBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 262144})]
op141.unmet_dependencies = [StarDep(name='buf139', mode=None)]
op141.met_dependencies = [StarDep(name='arg106_1', mode=None), StarDep(name='arg107_1', mode=None)]
op141.outputs = [
    buf141: MultiTemplateBuffer
    buf141.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (262144, 1)
op141.sizes = ([256, 1024], ())
arg107_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg106_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op142: SchedulerNode(MultiTemplateBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 262144})]
op142.unmet_dependencies = [StarDep(name='buf139', mode=None)]
op142.met_dependencies = [StarDep(name='arg108_1', mode=None), StarDep(name='arg109_1', mode=None)]
op142.outputs = [
    buf142: MultiTemplateBuffer
    buf142.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (262144, 1)
op142.sizes = ([256, 1024], ())
arg109_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg108_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 524288})]
op143.unmet_dependencies = []
op143.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (524288, 1)
op143.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op143_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf143', get_index_2, where, None)
        return store


op144: ExternKernelSchedulerNode(FallbackKernel)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = 
    [   StarDep(name='buf140', mode=None),
        StarDep(name='buf141', mode=None),
        StarDep(name='buf142', mode=None),
        StarDep(name='buf143', mode=None)]
op144.met_dependencies = []
op144.outputs = [
    buf144: FallbackKernel
    buf144.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op144.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op145: ExternKernelSchedulerNode(MultiOutput)
op145.writes = [StarDep(name='buf145', mode=None)]
op145.unmet_dependencies = [StarDep(name='buf144', mode=None)]
op145.met_dependencies = []
op145.outputs = [
    buf145: MultiOutput
    buf145.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op145.node.kernel = None


op149: ExternKernelSchedulerNode(ExternKernelOut)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op149.met_dependencies = [StarDep(name='arg110_1', mode=None)]
op149.outputs = [
    buf149: ExternKernelOut
    buf149.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf149.users = [
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False),
    ]
]
op149.node.kernel = extern_kernels.mm


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 256})]
op150.unmet_dependencies = [MemoryDep('buf135', c0, {c0: 262144}), MemoryDep('buf149', c0, {c0: 262144})]
op150.met_dependencies = [MemoryDep('arg111_1', c1, {c0: 256, c1: 1024})]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf150.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (256, 1024)
op150.sizes = ([256], [1024])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg111_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op150_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg111_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf150', get_index_3, getitem)
        return store_reduction


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 256})]
op151.unmet_dependencies = [MemoryDep('buf135', c0, {c0: 262144}), MemoryDep('buf149', c0, {c0: 262144})]
op151.met_dependencies = [MemoryDep('arg111_1', c1, {c0: 256, c1: 1024})]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf151.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (256, 1024)
op151.sizes = ([256], [1024])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg111_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op151_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg111_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf151', get_index_3, getitem_1)
        return store_reduction


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 262144})]
op153.unmet_dependencies = 
    [   MemoryDep('buf135', c0, {c0: 262144}),
        MemoryDep('buf149', c0, {c0: 262144}),
        MemoryDep('buf150', c0, {c0: 256}),
        MemoryDep('buf151', c0, {c0: 256})]
op153.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg112_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg113_1', c1, {c0: 256, c1: 1024})]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf153.users = [NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (262144, 1)
op153.sizes = ([256, 1024], [])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg111_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg112_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg113_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op153_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg111_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf150', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf151', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg112_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg113_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf153', get_index_7, add_3, None)
        return store


op154: ExternKernelSchedulerNode(ExternKernelOut)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op154.met_dependencies = [StarDep(name='arg114_1', mode=None)]
op154.outputs = [
    buf154: ExternKernelOut
    buf154.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf154.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False)]
]
op154.node.kernel = extern_kernels.mm


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 1048576})]
op155.unmet_dependencies = [MemoryDep('buf154', c0, {c0: 1048576})]
op155.met_dependencies = [MemoryDep('arg115_1', c1, {c0: 256, c1: 4096})]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (1048576, 1)
op155.sizes = ([256, 4096], [])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg115_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op155_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg115_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf154', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg115_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf155', get_index_4, mul_2, None)
        return store


op156: ExternKernelSchedulerNode(ExternKernelOut)
op156.writes = [StarDep(name='buf156', mode=None)]
op156.unmet_dependencies = [StarDep(name='buf155', mode=None)]
op156.met_dependencies = [StarDep(name='arg116_1', mode=None)]
op156.outputs = [
    buf156: ExternKernelOut
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf156.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False)]
]
op156.node.kernel = extern_kernels.mm


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 262144})]
op157.unmet_dependencies = 
    [   MemoryDep('buf135', c0, {c0: 262144}),
        MemoryDep('buf149', c0, {c0: 262144}),
        MemoryDep('buf156', c0, {c0: 262144})]
op157.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg117_1', c1, {c0: 256, c1: 1024})]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf157.users = [
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
]
op157.group.device = cuda:0
op157.group.iteration = (262144, 1)
op157.sizes = ([256, 1024], [])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg111_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg117_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op157_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg111_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf156', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg117_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf157', get_index_5, add_3, None)
        return store


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 256})]
op158.unmet_dependencies = [MemoryDep('buf157', c0, {c0: 262144})]
op158.met_dependencies = []
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf158.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (256, 1024)
op158.sizes = ([256], [1024])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op158_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf158', get_index_1, getitem)
        return store_reduction


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 256})]
op159.unmet_dependencies = [MemoryDep('buf157', c0, {c0: 262144})]
op159.met_dependencies = []
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf159.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (256, 1024)
op159.sizes = ([256], [1024])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op159_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf159', get_index_1, getitem_1)
        return store_reduction


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 262144})]
op161.unmet_dependencies = 
    [   MemoryDep('buf157', c0, {c0: 262144}),
        MemoryDep('buf158', c0, {c0: 256}),
        MemoryDep('buf159', c0, {c0: 256})]
op161.met_dependencies = 
    [   MemoryDep('arg118_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg119_1', c1, {c0: 256, c1: 1024})]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf161.users = [
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
    ]
]
op161.group.device = cuda:0
op161.group.iteration = (262144, 1)
op161.sizes = ([256, 1024], [])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg118_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg119_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op161_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf158', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf159', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg118_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg119_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf161', get_index_5, add_1, None)
        return store


op162: SchedulerNode(MultiTemplateBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 262144})]
op162.unmet_dependencies = [StarDep(name='buf161', mode=None)]
op162.met_dependencies = [StarDep(name='arg120_1', mode=None), StarDep(name='arg121_1', mode=None)]
op162.outputs = [
    buf162: MultiTemplateBuffer
    buf162.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf162.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (262144, 1)
op162.sizes = ([256, 1024], ())
arg121_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg120_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op163: SchedulerNode(MultiTemplateBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 262144})]
op163.unmet_dependencies = [StarDep(name='buf161', mode=None)]
op163.met_dependencies = [StarDep(name='arg122_1', mode=None), StarDep(name='arg123_1', mode=None)]
op163.outputs = [
    buf163: MultiTemplateBuffer
    buf163.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (262144, 1)
op163.sizes = ([256, 1024], ())
arg123_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg122_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op164: SchedulerNode(MultiTemplateBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 262144})]
op164.unmet_dependencies = [StarDep(name='buf161', mode=None)]
op164.met_dependencies = [StarDep(name='arg124_1', mode=None), StarDep(name='arg125_1', mode=None)]
op164.outputs = [
    buf164: MultiTemplateBuffer
    buf164.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf164.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (262144, 1)
op164.sizes = ([256, 1024], ())
arg125_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg124_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 524288})]
op165.unmet_dependencies = []
op165.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (524288, 1)
op165.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf165_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op165_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf165', get_index_2, where, None)
        return store


op166: ExternKernelSchedulerNode(FallbackKernel)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = 
    [   StarDep(name='buf162', mode=None),
        StarDep(name='buf163', mode=None),
        StarDep(name='buf164', mode=None),
        StarDep(name='buf165', mode=None)]
op166.met_dependencies = []
op166.outputs = [
    buf166: FallbackKernel
    buf166.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf166.users = [NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op166.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op167: ExternKernelSchedulerNode(MultiOutput)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf166', mode=None)]
op167.met_dependencies = []
op167.outputs = [
    buf167: MultiOutput
    buf167.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op167.node.kernel = None


op171: ExternKernelSchedulerNode(ExternKernelOut)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op171.met_dependencies = [StarDep(name='arg126_1', mode=None)]
op171.outputs = [
    buf171: ExternKernelOut
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
]
op171.node.kernel = extern_kernels.mm


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 256})]
op172.unmet_dependencies = [MemoryDep('buf157', c0, {c0: 262144}), MemoryDep('buf171', c0, {c0: 262144})]
op172.met_dependencies = [MemoryDep('arg127_1', c1, {c0: 256, c1: 1024})]
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf172.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (256, 1024)
op172.sizes = ([256], [1024])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg127_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op172_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf171', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf172', get_index_3, getitem)
        return store_reduction


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 256})]
op173.unmet_dependencies = [MemoryDep('buf157', c0, {c0: 262144}), MemoryDep('buf171', c0, {c0: 262144})]
op173.met_dependencies = [MemoryDep('arg127_1', c1, {c0: 256, c1: 1024})]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf173.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (256, 1024)
op173.sizes = ([256], [1024])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg127_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op173_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf171', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf173', get_index_3, getitem_1)
        return store_reduction


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 262144})]
op175.unmet_dependencies = 
    [   MemoryDep('buf157', c0, {c0: 262144}),
        MemoryDep('buf171', c0, {c0: 262144}),
        MemoryDep('buf172', c0, {c0: 256}),
        MemoryDep('buf173', c0, {c0: 256})]
op175.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg128_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg129_1', c1, {c0: 256, c1: 1024})]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (262144, 1)
op175.sizes = ([256, 1024], [])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg127_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg128_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg129_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op175_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf171', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf172', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf173', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg128_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg129_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf175', get_index_7, add_3, None)
        return store


op176: ExternKernelSchedulerNode(ExternKernelOut)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf175', mode=None)]
op176.met_dependencies = [StarDep(name='arg130_1', mode=None)]
op176.outputs = [
    buf176: ExternKernelOut
    buf176.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf176.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False)]
]
op176.node.kernel = extern_kernels.mm


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 1048576})]
op177.unmet_dependencies = [MemoryDep('buf176', c0, {c0: 1048576})]
op177.met_dependencies = [MemoryDep('arg131_1', c1, {c0: 256, c1: 4096})]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (1048576, 1)
op177.sizes = ([256, 4096], [])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg131_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf177_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op177_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg131_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf176', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg131_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf177', get_index_4, mul_2, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op178.met_dependencies = [StarDep(name='arg132_1', mode=None)]
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf178.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False)]
]
op178.node.kernel = extern_kernels.mm


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 262144})]
op179.unmet_dependencies = 
    [   MemoryDep('buf157', c0, {c0: 262144}),
        MemoryDep('buf171', c0, {c0: 262144}),
        MemoryDep('buf178', c0, {c0: 262144})]
op179.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg133_1', c1, {c0: 256, c1: 1024})]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False),
    ]
]
op179.group.device = cuda:0
op179.group.iteration = (262144, 1)
op179.sizes = ([256, 1024], [])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg127_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf178_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg133_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op179_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf171', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf178', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg133_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf179', get_index_5, add_3, None)
        return store


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 256})]
op180.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 262144})]
op180.met_dependencies = []
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf180.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (256, 1024)
op180.sizes = ([256], [1024])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op180_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf180', get_index_1, getitem)
        return store_reduction


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 256})]
op181.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 262144})]
op181.met_dependencies = []
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf181.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (256, 1024)
op181.sizes = ([256], [1024])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op181_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf181', get_index_1, getitem_1)
        return store_reduction


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 262144})]
op183.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 262144}),
        MemoryDep('buf180', c0, {c0: 256}),
        MemoryDep('buf181', c0, {c0: 256})]
op183.met_dependencies = 
    [   MemoryDep('arg134_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg135_1', c1, {c0: 256, c1: 1024})]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
    ]
]
op183.group.device = cuda:0
op183.group.iteration = (262144, 1)
op183.sizes = ([256, 1024], [])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg134_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg135_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op183_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf180', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf181', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg134_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg135_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf183', get_index_5, add_1, None)
        return store


op184: SchedulerNode(MultiTemplateBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 262144})]
op184.unmet_dependencies = [StarDep(name='buf183', mode=None)]
op184.met_dependencies = [StarDep(name='arg136_1', mode=None), StarDep(name='arg137_1', mode=None)]
op184.outputs = [
    buf184: MultiTemplateBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf184.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (262144, 1)
op184.sizes = ([256, 1024], ())
arg137_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg136_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op185: SchedulerNode(MultiTemplateBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 262144})]
op185.unmet_dependencies = [StarDep(name='buf183', mode=None)]
op185.met_dependencies = [StarDep(name='arg138_1', mode=None), StarDep(name='arg139_1', mode=None)]
op185.outputs = [
    buf185: MultiTemplateBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (262144, 1)
op185.sizes = ([256, 1024], ())
arg139_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg138_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op186: SchedulerNode(MultiTemplateBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 262144})]
op186.unmet_dependencies = [StarDep(name='buf183', mode=None)]
op186.met_dependencies = [StarDep(name='arg140_1', mode=None), StarDep(name='arg141_1', mode=None)]
op186.outputs = [
    buf186: MultiTemplateBuffer
    buf186.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf186.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op186.group.device = cuda:0
op186.group.iteration = (262144, 1)
op186.sizes = ([256, 1024], ())
arg141_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg140_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf186_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 524288})]
op187.unmet_dependencies = []
op187.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (524288, 1)
op187.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op187_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf187', get_index_2, where, None)
        return store


op188: ExternKernelSchedulerNode(FallbackKernel)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = 
    [   StarDep(name='buf184', mode=None),
        StarDep(name='buf185', mode=None),
        StarDep(name='buf186', mode=None),
        StarDep(name='buf187', mode=None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: FallbackKernel
    buf188.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf188.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op188.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op189: ExternKernelSchedulerNode(MultiOutput)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf188', mode=None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: MultiOutput
    buf189.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op189.node.kernel = None


op193: ExternKernelSchedulerNode(ExternKernelOut)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op193.met_dependencies = [StarDep(name='arg142_1', mode=None)]
op193.outputs = [
    buf193: ExternKernelOut
    buf193.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf193.users = [
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False),
    ]
]
op193.node.kernel = extern_kernels.mm


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 256})]
op194.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 262144}), MemoryDep('buf193', c0, {c0: 262144})]
op194.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 256, c1: 1024})]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf194.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (256, 1024)
op194.sizes = ([256], [1024])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op194_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf193', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf194', get_index_3, getitem)
        return store_reduction


op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 256})]
op195.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 262144}), MemoryDep('buf193', c0, {c0: 262144})]
op195.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 256, c1: 1024})]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf195.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (256, 1024)
op195.sizes = ([256], [1024])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf195_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op195_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf193', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf195', get_index_3, getitem_1)
        return store_reduction


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 262144})]
op197.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 262144}),
        MemoryDep('buf193', c0, {c0: 262144}),
        MemoryDep('buf194', c0, {c0: 256}),
        MemoryDep('buf195', c0, {c0: 256})]
op197.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg144_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg145_1', c1, {c0: 256, c1: 1024})]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (262144, 1)
op197.sizes = ([256, 1024], [])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf195_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg144_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg145_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op197_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf193', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf194', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf195', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg144_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg145_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf197', get_index_7, add_3, None)
        return store


op198: ExternKernelSchedulerNode(ExternKernelOut)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op198.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op198.outputs = [
    buf198: ExternKernelOut
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf198.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False)]
]
op198.node.kernel = extern_kernels.mm


op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 1048576})]
op199.unmet_dependencies = [MemoryDep('buf198', c0, {c0: 1048576})]
op199.met_dependencies = [MemoryDep('arg147_1', c1, {c0: 256, c1: 4096})]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf199.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (1048576, 1)
op199.sizes = ([256, 4096], [])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg147_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op199_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg147_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf198', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg147_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf199', get_index_4, mul_2, None)
        return store


op200: ExternKernelSchedulerNode(ExternKernelOut)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op200.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op200.outputs = [
    buf200: ExternKernelOut
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf200.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False)]
]
op200.node.kernel = extern_kernels.mm


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 262144})]
op201.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 262144}),
        MemoryDep('buf193', c0, {c0: 262144}),
        MemoryDep('buf200', c0, {c0: 262144})]
op201.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg149_1', c1, {c0: 256, c1: 1024})]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf201.users = [
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False),
    ]
]
op201.group.device = cuda:0
op201.group.iteration = (262144, 1)
op201.sizes = ([256, 1024], [])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg149_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op201_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf193', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf200', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg149_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf201', get_index_5, add_3, None)
        return store


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 256})]
op202.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 262144})]
op202.met_dependencies = []
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf202.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (256, 1024)
op202.sizes = ([256], [1024])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op202_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf202', get_index_1, getitem)
        return store_reduction


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 256})]
op203.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 262144})]
op203.met_dependencies = []
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf203.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (256, 1024)
op203.sizes = ([256], [1024])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op203_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf203', get_index_1, getitem_1)
        return store_reduction


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 262144})]
op205.unmet_dependencies = 
    [   MemoryDep('buf201', c0, {c0: 262144}),
        MemoryDep('buf202', c0, {c0: 256}),
        MemoryDep('buf203', c0, {c0: 256})]
op205.met_dependencies = 
    [   MemoryDep('arg150_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg151_1', c1, {c0: 256, c1: 1024})]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf205.users = [
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
    ]
]
op205.group.device = cuda:0
op205.group.iteration = (262144, 1)
op205.sizes = ([256, 1024], [])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg150_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg151_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op205_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf202', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf203', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg150_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg151_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf205', get_index_5, add_1, None)
        return store


op206: SchedulerNode(MultiTemplateBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 262144})]
op206.unmet_dependencies = [StarDep(name='buf205', mode=None)]
op206.met_dependencies = [StarDep(name='arg152_1', mode=None), StarDep(name='arg153_1', mode=None)]
op206.outputs = [
    buf206: MultiTemplateBuffer
    buf206.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (262144, 1)
op206.sizes = ([256, 1024], ())
arg153_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg152_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op207: SchedulerNode(MultiTemplateBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 262144})]
op207.unmet_dependencies = [StarDep(name='buf205', mode=None)]
op207.met_dependencies = [StarDep(name='arg154_1', mode=None), StarDep(name='arg155_1', mode=None)]
op207.outputs = [
    buf207: MultiTemplateBuffer
    buf207.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (262144, 1)
op207.sizes = ([256, 1024], ())
arg155_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg154_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op208: SchedulerNode(MultiTemplateBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 262144})]
op208.unmet_dependencies = [StarDep(name='buf205', mode=None)]
op208.met_dependencies = [StarDep(name='arg156_1', mode=None), StarDep(name='arg157_1', mode=None)]
op208.outputs = [
    buf208: MultiTemplateBuffer
    buf208.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (262144, 1)
op208.sizes = ([256, 1024], ())
arg157_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg156_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 524288})]
op209.unmet_dependencies = []
op209.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (524288, 1)
op209.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op209_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf209', get_index_2, where, None)
        return store


op210: ExternKernelSchedulerNode(FallbackKernel)
op210.writes = [StarDep(name='buf210', mode=None)]
op210.unmet_dependencies = 
    [   StarDep(name='buf206', mode=None),
        StarDep(name='buf207', mode=None),
        StarDep(name='buf208', mode=None),
        StarDep(name='buf209', mode=None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: FallbackKernel
    buf210.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op211: ExternKernelSchedulerNode(MultiOutput)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op211.met_dependencies = []
op211.outputs = [
    buf211: MultiOutput
    buf211.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf211.users = [NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op211.node.kernel = None


op215: ExternKernelSchedulerNode(ExternKernelOut)
op215.writes = [StarDep(name='buf215', mode=None)]
op215.unmet_dependencies = [StarDep(name='buf211', mode=None)]
op215.met_dependencies = [StarDep(name='arg158_1', mode=None)]
op215.outputs = [
    buf215: ExternKernelOut
    buf215.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf215.users = [
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False),
    ]
]
op215.node.kernel = extern_kernels.mm


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 256})]
op216.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 262144}), MemoryDep('buf215', c0, {c0: 262144})]
op216.met_dependencies = [MemoryDep('arg159_1', c1, {c0: 256, c1: 1024})]
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf216.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (256, 1024)
op216.sizes = ([256], [1024])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg159_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op216_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf215', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg159_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf216', get_index_3, getitem)
        return store_reduction


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 256})]
op217.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 262144}), MemoryDep('buf215', c0, {c0: 262144})]
op217.met_dependencies = [MemoryDep('arg159_1', c1, {c0: 256, c1: 1024})]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf217.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (256, 1024)
op217.sizes = ([256], [1024])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg159_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op217_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf215', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg159_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf217', get_index_3, getitem_1)
        return store_reduction


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 262144})]
op219.unmet_dependencies = 
    [   MemoryDep('buf201', c0, {c0: 262144}),
        MemoryDep('buf215', c0, {c0: 262144}),
        MemoryDep('buf216', c0, {c0: 256}),
        MemoryDep('buf217', c0, {c0: 256})]
op219.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg160_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg161_1', c1, {c0: 256, c1: 1024})]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf219.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (262144, 1)
op219.sizes = ([256, 1024], [])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg159_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg160_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg161_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf219_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op219_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf215', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg159_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf216', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf217', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg160_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg161_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf219', get_index_7, add_3, None)
        return store


op220: ExternKernelSchedulerNode(ExternKernelOut)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op220.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op220.outputs = [
    buf220: ExternKernelOut
    buf220.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf220.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False)]
]
op220.node.kernel = extern_kernels.mm


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 1048576})]
op221.unmet_dependencies = [MemoryDep('buf220', c0, {c0: 1048576})]
op221.met_dependencies = [MemoryDep('arg163_1', c1, {c0: 256, c1: 4096})]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (1048576, 1)
op221.sizes = ([256, 4096], [])
buf220_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg163_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf221_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op221_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg163_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf220', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg163_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf221', get_index_4, mul_2, None)
        return store


op222: ExternKernelSchedulerNode(ExternKernelOut)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='arg164_1', mode=None)]
op222.outputs = [
    buf222: ExternKernelOut
    buf222.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf222.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False)]
]
op222.node.kernel = extern_kernels.mm


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 262144})]
op223.unmet_dependencies = 
    [   MemoryDep('buf201', c0, {c0: 262144}),
        MemoryDep('buf215', c0, {c0: 262144}),
        MemoryDep('buf222', c0, {c0: 262144})]
op223.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg165_1', c1, {c0: 256, c1: 1024})]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf223.users = [
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False),
    ]
]
op223.group.device = cuda:0
op223.group.iteration = (262144, 1)
op223.sizes = ([256, 1024], [])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg159_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf222_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg165_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op223_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf215', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg159_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf222', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg165_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf223', get_index_5, add_3, None)
        return store


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 256})]
op224.unmet_dependencies = [MemoryDep('buf223', c0, {c0: 262144})]
op224.met_dependencies = []
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf224.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (256, 1024)
op224.sizes = ([256], [1024])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op224_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf224', get_index_1, getitem)
        return store_reduction


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 256})]
op225.unmet_dependencies = [MemoryDep('buf223', c0, {c0: 262144})]
op225.met_dependencies = []
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf225.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (256, 1024)
op225.sizes = ([256], [1024])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op225_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf225', get_index_1, getitem_1)
        return store_reduction


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 262144})]
op227.unmet_dependencies = 
    [   MemoryDep('buf223', c0, {c0: 262144}),
        MemoryDep('buf224', c0, {c0: 256}),
        MemoryDep('buf225', c0, {c0: 256})]
op227.met_dependencies = 
    [   MemoryDep('arg166_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg167_1', c1, {c0: 256, c1: 1024})]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
    ]
]
op227.group.device = cuda:0
op227.group.iteration = (262144, 1)
op227.sizes = ([256, 1024], [])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg166_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg167_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op227_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf224', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf225', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg166_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg167_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf227', get_index_5, add_1, None)
        return store


op228: SchedulerNode(MultiTemplateBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 262144})]
op228.unmet_dependencies = [StarDep(name='buf227', mode=None)]
op228.met_dependencies = [StarDep(name='arg168_1', mode=None), StarDep(name='arg169_1', mode=None)]
op228.outputs = [
    buf228: MultiTemplateBuffer
    buf228.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf228.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (262144, 1)
op228.sizes = ([256, 1024], ())
arg169_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg168_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op229: SchedulerNode(MultiTemplateBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 262144})]
op229.unmet_dependencies = [StarDep(name='buf227', mode=None)]
op229.met_dependencies = [StarDep(name='arg170_1', mode=None), StarDep(name='arg171_1', mode=None)]
op229.outputs = [
    buf229: MultiTemplateBuffer
    buf229.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (262144, 1)
op229.sizes = ([256, 1024], ())
arg171_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg170_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op230: SchedulerNode(MultiTemplateBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 262144})]
op230.unmet_dependencies = [StarDep(name='buf227', mode=None)]
op230.met_dependencies = [StarDep(name='arg172_1', mode=None), StarDep(name='arg173_1', mode=None)]
op230.outputs = [
    buf230: MultiTemplateBuffer
    buf230.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf230.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (262144, 1)
op230.sizes = ([256, 1024], ())
arg173_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg172_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 524288})]
op231.unmet_dependencies = []
op231.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (524288, 1)
op231.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op231_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf231', get_index_2, where, None)
        return store


op232: ExternKernelSchedulerNode(FallbackKernel)
op232.writes = [StarDep(name='buf232', mode=None)]
op232.unmet_dependencies = 
    [   StarDep(name='buf228', mode=None),
        StarDep(name='buf229', mode=None),
        StarDep(name='buf230', mode=None),
        StarDep(name='buf231', mode=None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: FallbackKernel
    buf232.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op233: ExternKernelSchedulerNode(MultiOutput)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf232', mode=None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: MultiOutput
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf233.users = [NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op233.node.kernel = None


op237: ExternKernelSchedulerNode(ExternKernelOut)
op237.writes = [StarDep(name='buf237', mode=None)]
op237.unmet_dependencies = [StarDep(name='buf233', mode=None)]
op237.met_dependencies = [StarDep(name='arg174_1', mode=None)]
op237.outputs = [
    buf237: ExternKernelOut
    buf237.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf237.users = [
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False),
    ]
]
op237.node.kernel = extern_kernels.mm


op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 256})]
op238.unmet_dependencies = [MemoryDep('buf223', c0, {c0: 262144}), MemoryDep('buf237', c0, {c0: 262144})]
op238.met_dependencies = [MemoryDep('arg175_1', c1, {c0: 256, c1: 1024})]
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf238.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (256, 1024)
op238.sizes = ([256], [1024])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg175_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op238_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf237', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf238', get_index_3, getitem)
        return store_reduction


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 256})]
op239.unmet_dependencies = [MemoryDep('buf223', c0, {c0: 262144}), MemoryDep('buf237', c0, {c0: 262144})]
op239.met_dependencies = [MemoryDep('arg175_1', c1, {c0: 256, c1: 1024})]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf239.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (256, 1024)
op239.sizes = ([256], [1024])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg175_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf239_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op239_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf237', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf239', get_index_3, getitem_1)
        return store_reduction


op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 262144})]
op241.unmet_dependencies = 
    [   MemoryDep('buf223', c0, {c0: 262144}),
        MemoryDep('buf237', c0, {c0: 262144}),
        MemoryDep('buf238', c0, {c0: 256}),
        MemoryDep('buf239', c0, {c0: 256})]
op241.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg176_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg177_1', c1, {c0: 256, c1: 1024})]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf241.users = [NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (262144, 1)
op241.sizes = ([256, 1024], [])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg175_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf239_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg176_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg177_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf241_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op241_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf237', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf238', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf239', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg176_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg177_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf241', get_index_7, add_3, None)
        return store


op242: ExternKernelSchedulerNode(ExternKernelOut)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf241', mode=None)]
op242.met_dependencies = [StarDep(name='arg178_1', mode=None)]
op242.outputs = [
    buf242: ExternKernelOut
    buf242.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf242.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False)]
]
op242.node.kernel = extern_kernels.mm


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 1048576})]
op243.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 1048576})]
op243.met_dependencies = [MemoryDep('arg179_1', c1, {c0: 256, c1: 4096})]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf243.users = [NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (1048576, 1)
op243.sizes = ([256, 4096], [])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg179_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op243_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg179_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf242', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg179_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf243', get_index_4, mul_2, None)
        return store


op244: ExternKernelSchedulerNode(ExternKernelOut)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf243', mode=None)]
op244.met_dependencies = [StarDep(name='arg180_1', mode=None)]
op244.outputs = [
    buf244: ExternKernelOut
    buf244.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf244.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False)]
]
op244.node.kernel = extern_kernels.mm


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 262144})]
op245.unmet_dependencies = 
    [   MemoryDep('buf223', c0, {c0: 262144}),
        MemoryDep('buf237', c0, {c0: 262144}),
        MemoryDep('buf244', c0, {c0: 262144})]
op245.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg181_1', c1, {c0: 256, c1: 1024})]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf245.users = [
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op245.group.device = cuda:0
op245.group.iteration = (262144, 1)
op245.sizes = ([256, 1024], [])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg175_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf244_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg181_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op245_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf237', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf244', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg181_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf245', get_index_5, add_3, None)
        return store


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 256})]
op246.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 262144})]
op246.met_dependencies = []
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf246.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (256, 1024)
op246.sizes = ([256], [1024])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op246_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf246', get_index_1, getitem)
        return store_reduction


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 256})]
op247.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 262144})]
op247.met_dependencies = []
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf247.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (256, 1024)
op247.sizes = ([256], [1024])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op247_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf247', get_index_1, getitem_1)
        return store_reduction


op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 262144})]
op249.unmet_dependencies = 
    [   MemoryDep('buf245', c0, {c0: 262144}),
        MemoryDep('buf246', c0, {c0: 256}),
        MemoryDep('buf247', c0, {c0: 256})]
op249.met_dependencies = 
    [   MemoryDep('arg182_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg183_1', c1, {c0: 256, c1: 1024})]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf249.users = [
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
    ]
]
op249.group.device = cuda:0
op249.group.iteration = (262144, 1)
op249.sizes = ([256, 1024], [])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg182_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg183_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op249_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf246', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf247', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg182_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg183_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf249', get_index_5, add_1, None)
        return store


op250: SchedulerNode(MultiTemplateBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 262144})]
op250.unmet_dependencies = [StarDep(name='buf249', mode=None)]
op250.met_dependencies = [StarDep(name='arg184_1', mode=None), StarDep(name='arg185_1', mode=None)]
op250.outputs = [
    buf250: MultiTemplateBuffer
    buf250.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf250.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (262144, 1)
op250.sizes = ([256, 1024], ())
arg185_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg184_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op251: SchedulerNode(MultiTemplateBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 262144})]
op251.unmet_dependencies = [StarDep(name='buf249', mode=None)]
op251.met_dependencies = [StarDep(name='arg186_1', mode=None), StarDep(name='arg187_1', mode=None)]
op251.outputs = [
    buf251: MultiTemplateBuffer
    buf251.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf251.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (262144, 1)
op251.sizes = ([256, 1024], ())
arg187_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg186_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op252: SchedulerNode(MultiTemplateBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 262144})]
op252.unmet_dependencies = [StarDep(name='buf249', mode=None)]
op252.met_dependencies = [StarDep(name='arg188_1', mode=None), StarDep(name='arg189_1', mode=None)]
op252.outputs = [
    buf252: MultiTemplateBuffer
    buf252.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (262144, 1)
op252.sizes = ([256, 1024], ())
arg189_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
arg188_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 524288})]
op253.unmet_dependencies = []
op253.met_dependencies = [MemoryDep('arg5_1', 128*c0 + c2, {c0: 2, c1: 2048, c2: 128})]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf253.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (524288, 1)
op253.sizes = ([2, 2048, 128], [])
arg5_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 128], stride=[128, 1])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op253_loop_body:
    var_ranges = {p0: 2, p1: 2048, p2: 128}
    index0 = 128*p0 + p2
    index1 = 262144*p0 + 128*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf253', get_index_2, where, None)
        return store


op254: ExternKernelSchedulerNode(FallbackKernel)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = 
    [   StarDep(name='buf250', mode=None),
        StarDep(name='buf251', mode=None),
        StarDep(name='buf252', mode=None),
        StarDep(name='buf253', mode=None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: FallbackKernel
    buf254.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf254.users = [NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op254.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op255: ExternKernelSchedulerNode(MultiOutput)
op255.writes = [StarDep(name='buf255', mode=None)]
op255.unmet_dependencies = [StarDep(name='buf254', mode=None)]
op255.met_dependencies = []
op255.outputs = [
    buf255: MultiOutput
    buf255.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 128, 64], stride=[131072, 64, 1024, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op255.node.kernel = None


op259: ExternKernelSchedulerNode(ExternKernelOut)
op259.writes = [StarDep(name='buf259', mode=None)]
op259.unmet_dependencies = [StarDep(name='buf255', mode=None)]
op259.met_dependencies = [StarDep(name='arg190_1', mode=None)]
op259.outputs = [
    buf259: ExternKernelOut
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op259.node.kernel = extern_kernels.mm


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 256})]
op260.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 262144}), MemoryDep('buf259', c0, {c0: 262144})]
op260.met_dependencies = [MemoryDep('arg191_1', c1, {c0: 256, c1: 1024})]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf260.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (256, 1024)
op260.sizes = ([256], [1024])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg191_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op260_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf260', get_index_3, getitem)
        return store_reduction


op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 256})]
op261.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 262144}), MemoryDep('buf259', c0, {c0: 262144})]
op261.met_dependencies = [MemoryDep('arg191_1', c1, {c0: 256, c1: 1024})]
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf261.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op261.group.device = cuda:0
op261.group.iteration = (256, 1024)
op261.sizes = ([256], [1024])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg191_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf261_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op261_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf261', get_index_3, getitem_1)
        return store_reduction


op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 262144})]
op263.unmet_dependencies = 
    [   MemoryDep('buf245', c0, {c0: 262144}),
        MemoryDep('buf259', c0, {c0: 262144}),
        MemoryDep('buf260', c0, {c0: 256}),
        MemoryDep('buf261', c0, {c0: 256})]
op263.met_dependencies = 
    [   MemoryDep('arg191_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg192_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg193_1', c1, {c0: 256, c1: 1024})]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (262144, 1)
op263.sizes = ([256, 1024], [])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg191_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf261_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg192_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg193_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf263_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op263_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf260', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf261', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg192_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg193_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf263', get_index_7, add_3, None)
        return store


op264: ExternKernelSchedulerNode(ExternKernelOut)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = [StarDep(name='buf263', mode=None)]
op264.met_dependencies = [StarDep(name='arg194_1', mode=None)]
op264.outputs = [
    buf264: ExternKernelOut
    buf264.layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
    buf264.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=True, is_weak=False)]
]
op264.node.kernel = extern_kernels.mm


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 1048576})]
op265.unmet_dependencies = [MemoryDep('buf264', c0, {c0: 1048576})]
op265.met_dependencies = [MemoryDep('arg195_1', c1, {c0: 256, c1: 4096})]
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (1048576, 1)
op265.sizes = ([256, 4096], [])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[256, 4096], stride=[4096, 1])
arg195_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 4096], stride=[524288, 4096, 1])
class op265_loop_body:
    var_ranges = {p0: 256, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg195_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf264', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg195_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf265', get_index_4, mul_2, None)
        return store


op266: ExternKernelSchedulerNode(ExternKernelOut)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op266.met_dependencies = [StarDep(name='arg196_1', mode=None)]
op266.outputs = [
    buf266: ExternKernelOut
    buf266.layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
    buf266.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False)]
]
op266.node.kernel = extern_kernels.mm


op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 262144})]
op267.unmet_dependencies = 
    [   MemoryDep('buf245', c0, {c0: 262144}),
        MemoryDep('buf259', c0, {c0: 262144}),
        MemoryDep('buf266', c0, {c0: 262144})]
op267.met_dependencies = 
    [   MemoryDep('arg191_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg197_1', c1, {c0: 256, c1: 1024})]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False),
    ]
]
op267.group.device = cuda:0
op267.group.iteration = (262144, 1)
op267.sizes = ([256, 1024], [])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg191_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[256, 1024], stride=[1024, 1])
arg197_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op267_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf266', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg197_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf267', get_index_5, add_3, None)
        return store


op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 256})]
op268.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 262144})]
op268.met_dependencies = []
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf268.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (256, 1024)
op268.sizes = ([256], [1024])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf268_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op268_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf268', get_index_1, getitem)
        return store_reduction


op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 256})]
op269.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 262144})]
op269.met_dependencies = []
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
    buf269.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (256, 1024)
op269.sizes = ([256], [1024])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
class op269_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf269', get_index_1, getitem_1)
        return store_reduction


op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 262144})]
op271.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 262144}),
        MemoryDep('buf268', c0, {c0: 256}),
        MemoryDep('buf269', c0, {c0: 256})]
op271.met_dependencies = 
    [   MemoryDep('arg198_1', c1, {c0: 256, c1: 1024}),
        MemoryDep('arg199_1', c1, {c0: 256, c1: 1024})]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
    buf271.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (262144, 1)
op271.sizes = ([256, 1024], [])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
buf268_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1], stride=[128, 1, 256])
arg198_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg199_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf271_layout = FixedLayout('cuda:0', torch.float32, size=[2, 128, 1024], stride=[131072, 1024, 1])
class op271_loop_body:
    var_ranges = {p0: 256, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf268', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf269', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg198_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg199_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf271', get_index_5, add_1, None)
        return store




# ===== run_2025_10_19_04_14_08_043050-pid_19/torchinductor/model__3_inference_3.3/output_code.py =====
# AOT ID: ['3_inference']
from ctypes import c_void_p, c_long, c_int
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align
from torch import device, empty_strided
from torch._inductor.async_compile import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels
from torch._inductor.codegen.multi_kernel import MultiKernelCall
import triton
import triton.language as tl
from torch._inductor.runtime.triton_heuristics import (
    grid,
    split_scan_grid,
    grid_combo_kernels,
    start_graph,
    end_graph,
    cooperative_reduction_grid,
)
from torch._C import _cuda_getCurrentRawStream as get_raw_stream
from torch._C import _cuda_getCurrentRawStream as get_raw_stream

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
_quantized = torch.ops._quantized
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
alloc_from_pool = torch.ops.inductor._alloc_from_pool
async_compile = AsyncCompile()
empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p


# kernel path: /tmp/torchinductor_root/is/cisxtplgbsyyudkq3osggmud5ekr6ridnux2oor5kn2dzigmlpq7.py
# Topologically Sorted Source Nodes: [embedding, inputs_embeds, add, embed_pos, hidden_states, hidden_states_1, hidden_states_3], Original ATen: [aten.embedding, aten.mul, aten.add, aten.native_layer_norm]
# Source node to ATen node mapping:
#   add => add
#   embed_pos => embedding_1
#   embedding => embedding
#   hidden_states => add_1
#   hidden_states_1 => add_2, add_3, mul_1, mul_2, rsqrt, sub, var_mean
#   hidden_states_3 => add_4, add_5, mul_3, mul_4, rsqrt_1, sub_2, var_mean_1
#   inputs_embeds => mul
# Graph fragment:
#   %embedding : [num_users=1] = call_function[target=torch.ops.aten.embedding.default](args = (%arg1_1, %view, 1), kwargs = {})
#   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%embedding, 32.0), kwargs = {})
#   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%expand, 2), kwargs = {})
#   %embedding_1 : [num_users=1] = call_function[target=torch.ops.aten.embedding.default](args = (%arg2_1, %add), kwargs = {})
#   %add_1 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul, %embedding_1), kwargs = {})
#   %var_mean : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_1, [2]), kwargs = {correction: 0, keepdim: True})
#   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_1, %getitem_1), kwargs = {})
#   %add_2 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem, 1e-05), kwargs = {})
#   %rsqrt : [num_users=1] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_2,), kwargs = {})
#   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub, %rsqrt), kwargs = {})
#   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_1, %arg3_1), kwargs = {})
#   %add_3 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_2, %arg4_1), kwargs = {})
#   %var_mean_1 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_3, [2]), kwargs = {correction: 0, keepdim: True})
#   %sub_2 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_3, %getitem_3), kwargs = {})
#   %add_4 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_2, 1e-05), kwargs = {})
#   %rsqrt_1 : [num_users=1] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_4,), kwargs = {})
#   %mul_3 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_2, %rsqrt_1), kwargs = {})
#   %mul_4 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_3, %arg6_1), kwargs = {})
#   %add_5 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_4, %arg7_1), kwargs = {})
triton_red_fused_add_embedding_mul_native_layer_norm_0 = async_compile.triton('triton_red_fused_add_embedding_mul_native_layer_norm_0', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 256, 'r': 1024},
    reduction_hint=ReductionHint.DEFAULT,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*i64', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'in_ptr6': '*fp32', 'out_ptr2': '*fp32', 'out_ptr5': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_embedding_mul_native_layer_norm_0', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 8, 'num_reduction': 4, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False}
)
@triton.jit
def triton_red_fused_add_embedding_mul_native_layer_norm_0(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr2, out_ptr5, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 256
    rnumel = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x3), xmask, eviction_policy='evict_last')
    x0 = (xindex % 128)
    tmp12_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp12_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp12_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp9 = tl.load(in_ptr2 + (2048 + r2 + 1024*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp1 = tl.full([XBLOCK, RBLOCK], 250027, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert(((0 <= tmp4) & (tmp4 < 250027)) | ~(xmask), "index out of bounds: 0 <= tmp4 < 250027")
        tmp6 = tl.load(in_ptr1 + (r2 + 1024*tmp4), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = 32.0
        tmp8 = tmp6 * tmp7
        tmp10 = tmp8 + tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp12_mean_next, tmp12_m2_next, tmp12_weight_next = triton_helpers.welford_reduce(
            tmp11, tmp12_mean, tmp12_m2, tmp12_weight, roffset == 0
        )
        tmp12_mean = tl.where(rmask & xmask, tmp12_mean_next, tmp12_mean)
        tmp12_m2 = tl.where(rmask & xmask, tmp12_m2_next, tmp12_m2)
        tmp12_weight = tl.where(rmask & xmask, tmp12_weight_next, tmp12_weight)
    tmp12_tmp, tmp13_tmp, tmp14_tmp = triton_helpers.welford(
        tmp12_mean, tmp12_m2, tmp12_weight, 1
    )
    tmp12 = tmp12_tmp[:, None]
    tmp13 = tmp13_tmp[:, None]
    tmp14 = tmp14_tmp[:, None]
    tmp37_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp37_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp37_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp23 = tl.load(in_ptr2 + (2048 + r2 + 1024*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp32 = tl.load(in_ptr3 + (r2), rmask, eviction_policy='evict_last', other=0.0)
        tmp34 = tl.load(in_ptr4 + (r2), rmask, eviction_policy='evict_last', other=0.0)
        tmp15 = tl.full([XBLOCK, RBLOCK], 250027, tl.int32)
        tmp16 = tmp0 + tmp15
        tmp17 = tmp0 < 0
        tmp18 = tl.where(tmp17, tmp16, tmp0)
        tl.device_assert(((0 <= tmp18) & (tmp18 < 250027)) | ~(xmask), "index out of bounds: 0 <= tmp18 < 250027")
        tmp20 = tl.load(in_ptr1 + (r2 + 1024*tmp18), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp21 = 32.0
        tmp22 = tmp20 * tmp21
        tmp24 = tmp22 + tmp23
        tmp25 = tmp24 - tmp12
        tmp26 = 1024.0
        tmp27 = tmp13 / tmp26
        tmp28 = 1e-05
        tmp29 = tmp27 + tmp28
        tmp30 = libdevice.rsqrt(tmp29)
        tmp31 = tmp25 * tmp30
        tmp33 = tmp31 * tmp32
        tmp35 = tmp33 + tmp34
        tmp36 = tl.broadcast_to(tmp35, [XBLOCK, RBLOCK])
        tmp37_mean_next, tmp37_m2_next, tmp37_weight_next = triton_helpers.welford_reduce(
            tmp36, tmp37_mean, tmp37_m2, tmp37_weight, roffset == 0
        )
        tmp37_mean = tl.where(rmask & xmask, tmp37_mean_next, tmp37_mean)
        tmp37_m2 = tl.where(rmask & xmask, tmp37_m2_next, tmp37_m2)
        tmp37_weight = tl.where(rmask & xmask, tmp37_weight_next, tmp37_weight)
        tl.store(out_ptr2 + (r2 + 1024*x3), tmp35, rmask & xmask)
    tmp37_tmp, tmp38_tmp, tmp39_tmp = triton_helpers.welford(
        tmp37_mean, tmp37_m2, tmp37_weight, 1
    )
    tmp37 = tmp37_tmp[:, None]
    tmp38 = tmp38_tmp[:, None]
    tmp39 = tmp39_tmp[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp40 = tl.load(out_ptr2 + (r2 + 1024*x3), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp48 = tl.load(in_ptr5 + (r2), rmask, eviction_policy='evict_last', other=0.0)
        tmp50 = tl.load(in_ptr6 + (r2), rmask, eviction_policy='evict_last', other=0.0)
        tmp41 = tmp40 - tmp37
        tmp42 = 1024.0
        tmp43 = tmp38 / tmp42
        tmp44 = 1e-05
        tmp45 = tmp43 + tmp44
        tmp46 = libdevice.rsqrt(tmp45)
        tmp47 = tmp41 * tmp46
        tmp49 = tmp47 * tmp48
        tmp51 = tmp49 + tmp50
        tl.store(out_ptr5 + (r2 + 1024*x3), tmp51, rmask & xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/s6/cs6ikxaaegqtbgpgxg5pecg3y5qyxqxkleh6f7ajcb2f3yjikc2a.py
# Topologically Sorted Source Nodes: [attn_output, attn_output_4, attn_output_8, attn_output_12], Original ATen: [aten._scaled_dot_product_efficient_attention]
# Source node to ATen node mapping:
#   attn_output => _scaled_dot_product_efficient_attention
#   attn_output_12 => _scaled_dot_product_efficient_attention_3
#   attn_output_4 => _scaled_dot_product_efficient_attention_1
#   attn_output_8 => _scaled_dot_product_efficient_attention_2
# Graph fragment:
#   %_scaled_dot_product_efficient_attention : [num_users=1] = call_function[target=torch.ops.aten._scaled_dot_product_efficient_attention.default](args = (%permute_1, %permute_4, %permute_5, %expand_2, False), kwargs = {scale: 0.125})
#   %_scaled_dot_product_efficient_attention_1 : [num_users=1] = call_function[target=torch.ops.aten._scaled_dot_product_efficient_attention.default](args = (%permute_11, %permute_14, %permute_15, %expand_3, False), kwargs = {scale: 0.125})
#   %_scaled_dot_product_efficient_attention_2 : [num_users=1] = call_function[target=torch.ops.aten._scaled_dot_product_efficient_attention.default](args = (%permute_21, %permute_24, %permute_25, %expand_4, False), kwargs = {scale: 0.125})
#   %_scaled_dot_product_efficient_attention_3 : [num_users=1] = call_function[target=torch.ops.aten._scaled_dot_product_efficient_attention.default](args = (%permute_31, %permute_34, %permute_35, %expand_5, False), kwargs = {scale: 0.125})
triton_poi_fused__scaled_dot_product_efficient_attention_1 = async_compile.triton('triton_poi_fused__scaled_dot_product_efficient_attention_1', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 524288}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*i64', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'out_ptr2': '*fp32', 'out_ptr3': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__scaled_dot_product_efficient_attention_1', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused__scaled_dot_product_efficient_attention_1(in_ptr0, out_ptr0, out_ptr1, out_ptr2, out_ptr3, xnumel, XBLOCK : tl.constexpr):
    xnumel = 524288
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = (xindex % 128)
    x2 = xindex // 262144
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + 128*x2), None, eviction_policy='evict_last')
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 1.0
    tmp3 = tmp2 - tmp1
    tmp4 = (tmp3 != 0)
    tmp5 = -3.4028234663852886e+38
    tmp6 = tl.where(tmp4, tmp5, tmp3)
    tl.store(out_ptr0 + (x3), tmp6, None)
    tl.store(out_ptr1 + (x3), tmp6, None)
    tl.store(out_ptr2 + (x3), tmp6, None)
    tl.store(out_ptr3 + (x3), tmp6, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/rg/crgdjwfreqj4zweeyaekb7od2n67appdhmojbdcltlrxsgobadm2.py
# Topologically Sorted Source Nodes: [hidden_states_5, hidden_states_6], Original ATen: [aten.add, aten.native_layer_norm]
# Source node to ATen node mapping:
#   hidden_states_5 => add_6
#   hidden_states_6 => add_7, add_8, mul_5, mul_6, rsqrt_2, sub_3, var_mean_2
# Graph fragment:
#   %add_6 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_3, %view_12), kwargs = {})
#   %var_mean_2 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_6, [2]), kwargs = {correction: 0, keepdim: True})
#   %sub_3 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_6, %getitem_9), kwargs = {})
#   %add_7 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_8, 1e-05), kwargs = {})
#   %rsqrt_2 : [num_users=1] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_7,), kwargs = {})
#   %mul_5 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_3, %rsqrt_2), kwargs = {})
#   %mul_6 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_5, %arg16_1), kwargs = {})
#   %add_8 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_6, %arg17_1), kwargs = {})
triton_per_fused_add_native_layer_norm_2 = async_compile.triton('triton_per_fused_add_native_layer_norm_2', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 256, 'r': 1024},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr2': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_native_layer_norm_2', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False}
)
@triton.jit
def triton_per_fused_add_native_layer_norm_2(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
    xnumel = 256
    XBLOCK: tl.constexpr = 1
    rnumel = 1024
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = tl.full([RBLOCK], True, tl.int1)
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + 1024*x0), None)
    tmp1 = tl.load(in_ptr1 + (r1 + 1024*x0), None)
    tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
    tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
    tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
    tmp3 = tmp1 + tmp2
    tmp4 = tmp0 + tmp3
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
    tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp10 = tl.full([1], 1024, tl.int32)
    tmp11 = tmp10.to(tl.float32)
    tmp12 = tmp9 / tmp11
    tmp13 = tmp5 - tmp12
    tmp14 = tmp13 * tmp13
    tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
    tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = tmp4 - tmp12
    tmp19 = 1024.0
    tmp20 = tmp17 / tmp19
    tmp21 = 1e-05
    tmp22 = tmp20 + tmp21
    tmp23 = libdevice.rsqrt(tmp22)
    tmp24 = tmp18 * tmp23
    tmp26 = tmp24 * tmp25
    tmp28 = tmp26 + tmp27
    tl.store(out_ptr2 + (r1 + 1024*x0), tmp28, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/vu/cvul7ffskzrget422biwxt4ulhfd7vvareq5cvkdx3hqq5dbgsp5.py
# Topologically Sorted Source Nodes: [hidden_states_7], Original ATen: [aten.gelu]
# Source node to ATen node mapping:
#   hidden_states_7 => add_9, erf, mul_7, mul_8, mul_9
# Graph fragment:
#   %mul_7 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_14, 0.5), kwargs = {})
#   %mul_8 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_14, 0.7071067811865476), kwargs = {})
#   %erf : [num_users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_8,), kwargs = {})
#   %add_9 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})
#   %mul_9 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_7, %add_9), kwargs = {})
triton_poi_fused_gelu_3 = async_compile.triton('triton_poi_fused_gelu_3', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 1048576}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_3', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_gelu_3(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1048576
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x2 = xindex
    x0 = (xindex % 4096)
    tmp0 = tl.load(in_out_ptr0 + (x2), None)
    tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
    tmp2 = tmp0 + tmp1
    tmp3 = 0.5
    tmp4 = tmp2 * tmp3
    tmp5 = 0.7071067811865476
    tmp6 = tmp2 * tmp5
    tmp7 = libdevice.erf(tmp6)
    tmp8 = 1.0
    tmp9 = tmp7 + tmp8
    tmp10 = tmp4 * tmp9
    tl.store(in_out_ptr0 + (x2), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/u2/cu2cj7dpw55yxf5b4pawyvy4y46rzfpvsnzh2moc6muwj3huwow6.py
# Topologically Sorted Source Nodes: [hidden_states_5, hidden_states_11, hidden_states_12], Original ATen: [aten.add, aten.native_layer_norm]
# Source node to ATen node mapping:
#   hidden_states_11 => add_10
#   hidden_states_12 => add_11, add_12, mul_10, mul_11, rsqrt_3, sub_4, var_mean_3
#   hidden_states_5 => add_6
# Graph fragment:
#   %add_6 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_3, %view_12), kwargs = {})
#   %add_10 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_6, %view_16), kwargs = {})
#   %var_mean_3 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_10, [2]), kwargs = {correction: 0, keepdim: True})
#   %sub_4 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_10, %getitem_11), kwargs = {})
#   %add_11 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_10, 1e-05), kwargs = {})
#   %rsqrt_3 : [num_users=1] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_11,), kwargs = {})
#   %mul_10 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_4, %rsqrt_3), kwargs = {})
#   %mul_11 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_10, %arg22_1), kwargs = {})
#   %add_12 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_11, %arg23_1), kwargs = {})
triton_per_fused_add_native_layer_norm_4 = async_compile.triton('triton_per_fused_add_native_layer_norm_4', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 256, 'r': 1024},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'out_ptr2': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_native_layer_norm_4', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False}
)
@triton.jit
def triton_per_fused_add_native_layer_norm_4(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
    xnumel = 256
    XBLOCK: tl.constexpr = 1
    rnumel = 1024
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = tl.full([RBLOCK], True, tl.int1)
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (r1 + 1024*x0), None)
    tmp1 = tl.load(in_ptr0 + (r1 + 1024*x0), None)
    tmp2 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr2 + (r1 + 1024*x0), None)
    tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
    tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
    tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
    tmp3 = tmp1 + tmp2
    tmp4 = tmp0 + tmp3
    tmp7 = tmp5 + tmp6
    tmp8 = tmp4 + tmp7
    tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
    tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
    tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
    tmp14 = tl.full([1], 1024, tl.int32)
    tmp15 = tmp14.to(tl.float32)
    tmp16 = tmp13 / tmp15
    tmp17 = tmp9 - tmp16
    tmp18 = tmp17 * tmp17
    tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
    tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
    tmp22 = tmp8 - tmp16
    tmp23 = 1024.0
    tmp24 = tmp21 / tmp23
    tmp25 = 1e-05
    tmp26 = tmp24 + tmp25
    tmp27 = libdevice.rsqrt(tmp26)
    tmp28 = tmp22 * tmp27
    tmp30 = tmp28 * tmp29
    tmp32 = tmp30 + tmp31
    tl.store(in_out_ptr0 + (r1 + 1024*x0), tmp8, None)
    tl.store(out_ptr2 + (r1 + 1024*x0), tmp32, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/au/causbklif6x6fy7udykxf5zvt7avs3gnnlhuvq64ecyx3xjodmcz.py
# Topologically Sorted Source Nodes: [hidden_states_104, hidden_states_110, hidden_states_111], Original ATen: [aten.add, aten.native_layer_norm]
# Source node to ATen node mapping:
#   hidden_states_104 => add_83
#   hidden_states_110 => add_87
#   hidden_states_111 => add_88, add_89, mul_87, mul_88, rsqrt_25, sub_26, var_mean_25
# Graph fragment:
#   %add_83 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_80, %view_188), kwargs = {})
#   %add_87 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_83, %view_192), kwargs = {})
#   %var_mean_25 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_87, [2]), kwargs = {correction: 0, keepdim: True})
#   %sub_26 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_87, %getitem_99), kwargs = {})
#   %add_88 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_98, 1e-05), kwargs = {})
#   %rsqrt_25 : [num_users=1] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_88,), kwargs = {})
#   %mul_87 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_26, %rsqrt_25), kwargs = {})
#   %mul_88 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_87, %arg198_1), kwargs = {})
#   %add_89 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_88, %arg199_1), kwargs = {})
triton_per_fused_add_native_layer_norm_5 = async_compile.triton('triton_per_fused_add_native_layer_norm_5', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 256, 'r': 1024},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_native_layer_norm_5', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False}
)
@triton.jit
def triton_per_fused_add_native_layer_norm_5(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, xnumel, rnumel):
    xnumel = 256
    XBLOCK: tl.constexpr = 1
    rnumel = 1024
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = tl.full([RBLOCK], True, tl.int1)
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (r1 + 1024*x0), None)
    tmp1 = tl.load(in_ptr0 + (r1 + 1024*x0), None)
    tmp2 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
    tmp5 = tl.load(in_ptr2 + (r1 + 1024*x0), None)
    tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
    tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
    tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
    tmp3 = tmp1 + tmp2
    tmp4 = tmp0 + tmp3
    tmp7 = tmp5 + tmp6
    tmp8 = tmp4 + tmp7
    tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
    tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
    tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
    tmp14 = tl.full([1], 1024, tl.int32)
    tmp15 = tmp14.to(tl.float32)
    tmp16 = tmp13 / tmp15
    tmp17 = tmp9 - tmp16
    tmp18 = tmp17 * tmp17
    tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
    tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
    tmp22 = tmp8 - tmp16
    tmp23 = 1024.0
    tmp24 = tmp21 / tmp23
    tmp25 = 1e-05
    tmp26 = tmp24 + tmp25
    tmp27 = libdevice.rsqrt(tmp26)
    tmp28 = tmp22 * tmp27
    tmp30 = tmp28 * tmp29
    tmp32 = tmp30 + tmp31
    tl.store(in_out_ptr0 + (r1 + 1024*x0), tmp32, None)
''', device_str='cuda')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1, arg7_1, arg8_1, arg9_1, arg10_1, arg11_1, arg12_1, arg13_1, arg14_1, arg15_1, arg16_1, arg17_1, arg18_1, arg19_1, arg20_1, arg21_1, arg22_1, arg23_1, arg24_1, arg25_1, arg26_1, arg27_1, arg28_1, arg29_1, arg30_1, arg31_1, arg32_1, arg33_1, arg34_1, arg35_1, arg36_1, arg37_1, arg38_1, arg39_1, arg40_1, arg41_1, arg42_1, arg43_1, arg44_1, arg45_1, arg46_1, arg47_1, arg48_1, arg49_1, arg50_1, arg51_1, arg52_1, arg53_1, arg54_1, arg55_1, arg56_1, arg57_1, arg58_1, arg59_1, arg60_1, arg61_1, arg62_1, arg63_1, arg64_1, arg65_1, arg66_1, arg67_1, arg68_1, arg69_1, arg70_1, arg71_1, arg72_1, arg73_1, arg74_1, arg75_1, arg76_1, arg77_1, arg78_1, arg79_1, arg80_1, arg81_1, arg82_1, arg83_1, arg84_1, arg85_1, arg86_1, arg87_1, arg88_1, arg89_1, arg90_1, arg91_1, arg92_1, arg93_1, arg94_1, arg95_1, arg96_1, arg97_1, arg98_1, arg99_1, arg100_1, arg101_1, arg102_1, arg103_1, arg104_1, arg105_1, arg106_1, arg107_1, arg108_1, arg109_1, arg110_1, arg111_1, arg112_1, arg113_1, arg114_1, arg115_1, arg116_1, arg117_1, arg118_1, arg119_1, arg120_1, arg121_1, arg122_1, arg123_1, arg124_1, arg125_1, arg126_1, arg127_1, arg128_1, arg129_1, arg130_1, arg131_1, arg132_1, arg133_1, arg134_1, arg135_1, arg136_1, arg137_1, arg138_1, arg139_1, arg140_1, arg141_1, arg142_1, arg143_1, arg144_1, arg145_1, arg146_1, arg147_1, arg148_1, arg149_1, arg150_1, arg151_1, arg152_1, arg153_1, arg154_1, arg155_1, arg156_1, arg157_1, arg158_1, arg159_1, arg160_1, arg161_1, arg162_1, arg163_1, arg164_1, arg165_1, arg166_1, arg167_1, arg168_1, arg169_1, arg170_1, arg171_1, arg172_1, arg173_1, arg174_1, arg175_1, arg176_1, arg177_1, arg178_1, arg179_1, arg180_1, arg181_1, arg182_1, arg183_1, arg184_1, arg185_1, arg186_1, arg187_1, arg188_1, arg189_1, arg190_1, arg191_1, arg192_1, arg193_1, arg194_1, arg195_1, arg196_1, arg197_1, arg198_1, arg199_1 = args
    args.clear()
    assert_size_stride(arg0_1, (2, 128), (128, 1))
    assert_size_stride(arg1_1, (250027, 1024), (1024, 1))
    assert_size_stride(arg2_1, (1026, 1024), (1024, 1))
    assert_size_stride(arg3_1, (1024, ), (1, ))
    assert_size_stride(arg4_1, (1024, ), (1, ))
    assert_size_stride(arg5_1, (2, 128), (128, 1))
    assert_size_stride(arg6_1, (1024, ), (1, ))
    assert_size_stride(arg7_1, (1024, ), (1, ))
    assert_size_stride(arg8_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg9_1, (1024, ), (1, ))
    assert_size_stride(arg10_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg11_1, (1024, ), (1, ))
    assert_size_stride(arg12_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg13_1, (1024, ), (1, ))
    assert_size_stride(arg14_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg15_1, (1024, ), (1, ))
    assert_size_stride(arg16_1, (1024, ), (1, ))
    assert_size_stride(arg17_1, (1024, ), (1, ))
    assert_size_stride(arg18_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg19_1, (4096, ), (1, ))
    assert_size_stride(arg20_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg21_1, (1024, ), (1, ))
    assert_size_stride(arg22_1, (1024, ), (1, ))
    assert_size_stride(arg23_1, (1024, ), (1, ))
    assert_size_stride(arg24_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg25_1, (1024, ), (1, ))
    assert_size_stride(arg26_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg27_1, (1024, ), (1, ))
    assert_size_stride(arg28_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg29_1, (1024, ), (1, ))
    assert_size_stride(arg30_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg31_1, (1024, ), (1, ))
    assert_size_stride(arg32_1, (1024, ), (1, ))
    assert_size_stride(arg33_1, (1024, ), (1, ))
    assert_size_stride(arg34_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg35_1, (4096, ), (1, ))
    assert_size_stride(arg36_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg37_1, (1024, ), (1, ))
    assert_size_stride(arg38_1, (1024, ), (1, ))
    assert_size_stride(arg39_1, (1024, ), (1, ))
    assert_size_stride(arg40_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg41_1, (1024, ), (1, ))
    assert_size_stride(arg42_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg43_1, (1024, ), (1, ))
    assert_size_stride(arg44_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg45_1, (1024, ), (1, ))
    assert_size_stride(arg46_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg47_1, (1024, ), (1, ))
    assert_size_stride(arg48_1, (1024, ), (1, ))
    assert_size_stride(arg49_1, (1024, ), (1, ))
    assert_size_stride(arg50_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg51_1, (4096, ), (1, ))
    assert_size_stride(arg52_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg53_1, (1024, ), (1, ))
    assert_size_stride(arg54_1, (1024, ), (1, ))
    assert_size_stride(arg55_1, (1024, ), (1, ))
    assert_size_stride(arg56_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg57_1, (1024, ), (1, ))
    assert_size_stride(arg58_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg59_1, (1024, ), (1, ))
    assert_size_stride(arg60_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg61_1, (1024, ), (1, ))
    assert_size_stride(arg62_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg63_1, (1024, ), (1, ))
    assert_size_stride(arg64_1, (1024, ), (1, ))
    assert_size_stride(arg65_1, (1024, ), (1, ))
    assert_size_stride(arg66_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg67_1, (4096, ), (1, ))
    assert_size_stride(arg68_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg69_1, (1024, ), (1, ))
    assert_size_stride(arg70_1, (1024, ), (1, ))
    assert_size_stride(arg71_1, (1024, ), (1, ))
    assert_size_stride(arg72_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg73_1, (1024, ), (1, ))
    assert_size_stride(arg74_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg75_1, (1024, ), (1, ))
    assert_size_stride(arg76_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg77_1, (1024, ), (1, ))
    assert_size_stride(arg78_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg79_1, (1024, ), (1, ))
    assert_size_stride(arg80_1, (1024, ), (1, ))
    assert_size_stride(arg81_1, (1024, ), (1, ))
    assert_size_stride(arg82_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg83_1, (4096, ), (1, ))
    assert_size_stride(arg84_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg85_1, (1024, ), (1, ))
    assert_size_stride(arg86_1, (1024, ), (1, ))
    assert_size_stride(arg87_1, (1024, ), (1, ))
    assert_size_stride(arg88_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg89_1, (1024, ), (1, ))
    assert_size_stride(arg90_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg91_1, (1024, ), (1, ))
    assert_size_stride(arg92_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg93_1, (1024, ), (1, ))
    assert_size_stride(arg94_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg95_1, (1024, ), (1, ))
    assert_size_stride(arg96_1, (1024, ), (1, ))
    assert_size_stride(arg97_1, (1024, ), (1, ))
    assert_size_stride(arg98_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg99_1, (4096, ), (1, ))
    assert_size_stride(arg100_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg101_1, (1024, ), (1, ))
    assert_size_stride(arg102_1, (1024, ), (1, ))
    assert_size_stride(arg103_1, (1024, ), (1, ))
    assert_size_stride(arg104_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg105_1, (1024, ), (1, ))
    assert_size_stride(arg106_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg107_1, (1024, ), (1, ))
    assert_size_stride(arg108_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg109_1, (1024, ), (1, ))
    assert_size_stride(arg110_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg111_1, (1024, ), (1, ))
    assert_size_stride(arg112_1, (1024, ), (1, ))
    assert_size_stride(arg113_1, (1024, ), (1, ))
    assert_size_stride(arg114_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg115_1, (4096, ), (1, ))
    assert_size_stride(arg116_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg117_1, (1024, ), (1, ))
    assert_size_stride(arg118_1, (1024, ), (1, ))
    assert_size_stride(arg119_1, (1024, ), (1, ))
    assert_size_stride(arg120_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg121_1, (1024, ), (1, ))
    assert_size_stride(arg122_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg123_1, (1024, ), (1, ))
    assert_size_stride(arg124_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg125_1, (1024, ), (1, ))
    assert_size_stride(arg126_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg127_1, (1024, ), (1, ))
    assert_size_stride(arg128_1, (1024, ), (1, ))
    assert_size_stride(arg129_1, (1024, ), (1, ))
    assert_size_stride(arg130_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg131_1, (4096, ), (1, ))
    assert_size_stride(arg132_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg133_1, (1024, ), (1, ))
    assert_size_stride(arg134_1, (1024, ), (1, ))
    assert_size_stride(arg135_1, (1024, ), (1, ))
    assert_size_stride(arg136_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg137_1, (1024, ), (1, ))
    assert_size_stride(arg138_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg139_1, (1024, ), (1, ))
    assert_size_stride(arg140_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg141_1, (1024, ), (1, ))
    assert_size_stride(arg142_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg143_1, (1024, ), (1, ))
    assert_size_stride(arg144_1, (1024, ), (1, ))
    assert_size_stride(arg145_1, (1024, ), (1, ))
    assert_size_stride(arg146_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg147_1, (4096, ), (1, ))
    assert_size_stride(arg148_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg149_1, (1024, ), (1, ))
    assert_size_stride(arg150_1, (1024, ), (1, ))
    assert_size_stride(arg151_1, (1024, ), (1, ))
    assert_size_stride(arg152_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg153_1, (1024, ), (1, ))
    assert_size_stride(arg154_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg155_1, (1024, ), (1, ))
    assert_size_stride(arg156_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg157_1, (1024, ), (1, ))
    assert_size_stride(arg158_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg159_1, (1024, ), (1, ))
    assert_size_stride(arg160_1, (1024, ), (1, ))
    assert_size_stride(arg161_1, (1024, ), (1, ))
    assert_size_stride(arg162_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg163_1, (4096, ), (1, ))
    assert_size_stride(arg164_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg165_1, (1024, ), (1, ))
    assert_size_stride(arg166_1, (1024, ), (1, ))
    assert_size_stride(arg167_1, (1024, ), (1, ))
    assert_size_stride(arg168_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg169_1, (1024, ), (1, ))
    assert_size_stride(arg170_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg171_1, (1024, ), (1, ))
    assert_size_stride(arg172_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg173_1, (1024, ), (1, ))
    assert_size_stride(arg174_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg175_1, (1024, ), (1, ))
    assert_size_stride(arg176_1, (1024, ), (1, ))
    assert_size_stride(arg177_1, (1024, ), (1, ))
    assert_size_stride(arg178_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg179_1, (4096, ), (1, ))
    assert_size_stride(arg180_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg181_1, (1024, ), (1, ))
    assert_size_stride(arg182_1, (1024, ), (1, ))
    assert_size_stride(arg183_1, (1024, ), (1, ))
    assert_size_stride(arg184_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg185_1, (1024, ), (1, ))
    assert_size_stride(arg186_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg187_1, (1024, ), (1, ))
    assert_size_stride(arg188_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg189_1, (1024, ), (1, ))
    assert_size_stride(arg190_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg191_1, (1024, ), (1, ))
    assert_size_stride(arg192_1, (1024, ), (1, ))
    assert_size_stride(arg193_1, (1024, ), (1, ))
    assert_size_stride(arg194_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg195_1, (4096, ), (1, ))
    assert_size_stride(arg196_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg197_1, (1024, ), (1, ))
    assert_size_stride(arg198_1, (1024, ), (1, ))
    assert_size_stride(arg199_1, (1024, ), (1, ))
    with torch.cuda._DeviceGuard(0):
        torch.cuda.set_device(0)
        buf3 = empty_strided_cuda((2, 128, 1024), (131072, 1024, 1), torch.float32)
        buf7 = empty_strided_cuda((2, 128, 1024), (131072, 1024, 1), torch.float32)
        # Topologically Sorted Source Nodes: [embedding, inputs_embeds, add, embed_pos, hidden_states, hidden_states_1, hidden_states_3], Original ATen: [aten.embedding, aten.mul, aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_embedding_mul_native_layer_norm_0.run(arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg6_1, arg7_1, buf3, buf7, 256, 1024, grid=grid(256), stream=stream0)
        del arg0_1
        del arg1_1
        del arg2_1
        del arg3_1
        del arg4_1
        del arg6_1
        del arg7_1
        buf8 = empty_strided_cuda((256, 1024), (1024, 1), torch.float32)
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg9_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf7, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg8_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf8)
        del arg8_1
        del arg9_1
        buf9 = empty_strided_cuda((256, 1024), (1024, 1), torch.float32)
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg11_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf7, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg10_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf9)
        del arg10_1
        del arg11_1
        buf10 = empty_strided_cuda((256, 1024), (1024, 1), torch.float32)
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg13_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf7, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg12_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf10)
        del arg12_1
        del arg13_1
        del buf7
        buf11 = empty_strided_cuda((2, 16, 128, 128), (262144, 16384, 128, 1), torch.float32)
        buf33 = empty_strided_cuda((2, 16, 128, 128), (262144, 16384, 128, 1), torch.float32)
        buf55 = empty_strided_cuda((2, 16, 128, 128), (262144, 16384, 128, 1), torch.float32)
        buf77 = empty_strided_cuda((2, 16, 128, 128), (262144, 16384, 128, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_output, attn_output_4, attn_output_8, attn_output_12], Original ATen: [aten._scaled_dot_product_efficient_attention]
        stream0 = get_raw_stream(0)
        triton_poi_fused__scaled_dot_product_efficient_attention_1.run(arg5_1, buf11, buf33, buf55, buf77, 524288, grid=grid(524288), stream=stream0)
        # Topologically Sorted Source Nodes: [attn_output], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf12 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf8, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf9, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf10, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), buf11, False, scale=0.125)
        buf13 = buf12[0]
        del buf12
        buf17 = buf9; del buf9  # reuse
        # Topologically Sorted Source Nodes: [attn_output_3], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf13, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg14_1, (1024, 1024), (1, 1024), 0), out=buf17)
        del arg14_1
        buf21 = reinterpret_tensor(buf13, (2, 128, 1024), (131072, 1024, 1), 0); del buf13  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_5, hidden_states_6], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_2.run(buf3, buf17, arg15_1, arg16_1, arg17_1, buf21, 256, 1024, grid=grid(256), stream=stream0)
        del arg16_1
        del arg17_1
        buf22 = empty_strided_cuda((256, 4096), (4096, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_4], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf21, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg18_1, (1024, 4096), (1, 1024), 0), out=buf22)
        del arg18_1
        buf23 = reinterpret_tensor(buf22, (2, 128, 4096), (524288, 4096, 1), 0); del buf22  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_7], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_3.run(buf23, arg19_1, 1048576, grid=grid(1048576), stream=stream0)
        del arg19_1
        buf24 = reinterpret_tensor(buf21, (256, 1024), (1024, 1), 0); del buf21  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_9], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf23, (256, 4096), (4096, 1), 0), reinterpret_tensor(arg20_1, (4096, 1024), (1, 4096), 0), out=buf24)
        del arg20_1
        buf25 = buf3; del buf3  # reuse
        buf29 = reinterpret_tensor(buf8, (2, 128, 1024), (131072, 1024, 1), 0); del buf8  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_5, hidden_states_11, hidden_states_12], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_4.run(buf25, buf17, arg15_1, buf24, arg21_1, arg22_1, arg23_1, buf29, 256, 1024, grid=grid(256), stream=stream0)
        del arg15_1
        del arg21_1
        del arg22_1
        del arg23_1
        buf30 = buf24; del buf24  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg25_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf29, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg24_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf30)
        del arg24_1
        del arg25_1
        buf31 = buf17; del buf17  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg27_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf29, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg26_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf31)
        del arg26_1
        del arg27_1
        buf32 = buf10; del buf10  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg29_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf29, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg28_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf32)
        del arg28_1
        del arg29_1
        del buf29
        # Topologically Sorted Source Nodes: [attn_output_4], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf34 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf30, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf31, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf32, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), buf33, False, scale=0.125)
        buf35 = buf34[0]
        del buf34
        buf39 = buf32; del buf32  # reuse
        # Topologically Sorted Source Nodes: [attn_output_7], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf35, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg30_1, (1024, 1024), (1, 1024), 0), out=buf39)
        del arg30_1
        buf43 = reinterpret_tensor(buf35, (2, 128, 1024), (131072, 1024, 1), 0); del buf35  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_14, hidden_states_15], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_2.run(buf25, buf39, arg31_1, arg32_1, arg33_1, buf43, 256, 1024, grid=grid(256), stream=stream0)
        del arg32_1
        del arg33_1
        buf44 = reinterpret_tensor(buf23, (256, 4096), (4096, 1), 0); del buf23  # reuse
        # Topologically Sorted Source Nodes: [linear_10], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf43, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg34_1, (1024, 4096), (1, 1024), 0), out=buf44)
        del arg34_1
        buf45 = reinterpret_tensor(buf44, (2, 128, 4096), (524288, 4096, 1), 0); del buf44  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_16], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_3.run(buf45, arg35_1, 1048576, grid=grid(1048576), stream=stream0)
        del arg35_1
        buf46 = reinterpret_tensor(buf43, (256, 1024), (1024, 1), 0); del buf43  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_18], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf45, (256, 4096), (4096, 1), 0), reinterpret_tensor(arg36_1, (4096, 1024), (1, 4096), 0), out=buf46)
        del arg36_1
        buf47 = buf25; del buf25  # reuse
        buf51 = reinterpret_tensor(buf31, (2, 128, 1024), (131072, 1024, 1), 0); del buf31  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_14, hidden_states_20, hidden_states_21], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_4.run(buf47, buf39, arg31_1, buf46, arg37_1, arg38_1, arg39_1, buf51, 256, 1024, grid=grid(256), stream=stream0)
        del arg31_1
        del arg37_1
        del arg38_1
        del arg39_1
        buf52 = buf46; del buf46  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg41_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf51, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg40_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf52)
        del arg40_1
        del arg41_1
        buf53 = buf39; del buf39  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg43_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf51, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg42_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf53)
        del arg42_1
        del arg43_1
        buf54 = buf30; del buf30  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg45_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf51, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg44_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf54)
        del arg44_1
        del arg45_1
        del buf51
        # Topologically Sorted Source Nodes: [attn_output_8], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf56 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf52, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf53, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf54, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), buf55, False, scale=0.125)
        buf57 = buf56[0]
        del buf56
        buf61 = buf54; del buf54  # reuse
        # Topologically Sorted Source Nodes: [attn_output_11], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf57, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg46_1, (1024, 1024), (1, 1024), 0), out=buf61)
        del arg46_1
        buf65 = reinterpret_tensor(buf57, (2, 128, 1024), (131072, 1024, 1), 0); del buf57  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_23, hidden_states_24], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_2.run(buf47, buf61, arg47_1, arg48_1, arg49_1, buf65, 256, 1024, grid=grid(256), stream=stream0)
        del arg48_1
        del arg49_1
        buf66 = reinterpret_tensor(buf45, (256, 4096), (4096, 1), 0); del buf45  # reuse
        # Topologically Sorted Source Nodes: [linear_16], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf65, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg50_1, (1024, 4096), (1, 1024), 0), out=buf66)
        del arg50_1
        buf67 = reinterpret_tensor(buf66, (2, 128, 4096), (524288, 4096, 1), 0); del buf66  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_25], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_3.run(buf67, arg51_1, 1048576, grid=grid(1048576), stream=stream0)
        del arg51_1
        buf68 = reinterpret_tensor(buf65, (256, 1024), (1024, 1), 0); del buf65  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_27], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf67, (256, 4096), (4096, 1), 0), reinterpret_tensor(arg52_1, (4096, 1024), (1, 4096), 0), out=buf68)
        del arg52_1
        buf69 = buf47; del buf47  # reuse
        buf73 = reinterpret_tensor(buf53, (2, 128, 1024), (131072, 1024, 1), 0); del buf53  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_23, hidden_states_29, hidden_states_30], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_4.run(buf69, buf61, arg47_1, buf68, arg53_1, arg54_1, arg55_1, buf73, 256, 1024, grid=grid(256), stream=stream0)
        del arg47_1
        del arg53_1
        del arg54_1
        del arg55_1
        buf74 = buf68; del buf68  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg57_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf73, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg56_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf74)
        del arg56_1
        del arg57_1
        buf75 = buf61; del buf61  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg59_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf73, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg58_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf75)
        del arg58_1
        del arg59_1
        buf76 = buf52; del buf52  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg61_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf73, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg60_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf76)
        del arg60_1
        del arg61_1
        del buf73
        # Topologically Sorted Source Nodes: [attn_output_12], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf78 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf74, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf75, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf76, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), buf77, False, scale=0.125)
        buf79 = buf78[0]
        del buf78
        buf83 = buf76; del buf76  # reuse
        # Topologically Sorted Source Nodes: [attn_output_15], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf79, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg62_1, (1024, 1024), (1, 1024), 0), out=buf83)
        del arg62_1
        buf87 = reinterpret_tensor(buf79, (2, 128, 1024), (131072, 1024, 1), 0); del buf79  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_32, hidden_states_33], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_2.run(buf69, buf83, arg63_1, arg64_1, arg65_1, buf87, 256, 1024, grid=grid(256), stream=stream0)
        del arg64_1
        del arg65_1
        buf88 = reinterpret_tensor(buf67, (256, 4096), (4096, 1), 0); del buf67  # reuse
        # Topologically Sorted Source Nodes: [linear_22], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf87, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg66_1, (1024, 4096), (1, 1024), 0), out=buf88)
        del arg66_1
        buf89 = reinterpret_tensor(buf88, (2, 128, 4096), (524288, 4096, 1), 0); del buf88  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_34], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_3.run(buf89, arg67_1, 1048576, grid=grid(1048576), stream=stream0)
        del arg67_1
        buf90 = reinterpret_tensor(buf87, (256, 1024), (1024, 1), 0); del buf87  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_36], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf89, (256, 4096), (4096, 1), 0), reinterpret_tensor(arg68_1, (4096, 1024), (1, 4096), 0), out=buf90)
        del arg68_1
        buf91 = buf69; del buf69  # reuse
        buf95 = reinterpret_tensor(buf75, (2, 128, 1024), (131072, 1024, 1), 0); del buf75  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_32, hidden_states_38, hidden_states_39], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_4.run(buf91, buf83, arg63_1, buf90, arg69_1, arg70_1, arg71_1, buf95, 256, 1024, grid=grid(256), stream=stream0)
        del arg63_1
        del arg69_1
        del arg70_1
        del arg71_1
        buf96 = buf90; del buf90  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg73_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf95, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg72_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf96)
        del arg72_1
        del arg73_1
        buf97 = buf83; del buf83  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg75_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf95, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg74_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf97)
        del arg74_1
        del arg75_1
        buf98 = buf74; del buf74  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg77_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf95, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg76_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf98)
        del arg76_1
        del arg77_1
        del buf95
        buf99 = buf77; del buf77  # reuse
        buf121 = buf55; del buf55  # reuse
        buf143 = buf33; del buf33  # reuse
        buf165 = buf11; del buf11  # reuse
        # Topologically Sorted Source Nodes: [attn_output_16, attn_output_20, attn_output_24, attn_output_28], Original ATen: [aten._scaled_dot_product_efficient_attention]
        stream0 = get_raw_stream(0)
        triton_poi_fused__scaled_dot_product_efficient_attention_1.run(arg5_1, buf99, buf121, buf143, buf165, 524288, grid=grid(524288), stream=stream0)
        # Topologically Sorted Source Nodes: [attn_output_16], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf100 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf96, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf97, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf98, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), buf99, False, scale=0.125)
        buf101 = buf100[0]
        del buf100
        buf105 = buf98; del buf98  # reuse
        # Topologically Sorted Source Nodes: [attn_output_19], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf101, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg78_1, (1024, 1024), (1, 1024), 0), out=buf105)
        del arg78_1
        buf109 = reinterpret_tensor(buf101, (2, 128, 1024), (131072, 1024, 1), 0); del buf101  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_41, hidden_states_42], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_2.run(buf91, buf105, arg79_1, arg80_1, arg81_1, buf109, 256, 1024, grid=grid(256), stream=stream0)
        del arg80_1
        del arg81_1
        buf110 = reinterpret_tensor(buf89, (256, 4096), (4096, 1), 0); del buf89  # reuse
        # Topologically Sorted Source Nodes: [linear_28], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf109, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg82_1, (1024, 4096), (1, 1024), 0), out=buf110)
        del arg82_1
        buf111 = reinterpret_tensor(buf110, (2, 128, 4096), (524288, 4096, 1), 0); del buf110  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_43], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_3.run(buf111, arg83_1, 1048576, grid=grid(1048576), stream=stream0)
        del arg83_1
        buf112 = reinterpret_tensor(buf109, (256, 1024), (1024, 1), 0); del buf109  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_45], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf111, (256, 4096), (4096, 1), 0), reinterpret_tensor(arg84_1, (4096, 1024), (1, 4096), 0), out=buf112)
        del arg84_1
        buf113 = buf91; del buf91  # reuse
        buf117 = reinterpret_tensor(buf97, (2, 128, 1024), (131072, 1024, 1), 0); del buf97  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_41, hidden_states_47, hidden_states_48], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_4.run(buf113, buf105, arg79_1, buf112, arg85_1, arg86_1, arg87_1, buf117, 256, 1024, grid=grid(256), stream=stream0)
        del arg79_1
        del arg85_1
        del arg86_1
        del arg87_1
        buf118 = buf112; del buf112  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg89_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf117, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg88_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf118)
        del arg88_1
        del arg89_1
        buf119 = buf105; del buf105  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg91_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf117, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg90_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf119)
        del arg90_1
        del arg91_1
        buf120 = buf96; del buf96  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg93_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf117, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg92_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf120)
        del arg92_1
        del arg93_1
        del buf117
        # Topologically Sorted Source Nodes: [attn_output_20], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf122 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf118, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf119, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf120, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), buf121, False, scale=0.125)
        buf123 = buf122[0]
        del buf122
        buf127 = buf120; del buf120  # reuse
        # Topologically Sorted Source Nodes: [attn_output_23], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf123, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg94_1, (1024, 1024), (1, 1024), 0), out=buf127)
        del arg94_1
        buf131 = reinterpret_tensor(buf123, (2, 128, 1024), (131072, 1024, 1), 0); del buf123  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_50, hidden_states_51], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_2.run(buf113, buf127, arg95_1, arg96_1, arg97_1, buf131, 256, 1024, grid=grid(256), stream=stream0)
        del arg96_1
        del arg97_1
        buf132 = reinterpret_tensor(buf111, (256, 4096), (4096, 1), 0); del buf111  # reuse
        # Topologically Sorted Source Nodes: [linear_34], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf131, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg98_1, (1024, 4096), (1, 1024), 0), out=buf132)
        del arg98_1
        buf133 = reinterpret_tensor(buf132, (2, 128, 4096), (524288, 4096, 1), 0); del buf132  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_52], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_3.run(buf133, arg99_1, 1048576, grid=grid(1048576), stream=stream0)
        del arg99_1
        buf134 = reinterpret_tensor(buf131, (256, 1024), (1024, 1), 0); del buf131  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_54], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf133, (256, 4096), (4096, 1), 0), reinterpret_tensor(arg100_1, (4096, 1024), (1, 4096), 0), out=buf134)
        del arg100_1
        buf135 = buf113; del buf113  # reuse
        buf139 = reinterpret_tensor(buf119, (2, 128, 1024), (131072, 1024, 1), 0); del buf119  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_50, hidden_states_56, hidden_states_57], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_4.run(buf135, buf127, arg95_1, buf134, arg101_1, arg102_1, arg103_1, buf139, 256, 1024, grid=grid(256), stream=stream0)
        del arg101_1
        del arg102_1
        del arg103_1
        del arg95_1
        buf140 = buf134; del buf134  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg105_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf139, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg104_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf140)
        del arg104_1
        del arg105_1
        buf141 = buf127; del buf127  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg107_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf139, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg106_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf141)
        del arg106_1
        del arg107_1
        buf142 = buf118; del buf118  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg109_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf139, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg108_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf142)
        del arg108_1
        del arg109_1
        del buf139
        # Topologically Sorted Source Nodes: [attn_output_24], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf144 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf140, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf141, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf142, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), buf143, False, scale=0.125)
        buf145 = buf144[0]
        del buf144
        buf149 = buf142; del buf142  # reuse
        # Topologically Sorted Source Nodes: [attn_output_27], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf145, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg110_1, (1024, 1024), (1, 1024), 0), out=buf149)
        del arg110_1
        buf153 = reinterpret_tensor(buf145, (2, 128, 1024), (131072, 1024, 1), 0); del buf145  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_59, hidden_states_60], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_2.run(buf135, buf149, arg111_1, arg112_1, arg113_1, buf153, 256, 1024, grid=grid(256), stream=stream0)
        del arg112_1
        del arg113_1
        buf154 = reinterpret_tensor(buf133, (256, 4096), (4096, 1), 0); del buf133  # reuse
        # Topologically Sorted Source Nodes: [linear_40], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf153, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg114_1, (1024, 4096), (1, 1024), 0), out=buf154)
        del arg114_1
        buf155 = reinterpret_tensor(buf154, (2, 128, 4096), (524288, 4096, 1), 0); del buf154  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_61], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_3.run(buf155, arg115_1, 1048576, grid=grid(1048576), stream=stream0)
        del arg115_1
        buf156 = reinterpret_tensor(buf153, (256, 1024), (1024, 1), 0); del buf153  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_63], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf155, (256, 4096), (4096, 1), 0), reinterpret_tensor(arg116_1, (4096, 1024), (1, 4096), 0), out=buf156)
        del arg116_1
        buf157 = buf135; del buf135  # reuse
        buf161 = reinterpret_tensor(buf141, (2, 128, 1024), (131072, 1024, 1), 0); del buf141  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_59, hidden_states_65, hidden_states_66], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_4.run(buf157, buf149, arg111_1, buf156, arg117_1, arg118_1, arg119_1, buf161, 256, 1024, grid=grid(256), stream=stream0)
        del arg111_1
        del arg117_1
        del arg118_1
        del arg119_1
        buf162 = buf156; del buf156  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg121_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf161, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg120_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf162)
        del arg120_1
        del arg121_1
        buf163 = buf149; del buf149  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg123_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf161, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg122_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf163)
        del arg122_1
        del arg123_1
        buf164 = buf140; del buf140  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg125_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf161, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg124_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf164)
        del arg124_1
        del arg125_1
        del buf161
        # Topologically Sorted Source Nodes: [attn_output_28], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf166 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf162, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf163, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf164, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), buf165, False, scale=0.125)
        buf167 = buf166[0]
        del buf166
        buf171 = buf164; del buf164  # reuse
        # Topologically Sorted Source Nodes: [attn_output_31], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf167, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg126_1, (1024, 1024), (1, 1024), 0), out=buf171)
        del arg126_1
        buf175 = reinterpret_tensor(buf167, (2, 128, 1024), (131072, 1024, 1), 0); del buf167  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_68, hidden_states_69], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_2.run(buf157, buf171, arg127_1, arg128_1, arg129_1, buf175, 256, 1024, grid=grid(256), stream=stream0)
        del arg128_1
        del arg129_1
        buf176 = reinterpret_tensor(buf155, (256, 4096), (4096, 1), 0); del buf155  # reuse
        # Topologically Sorted Source Nodes: [linear_46], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf175, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg130_1, (1024, 4096), (1, 1024), 0), out=buf176)
        del arg130_1
        buf177 = reinterpret_tensor(buf176, (2, 128, 4096), (524288, 4096, 1), 0); del buf176  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_70], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_3.run(buf177, arg131_1, 1048576, grid=grid(1048576), stream=stream0)
        del arg131_1
        buf178 = reinterpret_tensor(buf175, (256, 1024), (1024, 1), 0); del buf175  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_72], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf177, (256, 4096), (4096, 1), 0), reinterpret_tensor(arg132_1, (4096, 1024), (1, 4096), 0), out=buf178)
        del arg132_1
        buf179 = buf157; del buf157  # reuse
        buf183 = reinterpret_tensor(buf163, (2, 128, 1024), (131072, 1024, 1), 0); del buf163  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_68, hidden_states_74, hidden_states_75], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_4.run(buf179, buf171, arg127_1, buf178, arg133_1, arg134_1, arg135_1, buf183, 256, 1024, grid=grid(256), stream=stream0)
        del arg127_1
        del arg133_1
        del arg134_1
        del arg135_1
        buf184 = buf178; del buf178  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg137_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf183, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg136_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf184)
        del arg136_1
        del arg137_1
        buf185 = buf171; del buf171  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg139_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf183, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg138_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf185)
        del arg138_1
        del arg139_1
        buf186 = buf162; del buf162  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg141_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf183, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg140_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf186)
        del arg140_1
        del arg141_1
        del buf183
        buf187 = buf165; del buf165  # reuse
        buf209 = buf143; del buf143  # reuse
        buf231 = buf121; del buf121  # reuse
        buf253 = buf99; del buf99  # reuse
        # Topologically Sorted Source Nodes: [attn_output_32, attn_output_36, attn_output_40, attn_output_44], Original ATen: [aten._scaled_dot_product_efficient_attention]
        stream0 = get_raw_stream(0)
        triton_poi_fused__scaled_dot_product_efficient_attention_1.run(arg5_1, buf187, buf209, buf231, buf253, 524288, grid=grid(524288), stream=stream0)
        del arg5_1
        # Topologically Sorted Source Nodes: [attn_output_32], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf188 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf184, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf185, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf186, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), buf187, False, scale=0.125)
        del buf187
        buf189 = buf188[0]
        del buf188
        buf193 = buf186; del buf186  # reuse
        # Topologically Sorted Source Nodes: [attn_output_35], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf189, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg142_1, (1024, 1024), (1, 1024), 0), out=buf193)
        del arg142_1
        buf197 = reinterpret_tensor(buf189, (2, 128, 1024), (131072, 1024, 1), 0); del buf189  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_77, hidden_states_78], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_2.run(buf179, buf193, arg143_1, arg144_1, arg145_1, buf197, 256, 1024, grid=grid(256), stream=stream0)
        del arg144_1
        del arg145_1
        buf198 = reinterpret_tensor(buf177, (256, 4096), (4096, 1), 0); del buf177  # reuse
        # Topologically Sorted Source Nodes: [linear_52], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf197, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg146_1, (1024, 4096), (1, 1024), 0), out=buf198)
        del arg146_1
        buf199 = reinterpret_tensor(buf198, (2, 128, 4096), (524288, 4096, 1), 0); del buf198  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_79], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_3.run(buf199, arg147_1, 1048576, grid=grid(1048576), stream=stream0)
        del arg147_1
        buf200 = reinterpret_tensor(buf197, (256, 1024), (1024, 1), 0); del buf197  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_81], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf199, (256, 4096), (4096, 1), 0), reinterpret_tensor(arg148_1, (4096, 1024), (1, 4096), 0), out=buf200)
        del arg148_1
        buf201 = buf179; del buf179  # reuse
        buf205 = reinterpret_tensor(buf185, (2, 128, 1024), (131072, 1024, 1), 0); del buf185  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_77, hidden_states_83, hidden_states_84], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_4.run(buf201, buf193, arg143_1, buf200, arg149_1, arg150_1, arg151_1, buf205, 256, 1024, grid=grid(256), stream=stream0)
        del arg143_1
        del arg149_1
        del arg150_1
        del arg151_1
        buf206 = buf200; del buf200  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg153_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf205, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg152_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf206)
        del arg152_1
        del arg153_1
        buf207 = buf193; del buf193  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg155_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf205, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg154_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf207)
        del arg154_1
        del arg155_1
        buf208 = buf184; del buf184  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg157_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf205, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg156_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf208)
        del arg156_1
        del arg157_1
        del buf205
        # Topologically Sorted Source Nodes: [attn_output_36], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf210 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf206, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf207, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf208, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), buf209, False, scale=0.125)
        del buf209
        buf211 = buf210[0]
        del buf210
        buf215 = buf208; del buf208  # reuse
        # Topologically Sorted Source Nodes: [attn_output_39], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf211, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg158_1, (1024, 1024), (1, 1024), 0), out=buf215)
        del arg158_1
        buf219 = reinterpret_tensor(buf211, (2, 128, 1024), (131072, 1024, 1), 0); del buf211  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_86, hidden_states_87], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_2.run(buf201, buf215, arg159_1, arg160_1, arg161_1, buf219, 256, 1024, grid=grid(256), stream=stream0)
        del arg160_1
        del arg161_1
        buf220 = reinterpret_tensor(buf199, (256, 4096), (4096, 1), 0); del buf199  # reuse
        # Topologically Sorted Source Nodes: [linear_58], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf219, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg162_1, (1024, 4096), (1, 1024), 0), out=buf220)
        del arg162_1
        buf221 = reinterpret_tensor(buf220, (2, 128, 4096), (524288, 4096, 1), 0); del buf220  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_88], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_3.run(buf221, arg163_1, 1048576, grid=grid(1048576), stream=stream0)
        del arg163_1
        buf222 = reinterpret_tensor(buf219, (256, 1024), (1024, 1), 0); del buf219  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_90], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf221, (256, 4096), (4096, 1), 0), reinterpret_tensor(arg164_1, (4096, 1024), (1, 4096), 0), out=buf222)
        del arg164_1
        buf223 = buf201; del buf201  # reuse
        buf227 = reinterpret_tensor(buf207, (2, 128, 1024), (131072, 1024, 1), 0); del buf207  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_86, hidden_states_92, hidden_states_93], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_4.run(buf223, buf215, arg159_1, buf222, arg165_1, arg166_1, arg167_1, buf227, 256, 1024, grid=grid(256), stream=stream0)
        del arg159_1
        del arg165_1
        del arg166_1
        del arg167_1
        buf228 = buf222; del buf222  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg169_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf227, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg168_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf228)
        del arg168_1
        del arg169_1
        buf229 = buf215; del buf215  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg171_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf227, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg170_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf229)
        del arg170_1
        del arg171_1
        buf230 = buf206; del buf206  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg173_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf227, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg172_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf230)
        del arg172_1
        del arg173_1
        del buf227
        # Topologically Sorted Source Nodes: [attn_output_40], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf232 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf228, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf229, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf230, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), buf231, False, scale=0.125)
        del buf231
        buf233 = buf232[0]
        del buf232
        buf237 = buf230; del buf230  # reuse
        # Topologically Sorted Source Nodes: [attn_output_43], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf233, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg174_1, (1024, 1024), (1, 1024), 0), out=buf237)
        del arg174_1
        buf241 = reinterpret_tensor(buf233, (2, 128, 1024), (131072, 1024, 1), 0); del buf233  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_95, hidden_states_96], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_2.run(buf223, buf237, arg175_1, arg176_1, arg177_1, buf241, 256, 1024, grid=grid(256), stream=stream0)
        del arg176_1
        del arg177_1
        buf242 = reinterpret_tensor(buf221, (256, 4096), (4096, 1), 0); del buf221  # reuse
        # Topologically Sorted Source Nodes: [linear_64], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf241, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg178_1, (1024, 4096), (1, 1024), 0), out=buf242)
        del arg178_1
        buf243 = reinterpret_tensor(buf242, (2, 128, 4096), (524288, 4096, 1), 0); del buf242  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_97], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_3.run(buf243, arg179_1, 1048576, grid=grid(1048576), stream=stream0)
        del arg179_1
        buf244 = reinterpret_tensor(buf241, (256, 1024), (1024, 1), 0); del buf241  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_99], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf243, (256, 4096), (4096, 1), 0), reinterpret_tensor(arg180_1, (4096, 1024), (1, 4096), 0), out=buf244)
        del arg180_1
        buf245 = buf223; del buf223  # reuse
        buf249 = reinterpret_tensor(buf229, (2, 128, 1024), (131072, 1024, 1), 0); del buf229  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_95, hidden_states_101, hidden_states_102], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_4.run(buf245, buf237, arg175_1, buf244, arg181_1, arg182_1, arg183_1, buf249, 256, 1024, grid=grid(256), stream=stream0)
        del arg175_1
        del arg181_1
        del arg182_1
        del arg183_1
        buf250 = buf244; del buf244  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg185_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf249, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg184_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf250)
        del arg184_1
        del arg185_1
        buf251 = buf237; del buf237  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg187_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf249, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg186_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf251)
        del arg186_1
        del arg187_1
        buf252 = buf228; del buf228  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.addmm(reinterpret_tensor(arg189_1, (256, 1024), (0, 1), 0), reinterpret_tensor(buf249, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg188_1, (1024, 1024), (1, 1024), 0), alpha=1, beta=1, out=buf252)
        del arg188_1
        del arg189_1
        del buf249
        # Topologically Sorted Source Nodes: [attn_output_44], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf254 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf250, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf251, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), reinterpret_tensor(buf252, (2, 16, 128, 64), (131072, 64, 1024, 1), 0), buf253, False, scale=0.125)
        del buf250
        del buf251
        del buf253
        buf255 = buf254[0]
        del buf254
        buf259 = buf252; del buf252  # reuse
        # Topologically Sorted Source Nodes: [attn_output_47], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf255, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg190_1, (1024, 1024), (1, 1024), 0), out=buf259)
        del arg190_1
        buf263 = reinterpret_tensor(buf255, (2, 128, 1024), (131072, 1024, 1), 0); del buf255  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_104, hidden_states_105], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_2.run(buf245, buf259, arg191_1, arg192_1, arg193_1, buf263, 256, 1024, grid=grid(256), stream=stream0)
        del arg192_1
        del arg193_1
        buf264 = reinterpret_tensor(buf243, (256, 4096), (4096, 1), 0); del buf243  # reuse
        # Topologically Sorted Source Nodes: [linear_70], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf263, (256, 1024), (1024, 1), 0), reinterpret_tensor(arg194_1, (1024, 4096), (1, 1024), 0), out=buf264)
        del arg194_1
        buf265 = reinterpret_tensor(buf264, (2, 128, 4096), (524288, 4096, 1), 0); del buf264  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_106], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_3.run(buf265, arg195_1, 1048576, grid=grid(1048576), stream=stream0)
        del arg195_1
        buf266 = reinterpret_tensor(buf263, (256, 1024), (1024, 1), 0); del buf263  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_108], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf265, (256, 4096), (4096, 1), 0), reinterpret_tensor(arg196_1, (4096, 1024), (1, 4096), 0), out=buf266)
        del arg196_1
        del buf265
        buf267 = buf245; del buf245  # reuse
        buf271 = buf267; del buf267  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_104, hidden_states_110, hidden_states_111], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_5.run(buf271, buf259, arg191_1, buf266, arg197_1, arg198_1, arg199_1, 256, 1024, grid=grid(256), stream=stream0)
        del arg191_1
        del arg197_1
        del arg198_1
        del arg199_1
        del buf259
        del buf266
    return (buf271, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((2, 128), (128, 1), device='cuda:0', dtype=torch.int64)
    arg1_1 = rand_strided((250027, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg2_1 = rand_strided((1026, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg3_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg4_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg5_1 = rand_strided((2, 128), (128, 1), device='cuda:0', dtype=torch.int64)
    arg6_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg7_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg8_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg9_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg10_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg11_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg12_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg13_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg14_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg15_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg16_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg17_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg18_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg19_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg20_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg21_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg22_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg23_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg24_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg25_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg26_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg27_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg28_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg29_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg30_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg31_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg32_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg33_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg34_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg35_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg36_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg37_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg38_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg39_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg40_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg41_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg42_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg43_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg44_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg45_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg46_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg47_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg48_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg49_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg50_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg51_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg52_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg53_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg54_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg55_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg56_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg57_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg58_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg59_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg60_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg61_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg62_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg63_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg64_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg65_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg66_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg67_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg68_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg69_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg70_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg71_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg72_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg73_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg74_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg75_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg76_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg77_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg78_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg79_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg80_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg81_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg82_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg83_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg84_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg85_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg86_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg87_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg88_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg89_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg90_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg91_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg92_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg93_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg94_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg95_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg96_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg97_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg98_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg99_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg100_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg101_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg102_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg103_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg104_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg105_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg106_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg107_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg108_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg109_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg110_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg111_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg112_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg113_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg114_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg115_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg116_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg117_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg118_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg119_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg120_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg121_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg122_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg123_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg124_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg125_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg126_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg127_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg128_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg129_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg130_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg131_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg132_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg133_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg134_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg135_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg136_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg137_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg138_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg139_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg140_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg141_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg142_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg143_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg144_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg145_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg146_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg147_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg148_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg149_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg150_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg151_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg152_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg153_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg154_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg155_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg156_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg157_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg158_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg159_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg160_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg161_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg162_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg163_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg164_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg165_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg166_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg167_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg168_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg169_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg170_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg171_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg172_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg173_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg174_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg175_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg176_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg177_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg178_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg179_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg180_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg181_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg182_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg183_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg184_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg185_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg186_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg187_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg188_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg189_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg190_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg191_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg192_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg193_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg194_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg195_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg196_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg197_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg198_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg199_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    fn = lambda: call([arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1, arg7_1, arg8_1, arg9_1, arg10_1, arg11_1, arg12_1, arg13_1, arg14_1, arg15_1, arg16_1, arg17_1, arg18_1, arg19_1, arg20_1, arg21_1, arg22_1, arg23_1, arg24_1, arg25_1, arg26_1, arg27_1, arg28_1, arg29_1, arg30_1, arg31_1, arg32_1, arg33_1, arg34_1, arg35_1, arg36_1, arg37_1, arg38_1, arg39_1, arg40_1, arg41_1, arg42_1, arg43_1, arg44_1, arg45_1, arg46_1, arg47_1, arg48_1, arg49_1, arg50_1, arg51_1, arg52_1, arg53_1, arg54_1, arg55_1, arg56_1, arg57_1, arg58_1, arg59_1, arg60_1, arg61_1, arg62_1, arg63_1, arg64_1, arg65_1, arg66_1, arg67_1, arg68_1, arg69_1, arg70_1, arg71_1, arg72_1, arg73_1, arg74_1, arg75_1, arg76_1, arg77_1, arg78_1, arg79_1, arg80_1, arg81_1, arg82_1, arg83_1, arg84_1, arg85_1, arg86_1, arg87_1, arg88_1, arg89_1, arg90_1, arg91_1, arg92_1, arg93_1, arg94_1, arg95_1, arg96_1, arg97_1, arg98_1, arg99_1, arg100_1, arg101_1, arg102_1, arg103_1, arg104_1, arg105_1, arg106_1, arg107_1, arg108_1, arg109_1, arg110_1, arg111_1, arg112_1, arg113_1, arg114_1, arg115_1, arg116_1, arg117_1, arg118_1, arg119_1, arg120_1, arg121_1, arg122_1, arg123_1, arg124_1, arg125_1, arg126_1, arg127_1, arg128_1, arg129_1, arg130_1, arg131_1, arg132_1, arg133_1, arg134_1, arg135_1, arg136_1, arg137_1, arg138_1, arg139_1, arg140_1, arg141_1, arg142_1, arg143_1, arg144_1, arg145_1, arg146_1, arg147_1, arg148_1, arg149_1, arg150_1, arg151_1, arg152_1, arg153_1, arg154_1, arg155_1, arg156_1, arg157_1, arg158_1, arg159_1, arg160_1, arg161_1, arg162_1, arg163_1, arg164_1, arg165_1, arg166_1, arg167_1, arg168_1, arg169_1, arg170_1, arg171_1, arg172_1, arg173_1, arg174_1, arg175_1, arg176_1, arg177_1, arg178_1, arg179_1, arg180_1, arg181_1, arg182_1, arg183_1, arg184_1, arg185_1, arg186_1, arg187_1, arg188_1, arg189_1, arg190_1, arg191_1, arg192_1, arg193_1, arg194_1, arg195_1, arg196_1, arg197_1, arg198_1, arg199_1])
    return print_performance(fn, times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('None', benchmark_compiled_module)