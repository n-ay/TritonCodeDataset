

# ===== run_2025_10_19_03_43_12_574129-pid_19/torchinductor/model__1_inference_1.1/fx_graph_readable.py =====
class <lambda>(torch.nn.Module):
    def forward(self, arg0_1: "i64[2, 64]", arg1_1: "i64[1, 514]", arg2_1: "f32[50265, 768]", arg3_1: "f32[1, 768]", arg4_1: "f32[514, 768]", arg5_1: "f32[768]", arg6_1: "f32[768]", arg7_1: "i64[2, 64]", arg8_1: "f32[768, 768]", arg9_1: "f32[768]", arg10_1: "f32[768, 768]", arg11_1: "f32[768]", arg12_1: "f32[768, 768]", arg13_1: "f32[768]", arg14_1: "f32[768, 768]", arg15_1: "f32[768]", arg16_1: "f32[768]", arg17_1: "f32[768]", arg18_1: "f32[3072, 768]", arg19_1: "f32[3072]", arg20_1: "f32[768, 3072]", arg21_1: "f32[768]", arg22_1: "f32[768]", arg23_1: "f32[768]", arg24_1: "f32[768, 768]", arg25_1: "f32[768]", arg26_1: "f32[768, 768]", arg27_1: "f32[768]", arg28_1: "f32[768, 768]", arg29_1: "f32[768]", arg30_1: "f32[768, 768]", arg31_1: "f32[768]", arg32_1: "f32[768]", arg33_1: "f32[768]", arg34_1: "f32[3072, 768]", arg35_1: "f32[3072]", arg36_1: "f32[768, 3072]", arg37_1: "f32[768]", arg38_1: "f32[768]", arg39_1: "f32[768]", arg40_1: "f32[768, 768]", arg41_1: "f32[768]", arg42_1: "f32[768, 768]", arg43_1: "f32[768]", arg44_1: "f32[768, 768]", arg45_1: "f32[768]", arg46_1: "f32[768, 768]", arg47_1: "f32[768]", arg48_1: "f32[768]", arg49_1: "f32[768]", arg50_1: "f32[3072, 768]", arg51_1: "f32[3072]", arg52_1: "f32[768, 3072]", arg53_1: "f32[768]", arg54_1: "f32[768]", arg55_1: "f32[768]", arg56_1: "f32[768, 768]", arg57_1: "f32[768]", arg58_1: "f32[768, 768]", arg59_1: "f32[768]", arg60_1: "f32[768, 768]", arg61_1: "f32[768]", arg62_1: "f32[768, 768]", arg63_1: "f32[768]", arg64_1: "f32[768]", arg65_1: "f32[768]", arg66_1: "f32[3072, 768]", arg67_1: "f32[3072]", arg68_1: "f32[768, 3072]", arg69_1: "f32[768]", arg70_1: "f32[768]", arg71_1: "f32[768]", arg72_1: "f32[768, 768]", arg73_1: "f32[768]", arg74_1: "f32[768, 768]", arg75_1: "f32[768]", arg76_1: "f32[768, 768]", arg77_1: "f32[768]", arg78_1: "f32[768, 768]", arg79_1: "f32[768]", arg80_1: "f32[768]", arg81_1: "f32[768]", arg82_1: "f32[3072, 768]", arg83_1: "f32[3072]", arg84_1: "f32[768, 3072]", arg85_1: "f32[768]", arg86_1: "f32[768]", arg87_1: "f32[768]", arg88_1: "f32[768, 768]", arg89_1: "f32[768]", arg90_1: "f32[768, 768]", arg91_1: "f32[768]", arg92_1: "f32[768, 768]", arg93_1: "f32[768]", arg94_1: "f32[768, 768]", arg95_1: "f32[768]", arg96_1: "f32[768]", arg97_1: "f32[768]", arg98_1: "f32[3072, 768]", arg99_1: "f32[3072]", arg100_1: "f32[768, 3072]", arg101_1: "f32[768]", arg102_1: "f32[768]", arg103_1: "f32[768]", arg104_1: "f32[768, 768]", arg105_1: "f32[768]", arg106_1: "f32[768, 768]", arg107_1: "f32[768]", arg108_1: "f32[768, 768]", arg109_1: "f32[768]", arg110_1: "f32[768, 768]", arg111_1: "f32[768]", arg112_1: "f32[768]", arg113_1: "f32[768]", arg114_1: "f32[3072, 768]", arg115_1: "f32[3072]", arg116_1: "f32[768, 3072]", arg117_1: "f32[768]", arg118_1: "f32[768]", arg119_1: "f32[768]", arg120_1: "f32[768, 768]", arg121_1: "f32[768]", arg122_1: "f32[768, 768]", arg123_1: "f32[768]", arg124_1: "f32[768, 768]", arg125_1: "f32[768]", arg126_1: "f32[768, 768]", arg127_1: "f32[768]", arg128_1: "f32[768]", arg129_1: "f32[768]", arg130_1: "f32[3072, 768]", arg131_1: "f32[3072]", arg132_1: "f32[768, 3072]", arg133_1: "f32[768]", arg134_1: "f32[768]", arg135_1: "f32[768]", arg136_1: "f32[768, 768]", arg137_1: "f32[768]", arg138_1: "f32[768, 768]", arg139_1: "f32[768]", arg140_1: "f32[768, 768]", arg141_1: "f32[768]", arg142_1: "f32[768, 768]", arg143_1: "f32[768]", arg144_1: "f32[768]", arg145_1: "f32[768]", arg146_1: "f32[3072, 768]", arg147_1: "f32[3072]", arg148_1: "f32[768, 3072]", arg149_1: "f32[768]", arg150_1: "f32[768]", arg151_1: "f32[768]", arg152_1: "f32[768, 768]", arg153_1: "f32[768]", arg154_1: "f32[768, 768]", arg155_1: "f32[768]", arg156_1: "f32[768, 768]", arg157_1: "f32[768]", arg158_1: "f32[768, 768]", arg159_1: "f32[768]", arg160_1: "f32[768]", arg161_1: "f32[768]", arg162_1: "f32[3072, 768]", arg163_1: "f32[3072]", arg164_1: "f32[768, 3072]", arg165_1: "f32[768]", arg166_1: "f32[768]", arg167_1: "f32[768]", arg168_1: "f32[768, 768]", arg169_1: "f32[768]", arg170_1: "f32[768, 768]", arg171_1: "f32[768]", arg172_1: "f32[768, 768]", arg173_1: "f32[768]", arg174_1: "f32[768, 768]", arg175_1: "f32[768]", arg176_1: "f32[768]", arg177_1: "f32[768]", arg178_1: "f32[3072, 768]", arg179_1: "f32[3072]", arg180_1: "f32[768, 3072]", arg181_1: "f32[768]", arg182_1: "f32[768]", arg183_1: "f32[768]", arg184_1: "f32[768, 768]", arg185_1: "f32[768]", arg186_1: "f32[768, 768]", arg187_1: "f32[768]", arg188_1: "f32[768, 768]", arg189_1: "f32[768]", arg190_1: "f32[768, 768]", arg191_1: "f32[768]", arg192_1: "f32[768]", arg193_1: "f32[768]", arg194_1: "f32[3072, 768]", arg195_1: "f32[3072]", arg196_1: "f32[768, 3072]", arg197_1: "f32[768]", arg198_1: "f32[768]", arg199_1: "f32[768]"):
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:788 in forward, code: buffered_token_type_ids = self.embeddings.token_type_ids[:, :seq_length]
        slice_2: "i64[1, 64]" = torch.ops.aten.slice.Tensor(arg1_1, 1, 0, 64);  arg1_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:789 in forward, code: buffered_token_type_ids_expanded = buffered_token_type_ids.expand(batch_size, seq_length)
        expand: "i64[2, 64]" = torch.ops.aten.expand.default(slice_2, [2, 64]);  slice_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:1551 in create_position_ids_from_input_ids, code: mask = input_ids.ne(padding_idx).int()
        ne: "b8[2, 64]" = torch.ops.aten.ne.Scalar(arg0_1, 1)
        convert_element_type: "i32[2, 64]" = torch.ops.prims.convert_element_type.default(ne, torch.int32);  ne = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:1552 in create_position_ids_from_input_ids, code: incremental_indices = (torch.cumsum(mask, dim=1).type_as(mask) + past_key_values_length) * mask
        cumsum: "i64[2, 64]" = torch.ops.aten.cumsum.default(convert_element_type, 1)
        convert_element_type_1: "i32[2, 64]" = torch.ops.prims.convert_element_type.default(cumsum, torch.int32);  cumsum = None
        add: "i32[2, 64]" = torch.ops.aten.add.Tensor(convert_element_type_1, 0);  convert_element_type_1 = None
        mul: "i32[2, 64]" = torch.ops.aten.mul.Tensor(add, convert_element_type);  add = convert_element_type = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:1553 in create_position_ids_from_input_ids, code: return incremental_indices.long() + padding_idx
        convert_element_type_2: "i64[2, 64]" = torch.ops.prims.convert_element_type.default(mul, torch.int64);  mul = None
        add_1: "i64[2, 64]" = torch.ops.aten.add.Tensor(convert_element_type_2, 1);  convert_element_type_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:110 in forward, code: inputs_embeds = self.word_embeddings(input_ids)
        embedding: "f32[2, 64, 768]" = torch.ops.aten.embedding.default(arg2_1, arg0_1, 1);  arg2_1 = arg0_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:111 in forward, code: token_type_embeddings = self.token_type_embeddings(token_type_ids)
        embedding_1: "f32[2, 64, 768]" = torch.ops.aten.embedding.default(arg3_1, expand);  arg3_1 = expand = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:113 in forward, code: embeddings = inputs_embeds + token_type_embeddings
        add_2: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(embedding, embedding_1);  embedding = embedding_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:115 in forward, code: position_embeddings = self.position_embeddings(position_ids)
        embedding_2: "f32[2, 64, 768]" = torch.ops.aten.embedding.default(arg4_1, add_1, 1);  arg4_1 = add_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:116 in forward, code: embeddings += position_embeddings
        add_3: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_2, embedding_2);  add_2 = embedding_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:117 in forward, code: embeddings = self.LayerNorm(embeddings)
        var_mean = torch.ops.aten.var_mean.correction(add_3, [2], correction = 0, keepdim = True)
        getitem: "f32[2, 64, 1]" = var_mean[0]
        getitem_1: "f32[2, 64, 1]" = var_mean[1];  var_mean = None
        add_4: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem, 1e-05);  getitem = None
        rsqrt: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_4);  add_4 = None
        sub: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_3, getitem_1);  add_3 = getitem_1 = None
        mul_1: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub, rsqrt);  sub = rsqrt = None
        mul_2: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_1, arg5_1);  mul_1 = arg5_1 = None
        add_5: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_2, arg6_1);  mul_2 = arg6_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:194 in _expand_mask, code: expanded_mask = mask[:, None, None, :].expand(bsz, 1, tgt_len, src_len).to(dtype)
        unsqueeze: "i64[2, 1, 64]" = torch.ops.aten.unsqueeze.default(arg7_1, 1);  arg7_1 = None
        unsqueeze_1: "i64[2, 1, 1, 64]" = torch.ops.aten.unsqueeze.default(unsqueeze, 2);  unsqueeze = None
        expand_1: "i64[2, 1, 64, 64]" = torch.ops.aten.expand.default(unsqueeze_1, [2, 1, 64, 64]);  unsqueeze_1 = None
        convert_element_type_3: "f32[2, 1, 64, 64]" = torch.ops.prims.convert_element_type.default(expand_1, torch.float32);  expand_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:196 in _expand_mask, code: inverted_mask = torch.tensor(1.0, dtype=dtype) - expanded_mask
        _tensor_constant0 = self._tensor_constant0;  _tensor_constant0 = None
        full_default: "f32[]" = torch.ops.aten.full.default([], 1.0, dtype = torch.float32, layout = torch.strided, device = device(type='cpu'), pin_memory = False)
        sub_1: "f32[2, 1, 64, 64]" = torch.ops.aten.sub.Tensor(full_default, convert_element_type_3);  full_default = convert_element_type_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:198 in _expand_mask, code: return inverted_mask.masked_fill(inverted_mask.to(torch.bool), torch.finfo(dtype).min)
        convert_element_type_4: "b8[2, 1, 64, 64]" = torch.ops.prims.convert_element_type.default(sub_1, torch.bool)
        full_default_1: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where: "f32[2, 1, 64, 64]" = torch.ops.aten.where.self(convert_element_type_4, full_default_1, sub_1);  convert_element_type_4 = full_default_1 = sub_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view: "f32[128, 768]" = torch.ops.aten.view.default(add_5, [128, 768])
        permute: "f32[768, 768]" = torch.ops.aten.permute.default(arg8_1, [1, 0]);  arg8_1 = None
        addmm: "f32[128, 768]" = torch.ops.aten.addmm.default(arg9_1, view, permute);  arg9_1 = view = permute = None
        view_1: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm, [2, 64, 768]);  addmm = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_2: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_1, [2, 64, 12, 64]);  view_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_1: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_2, [0, 2, 1, 3]);  view_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_3: "f32[128, 768]" = torch.ops.aten.view.default(add_5, [128, 768])
        permute_2: "f32[768, 768]" = torch.ops.aten.permute.default(arg10_1, [1, 0]);  arg10_1 = None
        addmm_1: "f32[128, 768]" = torch.ops.aten.addmm.default(arg11_1, view_3, permute_2);  arg11_1 = view_3 = permute_2 = None
        view_4: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_1, [2, 64, 768]);  addmm_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_5: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_4, [2, 64, 12, 64]);  view_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_3: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_5, [0, 2, 1, 3]);  view_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_6: "f32[128, 768]" = torch.ops.aten.view.default(add_5, [128, 768])
        permute_4: "f32[768, 768]" = torch.ops.aten.permute.default(arg12_1, [1, 0]);  arg12_1 = None
        addmm_2: "f32[128, 768]" = torch.ops.aten.addmm.default(arg13_1, view_6, permute_4);  arg13_1 = view_6 = permute_4 = None
        view_7: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_2, [2, 64, 768]);  addmm_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_8: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_7, [2, 64, 12, 64]);  view_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_5: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_8, [0, 2, 1, 3]);  view_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_2: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_1, permute_3, permute_5, expand_2, False);  permute_1 = permute_3 = permute_5 = expand_2 = None
        getitem_2: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention[0];  _scaled_dot_product_efficient_attention = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_6: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_2, [0, 2, 1, 3]);  getitem_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_9: "f32[2, 64, 768]" = torch.ops.aten.view.default(permute_6, [2, 64, 768]);  permute_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_10: "f32[128, 768]" = torch.ops.aten.view.default(view_9, [128, 768]);  view_9 = None
        permute_7: "f32[768, 768]" = torch.ops.aten.permute.default(arg14_1, [1, 0]);  arg14_1 = None
        addmm_3: "f32[128, 768]" = torch.ops.aten.addmm.default(arg15_1, view_10, permute_7);  arg15_1 = view_10 = permute_7 = None
        view_11: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_3, [2, 64, 768]);  addmm_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_6: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_11, add_5);  view_11 = add_5 = None
        var_mean_1 = torch.ops.aten.var_mean.correction(add_6, [2], correction = 0, keepdim = True)
        getitem_6: "f32[2, 64, 1]" = var_mean_1[0]
        getitem_7: "f32[2, 64, 1]" = var_mean_1[1];  var_mean_1 = None
        add_7: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_6, 1e-05);  getitem_6 = None
        rsqrt_1: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_7);  add_7 = None
        sub_2: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_6, getitem_7);  add_6 = getitem_7 = None
        mul_3: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_2, rsqrt_1);  sub_2 = rsqrt_1 = None
        mul_4: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_3, arg16_1);  mul_3 = arg16_1 = None
        add_8: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_4, arg17_1);  mul_4 = arg17_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_12: "f32[128, 768]" = torch.ops.aten.view.default(add_8, [128, 768])
        permute_8: "f32[768, 3072]" = torch.ops.aten.permute.default(arg18_1, [1, 0]);  arg18_1 = None
        addmm_4: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg19_1, view_12, permute_8);  arg19_1 = view_12 = permute_8 = None
        view_13: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_4, [2, 64, 3072]);  addmm_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_5: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_13, 0.5)
        mul_6: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_13, 0.7071067811865476);  view_13 = None
        erf: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_6);  mul_6 = None
        add_9: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf, 1);  erf = None
        mul_7: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_5, add_9);  mul_5 = add_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_14: "f32[128, 3072]" = torch.ops.aten.view.default(mul_7, [128, 3072]);  mul_7 = None
        permute_9: "f32[3072, 768]" = torch.ops.aten.permute.default(arg20_1, [1, 0]);  arg20_1 = None
        addmm_5: "f32[128, 768]" = torch.ops.aten.addmm.default(arg21_1, view_14, permute_9);  arg21_1 = view_14 = permute_9 = None
        view_15: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_5, [2, 64, 768]);  addmm_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_10: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_15, add_8);  view_15 = add_8 = None
        var_mean_2 = torch.ops.aten.var_mean.correction(add_10, [2], correction = 0, keepdim = True)
        getitem_8: "f32[2, 64, 1]" = var_mean_2[0]
        getitem_9: "f32[2, 64, 1]" = var_mean_2[1];  var_mean_2 = None
        add_11: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_8, 1e-05);  getitem_8 = None
        rsqrt_2: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_11);  add_11 = None
        sub_3: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_10, getitem_9);  add_10 = getitem_9 = None
        mul_8: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_3, rsqrt_2);  sub_3 = rsqrt_2 = None
        mul_9: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_8, arg22_1);  mul_8 = arg22_1 = None
        add_12: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_9, arg23_1);  mul_9 = arg23_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_16: "f32[128, 768]" = torch.ops.aten.view.default(add_12, [128, 768])
        permute_10: "f32[768, 768]" = torch.ops.aten.permute.default(arg24_1, [1, 0]);  arg24_1 = None
        addmm_6: "f32[128, 768]" = torch.ops.aten.addmm.default(arg25_1, view_16, permute_10);  arg25_1 = view_16 = permute_10 = None
        view_17: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_6, [2, 64, 768]);  addmm_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_18: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_17, [2, 64, 12, 64]);  view_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_11: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_18, [0, 2, 1, 3]);  view_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_19: "f32[128, 768]" = torch.ops.aten.view.default(add_12, [128, 768])
        permute_12: "f32[768, 768]" = torch.ops.aten.permute.default(arg26_1, [1, 0]);  arg26_1 = None
        addmm_7: "f32[128, 768]" = torch.ops.aten.addmm.default(arg27_1, view_19, permute_12);  arg27_1 = view_19 = permute_12 = None
        view_20: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_7, [2, 64, 768]);  addmm_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_21: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_20, [2, 64, 12, 64]);  view_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_13: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_21, [0, 2, 1, 3]);  view_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_22: "f32[128, 768]" = torch.ops.aten.view.default(add_12, [128, 768])
        permute_14: "f32[768, 768]" = torch.ops.aten.permute.default(arg28_1, [1, 0]);  arg28_1 = None
        addmm_8: "f32[128, 768]" = torch.ops.aten.addmm.default(arg29_1, view_22, permute_14);  arg29_1 = view_22 = permute_14 = None
        view_23: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_8, [2, 64, 768]);  addmm_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_24: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_23, [2, 64, 12, 64]);  view_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_15: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_24, [0, 2, 1, 3]);  view_24 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_3: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_1 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_11, permute_13, permute_15, expand_3, False);  permute_11 = permute_13 = permute_15 = expand_3 = None
        getitem_10: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_1[0];  _scaled_dot_product_efficient_attention_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_16: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_10, [0, 2, 1, 3]);  getitem_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_25: "f32[2, 64, 768]" = torch.ops.aten.view.default(permute_16, [2, 64, 768]);  permute_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_26: "f32[128, 768]" = torch.ops.aten.view.default(view_25, [128, 768]);  view_25 = None
        permute_17: "f32[768, 768]" = torch.ops.aten.permute.default(arg30_1, [1, 0]);  arg30_1 = None
        addmm_9: "f32[128, 768]" = torch.ops.aten.addmm.default(arg31_1, view_26, permute_17);  arg31_1 = view_26 = permute_17 = None
        view_27: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_9, [2, 64, 768]);  addmm_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_13: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_27, add_12);  view_27 = add_12 = None
        var_mean_3 = torch.ops.aten.var_mean.correction(add_13, [2], correction = 0, keepdim = True)
        getitem_14: "f32[2, 64, 1]" = var_mean_3[0]
        getitem_15: "f32[2, 64, 1]" = var_mean_3[1];  var_mean_3 = None
        add_14: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_14, 1e-05);  getitem_14 = None
        rsqrt_3: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_14);  add_14 = None
        sub_4: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_13, getitem_15);  add_13 = getitem_15 = None
        mul_10: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_4, rsqrt_3);  sub_4 = rsqrt_3 = None
        mul_11: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_10, arg32_1);  mul_10 = arg32_1 = None
        add_15: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_11, arg33_1);  mul_11 = arg33_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_28: "f32[128, 768]" = torch.ops.aten.view.default(add_15, [128, 768])
        permute_18: "f32[768, 3072]" = torch.ops.aten.permute.default(arg34_1, [1, 0]);  arg34_1 = None
        addmm_10: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg35_1, view_28, permute_18);  arg35_1 = view_28 = permute_18 = None
        view_29: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_10, [2, 64, 3072]);  addmm_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_12: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_29, 0.5)
        mul_13: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_29, 0.7071067811865476);  view_29 = None
        erf_1: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_13);  mul_13 = None
        add_16: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_1, 1);  erf_1 = None
        mul_14: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_12, add_16);  mul_12 = add_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_30: "f32[128, 3072]" = torch.ops.aten.view.default(mul_14, [128, 3072]);  mul_14 = None
        permute_19: "f32[3072, 768]" = torch.ops.aten.permute.default(arg36_1, [1, 0]);  arg36_1 = None
        addmm_11: "f32[128, 768]" = torch.ops.aten.addmm.default(arg37_1, view_30, permute_19);  arg37_1 = view_30 = permute_19 = None
        view_31: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_11, [2, 64, 768]);  addmm_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_17: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_31, add_15);  view_31 = add_15 = None
        var_mean_4 = torch.ops.aten.var_mean.correction(add_17, [2], correction = 0, keepdim = True)
        getitem_16: "f32[2, 64, 1]" = var_mean_4[0]
        getitem_17: "f32[2, 64, 1]" = var_mean_4[1];  var_mean_4 = None
        add_18: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_16, 1e-05);  getitem_16 = None
        rsqrt_4: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_18);  add_18 = None
        sub_5: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_17, getitem_17);  add_17 = getitem_17 = None
        mul_15: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_5, rsqrt_4);  sub_5 = rsqrt_4 = None
        mul_16: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_15, arg38_1);  mul_15 = arg38_1 = None
        add_19: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_16, arg39_1);  mul_16 = arg39_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_32: "f32[128, 768]" = torch.ops.aten.view.default(add_19, [128, 768])
        permute_20: "f32[768, 768]" = torch.ops.aten.permute.default(arg40_1, [1, 0]);  arg40_1 = None
        addmm_12: "f32[128, 768]" = torch.ops.aten.addmm.default(arg41_1, view_32, permute_20);  arg41_1 = view_32 = permute_20 = None
        view_33: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_12, [2, 64, 768]);  addmm_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_34: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_33, [2, 64, 12, 64]);  view_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_21: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_34, [0, 2, 1, 3]);  view_34 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_35: "f32[128, 768]" = torch.ops.aten.view.default(add_19, [128, 768])
        permute_22: "f32[768, 768]" = torch.ops.aten.permute.default(arg42_1, [1, 0]);  arg42_1 = None
        addmm_13: "f32[128, 768]" = torch.ops.aten.addmm.default(arg43_1, view_35, permute_22);  arg43_1 = view_35 = permute_22 = None
        view_36: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_13, [2, 64, 768]);  addmm_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_37: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_36, [2, 64, 12, 64]);  view_36 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_23: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_37, [0, 2, 1, 3]);  view_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_38: "f32[128, 768]" = torch.ops.aten.view.default(add_19, [128, 768])
        permute_24: "f32[768, 768]" = torch.ops.aten.permute.default(arg44_1, [1, 0]);  arg44_1 = None
        addmm_14: "f32[128, 768]" = torch.ops.aten.addmm.default(arg45_1, view_38, permute_24);  arg45_1 = view_38 = permute_24 = None
        view_39: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_14, [2, 64, 768]);  addmm_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_40: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_39, [2, 64, 12, 64]);  view_39 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_25: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_40, [0, 2, 1, 3]);  view_40 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_4: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_2 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_21, permute_23, permute_25, expand_4, False);  permute_21 = permute_23 = permute_25 = expand_4 = None
        getitem_18: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_2[0];  _scaled_dot_product_efficient_attention_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_26: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_18, [0, 2, 1, 3]);  getitem_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_41: "f32[2, 64, 768]" = torch.ops.aten.view.default(permute_26, [2, 64, 768]);  permute_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_42: "f32[128, 768]" = torch.ops.aten.view.default(view_41, [128, 768]);  view_41 = None
        permute_27: "f32[768, 768]" = torch.ops.aten.permute.default(arg46_1, [1, 0]);  arg46_1 = None
        addmm_15: "f32[128, 768]" = torch.ops.aten.addmm.default(arg47_1, view_42, permute_27);  arg47_1 = view_42 = permute_27 = None
        view_43: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_15, [2, 64, 768]);  addmm_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_20: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_43, add_19);  view_43 = add_19 = None
        var_mean_5 = torch.ops.aten.var_mean.correction(add_20, [2], correction = 0, keepdim = True)
        getitem_22: "f32[2, 64, 1]" = var_mean_5[0]
        getitem_23: "f32[2, 64, 1]" = var_mean_5[1];  var_mean_5 = None
        add_21: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_22, 1e-05);  getitem_22 = None
        rsqrt_5: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_21);  add_21 = None
        sub_6: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_20, getitem_23);  add_20 = getitem_23 = None
        mul_17: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_6, rsqrt_5);  sub_6 = rsqrt_5 = None
        mul_18: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_17, arg48_1);  mul_17 = arg48_1 = None
        add_22: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_18, arg49_1);  mul_18 = arg49_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_44: "f32[128, 768]" = torch.ops.aten.view.default(add_22, [128, 768])
        permute_28: "f32[768, 3072]" = torch.ops.aten.permute.default(arg50_1, [1, 0]);  arg50_1 = None
        addmm_16: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg51_1, view_44, permute_28);  arg51_1 = view_44 = permute_28 = None
        view_45: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_16, [2, 64, 3072]);  addmm_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_19: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_45, 0.5)
        mul_20: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_45, 0.7071067811865476);  view_45 = None
        erf_2: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_20);  mul_20 = None
        add_23: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_2, 1);  erf_2 = None
        mul_21: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_19, add_23);  mul_19 = add_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_46: "f32[128, 3072]" = torch.ops.aten.view.default(mul_21, [128, 3072]);  mul_21 = None
        permute_29: "f32[3072, 768]" = torch.ops.aten.permute.default(arg52_1, [1, 0]);  arg52_1 = None
        addmm_17: "f32[128, 768]" = torch.ops.aten.addmm.default(arg53_1, view_46, permute_29);  arg53_1 = view_46 = permute_29 = None
        view_47: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_17, [2, 64, 768]);  addmm_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_24: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_47, add_22);  view_47 = add_22 = None
        var_mean_6 = torch.ops.aten.var_mean.correction(add_24, [2], correction = 0, keepdim = True)
        getitem_24: "f32[2, 64, 1]" = var_mean_6[0]
        getitem_25: "f32[2, 64, 1]" = var_mean_6[1];  var_mean_6 = None
        add_25: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_24, 1e-05);  getitem_24 = None
        rsqrt_6: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_25);  add_25 = None
        sub_7: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_24, getitem_25);  add_24 = getitem_25 = None
        mul_22: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_7, rsqrt_6);  sub_7 = rsqrt_6 = None
        mul_23: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_22, arg54_1);  mul_22 = arg54_1 = None
        add_26: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_23, arg55_1);  mul_23 = arg55_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_48: "f32[128, 768]" = torch.ops.aten.view.default(add_26, [128, 768])
        permute_30: "f32[768, 768]" = torch.ops.aten.permute.default(arg56_1, [1, 0]);  arg56_1 = None
        addmm_18: "f32[128, 768]" = torch.ops.aten.addmm.default(arg57_1, view_48, permute_30);  arg57_1 = view_48 = permute_30 = None
        view_49: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_18, [2, 64, 768]);  addmm_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_50: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_49, [2, 64, 12, 64]);  view_49 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_31: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_50, [0, 2, 1, 3]);  view_50 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_51: "f32[128, 768]" = torch.ops.aten.view.default(add_26, [128, 768])
        permute_32: "f32[768, 768]" = torch.ops.aten.permute.default(arg58_1, [1, 0]);  arg58_1 = None
        addmm_19: "f32[128, 768]" = torch.ops.aten.addmm.default(arg59_1, view_51, permute_32);  arg59_1 = view_51 = permute_32 = None
        view_52: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_19, [2, 64, 768]);  addmm_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_53: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_52, [2, 64, 12, 64]);  view_52 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_33: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_53, [0, 2, 1, 3]);  view_53 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_54: "f32[128, 768]" = torch.ops.aten.view.default(add_26, [128, 768])
        permute_34: "f32[768, 768]" = torch.ops.aten.permute.default(arg60_1, [1, 0]);  arg60_1 = None
        addmm_20: "f32[128, 768]" = torch.ops.aten.addmm.default(arg61_1, view_54, permute_34);  arg61_1 = view_54 = permute_34 = None
        view_55: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_20, [2, 64, 768]);  addmm_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_56: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_55, [2, 64, 12, 64]);  view_55 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_35: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_56, [0, 2, 1, 3]);  view_56 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_5: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_3 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_31, permute_33, permute_35, expand_5, False);  permute_31 = permute_33 = permute_35 = expand_5 = None
        getitem_26: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_3[0];  _scaled_dot_product_efficient_attention_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_36: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_26, [0, 2, 1, 3]);  getitem_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_57: "f32[2, 64, 768]" = torch.ops.aten.view.default(permute_36, [2, 64, 768]);  permute_36 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_58: "f32[128, 768]" = torch.ops.aten.view.default(view_57, [128, 768]);  view_57 = None
        permute_37: "f32[768, 768]" = torch.ops.aten.permute.default(arg62_1, [1, 0]);  arg62_1 = None
        addmm_21: "f32[128, 768]" = torch.ops.aten.addmm.default(arg63_1, view_58, permute_37);  arg63_1 = view_58 = permute_37 = None
        view_59: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_21, [2, 64, 768]);  addmm_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_27: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_59, add_26);  view_59 = add_26 = None
        var_mean_7 = torch.ops.aten.var_mean.correction(add_27, [2], correction = 0, keepdim = True)
        getitem_30: "f32[2, 64, 1]" = var_mean_7[0]
        getitem_31: "f32[2, 64, 1]" = var_mean_7[1];  var_mean_7 = None
        add_28: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_30, 1e-05);  getitem_30 = None
        rsqrt_7: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_28);  add_28 = None
        sub_8: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_27, getitem_31);  add_27 = getitem_31 = None
        mul_24: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_8, rsqrt_7);  sub_8 = rsqrt_7 = None
        mul_25: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_24, arg64_1);  mul_24 = arg64_1 = None
        add_29: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_25, arg65_1);  mul_25 = arg65_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_60: "f32[128, 768]" = torch.ops.aten.view.default(add_29, [128, 768])
        permute_38: "f32[768, 3072]" = torch.ops.aten.permute.default(arg66_1, [1, 0]);  arg66_1 = None
        addmm_22: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg67_1, view_60, permute_38);  arg67_1 = view_60 = permute_38 = None
        view_61: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_22, [2, 64, 3072]);  addmm_22 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_26: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_61, 0.5)
        mul_27: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_61, 0.7071067811865476);  view_61 = None
        erf_3: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_27);  mul_27 = None
        add_30: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_3, 1);  erf_3 = None
        mul_28: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_26, add_30);  mul_26 = add_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_62: "f32[128, 3072]" = torch.ops.aten.view.default(mul_28, [128, 3072]);  mul_28 = None
        permute_39: "f32[3072, 768]" = torch.ops.aten.permute.default(arg68_1, [1, 0]);  arg68_1 = None
        addmm_23: "f32[128, 768]" = torch.ops.aten.addmm.default(arg69_1, view_62, permute_39);  arg69_1 = view_62 = permute_39 = None
        view_63: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_23, [2, 64, 768]);  addmm_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_31: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_63, add_29);  view_63 = add_29 = None
        var_mean_8 = torch.ops.aten.var_mean.correction(add_31, [2], correction = 0, keepdim = True)
        getitem_32: "f32[2, 64, 1]" = var_mean_8[0]
        getitem_33: "f32[2, 64, 1]" = var_mean_8[1];  var_mean_8 = None
        add_32: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_32, 1e-05);  getitem_32 = None
        rsqrt_8: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_32);  add_32 = None
        sub_9: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_31, getitem_33);  add_31 = getitem_33 = None
        mul_29: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_9, rsqrt_8);  sub_9 = rsqrt_8 = None
        mul_30: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_29, arg70_1);  mul_29 = arg70_1 = None
        add_33: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_30, arg71_1);  mul_30 = arg71_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_64: "f32[128, 768]" = torch.ops.aten.view.default(add_33, [128, 768])
        permute_40: "f32[768, 768]" = torch.ops.aten.permute.default(arg72_1, [1, 0]);  arg72_1 = None
        addmm_24: "f32[128, 768]" = torch.ops.aten.addmm.default(arg73_1, view_64, permute_40);  arg73_1 = view_64 = permute_40 = None
        view_65: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_24, [2, 64, 768]);  addmm_24 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_66: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_65, [2, 64, 12, 64]);  view_65 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_41: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_66, [0, 2, 1, 3]);  view_66 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_67: "f32[128, 768]" = torch.ops.aten.view.default(add_33, [128, 768])
        permute_42: "f32[768, 768]" = torch.ops.aten.permute.default(arg74_1, [1, 0]);  arg74_1 = None
        addmm_25: "f32[128, 768]" = torch.ops.aten.addmm.default(arg75_1, view_67, permute_42);  arg75_1 = view_67 = permute_42 = None
        view_68: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_25, [2, 64, 768]);  addmm_25 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_69: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_68, [2, 64, 12, 64]);  view_68 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_43: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_69, [0, 2, 1, 3]);  view_69 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_70: "f32[128, 768]" = torch.ops.aten.view.default(add_33, [128, 768])
        permute_44: "f32[768, 768]" = torch.ops.aten.permute.default(arg76_1, [1, 0]);  arg76_1 = None
        addmm_26: "f32[128, 768]" = torch.ops.aten.addmm.default(arg77_1, view_70, permute_44);  arg77_1 = view_70 = permute_44 = None
        view_71: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_26, [2, 64, 768]);  addmm_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_72: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_71, [2, 64, 12, 64]);  view_71 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_45: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_72, [0, 2, 1, 3]);  view_72 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_6: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_4 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_41, permute_43, permute_45, expand_6, False);  permute_41 = permute_43 = permute_45 = expand_6 = None
        getitem_34: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_4[0];  _scaled_dot_product_efficient_attention_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_46: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_34, [0, 2, 1, 3]);  getitem_34 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_73: "f32[2, 64, 768]" = torch.ops.aten.view.default(permute_46, [2, 64, 768]);  permute_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_74: "f32[128, 768]" = torch.ops.aten.view.default(view_73, [128, 768]);  view_73 = None
        permute_47: "f32[768, 768]" = torch.ops.aten.permute.default(arg78_1, [1, 0]);  arg78_1 = None
        addmm_27: "f32[128, 768]" = torch.ops.aten.addmm.default(arg79_1, view_74, permute_47);  arg79_1 = view_74 = permute_47 = None
        view_75: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_27, [2, 64, 768]);  addmm_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_34: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_75, add_33);  view_75 = add_33 = None
        var_mean_9 = torch.ops.aten.var_mean.correction(add_34, [2], correction = 0, keepdim = True)
        getitem_38: "f32[2, 64, 1]" = var_mean_9[0]
        getitem_39: "f32[2, 64, 1]" = var_mean_9[1];  var_mean_9 = None
        add_35: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_38, 1e-05);  getitem_38 = None
        rsqrt_9: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_35);  add_35 = None
        sub_10: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_34, getitem_39);  add_34 = getitem_39 = None
        mul_31: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_10, rsqrt_9);  sub_10 = rsqrt_9 = None
        mul_32: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_31, arg80_1);  mul_31 = arg80_1 = None
        add_36: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_32, arg81_1);  mul_32 = arg81_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_76: "f32[128, 768]" = torch.ops.aten.view.default(add_36, [128, 768])
        permute_48: "f32[768, 3072]" = torch.ops.aten.permute.default(arg82_1, [1, 0]);  arg82_1 = None
        addmm_28: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg83_1, view_76, permute_48);  arg83_1 = view_76 = permute_48 = None
        view_77: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_28, [2, 64, 3072]);  addmm_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_33: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_77, 0.5)
        mul_34: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_77, 0.7071067811865476);  view_77 = None
        erf_4: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_34);  mul_34 = None
        add_37: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_4, 1);  erf_4 = None
        mul_35: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_33, add_37);  mul_33 = add_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_78: "f32[128, 3072]" = torch.ops.aten.view.default(mul_35, [128, 3072]);  mul_35 = None
        permute_49: "f32[3072, 768]" = torch.ops.aten.permute.default(arg84_1, [1, 0]);  arg84_1 = None
        addmm_29: "f32[128, 768]" = torch.ops.aten.addmm.default(arg85_1, view_78, permute_49);  arg85_1 = view_78 = permute_49 = None
        view_79: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_29, [2, 64, 768]);  addmm_29 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_38: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_79, add_36);  view_79 = add_36 = None
        var_mean_10 = torch.ops.aten.var_mean.correction(add_38, [2], correction = 0, keepdim = True)
        getitem_40: "f32[2, 64, 1]" = var_mean_10[0]
        getitem_41: "f32[2, 64, 1]" = var_mean_10[1];  var_mean_10 = None
        add_39: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_40, 1e-05);  getitem_40 = None
        rsqrt_10: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_39);  add_39 = None
        sub_11: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_38, getitem_41);  add_38 = getitem_41 = None
        mul_36: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_11, rsqrt_10);  sub_11 = rsqrt_10 = None
        mul_37: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_36, arg86_1);  mul_36 = arg86_1 = None
        add_40: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_37, arg87_1);  mul_37 = arg87_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_80: "f32[128, 768]" = torch.ops.aten.view.default(add_40, [128, 768])
        permute_50: "f32[768, 768]" = torch.ops.aten.permute.default(arg88_1, [1, 0]);  arg88_1 = None
        addmm_30: "f32[128, 768]" = torch.ops.aten.addmm.default(arg89_1, view_80, permute_50);  arg89_1 = view_80 = permute_50 = None
        view_81: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_30, [2, 64, 768]);  addmm_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_82: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_81, [2, 64, 12, 64]);  view_81 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_51: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_82, [0, 2, 1, 3]);  view_82 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_83: "f32[128, 768]" = torch.ops.aten.view.default(add_40, [128, 768])
        permute_52: "f32[768, 768]" = torch.ops.aten.permute.default(arg90_1, [1, 0]);  arg90_1 = None
        addmm_31: "f32[128, 768]" = torch.ops.aten.addmm.default(arg91_1, view_83, permute_52);  arg91_1 = view_83 = permute_52 = None
        view_84: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_31, [2, 64, 768]);  addmm_31 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_85: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_84, [2, 64, 12, 64]);  view_84 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_53: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_85, [0, 2, 1, 3]);  view_85 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_86: "f32[128, 768]" = torch.ops.aten.view.default(add_40, [128, 768])
        permute_54: "f32[768, 768]" = torch.ops.aten.permute.default(arg92_1, [1, 0]);  arg92_1 = None
        addmm_32: "f32[128, 768]" = torch.ops.aten.addmm.default(arg93_1, view_86, permute_54);  arg93_1 = view_86 = permute_54 = None
        view_87: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_32, [2, 64, 768]);  addmm_32 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_88: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_87, [2, 64, 12, 64]);  view_87 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_55: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_88, [0, 2, 1, 3]);  view_88 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_7: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_5 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_51, permute_53, permute_55, expand_7, False);  permute_51 = permute_53 = permute_55 = expand_7 = None
        getitem_42: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_5[0];  _scaled_dot_product_efficient_attention_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_56: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_42, [0, 2, 1, 3]);  getitem_42 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_89: "f32[2, 64, 768]" = torch.ops.aten.view.default(permute_56, [2, 64, 768]);  permute_56 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_90: "f32[128, 768]" = torch.ops.aten.view.default(view_89, [128, 768]);  view_89 = None
        permute_57: "f32[768, 768]" = torch.ops.aten.permute.default(arg94_1, [1, 0]);  arg94_1 = None
        addmm_33: "f32[128, 768]" = torch.ops.aten.addmm.default(arg95_1, view_90, permute_57);  arg95_1 = view_90 = permute_57 = None
        view_91: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_33, [2, 64, 768]);  addmm_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_41: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_91, add_40);  view_91 = add_40 = None
        var_mean_11 = torch.ops.aten.var_mean.correction(add_41, [2], correction = 0, keepdim = True)
        getitem_46: "f32[2, 64, 1]" = var_mean_11[0]
        getitem_47: "f32[2, 64, 1]" = var_mean_11[1];  var_mean_11 = None
        add_42: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_46, 1e-05);  getitem_46 = None
        rsqrt_11: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_42);  add_42 = None
        sub_12: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_41, getitem_47);  add_41 = getitem_47 = None
        mul_38: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_12, rsqrt_11);  sub_12 = rsqrt_11 = None
        mul_39: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_38, arg96_1);  mul_38 = arg96_1 = None
        add_43: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_39, arg97_1);  mul_39 = arg97_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_92: "f32[128, 768]" = torch.ops.aten.view.default(add_43, [128, 768])
        permute_58: "f32[768, 3072]" = torch.ops.aten.permute.default(arg98_1, [1, 0]);  arg98_1 = None
        addmm_34: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg99_1, view_92, permute_58);  arg99_1 = view_92 = permute_58 = None
        view_93: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_34, [2, 64, 3072]);  addmm_34 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_40: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_93, 0.5)
        mul_41: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_93, 0.7071067811865476);  view_93 = None
        erf_5: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_41);  mul_41 = None
        add_44: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_5, 1);  erf_5 = None
        mul_42: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_40, add_44);  mul_40 = add_44 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_94: "f32[128, 3072]" = torch.ops.aten.view.default(mul_42, [128, 3072]);  mul_42 = None
        permute_59: "f32[3072, 768]" = torch.ops.aten.permute.default(arg100_1, [1, 0]);  arg100_1 = None
        addmm_35: "f32[128, 768]" = torch.ops.aten.addmm.default(arg101_1, view_94, permute_59);  arg101_1 = view_94 = permute_59 = None
        view_95: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_35, [2, 64, 768]);  addmm_35 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_45: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_95, add_43);  view_95 = add_43 = None
        var_mean_12 = torch.ops.aten.var_mean.correction(add_45, [2], correction = 0, keepdim = True)
        getitem_48: "f32[2, 64, 1]" = var_mean_12[0]
        getitem_49: "f32[2, 64, 1]" = var_mean_12[1];  var_mean_12 = None
        add_46: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_48, 1e-05);  getitem_48 = None
        rsqrt_12: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_46);  add_46 = None
        sub_13: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_45, getitem_49);  add_45 = getitem_49 = None
        mul_43: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_13, rsqrt_12);  sub_13 = rsqrt_12 = None
        mul_44: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_43, arg102_1);  mul_43 = arg102_1 = None
        add_47: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_44, arg103_1);  mul_44 = arg103_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_96: "f32[128, 768]" = torch.ops.aten.view.default(add_47, [128, 768])
        permute_60: "f32[768, 768]" = torch.ops.aten.permute.default(arg104_1, [1, 0]);  arg104_1 = None
        addmm_36: "f32[128, 768]" = torch.ops.aten.addmm.default(arg105_1, view_96, permute_60);  arg105_1 = view_96 = permute_60 = None
        view_97: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_36, [2, 64, 768]);  addmm_36 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_98: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_97, [2, 64, 12, 64]);  view_97 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_61: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_98, [0, 2, 1, 3]);  view_98 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_99: "f32[128, 768]" = torch.ops.aten.view.default(add_47, [128, 768])
        permute_62: "f32[768, 768]" = torch.ops.aten.permute.default(arg106_1, [1, 0]);  arg106_1 = None
        addmm_37: "f32[128, 768]" = torch.ops.aten.addmm.default(arg107_1, view_99, permute_62);  arg107_1 = view_99 = permute_62 = None
        view_100: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_37, [2, 64, 768]);  addmm_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_101: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_100, [2, 64, 12, 64]);  view_100 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_63: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_101, [0, 2, 1, 3]);  view_101 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_102: "f32[128, 768]" = torch.ops.aten.view.default(add_47, [128, 768])
        permute_64: "f32[768, 768]" = torch.ops.aten.permute.default(arg108_1, [1, 0]);  arg108_1 = None
        addmm_38: "f32[128, 768]" = torch.ops.aten.addmm.default(arg109_1, view_102, permute_64);  arg109_1 = view_102 = permute_64 = None
        view_103: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_38, [2, 64, 768]);  addmm_38 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_104: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_103, [2, 64, 12, 64]);  view_103 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_65: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_104, [0, 2, 1, 3]);  view_104 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_8: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_6 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_61, permute_63, permute_65, expand_8, False);  permute_61 = permute_63 = permute_65 = expand_8 = None
        getitem_50: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_6[0];  _scaled_dot_product_efficient_attention_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_66: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_50, [0, 2, 1, 3]);  getitem_50 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_105: "f32[2, 64, 768]" = torch.ops.aten.view.default(permute_66, [2, 64, 768]);  permute_66 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_106: "f32[128, 768]" = torch.ops.aten.view.default(view_105, [128, 768]);  view_105 = None
        permute_67: "f32[768, 768]" = torch.ops.aten.permute.default(arg110_1, [1, 0]);  arg110_1 = None
        addmm_39: "f32[128, 768]" = torch.ops.aten.addmm.default(arg111_1, view_106, permute_67);  arg111_1 = view_106 = permute_67 = None
        view_107: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_39, [2, 64, 768]);  addmm_39 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_48: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_107, add_47);  view_107 = add_47 = None
        var_mean_13 = torch.ops.aten.var_mean.correction(add_48, [2], correction = 0, keepdim = True)
        getitem_54: "f32[2, 64, 1]" = var_mean_13[0]
        getitem_55: "f32[2, 64, 1]" = var_mean_13[1];  var_mean_13 = None
        add_49: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_54, 1e-05);  getitem_54 = None
        rsqrt_13: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_49);  add_49 = None
        sub_14: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_48, getitem_55);  add_48 = getitem_55 = None
        mul_45: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_14, rsqrt_13);  sub_14 = rsqrt_13 = None
        mul_46: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_45, arg112_1);  mul_45 = arg112_1 = None
        add_50: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_46, arg113_1);  mul_46 = arg113_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_108: "f32[128, 768]" = torch.ops.aten.view.default(add_50, [128, 768])
        permute_68: "f32[768, 3072]" = torch.ops.aten.permute.default(arg114_1, [1, 0]);  arg114_1 = None
        addmm_40: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg115_1, view_108, permute_68);  arg115_1 = view_108 = permute_68 = None
        view_109: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_40, [2, 64, 3072]);  addmm_40 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_47: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_109, 0.5)
        mul_48: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_109, 0.7071067811865476);  view_109 = None
        erf_6: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_48);  mul_48 = None
        add_51: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_6, 1);  erf_6 = None
        mul_49: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_47, add_51);  mul_47 = add_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_110: "f32[128, 3072]" = torch.ops.aten.view.default(mul_49, [128, 3072]);  mul_49 = None
        permute_69: "f32[3072, 768]" = torch.ops.aten.permute.default(arg116_1, [1, 0]);  arg116_1 = None
        addmm_41: "f32[128, 768]" = torch.ops.aten.addmm.default(arg117_1, view_110, permute_69);  arg117_1 = view_110 = permute_69 = None
        view_111: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_41, [2, 64, 768]);  addmm_41 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_52: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_111, add_50);  view_111 = add_50 = None
        var_mean_14 = torch.ops.aten.var_mean.correction(add_52, [2], correction = 0, keepdim = True)
        getitem_56: "f32[2, 64, 1]" = var_mean_14[0]
        getitem_57: "f32[2, 64, 1]" = var_mean_14[1];  var_mean_14 = None
        add_53: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_56, 1e-05);  getitem_56 = None
        rsqrt_14: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_53);  add_53 = None
        sub_15: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_52, getitem_57);  add_52 = getitem_57 = None
        mul_50: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_15, rsqrt_14);  sub_15 = rsqrt_14 = None
        mul_51: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_50, arg118_1);  mul_50 = arg118_1 = None
        add_54: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_51, arg119_1);  mul_51 = arg119_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_112: "f32[128, 768]" = torch.ops.aten.view.default(add_54, [128, 768])
        permute_70: "f32[768, 768]" = torch.ops.aten.permute.default(arg120_1, [1, 0]);  arg120_1 = None
        addmm_42: "f32[128, 768]" = torch.ops.aten.addmm.default(arg121_1, view_112, permute_70);  arg121_1 = view_112 = permute_70 = None
        view_113: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_42, [2, 64, 768]);  addmm_42 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_114: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_113, [2, 64, 12, 64]);  view_113 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_71: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_114, [0, 2, 1, 3]);  view_114 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_115: "f32[128, 768]" = torch.ops.aten.view.default(add_54, [128, 768])
        permute_72: "f32[768, 768]" = torch.ops.aten.permute.default(arg122_1, [1, 0]);  arg122_1 = None
        addmm_43: "f32[128, 768]" = torch.ops.aten.addmm.default(arg123_1, view_115, permute_72);  arg123_1 = view_115 = permute_72 = None
        view_116: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_43, [2, 64, 768]);  addmm_43 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_117: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_116, [2, 64, 12, 64]);  view_116 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_73: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_117, [0, 2, 1, 3]);  view_117 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_118: "f32[128, 768]" = torch.ops.aten.view.default(add_54, [128, 768])
        permute_74: "f32[768, 768]" = torch.ops.aten.permute.default(arg124_1, [1, 0]);  arg124_1 = None
        addmm_44: "f32[128, 768]" = torch.ops.aten.addmm.default(arg125_1, view_118, permute_74);  arg125_1 = view_118 = permute_74 = None
        view_119: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_44, [2, 64, 768]);  addmm_44 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_120: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_119, [2, 64, 12, 64]);  view_119 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_75: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_120, [0, 2, 1, 3]);  view_120 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_9: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_7 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_71, permute_73, permute_75, expand_9, False);  permute_71 = permute_73 = permute_75 = expand_9 = None
        getitem_58: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_7[0];  _scaled_dot_product_efficient_attention_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_76: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_58, [0, 2, 1, 3]);  getitem_58 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_121: "f32[2, 64, 768]" = torch.ops.aten.view.default(permute_76, [2, 64, 768]);  permute_76 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_122: "f32[128, 768]" = torch.ops.aten.view.default(view_121, [128, 768]);  view_121 = None
        permute_77: "f32[768, 768]" = torch.ops.aten.permute.default(arg126_1, [1, 0]);  arg126_1 = None
        addmm_45: "f32[128, 768]" = torch.ops.aten.addmm.default(arg127_1, view_122, permute_77);  arg127_1 = view_122 = permute_77 = None
        view_123: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_45, [2, 64, 768]);  addmm_45 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_55: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_123, add_54);  view_123 = add_54 = None
        var_mean_15 = torch.ops.aten.var_mean.correction(add_55, [2], correction = 0, keepdim = True)
        getitem_62: "f32[2, 64, 1]" = var_mean_15[0]
        getitem_63: "f32[2, 64, 1]" = var_mean_15[1];  var_mean_15 = None
        add_56: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_62, 1e-05);  getitem_62 = None
        rsqrt_15: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_56);  add_56 = None
        sub_16: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_55, getitem_63);  add_55 = getitem_63 = None
        mul_52: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_16, rsqrt_15);  sub_16 = rsqrt_15 = None
        mul_53: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_52, arg128_1);  mul_52 = arg128_1 = None
        add_57: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_53, arg129_1);  mul_53 = arg129_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_124: "f32[128, 768]" = torch.ops.aten.view.default(add_57, [128, 768])
        permute_78: "f32[768, 3072]" = torch.ops.aten.permute.default(arg130_1, [1, 0]);  arg130_1 = None
        addmm_46: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg131_1, view_124, permute_78);  arg131_1 = view_124 = permute_78 = None
        view_125: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_46, [2, 64, 3072]);  addmm_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_54: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_125, 0.5)
        mul_55: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_125, 0.7071067811865476);  view_125 = None
        erf_7: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_55);  mul_55 = None
        add_58: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_7, 1);  erf_7 = None
        mul_56: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_54, add_58);  mul_54 = add_58 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_126: "f32[128, 3072]" = torch.ops.aten.view.default(mul_56, [128, 3072]);  mul_56 = None
        permute_79: "f32[3072, 768]" = torch.ops.aten.permute.default(arg132_1, [1, 0]);  arg132_1 = None
        addmm_47: "f32[128, 768]" = torch.ops.aten.addmm.default(arg133_1, view_126, permute_79);  arg133_1 = view_126 = permute_79 = None
        view_127: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_47, [2, 64, 768]);  addmm_47 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_59: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_127, add_57);  view_127 = add_57 = None
        var_mean_16 = torch.ops.aten.var_mean.correction(add_59, [2], correction = 0, keepdim = True)
        getitem_64: "f32[2, 64, 1]" = var_mean_16[0]
        getitem_65: "f32[2, 64, 1]" = var_mean_16[1];  var_mean_16 = None
        add_60: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_64, 1e-05);  getitem_64 = None
        rsqrt_16: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_60);  add_60 = None
        sub_17: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_59, getitem_65);  add_59 = getitem_65 = None
        mul_57: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_17, rsqrt_16);  sub_17 = rsqrt_16 = None
        mul_58: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_57, arg134_1);  mul_57 = arg134_1 = None
        add_61: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_58, arg135_1);  mul_58 = arg135_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_128: "f32[128, 768]" = torch.ops.aten.view.default(add_61, [128, 768])
        permute_80: "f32[768, 768]" = torch.ops.aten.permute.default(arg136_1, [1, 0]);  arg136_1 = None
        addmm_48: "f32[128, 768]" = torch.ops.aten.addmm.default(arg137_1, view_128, permute_80);  arg137_1 = view_128 = permute_80 = None
        view_129: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_48, [2, 64, 768]);  addmm_48 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_130: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_129, [2, 64, 12, 64]);  view_129 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_81: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_130, [0, 2, 1, 3]);  view_130 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_131: "f32[128, 768]" = torch.ops.aten.view.default(add_61, [128, 768])
        permute_82: "f32[768, 768]" = torch.ops.aten.permute.default(arg138_1, [1, 0]);  arg138_1 = None
        addmm_49: "f32[128, 768]" = torch.ops.aten.addmm.default(arg139_1, view_131, permute_82);  arg139_1 = view_131 = permute_82 = None
        view_132: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_49, [2, 64, 768]);  addmm_49 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_133: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_132, [2, 64, 12, 64]);  view_132 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_83: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_133, [0, 2, 1, 3]);  view_133 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_134: "f32[128, 768]" = torch.ops.aten.view.default(add_61, [128, 768])
        permute_84: "f32[768, 768]" = torch.ops.aten.permute.default(arg140_1, [1, 0]);  arg140_1 = None
        addmm_50: "f32[128, 768]" = torch.ops.aten.addmm.default(arg141_1, view_134, permute_84);  arg141_1 = view_134 = permute_84 = None
        view_135: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_50, [2, 64, 768]);  addmm_50 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_136: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_135, [2, 64, 12, 64]);  view_135 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_85: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_136, [0, 2, 1, 3]);  view_136 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_10: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_8 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_81, permute_83, permute_85, expand_10, False);  permute_81 = permute_83 = permute_85 = expand_10 = None
        getitem_66: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_8[0];  _scaled_dot_product_efficient_attention_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_86: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_66, [0, 2, 1, 3]);  getitem_66 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_137: "f32[2, 64, 768]" = torch.ops.aten.view.default(permute_86, [2, 64, 768]);  permute_86 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_138: "f32[128, 768]" = torch.ops.aten.view.default(view_137, [128, 768]);  view_137 = None
        permute_87: "f32[768, 768]" = torch.ops.aten.permute.default(arg142_1, [1, 0]);  arg142_1 = None
        addmm_51: "f32[128, 768]" = torch.ops.aten.addmm.default(arg143_1, view_138, permute_87);  arg143_1 = view_138 = permute_87 = None
        view_139: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_51, [2, 64, 768]);  addmm_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_62: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_139, add_61);  view_139 = add_61 = None
        var_mean_17 = torch.ops.aten.var_mean.correction(add_62, [2], correction = 0, keepdim = True)
        getitem_70: "f32[2, 64, 1]" = var_mean_17[0]
        getitem_71: "f32[2, 64, 1]" = var_mean_17[1];  var_mean_17 = None
        add_63: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_70, 1e-05);  getitem_70 = None
        rsqrt_17: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_63);  add_63 = None
        sub_18: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_62, getitem_71);  add_62 = getitem_71 = None
        mul_59: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_18, rsqrt_17);  sub_18 = rsqrt_17 = None
        mul_60: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_59, arg144_1);  mul_59 = arg144_1 = None
        add_64: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_60, arg145_1);  mul_60 = arg145_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_140: "f32[128, 768]" = torch.ops.aten.view.default(add_64, [128, 768])
        permute_88: "f32[768, 3072]" = torch.ops.aten.permute.default(arg146_1, [1, 0]);  arg146_1 = None
        addmm_52: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg147_1, view_140, permute_88);  arg147_1 = view_140 = permute_88 = None
        view_141: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_52, [2, 64, 3072]);  addmm_52 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_61: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_141, 0.5)
        mul_62: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_141, 0.7071067811865476);  view_141 = None
        erf_8: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_62);  mul_62 = None
        add_65: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_8, 1);  erf_8 = None
        mul_63: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_61, add_65);  mul_61 = add_65 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_142: "f32[128, 3072]" = torch.ops.aten.view.default(mul_63, [128, 3072]);  mul_63 = None
        permute_89: "f32[3072, 768]" = torch.ops.aten.permute.default(arg148_1, [1, 0]);  arg148_1 = None
        addmm_53: "f32[128, 768]" = torch.ops.aten.addmm.default(arg149_1, view_142, permute_89);  arg149_1 = view_142 = permute_89 = None
        view_143: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_53, [2, 64, 768]);  addmm_53 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_66: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_143, add_64);  view_143 = add_64 = None
        var_mean_18 = torch.ops.aten.var_mean.correction(add_66, [2], correction = 0, keepdim = True)
        getitem_72: "f32[2, 64, 1]" = var_mean_18[0]
        getitem_73: "f32[2, 64, 1]" = var_mean_18[1];  var_mean_18 = None
        add_67: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_72, 1e-05);  getitem_72 = None
        rsqrt_18: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_67);  add_67 = None
        sub_19: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_66, getitem_73);  add_66 = getitem_73 = None
        mul_64: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_19, rsqrt_18);  sub_19 = rsqrt_18 = None
        mul_65: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_64, arg150_1);  mul_64 = arg150_1 = None
        add_68: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_65, arg151_1);  mul_65 = arg151_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_144: "f32[128, 768]" = torch.ops.aten.view.default(add_68, [128, 768])
        permute_90: "f32[768, 768]" = torch.ops.aten.permute.default(arg152_1, [1, 0]);  arg152_1 = None
        addmm_54: "f32[128, 768]" = torch.ops.aten.addmm.default(arg153_1, view_144, permute_90);  arg153_1 = view_144 = permute_90 = None
        view_145: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_54, [2, 64, 768]);  addmm_54 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_146: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_145, [2, 64, 12, 64]);  view_145 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_91: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_146, [0, 2, 1, 3]);  view_146 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_147: "f32[128, 768]" = torch.ops.aten.view.default(add_68, [128, 768])
        permute_92: "f32[768, 768]" = torch.ops.aten.permute.default(arg154_1, [1, 0]);  arg154_1 = None
        addmm_55: "f32[128, 768]" = torch.ops.aten.addmm.default(arg155_1, view_147, permute_92);  arg155_1 = view_147 = permute_92 = None
        view_148: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_55, [2, 64, 768]);  addmm_55 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_149: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_148, [2, 64, 12, 64]);  view_148 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_93: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_149, [0, 2, 1, 3]);  view_149 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_150: "f32[128, 768]" = torch.ops.aten.view.default(add_68, [128, 768])
        permute_94: "f32[768, 768]" = torch.ops.aten.permute.default(arg156_1, [1, 0]);  arg156_1 = None
        addmm_56: "f32[128, 768]" = torch.ops.aten.addmm.default(arg157_1, view_150, permute_94);  arg157_1 = view_150 = permute_94 = None
        view_151: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_56, [2, 64, 768]);  addmm_56 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_152: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_151, [2, 64, 12, 64]);  view_151 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_95: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_152, [0, 2, 1, 3]);  view_152 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_11: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_9 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_91, permute_93, permute_95, expand_11, False);  permute_91 = permute_93 = permute_95 = expand_11 = None
        getitem_74: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_9[0];  _scaled_dot_product_efficient_attention_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_96: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_74, [0, 2, 1, 3]);  getitem_74 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_153: "f32[2, 64, 768]" = torch.ops.aten.view.default(permute_96, [2, 64, 768]);  permute_96 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_154: "f32[128, 768]" = torch.ops.aten.view.default(view_153, [128, 768]);  view_153 = None
        permute_97: "f32[768, 768]" = torch.ops.aten.permute.default(arg158_1, [1, 0]);  arg158_1 = None
        addmm_57: "f32[128, 768]" = torch.ops.aten.addmm.default(arg159_1, view_154, permute_97);  arg159_1 = view_154 = permute_97 = None
        view_155: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_57, [2, 64, 768]);  addmm_57 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_69: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_155, add_68);  view_155 = add_68 = None
        var_mean_19 = torch.ops.aten.var_mean.correction(add_69, [2], correction = 0, keepdim = True)
        getitem_78: "f32[2, 64, 1]" = var_mean_19[0]
        getitem_79: "f32[2, 64, 1]" = var_mean_19[1];  var_mean_19 = None
        add_70: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_78, 1e-05);  getitem_78 = None
        rsqrt_19: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_70);  add_70 = None
        sub_20: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_69, getitem_79);  add_69 = getitem_79 = None
        mul_66: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_20, rsqrt_19);  sub_20 = rsqrt_19 = None
        mul_67: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_66, arg160_1);  mul_66 = arg160_1 = None
        add_71: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_67, arg161_1);  mul_67 = arg161_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_156: "f32[128, 768]" = torch.ops.aten.view.default(add_71, [128, 768])
        permute_98: "f32[768, 3072]" = torch.ops.aten.permute.default(arg162_1, [1, 0]);  arg162_1 = None
        addmm_58: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg163_1, view_156, permute_98);  arg163_1 = view_156 = permute_98 = None
        view_157: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_58, [2, 64, 3072]);  addmm_58 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_68: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_157, 0.5)
        mul_69: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_157, 0.7071067811865476);  view_157 = None
        erf_9: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_69);  mul_69 = None
        add_72: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_9, 1);  erf_9 = None
        mul_70: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_68, add_72);  mul_68 = add_72 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_158: "f32[128, 3072]" = torch.ops.aten.view.default(mul_70, [128, 3072]);  mul_70 = None
        permute_99: "f32[3072, 768]" = torch.ops.aten.permute.default(arg164_1, [1, 0]);  arg164_1 = None
        addmm_59: "f32[128, 768]" = torch.ops.aten.addmm.default(arg165_1, view_158, permute_99);  arg165_1 = view_158 = permute_99 = None
        view_159: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_59, [2, 64, 768]);  addmm_59 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_73: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_159, add_71);  view_159 = add_71 = None
        var_mean_20 = torch.ops.aten.var_mean.correction(add_73, [2], correction = 0, keepdim = True)
        getitem_80: "f32[2, 64, 1]" = var_mean_20[0]
        getitem_81: "f32[2, 64, 1]" = var_mean_20[1];  var_mean_20 = None
        add_74: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_80, 1e-05);  getitem_80 = None
        rsqrt_20: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_74);  add_74 = None
        sub_21: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_73, getitem_81);  add_73 = getitem_81 = None
        mul_71: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_21, rsqrt_20);  sub_21 = rsqrt_20 = None
        mul_72: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_71, arg166_1);  mul_71 = arg166_1 = None
        add_75: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_72, arg167_1);  mul_72 = arg167_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_160: "f32[128, 768]" = torch.ops.aten.view.default(add_75, [128, 768])
        permute_100: "f32[768, 768]" = torch.ops.aten.permute.default(arg168_1, [1, 0]);  arg168_1 = None
        addmm_60: "f32[128, 768]" = torch.ops.aten.addmm.default(arg169_1, view_160, permute_100);  arg169_1 = view_160 = permute_100 = None
        view_161: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_60, [2, 64, 768]);  addmm_60 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_162: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_161, [2, 64, 12, 64]);  view_161 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_101: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_162, [0, 2, 1, 3]);  view_162 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_163: "f32[128, 768]" = torch.ops.aten.view.default(add_75, [128, 768])
        permute_102: "f32[768, 768]" = torch.ops.aten.permute.default(arg170_1, [1, 0]);  arg170_1 = None
        addmm_61: "f32[128, 768]" = torch.ops.aten.addmm.default(arg171_1, view_163, permute_102);  arg171_1 = view_163 = permute_102 = None
        view_164: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_61, [2, 64, 768]);  addmm_61 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_165: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_164, [2, 64, 12, 64]);  view_164 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_103: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_165, [0, 2, 1, 3]);  view_165 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_166: "f32[128, 768]" = torch.ops.aten.view.default(add_75, [128, 768])
        permute_104: "f32[768, 768]" = torch.ops.aten.permute.default(arg172_1, [1, 0]);  arg172_1 = None
        addmm_62: "f32[128, 768]" = torch.ops.aten.addmm.default(arg173_1, view_166, permute_104);  arg173_1 = view_166 = permute_104 = None
        view_167: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_62, [2, 64, 768]);  addmm_62 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_168: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_167, [2, 64, 12, 64]);  view_167 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_105: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_168, [0, 2, 1, 3]);  view_168 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_12: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_10 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_101, permute_103, permute_105, expand_12, False);  permute_101 = permute_103 = permute_105 = expand_12 = None
        getitem_82: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_10[0];  _scaled_dot_product_efficient_attention_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_106: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_82, [0, 2, 1, 3]);  getitem_82 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_169: "f32[2, 64, 768]" = torch.ops.aten.view.default(permute_106, [2, 64, 768]);  permute_106 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_170: "f32[128, 768]" = torch.ops.aten.view.default(view_169, [128, 768]);  view_169 = None
        permute_107: "f32[768, 768]" = torch.ops.aten.permute.default(arg174_1, [1, 0]);  arg174_1 = None
        addmm_63: "f32[128, 768]" = torch.ops.aten.addmm.default(arg175_1, view_170, permute_107);  arg175_1 = view_170 = permute_107 = None
        view_171: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_63, [2, 64, 768]);  addmm_63 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_76: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_171, add_75);  view_171 = add_75 = None
        var_mean_21 = torch.ops.aten.var_mean.correction(add_76, [2], correction = 0, keepdim = True)
        getitem_86: "f32[2, 64, 1]" = var_mean_21[0]
        getitem_87: "f32[2, 64, 1]" = var_mean_21[1];  var_mean_21 = None
        add_77: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_86, 1e-05);  getitem_86 = None
        rsqrt_21: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_77);  add_77 = None
        sub_22: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_76, getitem_87);  add_76 = getitem_87 = None
        mul_73: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_22, rsqrt_21);  sub_22 = rsqrt_21 = None
        mul_74: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_73, arg176_1);  mul_73 = arg176_1 = None
        add_78: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_74, arg177_1);  mul_74 = arg177_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_172: "f32[128, 768]" = torch.ops.aten.view.default(add_78, [128, 768])
        permute_108: "f32[768, 3072]" = torch.ops.aten.permute.default(arg178_1, [1, 0]);  arg178_1 = None
        addmm_64: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg179_1, view_172, permute_108);  arg179_1 = view_172 = permute_108 = None
        view_173: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_64, [2, 64, 3072]);  addmm_64 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_75: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_173, 0.5)
        mul_76: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_173, 0.7071067811865476);  view_173 = None
        erf_10: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_76);  mul_76 = None
        add_79: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_10, 1);  erf_10 = None
        mul_77: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_75, add_79);  mul_75 = add_79 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_174: "f32[128, 3072]" = torch.ops.aten.view.default(mul_77, [128, 3072]);  mul_77 = None
        permute_109: "f32[3072, 768]" = torch.ops.aten.permute.default(arg180_1, [1, 0]);  arg180_1 = None
        addmm_65: "f32[128, 768]" = torch.ops.aten.addmm.default(arg181_1, view_174, permute_109);  arg181_1 = view_174 = permute_109 = None
        view_175: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_65, [2, 64, 768]);  addmm_65 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_80: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_175, add_78);  view_175 = add_78 = None
        var_mean_22 = torch.ops.aten.var_mean.correction(add_80, [2], correction = 0, keepdim = True)
        getitem_88: "f32[2, 64, 1]" = var_mean_22[0]
        getitem_89: "f32[2, 64, 1]" = var_mean_22[1];  var_mean_22 = None
        add_81: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_88, 1e-05);  getitem_88 = None
        rsqrt_22: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_81);  add_81 = None
        sub_23: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_80, getitem_89);  add_80 = getitem_89 = None
        mul_78: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_23, rsqrt_22);  sub_23 = rsqrt_22 = None
        mul_79: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_78, arg182_1);  mul_78 = arg182_1 = None
        add_82: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_79, arg183_1);  mul_79 = arg183_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_176: "f32[128, 768]" = torch.ops.aten.view.default(add_82, [128, 768])
        permute_110: "f32[768, 768]" = torch.ops.aten.permute.default(arg184_1, [1, 0]);  arg184_1 = None
        addmm_66: "f32[128, 768]" = torch.ops.aten.addmm.default(arg185_1, view_176, permute_110);  arg185_1 = view_176 = permute_110 = None
        view_177: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_66, [2, 64, 768]);  addmm_66 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_178: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_177, [2, 64, 12, 64]);  view_177 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_111: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_178, [0, 2, 1, 3]);  view_178 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_179: "f32[128, 768]" = torch.ops.aten.view.default(add_82, [128, 768])
        permute_112: "f32[768, 768]" = torch.ops.aten.permute.default(arg186_1, [1, 0]);  arg186_1 = None
        addmm_67: "f32[128, 768]" = torch.ops.aten.addmm.default(arg187_1, view_179, permute_112);  arg187_1 = view_179 = permute_112 = None
        view_180: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_67, [2, 64, 768]);  addmm_67 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_181: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_180, [2, 64, 12, 64]);  view_180 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_113: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_181, [0, 2, 1, 3]);  view_181 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_182: "f32[128, 768]" = torch.ops.aten.view.default(add_82, [128, 768])
        permute_114: "f32[768, 768]" = torch.ops.aten.permute.default(arg188_1, [1, 0]);  arg188_1 = None
        addmm_68: "f32[128, 768]" = torch.ops.aten.addmm.default(arg189_1, view_182, permute_114);  arg189_1 = view_182 = permute_114 = None
        view_183: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_68, [2, 64, 768]);  addmm_68 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_184: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_183, [2, 64, 12, 64]);  view_183 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_115: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_184, [0, 2, 1, 3]);  view_184 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_13: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64]);  where = None
        _scaled_dot_product_efficient_attention_11 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_111, permute_113, permute_115, expand_13, False);  permute_111 = permute_113 = permute_115 = expand_13 = None
        getitem_90: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_11[0];  _scaled_dot_product_efficient_attention_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_116: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_90, [0, 2, 1, 3]);  getitem_90 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_185: "f32[2, 64, 768]" = torch.ops.aten.view.default(permute_116, [2, 64, 768]);  permute_116 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_186: "f32[128, 768]" = torch.ops.aten.view.default(view_185, [128, 768]);  view_185 = None
        permute_117: "f32[768, 768]" = torch.ops.aten.permute.default(arg190_1, [1, 0]);  arg190_1 = None
        addmm_69: "f32[128, 768]" = torch.ops.aten.addmm.default(arg191_1, view_186, permute_117);  arg191_1 = view_186 = permute_117 = None
        view_187: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_69, [2, 64, 768]);  addmm_69 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_83: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_187, add_82);  view_187 = add_82 = None
        var_mean_23 = torch.ops.aten.var_mean.correction(add_83, [2], correction = 0, keepdim = True)
        getitem_94: "f32[2, 64, 1]" = var_mean_23[0]
        getitem_95: "f32[2, 64, 1]" = var_mean_23[1];  var_mean_23 = None
        add_84: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_94, 1e-05);  getitem_94 = None
        rsqrt_23: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_84);  add_84 = None
        sub_24: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_83, getitem_95);  add_83 = getitem_95 = None
        mul_80: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_24, rsqrt_23);  sub_24 = rsqrt_23 = None
        mul_81: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_80, arg192_1);  mul_80 = arg192_1 = None
        add_85: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_81, arg193_1);  mul_81 = arg193_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_188: "f32[128, 768]" = torch.ops.aten.view.default(add_85, [128, 768])
        permute_118: "f32[768, 3072]" = torch.ops.aten.permute.default(arg194_1, [1, 0]);  arg194_1 = None
        addmm_70: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg195_1, view_188, permute_118);  arg195_1 = view_188 = permute_118 = None
        view_189: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_70, [2, 64, 3072]);  addmm_70 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_82: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_189, 0.5)
        mul_83: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_189, 0.7071067811865476);  view_189 = None
        erf_11: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_83);  mul_83 = None
        add_86: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_11, 1);  erf_11 = None
        mul_84: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_82, add_86);  mul_82 = add_86 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_190: "f32[128, 3072]" = torch.ops.aten.view.default(mul_84, [128, 3072]);  mul_84 = None
        permute_119: "f32[3072, 768]" = torch.ops.aten.permute.default(arg196_1, [1, 0]);  arg196_1 = None
        addmm_71: "f32[128, 768]" = torch.ops.aten.addmm.default(arg197_1, view_190, permute_119);  arg197_1 = view_190 = permute_119 = None
        view_191: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_71, [2, 64, 768]);  addmm_71 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_87: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_191, add_85);  view_191 = add_85 = None
        var_mean_24 = torch.ops.aten.var_mean.correction(add_87, [2], correction = 0, keepdim = True)
        getitem_96: "f32[2, 64, 1]" = var_mean_24[0]
        getitem_97: "f32[2, 64, 1]" = var_mean_24[1];  var_mean_24 = None
        add_88: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_96, 1e-05);  getitem_96 = None
        rsqrt_24: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_88);  add_88 = None
        sub_25: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_87, getitem_97);  add_87 = getitem_97 = None
        mul_85: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_25, rsqrt_24);  sub_25 = rsqrt_24 = None
        mul_86: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_85, arg198_1);  mul_85 = arg198_1 = None
        add_89: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_86, arg199_1);  mul_86 = arg199_1 = None
        return (add_89,)
        

# ===== run_2025_10_19_03_43_12_574129-pid_19/torchinductor/model__1_inference_1.1/fx_graph_runnable.py =====

import torch
from torch import tensor, device
import torch.fx as fx
from torch._dynamo.testing import rand_strided
from math import inf
import torch._inductor.inductor_prims

import torch._dynamo.config
import torch._inductor.config
import torch._functorch.config
import torch.fx.experimental._config
torch._dynamo.config.traceable_tensor_subclasses = set()
torch._dynamo.config.allowed_functions_module_string_ignorelist = {'torch.distributions', 'torch.testing', 'torch._prims', 'torch._decomp', 'torch._refs'}
torch._dynamo.config._ddp_optimization_mode = ['ddp_optimizer', 'python_reducer', 'python_reducer_without_compiled_forward', 'no_optimization']
torch._dynamo.config._save_config_ignore = {'constant_functions', 'repro_after', 'skipfiles_inline_module_allowlist', 'repro_level'}
torch._dynamo.config.reorderable_logging_functions = set()
torch._dynamo.config.ignore_logger_methods = set()
torch._dynamo.config._autograd_backward_strict_mode_banned_ops = ['stride', 'requires_grad', 'storage_offset', 'layout', 'data', 'is_coalesced', 'is_complex', 'is_conj', 'is_contiguous', 'is_cpu', 'is_cuda', 'is_distributed', 'is_floating_point', 'is_inference', 'is_ipu', 'is_leaf', 'is_maia', 'is_meta', 'is_mkldnn', 'is_mps', 'is_mtia', 'is_neg', 'is_nested', 'is_nonzero', 'is_pinned', 'is_quantized', 'is_same_size', 'is_set_to', 'is_shared', 'is_signed', 'is_sparse', 'is_sparse_csr', 'is_vulkan', 'is_xla', 'is_xpu']
torch._dynamo.config.compiled_autograd_kwargs_override = {}
torch._inductor.config.pre_grad_fusion_options = {}
torch._inductor.config.post_grad_fusion_options = {}
torch._inductor.config.fx_passes_numeric_check = {'pre_grad': False, 'precision': 0.0001, 'num_iterations': 1, 'requires_optimizer': True}
torch._inductor.config.reorder_for_compute_comm_overlap_passes = ['reorder_compute_for_overlap', 'sink_waits', 'raise_comms']
torch._inductor.config.max_autotune = True
torch._inductor.config.coordinate_descent_tuning = True
torch._inductor.config._fuse_ddp_communication_passes = ['fuse_ddp_with_concat_op', 'schedule_comm_wait']
torch._inductor.config.triton.cudagraphs = True
torch._inductor.config.aot_inductor.metadata = {}
torch._inductor.config.aot_inductor.presets = {}
torch._inductor.config.rocm.arch = []
torch._inductor.config.rocm.ck_supported_arch = ['gfx90a', 'gfx940', 'gfx941', 'gfx942']
torch._inductor.config.trace.enabled = False
torch._inductor.config.trace.save_real_tensors = False
torch._inductor.config._save_config_ignore = ['trace.upload_tar', 'joint_custom_pre_pass', 'joint_custom_post_pass', 'pre_grad_custom_pass']
torch._inductor.config._cache_config_ignore_prefix = ['trace', 'cuda.cutlass_dir', 'worker_start_method', 'compile_threads', 'post_grad_custom_post_pass', 'post_grad_custom_pre_pass', 'always_complex_memory_overlap_TESTING_ONLY']
torch._inductor.config.external_matmul = []
torch._functorch.config.functionalize_rng_ops = False
torch._functorch.config.debug_partitioner = True
torch._functorch.config.fake_tensor_allow_unsafe_data_ptr_access = True
torch._functorch.config.unlift_effect_tokens = True



isolate_fails_code_str = None




# torch version: 2.6.0+cu124
# torch cuda version: 12.4
# torch git version: 2236df1770800ffea5697b11b0bb0d910b2e59e1


# CUDA Info: 
# nvcc: NVIDIA (R) Cuda compiler driver 
# Copyright (c) 2005-2024 NVIDIA Corporation 
# Built on Thu_Jun__6_02:18:23_PDT_2024 
# Cuda compilation tools, release 12.5, V12.5.82 
# Build cuda_12.5.r12.5/compiler.34385749_0 

# GPU Hardware Info: 
# Tesla T4 : 2 


from torch.nn import *
class Repro(torch.nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.register_buffer('_tensor_constant0', tensor(1.))

    
    
    def forward(self, arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1, arg7_1, arg8_1, arg9_1, arg10_1, arg11_1, arg12_1, arg13_1, arg14_1, arg15_1, arg16_1, arg17_1, arg18_1, arg19_1, arg20_1, arg21_1, arg22_1, arg23_1, arg24_1, arg25_1, arg26_1, arg27_1, arg28_1, arg29_1, arg30_1, arg31_1, arg32_1, arg33_1, arg34_1, arg35_1, arg36_1, arg37_1, arg38_1, arg39_1, arg40_1, arg41_1, arg42_1, arg43_1, arg44_1, arg45_1, arg46_1, arg47_1, arg48_1, arg49_1, arg50_1, arg51_1, arg52_1, arg53_1, arg54_1, arg55_1, arg56_1, arg57_1, arg58_1, arg59_1, arg60_1, arg61_1, arg62_1, arg63_1, arg64_1, arg65_1, arg66_1, arg67_1, arg68_1, arg69_1, arg70_1, arg71_1, arg72_1, arg73_1, arg74_1, arg75_1, arg76_1, arg77_1, arg78_1, arg79_1, arg80_1, arg81_1, arg82_1, arg83_1, arg84_1, arg85_1, arg86_1, arg87_1, arg88_1, arg89_1, arg90_1, arg91_1, arg92_1, arg93_1, arg94_1, arg95_1, arg96_1, arg97_1, arg98_1, arg99_1, arg100_1, arg101_1, arg102_1, arg103_1, arg104_1, arg105_1, arg106_1, arg107_1, arg108_1, arg109_1, arg110_1, arg111_1, arg112_1, arg113_1, arg114_1, arg115_1, arg116_1, arg117_1, arg118_1, arg119_1, arg120_1, arg121_1, arg122_1, arg123_1, arg124_1, arg125_1, arg126_1, arg127_1, arg128_1, arg129_1, arg130_1, arg131_1, arg132_1, arg133_1, arg134_1, arg135_1, arg136_1, arg137_1, arg138_1, arg139_1, arg140_1, arg141_1, arg142_1, arg143_1, arg144_1, arg145_1, arg146_1, arg147_1, arg148_1, arg149_1, arg150_1, arg151_1, arg152_1, arg153_1, arg154_1, arg155_1, arg156_1, arg157_1, arg158_1, arg159_1, arg160_1, arg161_1, arg162_1, arg163_1, arg164_1, arg165_1, arg166_1, arg167_1, arg168_1, arg169_1, arg170_1, arg171_1, arg172_1, arg173_1, arg174_1, arg175_1, arg176_1, arg177_1, arg178_1, arg179_1, arg180_1, arg181_1, arg182_1, arg183_1, arg184_1, arg185_1, arg186_1, arg187_1, arg188_1, arg189_1, arg190_1, arg191_1, arg192_1, arg193_1, arg194_1, arg195_1, arg196_1, arg197_1, arg198_1, arg199_1):
        slice_2 = torch.ops.aten.slice.Tensor(arg1_1, 1, 0, 64);  arg1_1 = None
        expand = torch.ops.aten.expand.default(slice_2, [2, 64]);  slice_2 = None
        ne = torch.ops.aten.ne.Scalar(arg0_1, 1)
        convert_element_type = torch.ops.prims.convert_element_type.default(ne, torch.int32);  ne = None
        cumsum = torch.ops.aten.cumsum.default(convert_element_type, 1)
        convert_element_type_1 = torch.ops.prims.convert_element_type.default(cumsum, torch.int32);  cumsum = None
        add = torch.ops.aten.add.Tensor(convert_element_type_1, 0);  convert_element_type_1 = None
        mul = torch.ops.aten.mul.Tensor(add, convert_element_type);  add = convert_element_type = None
        convert_element_type_2 = torch.ops.prims.convert_element_type.default(mul, torch.int64);  mul = None
        add_1 = torch.ops.aten.add.Tensor(convert_element_type_2, 1);  convert_element_type_2 = None
        embedding = torch.ops.aten.embedding.default(arg2_1, arg0_1, 1);  arg2_1 = arg0_1 = None
        embedding_1 = torch.ops.aten.embedding.default(arg3_1, expand);  arg3_1 = expand = None
        add_2 = torch.ops.aten.add.Tensor(embedding, embedding_1);  embedding = embedding_1 = None
        embedding_2 = torch.ops.aten.embedding.default(arg4_1, add_1, 1);  arg4_1 = add_1 = None
        add_3 = torch.ops.aten.add.Tensor(add_2, embedding_2);  add_2 = embedding_2 = None
        var_mean = torch.ops.aten.var_mean.correction(add_3, [2], correction = 0, keepdim = True)
        getitem = var_mean[0]
        getitem_1 = var_mean[1];  var_mean = None
        add_4 = torch.ops.aten.add.Tensor(getitem, 1e-05);  getitem = None
        rsqrt = torch.ops.aten.rsqrt.default(add_4);  add_4 = None
        sub = torch.ops.aten.sub.Tensor(add_3, getitem_1);  add_3 = getitem_1 = None
        mul_1 = torch.ops.aten.mul.Tensor(sub, rsqrt);  sub = rsqrt = None
        mul_2 = torch.ops.aten.mul.Tensor(mul_1, arg5_1);  mul_1 = arg5_1 = None
        add_5 = torch.ops.aten.add.Tensor(mul_2, arg6_1);  mul_2 = arg6_1 = None
        unsqueeze = torch.ops.aten.unsqueeze.default(arg7_1, 1);  arg7_1 = None
        unsqueeze_1 = torch.ops.aten.unsqueeze.default(unsqueeze, 2);  unsqueeze = None
        expand_1 = torch.ops.aten.expand.default(unsqueeze_1, [2, 1, 64, 64]);  unsqueeze_1 = None
        convert_element_type_3 = torch.ops.prims.convert_element_type.default(expand_1, torch.float32);  expand_1 = None
        _tensor_constant0 = self._tensor_constant0;  _tensor_constant0 = None
        full_default = torch.ops.aten.full.default([], 1.0, dtype = torch.float32, layout = torch.strided, device = device(type='cpu'), pin_memory = False)
        sub_1 = torch.ops.aten.sub.Tensor(full_default, convert_element_type_3);  full_default = convert_element_type_3 = None
        convert_element_type_4 = torch.ops.prims.convert_element_type.default(sub_1, torch.bool)
        full_default_1 = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where = torch.ops.aten.where.self(convert_element_type_4, full_default_1, sub_1);  convert_element_type_4 = full_default_1 = sub_1 = None
        view = torch.ops.aten.view.default(add_5, [128, 768])
        permute = torch.ops.aten.permute.default(arg8_1, [1, 0]);  arg8_1 = None
        addmm = torch.ops.aten.addmm.default(arg9_1, view, permute);  arg9_1 = view = permute = None
        view_1 = torch.ops.aten.view.default(addmm, [2, 64, 768]);  addmm = None
        view_2 = torch.ops.aten.view.default(view_1, [2, 64, 12, 64]);  view_1 = None
        permute_1 = torch.ops.aten.permute.default(view_2, [0, 2, 1, 3]);  view_2 = None
        view_3 = torch.ops.aten.view.default(add_5, [128, 768])
        permute_2 = torch.ops.aten.permute.default(arg10_1, [1, 0]);  arg10_1 = None
        addmm_1 = torch.ops.aten.addmm.default(arg11_1, view_3, permute_2);  arg11_1 = view_3 = permute_2 = None
        view_4 = torch.ops.aten.view.default(addmm_1, [2, 64, 768]);  addmm_1 = None
        view_5 = torch.ops.aten.view.default(view_4, [2, 64, 12, 64]);  view_4 = None
        permute_3 = torch.ops.aten.permute.default(view_5, [0, 2, 1, 3]);  view_5 = None
        view_6 = torch.ops.aten.view.default(add_5, [128, 768])
        permute_4 = torch.ops.aten.permute.default(arg12_1, [1, 0]);  arg12_1 = None
        addmm_2 = torch.ops.aten.addmm.default(arg13_1, view_6, permute_4);  arg13_1 = view_6 = permute_4 = None
        view_7 = torch.ops.aten.view.default(addmm_2, [2, 64, 768]);  addmm_2 = None
        view_8 = torch.ops.aten.view.default(view_7, [2, 64, 12, 64]);  view_7 = None
        permute_5 = torch.ops.aten.permute.default(view_8, [0, 2, 1, 3]);  view_8 = None
        expand_2 = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_1, permute_3, permute_5, expand_2, False);  permute_1 = permute_3 = permute_5 = expand_2 = None
        getitem_2 = _scaled_dot_product_efficient_attention[0];  _scaled_dot_product_efficient_attention = None
        permute_6 = torch.ops.aten.permute.default(getitem_2, [0, 2, 1, 3]);  getitem_2 = None
        view_9 = torch.ops.aten.view.default(permute_6, [2, 64, 768]);  permute_6 = None
        view_10 = torch.ops.aten.view.default(view_9, [128, 768]);  view_9 = None
        permute_7 = torch.ops.aten.permute.default(arg14_1, [1, 0]);  arg14_1 = None
        addmm_3 = torch.ops.aten.addmm.default(arg15_1, view_10, permute_7);  arg15_1 = view_10 = permute_7 = None
        view_11 = torch.ops.aten.view.default(addmm_3, [2, 64, 768]);  addmm_3 = None
        add_6 = torch.ops.aten.add.Tensor(view_11, add_5);  view_11 = add_5 = None
        var_mean_1 = torch.ops.aten.var_mean.correction(add_6, [2], correction = 0, keepdim = True)
        getitem_6 = var_mean_1[0]
        getitem_7 = var_mean_1[1];  var_mean_1 = None
        add_7 = torch.ops.aten.add.Tensor(getitem_6, 1e-05);  getitem_6 = None
        rsqrt_1 = torch.ops.aten.rsqrt.default(add_7);  add_7 = None
        sub_2 = torch.ops.aten.sub.Tensor(add_6, getitem_7);  add_6 = getitem_7 = None
        mul_3 = torch.ops.aten.mul.Tensor(sub_2, rsqrt_1);  sub_2 = rsqrt_1 = None
        mul_4 = torch.ops.aten.mul.Tensor(mul_3, arg16_1);  mul_3 = arg16_1 = None
        add_8 = torch.ops.aten.add.Tensor(mul_4, arg17_1);  mul_4 = arg17_1 = None
        view_12 = torch.ops.aten.view.default(add_8, [128, 768])
        permute_8 = torch.ops.aten.permute.default(arg18_1, [1, 0]);  arg18_1 = None
        addmm_4 = torch.ops.aten.addmm.default(arg19_1, view_12, permute_8);  arg19_1 = view_12 = permute_8 = None
        view_13 = torch.ops.aten.view.default(addmm_4, [2, 64, 3072]);  addmm_4 = None
        mul_5 = torch.ops.aten.mul.Tensor(view_13, 0.5)
        mul_6 = torch.ops.aten.mul.Tensor(view_13, 0.7071067811865476);  view_13 = None
        erf = torch.ops.aten.erf.default(mul_6);  mul_6 = None
        add_9 = torch.ops.aten.add.Tensor(erf, 1);  erf = None
        mul_7 = torch.ops.aten.mul.Tensor(mul_5, add_9);  mul_5 = add_9 = None
        view_14 = torch.ops.aten.view.default(mul_7, [128, 3072]);  mul_7 = None
        permute_9 = torch.ops.aten.permute.default(arg20_1, [1, 0]);  arg20_1 = None
        addmm_5 = torch.ops.aten.addmm.default(arg21_1, view_14, permute_9);  arg21_1 = view_14 = permute_9 = None
        view_15 = torch.ops.aten.view.default(addmm_5, [2, 64, 768]);  addmm_5 = None
        add_10 = torch.ops.aten.add.Tensor(view_15, add_8);  view_15 = add_8 = None
        var_mean_2 = torch.ops.aten.var_mean.correction(add_10, [2], correction = 0, keepdim = True)
        getitem_8 = var_mean_2[0]
        getitem_9 = var_mean_2[1];  var_mean_2 = None
        add_11 = torch.ops.aten.add.Tensor(getitem_8, 1e-05);  getitem_8 = None
        rsqrt_2 = torch.ops.aten.rsqrt.default(add_11);  add_11 = None
        sub_3 = torch.ops.aten.sub.Tensor(add_10, getitem_9);  add_10 = getitem_9 = None
        mul_8 = torch.ops.aten.mul.Tensor(sub_3, rsqrt_2);  sub_3 = rsqrt_2 = None
        mul_9 = torch.ops.aten.mul.Tensor(mul_8, arg22_1);  mul_8 = arg22_1 = None
        add_12 = torch.ops.aten.add.Tensor(mul_9, arg23_1);  mul_9 = arg23_1 = None
        view_16 = torch.ops.aten.view.default(add_12, [128, 768])
        permute_10 = torch.ops.aten.permute.default(arg24_1, [1, 0]);  arg24_1 = None
        addmm_6 = torch.ops.aten.addmm.default(arg25_1, view_16, permute_10);  arg25_1 = view_16 = permute_10 = None
        view_17 = torch.ops.aten.view.default(addmm_6, [2, 64, 768]);  addmm_6 = None
        view_18 = torch.ops.aten.view.default(view_17, [2, 64, 12, 64]);  view_17 = None
        permute_11 = torch.ops.aten.permute.default(view_18, [0, 2, 1, 3]);  view_18 = None
        view_19 = torch.ops.aten.view.default(add_12, [128, 768])
        permute_12 = torch.ops.aten.permute.default(arg26_1, [1, 0]);  arg26_1 = None
        addmm_7 = torch.ops.aten.addmm.default(arg27_1, view_19, permute_12);  arg27_1 = view_19 = permute_12 = None
        view_20 = torch.ops.aten.view.default(addmm_7, [2, 64, 768]);  addmm_7 = None
        view_21 = torch.ops.aten.view.default(view_20, [2, 64, 12, 64]);  view_20 = None
        permute_13 = torch.ops.aten.permute.default(view_21, [0, 2, 1, 3]);  view_21 = None
        view_22 = torch.ops.aten.view.default(add_12, [128, 768])
        permute_14 = torch.ops.aten.permute.default(arg28_1, [1, 0]);  arg28_1 = None
        addmm_8 = torch.ops.aten.addmm.default(arg29_1, view_22, permute_14);  arg29_1 = view_22 = permute_14 = None
        view_23 = torch.ops.aten.view.default(addmm_8, [2, 64, 768]);  addmm_8 = None
        view_24 = torch.ops.aten.view.default(view_23, [2, 64, 12, 64]);  view_23 = None
        permute_15 = torch.ops.aten.permute.default(view_24, [0, 2, 1, 3]);  view_24 = None
        expand_3 = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_1 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_11, permute_13, permute_15, expand_3, False);  permute_11 = permute_13 = permute_15 = expand_3 = None
        getitem_10 = _scaled_dot_product_efficient_attention_1[0];  _scaled_dot_product_efficient_attention_1 = None
        permute_16 = torch.ops.aten.permute.default(getitem_10, [0, 2, 1, 3]);  getitem_10 = None
        view_25 = torch.ops.aten.view.default(permute_16, [2, 64, 768]);  permute_16 = None
        view_26 = torch.ops.aten.view.default(view_25, [128, 768]);  view_25 = None
        permute_17 = torch.ops.aten.permute.default(arg30_1, [1, 0]);  arg30_1 = None
        addmm_9 = torch.ops.aten.addmm.default(arg31_1, view_26, permute_17);  arg31_1 = view_26 = permute_17 = None
        view_27 = torch.ops.aten.view.default(addmm_9, [2, 64, 768]);  addmm_9 = None
        add_13 = torch.ops.aten.add.Tensor(view_27, add_12);  view_27 = add_12 = None
        var_mean_3 = torch.ops.aten.var_mean.correction(add_13, [2], correction = 0, keepdim = True)
        getitem_14 = var_mean_3[0]
        getitem_15 = var_mean_3[1];  var_mean_3 = None
        add_14 = torch.ops.aten.add.Tensor(getitem_14, 1e-05);  getitem_14 = None
        rsqrt_3 = torch.ops.aten.rsqrt.default(add_14);  add_14 = None
        sub_4 = torch.ops.aten.sub.Tensor(add_13, getitem_15);  add_13 = getitem_15 = None
        mul_10 = torch.ops.aten.mul.Tensor(sub_4, rsqrt_3);  sub_4 = rsqrt_3 = None
        mul_11 = torch.ops.aten.mul.Tensor(mul_10, arg32_1);  mul_10 = arg32_1 = None
        add_15 = torch.ops.aten.add.Tensor(mul_11, arg33_1);  mul_11 = arg33_1 = None
        view_28 = torch.ops.aten.view.default(add_15, [128, 768])
        permute_18 = torch.ops.aten.permute.default(arg34_1, [1, 0]);  arg34_1 = None
        addmm_10 = torch.ops.aten.addmm.default(arg35_1, view_28, permute_18);  arg35_1 = view_28 = permute_18 = None
        view_29 = torch.ops.aten.view.default(addmm_10, [2, 64, 3072]);  addmm_10 = None
        mul_12 = torch.ops.aten.mul.Tensor(view_29, 0.5)
        mul_13 = torch.ops.aten.mul.Tensor(view_29, 0.7071067811865476);  view_29 = None
        erf_1 = torch.ops.aten.erf.default(mul_13);  mul_13 = None
        add_16 = torch.ops.aten.add.Tensor(erf_1, 1);  erf_1 = None
        mul_14 = torch.ops.aten.mul.Tensor(mul_12, add_16);  mul_12 = add_16 = None
        view_30 = torch.ops.aten.view.default(mul_14, [128, 3072]);  mul_14 = None
        permute_19 = torch.ops.aten.permute.default(arg36_1, [1, 0]);  arg36_1 = None
        addmm_11 = torch.ops.aten.addmm.default(arg37_1, view_30, permute_19);  arg37_1 = view_30 = permute_19 = None
        view_31 = torch.ops.aten.view.default(addmm_11, [2, 64, 768]);  addmm_11 = None
        add_17 = torch.ops.aten.add.Tensor(view_31, add_15);  view_31 = add_15 = None
        var_mean_4 = torch.ops.aten.var_mean.correction(add_17, [2], correction = 0, keepdim = True)
        getitem_16 = var_mean_4[0]
        getitem_17 = var_mean_4[1];  var_mean_4 = None
        add_18 = torch.ops.aten.add.Tensor(getitem_16, 1e-05);  getitem_16 = None
        rsqrt_4 = torch.ops.aten.rsqrt.default(add_18);  add_18 = None
        sub_5 = torch.ops.aten.sub.Tensor(add_17, getitem_17);  add_17 = getitem_17 = None
        mul_15 = torch.ops.aten.mul.Tensor(sub_5, rsqrt_4);  sub_5 = rsqrt_4 = None
        mul_16 = torch.ops.aten.mul.Tensor(mul_15, arg38_1);  mul_15 = arg38_1 = None
        add_19 = torch.ops.aten.add.Tensor(mul_16, arg39_1);  mul_16 = arg39_1 = None
        view_32 = torch.ops.aten.view.default(add_19, [128, 768])
        permute_20 = torch.ops.aten.permute.default(arg40_1, [1, 0]);  arg40_1 = None
        addmm_12 = torch.ops.aten.addmm.default(arg41_1, view_32, permute_20);  arg41_1 = view_32 = permute_20 = None
        view_33 = torch.ops.aten.view.default(addmm_12, [2, 64, 768]);  addmm_12 = None
        view_34 = torch.ops.aten.view.default(view_33, [2, 64, 12, 64]);  view_33 = None
        permute_21 = torch.ops.aten.permute.default(view_34, [0, 2, 1, 3]);  view_34 = None
        view_35 = torch.ops.aten.view.default(add_19, [128, 768])
        permute_22 = torch.ops.aten.permute.default(arg42_1, [1, 0]);  arg42_1 = None
        addmm_13 = torch.ops.aten.addmm.default(arg43_1, view_35, permute_22);  arg43_1 = view_35 = permute_22 = None
        view_36 = torch.ops.aten.view.default(addmm_13, [2, 64, 768]);  addmm_13 = None
        view_37 = torch.ops.aten.view.default(view_36, [2, 64, 12, 64]);  view_36 = None
        permute_23 = torch.ops.aten.permute.default(view_37, [0, 2, 1, 3]);  view_37 = None
        view_38 = torch.ops.aten.view.default(add_19, [128, 768])
        permute_24 = torch.ops.aten.permute.default(arg44_1, [1, 0]);  arg44_1 = None
        addmm_14 = torch.ops.aten.addmm.default(arg45_1, view_38, permute_24);  arg45_1 = view_38 = permute_24 = None
        view_39 = torch.ops.aten.view.default(addmm_14, [2, 64, 768]);  addmm_14 = None
        view_40 = torch.ops.aten.view.default(view_39, [2, 64, 12, 64]);  view_39 = None
        permute_25 = torch.ops.aten.permute.default(view_40, [0, 2, 1, 3]);  view_40 = None
        expand_4 = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_2 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_21, permute_23, permute_25, expand_4, False);  permute_21 = permute_23 = permute_25 = expand_4 = None
        getitem_18 = _scaled_dot_product_efficient_attention_2[0];  _scaled_dot_product_efficient_attention_2 = None
        permute_26 = torch.ops.aten.permute.default(getitem_18, [0, 2, 1, 3]);  getitem_18 = None
        view_41 = torch.ops.aten.view.default(permute_26, [2, 64, 768]);  permute_26 = None
        view_42 = torch.ops.aten.view.default(view_41, [128, 768]);  view_41 = None
        permute_27 = torch.ops.aten.permute.default(arg46_1, [1, 0]);  arg46_1 = None
        addmm_15 = torch.ops.aten.addmm.default(arg47_1, view_42, permute_27);  arg47_1 = view_42 = permute_27 = None
        view_43 = torch.ops.aten.view.default(addmm_15, [2, 64, 768]);  addmm_15 = None
        add_20 = torch.ops.aten.add.Tensor(view_43, add_19);  view_43 = add_19 = None
        var_mean_5 = torch.ops.aten.var_mean.correction(add_20, [2], correction = 0, keepdim = True)
        getitem_22 = var_mean_5[0]
        getitem_23 = var_mean_5[1];  var_mean_5 = None
        add_21 = torch.ops.aten.add.Tensor(getitem_22, 1e-05);  getitem_22 = None
        rsqrt_5 = torch.ops.aten.rsqrt.default(add_21);  add_21 = None
        sub_6 = torch.ops.aten.sub.Tensor(add_20, getitem_23);  add_20 = getitem_23 = None
        mul_17 = torch.ops.aten.mul.Tensor(sub_6, rsqrt_5);  sub_6 = rsqrt_5 = None
        mul_18 = torch.ops.aten.mul.Tensor(mul_17, arg48_1);  mul_17 = arg48_1 = None
        add_22 = torch.ops.aten.add.Tensor(mul_18, arg49_1);  mul_18 = arg49_1 = None
        view_44 = torch.ops.aten.view.default(add_22, [128, 768])
        permute_28 = torch.ops.aten.permute.default(arg50_1, [1, 0]);  arg50_1 = None
        addmm_16 = torch.ops.aten.addmm.default(arg51_1, view_44, permute_28);  arg51_1 = view_44 = permute_28 = None
        view_45 = torch.ops.aten.view.default(addmm_16, [2, 64, 3072]);  addmm_16 = None
        mul_19 = torch.ops.aten.mul.Tensor(view_45, 0.5)
        mul_20 = torch.ops.aten.mul.Tensor(view_45, 0.7071067811865476);  view_45 = None
        erf_2 = torch.ops.aten.erf.default(mul_20);  mul_20 = None
        add_23 = torch.ops.aten.add.Tensor(erf_2, 1);  erf_2 = None
        mul_21 = torch.ops.aten.mul.Tensor(mul_19, add_23);  mul_19 = add_23 = None
        view_46 = torch.ops.aten.view.default(mul_21, [128, 3072]);  mul_21 = None
        permute_29 = torch.ops.aten.permute.default(arg52_1, [1, 0]);  arg52_1 = None
        addmm_17 = torch.ops.aten.addmm.default(arg53_1, view_46, permute_29);  arg53_1 = view_46 = permute_29 = None
        view_47 = torch.ops.aten.view.default(addmm_17, [2, 64, 768]);  addmm_17 = None
        add_24 = torch.ops.aten.add.Tensor(view_47, add_22);  view_47 = add_22 = None
        var_mean_6 = torch.ops.aten.var_mean.correction(add_24, [2], correction = 0, keepdim = True)
        getitem_24 = var_mean_6[0]
        getitem_25 = var_mean_6[1];  var_mean_6 = None
        add_25 = torch.ops.aten.add.Tensor(getitem_24, 1e-05);  getitem_24 = None
        rsqrt_6 = torch.ops.aten.rsqrt.default(add_25);  add_25 = None
        sub_7 = torch.ops.aten.sub.Tensor(add_24, getitem_25);  add_24 = getitem_25 = None
        mul_22 = torch.ops.aten.mul.Tensor(sub_7, rsqrt_6);  sub_7 = rsqrt_6 = None
        mul_23 = torch.ops.aten.mul.Tensor(mul_22, arg54_1);  mul_22 = arg54_1 = None
        add_26 = torch.ops.aten.add.Tensor(mul_23, arg55_1);  mul_23 = arg55_1 = None
        view_48 = torch.ops.aten.view.default(add_26, [128, 768])
        permute_30 = torch.ops.aten.permute.default(arg56_1, [1, 0]);  arg56_1 = None
        addmm_18 = torch.ops.aten.addmm.default(arg57_1, view_48, permute_30);  arg57_1 = view_48 = permute_30 = None
        view_49 = torch.ops.aten.view.default(addmm_18, [2, 64, 768]);  addmm_18 = None
        view_50 = torch.ops.aten.view.default(view_49, [2, 64, 12, 64]);  view_49 = None
        permute_31 = torch.ops.aten.permute.default(view_50, [0, 2, 1, 3]);  view_50 = None
        view_51 = torch.ops.aten.view.default(add_26, [128, 768])
        permute_32 = torch.ops.aten.permute.default(arg58_1, [1, 0]);  arg58_1 = None
        addmm_19 = torch.ops.aten.addmm.default(arg59_1, view_51, permute_32);  arg59_1 = view_51 = permute_32 = None
        view_52 = torch.ops.aten.view.default(addmm_19, [2, 64, 768]);  addmm_19 = None
        view_53 = torch.ops.aten.view.default(view_52, [2, 64, 12, 64]);  view_52 = None
        permute_33 = torch.ops.aten.permute.default(view_53, [0, 2, 1, 3]);  view_53 = None
        view_54 = torch.ops.aten.view.default(add_26, [128, 768])
        permute_34 = torch.ops.aten.permute.default(arg60_1, [1, 0]);  arg60_1 = None
        addmm_20 = torch.ops.aten.addmm.default(arg61_1, view_54, permute_34);  arg61_1 = view_54 = permute_34 = None
        view_55 = torch.ops.aten.view.default(addmm_20, [2, 64, 768]);  addmm_20 = None
        view_56 = torch.ops.aten.view.default(view_55, [2, 64, 12, 64]);  view_55 = None
        permute_35 = torch.ops.aten.permute.default(view_56, [0, 2, 1, 3]);  view_56 = None
        expand_5 = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_3 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_31, permute_33, permute_35, expand_5, False);  permute_31 = permute_33 = permute_35 = expand_5 = None
        getitem_26 = _scaled_dot_product_efficient_attention_3[0];  _scaled_dot_product_efficient_attention_3 = None
        permute_36 = torch.ops.aten.permute.default(getitem_26, [0, 2, 1, 3]);  getitem_26 = None
        view_57 = torch.ops.aten.view.default(permute_36, [2, 64, 768]);  permute_36 = None
        view_58 = torch.ops.aten.view.default(view_57, [128, 768]);  view_57 = None
        permute_37 = torch.ops.aten.permute.default(arg62_1, [1, 0]);  arg62_1 = None
        addmm_21 = torch.ops.aten.addmm.default(arg63_1, view_58, permute_37);  arg63_1 = view_58 = permute_37 = None
        view_59 = torch.ops.aten.view.default(addmm_21, [2, 64, 768]);  addmm_21 = None
        add_27 = torch.ops.aten.add.Tensor(view_59, add_26);  view_59 = add_26 = None
        var_mean_7 = torch.ops.aten.var_mean.correction(add_27, [2], correction = 0, keepdim = True)
        getitem_30 = var_mean_7[0]
        getitem_31 = var_mean_7[1];  var_mean_7 = None
        add_28 = torch.ops.aten.add.Tensor(getitem_30, 1e-05);  getitem_30 = None
        rsqrt_7 = torch.ops.aten.rsqrt.default(add_28);  add_28 = None
        sub_8 = torch.ops.aten.sub.Tensor(add_27, getitem_31);  add_27 = getitem_31 = None
        mul_24 = torch.ops.aten.mul.Tensor(sub_8, rsqrt_7);  sub_8 = rsqrt_7 = None
        mul_25 = torch.ops.aten.mul.Tensor(mul_24, arg64_1);  mul_24 = arg64_1 = None
        add_29 = torch.ops.aten.add.Tensor(mul_25, arg65_1);  mul_25 = arg65_1 = None
        view_60 = torch.ops.aten.view.default(add_29, [128, 768])
        permute_38 = torch.ops.aten.permute.default(arg66_1, [1, 0]);  arg66_1 = None
        addmm_22 = torch.ops.aten.addmm.default(arg67_1, view_60, permute_38);  arg67_1 = view_60 = permute_38 = None
        view_61 = torch.ops.aten.view.default(addmm_22, [2, 64, 3072]);  addmm_22 = None
        mul_26 = torch.ops.aten.mul.Tensor(view_61, 0.5)
        mul_27 = torch.ops.aten.mul.Tensor(view_61, 0.7071067811865476);  view_61 = None
        erf_3 = torch.ops.aten.erf.default(mul_27);  mul_27 = None
        add_30 = torch.ops.aten.add.Tensor(erf_3, 1);  erf_3 = None
        mul_28 = torch.ops.aten.mul.Tensor(mul_26, add_30);  mul_26 = add_30 = None
        view_62 = torch.ops.aten.view.default(mul_28, [128, 3072]);  mul_28 = None
        permute_39 = torch.ops.aten.permute.default(arg68_1, [1, 0]);  arg68_1 = None
        addmm_23 = torch.ops.aten.addmm.default(arg69_1, view_62, permute_39);  arg69_1 = view_62 = permute_39 = None
        view_63 = torch.ops.aten.view.default(addmm_23, [2, 64, 768]);  addmm_23 = None
        add_31 = torch.ops.aten.add.Tensor(view_63, add_29);  view_63 = add_29 = None
        var_mean_8 = torch.ops.aten.var_mean.correction(add_31, [2], correction = 0, keepdim = True)
        getitem_32 = var_mean_8[0]
        getitem_33 = var_mean_8[1];  var_mean_8 = None
        add_32 = torch.ops.aten.add.Tensor(getitem_32, 1e-05);  getitem_32 = None
        rsqrt_8 = torch.ops.aten.rsqrt.default(add_32);  add_32 = None
        sub_9 = torch.ops.aten.sub.Tensor(add_31, getitem_33);  add_31 = getitem_33 = None
        mul_29 = torch.ops.aten.mul.Tensor(sub_9, rsqrt_8);  sub_9 = rsqrt_8 = None
        mul_30 = torch.ops.aten.mul.Tensor(mul_29, arg70_1);  mul_29 = arg70_1 = None
        add_33 = torch.ops.aten.add.Tensor(mul_30, arg71_1);  mul_30 = arg71_1 = None
        view_64 = torch.ops.aten.view.default(add_33, [128, 768])
        permute_40 = torch.ops.aten.permute.default(arg72_1, [1, 0]);  arg72_1 = None
        addmm_24 = torch.ops.aten.addmm.default(arg73_1, view_64, permute_40);  arg73_1 = view_64 = permute_40 = None
        view_65 = torch.ops.aten.view.default(addmm_24, [2, 64, 768]);  addmm_24 = None
        view_66 = torch.ops.aten.view.default(view_65, [2, 64, 12, 64]);  view_65 = None
        permute_41 = torch.ops.aten.permute.default(view_66, [0, 2, 1, 3]);  view_66 = None
        view_67 = torch.ops.aten.view.default(add_33, [128, 768])
        permute_42 = torch.ops.aten.permute.default(arg74_1, [1, 0]);  arg74_1 = None
        addmm_25 = torch.ops.aten.addmm.default(arg75_1, view_67, permute_42);  arg75_1 = view_67 = permute_42 = None
        view_68 = torch.ops.aten.view.default(addmm_25, [2, 64, 768]);  addmm_25 = None
        view_69 = torch.ops.aten.view.default(view_68, [2, 64, 12, 64]);  view_68 = None
        permute_43 = torch.ops.aten.permute.default(view_69, [0, 2, 1, 3]);  view_69 = None
        view_70 = torch.ops.aten.view.default(add_33, [128, 768])
        permute_44 = torch.ops.aten.permute.default(arg76_1, [1, 0]);  arg76_1 = None
        addmm_26 = torch.ops.aten.addmm.default(arg77_1, view_70, permute_44);  arg77_1 = view_70 = permute_44 = None
        view_71 = torch.ops.aten.view.default(addmm_26, [2, 64, 768]);  addmm_26 = None
        view_72 = torch.ops.aten.view.default(view_71, [2, 64, 12, 64]);  view_71 = None
        permute_45 = torch.ops.aten.permute.default(view_72, [0, 2, 1, 3]);  view_72 = None
        expand_6 = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_4 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_41, permute_43, permute_45, expand_6, False);  permute_41 = permute_43 = permute_45 = expand_6 = None
        getitem_34 = _scaled_dot_product_efficient_attention_4[0];  _scaled_dot_product_efficient_attention_4 = None
        permute_46 = torch.ops.aten.permute.default(getitem_34, [0, 2, 1, 3]);  getitem_34 = None
        view_73 = torch.ops.aten.view.default(permute_46, [2, 64, 768]);  permute_46 = None
        view_74 = torch.ops.aten.view.default(view_73, [128, 768]);  view_73 = None
        permute_47 = torch.ops.aten.permute.default(arg78_1, [1, 0]);  arg78_1 = None
        addmm_27 = torch.ops.aten.addmm.default(arg79_1, view_74, permute_47);  arg79_1 = view_74 = permute_47 = None
        view_75 = torch.ops.aten.view.default(addmm_27, [2, 64, 768]);  addmm_27 = None
        add_34 = torch.ops.aten.add.Tensor(view_75, add_33);  view_75 = add_33 = None
        var_mean_9 = torch.ops.aten.var_mean.correction(add_34, [2], correction = 0, keepdim = True)
        getitem_38 = var_mean_9[0]
        getitem_39 = var_mean_9[1];  var_mean_9 = None
        add_35 = torch.ops.aten.add.Tensor(getitem_38, 1e-05);  getitem_38 = None
        rsqrt_9 = torch.ops.aten.rsqrt.default(add_35);  add_35 = None
        sub_10 = torch.ops.aten.sub.Tensor(add_34, getitem_39);  add_34 = getitem_39 = None
        mul_31 = torch.ops.aten.mul.Tensor(sub_10, rsqrt_9);  sub_10 = rsqrt_9 = None
        mul_32 = torch.ops.aten.mul.Tensor(mul_31, arg80_1);  mul_31 = arg80_1 = None
        add_36 = torch.ops.aten.add.Tensor(mul_32, arg81_1);  mul_32 = arg81_1 = None
        view_76 = torch.ops.aten.view.default(add_36, [128, 768])
        permute_48 = torch.ops.aten.permute.default(arg82_1, [1, 0]);  arg82_1 = None
        addmm_28 = torch.ops.aten.addmm.default(arg83_1, view_76, permute_48);  arg83_1 = view_76 = permute_48 = None
        view_77 = torch.ops.aten.view.default(addmm_28, [2, 64, 3072]);  addmm_28 = None
        mul_33 = torch.ops.aten.mul.Tensor(view_77, 0.5)
        mul_34 = torch.ops.aten.mul.Tensor(view_77, 0.7071067811865476);  view_77 = None
        erf_4 = torch.ops.aten.erf.default(mul_34);  mul_34 = None
        add_37 = torch.ops.aten.add.Tensor(erf_4, 1);  erf_4 = None
        mul_35 = torch.ops.aten.mul.Tensor(mul_33, add_37);  mul_33 = add_37 = None
        view_78 = torch.ops.aten.view.default(mul_35, [128, 3072]);  mul_35 = None
        permute_49 = torch.ops.aten.permute.default(arg84_1, [1, 0]);  arg84_1 = None
        addmm_29 = torch.ops.aten.addmm.default(arg85_1, view_78, permute_49);  arg85_1 = view_78 = permute_49 = None
        view_79 = torch.ops.aten.view.default(addmm_29, [2, 64, 768]);  addmm_29 = None
        add_38 = torch.ops.aten.add.Tensor(view_79, add_36);  view_79 = add_36 = None
        var_mean_10 = torch.ops.aten.var_mean.correction(add_38, [2], correction = 0, keepdim = True)
        getitem_40 = var_mean_10[0]
        getitem_41 = var_mean_10[1];  var_mean_10 = None
        add_39 = torch.ops.aten.add.Tensor(getitem_40, 1e-05);  getitem_40 = None
        rsqrt_10 = torch.ops.aten.rsqrt.default(add_39);  add_39 = None
        sub_11 = torch.ops.aten.sub.Tensor(add_38, getitem_41);  add_38 = getitem_41 = None
        mul_36 = torch.ops.aten.mul.Tensor(sub_11, rsqrt_10);  sub_11 = rsqrt_10 = None
        mul_37 = torch.ops.aten.mul.Tensor(mul_36, arg86_1);  mul_36 = arg86_1 = None
        add_40 = torch.ops.aten.add.Tensor(mul_37, arg87_1);  mul_37 = arg87_1 = None
        view_80 = torch.ops.aten.view.default(add_40, [128, 768])
        permute_50 = torch.ops.aten.permute.default(arg88_1, [1, 0]);  arg88_1 = None
        addmm_30 = torch.ops.aten.addmm.default(arg89_1, view_80, permute_50);  arg89_1 = view_80 = permute_50 = None
        view_81 = torch.ops.aten.view.default(addmm_30, [2, 64, 768]);  addmm_30 = None
        view_82 = torch.ops.aten.view.default(view_81, [2, 64, 12, 64]);  view_81 = None
        permute_51 = torch.ops.aten.permute.default(view_82, [0, 2, 1, 3]);  view_82 = None
        view_83 = torch.ops.aten.view.default(add_40, [128, 768])
        permute_52 = torch.ops.aten.permute.default(arg90_1, [1, 0]);  arg90_1 = None
        addmm_31 = torch.ops.aten.addmm.default(arg91_1, view_83, permute_52);  arg91_1 = view_83 = permute_52 = None
        view_84 = torch.ops.aten.view.default(addmm_31, [2, 64, 768]);  addmm_31 = None
        view_85 = torch.ops.aten.view.default(view_84, [2, 64, 12, 64]);  view_84 = None
        permute_53 = torch.ops.aten.permute.default(view_85, [0, 2, 1, 3]);  view_85 = None
        view_86 = torch.ops.aten.view.default(add_40, [128, 768])
        permute_54 = torch.ops.aten.permute.default(arg92_1, [1, 0]);  arg92_1 = None
        addmm_32 = torch.ops.aten.addmm.default(arg93_1, view_86, permute_54);  arg93_1 = view_86 = permute_54 = None
        view_87 = torch.ops.aten.view.default(addmm_32, [2, 64, 768]);  addmm_32 = None
        view_88 = torch.ops.aten.view.default(view_87, [2, 64, 12, 64]);  view_87 = None
        permute_55 = torch.ops.aten.permute.default(view_88, [0, 2, 1, 3]);  view_88 = None
        expand_7 = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_5 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_51, permute_53, permute_55, expand_7, False);  permute_51 = permute_53 = permute_55 = expand_7 = None
        getitem_42 = _scaled_dot_product_efficient_attention_5[0];  _scaled_dot_product_efficient_attention_5 = None
        permute_56 = torch.ops.aten.permute.default(getitem_42, [0, 2, 1, 3]);  getitem_42 = None
        view_89 = torch.ops.aten.view.default(permute_56, [2, 64, 768]);  permute_56 = None
        view_90 = torch.ops.aten.view.default(view_89, [128, 768]);  view_89 = None
        permute_57 = torch.ops.aten.permute.default(arg94_1, [1, 0]);  arg94_1 = None
        addmm_33 = torch.ops.aten.addmm.default(arg95_1, view_90, permute_57);  arg95_1 = view_90 = permute_57 = None
        view_91 = torch.ops.aten.view.default(addmm_33, [2, 64, 768]);  addmm_33 = None
        add_41 = torch.ops.aten.add.Tensor(view_91, add_40);  view_91 = add_40 = None
        var_mean_11 = torch.ops.aten.var_mean.correction(add_41, [2], correction = 0, keepdim = True)
        getitem_46 = var_mean_11[0]
        getitem_47 = var_mean_11[1];  var_mean_11 = None
        add_42 = torch.ops.aten.add.Tensor(getitem_46, 1e-05);  getitem_46 = None
        rsqrt_11 = torch.ops.aten.rsqrt.default(add_42);  add_42 = None
        sub_12 = torch.ops.aten.sub.Tensor(add_41, getitem_47);  add_41 = getitem_47 = None
        mul_38 = torch.ops.aten.mul.Tensor(sub_12, rsqrt_11);  sub_12 = rsqrt_11 = None
        mul_39 = torch.ops.aten.mul.Tensor(mul_38, arg96_1);  mul_38 = arg96_1 = None
        add_43 = torch.ops.aten.add.Tensor(mul_39, arg97_1);  mul_39 = arg97_1 = None
        view_92 = torch.ops.aten.view.default(add_43, [128, 768])
        permute_58 = torch.ops.aten.permute.default(arg98_1, [1, 0]);  arg98_1 = None
        addmm_34 = torch.ops.aten.addmm.default(arg99_1, view_92, permute_58);  arg99_1 = view_92 = permute_58 = None
        view_93 = torch.ops.aten.view.default(addmm_34, [2, 64, 3072]);  addmm_34 = None
        mul_40 = torch.ops.aten.mul.Tensor(view_93, 0.5)
        mul_41 = torch.ops.aten.mul.Tensor(view_93, 0.7071067811865476);  view_93 = None
        erf_5 = torch.ops.aten.erf.default(mul_41);  mul_41 = None
        add_44 = torch.ops.aten.add.Tensor(erf_5, 1);  erf_5 = None
        mul_42 = torch.ops.aten.mul.Tensor(mul_40, add_44);  mul_40 = add_44 = None
        view_94 = torch.ops.aten.view.default(mul_42, [128, 3072]);  mul_42 = None
        permute_59 = torch.ops.aten.permute.default(arg100_1, [1, 0]);  arg100_1 = None
        addmm_35 = torch.ops.aten.addmm.default(arg101_1, view_94, permute_59);  arg101_1 = view_94 = permute_59 = None
        view_95 = torch.ops.aten.view.default(addmm_35, [2, 64, 768]);  addmm_35 = None
        add_45 = torch.ops.aten.add.Tensor(view_95, add_43);  view_95 = add_43 = None
        var_mean_12 = torch.ops.aten.var_mean.correction(add_45, [2], correction = 0, keepdim = True)
        getitem_48 = var_mean_12[0]
        getitem_49 = var_mean_12[1];  var_mean_12 = None
        add_46 = torch.ops.aten.add.Tensor(getitem_48, 1e-05);  getitem_48 = None
        rsqrt_12 = torch.ops.aten.rsqrt.default(add_46);  add_46 = None
        sub_13 = torch.ops.aten.sub.Tensor(add_45, getitem_49);  add_45 = getitem_49 = None
        mul_43 = torch.ops.aten.mul.Tensor(sub_13, rsqrt_12);  sub_13 = rsqrt_12 = None
        mul_44 = torch.ops.aten.mul.Tensor(mul_43, arg102_1);  mul_43 = arg102_1 = None
        add_47 = torch.ops.aten.add.Tensor(mul_44, arg103_1);  mul_44 = arg103_1 = None
        view_96 = torch.ops.aten.view.default(add_47, [128, 768])
        permute_60 = torch.ops.aten.permute.default(arg104_1, [1, 0]);  arg104_1 = None
        addmm_36 = torch.ops.aten.addmm.default(arg105_1, view_96, permute_60);  arg105_1 = view_96 = permute_60 = None
        view_97 = torch.ops.aten.view.default(addmm_36, [2, 64, 768]);  addmm_36 = None
        view_98 = torch.ops.aten.view.default(view_97, [2, 64, 12, 64]);  view_97 = None
        permute_61 = torch.ops.aten.permute.default(view_98, [0, 2, 1, 3]);  view_98 = None
        view_99 = torch.ops.aten.view.default(add_47, [128, 768])
        permute_62 = torch.ops.aten.permute.default(arg106_1, [1, 0]);  arg106_1 = None
        addmm_37 = torch.ops.aten.addmm.default(arg107_1, view_99, permute_62);  arg107_1 = view_99 = permute_62 = None
        view_100 = torch.ops.aten.view.default(addmm_37, [2, 64, 768]);  addmm_37 = None
        view_101 = torch.ops.aten.view.default(view_100, [2, 64, 12, 64]);  view_100 = None
        permute_63 = torch.ops.aten.permute.default(view_101, [0, 2, 1, 3]);  view_101 = None
        view_102 = torch.ops.aten.view.default(add_47, [128, 768])
        permute_64 = torch.ops.aten.permute.default(arg108_1, [1, 0]);  arg108_1 = None
        addmm_38 = torch.ops.aten.addmm.default(arg109_1, view_102, permute_64);  arg109_1 = view_102 = permute_64 = None
        view_103 = torch.ops.aten.view.default(addmm_38, [2, 64, 768]);  addmm_38 = None
        view_104 = torch.ops.aten.view.default(view_103, [2, 64, 12, 64]);  view_103 = None
        permute_65 = torch.ops.aten.permute.default(view_104, [0, 2, 1, 3]);  view_104 = None
        expand_8 = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_6 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_61, permute_63, permute_65, expand_8, False);  permute_61 = permute_63 = permute_65 = expand_8 = None
        getitem_50 = _scaled_dot_product_efficient_attention_6[0];  _scaled_dot_product_efficient_attention_6 = None
        permute_66 = torch.ops.aten.permute.default(getitem_50, [0, 2, 1, 3]);  getitem_50 = None
        view_105 = torch.ops.aten.view.default(permute_66, [2, 64, 768]);  permute_66 = None
        view_106 = torch.ops.aten.view.default(view_105, [128, 768]);  view_105 = None
        permute_67 = torch.ops.aten.permute.default(arg110_1, [1, 0]);  arg110_1 = None
        addmm_39 = torch.ops.aten.addmm.default(arg111_1, view_106, permute_67);  arg111_1 = view_106 = permute_67 = None
        view_107 = torch.ops.aten.view.default(addmm_39, [2, 64, 768]);  addmm_39 = None
        add_48 = torch.ops.aten.add.Tensor(view_107, add_47);  view_107 = add_47 = None
        var_mean_13 = torch.ops.aten.var_mean.correction(add_48, [2], correction = 0, keepdim = True)
        getitem_54 = var_mean_13[0]
        getitem_55 = var_mean_13[1];  var_mean_13 = None
        add_49 = torch.ops.aten.add.Tensor(getitem_54, 1e-05);  getitem_54 = None
        rsqrt_13 = torch.ops.aten.rsqrt.default(add_49);  add_49 = None
        sub_14 = torch.ops.aten.sub.Tensor(add_48, getitem_55);  add_48 = getitem_55 = None
        mul_45 = torch.ops.aten.mul.Tensor(sub_14, rsqrt_13);  sub_14 = rsqrt_13 = None
        mul_46 = torch.ops.aten.mul.Tensor(mul_45, arg112_1);  mul_45 = arg112_1 = None
        add_50 = torch.ops.aten.add.Tensor(mul_46, arg113_1);  mul_46 = arg113_1 = None
        view_108 = torch.ops.aten.view.default(add_50, [128, 768])
        permute_68 = torch.ops.aten.permute.default(arg114_1, [1, 0]);  arg114_1 = None
        addmm_40 = torch.ops.aten.addmm.default(arg115_1, view_108, permute_68);  arg115_1 = view_108 = permute_68 = None
        view_109 = torch.ops.aten.view.default(addmm_40, [2, 64, 3072]);  addmm_40 = None
        mul_47 = torch.ops.aten.mul.Tensor(view_109, 0.5)
        mul_48 = torch.ops.aten.mul.Tensor(view_109, 0.7071067811865476);  view_109 = None
        erf_6 = torch.ops.aten.erf.default(mul_48);  mul_48 = None
        add_51 = torch.ops.aten.add.Tensor(erf_6, 1);  erf_6 = None
        mul_49 = torch.ops.aten.mul.Tensor(mul_47, add_51);  mul_47 = add_51 = None
        view_110 = torch.ops.aten.view.default(mul_49, [128, 3072]);  mul_49 = None
        permute_69 = torch.ops.aten.permute.default(arg116_1, [1, 0]);  arg116_1 = None
        addmm_41 = torch.ops.aten.addmm.default(arg117_1, view_110, permute_69);  arg117_1 = view_110 = permute_69 = None
        view_111 = torch.ops.aten.view.default(addmm_41, [2, 64, 768]);  addmm_41 = None
        add_52 = torch.ops.aten.add.Tensor(view_111, add_50);  view_111 = add_50 = None
        var_mean_14 = torch.ops.aten.var_mean.correction(add_52, [2], correction = 0, keepdim = True)
        getitem_56 = var_mean_14[0]
        getitem_57 = var_mean_14[1];  var_mean_14 = None
        add_53 = torch.ops.aten.add.Tensor(getitem_56, 1e-05);  getitem_56 = None
        rsqrt_14 = torch.ops.aten.rsqrt.default(add_53);  add_53 = None
        sub_15 = torch.ops.aten.sub.Tensor(add_52, getitem_57);  add_52 = getitem_57 = None
        mul_50 = torch.ops.aten.mul.Tensor(sub_15, rsqrt_14);  sub_15 = rsqrt_14 = None
        mul_51 = torch.ops.aten.mul.Tensor(mul_50, arg118_1);  mul_50 = arg118_1 = None
        add_54 = torch.ops.aten.add.Tensor(mul_51, arg119_1);  mul_51 = arg119_1 = None
        view_112 = torch.ops.aten.view.default(add_54, [128, 768])
        permute_70 = torch.ops.aten.permute.default(arg120_1, [1, 0]);  arg120_1 = None
        addmm_42 = torch.ops.aten.addmm.default(arg121_1, view_112, permute_70);  arg121_1 = view_112 = permute_70 = None
        view_113 = torch.ops.aten.view.default(addmm_42, [2, 64, 768]);  addmm_42 = None
        view_114 = torch.ops.aten.view.default(view_113, [2, 64, 12, 64]);  view_113 = None
        permute_71 = torch.ops.aten.permute.default(view_114, [0, 2, 1, 3]);  view_114 = None
        view_115 = torch.ops.aten.view.default(add_54, [128, 768])
        permute_72 = torch.ops.aten.permute.default(arg122_1, [1, 0]);  arg122_1 = None
        addmm_43 = torch.ops.aten.addmm.default(arg123_1, view_115, permute_72);  arg123_1 = view_115 = permute_72 = None
        view_116 = torch.ops.aten.view.default(addmm_43, [2, 64, 768]);  addmm_43 = None
        view_117 = torch.ops.aten.view.default(view_116, [2, 64, 12, 64]);  view_116 = None
        permute_73 = torch.ops.aten.permute.default(view_117, [0, 2, 1, 3]);  view_117 = None
        view_118 = torch.ops.aten.view.default(add_54, [128, 768])
        permute_74 = torch.ops.aten.permute.default(arg124_1, [1, 0]);  arg124_1 = None
        addmm_44 = torch.ops.aten.addmm.default(arg125_1, view_118, permute_74);  arg125_1 = view_118 = permute_74 = None
        view_119 = torch.ops.aten.view.default(addmm_44, [2, 64, 768]);  addmm_44 = None
        view_120 = torch.ops.aten.view.default(view_119, [2, 64, 12, 64]);  view_119 = None
        permute_75 = torch.ops.aten.permute.default(view_120, [0, 2, 1, 3]);  view_120 = None
        expand_9 = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_7 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_71, permute_73, permute_75, expand_9, False);  permute_71 = permute_73 = permute_75 = expand_9 = None
        getitem_58 = _scaled_dot_product_efficient_attention_7[0];  _scaled_dot_product_efficient_attention_7 = None
        permute_76 = torch.ops.aten.permute.default(getitem_58, [0, 2, 1, 3]);  getitem_58 = None
        view_121 = torch.ops.aten.view.default(permute_76, [2, 64, 768]);  permute_76 = None
        view_122 = torch.ops.aten.view.default(view_121, [128, 768]);  view_121 = None
        permute_77 = torch.ops.aten.permute.default(arg126_1, [1, 0]);  arg126_1 = None
        addmm_45 = torch.ops.aten.addmm.default(arg127_1, view_122, permute_77);  arg127_1 = view_122 = permute_77 = None
        view_123 = torch.ops.aten.view.default(addmm_45, [2, 64, 768]);  addmm_45 = None
        add_55 = torch.ops.aten.add.Tensor(view_123, add_54);  view_123 = add_54 = None
        var_mean_15 = torch.ops.aten.var_mean.correction(add_55, [2], correction = 0, keepdim = True)
        getitem_62 = var_mean_15[0]
        getitem_63 = var_mean_15[1];  var_mean_15 = None
        add_56 = torch.ops.aten.add.Tensor(getitem_62, 1e-05);  getitem_62 = None
        rsqrt_15 = torch.ops.aten.rsqrt.default(add_56);  add_56 = None
        sub_16 = torch.ops.aten.sub.Tensor(add_55, getitem_63);  add_55 = getitem_63 = None
        mul_52 = torch.ops.aten.mul.Tensor(sub_16, rsqrt_15);  sub_16 = rsqrt_15 = None
        mul_53 = torch.ops.aten.mul.Tensor(mul_52, arg128_1);  mul_52 = arg128_1 = None
        add_57 = torch.ops.aten.add.Tensor(mul_53, arg129_1);  mul_53 = arg129_1 = None
        view_124 = torch.ops.aten.view.default(add_57, [128, 768])
        permute_78 = torch.ops.aten.permute.default(arg130_1, [1, 0]);  arg130_1 = None
        addmm_46 = torch.ops.aten.addmm.default(arg131_1, view_124, permute_78);  arg131_1 = view_124 = permute_78 = None
        view_125 = torch.ops.aten.view.default(addmm_46, [2, 64, 3072]);  addmm_46 = None
        mul_54 = torch.ops.aten.mul.Tensor(view_125, 0.5)
        mul_55 = torch.ops.aten.mul.Tensor(view_125, 0.7071067811865476);  view_125 = None
        erf_7 = torch.ops.aten.erf.default(mul_55);  mul_55 = None
        add_58 = torch.ops.aten.add.Tensor(erf_7, 1);  erf_7 = None
        mul_56 = torch.ops.aten.mul.Tensor(mul_54, add_58);  mul_54 = add_58 = None
        view_126 = torch.ops.aten.view.default(mul_56, [128, 3072]);  mul_56 = None
        permute_79 = torch.ops.aten.permute.default(arg132_1, [1, 0]);  arg132_1 = None
        addmm_47 = torch.ops.aten.addmm.default(arg133_1, view_126, permute_79);  arg133_1 = view_126 = permute_79 = None
        view_127 = torch.ops.aten.view.default(addmm_47, [2, 64, 768]);  addmm_47 = None
        add_59 = torch.ops.aten.add.Tensor(view_127, add_57);  view_127 = add_57 = None
        var_mean_16 = torch.ops.aten.var_mean.correction(add_59, [2], correction = 0, keepdim = True)
        getitem_64 = var_mean_16[0]
        getitem_65 = var_mean_16[1];  var_mean_16 = None
        add_60 = torch.ops.aten.add.Tensor(getitem_64, 1e-05);  getitem_64 = None
        rsqrt_16 = torch.ops.aten.rsqrt.default(add_60);  add_60 = None
        sub_17 = torch.ops.aten.sub.Tensor(add_59, getitem_65);  add_59 = getitem_65 = None
        mul_57 = torch.ops.aten.mul.Tensor(sub_17, rsqrt_16);  sub_17 = rsqrt_16 = None
        mul_58 = torch.ops.aten.mul.Tensor(mul_57, arg134_1);  mul_57 = arg134_1 = None
        add_61 = torch.ops.aten.add.Tensor(mul_58, arg135_1);  mul_58 = arg135_1 = None
        view_128 = torch.ops.aten.view.default(add_61, [128, 768])
        permute_80 = torch.ops.aten.permute.default(arg136_1, [1, 0]);  arg136_1 = None
        addmm_48 = torch.ops.aten.addmm.default(arg137_1, view_128, permute_80);  arg137_1 = view_128 = permute_80 = None
        view_129 = torch.ops.aten.view.default(addmm_48, [2, 64, 768]);  addmm_48 = None
        view_130 = torch.ops.aten.view.default(view_129, [2, 64, 12, 64]);  view_129 = None
        permute_81 = torch.ops.aten.permute.default(view_130, [0, 2, 1, 3]);  view_130 = None
        view_131 = torch.ops.aten.view.default(add_61, [128, 768])
        permute_82 = torch.ops.aten.permute.default(arg138_1, [1, 0]);  arg138_1 = None
        addmm_49 = torch.ops.aten.addmm.default(arg139_1, view_131, permute_82);  arg139_1 = view_131 = permute_82 = None
        view_132 = torch.ops.aten.view.default(addmm_49, [2, 64, 768]);  addmm_49 = None
        view_133 = torch.ops.aten.view.default(view_132, [2, 64, 12, 64]);  view_132 = None
        permute_83 = torch.ops.aten.permute.default(view_133, [0, 2, 1, 3]);  view_133 = None
        view_134 = torch.ops.aten.view.default(add_61, [128, 768])
        permute_84 = torch.ops.aten.permute.default(arg140_1, [1, 0]);  arg140_1 = None
        addmm_50 = torch.ops.aten.addmm.default(arg141_1, view_134, permute_84);  arg141_1 = view_134 = permute_84 = None
        view_135 = torch.ops.aten.view.default(addmm_50, [2, 64, 768]);  addmm_50 = None
        view_136 = torch.ops.aten.view.default(view_135, [2, 64, 12, 64]);  view_135 = None
        permute_85 = torch.ops.aten.permute.default(view_136, [0, 2, 1, 3]);  view_136 = None
        expand_10 = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_8 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_81, permute_83, permute_85, expand_10, False);  permute_81 = permute_83 = permute_85 = expand_10 = None
        getitem_66 = _scaled_dot_product_efficient_attention_8[0];  _scaled_dot_product_efficient_attention_8 = None
        permute_86 = torch.ops.aten.permute.default(getitem_66, [0, 2, 1, 3]);  getitem_66 = None
        view_137 = torch.ops.aten.view.default(permute_86, [2, 64, 768]);  permute_86 = None
        view_138 = torch.ops.aten.view.default(view_137, [128, 768]);  view_137 = None
        permute_87 = torch.ops.aten.permute.default(arg142_1, [1, 0]);  arg142_1 = None
        addmm_51 = torch.ops.aten.addmm.default(arg143_1, view_138, permute_87);  arg143_1 = view_138 = permute_87 = None
        view_139 = torch.ops.aten.view.default(addmm_51, [2, 64, 768]);  addmm_51 = None
        add_62 = torch.ops.aten.add.Tensor(view_139, add_61);  view_139 = add_61 = None
        var_mean_17 = torch.ops.aten.var_mean.correction(add_62, [2], correction = 0, keepdim = True)
        getitem_70 = var_mean_17[0]
        getitem_71 = var_mean_17[1];  var_mean_17 = None
        add_63 = torch.ops.aten.add.Tensor(getitem_70, 1e-05);  getitem_70 = None
        rsqrt_17 = torch.ops.aten.rsqrt.default(add_63);  add_63 = None
        sub_18 = torch.ops.aten.sub.Tensor(add_62, getitem_71);  add_62 = getitem_71 = None
        mul_59 = torch.ops.aten.mul.Tensor(sub_18, rsqrt_17);  sub_18 = rsqrt_17 = None
        mul_60 = torch.ops.aten.mul.Tensor(mul_59, arg144_1);  mul_59 = arg144_1 = None
        add_64 = torch.ops.aten.add.Tensor(mul_60, arg145_1);  mul_60 = arg145_1 = None
        view_140 = torch.ops.aten.view.default(add_64, [128, 768])
        permute_88 = torch.ops.aten.permute.default(arg146_1, [1, 0]);  arg146_1 = None
        addmm_52 = torch.ops.aten.addmm.default(arg147_1, view_140, permute_88);  arg147_1 = view_140 = permute_88 = None
        view_141 = torch.ops.aten.view.default(addmm_52, [2, 64, 3072]);  addmm_52 = None
        mul_61 = torch.ops.aten.mul.Tensor(view_141, 0.5)
        mul_62 = torch.ops.aten.mul.Tensor(view_141, 0.7071067811865476);  view_141 = None
        erf_8 = torch.ops.aten.erf.default(mul_62);  mul_62 = None
        add_65 = torch.ops.aten.add.Tensor(erf_8, 1);  erf_8 = None
        mul_63 = torch.ops.aten.mul.Tensor(mul_61, add_65);  mul_61 = add_65 = None
        view_142 = torch.ops.aten.view.default(mul_63, [128, 3072]);  mul_63 = None
        permute_89 = torch.ops.aten.permute.default(arg148_1, [1, 0]);  arg148_1 = None
        addmm_53 = torch.ops.aten.addmm.default(arg149_1, view_142, permute_89);  arg149_1 = view_142 = permute_89 = None
        view_143 = torch.ops.aten.view.default(addmm_53, [2, 64, 768]);  addmm_53 = None
        add_66 = torch.ops.aten.add.Tensor(view_143, add_64);  view_143 = add_64 = None
        var_mean_18 = torch.ops.aten.var_mean.correction(add_66, [2], correction = 0, keepdim = True)
        getitem_72 = var_mean_18[0]
        getitem_73 = var_mean_18[1];  var_mean_18 = None
        add_67 = torch.ops.aten.add.Tensor(getitem_72, 1e-05);  getitem_72 = None
        rsqrt_18 = torch.ops.aten.rsqrt.default(add_67);  add_67 = None
        sub_19 = torch.ops.aten.sub.Tensor(add_66, getitem_73);  add_66 = getitem_73 = None
        mul_64 = torch.ops.aten.mul.Tensor(sub_19, rsqrt_18);  sub_19 = rsqrt_18 = None
        mul_65 = torch.ops.aten.mul.Tensor(mul_64, arg150_1);  mul_64 = arg150_1 = None
        add_68 = torch.ops.aten.add.Tensor(mul_65, arg151_1);  mul_65 = arg151_1 = None
        view_144 = torch.ops.aten.view.default(add_68, [128, 768])
        permute_90 = torch.ops.aten.permute.default(arg152_1, [1, 0]);  arg152_1 = None
        addmm_54 = torch.ops.aten.addmm.default(arg153_1, view_144, permute_90);  arg153_1 = view_144 = permute_90 = None
        view_145 = torch.ops.aten.view.default(addmm_54, [2, 64, 768]);  addmm_54 = None
        view_146 = torch.ops.aten.view.default(view_145, [2, 64, 12, 64]);  view_145 = None
        permute_91 = torch.ops.aten.permute.default(view_146, [0, 2, 1, 3]);  view_146 = None
        view_147 = torch.ops.aten.view.default(add_68, [128, 768])
        permute_92 = torch.ops.aten.permute.default(arg154_1, [1, 0]);  arg154_1 = None
        addmm_55 = torch.ops.aten.addmm.default(arg155_1, view_147, permute_92);  arg155_1 = view_147 = permute_92 = None
        view_148 = torch.ops.aten.view.default(addmm_55, [2, 64, 768]);  addmm_55 = None
        view_149 = torch.ops.aten.view.default(view_148, [2, 64, 12, 64]);  view_148 = None
        permute_93 = torch.ops.aten.permute.default(view_149, [0, 2, 1, 3]);  view_149 = None
        view_150 = torch.ops.aten.view.default(add_68, [128, 768])
        permute_94 = torch.ops.aten.permute.default(arg156_1, [1, 0]);  arg156_1 = None
        addmm_56 = torch.ops.aten.addmm.default(arg157_1, view_150, permute_94);  arg157_1 = view_150 = permute_94 = None
        view_151 = torch.ops.aten.view.default(addmm_56, [2, 64, 768]);  addmm_56 = None
        view_152 = torch.ops.aten.view.default(view_151, [2, 64, 12, 64]);  view_151 = None
        permute_95 = torch.ops.aten.permute.default(view_152, [0, 2, 1, 3]);  view_152 = None
        expand_11 = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_9 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_91, permute_93, permute_95, expand_11, False);  permute_91 = permute_93 = permute_95 = expand_11 = None
        getitem_74 = _scaled_dot_product_efficient_attention_9[0];  _scaled_dot_product_efficient_attention_9 = None
        permute_96 = torch.ops.aten.permute.default(getitem_74, [0, 2, 1, 3]);  getitem_74 = None
        view_153 = torch.ops.aten.view.default(permute_96, [2, 64, 768]);  permute_96 = None
        view_154 = torch.ops.aten.view.default(view_153, [128, 768]);  view_153 = None
        permute_97 = torch.ops.aten.permute.default(arg158_1, [1, 0]);  arg158_1 = None
        addmm_57 = torch.ops.aten.addmm.default(arg159_1, view_154, permute_97);  arg159_1 = view_154 = permute_97 = None
        view_155 = torch.ops.aten.view.default(addmm_57, [2, 64, 768]);  addmm_57 = None
        add_69 = torch.ops.aten.add.Tensor(view_155, add_68);  view_155 = add_68 = None
        var_mean_19 = torch.ops.aten.var_mean.correction(add_69, [2], correction = 0, keepdim = True)
        getitem_78 = var_mean_19[0]
        getitem_79 = var_mean_19[1];  var_mean_19 = None
        add_70 = torch.ops.aten.add.Tensor(getitem_78, 1e-05);  getitem_78 = None
        rsqrt_19 = torch.ops.aten.rsqrt.default(add_70);  add_70 = None
        sub_20 = torch.ops.aten.sub.Tensor(add_69, getitem_79);  add_69 = getitem_79 = None
        mul_66 = torch.ops.aten.mul.Tensor(sub_20, rsqrt_19);  sub_20 = rsqrt_19 = None
        mul_67 = torch.ops.aten.mul.Tensor(mul_66, arg160_1);  mul_66 = arg160_1 = None
        add_71 = torch.ops.aten.add.Tensor(mul_67, arg161_1);  mul_67 = arg161_1 = None
        view_156 = torch.ops.aten.view.default(add_71, [128, 768])
        permute_98 = torch.ops.aten.permute.default(arg162_1, [1, 0]);  arg162_1 = None
        addmm_58 = torch.ops.aten.addmm.default(arg163_1, view_156, permute_98);  arg163_1 = view_156 = permute_98 = None
        view_157 = torch.ops.aten.view.default(addmm_58, [2, 64, 3072]);  addmm_58 = None
        mul_68 = torch.ops.aten.mul.Tensor(view_157, 0.5)
        mul_69 = torch.ops.aten.mul.Tensor(view_157, 0.7071067811865476);  view_157 = None
        erf_9 = torch.ops.aten.erf.default(mul_69);  mul_69 = None
        add_72 = torch.ops.aten.add.Tensor(erf_9, 1);  erf_9 = None
        mul_70 = torch.ops.aten.mul.Tensor(mul_68, add_72);  mul_68 = add_72 = None
        view_158 = torch.ops.aten.view.default(mul_70, [128, 3072]);  mul_70 = None
        permute_99 = torch.ops.aten.permute.default(arg164_1, [1, 0]);  arg164_1 = None
        addmm_59 = torch.ops.aten.addmm.default(arg165_1, view_158, permute_99);  arg165_1 = view_158 = permute_99 = None
        view_159 = torch.ops.aten.view.default(addmm_59, [2, 64, 768]);  addmm_59 = None
        add_73 = torch.ops.aten.add.Tensor(view_159, add_71);  view_159 = add_71 = None
        var_mean_20 = torch.ops.aten.var_mean.correction(add_73, [2], correction = 0, keepdim = True)
        getitem_80 = var_mean_20[0]
        getitem_81 = var_mean_20[1];  var_mean_20 = None
        add_74 = torch.ops.aten.add.Tensor(getitem_80, 1e-05);  getitem_80 = None
        rsqrt_20 = torch.ops.aten.rsqrt.default(add_74);  add_74 = None
        sub_21 = torch.ops.aten.sub.Tensor(add_73, getitem_81);  add_73 = getitem_81 = None
        mul_71 = torch.ops.aten.mul.Tensor(sub_21, rsqrt_20);  sub_21 = rsqrt_20 = None
        mul_72 = torch.ops.aten.mul.Tensor(mul_71, arg166_1);  mul_71 = arg166_1 = None
        add_75 = torch.ops.aten.add.Tensor(mul_72, arg167_1);  mul_72 = arg167_1 = None
        view_160 = torch.ops.aten.view.default(add_75, [128, 768])
        permute_100 = torch.ops.aten.permute.default(arg168_1, [1, 0]);  arg168_1 = None
        addmm_60 = torch.ops.aten.addmm.default(arg169_1, view_160, permute_100);  arg169_1 = view_160 = permute_100 = None
        view_161 = torch.ops.aten.view.default(addmm_60, [2, 64, 768]);  addmm_60 = None
        view_162 = torch.ops.aten.view.default(view_161, [2, 64, 12, 64]);  view_161 = None
        permute_101 = torch.ops.aten.permute.default(view_162, [0, 2, 1, 3]);  view_162 = None
        view_163 = torch.ops.aten.view.default(add_75, [128, 768])
        permute_102 = torch.ops.aten.permute.default(arg170_1, [1, 0]);  arg170_1 = None
        addmm_61 = torch.ops.aten.addmm.default(arg171_1, view_163, permute_102);  arg171_1 = view_163 = permute_102 = None
        view_164 = torch.ops.aten.view.default(addmm_61, [2, 64, 768]);  addmm_61 = None
        view_165 = torch.ops.aten.view.default(view_164, [2, 64, 12, 64]);  view_164 = None
        permute_103 = torch.ops.aten.permute.default(view_165, [0, 2, 1, 3]);  view_165 = None
        view_166 = torch.ops.aten.view.default(add_75, [128, 768])
        permute_104 = torch.ops.aten.permute.default(arg172_1, [1, 0]);  arg172_1 = None
        addmm_62 = torch.ops.aten.addmm.default(arg173_1, view_166, permute_104);  arg173_1 = view_166 = permute_104 = None
        view_167 = torch.ops.aten.view.default(addmm_62, [2, 64, 768]);  addmm_62 = None
        view_168 = torch.ops.aten.view.default(view_167, [2, 64, 12, 64]);  view_167 = None
        permute_105 = torch.ops.aten.permute.default(view_168, [0, 2, 1, 3]);  view_168 = None
        expand_12 = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_10 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_101, permute_103, permute_105, expand_12, False);  permute_101 = permute_103 = permute_105 = expand_12 = None
        getitem_82 = _scaled_dot_product_efficient_attention_10[0];  _scaled_dot_product_efficient_attention_10 = None
        permute_106 = torch.ops.aten.permute.default(getitem_82, [0, 2, 1, 3]);  getitem_82 = None
        view_169 = torch.ops.aten.view.default(permute_106, [2, 64, 768]);  permute_106 = None
        view_170 = torch.ops.aten.view.default(view_169, [128, 768]);  view_169 = None
        permute_107 = torch.ops.aten.permute.default(arg174_1, [1, 0]);  arg174_1 = None
        addmm_63 = torch.ops.aten.addmm.default(arg175_1, view_170, permute_107);  arg175_1 = view_170 = permute_107 = None
        view_171 = torch.ops.aten.view.default(addmm_63, [2, 64, 768]);  addmm_63 = None
        add_76 = torch.ops.aten.add.Tensor(view_171, add_75);  view_171 = add_75 = None
        var_mean_21 = torch.ops.aten.var_mean.correction(add_76, [2], correction = 0, keepdim = True)
        getitem_86 = var_mean_21[0]
        getitem_87 = var_mean_21[1];  var_mean_21 = None
        add_77 = torch.ops.aten.add.Tensor(getitem_86, 1e-05);  getitem_86 = None
        rsqrt_21 = torch.ops.aten.rsqrt.default(add_77);  add_77 = None
        sub_22 = torch.ops.aten.sub.Tensor(add_76, getitem_87);  add_76 = getitem_87 = None
        mul_73 = torch.ops.aten.mul.Tensor(sub_22, rsqrt_21);  sub_22 = rsqrt_21 = None
        mul_74 = torch.ops.aten.mul.Tensor(mul_73, arg176_1);  mul_73 = arg176_1 = None
        add_78 = torch.ops.aten.add.Tensor(mul_74, arg177_1);  mul_74 = arg177_1 = None
        view_172 = torch.ops.aten.view.default(add_78, [128, 768])
        permute_108 = torch.ops.aten.permute.default(arg178_1, [1, 0]);  arg178_1 = None
        addmm_64 = torch.ops.aten.addmm.default(arg179_1, view_172, permute_108);  arg179_1 = view_172 = permute_108 = None
        view_173 = torch.ops.aten.view.default(addmm_64, [2, 64, 3072]);  addmm_64 = None
        mul_75 = torch.ops.aten.mul.Tensor(view_173, 0.5)
        mul_76 = torch.ops.aten.mul.Tensor(view_173, 0.7071067811865476);  view_173 = None
        erf_10 = torch.ops.aten.erf.default(mul_76);  mul_76 = None
        add_79 = torch.ops.aten.add.Tensor(erf_10, 1);  erf_10 = None
        mul_77 = torch.ops.aten.mul.Tensor(mul_75, add_79);  mul_75 = add_79 = None
        view_174 = torch.ops.aten.view.default(mul_77, [128, 3072]);  mul_77 = None
        permute_109 = torch.ops.aten.permute.default(arg180_1, [1, 0]);  arg180_1 = None
        addmm_65 = torch.ops.aten.addmm.default(arg181_1, view_174, permute_109);  arg181_1 = view_174 = permute_109 = None
        view_175 = torch.ops.aten.view.default(addmm_65, [2, 64, 768]);  addmm_65 = None
        add_80 = torch.ops.aten.add.Tensor(view_175, add_78);  view_175 = add_78 = None
        var_mean_22 = torch.ops.aten.var_mean.correction(add_80, [2], correction = 0, keepdim = True)
        getitem_88 = var_mean_22[0]
        getitem_89 = var_mean_22[1];  var_mean_22 = None
        add_81 = torch.ops.aten.add.Tensor(getitem_88, 1e-05);  getitem_88 = None
        rsqrt_22 = torch.ops.aten.rsqrt.default(add_81);  add_81 = None
        sub_23 = torch.ops.aten.sub.Tensor(add_80, getitem_89);  add_80 = getitem_89 = None
        mul_78 = torch.ops.aten.mul.Tensor(sub_23, rsqrt_22);  sub_23 = rsqrt_22 = None
        mul_79 = torch.ops.aten.mul.Tensor(mul_78, arg182_1);  mul_78 = arg182_1 = None
        add_82 = torch.ops.aten.add.Tensor(mul_79, arg183_1);  mul_79 = arg183_1 = None
        view_176 = torch.ops.aten.view.default(add_82, [128, 768])
        permute_110 = torch.ops.aten.permute.default(arg184_1, [1, 0]);  arg184_1 = None
        addmm_66 = torch.ops.aten.addmm.default(arg185_1, view_176, permute_110);  arg185_1 = view_176 = permute_110 = None
        view_177 = torch.ops.aten.view.default(addmm_66, [2, 64, 768]);  addmm_66 = None
        view_178 = torch.ops.aten.view.default(view_177, [2, 64, 12, 64]);  view_177 = None
        permute_111 = torch.ops.aten.permute.default(view_178, [0, 2, 1, 3]);  view_178 = None
        view_179 = torch.ops.aten.view.default(add_82, [128, 768])
        permute_112 = torch.ops.aten.permute.default(arg186_1, [1, 0]);  arg186_1 = None
        addmm_67 = torch.ops.aten.addmm.default(arg187_1, view_179, permute_112);  arg187_1 = view_179 = permute_112 = None
        view_180 = torch.ops.aten.view.default(addmm_67, [2, 64, 768]);  addmm_67 = None
        view_181 = torch.ops.aten.view.default(view_180, [2, 64, 12, 64]);  view_180 = None
        permute_113 = torch.ops.aten.permute.default(view_181, [0, 2, 1, 3]);  view_181 = None
        view_182 = torch.ops.aten.view.default(add_82, [128, 768])
        permute_114 = torch.ops.aten.permute.default(arg188_1, [1, 0]);  arg188_1 = None
        addmm_68 = torch.ops.aten.addmm.default(arg189_1, view_182, permute_114);  arg189_1 = view_182 = permute_114 = None
        view_183 = torch.ops.aten.view.default(addmm_68, [2, 64, 768]);  addmm_68 = None
        view_184 = torch.ops.aten.view.default(view_183, [2, 64, 12, 64]);  view_183 = None
        permute_115 = torch.ops.aten.permute.default(view_184, [0, 2, 1, 3]);  view_184 = None
        expand_13 = torch.ops.aten.expand.default(where, [2, 12, 64, 64]);  where = None
        _scaled_dot_product_efficient_attention_11 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_111, permute_113, permute_115, expand_13, False);  permute_111 = permute_113 = permute_115 = expand_13 = None
        getitem_90 = _scaled_dot_product_efficient_attention_11[0];  _scaled_dot_product_efficient_attention_11 = None
        permute_116 = torch.ops.aten.permute.default(getitem_90, [0, 2, 1, 3]);  getitem_90 = None
        view_185 = torch.ops.aten.view.default(permute_116, [2, 64, 768]);  permute_116 = None
        view_186 = torch.ops.aten.view.default(view_185, [128, 768]);  view_185 = None
        permute_117 = torch.ops.aten.permute.default(arg190_1, [1, 0]);  arg190_1 = None
        addmm_69 = torch.ops.aten.addmm.default(arg191_1, view_186, permute_117);  arg191_1 = view_186 = permute_117 = None
        view_187 = torch.ops.aten.view.default(addmm_69, [2, 64, 768]);  addmm_69 = None
        add_83 = torch.ops.aten.add.Tensor(view_187, add_82);  view_187 = add_82 = None
        var_mean_23 = torch.ops.aten.var_mean.correction(add_83, [2], correction = 0, keepdim = True)
        getitem_94 = var_mean_23[0]
        getitem_95 = var_mean_23[1];  var_mean_23 = None
        add_84 = torch.ops.aten.add.Tensor(getitem_94, 1e-05);  getitem_94 = None
        rsqrt_23 = torch.ops.aten.rsqrt.default(add_84);  add_84 = None
        sub_24 = torch.ops.aten.sub.Tensor(add_83, getitem_95);  add_83 = getitem_95 = None
        mul_80 = torch.ops.aten.mul.Tensor(sub_24, rsqrt_23);  sub_24 = rsqrt_23 = None
        mul_81 = torch.ops.aten.mul.Tensor(mul_80, arg192_1);  mul_80 = arg192_1 = None
        add_85 = torch.ops.aten.add.Tensor(mul_81, arg193_1);  mul_81 = arg193_1 = None
        view_188 = torch.ops.aten.view.default(add_85, [128, 768])
        permute_118 = torch.ops.aten.permute.default(arg194_1, [1, 0]);  arg194_1 = None
        addmm_70 = torch.ops.aten.addmm.default(arg195_1, view_188, permute_118);  arg195_1 = view_188 = permute_118 = None
        view_189 = torch.ops.aten.view.default(addmm_70, [2, 64, 3072]);  addmm_70 = None
        mul_82 = torch.ops.aten.mul.Tensor(view_189, 0.5)
        mul_83 = torch.ops.aten.mul.Tensor(view_189, 0.7071067811865476);  view_189 = None
        erf_11 = torch.ops.aten.erf.default(mul_83);  mul_83 = None
        add_86 = torch.ops.aten.add.Tensor(erf_11, 1);  erf_11 = None
        mul_84 = torch.ops.aten.mul.Tensor(mul_82, add_86);  mul_82 = add_86 = None
        view_190 = torch.ops.aten.view.default(mul_84, [128, 3072]);  mul_84 = None
        permute_119 = torch.ops.aten.permute.default(arg196_1, [1, 0]);  arg196_1 = None
        addmm_71 = torch.ops.aten.addmm.default(arg197_1, view_190, permute_119);  arg197_1 = view_190 = permute_119 = None
        view_191 = torch.ops.aten.view.default(addmm_71, [2, 64, 768]);  addmm_71 = None
        add_87 = torch.ops.aten.add.Tensor(view_191, add_85);  view_191 = add_85 = None
        var_mean_24 = torch.ops.aten.var_mean.correction(add_87, [2], correction = 0, keepdim = True)
        getitem_96 = var_mean_24[0]
        getitem_97 = var_mean_24[1];  var_mean_24 = None
        add_88 = torch.ops.aten.add.Tensor(getitem_96, 1e-05);  getitem_96 = None
        rsqrt_24 = torch.ops.aten.rsqrt.default(add_88);  add_88 = None
        sub_25 = torch.ops.aten.sub.Tensor(add_87, getitem_97);  add_87 = getitem_97 = None
        mul_85 = torch.ops.aten.mul.Tensor(sub_25, rsqrt_24);  sub_25 = rsqrt_24 = None
        mul_86 = torch.ops.aten.mul.Tensor(mul_85, arg198_1);  mul_85 = arg198_1 = None
        add_89 = torch.ops.aten.add.Tensor(mul_86, arg199_1);  mul_86 = arg199_1 = None
        return (add_89,)
        
def load_args(reader):
    buf0 = reader.storage(None, 1024, device=device(type='cuda', index=0), dtype_hint=torch.int64)
    reader.tensor(buf0, (2, 64), dtype=torch.int64, is_leaf=True)  # arg0_1
    buf1 = reader.storage(None, 4112, device=device(type='cuda', index=0), dtype_hint=torch.int64)
    reader.tensor(buf1, (1, 514), dtype=torch.int64, is_leaf=True)  # arg1_1
    buf2 = reader.storage(None, 154414080, device=device(type='cuda', index=0))
    reader.tensor(buf2, (50265, 768), is_leaf=True)  # arg2_1
    buf3 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf3, (1, 768), is_leaf=True)  # arg3_1
    buf4 = reader.storage(None, 1579008, device=device(type='cuda', index=0))
    reader.tensor(buf4, (514, 768), is_leaf=True)  # arg4_1
    buf5 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf5, (768,), is_leaf=True)  # arg5_1
    buf6 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf6, (768,), is_leaf=True)  # arg6_1
    buf7 = reader.storage(None, 1024, device=device(type='cuda', index=0), dtype_hint=torch.int64)
    reader.tensor(buf7, (2, 64), dtype=torch.int64, is_leaf=True)  # arg7_1
    buf8 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf8, (768, 768), is_leaf=True)  # arg8_1
    buf9 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf9, (768,), is_leaf=True)  # arg9_1
    buf10 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf10, (768, 768), is_leaf=True)  # arg10_1
    buf11 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf11, (768,), is_leaf=True)  # arg11_1
    buf12 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf12, (768, 768), is_leaf=True)  # arg12_1
    buf13 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf13, (768,), is_leaf=True)  # arg13_1
    buf14 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf14, (768, 768), is_leaf=True)  # arg14_1
    buf15 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf15, (768,), is_leaf=True)  # arg15_1
    buf16 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf16, (768,), is_leaf=True)  # arg16_1
    buf17 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf17, (768,), is_leaf=True)  # arg17_1
    buf18 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf18, (3072, 768), is_leaf=True)  # arg18_1
    buf19 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf19, (3072,), is_leaf=True)  # arg19_1
    buf20 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf20, (768, 3072), is_leaf=True)  # arg20_1
    buf21 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf21, (768,), is_leaf=True)  # arg21_1
    buf22 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf22, (768,), is_leaf=True)  # arg22_1
    buf23 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf23, (768,), is_leaf=True)  # arg23_1
    buf24 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf24, (768, 768), is_leaf=True)  # arg24_1
    buf25 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf25, (768,), is_leaf=True)  # arg25_1
    buf26 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf26, (768, 768), is_leaf=True)  # arg26_1
    buf27 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf27, (768,), is_leaf=True)  # arg27_1
    buf28 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf28, (768, 768), is_leaf=True)  # arg28_1
    buf29 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf29, (768,), is_leaf=True)  # arg29_1
    buf30 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf30, (768, 768), is_leaf=True)  # arg30_1
    buf31 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf31, (768,), is_leaf=True)  # arg31_1
    buf32 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf32, (768,), is_leaf=True)  # arg32_1
    buf33 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf33, (768,), is_leaf=True)  # arg33_1
    buf34 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf34, (3072, 768), is_leaf=True)  # arg34_1
    buf35 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf35, (3072,), is_leaf=True)  # arg35_1
    buf36 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf36, (768, 3072), is_leaf=True)  # arg36_1
    buf37 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf37, (768,), is_leaf=True)  # arg37_1
    buf38 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf38, (768,), is_leaf=True)  # arg38_1
    buf39 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf39, (768,), is_leaf=True)  # arg39_1
    buf40 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf40, (768, 768), is_leaf=True)  # arg40_1
    buf41 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf41, (768,), is_leaf=True)  # arg41_1
    buf42 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf42, (768, 768), is_leaf=True)  # arg42_1
    buf43 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf43, (768,), is_leaf=True)  # arg43_1
    buf44 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf44, (768, 768), is_leaf=True)  # arg44_1
    buf45 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf45, (768,), is_leaf=True)  # arg45_1
    buf46 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf46, (768, 768), is_leaf=True)  # arg46_1
    buf47 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf47, (768,), is_leaf=True)  # arg47_1
    buf48 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf48, (768,), is_leaf=True)  # arg48_1
    buf49 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf49, (768,), is_leaf=True)  # arg49_1
    buf50 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf50, (3072, 768), is_leaf=True)  # arg50_1
    buf51 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf51, (3072,), is_leaf=True)  # arg51_1
    buf52 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf52, (768, 3072), is_leaf=True)  # arg52_1
    buf53 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf53, (768,), is_leaf=True)  # arg53_1
    buf54 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf54, (768,), is_leaf=True)  # arg54_1
    buf55 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf55, (768,), is_leaf=True)  # arg55_1
    buf56 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf56, (768, 768), is_leaf=True)  # arg56_1
    buf57 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf57, (768,), is_leaf=True)  # arg57_1
    buf58 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf58, (768, 768), is_leaf=True)  # arg58_1
    buf59 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf59, (768,), is_leaf=True)  # arg59_1
    buf60 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf60, (768, 768), is_leaf=True)  # arg60_1
    buf61 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf61, (768,), is_leaf=True)  # arg61_1
    buf62 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf62, (768, 768), is_leaf=True)  # arg62_1
    buf63 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf63, (768,), is_leaf=True)  # arg63_1
    buf64 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf64, (768,), is_leaf=True)  # arg64_1
    buf65 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf65, (768,), is_leaf=True)  # arg65_1
    buf66 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf66, (3072, 768), is_leaf=True)  # arg66_1
    buf67 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf67, (3072,), is_leaf=True)  # arg67_1
    buf68 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf68, (768, 3072), is_leaf=True)  # arg68_1
    buf69 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf69, (768,), is_leaf=True)  # arg69_1
    buf70 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf70, (768,), is_leaf=True)  # arg70_1
    buf71 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf71, (768,), is_leaf=True)  # arg71_1
    buf72 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf72, (768, 768), is_leaf=True)  # arg72_1
    buf73 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf73, (768,), is_leaf=True)  # arg73_1
    buf74 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf74, (768, 768), is_leaf=True)  # arg74_1
    buf75 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf75, (768,), is_leaf=True)  # arg75_1
    buf76 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf76, (768, 768), is_leaf=True)  # arg76_1
    buf77 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf77, (768,), is_leaf=True)  # arg77_1
    buf78 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf78, (768, 768), is_leaf=True)  # arg78_1
    buf79 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf79, (768,), is_leaf=True)  # arg79_1
    buf80 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf80, (768,), is_leaf=True)  # arg80_1
    buf81 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf81, (768,), is_leaf=True)  # arg81_1
    buf82 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf82, (3072, 768), is_leaf=True)  # arg82_1
    buf83 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf83, (3072,), is_leaf=True)  # arg83_1
    buf84 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf84, (768, 3072), is_leaf=True)  # arg84_1
    buf85 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf85, (768,), is_leaf=True)  # arg85_1
    buf86 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf86, (768,), is_leaf=True)  # arg86_1
    buf87 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf87, (768,), is_leaf=True)  # arg87_1
    buf88 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf88, (768, 768), is_leaf=True)  # arg88_1
    buf89 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf89, (768,), is_leaf=True)  # arg89_1
    buf90 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf90, (768, 768), is_leaf=True)  # arg90_1
    buf91 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf91, (768,), is_leaf=True)  # arg91_1
    buf92 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf92, (768, 768), is_leaf=True)  # arg92_1
    buf93 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf93, (768,), is_leaf=True)  # arg93_1
    buf94 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf94, (768, 768), is_leaf=True)  # arg94_1
    buf95 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf95, (768,), is_leaf=True)  # arg95_1
    buf96 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf96, (768,), is_leaf=True)  # arg96_1
    buf97 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf97, (768,), is_leaf=True)  # arg97_1
    buf98 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf98, (3072, 768), is_leaf=True)  # arg98_1
    buf99 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf99, (3072,), is_leaf=True)  # arg99_1
    buf100 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf100, (768, 3072), is_leaf=True)  # arg100_1
    buf101 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf101, (768,), is_leaf=True)  # arg101_1
    buf102 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf102, (768,), is_leaf=True)  # arg102_1
    buf103 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf103, (768,), is_leaf=True)  # arg103_1
    buf104 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf104, (768, 768), is_leaf=True)  # arg104_1
    buf105 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf105, (768,), is_leaf=True)  # arg105_1
    buf106 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf106, (768, 768), is_leaf=True)  # arg106_1
    buf107 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf107, (768,), is_leaf=True)  # arg107_1
    buf108 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf108, (768, 768), is_leaf=True)  # arg108_1
    buf109 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf109, (768,), is_leaf=True)  # arg109_1
    buf110 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf110, (768, 768), is_leaf=True)  # arg110_1
    buf111 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf111, (768,), is_leaf=True)  # arg111_1
    buf112 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf112, (768,), is_leaf=True)  # arg112_1
    buf113 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf113, (768,), is_leaf=True)  # arg113_1
    buf114 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf114, (3072, 768), is_leaf=True)  # arg114_1
    buf115 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf115, (3072,), is_leaf=True)  # arg115_1
    buf116 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf116, (768, 3072), is_leaf=True)  # arg116_1
    buf117 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf117, (768,), is_leaf=True)  # arg117_1
    buf118 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf118, (768,), is_leaf=True)  # arg118_1
    buf119 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf119, (768,), is_leaf=True)  # arg119_1
    buf120 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf120, (768, 768), is_leaf=True)  # arg120_1
    buf121 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf121, (768,), is_leaf=True)  # arg121_1
    buf122 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf122, (768, 768), is_leaf=True)  # arg122_1
    buf123 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf123, (768,), is_leaf=True)  # arg123_1
    buf124 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf124, (768, 768), is_leaf=True)  # arg124_1
    buf125 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf125, (768,), is_leaf=True)  # arg125_1
    buf126 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf126, (768, 768), is_leaf=True)  # arg126_1
    buf127 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf127, (768,), is_leaf=True)  # arg127_1
    buf128 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf128, (768,), is_leaf=True)  # arg128_1
    buf129 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf129, (768,), is_leaf=True)  # arg129_1
    buf130 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf130, (3072, 768), is_leaf=True)  # arg130_1
    buf131 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf131, (3072,), is_leaf=True)  # arg131_1
    buf132 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf132, (768, 3072), is_leaf=True)  # arg132_1
    buf133 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf133, (768,), is_leaf=True)  # arg133_1
    buf134 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf134, (768,), is_leaf=True)  # arg134_1
    buf135 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf135, (768,), is_leaf=True)  # arg135_1
    buf136 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf136, (768, 768), is_leaf=True)  # arg136_1
    buf137 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf137, (768,), is_leaf=True)  # arg137_1
    buf138 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf138, (768, 768), is_leaf=True)  # arg138_1
    buf139 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf139, (768,), is_leaf=True)  # arg139_1
    buf140 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf140, (768, 768), is_leaf=True)  # arg140_1
    buf141 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf141, (768,), is_leaf=True)  # arg141_1
    buf142 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf142, (768, 768), is_leaf=True)  # arg142_1
    buf143 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf143, (768,), is_leaf=True)  # arg143_1
    buf144 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf144, (768,), is_leaf=True)  # arg144_1
    buf145 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf145, (768,), is_leaf=True)  # arg145_1
    buf146 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf146, (3072, 768), is_leaf=True)  # arg146_1
    buf147 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf147, (3072,), is_leaf=True)  # arg147_1
    buf148 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf148, (768, 3072), is_leaf=True)  # arg148_1
    buf149 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf149, (768,), is_leaf=True)  # arg149_1
    buf150 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf150, (768,), is_leaf=True)  # arg150_1
    buf151 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf151, (768,), is_leaf=True)  # arg151_1
    buf152 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf152, (768, 768), is_leaf=True)  # arg152_1
    buf153 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf153, (768,), is_leaf=True)  # arg153_1
    buf154 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf154, (768, 768), is_leaf=True)  # arg154_1
    buf155 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf155, (768,), is_leaf=True)  # arg155_1
    buf156 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf156, (768, 768), is_leaf=True)  # arg156_1
    buf157 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf157, (768,), is_leaf=True)  # arg157_1
    buf158 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf158, (768, 768), is_leaf=True)  # arg158_1
    buf159 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf159, (768,), is_leaf=True)  # arg159_1
    buf160 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf160, (768,), is_leaf=True)  # arg160_1
    buf161 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf161, (768,), is_leaf=True)  # arg161_1
    buf162 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf162, (3072, 768), is_leaf=True)  # arg162_1
    buf163 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf163, (3072,), is_leaf=True)  # arg163_1
    buf164 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf164, (768, 3072), is_leaf=True)  # arg164_1
    buf165 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf165, (768,), is_leaf=True)  # arg165_1
    buf166 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf166, (768,), is_leaf=True)  # arg166_1
    buf167 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf167, (768,), is_leaf=True)  # arg167_1
    buf168 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf168, (768, 768), is_leaf=True)  # arg168_1
    buf169 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf169, (768,), is_leaf=True)  # arg169_1
    buf170 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf170, (768, 768), is_leaf=True)  # arg170_1
    buf171 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf171, (768,), is_leaf=True)  # arg171_1
    buf172 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf172, (768, 768), is_leaf=True)  # arg172_1
    buf173 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf173, (768,), is_leaf=True)  # arg173_1
    buf174 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf174, (768, 768), is_leaf=True)  # arg174_1
    buf175 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf175, (768,), is_leaf=True)  # arg175_1
    buf176 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf176, (768,), is_leaf=True)  # arg176_1
    buf177 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf177, (768,), is_leaf=True)  # arg177_1
    buf178 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf178, (3072, 768), is_leaf=True)  # arg178_1
    buf179 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf179, (3072,), is_leaf=True)  # arg179_1
    buf180 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf180, (768, 3072), is_leaf=True)  # arg180_1
    buf181 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf181, (768,), is_leaf=True)  # arg181_1
    buf182 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf182, (768,), is_leaf=True)  # arg182_1
    buf183 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf183, (768,), is_leaf=True)  # arg183_1
    buf184 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf184, (768, 768), is_leaf=True)  # arg184_1
    buf185 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf185, (768,), is_leaf=True)  # arg185_1
    buf186 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf186, (768, 768), is_leaf=True)  # arg186_1
    buf187 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf187, (768,), is_leaf=True)  # arg187_1
    buf188 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf188, (768, 768), is_leaf=True)  # arg188_1
    buf189 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf189, (768,), is_leaf=True)  # arg189_1
    buf190 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf190, (768, 768), is_leaf=True)  # arg190_1
    buf191 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf191, (768,), is_leaf=True)  # arg191_1
    buf192 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf192, (768,), is_leaf=True)  # arg192_1
    buf193 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf193, (768,), is_leaf=True)  # arg193_1
    buf194 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf194, (3072, 768), is_leaf=True)  # arg194_1
    buf195 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf195, (3072,), is_leaf=True)  # arg195_1
    buf196 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf196, (768, 3072), is_leaf=True)  # arg196_1
    buf197 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf197, (768,), is_leaf=True)  # arg197_1
    buf198 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf198, (768,), is_leaf=True)  # arg198_1
    buf199 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf199, (768,), is_leaf=True)  # arg199_1
load_args._version = 0
mod = Repro()
if __name__ == '__main__':
    from torch._dynamo.repro.after_aot import run_repro
    with torch.no_grad():
        run_repro(mod, load_args, accuracy=False, command='run', save_dir=None, tracing_mode='real', check_str=None)
        # To run it separately, do 
        # mod, args = run_repro(mod, load_args, accuracy=False, command='get_args', save_dir=None, tracing_mode='real', check_str=None)
        # mod(*args)

# ===== run_2025_10_19_03_43_12_574129-pid_19/torchinductor/model__1_inference_1.1/fx_graph_transformed.py =====
class <lambda>(torch.nn.Module):
    def forward(self, arg0_1: "i64[2, 64]", arg1_1: "i64[1, 514]", arg2_1: "f32[50265, 768]", arg3_1: "f32[1, 768]", arg4_1: "f32[514, 768]", arg5_1: "f32[768]", arg6_1: "f32[768]", arg7_1: "i64[2, 64]", arg8_1: "f32[768, 768]", arg9_1: "f32[768]", arg10_1: "f32[768, 768]", arg11_1: "f32[768]", arg12_1: "f32[768, 768]", arg13_1: "f32[768]", arg14_1: "f32[768, 768]", arg15_1: "f32[768]", arg16_1: "f32[768]", arg17_1: "f32[768]", arg18_1: "f32[3072, 768]", arg19_1: "f32[3072]", arg20_1: "f32[768, 3072]", arg21_1: "f32[768]", arg22_1: "f32[768]", arg23_1: "f32[768]", arg24_1: "f32[768, 768]", arg25_1: "f32[768]", arg26_1: "f32[768, 768]", arg27_1: "f32[768]", arg28_1: "f32[768, 768]", arg29_1: "f32[768]", arg30_1: "f32[768, 768]", arg31_1: "f32[768]", arg32_1: "f32[768]", arg33_1: "f32[768]", arg34_1: "f32[3072, 768]", arg35_1: "f32[3072]", arg36_1: "f32[768, 3072]", arg37_1: "f32[768]", arg38_1: "f32[768]", arg39_1: "f32[768]", arg40_1: "f32[768, 768]", arg41_1: "f32[768]", arg42_1: "f32[768, 768]", arg43_1: "f32[768]", arg44_1: "f32[768, 768]", arg45_1: "f32[768]", arg46_1: "f32[768, 768]", arg47_1: "f32[768]", arg48_1: "f32[768]", arg49_1: "f32[768]", arg50_1: "f32[3072, 768]", arg51_1: "f32[3072]", arg52_1: "f32[768, 3072]", arg53_1: "f32[768]", arg54_1: "f32[768]", arg55_1: "f32[768]", arg56_1: "f32[768, 768]", arg57_1: "f32[768]", arg58_1: "f32[768, 768]", arg59_1: "f32[768]", arg60_1: "f32[768, 768]", arg61_1: "f32[768]", arg62_1: "f32[768, 768]", arg63_1: "f32[768]", arg64_1: "f32[768]", arg65_1: "f32[768]", arg66_1: "f32[3072, 768]", arg67_1: "f32[3072]", arg68_1: "f32[768, 3072]", arg69_1: "f32[768]", arg70_1: "f32[768]", arg71_1: "f32[768]", arg72_1: "f32[768, 768]", arg73_1: "f32[768]", arg74_1: "f32[768, 768]", arg75_1: "f32[768]", arg76_1: "f32[768, 768]", arg77_1: "f32[768]", arg78_1: "f32[768, 768]", arg79_1: "f32[768]", arg80_1: "f32[768]", arg81_1: "f32[768]", arg82_1: "f32[3072, 768]", arg83_1: "f32[3072]", arg84_1: "f32[768, 3072]", arg85_1: "f32[768]", arg86_1: "f32[768]", arg87_1: "f32[768]", arg88_1: "f32[768, 768]", arg89_1: "f32[768]", arg90_1: "f32[768, 768]", arg91_1: "f32[768]", arg92_1: "f32[768, 768]", arg93_1: "f32[768]", arg94_1: "f32[768, 768]", arg95_1: "f32[768]", arg96_1: "f32[768]", arg97_1: "f32[768]", arg98_1: "f32[3072, 768]", arg99_1: "f32[3072]", arg100_1: "f32[768, 3072]", arg101_1: "f32[768]", arg102_1: "f32[768]", arg103_1: "f32[768]", arg104_1: "f32[768, 768]", arg105_1: "f32[768]", arg106_1: "f32[768, 768]", arg107_1: "f32[768]", arg108_1: "f32[768, 768]", arg109_1: "f32[768]", arg110_1: "f32[768, 768]", arg111_1: "f32[768]", arg112_1: "f32[768]", arg113_1: "f32[768]", arg114_1: "f32[3072, 768]", arg115_1: "f32[3072]", arg116_1: "f32[768, 3072]", arg117_1: "f32[768]", arg118_1: "f32[768]", arg119_1: "f32[768]", arg120_1: "f32[768, 768]", arg121_1: "f32[768]", arg122_1: "f32[768, 768]", arg123_1: "f32[768]", arg124_1: "f32[768, 768]", arg125_1: "f32[768]", arg126_1: "f32[768, 768]", arg127_1: "f32[768]", arg128_1: "f32[768]", arg129_1: "f32[768]", arg130_1: "f32[3072, 768]", arg131_1: "f32[3072]", arg132_1: "f32[768, 3072]", arg133_1: "f32[768]", arg134_1: "f32[768]", arg135_1: "f32[768]", arg136_1: "f32[768, 768]", arg137_1: "f32[768]", arg138_1: "f32[768, 768]", arg139_1: "f32[768]", arg140_1: "f32[768, 768]", arg141_1: "f32[768]", arg142_1: "f32[768, 768]", arg143_1: "f32[768]", arg144_1: "f32[768]", arg145_1: "f32[768]", arg146_1: "f32[3072, 768]", arg147_1: "f32[3072]", arg148_1: "f32[768, 3072]", arg149_1: "f32[768]", arg150_1: "f32[768]", arg151_1: "f32[768]", arg152_1: "f32[768, 768]", arg153_1: "f32[768]", arg154_1: "f32[768, 768]", arg155_1: "f32[768]", arg156_1: "f32[768, 768]", arg157_1: "f32[768]", arg158_1: "f32[768, 768]", arg159_1: "f32[768]", arg160_1: "f32[768]", arg161_1: "f32[768]", arg162_1: "f32[3072, 768]", arg163_1: "f32[3072]", arg164_1: "f32[768, 3072]", arg165_1: "f32[768]", arg166_1: "f32[768]", arg167_1: "f32[768]", arg168_1: "f32[768, 768]", arg169_1: "f32[768]", arg170_1: "f32[768, 768]", arg171_1: "f32[768]", arg172_1: "f32[768, 768]", arg173_1: "f32[768]", arg174_1: "f32[768, 768]", arg175_1: "f32[768]", arg176_1: "f32[768]", arg177_1: "f32[768]", arg178_1: "f32[3072, 768]", arg179_1: "f32[3072]", arg180_1: "f32[768, 3072]", arg181_1: "f32[768]", arg182_1: "f32[768]", arg183_1: "f32[768]", arg184_1: "f32[768, 768]", arg185_1: "f32[768]", arg186_1: "f32[768, 768]", arg187_1: "f32[768]", arg188_1: "f32[768, 768]", arg189_1: "f32[768]", arg190_1: "f32[768, 768]", arg191_1: "f32[768]", arg192_1: "f32[768]", arg193_1: "f32[768]", arg194_1: "f32[3072, 768]", arg195_1: "f32[3072]", arg196_1: "f32[768, 3072]", arg197_1: "f32[768]", arg198_1: "f32[768]", arg199_1: "f32[768]"):
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:110 in forward, code: inputs_embeds = self.word_embeddings(input_ids)
        embedding: "f32[2, 64, 768]" = torch.ops.aten.embedding.default(arg2_1, arg0_1, 1);  arg2_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:788 in forward, code: buffered_token_type_ids = self.embeddings.token_type_ids[:, :seq_length]
        slice_2: "i64[1, 64]" = torch.ops.aten.slice.Tensor(arg1_1, 1, 0, 64);  arg1_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:789 in forward, code: buffered_token_type_ids_expanded = buffered_token_type_ids.expand(batch_size, seq_length)
        expand: "i64[2, 64]" = torch.ops.aten.expand.default(slice_2, [2, 64]);  slice_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:111 in forward, code: token_type_embeddings = self.token_type_embeddings(token_type_ids)
        embedding_1: "f32[2, 64, 768]" = torch.ops.aten.embedding.default(arg3_1, expand);  arg3_1 = expand = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:113 in forward, code: embeddings = inputs_embeds + token_type_embeddings
        add_2: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(embedding, embedding_1);  embedding = embedding_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:1551 in create_position_ids_from_input_ids, code: mask = input_ids.ne(padding_idx).int()
        ne: "b8[2, 64]" = torch.ops.aten.ne.Scalar(arg0_1, 1);  arg0_1 = None
        convert_element_type: "i32[2, 64]" = torch.ops.prims.convert_element_type.default(ne, torch.int32);  ne = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:1552 in create_position_ids_from_input_ids, code: incremental_indices = (torch.cumsum(mask, dim=1).type_as(mask) + past_key_values_length) * mask
        cumsum: "i64[2, 64]" = torch.ops.aten.cumsum.default(convert_element_type, 1)
        convert_element_type_1: "i32[2, 64]" = torch.ops.prims.convert_element_type.default(cumsum, torch.int32);  cumsum = None
        add: "i32[2, 64]" = torch.ops.aten.add.Tensor(convert_element_type_1, 0);  convert_element_type_1 = None
        mul: "i32[2, 64]" = torch.ops.aten.mul.Tensor(add, convert_element_type);  add = convert_element_type = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:1553 in create_position_ids_from_input_ids, code: return incremental_indices.long() + padding_idx
        convert_element_type_2: "i64[2, 64]" = torch.ops.prims.convert_element_type.default(mul, torch.int64);  mul = None
        add_1: "i64[2, 64]" = torch.ops.aten.add.Tensor(convert_element_type_2, 1);  convert_element_type_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:115 in forward, code: position_embeddings = self.position_embeddings(position_ids)
        embedding_2: "f32[2, 64, 768]" = torch.ops.aten.embedding.default(arg4_1, add_1, 1);  arg4_1 = add_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:116 in forward, code: embeddings += position_embeddings
        add_3: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_2, embedding_2);  add_2 = embedding_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:117 in forward, code: embeddings = self.LayerNorm(embeddings)
        var_mean = torch.ops.aten.var_mean.correction(add_3, [2], correction = 0, keepdim = True)
        getitem: "f32[2, 64, 1]" = var_mean[0]
        getitem_1: "f32[2, 64, 1]" = var_mean[1];  var_mean = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:196 in _expand_mask, code: inverted_mask = torch.tensor(1.0, dtype=dtype) - expanded_mask
        _tensor_constant0: "f32[]" = self._tensor_constant0;  _tensor_constant0 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:117 in forward, code: embeddings = self.LayerNorm(embeddings)
        sub: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_3, getitem_1);  add_3 = getitem_1 = None
        add_4: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem, 1e-05);  getitem = None
        rsqrt: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_4);  add_4 = None
        mul_1: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub, rsqrt);  sub = rsqrt = None
        mul_2: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_1, arg5_1);  mul_1 = arg5_1 = None
        add_5: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_2, arg6_1);  mul_2 = arg6_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view: "f32[128, 768]" = torch.ops.aten.reshape.default(add_5, [128, 768])
        permute: "f32[768, 768]" = torch.ops.aten.permute.default(arg8_1, [1, 0]);  arg8_1 = None
        addmm: "f32[128, 768]" = torch.ops.aten.addmm.default(arg9_1, view, permute);  arg9_1 = view = permute = None
        view_1: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm, [2, 64, 768]);  addmm = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_2: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_1, [2, 64, 12, 64]);  view_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_1: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_2, [0, 2, 1, 3]);  view_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_3: "f32[128, 768]" = torch.ops.aten.reshape.default(add_5, [128, 768])
        permute_2: "f32[768, 768]" = torch.ops.aten.permute.default(arg10_1, [1, 0]);  arg10_1 = None
        addmm_1: "f32[128, 768]" = torch.ops.aten.addmm.default(arg11_1, view_3, permute_2);  arg11_1 = view_3 = permute_2 = None
        view_4: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_1, [2, 64, 768]);  addmm_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_5: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_4, [2, 64, 12, 64]);  view_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_3: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_5, [0, 2, 1, 3]);  view_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_6: "f32[128, 768]" = torch.ops.aten.reshape.default(add_5, [128, 768])
        permute_4: "f32[768, 768]" = torch.ops.aten.permute.default(arg12_1, [1, 0]);  arg12_1 = None
        addmm_2: "f32[128, 768]" = torch.ops.aten.addmm.default(arg13_1, view_6, permute_4);  arg13_1 = view_6 = permute_4 = None
        view_7: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_2, [2, 64, 768]);  addmm_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_8: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_7, [2, 64, 12, 64]);  view_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_5: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_8, [0, 2, 1, 3]);  view_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:196 in _expand_mask, code: inverted_mask = torch.tensor(1.0, dtype=dtype) - expanded_mask
        full_default: "f32[]" = torch.ops.aten.full.default([], 1.0, dtype = torch.float32, layout = torch.strided, device = device(type='cpu'), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:194 in _expand_mask, code: expanded_mask = mask[:, None, None, :].expand(bsz, 1, tgt_len, src_len).to(dtype)
        unsqueeze: "i64[2, 1, 64]" = torch.ops.aten.unsqueeze.default(arg7_1, 1);  arg7_1 = None
        unsqueeze_1: "i64[2, 1, 1, 64]" = torch.ops.aten.unsqueeze.default(unsqueeze, 2);  unsqueeze = None
        expand_1: "i64[2, 1, 64, 64]" = torch.ops.aten.expand.default(unsqueeze_1, [2, 1, 64, 64]);  unsqueeze_1 = None
        convert_element_type_3: "f32[2, 1, 64, 64]" = torch.ops.prims.convert_element_type.default(expand_1, torch.float32);  expand_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:196 in _expand_mask, code: inverted_mask = torch.tensor(1.0, dtype=dtype) - expanded_mask
        sub_1: "f32[2, 1, 64, 64]" = torch.ops.aten.sub.Tensor(full_default, convert_element_type_3);  full_default = convert_element_type_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:198 in _expand_mask, code: return inverted_mask.masked_fill(inverted_mask.to(torch.bool), torch.finfo(dtype).min)
        convert_element_type_4: "b8[2, 1, 64, 64]" = torch.ops.prims.convert_element_type.default(sub_1, torch.bool)
        full_default_1: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where: "f32[2, 1, 64, 64]" = torch.ops.aten.where.self(convert_element_type_4, full_default_1, sub_1);  convert_element_type_4 = full_default_1 = sub_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_2: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_1, permute_3, permute_5, expand_2, False);  permute_1 = permute_3 = permute_5 = expand_2 = None
        getitem_2: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention[0];  _scaled_dot_product_efficient_attention = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_6: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_2, [0, 2, 1, 3]);  getitem_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_9: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(permute_6, [2, 64, 768]);  permute_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_10: "f32[128, 768]" = torch.ops.aten.reshape.default(view_9, [128, 768]);  view_9 = None
        permute_7: "f32[768, 768]" = torch.ops.aten.permute.default(arg14_1, [1, 0]);  arg14_1 = None
        
        # No stacktrace found for following nodes
        mm_default_35: "f32[128, 768]" = torch.ops.aten.mm.default(view_10, permute_7);  view_10 = permute_7 = None
        add_tensor_35: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_35, arg15_1);  mm_default_35 = arg15_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_11: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_35, [2, 64, 768]);  add_tensor_35 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_6: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_11, add_5);  view_11 = add_5 = None
        var_mean_1 = torch.ops.aten.var_mean.correction(add_6, [2], correction = 0, keepdim = True)
        getitem_6: "f32[2, 64, 1]" = var_mean_1[0]
        getitem_7: "f32[2, 64, 1]" = var_mean_1[1];  var_mean_1 = None
        sub_2: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_6, getitem_7);  add_6 = getitem_7 = None
        add_7: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_6, 1e-05);  getitem_6 = None
        rsqrt_1: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_7);  add_7 = None
        mul_3: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_2, rsqrt_1);  sub_2 = rsqrt_1 = None
        mul_4: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_3, arg16_1);  mul_3 = arg16_1 = None
        add_8: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_4, arg17_1);  mul_4 = arg17_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_12: "f32[128, 768]" = torch.ops.aten.reshape.default(add_8, [128, 768])
        permute_8: "f32[768, 3072]" = torch.ops.aten.permute.default(arg18_1, [1, 0]);  arg18_1 = None
        
        # No stacktrace found for following nodes
        mm_default_34: "f32[128, 3072]" = torch.ops.aten.mm.default(view_12, permute_8);  view_12 = permute_8 = None
        add_tensor_34: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_34, arg19_1);  mm_default_34 = arg19_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_13: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_34, [2, 64, 3072]);  add_tensor_34 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_5: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_13, 0.5)
        mul_6: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_13, 0.7071067811865476);  view_13 = None
        erf: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_6);  mul_6 = None
        add_9: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf, 1);  erf = None
        mul_7: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_5, add_9);  mul_5 = add_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_14: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_7, [128, 3072]);  mul_7 = None
        permute_9: "f32[3072, 768]" = torch.ops.aten.permute.default(arg20_1, [1, 0]);  arg20_1 = None
        
        # No stacktrace found for following nodes
        mm_default_33: "f32[128, 768]" = torch.ops.aten.mm.default(view_14, permute_9);  view_14 = permute_9 = None
        add_tensor_33: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_33, arg21_1);  mm_default_33 = arg21_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_15: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_33, [2, 64, 768]);  add_tensor_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_10: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_15, add_8);  view_15 = add_8 = None
        var_mean_2 = torch.ops.aten.var_mean.correction(add_10, [2], correction = 0, keepdim = True)
        getitem_8: "f32[2, 64, 1]" = var_mean_2[0]
        getitem_9: "f32[2, 64, 1]" = var_mean_2[1];  var_mean_2 = None
        sub_3: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_10, getitem_9);  add_10 = getitem_9 = None
        add_11: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_8, 1e-05);  getitem_8 = None
        rsqrt_2: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_11);  add_11 = None
        mul_8: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_3, rsqrt_2);  sub_3 = rsqrt_2 = None
        mul_9: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_8, arg22_1);  mul_8 = arg22_1 = None
        add_12: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_9, arg23_1);  mul_9 = arg23_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_16: "f32[128, 768]" = torch.ops.aten.reshape.default(add_12, [128, 768])
        permute_10: "f32[768, 768]" = torch.ops.aten.permute.default(arg24_1, [1, 0]);  arg24_1 = None
        addmm_6: "f32[128, 768]" = torch.ops.aten.addmm.default(arg25_1, view_16, permute_10);  arg25_1 = view_16 = permute_10 = None
        view_17: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_6, [2, 64, 768]);  addmm_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_18: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_17, [2, 64, 12, 64]);  view_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_11: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_18, [0, 2, 1, 3]);  view_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_19: "f32[128, 768]" = torch.ops.aten.reshape.default(add_12, [128, 768])
        permute_12: "f32[768, 768]" = torch.ops.aten.permute.default(arg26_1, [1, 0]);  arg26_1 = None
        addmm_7: "f32[128, 768]" = torch.ops.aten.addmm.default(arg27_1, view_19, permute_12);  arg27_1 = view_19 = permute_12 = None
        view_20: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_7, [2, 64, 768]);  addmm_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_21: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_20, [2, 64, 12, 64]);  view_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_13: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_21, [0, 2, 1, 3]);  view_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_22: "f32[128, 768]" = torch.ops.aten.reshape.default(add_12, [128, 768])
        permute_14: "f32[768, 768]" = torch.ops.aten.permute.default(arg28_1, [1, 0]);  arg28_1 = None
        addmm_8: "f32[128, 768]" = torch.ops.aten.addmm.default(arg29_1, view_22, permute_14);  arg29_1 = view_22 = permute_14 = None
        view_23: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_8, [2, 64, 768]);  addmm_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_24: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_23, [2, 64, 12, 64]);  view_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_15: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_24, [0, 2, 1, 3]);  view_24 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_3: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_1 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_11, permute_13, permute_15, expand_3, False);  permute_11 = permute_13 = permute_15 = expand_3 = None
        getitem_10: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_1[0];  _scaled_dot_product_efficient_attention_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_16: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_10, [0, 2, 1, 3]);  getitem_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_25: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(permute_16, [2, 64, 768]);  permute_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_26: "f32[128, 768]" = torch.ops.aten.reshape.default(view_25, [128, 768]);  view_25 = None
        permute_17: "f32[768, 768]" = torch.ops.aten.permute.default(arg30_1, [1, 0]);  arg30_1 = None
        
        # No stacktrace found for following nodes
        mm_default_32: "f32[128, 768]" = torch.ops.aten.mm.default(view_26, permute_17);  view_26 = permute_17 = None
        add_tensor_32: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_32, arg31_1);  mm_default_32 = arg31_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_27: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_32, [2, 64, 768]);  add_tensor_32 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_13: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_27, add_12);  view_27 = add_12 = None
        var_mean_3 = torch.ops.aten.var_mean.correction(add_13, [2], correction = 0, keepdim = True)
        getitem_14: "f32[2, 64, 1]" = var_mean_3[0]
        getitem_15: "f32[2, 64, 1]" = var_mean_3[1];  var_mean_3 = None
        sub_4: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_13, getitem_15);  add_13 = getitem_15 = None
        add_14: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_14, 1e-05);  getitem_14 = None
        rsqrt_3: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_14);  add_14 = None
        mul_10: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_4, rsqrt_3);  sub_4 = rsqrt_3 = None
        mul_11: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_10, arg32_1);  mul_10 = arg32_1 = None
        add_15: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_11, arg33_1);  mul_11 = arg33_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_28: "f32[128, 768]" = torch.ops.aten.reshape.default(add_15, [128, 768])
        permute_18: "f32[768, 3072]" = torch.ops.aten.permute.default(arg34_1, [1, 0]);  arg34_1 = None
        
        # No stacktrace found for following nodes
        mm_default_31: "f32[128, 3072]" = torch.ops.aten.mm.default(view_28, permute_18);  view_28 = permute_18 = None
        add_tensor_31: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_31, arg35_1);  mm_default_31 = arg35_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_29: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_31, [2, 64, 3072]);  add_tensor_31 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_12: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_29, 0.5)
        mul_13: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_29, 0.7071067811865476);  view_29 = None
        erf_1: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_13);  mul_13 = None
        add_16: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_1, 1);  erf_1 = None
        mul_14: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_12, add_16);  mul_12 = add_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_30: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_14, [128, 3072]);  mul_14 = None
        permute_19: "f32[3072, 768]" = torch.ops.aten.permute.default(arg36_1, [1, 0]);  arg36_1 = None
        
        # No stacktrace found for following nodes
        mm_default_30: "f32[128, 768]" = torch.ops.aten.mm.default(view_30, permute_19);  view_30 = permute_19 = None
        add_tensor_30: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_30, arg37_1);  mm_default_30 = arg37_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_31: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_30, [2, 64, 768]);  add_tensor_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_17: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_31, add_15);  view_31 = add_15 = None
        var_mean_4 = torch.ops.aten.var_mean.correction(add_17, [2], correction = 0, keepdim = True)
        getitem_16: "f32[2, 64, 1]" = var_mean_4[0]
        getitem_17: "f32[2, 64, 1]" = var_mean_4[1];  var_mean_4 = None
        sub_5: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_17, getitem_17);  add_17 = getitem_17 = None
        add_18: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_16, 1e-05);  getitem_16 = None
        rsqrt_4: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_18);  add_18 = None
        mul_15: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_5, rsqrt_4);  sub_5 = rsqrt_4 = None
        mul_16: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_15, arg38_1);  mul_15 = arg38_1 = None
        add_19: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_16, arg39_1);  mul_16 = arg39_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_32: "f32[128, 768]" = torch.ops.aten.reshape.default(add_19, [128, 768])
        permute_20: "f32[768, 768]" = torch.ops.aten.permute.default(arg40_1, [1, 0]);  arg40_1 = None
        addmm_12: "f32[128, 768]" = torch.ops.aten.addmm.default(arg41_1, view_32, permute_20);  arg41_1 = view_32 = permute_20 = None
        view_33: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_12, [2, 64, 768]);  addmm_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_34: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_33, [2, 64, 12, 64]);  view_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_21: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_34, [0, 2, 1, 3]);  view_34 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_35: "f32[128, 768]" = torch.ops.aten.reshape.default(add_19, [128, 768])
        permute_22: "f32[768, 768]" = torch.ops.aten.permute.default(arg42_1, [1, 0]);  arg42_1 = None
        addmm_13: "f32[128, 768]" = torch.ops.aten.addmm.default(arg43_1, view_35, permute_22);  arg43_1 = view_35 = permute_22 = None
        view_36: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_13, [2, 64, 768]);  addmm_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_37: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_36, [2, 64, 12, 64]);  view_36 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_23: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_37, [0, 2, 1, 3]);  view_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_38: "f32[128, 768]" = torch.ops.aten.reshape.default(add_19, [128, 768])
        permute_24: "f32[768, 768]" = torch.ops.aten.permute.default(arg44_1, [1, 0]);  arg44_1 = None
        addmm_14: "f32[128, 768]" = torch.ops.aten.addmm.default(arg45_1, view_38, permute_24);  arg45_1 = view_38 = permute_24 = None
        view_39: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_14, [2, 64, 768]);  addmm_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_40: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_39, [2, 64, 12, 64]);  view_39 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_25: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_40, [0, 2, 1, 3]);  view_40 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_4: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_2 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_21, permute_23, permute_25, expand_4, False);  permute_21 = permute_23 = permute_25 = expand_4 = None
        getitem_18: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_2[0];  _scaled_dot_product_efficient_attention_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_26: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_18, [0, 2, 1, 3]);  getitem_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_41: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(permute_26, [2, 64, 768]);  permute_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_42: "f32[128, 768]" = torch.ops.aten.reshape.default(view_41, [128, 768]);  view_41 = None
        permute_27: "f32[768, 768]" = torch.ops.aten.permute.default(arg46_1, [1, 0]);  arg46_1 = None
        
        # No stacktrace found for following nodes
        mm_default_29: "f32[128, 768]" = torch.ops.aten.mm.default(view_42, permute_27);  view_42 = permute_27 = None
        add_tensor_29: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_29, arg47_1);  mm_default_29 = arg47_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_43: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_29, [2, 64, 768]);  add_tensor_29 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_20: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_43, add_19);  view_43 = add_19 = None
        var_mean_5 = torch.ops.aten.var_mean.correction(add_20, [2], correction = 0, keepdim = True)
        getitem_22: "f32[2, 64, 1]" = var_mean_5[0]
        getitem_23: "f32[2, 64, 1]" = var_mean_5[1];  var_mean_5 = None
        sub_6: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_20, getitem_23);  add_20 = getitem_23 = None
        add_21: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_22, 1e-05);  getitem_22 = None
        rsqrt_5: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_21);  add_21 = None
        mul_17: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_6, rsqrt_5);  sub_6 = rsqrt_5 = None
        mul_18: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_17, arg48_1);  mul_17 = arg48_1 = None
        add_22: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_18, arg49_1);  mul_18 = arg49_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_44: "f32[128, 768]" = torch.ops.aten.reshape.default(add_22, [128, 768])
        permute_28: "f32[768, 3072]" = torch.ops.aten.permute.default(arg50_1, [1, 0]);  arg50_1 = None
        
        # No stacktrace found for following nodes
        mm_default_28: "f32[128, 3072]" = torch.ops.aten.mm.default(view_44, permute_28);  view_44 = permute_28 = None
        add_tensor_28: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_28, arg51_1);  mm_default_28 = arg51_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_45: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_28, [2, 64, 3072]);  add_tensor_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_19: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_45, 0.5)
        mul_20: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_45, 0.7071067811865476);  view_45 = None
        erf_2: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_20);  mul_20 = None
        add_23: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_2, 1);  erf_2 = None
        mul_21: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_19, add_23);  mul_19 = add_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_46: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_21, [128, 3072]);  mul_21 = None
        permute_29: "f32[3072, 768]" = torch.ops.aten.permute.default(arg52_1, [1, 0]);  arg52_1 = None
        
        # No stacktrace found for following nodes
        mm_default_27: "f32[128, 768]" = torch.ops.aten.mm.default(view_46, permute_29);  view_46 = permute_29 = None
        add_tensor_27: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_27, arg53_1);  mm_default_27 = arg53_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_47: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_27, [2, 64, 768]);  add_tensor_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_24: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_47, add_22);  view_47 = add_22 = None
        var_mean_6 = torch.ops.aten.var_mean.correction(add_24, [2], correction = 0, keepdim = True)
        getitem_24: "f32[2, 64, 1]" = var_mean_6[0]
        getitem_25: "f32[2, 64, 1]" = var_mean_6[1];  var_mean_6 = None
        sub_7: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_24, getitem_25);  add_24 = getitem_25 = None
        add_25: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_24, 1e-05);  getitem_24 = None
        rsqrt_6: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_25);  add_25 = None
        mul_22: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_7, rsqrt_6);  sub_7 = rsqrt_6 = None
        mul_23: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_22, arg54_1);  mul_22 = arg54_1 = None
        add_26: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_23, arg55_1);  mul_23 = arg55_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_48: "f32[128, 768]" = torch.ops.aten.reshape.default(add_26, [128, 768])
        permute_30: "f32[768, 768]" = torch.ops.aten.permute.default(arg56_1, [1, 0]);  arg56_1 = None
        addmm_18: "f32[128, 768]" = torch.ops.aten.addmm.default(arg57_1, view_48, permute_30);  arg57_1 = view_48 = permute_30 = None
        view_49: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_18, [2, 64, 768]);  addmm_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_50: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_49, [2, 64, 12, 64]);  view_49 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_31: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_50, [0, 2, 1, 3]);  view_50 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_51: "f32[128, 768]" = torch.ops.aten.reshape.default(add_26, [128, 768])
        permute_32: "f32[768, 768]" = torch.ops.aten.permute.default(arg58_1, [1, 0]);  arg58_1 = None
        addmm_19: "f32[128, 768]" = torch.ops.aten.addmm.default(arg59_1, view_51, permute_32);  arg59_1 = view_51 = permute_32 = None
        view_52: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_19, [2, 64, 768]);  addmm_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_53: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_52, [2, 64, 12, 64]);  view_52 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_33: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_53, [0, 2, 1, 3]);  view_53 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_54: "f32[128, 768]" = torch.ops.aten.reshape.default(add_26, [128, 768])
        permute_34: "f32[768, 768]" = torch.ops.aten.permute.default(arg60_1, [1, 0]);  arg60_1 = None
        addmm_20: "f32[128, 768]" = torch.ops.aten.addmm.default(arg61_1, view_54, permute_34);  arg61_1 = view_54 = permute_34 = None
        view_55: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_20, [2, 64, 768]);  addmm_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_56: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_55, [2, 64, 12, 64]);  view_55 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_35: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_56, [0, 2, 1, 3]);  view_56 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_5: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_3 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_31, permute_33, permute_35, expand_5, False);  permute_31 = permute_33 = permute_35 = expand_5 = None
        getitem_26: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_3[0];  _scaled_dot_product_efficient_attention_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_36: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_26, [0, 2, 1, 3]);  getitem_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_57: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(permute_36, [2, 64, 768]);  permute_36 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_58: "f32[128, 768]" = torch.ops.aten.reshape.default(view_57, [128, 768]);  view_57 = None
        permute_37: "f32[768, 768]" = torch.ops.aten.permute.default(arg62_1, [1, 0]);  arg62_1 = None
        
        # No stacktrace found for following nodes
        mm_default_26: "f32[128, 768]" = torch.ops.aten.mm.default(view_58, permute_37);  view_58 = permute_37 = None
        add_tensor_26: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_26, arg63_1);  mm_default_26 = arg63_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_59: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_26, [2, 64, 768]);  add_tensor_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_27: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_59, add_26);  view_59 = add_26 = None
        var_mean_7 = torch.ops.aten.var_mean.correction(add_27, [2], correction = 0, keepdim = True)
        getitem_30: "f32[2, 64, 1]" = var_mean_7[0]
        getitem_31: "f32[2, 64, 1]" = var_mean_7[1];  var_mean_7 = None
        sub_8: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_27, getitem_31);  add_27 = getitem_31 = None
        add_28: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_30, 1e-05);  getitem_30 = None
        rsqrt_7: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_28);  add_28 = None
        mul_24: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_8, rsqrt_7);  sub_8 = rsqrt_7 = None
        mul_25: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_24, arg64_1);  mul_24 = arg64_1 = None
        add_29: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_25, arg65_1);  mul_25 = arg65_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_60: "f32[128, 768]" = torch.ops.aten.reshape.default(add_29, [128, 768])
        permute_38: "f32[768, 3072]" = torch.ops.aten.permute.default(arg66_1, [1, 0]);  arg66_1 = None
        
        # No stacktrace found for following nodes
        mm_default_25: "f32[128, 3072]" = torch.ops.aten.mm.default(view_60, permute_38);  view_60 = permute_38 = None
        add_tensor_25: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_25, arg67_1);  mm_default_25 = arg67_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_61: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_25, [2, 64, 3072]);  add_tensor_25 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_26: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_61, 0.5)
        mul_27: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_61, 0.7071067811865476);  view_61 = None
        erf_3: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_27);  mul_27 = None
        add_30: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_3, 1);  erf_3 = None
        mul_28: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_26, add_30);  mul_26 = add_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_62: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_28, [128, 3072]);  mul_28 = None
        permute_39: "f32[3072, 768]" = torch.ops.aten.permute.default(arg68_1, [1, 0]);  arg68_1 = None
        
        # No stacktrace found for following nodes
        mm_default_24: "f32[128, 768]" = torch.ops.aten.mm.default(view_62, permute_39);  view_62 = permute_39 = None
        add_tensor_24: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_24, arg69_1);  mm_default_24 = arg69_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_63: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_24, [2, 64, 768]);  add_tensor_24 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_31: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_63, add_29);  view_63 = add_29 = None
        var_mean_8 = torch.ops.aten.var_mean.correction(add_31, [2], correction = 0, keepdim = True)
        getitem_32: "f32[2, 64, 1]" = var_mean_8[0]
        getitem_33: "f32[2, 64, 1]" = var_mean_8[1];  var_mean_8 = None
        sub_9: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_31, getitem_33);  add_31 = getitem_33 = None
        add_32: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_32, 1e-05);  getitem_32 = None
        rsqrt_8: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_32);  add_32 = None
        mul_29: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_9, rsqrt_8);  sub_9 = rsqrt_8 = None
        mul_30: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_29, arg70_1);  mul_29 = arg70_1 = None
        add_33: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_30, arg71_1);  mul_30 = arg71_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_64: "f32[128, 768]" = torch.ops.aten.reshape.default(add_33, [128, 768])
        permute_40: "f32[768, 768]" = torch.ops.aten.permute.default(arg72_1, [1, 0]);  arg72_1 = None
        addmm_24: "f32[128, 768]" = torch.ops.aten.addmm.default(arg73_1, view_64, permute_40);  arg73_1 = view_64 = permute_40 = None
        view_65: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_24, [2, 64, 768]);  addmm_24 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_66: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_65, [2, 64, 12, 64]);  view_65 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_41: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_66, [0, 2, 1, 3]);  view_66 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_67: "f32[128, 768]" = torch.ops.aten.reshape.default(add_33, [128, 768])
        permute_42: "f32[768, 768]" = torch.ops.aten.permute.default(arg74_1, [1, 0]);  arg74_1 = None
        addmm_25: "f32[128, 768]" = torch.ops.aten.addmm.default(arg75_1, view_67, permute_42);  arg75_1 = view_67 = permute_42 = None
        view_68: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_25, [2, 64, 768]);  addmm_25 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_69: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_68, [2, 64, 12, 64]);  view_68 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_43: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_69, [0, 2, 1, 3]);  view_69 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_70: "f32[128, 768]" = torch.ops.aten.reshape.default(add_33, [128, 768])
        permute_44: "f32[768, 768]" = torch.ops.aten.permute.default(arg76_1, [1, 0]);  arg76_1 = None
        addmm_26: "f32[128, 768]" = torch.ops.aten.addmm.default(arg77_1, view_70, permute_44);  arg77_1 = view_70 = permute_44 = None
        view_71: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_26, [2, 64, 768]);  addmm_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_72: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_71, [2, 64, 12, 64]);  view_71 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_45: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_72, [0, 2, 1, 3]);  view_72 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_6: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_4 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_41, permute_43, permute_45, expand_6, False);  permute_41 = permute_43 = permute_45 = expand_6 = None
        getitem_34: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_4[0];  _scaled_dot_product_efficient_attention_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_46: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_34, [0, 2, 1, 3]);  getitem_34 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_73: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(permute_46, [2, 64, 768]);  permute_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_74: "f32[128, 768]" = torch.ops.aten.reshape.default(view_73, [128, 768]);  view_73 = None
        permute_47: "f32[768, 768]" = torch.ops.aten.permute.default(arg78_1, [1, 0]);  arg78_1 = None
        
        # No stacktrace found for following nodes
        mm_default_23: "f32[128, 768]" = torch.ops.aten.mm.default(view_74, permute_47);  view_74 = permute_47 = None
        add_tensor_23: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_23, arg79_1);  mm_default_23 = arg79_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_75: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_23, [2, 64, 768]);  add_tensor_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_34: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_75, add_33);  view_75 = add_33 = None
        var_mean_9 = torch.ops.aten.var_mean.correction(add_34, [2], correction = 0, keepdim = True)
        getitem_38: "f32[2, 64, 1]" = var_mean_9[0]
        getitem_39: "f32[2, 64, 1]" = var_mean_9[1];  var_mean_9 = None
        sub_10: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_34, getitem_39);  add_34 = getitem_39 = None
        add_35: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_38, 1e-05);  getitem_38 = None
        rsqrt_9: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_35);  add_35 = None
        mul_31: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_10, rsqrt_9);  sub_10 = rsqrt_9 = None
        mul_32: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_31, arg80_1);  mul_31 = arg80_1 = None
        add_36: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_32, arg81_1);  mul_32 = arg81_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_76: "f32[128, 768]" = torch.ops.aten.reshape.default(add_36, [128, 768])
        permute_48: "f32[768, 3072]" = torch.ops.aten.permute.default(arg82_1, [1, 0]);  arg82_1 = None
        
        # No stacktrace found for following nodes
        mm_default_22: "f32[128, 3072]" = torch.ops.aten.mm.default(view_76, permute_48);  view_76 = permute_48 = None
        add_tensor_22: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_22, arg83_1);  mm_default_22 = arg83_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_77: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_22, [2, 64, 3072]);  add_tensor_22 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_33: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_77, 0.5)
        mul_34: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_77, 0.7071067811865476);  view_77 = None
        erf_4: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_34);  mul_34 = None
        add_37: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_4, 1);  erf_4 = None
        mul_35: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_33, add_37);  mul_33 = add_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_78: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_35, [128, 3072]);  mul_35 = None
        permute_49: "f32[3072, 768]" = torch.ops.aten.permute.default(arg84_1, [1, 0]);  arg84_1 = None
        
        # No stacktrace found for following nodes
        mm_default_21: "f32[128, 768]" = torch.ops.aten.mm.default(view_78, permute_49);  view_78 = permute_49 = None
        add_tensor_21: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_21, arg85_1);  mm_default_21 = arg85_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_79: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_21, [2, 64, 768]);  add_tensor_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_38: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_79, add_36);  view_79 = add_36 = None
        var_mean_10 = torch.ops.aten.var_mean.correction(add_38, [2], correction = 0, keepdim = True)
        getitem_40: "f32[2, 64, 1]" = var_mean_10[0]
        getitem_41: "f32[2, 64, 1]" = var_mean_10[1];  var_mean_10 = None
        sub_11: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_38, getitem_41);  add_38 = getitem_41 = None
        add_39: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_40, 1e-05);  getitem_40 = None
        rsqrt_10: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_39);  add_39 = None
        mul_36: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_11, rsqrt_10);  sub_11 = rsqrt_10 = None
        mul_37: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_36, arg86_1);  mul_36 = arg86_1 = None
        add_40: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_37, arg87_1);  mul_37 = arg87_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_80: "f32[128, 768]" = torch.ops.aten.reshape.default(add_40, [128, 768])
        permute_50: "f32[768, 768]" = torch.ops.aten.permute.default(arg88_1, [1, 0]);  arg88_1 = None
        addmm_30: "f32[128, 768]" = torch.ops.aten.addmm.default(arg89_1, view_80, permute_50);  arg89_1 = view_80 = permute_50 = None
        view_81: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_30, [2, 64, 768]);  addmm_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_82: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_81, [2, 64, 12, 64]);  view_81 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_51: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_82, [0, 2, 1, 3]);  view_82 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_83: "f32[128, 768]" = torch.ops.aten.reshape.default(add_40, [128, 768])
        permute_52: "f32[768, 768]" = torch.ops.aten.permute.default(arg90_1, [1, 0]);  arg90_1 = None
        addmm_31: "f32[128, 768]" = torch.ops.aten.addmm.default(arg91_1, view_83, permute_52);  arg91_1 = view_83 = permute_52 = None
        view_84: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_31, [2, 64, 768]);  addmm_31 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_85: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_84, [2, 64, 12, 64]);  view_84 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_53: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_85, [0, 2, 1, 3]);  view_85 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_86: "f32[128, 768]" = torch.ops.aten.reshape.default(add_40, [128, 768])
        permute_54: "f32[768, 768]" = torch.ops.aten.permute.default(arg92_1, [1, 0]);  arg92_1 = None
        addmm_32: "f32[128, 768]" = torch.ops.aten.addmm.default(arg93_1, view_86, permute_54);  arg93_1 = view_86 = permute_54 = None
        view_87: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_32, [2, 64, 768]);  addmm_32 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_88: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_87, [2, 64, 12, 64]);  view_87 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_55: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_88, [0, 2, 1, 3]);  view_88 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_7: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_5 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_51, permute_53, permute_55, expand_7, False);  permute_51 = permute_53 = permute_55 = expand_7 = None
        getitem_42: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_5[0];  _scaled_dot_product_efficient_attention_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_56: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_42, [0, 2, 1, 3]);  getitem_42 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_89: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(permute_56, [2, 64, 768]);  permute_56 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_90: "f32[128, 768]" = torch.ops.aten.reshape.default(view_89, [128, 768]);  view_89 = None
        permute_57: "f32[768, 768]" = torch.ops.aten.permute.default(arg94_1, [1, 0]);  arg94_1 = None
        
        # No stacktrace found for following nodes
        mm_default_20: "f32[128, 768]" = torch.ops.aten.mm.default(view_90, permute_57);  view_90 = permute_57 = None
        add_tensor_20: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_20, arg95_1);  mm_default_20 = arg95_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_91: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_20, [2, 64, 768]);  add_tensor_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_41: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_91, add_40);  view_91 = add_40 = None
        var_mean_11 = torch.ops.aten.var_mean.correction(add_41, [2], correction = 0, keepdim = True)
        getitem_46: "f32[2, 64, 1]" = var_mean_11[0]
        getitem_47: "f32[2, 64, 1]" = var_mean_11[1];  var_mean_11 = None
        sub_12: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_41, getitem_47);  add_41 = getitem_47 = None
        add_42: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_46, 1e-05);  getitem_46 = None
        rsqrt_11: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_42);  add_42 = None
        mul_38: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_12, rsqrt_11);  sub_12 = rsqrt_11 = None
        mul_39: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_38, arg96_1);  mul_38 = arg96_1 = None
        add_43: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_39, arg97_1);  mul_39 = arg97_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_92: "f32[128, 768]" = torch.ops.aten.reshape.default(add_43, [128, 768])
        permute_58: "f32[768, 3072]" = torch.ops.aten.permute.default(arg98_1, [1, 0]);  arg98_1 = None
        
        # No stacktrace found for following nodes
        mm_default_19: "f32[128, 3072]" = torch.ops.aten.mm.default(view_92, permute_58);  view_92 = permute_58 = None
        add_tensor_19: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_19, arg99_1);  mm_default_19 = arg99_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_93: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_19, [2, 64, 3072]);  add_tensor_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_40: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_93, 0.5)
        mul_41: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_93, 0.7071067811865476);  view_93 = None
        erf_5: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_41);  mul_41 = None
        add_44: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_5, 1);  erf_5 = None
        mul_42: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_40, add_44);  mul_40 = add_44 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_94: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_42, [128, 3072]);  mul_42 = None
        permute_59: "f32[3072, 768]" = torch.ops.aten.permute.default(arg100_1, [1, 0]);  arg100_1 = None
        
        # No stacktrace found for following nodes
        mm_default_18: "f32[128, 768]" = torch.ops.aten.mm.default(view_94, permute_59);  view_94 = permute_59 = None
        add_tensor_18: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_18, arg101_1);  mm_default_18 = arg101_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_95: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_18, [2, 64, 768]);  add_tensor_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_45: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_95, add_43);  view_95 = add_43 = None
        var_mean_12 = torch.ops.aten.var_mean.correction(add_45, [2], correction = 0, keepdim = True)
        getitem_48: "f32[2, 64, 1]" = var_mean_12[0]
        getitem_49: "f32[2, 64, 1]" = var_mean_12[1];  var_mean_12 = None
        sub_13: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_45, getitem_49);  add_45 = getitem_49 = None
        add_46: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_48, 1e-05);  getitem_48 = None
        rsqrt_12: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_46);  add_46 = None
        mul_43: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_13, rsqrt_12);  sub_13 = rsqrt_12 = None
        mul_44: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_43, arg102_1);  mul_43 = arg102_1 = None
        add_47: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_44, arg103_1);  mul_44 = arg103_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_96: "f32[128, 768]" = torch.ops.aten.reshape.default(add_47, [128, 768])
        permute_60: "f32[768, 768]" = torch.ops.aten.permute.default(arg104_1, [1, 0]);  arg104_1 = None
        addmm_36: "f32[128, 768]" = torch.ops.aten.addmm.default(arg105_1, view_96, permute_60);  arg105_1 = view_96 = permute_60 = None
        view_97: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_36, [2, 64, 768]);  addmm_36 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_98: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_97, [2, 64, 12, 64]);  view_97 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_61: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_98, [0, 2, 1, 3]);  view_98 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_99: "f32[128, 768]" = torch.ops.aten.reshape.default(add_47, [128, 768])
        permute_62: "f32[768, 768]" = torch.ops.aten.permute.default(arg106_1, [1, 0]);  arg106_1 = None
        addmm_37: "f32[128, 768]" = torch.ops.aten.addmm.default(arg107_1, view_99, permute_62);  arg107_1 = view_99 = permute_62 = None
        view_100: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_37, [2, 64, 768]);  addmm_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_101: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_100, [2, 64, 12, 64]);  view_100 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_63: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_101, [0, 2, 1, 3]);  view_101 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_102: "f32[128, 768]" = torch.ops.aten.reshape.default(add_47, [128, 768])
        permute_64: "f32[768, 768]" = torch.ops.aten.permute.default(arg108_1, [1, 0]);  arg108_1 = None
        addmm_38: "f32[128, 768]" = torch.ops.aten.addmm.default(arg109_1, view_102, permute_64);  arg109_1 = view_102 = permute_64 = None
        view_103: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_38, [2, 64, 768]);  addmm_38 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_104: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_103, [2, 64, 12, 64]);  view_103 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_65: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_104, [0, 2, 1, 3]);  view_104 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_8: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_6 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_61, permute_63, permute_65, expand_8, False);  permute_61 = permute_63 = permute_65 = expand_8 = None
        getitem_50: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_6[0];  _scaled_dot_product_efficient_attention_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_66: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_50, [0, 2, 1, 3]);  getitem_50 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_105: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(permute_66, [2, 64, 768]);  permute_66 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_106: "f32[128, 768]" = torch.ops.aten.reshape.default(view_105, [128, 768]);  view_105 = None
        permute_67: "f32[768, 768]" = torch.ops.aten.permute.default(arg110_1, [1, 0]);  arg110_1 = None
        
        # No stacktrace found for following nodes
        mm_default_17: "f32[128, 768]" = torch.ops.aten.mm.default(view_106, permute_67);  view_106 = permute_67 = None
        add_tensor_17: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_17, arg111_1);  mm_default_17 = arg111_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_107: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_17, [2, 64, 768]);  add_tensor_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_48: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_107, add_47);  view_107 = add_47 = None
        var_mean_13 = torch.ops.aten.var_mean.correction(add_48, [2], correction = 0, keepdim = True)
        getitem_54: "f32[2, 64, 1]" = var_mean_13[0]
        getitem_55: "f32[2, 64, 1]" = var_mean_13[1];  var_mean_13 = None
        sub_14: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_48, getitem_55);  add_48 = getitem_55 = None
        add_49: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_54, 1e-05);  getitem_54 = None
        rsqrt_13: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_49);  add_49 = None
        mul_45: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_14, rsqrt_13);  sub_14 = rsqrt_13 = None
        mul_46: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_45, arg112_1);  mul_45 = arg112_1 = None
        add_50: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_46, arg113_1);  mul_46 = arg113_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_108: "f32[128, 768]" = torch.ops.aten.reshape.default(add_50, [128, 768])
        permute_68: "f32[768, 3072]" = torch.ops.aten.permute.default(arg114_1, [1, 0]);  arg114_1 = None
        
        # No stacktrace found for following nodes
        mm_default_16: "f32[128, 3072]" = torch.ops.aten.mm.default(view_108, permute_68);  view_108 = permute_68 = None
        add_tensor_16: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_16, arg115_1);  mm_default_16 = arg115_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_109: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_16, [2, 64, 3072]);  add_tensor_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_47: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_109, 0.5)
        mul_48: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_109, 0.7071067811865476);  view_109 = None
        erf_6: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_48);  mul_48 = None
        add_51: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_6, 1);  erf_6 = None
        mul_49: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_47, add_51);  mul_47 = add_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_110: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_49, [128, 3072]);  mul_49 = None
        permute_69: "f32[3072, 768]" = torch.ops.aten.permute.default(arg116_1, [1, 0]);  arg116_1 = None
        
        # No stacktrace found for following nodes
        mm_default_15: "f32[128, 768]" = torch.ops.aten.mm.default(view_110, permute_69);  view_110 = permute_69 = None
        add_tensor_15: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_15, arg117_1);  mm_default_15 = arg117_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_111: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_15, [2, 64, 768]);  add_tensor_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_52: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_111, add_50);  view_111 = add_50 = None
        var_mean_14 = torch.ops.aten.var_mean.correction(add_52, [2], correction = 0, keepdim = True)
        getitem_56: "f32[2, 64, 1]" = var_mean_14[0]
        getitem_57: "f32[2, 64, 1]" = var_mean_14[1];  var_mean_14 = None
        sub_15: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_52, getitem_57);  add_52 = getitem_57 = None
        add_53: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_56, 1e-05);  getitem_56 = None
        rsqrt_14: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_53);  add_53 = None
        mul_50: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_15, rsqrt_14);  sub_15 = rsqrt_14 = None
        mul_51: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_50, arg118_1);  mul_50 = arg118_1 = None
        add_54: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_51, arg119_1);  mul_51 = arg119_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_112: "f32[128, 768]" = torch.ops.aten.reshape.default(add_54, [128, 768])
        permute_70: "f32[768, 768]" = torch.ops.aten.permute.default(arg120_1, [1, 0]);  arg120_1 = None
        addmm_42: "f32[128, 768]" = torch.ops.aten.addmm.default(arg121_1, view_112, permute_70);  arg121_1 = view_112 = permute_70 = None
        view_113: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_42, [2, 64, 768]);  addmm_42 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_114: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_113, [2, 64, 12, 64]);  view_113 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_71: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_114, [0, 2, 1, 3]);  view_114 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_115: "f32[128, 768]" = torch.ops.aten.reshape.default(add_54, [128, 768])
        permute_72: "f32[768, 768]" = torch.ops.aten.permute.default(arg122_1, [1, 0]);  arg122_1 = None
        addmm_43: "f32[128, 768]" = torch.ops.aten.addmm.default(arg123_1, view_115, permute_72);  arg123_1 = view_115 = permute_72 = None
        view_116: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_43, [2, 64, 768]);  addmm_43 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_117: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_116, [2, 64, 12, 64]);  view_116 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_73: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_117, [0, 2, 1, 3]);  view_117 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_118: "f32[128, 768]" = torch.ops.aten.reshape.default(add_54, [128, 768])
        permute_74: "f32[768, 768]" = torch.ops.aten.permute.default(arg124_1, [1, 0]);  arg124_1 = None
        addmm_44: "f32[128, 768]" = torch.ops.aten.addmm.default(arg125_1, view_118, permute_74);  arg125_1 = view_118 = permute_74 = None
        view_119: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_44, [2, 64, 768]);  addmm_44 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_120: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_119, [2, 64, 12, 64]);  view_119 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_75: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_120, [0, 2, 1, 3]);  view_120 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_9: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_7 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_71, permute_73, permute_75, expand_9, False);  permute_71 = permute_73 = permute_75 = expand_9 = None
        getitem_58: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_7[0];  _scaled_dot_product_efficient_attention_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_76: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_58, [0, 2, 1, 3]);  getitem_58 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_121: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(permute_76, [2, 64, 768]);  permute_76 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_122: "f32[128, 768]" = torch.ops.aten.reshape.default(view_121, [128, 768]);  view_121 = None
        permute_77: "f32[768, 768]" = torch.ops.aten.permute.default(arg126_1, [1, 0]);  arg126_1 = None
        
        # No stacktrace found for following nodes
        mm_default_14: "f32[128, 768]" = torch.ops.aten.mm.default(view_122, permute_77);  view_122 = permute_77 = None
        add_tensor_14: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_14, arg127_1);  mm_default_14 = arg127_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_123: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_14, [2, 64, 768]);  add_tensor_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_55: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_123, add_54);  view_123 = add_54 = None
        var_mean_15 = torch.ops.aten.var_mean.correction(add_55, [2], correction = 0, keepdim = True)
        getitem_62: "f32[2, 64, 1]" = var_mean_15[0]
        getitem_63: "f32[2, 64, 1]" = var_mean_15[1];  var_mean_15 = None
        sub_16: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_55, getitem_63);  add_55 = getitem_63 = None
        add_56: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_62, 1e-05);  getitem_62 = None
        rsqrt_15: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_56);  add_56 = None
        mul_52: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_16, rsqrt_15);  sub_16 = rsqrt_15 = None
        mul_53: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_52, arg128_1);  mul_52 = arg128_1 = None
        add_57: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_53, arg129_1);  mul_53 = arg129_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_124: "f32[128, 768]" = torch.ops.aten.reshape.default(add_57, [128, 768])
        permute_78: "f32[768, 3072]" = torch.ops.aten.permute.default(arg130_1, [1, 0]);  arg130_1 = None
        
        # No stacktrace found for following nodes
        mm_default_13: "f32[128, 3072]" = torch.ops.aten.mm.default(view_124, permute_78);  view_124 = permute_78 = None
        add_tensor_13: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_13, arg131_1);  mm_default_13 = arg131_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_125: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_13, [2, 64, 3072]);  add_tensor_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_54: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_125, 0.5)
        mul_55: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_125, 0.7071067811865476);  view_125 = None
        erf_7: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_55);  mul_55 = None
        add_58: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_7, 1);  erf_7 = None
        mul_56: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_54, add_58);  mul_54 = add_58 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_126: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_56, [128, 3072]);  mul_56 = None
        permute_79: "f32[3072, 768]" = torch.ops.aten.permute.default(arg132_1, [1, 0]);  arg132_1 = None
        
        # No stacktrace found for following nodes
        mm_default_12: "f32[128, 768]" = torch.ops.aten.mm.default(view_126, permute_79);  view_126 = permute_79 = None
        add_tensor_12: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_12, arg133_1);  mm_default_12 = arg133_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_127: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_12, [2, 64, 768]);  add_tensor_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_59: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_127, add_57);  view_127 = add_57 = None
        var_mean_16 = torch.ops.aten.var_mean.correction(add_59, [2], correction = 0, keepdim = True)
        getitem_64: "f32[2, 64, 1]" = var_mean_16[0]
        getitem_65: "f32[2, 64, 1]" = var_mean_16[1];  var_mean_16 = None
        sub_17: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_59, getitem_65);  add_59 = getitem_65 = None
        add_60: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_64, 1e-05);  getitem_64 = None
        rsqrt_16: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_60);  add_60 = None
        mul_57: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_17, rsqrt_16);  sub_17 = rsqrt_16 = None
        mul_58: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_57, arg134_1);  mul_57 = arg134_1 = None
        add_61: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_58, arg135_1);  mul_58 = arg135_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_128: "f32[128, 768]" = torch.ops.aten.reshape.default(add_61, [128, 768])
        permute_80: "f32[768, 768]" = torch.ops.aten.permute.default(arg136_1, [1, 0]);  arg136_1 = None
        addmm_48: "f32[128, 768]" = torch.ops.aten.addmm.default(arg137_1, view_128, permute_80);  arg137_1 = view_128 = permute_80 = None
        view_129: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_48, [2, 64, 768]);  addmm_48 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_130: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_129, [2, 64, 12, 64]);  view_129 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_81: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_130, [0, 2, 1, 3]);  view_130 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_131: "f32[128, 768]" = torch.ops.aten.reshape.default(add_61, [128, 768])
        permute_82: "f32[768, 768]" = torch.ops.aten.permute.default(arg138_1, [1, 0]);  arg138_1 = None
        addmm_49: "f32[128, 768]" = torch.ops.aten.addmm.default(arg139_1, view_131, permute_82);  arg139_1 = view_131 = permute_82 = None
        view_132: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_49, [2, 64, 768]);  addmm_49 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_133: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_132, [2, 64, 12, 64]);  view_132 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_83: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_133, [0, 2, 1, 3]);  view_133 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_134: "f32[128, 768]" = torch.ops.aten.reshape.default(add_61, [128, 768])
        permute_84: "f32[768, 768]" = torch.ops.aten.permute.default(arg140_1, [1, 0]);  arg140_1 = None
        addmm_50: "f32[128, 768]" = torch.ops.aten.addmm.default(arg141_1, view_134, permute_84);  arg141_1 = view_134 = permute_84 = None
        view_135: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_50, [2, 64, 768]);  addmm_50 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_136: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_135, [2, 64, 12, 64]);  view_135 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_85: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_136, [0, 2, 1, 3]);  view_136 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_10: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_8 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_81, permute_83, permute_85, expand_10, False);  permute_81 = permute_83 = permute_85 = expand_10 = None
        getitem_66: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_8[0];  _scaled_dot_product_efficient_attention_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_86: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_66, [0, 2, 1, 3]);  getitem_66 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_137: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(permute_86, [2, 64, 768]);  permute_86 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_138: "f32[128, 768]" = torch.ops.aten.reshape.default(view_137, [128, 768]);  view_137 = None
        permute_87: "f32[768, 768]" = torch.ops.aten.permute.default(arg142_1, [1, 0]);  arg142_1 = None
        
        # No stacktrace found for following nodes
        mm_default_11: "f32[128, 768]" = torch.ops.aten.mm.default(view_138, permute_87);  view_138 = permute_87 = None
        add_tensor_11: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_11, arg143_1);  mm_default_11 = arg143_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_139: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_11, [2, 64, 768]);  add_tensor_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_62: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_139, add_61);  view_139 = add_61 = None
        var_mean_17 = torch.ops.aten.var_mean.correction(add_62, [2], correction = 0, keepdim = True)
        getitem_70: "f32[2, 64, 1]" = var_mean_17[0]
        getitem_71: "f32[2, 64, 1]" = var_mean_17[1];  var_mean_17 = None
        sub_18: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_62, getitem_71);  add_62 = getitem_71 = None
        add_63: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_70, 1e-05);  getitem_70 = None
        rsqrt_17: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_63);  add_63 = None
        mul_59: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_18, rsqrt_17);  sub_18 = rsqrt_17 = None
        mul_60: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_59, arg144_1);  mul_59 = arg144_1 = None
        add_64: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_60, arg145_1);  mul_60 = arg145_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_140: "f32[128, 768]" = torch.ops.aten.reshape.default(add_64, [128, 768])
        permute_88: "f32[768, 3072]" = torch.ops.aten.permute.default(arg146_1, [1, 0]);  arg146_1 = None
        
        # No stacktrace found for following nodes
        mm_default_10: "f32[128, 3072]" = torch.ops.aten.mm.default(view_140, permute_88);  view_140 = permute_88 = None
        add_tensor_10: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_10, arg147_1);  mm_default_10 = arg147_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_141: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_10, [2, 64, 3072]);  add_tensor_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_61: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_141, 0.5)
        mul_62: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_141, 0.7071067811865476);  view_141 = None
        erf_8: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_62);  mul_62 = None
        add_65: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_8, 1);  erf_8 = None
        mul_63: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_61, add_65);  mul_61 = add_65 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_142: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_63, [128, 3072]);  mul_63 = None
        permute_89: "f32[3072, 768]" = torch.ops.aten.permute.default(arg148_1, [1, 0]);  arg148_1 = None
        
        # No stacktrace found for following nodes
        mm_default_9: "f32[128, 768]" = torch.ops.aten.mm.default(view_142, permute_89);  view_142 = permute_89 = None
        add_tensor_9: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_9, arg149_1);  mm_default_9 = arg149_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_143: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_9, [2, 64, 768]);  add_tensor_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_66: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_143, add_64);  view_143 = add_64 = None
        var_mean_18 = torch.ops.aten.var_mean.correction(add_66, [2], correction = 0, keepdim = True)
        getitem_72: "f32[2, 64, 1]" = var_mean_18[0]
        getitem_73: "f32[2, 64, 1]" = var_mean_18[1];  var_mean_18 = None
        sub_19: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_66, getitem_73);  add_66 = getitem_73 = None
        add_67: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_72, 1e-05);  getitem_72 = None
        rsqrt_18: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_67);  add_67 = None
        mul_64: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_19, rsqrt_18);  sub_19 = rsqrt_18 = None
        mul_65: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_64, arg150_1);  mul_64 = arg150_1 = None
        add_68: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_65, arg151_1);  mul_65 = arg151_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_144: "f32[128, 768]" = torch.ops.aten.reshape.default(add_68, [128, 768])
        permute_90: "f32[768, 768]" = torch.ops.aten.permute.default(arg152_1, [1, 0]);  arg152_1 = None
        addmm_54: "f32[128, 768]" = torch.ops.aten.addmm.default(arg153_1, view_144, permute_90);  arg153_1 = view_144 = permute_90 = None
        view_145: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_54, [2, 64, 768]);  addmm_54 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_146: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_145, [2, 64, 12, 64]);  view_145 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_91: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_146, [0, 2, 1, 3]);  view_146 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_147: "f32[128, 768]" = torch.ops.aten.reshape.default(add_68, [128, 768])
        permute_92: "f32[768, 768]" = torch.ops.aten.permute.default(arg154_1, [1, 0]);  arg154_1 = None
        addmm_55: "f32[128, 768]" = torch.ops.aten.addmm.default(arg155_1, view_147, permute_92);  arg155_1 = view_147 = permute_92 = None
        view_148: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_55, [2, 64, 768]);  addmm_55 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_149: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_148, [2, 64, 12, 64]);  view_148 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_93: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_149, [0, 2, 1, 3]);  view_149 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_150: "f32[128, 768]" = torch.ops.aten.reshape.default(add_68, [128, 768])
        permute_94: "f32[768, 768]" = torch.ops.aten.permute.default(arg156_1, [1, 0]);  arg156_1 = None
        addmm_56: "f32[128, 768]" = torch.ops.aten.addmm.default(arg157_1, view_150, permute_94);  arg157_1 = view_150 = permute_94 = None
        view_151: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_56, [2, 64, 768]);  addmm_56 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_152: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_151, [2, 64, 12, 64]);  view_151 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_95: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_152, [0, 2, 1, 3]);  view_152 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_11: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_9 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_91, permute_93, permute_95, expand_11, False);  permute_91 = permute_93 = permute_95 = expand_11 = None
        getitem_74: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_9[0];  _scaled_dot_product_efficient_attention_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_96: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_74, [0, 2, 1, 3]);  getitem_74 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_153: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(permute_96, [2, 64, 768]);  permute_96 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_154: "f32[128, 768]" = torch.ops.aten.reshape.default(view_153, [128, 768]);  view_153 = None
        permute_97: "f32[768, 768]" = torch.ops.aten.permute.default(arg158_1, [1, 0]);  arg158_1 = None
        
        # No stacktrace found for following nodes
        mm_default_8: "f32[128, 768]" = torch.ops.aten.mm.default(view_154, permute_97);  view_154 = permute_97 = None
        add_tensor_8: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_8, arg159_1);  mm_default_8 = arg159_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_155: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_8, [2, 64, 768]);  add_tensor_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_69: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_155, add_68);  view_155 = add_68 = None
        var_mean_19 = torch.ops.aten.var_mean.correction(add_69, [2], correction = 0, keepdim = True)
        getitem_78: "f32[2, 64, 1]" = var_mean_19[0]
        getitem_79: "f32[2, 64, 1]" = var_mean_19[1];  var_mean_19 = None
        sub_20: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_69, getitem_79);  add_69 = getitem_79 = None
        add_70: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_78, 1e-05);  getitem_78 = None
        rsqrt_19: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_70);  add_70 = None
        mul_66: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_20, rsqrt_19);  sub_20 = rsqrt_19 = None
        mul_67: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_66, arg160_1);  mul_66 = arg160_1 = None
        add_71: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_67, arg161_1);  mul_67 = arg161_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_156: "f32[128, 768]" = torch.ops.aten.reshape.default(add_71, [128, 768])
        permute_98: "f32[768, 3072]" = torch.ops.aten.permute.default(arg162_1, [1, 0]);  arg162_1 = None
        
        # No stacktrace found for following nodes
        mm_default_7: "f32[128, 3072]" = torch.ops.aten.mm.default(view_156, permute_98);  view_156 = permute_98 = None
        add_tensor_7: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_7, arg163_1);  mm_default_7 = arg163_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_157: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_7, [2, 64, 3072]);  add_tensor_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_68: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_157, 0.5)
        mul_69: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_157, 0.7071067811865476);  view_157 = None
        erf_9: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_69);  mul_69 = None
        add_72: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_9, 1);  erf_9 = None
        mul_70: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_68, add_72);  mul_68 = add_72 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_158: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_70, [128, 3072]);  mul_70 = None
        permute_99: "f32[3072, 768]" = torch.ops.aten.permute.default(arg164_1, [1, 0]);  arg164_1 = None
        
        # No stacktrace found for following nodes
        mm_default_6: "f32[128, 768]" = torch.ops.aten.mm.default(view_158, permute_99);  view_158 = permute_99 = None
        add_tensor_6: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_6, arg165_1);  mm_default_6 = arg165_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_159: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_6, [2, 64, 768]);  add_tensor_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_73: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_159, add_71);  view_159 = add_71 = None
        var_mean_20 = torch.ops.aten.var_mean.correction(add_73, [2], correction = 0, keepdim = True)
        getitem_80: "f32[2, 64, 1]" = var_mean_20[0]
        getitem_81: "f32[2, 64, 1]" = var_mean_20[1];  var_mean_20 = None
        sub_21: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_73, getitem_81);  add_73 = getitem_81 = None
        add_74: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_80, 1e-05);  getitem_80 = None
        rsqrt_20: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_74);  add_74 = None
        mul_71: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_21, rsqrt_20);  sub_21 = rsqrt_20 = None
        mul_72: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_71, arg166_1);  mul_71 = arg166_1 = None
        add_75: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_72, arg167_1);  mul_72 = arg167_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_160: "f32[128, 768]" = torch.ops.aten.reshape.default(add_75, [128, 768])
        permute_100: "f32[768, 768]" = torch.ops.aten.permute.default(arg168_1, [1, 0]);  arg168_1 = None
        addmm_60: "f32[128, 768]" = torch.ops.aten.addmm.default(arg169_1, view_160, permute_100);  arg169_1 = view_160 = permute_100 = None
        view_161: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_60, [2, 64, 768]);  addmm_60 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_162: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_161, [2, 64, 12, 64]);  view_161 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_101: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_162, [0, 2, 1, 3]);  view_162 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_163: "f32[128, 768]" = torch.ops.aten.reshape.default(add_75, [128, 768])
        permute_102: "f32[768, 768]" = torch.ops.aten.permute.default(arg170_1, [1, 0]);  arg170_1 = None
        addmm_61: "f32[128, 768]" = torch.ops.aten.addmm.default(arg171_1, view_163, permute_102);  arg171_1 = view_163 = permute_102 = None
        view_164: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_61, [2, 64, 768]);  addmm_61 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_165: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_164, [2, 64, 12, 64]);  view_164 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_103: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_165, [0, 2, 1, 3]);  view_165 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_166: "f32[128, 768]" = torch.ops.aten.reshape.default(add_75, [128, 768])
        permute_104: "f32[768, 768]" = torch.ops.aten.permute.default(arg172_1, [1, 0]);  arg172_1 = None
        addmm_62: "f32[128, 768]" = torch.ops.aten.addmm.default(arg173_1, view_166, permute_104);  arg173_1 = view_166 = permute_104 = None
        view_167: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_62, [2, 64, 768]);  addmm_62 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_168: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_167, [2, 64, 12, 64]);  view_167 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_105: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_168, [0, 2, 1, 3]);  view_168 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_12: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64])
        _scaled_dot_product_efficient_attention_10 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_101, permute_103, permute_105, expand_12, False);  permute_101 = permute_103 = permute_105 = expand_12 = None
        getitem_82: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_10[0];  _scaled_dot_product_efficient_attention_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_106: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_82, [0, 2, 1, 3]);  getitem_82 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_169: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(permute_106, [2, 64, 768]);  permute_106 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_170: "f32[128, 768]" = torch.ops.aten.reshape.default(view_169, [128, 768]);  view_169 = None
        permute_107: "f32[768, 768]" = torch.ops.aten.permute.default(arg174_1, [1, 0]);  arg174_1 = None
        
        # No stacktrace found for following nodes
        mm_default_5: "f32[128, 768]" = torch.ops.aten.mm.default(view_170, permute_107);  view_170 = permute_107 = None
        add_tensor_5: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_5, arg175_1);  mm_default_5 = arg175_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_171: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_5, [2, 64, 768]);  add_tensor_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_76: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_171, add_75);  view_171 = add_75 = None
        var_mean_21 = torch.ops.aten.var_mean.correction(add_76, [2], correction = 0, keepdim = True)
        getitem_86: "f32[2, 64, 1]" = var_mean_21[0]
        getitem_87: "f32[2, 64, 1]" = var_mean_21[1];  var_mean_21 = None
        sub_22: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_76, getitem_87);  add_76 = getitem_87 = None
        add_77: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_86, 1e-05);  getitem_86 = None
        rsqrt_21: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_77);  add_77 = None
        mul_73: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_22, rsqrt_21);  sub_22 = rsqrt_21 = None
        mul_74: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_73, arg176_1);  mul_73 = arg176_1 = None
        add_78: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_74, arg177_1);  mul_74 = arg177_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_172: "f32[128, 768]" = torch.ops.aten.reshape.default(add_78, [128, 768])
        permute_108: "f32[768, 3072]" = torch.ops.aten.permute.default(arg178_1, [1, 0]);  arg178_1 = None
        
        # No stacktrace found for following nodes
        mm_default_4: "f32[128, 3072]" = torch.ops.aten.mm.default(view_172, permute_108);  view_172 = permute_108 = None
        add_tensor_4: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_4, arg179_1);  mm_default_4 = arg179_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_173: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_4, [2, 64, 3072]);  add_tensor_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_75: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_173, 0.5)
        mul_76: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_173, 0.7071067811865476);  view_173 = None
        erf_10: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_76);  mul_76 = None
        add_79: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_10, 1);  erf_10 = None
        mul_77: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_75, add_79);  mul_75 = add_79 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_174: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_77, [128, 3072]);  mul_77 = None
        permute_109: "f32[3072, 768]" = torch.ops.aten.permute.default(arg180_1, [1, 0]);  arg180_1 = None
        
        # No stacktrace found for following nodes
        mm_default_3: "f32[128, 768]" = torch.ops.aten.mm.default(view_174, permute_109);  view_174 = permute_109 = None
        add_tensor_3: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_3, arg181_1);  mm_default_3 = arg181_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_175: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_3, [2, 64, 768]);  add_tensor_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_80: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_175, add_78);  view_175 = add_78 = None
        var_mean_22 = torch.ops.aten.var_mean.correction(add_80, [2], correction = 0, keepdim = True)
        getitem_88: "f32[2, 64, 1]" = var_mean_22[0]
        getitem_89: "f32[2, 64, 1]" = var_mean_22[1];  var_mean_22 = None
        sub_23: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_80, getitem_89);  add_80 = getitem_89 = None
        add_81: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_88, 1e-05);  getitem_88 = None
        rsqrt_22: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_81);  add_81 = None
        mul_78: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_23, rsqrt_22);  sub_23 = rsqrt_22 = None
        mul_79: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_78, arg182_1);  mul_78 = arg182_1 = None
        add_82: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_79, arg183_1);  mul_79 = arg183_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:313 in forward, code: query_layer = self.transpose_for_scores(self.query(hidden_states))
        view_176: "f32[128, 768]" = torch.ops.aten.reshape.default(add_82, [128, 768])
        permute_110: "f32[768, 768]" = torch.ops.aten.permute.default(arg184_1, [1, 0]);  arg184_1 = None
        addmm_66: "f32[128, 768]" = torch.ops.aten.addmm.default(arg185_1, view_176, permute_110);  arg185_1 = view_176 = permute_110 = None
        view_177: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_66, [2, 64, 768]);  addmm_66 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_178: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_177, [2, 64, 12, 64]);  view_177 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_111: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_178, [0, 2, 1, 3]);  view_178 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:326 in forward, code: key_layer = self.transpose_for_scores(self.key(current_states))
        view_179: "f32[128, 768]" = torch.ops.aten.reshape.default(add_82, [128, 768])
        permute_112: "f32[768, 768]" = torch.ops.aten.permute.default(arg186_1, [1, 0]);  arg186_1 = None
        addmm_67: "f32[128, 768]" = torch.ops.aten.addmm.default(arg187_1, view_179, permute_112);  arg187_1 = view_179 = permute_112 = None
        view_180: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_67, [2, 64, 768]);  addmm_67 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_181: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_180, [2, 64, 12, 64]);  view_180 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_113: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_181, [0, 2, 1, 3]);  view_181 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:327 in forward, code: value_layer = self.transpose_for_scores(self.value(current_states))
        view_182: "f32[128, 768]" = torch.ops.aten.reshape.default(add_82, [128, 768])
        permute_114: "f32[768, 768]" = torch.ops.aten.permute.default(arg188_1, [1, 0]);  arg188_1 = None
        addmm_68: "f32[128, 768]" = torch.ops.aten.addmm.default(arg189_1, view_182, permute_114);  arg189_1 = view_182 = permute_114 = None
        view_183: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(addmm_68, [2, 64, 768]);  addmm_68 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:169 in transpose_for_scores, code: x = x.view(new_x_shape)
        view_184: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_183, [2, 64, 12, 64]);  view_183 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:170 in transpose_for_scores, code: return x.permute(0, 2, 1, 3)
        permute_115: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_184, [0, 2, 1, 3]);  view_184 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:358 in forward, code: attn_output = torch.nn.functional.scaled_dot_product_attention(
        expand_13: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(where, [2, 12, 64, 64]);  where = None
        _scaled_dot_product_efficient_attention_11 = torch.ops.aten._scaled_dot_product_efficient_attention.default(permute_111, permute_113, permute_115, expand_13, False);  permute_111 = permute_113 = permute_115 = expand_13 = None
        getitem_90: "f32[2, 12, 64, 64]" = _scaled_dot_product_efficient_attention_11[0];  _scaled_dot_product_efficient_attention_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:367 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_116: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(getitem_90, [0, 2, 1, 3]);  getitem_90 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:368 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, self.all_head_size)
        view_185: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(permute_116, [2, 64, 768]);  permute_116 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_186: "f32[128, 768]" = torch.ops.aten.reshape.default(view_185, [128, 768]);  view_185 = None
        permute_117: "f32[768, 768]" = torch.ops.aten.permute.default(arg190_1, [1, 0]);  arg190_1 = None
        
        # No stacktrace found for following nodes
        mm_default_2: "f32[128, 768]" = torch.ops.aten.mm.default(view_186, permute_117);  view_186 = permute_117 = None
        add_tensor_2: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_2, arg191_1);  mm_default_2 = arg191_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:385 in forward, code: hidden_states = self.dense(hidden_states)
        view_187: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_2, [2, 64, 768]);  add_tensor_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:387 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_83: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_187, add_82);  view_187 = add_82 = None
        var_mean_23 = torch.ops.aten.var_mean.correction(add_83, [2], correction = 0, keepdim = True)
        getitem_94: "f32[2, 64, 1]" = var_mean_23[0]
        getitem_95: "f32[2, 64, 1]" = var_mean_23[1];  var_mean_23 = None
        sub_24: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_83, getitem_95);  add_83 = getitem_95 = None
        add_84: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_94, 1e-05);  getitem_94 = None
        rsqrt_23: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_84);  add_84 = None
        mul_80: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_24, rsqrt_23);  sub_24 = rsqrt_23 = None
        mul_81: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_80, arg192_1);  mul_80 = arg192_1 = None
        add_85: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_81, arg193_1);  mul_81 = arg193_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_188: "f32[128, 768]" = torch.ops.aten.reshape.default(add_85, [128, 768])
        permute_118: "f32[768, 3072]" = torch.ops.aten.permute.default(arg194_1, [1, 0]);  arg194_1 = None
        
        # No stacktrace found for following nodes
        mm_default_1: "f32[128, 3072]" = torch.ops.aten.mm.default(view_188, permute_118);  view_188 = permute_118 = None
        add_tensor_1: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_1, arg195_1);  mm_default_1 = arg195_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:460 in forward, code: hidden_states = self.dense(hidden_states)
        view_189: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_1, [2, 64, 3072]);  add_tensor_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:69 in forward, code: return self.act(input)
        mul_82: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_189, 0.5)
        mul_83: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_189, 0.7071067811865476);  view_189 = None
        erf_11: "f32[2, 64, 3072]" = torch.ops.aten.erf.default(mul_83);  mul_83 = None
        add_86: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(erf_11, 1);  erf_11 = None
        mul_84: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_82, add_86);  mul_82 = add_86 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_190: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_84, [128, 3072]);  mul_84 = None
        permute_119: "f32[3072, 768]" = torch.ops.aten.permute.default(arg196_1, [1, 0]);  arg196_1 = None
        
        # No stacktrace found for following nodes
        mm_default: "f32[128, 768]" = torch.ops.aten.mm.default(view_190, permute_119);  view_190 = permute_119 = None
        add_tensor: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default, arg197_1);  mm_default = arg197_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:474 in forward, code: hidden_states = self.dense(hidden_states)
        view_191: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor, [2, 64, 768]);  add_tensor = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/roberta/modeling_roberta.py:476 in forward, code: hidden_states = self.LayerNorm(hidden_states + input_tensor)
        add_87: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_191, add_85);  view_191 = add_85 = None
        var_mean_24 = torch.ops.aten.var_mean.correction(add_87, [2], correction = 0, keepdim = True)
        getitem_96: "f32[2, 64, 1]" = var_mean_24[0]
        getitem_97: "f32[2, 64, 1]" = var_mean_24[1];  var_mean_24 = None
        sub_25: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_87, getitem_97);  add_87 = getitem_97 = None
        add_88: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_96, 1e-05);  getitem_96 = None
        rsqrt_24: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_88);  add_88 = None
        mul_85: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_25, rsqrt_24);  sub_25 = rsqrt_24 = None
        mul_86: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_85, arg198_1);  mul_85 = arg198_1 = None
        add_89: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_86, arg199_1);  mul_86 = arg199_1 = None
        return (add_89,)
        

# ===== run_2025_10_19_03_43_12_574129-pid_19/torchinductor/model__1_inference_1.1/ir_post_fusion.txt =====
op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 128})]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 128})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (2, 64)
op0.sizes = ([2], [64])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf0_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
class op0_loop_body:
    var_ranges = {p0: 2, p1: 64}
    index0 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        constant = ops.constant(1, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int32, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.int64, src_dtype = torch.int32)
        scan1 = self.scan1((torch.int64,), (to_dtype_1,))
        getitem = scan1[0]
        get_index_1 = self.get_index('index0')
        store = ops.store('buf0', get_index_1, getitem, None)
        return store


op1_op2_op3_op5: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op1_op2_op3_op5.writes = 
    [   MemoryDep('buf1', c0, {c0: 98304}),
        MemoryDep('buf2', c0, {c0: 128}),
        MemoryDep('buf3', c0, {c0: 128}),
        MemoryDep('buf5', c0, {c0: 98304})]
op1_op2_op3_op5.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 128})]
op1_op2_op3_op5.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 128}),
        MemoryDep('arg1_1', c1, {c0: 2, c1: 64}),
        MemoryDep('arg2_1', c1 + 768*tmp0, {c0: 128, c1: 768}),
        MemoryDep('arg3_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg4_1', c1 + 768*tmp2, {c0: 128, c1: 768}),
        MemoryDep('arg5_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg6_1', c1, {c0: 128, c1: 768})]
op1_op2_op3_op5.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False),
    ]
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf2.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf3.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf5.users = [
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False),
    ]
]
op1_op2_op3_op5.snodes[0] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 98304})]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 128})]
op1.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 128}),
        MemoryDep('arg1_1', c1, {c0: 2, c1: 64}),
        MemoryDep('arg2_1', c1 + 768*tmp0, {c0: 128, c1: 768}),
        MemoryDep('arg3_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg4_1', c1 + 768*tmp2, {c0: 128, c1: 768})]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (98304, 1)
op1.sizes = ([2, 64, 768], [])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.float32, size=[50265, 768], stride=[768, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[1, 514], stride=[514, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
buf0_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.float32, size=[514, 768], stride=[768, 1])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op1_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 768}
    index0 = 64*p0 + p1
    index1 = 768*indirect0 + p2
    index2 = p1
    index3 = p2
    index4 = 768*indirect2 + p2
    index5 = 49152*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1_1', get_index_2)
        set_indirect1 = self.set_indirect1(load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg3_1', get_index_3)
        add = ops.add(load_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf0', get_index_4)
        to_dtype = ops.to_dtype(load_4, torch.int32, src_dtype = torch.int64)
        constant = ops.constant(0, torch.int32)
        add_1 = ops.add(to_dtype, constant)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('arg0_1', get_index_5)
        constant_1 = ops.constant(1, torch.int64)
        ne = ops.ne(load_5, constant_1)
        to_dtype_1 = ops.to_dtype(ne, torch.int32, src_dtype = torch.bool)
        mul = ops.mul(add_1, to_dtype_1)
        to_dtype_2 = ops.to_dtype(mul, torch.int64, src_dtype = torch.int32)
        constant_2 = ops.constant(1, torch.int64)
        add_2 = ops.add(to_dtype_2, constant_2)
        set_indirect2 = self.set_indirect2(add_2)
        get_index_6 = self.get_index('index4')
        load_6 = ops.load('arg4_1', get_index_6)
        add_3 = ops.add(add, load_6)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf1', get_index_7, add_3, None)
        return store
op1_op2_op3_op5.snodes[1] =
op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 128})]
op2.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 98304})]
op2.met_dependencies = []
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf2.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op2.group.device = cuda:0
op2.group.iteration = (128, 768)
op2.sizes = ([128], [768])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op2_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf2', get_index_1, getitem)
        return store_reduction
op1_op2_op3_op5.snodes[2] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 128})]
op3.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 98304})]
op3.met_dependencies = []
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf3.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (128, 768)
op3.sizes = ([128], [768])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op3_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf3', get_index_1, getitem_1)
        return store_reduction
op1_op2_op3_op5.snodes[3] =
op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 98304})]
op5.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 98304}),
        MemoryDep('buf2', c0, {c0: 128}),
        MemoryDep('buf3', c0, {c0: 128})]
op5.met_dependencies = 
    [   MemoryDep('arg5_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg6_1', c1, {c0: 128, c1: 768})]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf5.users = [
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False),
    ]
]
op5.group.device = cuda:0
op5.group.iteration = (98304, 1)
op5.sizes = ([128, 768], [])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg5_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg6_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op5_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf3', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg5_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg6_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf5', get_index_5, add_1, None)
        return store


op6: ExternKernelSchedulerNode(ExternKernelOut)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op6.met_dependencies = [StarDep(name='arg8_1', mode=None), StarDep(name='arg9_1', mode=None)]
op6.outputs = [
    buf6: ExternKernelOut
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op6.node.kernel = extern_kernels.bias_addmm


op7: ExternKernelSchedulerNode(ExternKernelOut)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op7.met_dependencies = [StarDep(name='arg10_1', mode=None), StarDep(name='arg11_1', mode=None)]
op7.outputs = [
    buf7: ExternKernelOut
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op7.node.kernel = extern_kernels.bias_addmm


op8: ExternKernelSchedulerNode(ExternKernelOut)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op8.met_dependencies = [StarDep(name='arg12_1', mode=None), StarDep(name='arg13_1', mode=None)]
op8.outputs = [
    buf8: ExternKernelOut
    buf8.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op8.node.kernel = extern_kernels.bias_addmm


op9_op30_op51_op72_op93: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op9_op30_op51_op72_op93.writes = 
    [   MemoryDep('buf30', c0, {c0: 98304}),
        MemoryDep('buf51', c0, {c0: 98304}),
        MemoryDep('buf72', c0, {c0: 98304}),
        MemoryDep('buf9', c0, {c0: 98304}),
        MemoryDep('buf93', c0, {c0: 98304})]
op9_op30_op51_op72_op93.unmet_dependencies = []
op9_op30_op51_op72_op93.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op9_op30_op51_op72_op93.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf51.users = [NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op9_op30_op51_op72_op93.snodes[0] =
op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 98304})]
op9.unmet_dependencies = []
op9.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (98304, 1)
op9.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf9_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op9_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf9', get_index_2, where, None)
        return store
op9_op30_op51_op72_op93.snodes[1] =
op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 98304})]
op30.unmet_dependencies = []
op30.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (98304, 1)
op30.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf30_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op30_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf30', get_index_2, where, None)
        return store
op9_op30_op51_op72_op93.snodes[2] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 98304})]
op51.unmet_dependencies = []
op51.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf51.users = [NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (98304, 1)
op51.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op51_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf51', get_index_2, where, None)
        return store
op9_op30_op51_op72_op93.snodes[3] =
op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 98304})]
op72.unmet_dependencies = []
op72.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (98304, 1)
op72.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op72_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf72', get_index_2, where, None)
        return store
op9_op30_op51_op72_op93.snodes[4] =
op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 98304})]
op93.unmet_dependencies = []
op93.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (98304, 1)
op93.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op93_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf93', get_index_2, where, None)
        return store


op10: ExternKernelSchedulerNode(FallbackKernel)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = 
    [   StarDep(name='buf6', mode=None),
        StarDep(name='buf7', mode=None),
        StarDep(name='buf8', mode=None),
        StarDep(name='buf9', mode=None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: FallbackKernel
    buf10.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf10.users = [NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op10.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op11: ExternKernelSchedulerNode(MultiOutput)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf10', mode=None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: MultiOutput
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op11.node.kernel = None


op15: ExternKernelSchedulerNode(ExternKernelOut)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf11', mode=None)]
op15.met_dependencies = [StarDep(name='arg14_1', mode=None)]
op15.outputs = [
    buf15: ExternKernelOut
    buf15.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False),
    ]
]
op15.node.kernel = extern_kernels.mm


op16_op17_op19: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op16_op17_op19.writes = 
    [   MemoryDep('buf16', c0, {c0: 128}),
        MemoryDep('buf17', c0, {c0: 128}),
        MemoryDep('buf19', c0, {c0: 98304})]
op16_op17_op19.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 98304}), MemoryDep('buf5', c0, {c0: 98304})]
op16_op17_op19.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg16_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg17_1', c1, {c0: 128, c1: 768})]
op16_op17_op19.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf16.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf17.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf19.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False),
    ]
]
op16_op17_op19.snodes[0] =
op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 128})]
op16.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 98304}), MemoryDep('buf5', c0, {c0: 98304})]
op16.met_dependencies = [MemoryDep('arg15_1', c1, {c0: 128, c1: 768})]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf16.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (128, 768)
op16.sizes = ([128], [768])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg15_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op16_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg15_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf5', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf16', get_index_3, getitem)
        return store_reduction
op16_op17_op19.snodes[1] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 128})]
op17.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 98304}), MemoryDep('buf5', c0, {c0: 98304})]
op17.met_dependencies = [MemoryDep('arg15_1', c1, {c0: 128, c1: 768})]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf17.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (128, 768)
op17.sizes = ([128], [768])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg15_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op17_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg15_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf5', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf17', get_index_3, getitem_1)
        return store_reduction
op16_op17_op19.snodes[2] =
op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 98304})]
op19.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 98304}),
        MemoryDep('buf16', c0, {c0: 128}),
        MemoryDep('buf17', c0, {c0: 128}),
        MemoryDep('buf5', c0, {c0: 98304})]
op19.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg16_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg17_1', c1, {c0: 128, c1: 768})]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf19.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False),
    ]
]
op19.group.device = cuda:0
op19.group.iteration = (98304, 1)
op19.sizes = ([128, 768], [])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg15_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg16_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg17_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op19_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg15_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf5', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf16', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf17', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg16_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg17_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf19', get_index_7, add_3, None)
        return store


op20: ExternKernelSchedulerNode(ExternKernelOut)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf19', mode=None)]
op20.met_dependencies = [StarDep(name='arg18_1', mode=None)]
op20.outputs = [
    buf20: ExternKernelOut
    buf20.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
]
op20.node.kernel = extern_kernels.mm


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 393216})]
op21.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 393216})]
op21.met_dependencies = [MemoryDep('arg19_1', c1, {c0: 128, c1: 3072})]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (393216, 1)
op21.sizes = ([128, 3072], [])
buf20_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg19_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op21_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg19_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf20', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf21', get_index_4, mul_2, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg20_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf22.users = [
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False),
    ]
]
op22.node.kernel = extern_kernels.mm


op23_op24_op26: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op23_op24_op26.writes = 
    [   MemoryDep('buf23', c0, {c0: 128}),
        MemoryDep('buf24', c0, {c0: 128}),
        MemoryDep('buf26', c0, {c0: 98304})]
op23_op24_op26.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 98304}), MemoryDep('buf22', c0, {c0: 98304})]
op23_op24_op26.met_dependencies = 
    [   MemoryDep('arg21_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg22_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg23_1', c1, {c0: 128, c1: 768})]
op23_op24_op26.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf23.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf24.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf26.users = [
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=True, is_weak=False),
    ]
]
op23_op24_op26.snodes[0] =
op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 128})]
op23.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 98304}), MemoryDep('buf22', c0, {c0: 98304})]
op23.met_dependencies = [MemoryDep('arg21_1', c1, {c0: 128, c1: 768})]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf23.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (128, 768)
op23.sizes = ([128], [768])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg21_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op23_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg21_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf19', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf23', get_index_3, getitem)
        return store_reduction
op23_op24_op26.snodes[1] =
op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 128})]
op24.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 98304}), MemoryDep('buf22', c0, {c0: 98304})]
op24.met_dependencies = [MemoryDep('arg21_1', c1, {c0: 128, c1: 768})]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf24.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (128, 768)
op24.sizes = ([128], [768])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg21_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op24_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg21_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf19', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf24', get_index_3, getitem_1)
        return store_reduction
op23_op24_op26.snodes[2] =
op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 98304})]
op26.unmet_dependencies = 
    [   MemoryDep('buf19', c0, {c0: 98304}),
        MemoryDep('buf22', c0, {c0: 98304}),
        MemoryDep('buf23', c0, {c0: 128}),
        MemoryDep('buf24', c0, {c0: 128})]
op26.met_dependencies = 
    [   MemoryDep('arg21_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg22_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg23_1', c1, {c0: 128, c1: 768})]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf26.users = [
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=True, is_weak=False),
    ]
]
op26.group.device = cuda:0
op26.group.iteration = (98304, 1)
op26.sizes = ([128, 768], [])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg21_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg22_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg23_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op26_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg21_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf19', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf23', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf24', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg22_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg23_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf26', get_index_7, add_3, None)
        return store


op27: ExternKernelSchedulerNode(ExternKernelOut)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op27.met_dependencies = [StarDep(name='arg24_1', mode=None), StarDep(name='arg25_1', mode=None)]
op27.outputs = [
    buf27: ExternKernelOut
    buf27.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op27.node.kernel = extern_kernels.bias_addmm


op28: ExternKernelSchedulerNode(ExternKernelOut)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op28.met_dependencies = [StarDep(name='arg26_1', mode=None), StarDep(name='arg27_1', mode=None)]
op28.outputs = [
    buf28: ExternKernelOut
    buf28.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op28.node.kernel = extern_kernels.bias_addmm


op29: ExternKernelSchedulerNode(ExternKernelOut)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op29.met_dependencies = [StarDep(name='arg28_1', mode=None), StarDep(name='arg29_1', mode=None)]
op29.outputs = [
    buf29: ExternKernelOut
    buf29.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op29.node.kernel = extern_kernels.bias_addmm


op31: ExternKernelSchedulerNode(FallbackKernel)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = 
    [   StarDep(name='buf27', mode=None),
        StarDep(name='buf28', mode=None),
        StarDep(name='buf29', mode=None),
        StarDep(name='buf30', mode=None)]
op31.met_dependencies = []
op31.outputs = [
    buf31: FallbackKernel
    buf31.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op32: ExternKernelSchedulerNode(MultiOutput)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op32.met_dependencies = []
op32.outputs = [
    buf32: MultiOutput
    buf32.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op32.node.kernel = None


op36: ExternKernelSchedulerNode(ExternKernelOut)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf32', mode=None)]
op36.met_dependencies = [StarDep(name='arg30_1', mode=None)]
op36.outputs = [
    buf36: ExternKernelOut
    buf36.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf36.users = [
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=True, is_weak=False),
    ]
]
op36.node.kernel = extern_kernels.mm


op37_op38_op40: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op37_op38_op40.writes = 
    [   MemoryDep('buf37', c0, {c0: 128}),
        MemoryDep('buf38', c0, {c0: 128}),
        MemoryDep('buf40', c0, {c0: 98304})]
op37_op38_op40.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 98304}), MemoryDep('buf36', c0, {c0: 98304})]
op37_op38_op40.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg32_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg33_1', c1, {c0: 128, c1: 768})]
op37_op38_op40.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf37.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf38.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf40.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
    ]
]
op37_op38_op40.snodes[0] =
op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 128})]
op37.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 98304}), MemoryDep('buf36', c0, {c0: 98304})]
op37.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 128, c1: 768})]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf37.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (128, 768)
op37.sizes = ([128], [768])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf37_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op37_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg31_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf26', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf37', get_index_3, getitem)
        return store_reduction
op37_op38_op40.snodes[1] =
op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 128})]
op38.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 98304}), MemoryDep('buf36', c0, {c0: 98304})]
op38.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 128, c1: 768})]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf38.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (128, 768)
op38.sizes = ([128], [768])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op38_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg31_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf26', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf38', get_index_3, getitem_1)
        return store_reduction
op37_op38_op40.snodes[2] =
op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 98304})]
op40.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 98304}),
        MemoryDep('buf36', c0, {c0: 98304}),
        MemoryDep('buf37', c0, {c0: 128}),
        MemoryDep('buf38', c0, {c0: 128})]
op40.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg32_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg33_1', c1, {c0: 128, c1: 768})]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf40.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
    ]
]
op40.group.device = cuda:0
op40.group.iteration = (98304, 1)
op40.sizes = ([128, 768], [])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf37_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg32_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg33_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op40_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg31_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf26', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf37', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf38', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg32_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg33_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf40', get_index_7, add_3, None)
        return store


op41: ExternKernelSchedulerNode(ExternKernelOut)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = [StarDep(name='arg34_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelOut
    buf41.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
]
op41.node.kernel = extern_kernels.mm


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 393216})]
op42.unmet_dependencies = [MemoryDep('buf41', c0, {c0: 393216})]
op42.met_dependencies = [MemoryDep('arg35_1', c1, {c0: 128, c1: 3072})]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf42.users = [NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (393216, 1)
op42.sizes = ([128, 3072], [])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg35_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op42_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg35_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf41', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg35_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf42', get_index_4, mul_2, None)
        return store


op43: ExternKernelSchedulerNode(ExternKernelOut)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = [StarDep(name='buf42', mode=None)]
op43.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op43.outputs = [
    buf43: ExternKernelOut
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf43.users = [
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
    ]
]
op43.node.kernel = extern_kernels.mm


op44_op45_op47: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op44_op45_op47.writes = 
    [   MemoryDep('buf44', c0, {c0: 128}),
        MemoryDep('buf45', c0, {c0: 128}),
        MemoryDep('buf47', c0, {c0: 98304})]
op44_op45_op47.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 98304}), MemoryDep('buf43', c0, {c0: 98304})]
op44_op45_op47.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg38_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg39_1', c1, {c0: 128, c1: 768})]
op44_op45_op47.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf44.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf45.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=True, is_weak=False),
    ]
]
op44_op45_op47.snodes[0] =
op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 128})]
op44.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 98304}), MemoryDep('buf43', c0, {c0: 98304})]
op44.met_dependencies = [MemoryDep('arg37_1', c1, {c0: 128, c1: 768})]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf44.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (128, 768)
op44.sizes = ([128], [768])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg37_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op44_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf40', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf44', get_index_3, getitem)
        return store_reduction
op44_op45_op47.snodes[1] =
op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 128})]
op45.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 98304}), MemoryDep('buf43', c0, {c0: 98304})]
op45.met_dependencies = [MemoryDep('arg37_1', c1, {c0: 128, c1: 768})]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf45.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (128, 768)
op45.sizes = ([128], [768])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg37_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op45_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf40', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf45', get_index_3, getitem_1)
        return store_reduction
op44_op45_op47.snodes[2] =
op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 98304})]
op47.unmet_dependencies = 
    [   MemoryDep('buf40', c0, {c0: 98304}),
        MemoryDep('buf43', c0, {c0: 98304}),
        MemoryDep('buf44', c0, {c0: 128}),
        MemoryDep('buf45', c0, {c0: 128})]
op47.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg38_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg39_1', c1, {c0: 128, c1: 768})]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=True, is_weak=False),
    ]
]
op47.group.device = cuda:0
op47.group.iteration = (98304, 1)
op47.sizes = ([128, 768], [])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg37_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg38_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg39_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op47_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf40', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf44', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf45', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg38_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg39_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf47', get_index_7, add_3, None)
        return store


op48: ExternKernelSchedulerNode(ExternKernelOut)
op48.writes = [StarDep(name='buf48', mode=None)]
op48.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op48.met_dependencies = [StarDep(name='arg40_1', mode=None), StarDep(name='arg41_1', mode=None)]
op48.outputs = [
    buf48: ExternKernelOut
    buf48.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op48.node.kernel = extern_kernels.bias_addmm


op49: ExternKernelSchedulerNode(ExternKernelOut)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op49.met_dependencies = [StarDep(name='arg42_1', mode=None), StarDep(name='arg43_1', mode=None)]
op49.outputs = [
    buf49: ExternKernelOut
    buf49.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op49.node.kernel = extern_kernels.bias_addmm


op50: ExternKernelSchedulerNode(ExternKernelOut)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op50.met_dependencies = [StarDep(name='arg44_1', mode=None), StarDep(name='arg45_1', mode=None)]
op50.outputs = [
    buf50: ExternKernelOut
    buf50.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf50.users = [NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op50.node.kernel = extern_kernels.bias_addmm


op52: ExternKernelSchedulerNode(FallbackKernel)
op52.writes = [StarDep(name='buf52', mode=None)]
op52.unmet_dependencies = 
    [   StarDep(name='buf48', mode=None),
        StarDep(name='buf49', mode=None),
        StarDep(name='buf50', mode=None),
        StarDep(name='buf51', mode=None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: FallbackKernel
    buf52.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op52.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op53: ExternKernelSchedulerNode(MultiOutput)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf52', mode=None)]
op53.met_dependencies = []
op53.outputs = [
    buf53: MultiOutput
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op53.node.kernel = None


op57: ExternKernelSchedulerNode(ExternKernelOut)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op57.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op57.outputs = [
    buf57: ExternKernelOut
    buf57.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf57.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=True, is_weak=False),
    ]
]
op57.node.kernel = extern_kernels.mm


op58_op59_op61: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op58_op59_op61.writes = 
    [   MemoryDep('buf58', c0, {c0: 128}),
        MemoryDep('buf59', c0, {c0: 128}),
        MemoryDep('buf61', c0, {c0: 98304})]
op58_op59_op61.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 98304}), MemoryDep('buf57', c0, {c0: 98304})]
op58_op59_op61.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg48_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg49_1', c1, {c0: 128, c1: 768})]
op58_op59_op61.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf58.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf59.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf61.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
]
op58_op59_op61.snodes[0] =
op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 128})]
op58.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 98304}), MemoryDep('buf57', c0, {c0: 98304})]
op58.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 128, c1: 768})]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf58.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (128, 768)
op58.sizes = ([128], [768])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg47_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op58_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf47', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf58', get_index_3, getitem)
        return store_reduction
op58_op59_op61.snodes[1] =
op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 128})]
op59.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 98304}), MemoryDep('buf57', c0, {c0: 98304})]
op59.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 128, c1: 768})]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf59.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (128, 768)
op59.sizes = ([128], [768])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg47_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op59_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf47', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf59', get_index_3, getitem_1)
        return store_reduction
op58_op59_op61.snodes[2] =
op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 98304})]
op61.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 98304}),
        MemoryDep('buf57', c0, {c0: 98304}),
        MemoryDep('buf58', c0, {c0: 128}),
        MemoryDep('buf59', c0, {c0: 128})]
op61.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg48_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg49_1', c1, {c0: 128, c1: 768})]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf61.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
]
op61.group.device = cuda:0
op61.group.iteration = (98304, 1)
op61.sizes = ([128, 768], [])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg47_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg48_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg49_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op61_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf47', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf58', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf59', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg48_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg49_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf61', get_index_7, add_3, None)
        return store


op62: ExternKernelSchedulerNode(ExternKernelOut)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op62.met_dependencies = [StarDep(name='arg50_1', mode=None)]
op62.outputs = [
    buf62: ExternKernelOut
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False)]
]
op62.node.kernel = extern_kernels.mm


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 393216})]
op63.unmet_dependencies = [MemoryDep('buf62', c0, {c0: 393216})]
op63.met_dependencies = [MemoryDep('arg51_1', c1, {c0: 128, c1: 3072})]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (393216, 1)
op63.sizes = ([128, 3072], [])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg51_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op63_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg51_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf62', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg51_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf63', get_index_4, mul_2, None)
        return store


op64: ExternKernelSchedulerNode(ExternKernelOut)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op64.met_dependencies = [StarDep(name='arg52_1', mode=None)]
op64.outputs = [
    buf64: ExternKernelOut
    buf64.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf64.users = [
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
]
op64.node.kernel = extern_kernels.mm


op65_op66_op68: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op65_op66_op68.writes = 
    [   MemoryDep('buf65', c0, {c0: 128}),
        MemoryDep('buf66', c0, {c0: 128}),
        MemoryDep('buf68', c0, {c0: 98304})]
op65_op66_op68.unmet_dependencies = [MemoryDep('buf61', c0, {c0: 98304}), MemoryDep('buf64', c0, {c0: 98304})]
op65_op66_op68.met_dependencies = 
    [   MemoryDep('arg53_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg54_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg55_1', c1, {c0: 128, c1: 768})]
op65_op66_op68.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf65.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf66.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
    ]
]
op65_op66_op68.snodes[0] =
op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 128})]
op65.unmet_dependencies = [MemoryDep('buf61', c0, {c0: 98304}), MemoryDep('buf64', c0, {c0: 98304})]
op65.met_dependencies = [MemoryDep('arg53_1', c1, {c0: 128, c1: 768})]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf65.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (128, 768)
op65.sizes = ([128], [768])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg53_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op65_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg53_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf61', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf65', get_index_3, getitem)
        return store_reduction
op65_op66_op68.snodes[1] =
op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 128})]
op66.unmet_dependencies = [MemoryDep('buf61', c0, {c0: 98304}), MemoryDep('buf64', c0, {c0: 98304})]
op66.met_dependencies = [MemoryDep('arg53_1', c1, {c0: 128, c1: 768})]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf66.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (128, 768)
op66.sizes = ([128], [768])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg53_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op66_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg53_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf61', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf66', get_index_3, getitem_1)
        return store_reduction
op65_op66_op68.snodes[2] =
op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 98304})]
op68.unmet_dependencies = 
    [   MemoryDep('buf61', c0, {c0: 98304}),
        MemoryDep('buf64', c0, {c0: 98304}),
        MemoryDep('buf65', c0, {c0: 128}),
        MemoryDep('buf66', c0, {c0: 128})]
op68.met_dependencies = 
    [   MemoryDep('arg53_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg54_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg55_1', c1, {c0: 128, c1: 768})]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
    ]
]
op68.group.device = cuda:0
op68.group.iteration = (98304, 1)
op68.sizes = ([128, 768], [])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg53_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg54_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg55_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op68_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg53_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf61', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf65', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf66', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg54_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg55_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf68', get_index_7, add_3, None)
        return store


op69: ExternKernelSchedulerNode(ExternKernelOut)
op69.writes = [StarDep(name='buf69', mode=None)]
op69.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op69.met_dependencies = [StarDep(name='arg56_1', mode=None), StarDep(name='arg57_1', mode=None)]
op69.outputs = [
    buf69: ExternKernelOut
    buf69.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op69.node.kernel = extern_kernels.bias_addmm


op70: ExternKernelSchedulerNode(ExternKernelOut)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op70.met_dependencies = [StarDep(name='arg58_1', mode=None), StarDep(name='arg59_1', mode=None)]
op70.outputs = [
    buf70: ExternKernelOut
    buf70.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op70.node.kernel = extern_kernels.bias_addmm


op71: ExternKernelSchedulerNode(ExternKernelOut)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op71.met_dependencies = [StarDep(name='arg60_1', mode=None), StarDep(name='arg61_1', mode=None)]
op71.outputs = [
    buf71: ExternKernelOut
    buf71.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op71.node.kernel = extern_kernels.bias_addmm


op73: ExternKernelSchedulerNode(FallbackKernel)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = 
    [   StarDep(name='buf69', mode=None),
        StarDep(name='buf70', mode=None),
        StarDep(name='buf71', mode=None),
        StarDep(name='buf72', mode=None)]
op73.met_dependencies = []
op73.outputs = [
    buf73: FallbackKernel
    buf73.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op74: ExternKernelSchedulerNode(MultiOutput)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: MultiOutput
    buf74.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op74.node.kernel = None


op78: ExternKernelSchedulerNode(ExternKernelOut)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op78.met_dependencies = [StarDep(name='arg62_1', mode=None)]
op78.outputs = [
    buf78: ExternKernelOut
    buf78.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf78.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
    ]
]
op78.node.kernel = extern_kernels.mm


op79_op80_op82: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op79_op80_op82.writes = 
    [   MemoryDep('buf79', c0, {c0: 128}),
        MemoryDep('buf80', c0, {c0: 128}),
        MemoryDep('buf82', c0, {c0: 98304})]
op79_op80_op82.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 98304}), MemoryDep('buf78', c0, {c0: 98304})]
op79_op80_op82.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg64_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg65_1', c1, {c0: 128, c1: 768})]
op79_op80_op82.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf79.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf80.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf82.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False),
    ]
]
op79_op80_op82.snodes[0] =
op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 128})]
op79.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 98304}), MemoryDep('buf78', c0, {c0: 98304})]
op79.met_dependencies = [MemoryDep('arg63_1', c1, {c0: 128, c1: 768})]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf79.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (128, 768)
op79.sizes = ([128], [768])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg63_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op79_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg63_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf68', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf79', get_index_3, getitem)
        return store_reduction
op79_op80_op82.snodes[1] =
op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 128})]
op80.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 98304}), MemoryDep('buf78', c0, {c0: 98304})]
op80.met_dependencies = [MemoryDep('arg63_1', c1, {c0: 128, c1: 768})]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf80.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (128, 768)
op80.sizes = ([128], [768])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg63_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op80_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg63_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf68', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf80', get_index_3, getitem_1)
        return store_reduction
op79_op80_op82.snodes[2] =
op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 98304})]
op82.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 98304}),
        MemoryDep('buf78', c0, {c0: 98304}),
        MemoryDep('buf79', c0, {c0: 128}),
        MemoryDep('buf80', c0, {c0: 128})]
op82.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg64_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg65_1', c1, {c0: 128, c1: 768})]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf82.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False),
    ]
]
op82.group.device = cuda:0
op82.group.iteration = (98304, 1)
op82.sizes = ([128, 768], [])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg63_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg64_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg65_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op82_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg63_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf68', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf79', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf80', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg64_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg65_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf82', get_index_7, add_3, None)
        return store


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf82', mode=None)]
op83.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
]
op83.node.kernel = extern_kernels.mm


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 393216})]
op84.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 393216})]
op84.met_dependencies = [MemoryDep('arg67_1', c1, {c0: 128, c1: 3072})]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (393216, 1)
op84.sizes = ([128, 3072], [])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg67_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op84_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf83', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg67_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf84', get_index_4, mul_2, None)
        return store


op85: ExternKernelSchedulerNode(ExternKernelOut)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op85.met_dependencies = [StarDep(name='arg68_1', mode=None)]
op85.outputs = [
    buf85: ExternKernelOut
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf85.users = [
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False),
    ]
]
op85.node.kernel = extern_kernels.mm


op86_op87_op89: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op86_op87_op89.writes = 
    [   MemoryDep('buf86', c0, {c0: 128}),
        MemoryDep('buf87', c0, {c0: 128}),
        MemoryDep('buf89', c0, {c0: 98304})]
op86_op87_op89.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 98304}), MemoryDep('buf85', c0, {c0: 98304})]
op86_op87_op89.met_dependencies = 
    [   MemoryDep('arg69_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg70_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg71_1', c1, {c0: 128, c1: 768})]
op86_op87_op89.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf86.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf87.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf89.users = [
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
    ]
]
op86_op87_op89.snodes[0] =
op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 128})]
op86.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 98304}), MemoryDep('buf85', c0, {c0: 98304})]
op86.met_dependencies = [MemoryDep('arg69_1', c1, {c0: 128, c1: 768})]
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf86.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (128, 768)
op86.sizes = ([128], [768])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg69_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf86_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op86_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg69_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf82', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf86', get_index_3, getitem)
        return store_reduction
op86_op87_op89.snodes[1] =
op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 128})]
op87.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 98304}), MemoryDep('buf85', c0, {c0: 98304})]
op87.met_dependencies = [MemoryDep('arg69_1', c1, {c0: 128, c1: 768})]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf87.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (128, 768)
op87.sizes = ([128], [768])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg69_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op87_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg69_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf82', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf87', get_index_3, getitem_1)
        return store_reduction
op86_op87_op89.snodes[2] =
op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 98304})]
op89.unmet_dependencies = 
    [   MemoryDep('buf82', c0, {c0: 98304}),
        MemoryDep('buf85', c0, {c0: 98304}),
        MemoryDep('buf86', c0, {c0: 128}),
        MemoryDep('buf87', c0, {c0: 128})]
op89.met_dependencies = 
    [   MemoryDep('arg69_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg70_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg71_1', c1, {c0: 128, c1: 768})]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf89.users = [
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
    ]
]
op89.group.device = cuda:0
op89.group.iteration = (98304, 1)
op89.sizes = ([128, 768], [])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg69_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf86_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg70_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg71_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op89_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg69_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf82', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf86', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf87', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg70_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg71_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf89', get_index_7, add_3, None)
        return store


op90: ExternKernelSchedulerNode(ExternKernelOut)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op90.met_dependencies = [StarDep(name='arg72_1', mode=None), StarDep(name='arg73_1', mode=None)]
op90.outputs = [
    buf90: ExternKernelOut
    buf90.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op90.node.kernel = extern_kernels.bias_addmm


op91: ExternKernelSchedulerNode(ExternKernelOut)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op91.met_dependencies = [StarDep(name='arg74_1', mode=None), StarDep(name='arg75_1', mode=None)]
op91.outputs = [
    buf91: ExternKernelOut
    buf91.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op91.node.kernel = extern_kernels.bias_addmm


op92: ExternKernelSchedulerNode(ExternKernelOut)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op92.met_dependencies = [StarDep(name='arg76_1', mode=None), StarDep(name='arg77_1', mode=None)]
op92.outputs = [
    buf92: ExternKernelOut
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf92.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op92.node.kernel = extern_kernels.bias_addmm


op94: ExternKernelSchedulerNode(FallbackKernel)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = 
    [   StarDep(name='buf90', mode=None),
        StarDep(name='buf91', mode=None),
        StarDep(name='buf92', mode=None),
        StarDep(name='buf93', mode=None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: FallbackKernel
    buf94.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf94.users = [NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op94.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op95: ExternKernelSchedulerNode(MultiOutput)
op95.writes = [StarDep(name='buf95', mode=None)]
op95.unmet_dependencies = [StarDep(name='buf94', mode=None)]
op95.met_dependencies = []
op95.outputs = [
    buf95: MultiOutput
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf95.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op95.node.kernel = None


op99: ExternKernelSchedulerNode(ExternKernelOut)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op99.met_dependencies = [StarDep(name='arg78_1', mode=None)]
op99.outputs = [
    buf99: ExternKernelOut
    buf99.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
    ]
]
op99.node.kernel = extern_kernels.mm


op100_op101_op103: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op100_op101_op103.writes = 
    [   MemoryDep('buf100', c0, {c0: 128}),
        MemoryDep('buf101', c0, {c0: 128}),
        MemoryDep('buf103', c0, {c0: 98304})]
op100_op101_op103.unmet_dependencies = [MemoryDep('buf89', c0, {c0: 98304}), MemoryDep('buf99', c0, {c0: 98304})]
op100_op101_op103.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg80_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg81_1', c1, {c0: 128, c1: 768})]
op100_op101_op103.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf100.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf101.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf103.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
    ]
]
op100_op101_op103.snodes[0] =
op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 128})]
op100.unmet_dependencies = [MemoryDep('buf89', c0, {c0: 98304}), MemoryDep('buf99', c0, {c0: 98304})]
op100.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 128, c1: 768})]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf100.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (128, 768)
op100.sizes = ([128], [768])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg79_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf100_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op100_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg79_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf89', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf100', get_index_3, getitem)
        return store_reduction
op100_op101_op103.snodes[1] =
op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 128})]
op101.unmet_dependencies = [MemoryDep('buf89', c0, {c0: 98304}), MemoryDep('buf99', c0, {c0: 98304})]
op101.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 128, c1: 768})]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf101.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (128, 768)
op101.sizes = ([128], [768])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg79_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op101_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg79_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf89', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf101', get_index_3, getitem_1)
        return store_reduction
op100_op101_op103.snodes[2] =
op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 98304})]
op103.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 128}),
        MemoryDep('buf101', c0, {c0: 128}),
        MemoryDep('buf89', c0, {c0: 98304}),
        MemoryDep('buf99', c0, {c0: 98304})]
op103.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg80_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg81_1', c1, {c0: 128, c1: 768})]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf103.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
    ]
]
op103.group.device = cuda:0
op103.group.iteration = (98304, 1)
op103.sizes = ([128, 768], [])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg79_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf100_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg80_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg81_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op103_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg79_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf89', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf100', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf101', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg80_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg81_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf103', get_index_7, add_3, None)
        return store


op104: ExternKernelSchedulerNode(ExternKernelOut)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='arg82_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelOut
    buf104.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf104.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False)]
]
op104.node.kernel = extern_kernels.mm


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 393216})]
op105.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 393216})]
op105.met_dependencies = [MemoryDep('arg83_1', c1, {c0: 128, c1: 3072})]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (393216, 1)
op105.sizes = ([128, 3072], [])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg83_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op105_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg83_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf104', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg83_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf105', get_index_4, mul_2, None)
        return store


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf105', mode=None)]
op106.met_dependencies = [StarDep(name='arg84_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf106.users = [
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
    ]
]
op106.node.kernel = extern_kernels.mm


op107_op108_op110: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op107_op108_op110.writes = 
    [   MemoryDep('buf107', c0, {c0: 128}),
        MemoryDep('buf108', c0, {c0: 128}),
        MemoryDep('buf110', c0, {c0: 98304})]
op107_op108_op110.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 98304}), MemoryDep('buf106', c0, {c0: 98304})]
op107_op108_op110.met_dependencies = 
    [   MemoryDep('arg85_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg86_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg87_1', c1, {c0: 128, c1: 768})]
op107_op108_op110.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf107.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf108.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf110.users = [
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
    ]
]
op107_op108_op110.snodes[0] =
op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 128})]
op107.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 98304}), MemoryDep('buf106', c0, {c0: 98304})]
op107.met_dependencies = [MemoryDep('arg85_1', c1, {c0: 128, c1: 768})]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf107.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (128, 768)
op107.sizes = ([128], [768])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg85_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op107_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg85_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf103', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf107', get_index_3, getitem)
        return store_reduction
op107_op108_op110.snodes[1] =
op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 128})]
op108.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 98304}), MemoryDep('buf106', c0, {c0: 98304})]
op108.met_dependencies = [MemoryDep('arg85_1', c1, {c0: 128, c1: 768})]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf108.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (128, 768)
op108.sizes = ([128], [768])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg85_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op108_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg85_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf103', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf108', get_index_3, getitem_1)
        return store_reduction
op107_op108_op110.snodes[2] =
op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 98304})]
op110.unmet_dependencies = 
    [   MemoryDep('buf103', c0, {c0: 98304}),
        MemoryDep('buf106', c0, {c0: 98304}),
        MemoryDep('buf107', c0, {c0: 128}),
        MemoryDep('buf108', c0, {c0: 128})]
op110.met_dependencies = 
    [   MemoryDep('arg85_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg86_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg87_1', c1, {c0: 128, c1: 768})]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf110.users = [
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
    ]
]
op110.group.device = cuda:0
op110.group.iteration = (98304, 1)
op110.sizes = ([128, 768], [])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg85_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg86_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg87_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op110_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg85_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf103', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf107', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf108', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg86_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg87_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf110', get_index_7, add_3, None)
        return store


op111: ExternKernelSchedulerNode(ExternKernelOut)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op111.met_dependencies = [StarDep(name='arg88_1', mode=None), StarDep(name='arg89_1', mode=None)]
op111.outputs = [
    buf111: ExternKernelOut
    buf111.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op111.node.kernel = extern_kernels.bias_addmm


op112: ExternKernelSchedulerNode(ExternKernelOut)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op112.met_dependencies = [StarDep(name='arg90_1', mode=None), StarDep(name='arg91_1', mode=None)]
op112.outputs = [
    buf112: ExternKernelOut
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op112.node.kernel = extern_kernels.bias_addmm


op113: ExternKernelSchedulerNode(ExternKernelOut)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op113.met_dependencies = [StarDep(name='arg92_1', mode=None), StarDep(name='arg93_1', mode=None)]
op113.outputs = [
    buf113: ExternKernelOut
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op113.node.kernel = extern_kernels.bias_addmm


op114_op135_op156_op177_op198: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op114_op135_op156_op177_op198.writes = 
    [   MemoryDep('buf114', c0, {c0: 98304}),
        MemoryDep('buf135', c0, {c0: 98304}),
        MemoryDep('buf156', c0, {c0: 98304}),
        MemoryDep('buf177', c0, {c0: 98304}),
        MemoryDep('buf198', c0, {c0: 98304})]
op114_op135_op156_op177_op198.unmet_dependencies = []
op114_op135_op156_op177_op198.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op114_op135_op156_op177_op198.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op114_op135_op156_op177_op198.snodes[0] =
op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 98304})]
op114.unmet_dependencies = []
op114.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (98304, 1)
op114.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op114_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf114', get_index_2, where, None)
        return store
op114_op135_op156_op177_op198.snodes[1] =
op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 98304})]
op135.unmet_dependencies = []
op135.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (98304, 1)
op135.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op135_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf135', get_index_2, where, None)
        return store
op114_op135_op156_op177_op198.snodes[2] =
op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 98304})]
op156.unmet_dependencies = []
op156.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (98304, 1)
op156.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op156_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf156', get_index_2, where, None)
        return store
op114_op135_op156_op177_op198.snodes[3] =
op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 98304})]
op177.unmet_dependencies = []
op177.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (98304, 1)
op177.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf177_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op177_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf177', get_index_2, where, None)
        return store
op114_op135_op156_op177_op198.snodes[4] =
op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 98304})]
op198.unmet_dependencies = []
op198.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (98304, 1)
op198.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op198_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf198', get_index_2, where, None)
        return store


op115: ExternKernelSchedulerNode(FallbackKernel)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = 
    [   StarDep(name='buf111', mode=None),
        StarDep(name='buf112', mode=None),
        StarDep(name='buf113', mode=None),
        StarDep(name='buf114', mode=None)]
op115.met_dependencies = []
op115.outputs = [
    buf115: FallbackKernel
    buf115.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op116: ExternKernelSchedulerNode(MultiOutput)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: MultiOutput
    buf116.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf116.users = [NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op116.node.kernel = None


op120: ExternKernelSchedulerNode(ExternKernelOut)
op120.writes = [StarDep(name='buf120', mode=None)]
op120.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op120.met_dependencies = [StarDep(name='arg94_1', mode=None)]
op120.outputs = [
    buf120: ExternKernelOut
    buf120.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf120.users = [
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
    ]
]
op120.node.kernel = extern_kernels.mm


op121_op122_op124: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op121_op122_op124.writes = 
    [   MemoryDep('buf121', c0, {c0: 128}),
        MemoryDep('buf122', c0, {c0: 128}),
        MemoryDep('buf124', c0, {c0: 98304})]
op121_op122_op124.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 98304}), MemoryDep('buf120', c0, {c0: 98304})]
op121_op122_op124.met_dependencies = 
    [   MemoryDep('arg95_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg96_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg97_1', c1, {c0: 128, c1: 768})]
op121_op122_op124.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf121.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf122.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf124.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
    ]
]
op121_op122_op124.snodes[0] =
op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 128})]
op121.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 98304}), MemoryDep('buf120', c0, {c0: 98304})]
op121.met_dependencies = [MemoryDep('arg95_1', c1, {c0: 128, c1: 768})]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf121.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (128, 768)
op121.sizes = ([128], [768])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg95_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op121_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg95_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf110', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf121', get_index_3, getitem)
        return store_reduction
op121_op122_op124.snodes[1] =
op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 128})]
op122.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 98304}), MemoryDep('buf120', c0, {c0: 98304})]
op122.met_dependencies = [MemoryDep('arg95_1', c1, {c0: 128, c1: 768})]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf122.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (128, 768)
op122.sizes = ([128], [768])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg95_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op122_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg95_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf110', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf122', get_index_3, getitem_1)
        return store_reduction
op121_op122_op124.snodes[2] =
op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 98304})]
op124.unmet_dependencies = 
    [   MemoryDep('buf110', c0, {c0: 98304}),
        MemoryDep('buf120', c0, {c0: 98304}),
        MemoryDep('buf121', c0, {c0: 128}),
        MemoryDep('buf122', c0, {c0: 128})]
op124.met_dependencies = 
    [   MemoryDep('arg95_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg96_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg97_1', c1, {c0: 128, c1: 768})]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf124.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
    ]
]
op124.group.device = cuda:0
op124.group.iteration = (98304, 1)
op124.sizes = ([128, 768], [])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg95_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg96_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg97_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op124_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg95_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf110', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf121', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf122', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg96_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg97_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf124', get_index_7, add_3, None)
        return store


op125: ExternKernelSchedulerNode(ExternKernelOut)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf124', mode=None)]
op125.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op125.outputs = [
    buf125: ExternKernelOut
    buf125.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf125.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False)]
]
op125.node.kernel = extern_kernels.mm


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 393216})]
op126.unmet_dependencies = [MemoryDep('buf125', c0, {c0: 393216})]
op126.met_dependencies = [MemoryDep('arg99_1', c1, {c0: 128, c1: 3072})]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf126.users = [NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (393216, 1)
op126.sizes = ([128, 3072], [])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg99_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf126_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op126_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg99_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf125', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg99_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf126', get_index_4, mul_2, None)
        return store


op127: ExternKernelSchedulerNode(ExternKernelOut)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf126', mode=None)]
op127.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op127.outputs = [
    buf127: ExternKernelOut
    buf127.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf127.users = [
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
    ]
]
op127.node.kernel = extern_kernels.mm


op128_op129_op131: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op128_op129_op131.writes = 
    [   MemoryDep('buf128', c0, {c0: 128}),
        MemoryDep('buf129', c0, {c0: 128}),
        MemoryDep('buf131', c0, {c0: 98304})]
op128_op129_op131.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 98304}), MemoryDep('buf127', c0, {c0: 98304})]
op128_op129_op131.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg102_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg103_1', c1, {c0: 128, c1: 768})]
op128_op129_op131.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf128.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf129.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf131.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
    ]
]
op128_op129_op131.snodes[0] =
op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 128})]
op128.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 98304}), MemoryDep('buf127', c0, {c0: 98304})]
op128.met_dependencies = [MemoryDep('arg101_1', c1, {c0: 128, c1: 768})]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf128.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (128, 768)
op128.sizes = ([128], [768])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg101_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op128_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf124', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf128', get_index_3, getitem)
        return store_reduction
op128_op129_op131.snodes[1] =
op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 128})]
op129.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 98304}), MemoryDep('buf127', c0, {c0: 98304})]
op129.met_dependencies = [MemoryDep('arg101_1', c1, {c0: 128, c1: 768})]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf129.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (128, 768)
op129.sizes = ([128], [768])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg101_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op129_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf124', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf129', get_index_3, getitem_1)
        return store_reduction
op128_op129_op131.snodes[2] =
op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 98304})]
op131.unmet_dependencies = 
    [   MemoryDep('buf124', c0, {c0: 98304}),
        MemoryDep('buf127', c0, {c0: 98304}),
        MemoryDep('buf128', c0, {c0: 128}),
        MemoryDep('buf129', c0, {c0: 128})]
op131.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg102_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg103_1', c1, {c0: 128, c1: 768})]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf131.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
    ]
]
op131.group.device = cuda:0
op131.group.iteration = (98304, 1)
op131.sizes = ([128, 768], [])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg101_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg102_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg103_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op131_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf124', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf128', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf129', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg102_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg103_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf131', get_index_7, add_3, None)
        return store


op132: ExternKernelSchedulerNode(ExternKernelOut)
op132.writes = [StarDep(name='buf132', mode=None)]
op132.unmet_dependencies = [StarDep(name='buf131', mode=None)]
op132.met_dependencies = [StarDep(name='arg104_1', mode=None), StarDep(name='arg105_1', mode=None)]
op132.outputs = [
    buf132: ExternKernelOut
    buf132.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op132.node.kernel = extern_kernels.bias_addmm


op133: ExternKernelSchedulerNode(ExternKernelOut)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf131', mode=None)]
op133.met_dependencies = [StarDep(name='arg106_1', mode=None), StarDep(name='arg107_1', mode=None)]
op133.outputs = [
    buf133: ExternKernelOut
    buf133.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op133.node.kernel = extern_kernels.bias_addmm


op134: ExternKernelSchedulerNode(ExternKernelOut)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf131', mode=None)]
op134.met_dependencies = [StarDep(name='arg108_1', mode=None), StarDep(name='arg109_1', mode=None)]
op134.outputs = [
    buf134: ExternKernelOut
    buf134.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf134.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op134.node.kernel = extern_kernels.bias_addmm


op136: ExternKernelSchedulerNode(FallbackKernel)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = 
    [   StarDep(name='buf132', mode=None),
        StarDep(name='buf133', mode=None),
        StarDep(name='buf134', mode=None),
        StarDep(name='buf135', mode=None)]
op136.met_dependencies = []
op136.outputs = [
    buf136: FallbackKernel
    buf136.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf136.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op137: ExternKernelSchedulerNode(MultiOutput)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf136', mode=None)]
op137.met_dependencies = []
op137.outputs = [
    buf137: MultiOutput
    buf137.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf137.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op137.node.kernel = None


op141: ExternKernelSchedulerNode(ExternKernelOut)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf137', mode=None)]
op141.met_dependencies = [StarDep(name='arg110_1', mode=None)]
op141.outputs = [
    buf141: ExternKernelOut
    buf141.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf141.users = [
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
    ]
]
op141.node.kernel = extern_kernels.mm


op142_op143_op145: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op142_op143_op145.writes = 
    [   MemoryDep('buf142', c0, {c0: 128}),
        MemoryDep('buf143', c0, {c0: 128}),
        MemoryDep('buf145', c0, {c0: 98304})]
op142_op143_op145.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 98304}), MemoryDep('buf141', c0, {c0: 98304})]
op142_op143_op145.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg112_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg113_1', c1, {c0: 128, c1: 768})]
op142_op143_op145.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf142.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf143.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf145.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=True, is_weak=False),
    ]
]
op142_op143_op145.snodes[0] =
op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 128})]
op142.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 98304}), MemoryDep('buf141', c0, {c0: 98304})]
op142.met_dependencies = [MemoryDep('arg111_1', c1, {c0: 128, c1: 768})]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf142.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (128, 768)
op142.sizes = ([128], [768])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg111_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op142_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg111_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf131', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf142', get_index_3, getitem)
        return store_reduction
op142_op143_op145.snodes[1] =
op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 128})]
op143.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 98304}), MemoryDep('buf141', c0, {c0: 98304})]
op143.met_dependencies = [MemoryDep('arg111_1', c1, {c0: 128, c1: 768})]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf143.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (128, 768)
op143.sizes = ([128], [768])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg111_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op143_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg111_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf131', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf143', get_index_3, getitem_1)
        return store_reduction
op142_op143_op145.snodes[2] =
op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 98304})]
op145.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 98304}),
        MemoryDep('buf141', c0, {c0: 98304}),
        MemoryDep('buf142', c0, {c0: 128}),
        MemoryDep('buf143', c0, {c0: 128})]
op145.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg112_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg113_1', c1, {c0: 128, c1: 768})]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf145.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=True, is_weak=False),
    ]
]
op145.group.device = cuda:0
op145.group.iteration = (98304, 1)
op145.sizes = ([128, 768], [])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg111_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg112_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg113_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op145_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg111_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf131', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf142', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf143', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg112_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg113_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf145', get_index_7, add_3, None)
        return store


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op146.met_dependencies = [StarDep(name='arg114_1', mode=None)]
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf146.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False)]
]
op146.node.kernel = extern_kernels.mm


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 393216})]
op147.unmet_dependencies = [MemoryDep('buf146', c0, {c0: 393216})]
op147.met_dependencies = [MemoryDep('arg115_1', c1, {c0: 128, c1: 3072})]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf147.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (393216, 1)
op147.sizes = ([128, 3072], [])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg115_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf147_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op147_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg115_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf146', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg115_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf147', get_index_4, mul_2, None)
        return store


op148: ExternKernelSchedulerNode(ExternKernelOut)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf147', mode=None)]
op148.met_dependencies = [StarDep(name='arg116_1', mode=None)]
op148.outputs = [
    buf148: ExternKernelOut
    buf148.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf148.users = [
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=True, is_weak=False),
    ]
]
op148.node.kernel = extern_kernels.mm


op149_op150_op152: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op149_op150_op152.writes = 
    [   MemoryDep('buf149', c0, {c0: 128}),
        MemoryDep('buf150', c0, {c0: 128}),
        MemoryDep('buf152', c0, {c0: 98304})]
op149_op150_op152.unmet_dependencies = [MemoryDep('buf145', c0, {c0: 98304}), MemoryDep('buf148', c0, {c0: 98304})]
op149_op150_op152.met_dependencies = 
    [   MemoryDep('arg117_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg118_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg119_1', c1, {c0: 128, c1: 768})]
op149_op150_op152.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf149.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf150.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf152.users = [
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
    ]
]
op149_op150_op152.snodes[0] =
op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 128})]
op149.unmet_dependencies = [MemoryDep('buf145', c0, {c0: 98304}), MemoryDep('buf148', c0, {c0: 98304})]
op149.met_dependencies = [MemoryDep('arg117_1', c1, {c0: 128, c1: 768})]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf149.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (128, 768)
op149.sizes = ([128], [768])
buf148_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg117_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op149_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg117_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf145', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf149', get_index_3, getitem)
        return store_reduction
op149_op150_op152.snodes[1] =
op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 128})]
op150.unmet_dependencies = [MemoryDep('buf145', c0, {c0: 98304}), MemoryDep('buf148', c0, {c0: 98304})]
op150.met_dependencies = [MemoryDep('arg117_1', c1, {c0: 128, c1: 768})]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf150.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (128, 768)
op150.sizes = ([128], [768])
buf148_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg117_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op150_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg117_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf145', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf150', get_index_3, getitem_1)
        return store_reduction
op149_op150_op152.snodes[2] =
op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 98304})]
op152.unmet_dependencies = 
    [   MemoryDep('buf145', c0, {c0: 98304}),
        MemoryDep('buf148', c0, {c0: 98304}),
        MemoryDep('buf149', c0, {c0: 128}),
        MemoryDep('buf150', c0, {c0: 128})]
op152.met_dependencies = 
    [   MemoryDep('arg117_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg118_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg119_1', c1, {c0: 128, c1: 768})]
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf152.users = [
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
    ]
]
op152.group.device = cuda:0
op152.group.iteration = (98304, 1)
op152.sizes = ([128, 768], [])
buf148_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg117_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg118_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg119_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op152_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg117_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf145', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf149', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf150', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg118_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg119_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf152', get_index_7, add_3, None)
        return store


op153: ExternKernelSchedulerNode(ExternKernelOut)
op153.writes = [StarDep(name='buf153', mode=None)]
op153.unmet_dependencies = [StarDep(name='buf152', mode=None)]
op153.met_dependencies = [StarDep(name='arg120_1', mode=None), StarDep(name='arg121_1', mode=None)]
op153.outputs = [
    buf153: ExternKernelOut
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf153.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op153.node.kernel = extern_kernels.bias_addmm


op154: ExternKernelSchedulerNode(ExternKernelOut)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf152', mode=None)]
op154.met_dependencies = [StarDep(name='arg122_1', mode=None), StarDep(name='arg123_1', mode=None)]
op154.outputs = [
    buf154: ExternKernelOut
    buf154.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op154.node.kernel = extern_kernels.bias_addmm


op155: ExternKernelSchedulerNode(ExternKernelOut)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf152', mode=None)]
op155.met_dependencies = [StarDep(name='arg124_1', mode=None), StarDep(name='arg125_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelOut
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op155.node.kernel = extern_kernels.bias_addmm


op157: ExternKernelSchedulerNode(FallbackKernel)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = 
    [   StarDep(name='buf153', mode=None),
        StarDep(name='buf154', mode=None),
        StarDep(name='buf155', mode=None),
        StarDep(name='buf156', mode=None)]
op157.met_dependencies = []
op157.outputs = [
    buf157: FallbackKernel
    buf157.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op158: ExternKernelSchedulerNode(MultiOutput)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = [StarDep(name='buf157', mode=None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: MultiOutput
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op158.node.kernel = None


op162: ExternKernelSchedulerNode(ExternKernelOut)
op162.writes = [StarDep(name='buf162', mode=None)]
op162.unmet_dependencies = [StarDep(name='buf158', mode=None)]
op162.met_dependencies = [StarDep(name='arg126_1', mode=None)]
op162.outputs = [
    buf162: ExternKernelOut
    buf162.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf162.users = [
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
    ]
]
op162.node.kernel = extern_kernels.mm


op163_op164_op166: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op163_op164_op166.writes = 
    [   MemoryDep('buf163', c0, {c0: 128}),
        MemoryDep('buf164', c0, {c0: 128}),
        MemoryDep('buf166', c0, {c0: 98304})]
op163_op164_op166.unmet_dependencies = [MemoryDep('buf152', c0, {c0: 98304}), MemoryDep('buf162', c0, {c0: 98304})]
op163_op164_op166.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg128_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg129_1', c1, {c0: 128, c1: 768})]
op163_op164_op166.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf163.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf164.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf166.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False),
    ]
]
op163_op164_op166.snodes[0] =
op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 128})]
op163.unmet_dependencies = [MemoryDep('buf152', c0, {c0: 98304}), MemoryDep('buf162', c0, {c0: 98304})]
op163.met_dependencies = [MemoryDep('arg127_1', c1, {c0: 128, c1: 768})]
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf163.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (128, 768)
op163.sizes = ([128], [768])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg127_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op163_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg127_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf152', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf163', get_index_3, getitem)
        return store_reduction
op163_op164_op166.snodes[1] =
op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 128})]
op164.unmet_dependencies = [MemoryDep('buf152', c0, {c0: 98304}), MemoryDep('buf162', c0, {c0: 98304})]
op164.met_dependencies = [MemoryDep('arg127_1', c1, {c0: 128, c1: 768})]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf164.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (128, 768)
op164.sizes = ([128], [768])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg127_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op164_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg127_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf152', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf164', get_index_3, getitem_1)
        return store_reduction
op163_op164_op166.snodes[2] =
op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 98304})]
op166.unmet_dependencies = 
    [   MemoryDep('buf152', c0, {c0: 98304}),
        MemoryDep('buf162', c0, {c0: 98304}),
        MemoryDep('buf163', c0, {c0: 128}),
        MemoryDep('buf164', c0, {c0: 128})]
op166.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg128_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg129_1', c1, {c0: 128, c1: 768})]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf166.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False),
    ]
]
op166.group.device = cuda:0
op166.group.iteration = (98304, 1)
op166.sizes = ([128, 768], [])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg127_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg128_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg129_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op166_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg127_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf152', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf163', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf164', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg128_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg129_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf166', get_index_7, add_3, None)
        return store


op167: ExternKernelSchedulerNode(ExternKernelOut)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf166', mode=None)]
op167.met_dependencies = [StarDep(name='arg130_1', mode=None)]
op167.outputs = [
    buf167: ExternKernelOut
    buf167.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf167.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False)]
]
op167.node.kernel = extern_kernels.mm


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 393216})]
op168.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 393216})]
op168.met_dependencies = [MemoryDep('arg131_1', c1, {c0: 128, c1: 3072})]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf168.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (393216, 1)
op168.sizes = ([128, 3072], [])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg131_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf168_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op168_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg131_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf167', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg131_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf168', get_index_4, mul_2, None)
        return store


op169: ExternKernelSchedulerNode(ExternKernelOut)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf168', mode=None)]
op169.met_dependencies = [StarDep(name='arg132_1', mode=None)]
op169.outputs = [
    buf169: ExternKernelOut
    buf169.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf169.users = [
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False),
    ]
]
op169.node.kernel = extern_kernels.mm


op170_op171_op173: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op170_op171_op173.writes = 
    [   MemoryDep('buf170', c0, {c0: 128}),
        MemoryDep('buf171', c0, {c0: 128}),
        MemoryDep('buf173', c0, {c0: 98304})]
op170_op171_op173.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 98304}), MemoryDep('buf169', c0, {c0: 98304})]
op170_op171_op173.met_dependencies = 
    [   MemoryDep('arg133_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg134_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg135_1', c1, {c0: 128, c1: 768})]
op170_op171_op173.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf170.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf171.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf173.users = [
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
]
op170_op171_op173.snodes[0] =
op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 128})]
op170.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 98304}), MemoryDep('buf169', c0, {c0: 98304})]
op170.met_dependencies = [MemoryDep('arg133_1', c1, {c0: 128, c1: 768})]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf170.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (128, 768)
op170.sizes = ([128], [768])
buf169_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg133_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op170_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg133_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf166', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf170', get_index_3, getitem)
        return store_reduction
op170_op171_op173.snodes[1] =
op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 128})]
op171.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 98304}), MemoryDep('buf169', c0, {c0: 98304})]
op171.met_dependencies = [MemoryDep('arg133_1', c1, {c0: 128, c1: 768})]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf171.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (128, 768)
op171.sizes = ([128], [768])
buf169_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg133_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op171_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg133_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf166', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf171', get_index_3, getitem_1)
        return store_reduction
op170_op171_op173.snodes[2] =
op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 98304})]
op173.unmet_dependencies = 
    [   MemoryDep('buf166', c0, {c0: 98304}),
        MemoryDep('buf169', c0, {c0: 98304}),
        MemoryDep('buf170', c0, {c0: 128}),
        MemoryDep('buf171', c0, {c0: 128})]
op173.met_dependencies = 
    [   MemoryDep('arg133_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg134_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg135_1', c1, {c0: 128, c1: 768})]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf173.users = [
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
]
op173.group.device = cuda:0
op173.group.iteration = (98304, 1)
op173.sizes = ([128, 768], [])
buf169_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg133_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg134_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg135_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op173_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg133_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf166', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf170', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf171', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg134_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg135_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf173', get_index_7, add_3, None)
        return store


op174: ExternKernelSchedulerNode(ExternKernelOut)
op174.writes = [StarDep(name='buf174', mode=None)]
op174.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op174.met_dependencies = [StarDep(name='arg136_1', mode=None), StarDep(name='arg137_1', mode=None)]
op174.outputs = [
    buf174: ExternKernelOut
    buf174.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf174.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op174.node.kernel = extern_kernels.bias_addmm


op175: ExternKernelSchedulerNode(ExternKernelOut)
op175.writes = [StarDep(name='buf175', mode=None)]
op175.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op175.met_dependencies = [StarDep(name='arg138_1', mode=None), StarDep(name='arg139_1', mode=None)]
op175.outputs = [
    buf175: ExternKernelOut
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op175.node.kernel = extern_kernels.bias_addmm


op176: ExternKernelSchedulerNode(ExternKernelOut)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op176.met_dependencies = [StarDep(name='arg140_1', mode=None), StarDep(name='arg141_1', mode=None)]
op176.outputs = [
    buf176: ExternKernelOut
    buf176.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op176.node.kernel = extern_kernels.bias_addmm


op178: ExternKernelSchedulerNode(FallbackKernel)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = 
    [   StarDep(name='buf174', mode=None),
        StarDep(name='buf175', mode=None),
        StarDep(name='buf176', mode=None),
        StarDep(name='buf177', mode=None)]
op178.met_dependencies = []
op178.outputs = [
    buf178: FallbackKernel
    buf178.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf178.users = [NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op178.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op179: ExternKernelSchedulerNode(MultiOutput)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op179.met_dependencies = []
op179.outputs = [
    buf179: MultiOutput
    buf179.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op179.node.kernel = None


op183: ExternKernelSchedulerNode(ExternKernelOut)
op183.writes = [StarDep(name='buf183', mode=None)]
op183.unmet_dependencies = [StarDep(name='buf179', mode=None)]
op183.met_dependencies = [StarDep(name='arg142_1', mode=None)]
op183.outputs = [
    buf183: ExternKernelOut
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
]
op183.node.kernel = extern_kernels.mm


op184_op185_op187: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op184_op185_op187.writes = 
    [   MemoryDep('buf184', c0, {c0: 128}),
        MemoryDep('buf185', c0, {c0: 128}),
        MemoryDep('buf187', c0, {c0: 98304})]
op184_op185_op187.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 98304}), MemoryDep('buf183', c0, {c0: 98304})]
op184_op185_op187.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg144_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg145_1', c1, {c0: 128, c1: 768})]
op184_op185_op187.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf184.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf185.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf187.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
    ]
]
op184_op185_op187.snodes[0] =
op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 128})]
op184.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 98304}), MemoryDep('buf183', c0, {c0: 98304})]
op184.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 128, c1: 768})]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf184.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (128, 768)
op184.sizes = ([128], [768])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op184_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg143_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf173', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf184', get_index_3, getitem)
        return store_reduction
op184_op185_op187.snodes[1] =
op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 128})]
op185.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 98304}), MemoryDep('buf183', c0, {c0: 98304})]
op185.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 128, c1: 768})]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf185.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (128, 768)
op185.sizes = ([128], [768])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op185_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg143_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf173', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf185', get_index_3, getitem_1)
        return store_reduction
op184_op185_op187.snodes[2] =
op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 98304})]
op187.unmet_dependencies = 
    [   MemoryDep('buf173', c0, {c0: 98304}),
        MemoryDep('buf183', c0, {c0: 98304}),
        MemoryDep('buf184', c0, {c0: 128}),
        MemoryDep('buf185', c0, {c0: 128})]
op187.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg144_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg145_1', c1, {c0: 128, c1: 768})]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf187.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
    ]
]
op187.group.device = cuda:0
op187.group.iteration = (98304, 1)
op187.sizes = ([128, 768], [])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg144_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg145_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op187_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg143_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf173', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf184', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf185', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg144_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg145_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf187', get_index_7, add_3, None)
        return store


op188: ExternKernelSchedulerNode(ExternKernelOut)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op188.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op188.outputs = [
    buf188: ExternKernelOut
    buf188.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf188.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False)]
]
op188.node.kernel = extern_kernels.mm


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 393216})]
op189.unmet_dependencies = [MemoryDep('buf188', c0, {c0: 393216})]
op189.met_dependencies = [MemoryDep('arg147_1', c1, {c0: 128, c1: 3072})]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (393216, 1)
op189.sizes = ([128, 3072], [])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg147_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf189_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op189_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg147_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf188', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg147_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf189', get_index_4, mul_2, None)
        return store


op190: ExternKernelSchedulerNode(ExternKernelOut)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op190.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op190.outputs = [
    buf190: ExternKernelOut
    buf190.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf190.users = [
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
    ]
]
op190.node.kernel = extern_kernels.mm


op191_op192_op194: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op191_op192_op194.writes = 
    [   MemoryDep('buf191', c0, {c0: 128}),
        MemoryDep('buf192', c0, {c0: 128}),
        MemoryDep('buf194', c0, {c0: 98304})]
op191_op192_op194.unmet_dependencies = [MemoryDep('buf187', c0, {c0: 98304}), MemoryDep('buf190', c0, {c0: 98304})]
op191_op192_op194.met_dependencies = 
    [   MemoryDep('arg149_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg150_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg151_1', c1, {c0: 128, c1: 768})]
op191_op192_op194.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf191.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf192.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf194.users = [
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False),
    ]
]
op191_op192_op194.snodes[0] =
op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 128})]
op191.unmet_dependencies = [MemoryDep('buf187', c0, {c0: 98304}), MemoryDep('buf190', c0, {c0: 98304})]
op191.met_dependencies = [MemoryDep('arg149_1', c1, {c0: 128, c1: 768})]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf191.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (128, 768)
op191.sizes = ([128], [768])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg149_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op191_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf187', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf191', get_index_3, getitem)
        return store_reduction
op191_op192_op194.snodes[1] =
op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 128})]
op192.unmet_dependencies = [MemoryDep('buf187', c0, {c0: 98304}), MemoryDep('buf190', c0, {c0: 98304})]
op192.met_dependencies = [MemoryDep('arg149_1', c1, {c0: 128, c1: 768})]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf192.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (128, 768)
op192.sizes = ([128], [768])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg149_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op192_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf187', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf192', get_index_3, getitem_1)
        return store_reduction
op191_op192_op194.snodes[2] =
op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 98304})]
op194.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 98304}),
        MemoryDep('buf190', c0, {c0: 98304}),
        MemoryDep('buf191', c0, {c0: 128}),
        MemoryDep('buf192', c0, {c0: 128})]
op194.met_dependencies = 
    [   MemoryDep('arg149_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg150_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg151_1', c1, {c0: 128, c1: 768})]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf194.users = [
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False),
    ]
]
op194.group.device = cuda:0
op194.group.iteration = (98304, 1)
op194.sizes = ([128, 768], [])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg149_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg150_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg151_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op194_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf187', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf191', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf192', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg150_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg151_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf194', get_index_7, add_3, None)
        return store


op195: ExternKernelSchedulerNode(ExternKernelOut)
op195.writes = [StarDep(name='buf195', mode=None)]
op195.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op195.met_dependencies = [StarDep(name='arg152_1', mode=None), StarDep(name='arg153_1', mode=None)]
op195.outputs = [
    buf195: ExternKernelOut
    buf195.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf195.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op195.node.kernel = extern_kernels.bias_addmm


op196: ExternKernelSchedulerNode(ExternKernelOut)
op196.writes = [StarDep(name='buf196', mode=None)]
op196.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op196.met_dependencies = [StarDep(name='arg154_1', mode=None), StarDep(name='arg155_1', mode=None)]
op196.outputs = [
    buf196: ExternKernelOut
    buf196.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op196.node.kernel = extern_kernels.bias_addmm


op197: ExternKernelSchedulerNode(ExternKernelOut)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op197.met_dependencies = [StarDep(name='arg156_1', mode=None), StarDep(name='arg157_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelOut
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op197.node.kernel = extern_kernels.bias_addmm


op199: ExternKernelSchedulerNode(FallbackKernel)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = 
    [   StarDep(name='buf195', mode=None),
        StarDep(name='buf196', mode=None),
        StarDep(name='buf197', mode=None),
        StarDep(name='buf198', mode=None)]
op199.met_dependencies = []
op199.outputs = [
    buf199: FallbackKernel
    buf199.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf199.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op200: ExternKernelSchedulerNode(MultiOutput)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op200.met_dependencies = []
op200.outputs = [
    buf200: MultiOutput
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op200.node.kernel = None


op204: ExternKernelSchedulerNode(ExternKernelOut)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op204.met_dependencies = [StarDep(name='arg158_1', mode=None)]
op204.outputs = [
    buf204: ExternKernelOut
    buf204.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf204.users = [
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False),
    ]
]
op204.node.kernel = extern_kernels.mm


op205_op206_op208: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op205_op206_op208.writes = 
    [   MemoryDep('buf205', c0, {c0: 128}),
        MemoryDep('buf206', c0, {c0: 128}),
        MemoryDep('buf208', c0, {c0: 98304})]
op205_op206_op208.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 98304}), MemoryDep('buf204', c0, {c0: 98304})]
op205_op206_op208.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg160_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg161_1', c1, {c0: 128, c1: 768})]
op205_op206_op208.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf205.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf206.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf208.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
    ]
]
op205_op206_op208.snodes[0] =
op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 128})]
op205.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 98304}), MemoryDep('buf204', c0, {c0: 98304})]
op205.met_dependencies = [MemoryDep('arg159_1', c1, {c0: 128, c1: 768})]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf205.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (128, 768)
op205.sizes = ([128], [768])
buf204_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg159_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op205_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf194', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf205', get_index_3, getitem)
        return store_reduction
op205_op206_op208.snodes[1] =
op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 128})]
op206.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 98304}), MemoryDep('buf204', c0, {c0: 98304})]
op206.met_dependencies = [MemoryDep('arg159_1', c1, {c0: 128, c1: 768})]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf206.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (128, 768)
op206.sizes = ([128], [768])
buf204_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg159_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op206_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf194', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf206', get_index_3, getitem_1)
        return store_reduction
op205_op206_op208.snodes[2] =
op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 98304})]
op208.unmet_dependencies = 
    [   MemoryDep('buf194', c0, {c0: 98304}),
        MemoryDep('buf204', c0, {c0: 98304}),
        MemoryDep('buf205', c0, {c0: 128}),
        MemoryDep('buf206', c0, {c0: 128})]
op208.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg160_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg161_1', c1, {c0: 128, c1: 768})]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf208.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
    ]
]
op208.group.device = cuda:0
op208.group.iteration = (98304, 1)
op208.sizes = ([128, 768], [])
buf204_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg159_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg160_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg161_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op208_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf194', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf205', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf206', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg160_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg161_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf208', get_index_7, add_3, None)
        return store


op209: ExternKernelSchedulerNode(ExternKernelOut)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op209.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op209.outputs = [
    buf209: ExternKernelOut
    buf209.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf209.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False)]
]
op209.node.kernel = extern_kernels.mm


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 393216})]
op210.unmet_dependencies = [MemoryDep('buf209', c0, {c0: 393216})]
op210.met_dependencies = [MemoryDep('arg163_1', c1, {c0: 128, c1: 3072})]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (393216, 1)
op210.sizes = ([128, 3072], [])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg163_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op210_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg163_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf209', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg163_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf210', get_index_4, mul_2, None)
        return store


op211: ExternKernelSchedulerNode(ExternKernelOut)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op211.met_dependencies = [StarDep(name='arg164_1', mode=None)]
op211.outputs = [
    buf211: ExternKernelOut
    buf211.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf211.users = [
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
    ]
]
op211.node.kernel = extern_kernels.mm


op212_op213_op215: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op212_op213_op215.writes = 
    [   MemoryDep('buf212', c0, {c0: 128}),
        MemoryDep('buf213', c0, {c0: 128}),
        MemoryDep('buf215', c0, {c0: 98304})]
op212_op213_op215.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 98304}), MemoryDep('buf211', c0, {c0: 98304})]
op212_op213_op215.met_dependencies = 
    [   MemoryDep('arg165_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg166_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg167_1', c1, {c0: 128, c1: 768})]
op212_op213_op215.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf212.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf213.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf215.users = [
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
    ]
]
op212_op213_op215.snodes[0] =
op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 128})]
op212.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 98304}), MemoryDep('buf211', c0, {c0: 98304})]
op212.met_dependencies = [MemoryDep('arg165_1', c1, {c0: 128, c1: 768})]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf212.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (128, 768)
op212.sizes = ([128], [768])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg165_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op212_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg165_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf208', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf212', get_index_3, getitem)
        return store_reduction
op212_op213_op215.snodes[1] =
op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 128})]
op213.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 98304}), MemoryDep('buf211', c0, {c0: 98304})]
op213.met_dependencies = [MemoryDep('arg165_1', c1, {c0: 128, c1: 768})]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf213.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (128, 768)
op213.sizes = ([128], [768])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg165_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op213_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg165_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf208', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf213', get_index_3, getitem_1)
        return store_reduction
op212_op213_op215.snodes[2] =
op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 98304})]
op215.unmet_dependencies = 
    [   MemoryDep('buf208', c0, {c0: 98304}),
        MemoryDep('buf211', c0, {c0: 98304}),
        MemoryDep('buf212', c0, {c0: 128}),
        MemoryDep('buf213', c0, {c0: 128})]
op215.met_dependencies = 
    [   MemoryDep('arg165_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg166_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg167_1', c1, {c0: 128, c1: 768})]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf215.users = [
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
    ]
]
op215.group.device = cuda:0
op215.group.iteration = (98304, 1)
op215.sizes = ([128, 768], [])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg165_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg166_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg167_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op215_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg165_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf208', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf212', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf213', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg166_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg167_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf215', get_index_7, add_3, None)
        return store


op216: ExternKernelSchedulerNode(ExternKernelOut)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op216.met_dependencies = [StarDep(name='arg168_1', mode=None), StarDep(name='arg169_1', mode=None)]
op216.outputs = [
    buf216: ExternKernelOut
    buf216.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf216.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op216.node.kernel = extern_kernels.bias_addmm


op217: ExternKernelSchedulerNode(ExternKernelOut)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op217.met_dependencies = [StarDep(name='arg170_1', mode=None), StarDep(name='arg171_1', mode=None)]
op217.outputs = [
    buf217: ExternKernelOut
    buf217.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf217.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op217.node.kernel = extern_kernels.bias_addmm


op218: ExternKernelSchedulerNode(ExternKernelOut)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op218.met_dependencies = [StarDep(name='arg172_1', mode=None), StarDep(name='arg173_1', mode=None)]
op218.outputs = [
    buf218: ExternKernelOut
    buf218.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf218.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op218.node.kernel = extern_kernels.bias_addmm


op219_op240: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op219_op240.writes = [MemoryDep('buf219', c0, {c0: 98304}), MemoryDep('buf240', c0, {c0: 98304})]
op219_op240.unmet_dependencies = []
op219_op240.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op219_op240.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf219.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op219_op240.snodes[0] =
op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 98304})]
op219.unmet_dependencies = []
op219.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf219.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (98304, 1)
op219.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf219_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op219_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf219', get_index_2, where, None)
        return store
op219_op240.snodes[1] =
op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 98304})]
op240.unmet_dependencies = []
op240.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (98304, 1)
op240.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf240_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op240_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf240', get_index_2, where, None)
        return store


op220: ExternKernelSchedulerNode(FallbackKernel)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = 
    [   StarDep(name='buf216', mode=None),
        StarDep(name='buf217', mode=None),
        StarDep(name='buf218', mode=None),
        StarDep(name='buf219', mode=None)]
op220.met_dependencies = []
op220.outputs = [
    buf220: FallbackKernel
    buf220.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf220.users = [NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op220.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op221: ExternKernelSchedulerNode(MultiOutput)
op221.writes = [StarDep(name='buf221', mode=None)]
op221.unmet_dependencies = [StarDep(name='buf220', mode=None)]
op221.met_dependencies = []
op221.outputs = [
    buf221: MultiOutput
    buf221.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op221.node.kernel = None


op225: ExternKernelSchedulerNode(ExternKernelOut)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op225.met_dependencies = [StarDep(name='arg174_1', mode=None)]
op225.outputs = [
    buf225: ExternKernelOut
    buf225.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf225.users = [
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
    ]
]
op225.node.kernel = extern_kernels.mm


op226_op227_op229: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op226_op227_op229.writes = 
    [   MemoryDep('buf226', c0, {c0: 128}),
        MemoryDep('buf227', c0, {c0: 128}),
        MemoryDep('buf229', c0, {c0: 98304})]
op226_op227_op229.unmet_dependencies = [MemoryDep('buf215', c0, {c0: 98304}), MemoryDep('buf225', c0, {c0: 98304})]
op226_op227_op229.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg176_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg177_1', c1, {c0: 128, c1: 768})]
op226_op227_op229.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf226.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf227.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf229.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
    ]
]
op226_op227_op229.snodes[0] =
op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 128})]
op226.unmet_dependencies = [MemoryDep('buf215', c0, {c0: 98304}), MemoryDep('buf225', c0, {c0: 98304})]
op226.met_dependencies = [MemoryDep('arg175_1', c1, {c0: 128, c1: 768})]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf226.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (128, 768)
op226.sizes = ([128], [768])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg175_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op226_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg175_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf215', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf226', get_index_3, getitem)
        return store_reduction
op226_op227_op229.snodes[1] =
op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 128})]
op227.unmet_dependencies = [MemoryDep('buf215', c0, {c0: 98304}), MemoryDep('buf225', c0, {c0: 98304})]
op227.met_dependencies = [MemoryDep('arg175_1', c1, {c0: 128, c1: 768})]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf227.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (128, 768)
op227.sizes = ([128], [768])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg175_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op227_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg175_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf215', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf227', get_index_3, getitem_1)
        return store_reduction
op226_op227_op229.snodes[2] =
op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 98304})]
op229.unmet_dependencies = 
    [   MemoryDep('buf215', c0, {c0: 98304}),
        MemoryDep('buf225', c0, {c0: 98304}),
        MemoryDep('buf226', c0, {c0: 128}),
        MemoryDep('buf227', c0, {c0: 128})]
op229.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg176_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg177_1', c1, {c0: 128, c1: 768})]
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf229.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
    ]
]
op229.group.device = cuda:0
op229.group.iteration = (98304, 1)
op229.sizes = ([128, 768], [])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg175_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg176_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg177_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op229_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg175_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf215', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf226', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf227', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg176_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg177_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf229', get_index_7, add_3, None)
        return store


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf229', mode=None)]
op230.met_dependencies = [StarDep(name='arg178_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf230.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False)]
]
op230.node.kernel = extern_kernels.mm


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 393216})]
op231.unmet_dependencies = [MemoryDep('buf230', c0, {c0: 393216})]
op231.met_dependencies = [MemoryDep('arg179_1', c1, {c0: 128, c1: 3072})]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (393216, 1)
op231.sizes = ([128, 3072], [])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg179_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op231_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg179_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf230', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg179_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf231', get_index_4, mul_2, None)
        return store


op232: ExternKernelSchedulerNode(ExternKernelOut)
op232.writes = [StarDep(name='buf232', mode=None)]
op232.unmet_dependencies = [StarDep(name='buf231', mode=None)]
op232.met_dependencies = [StarDep(name='arg180_1', mode=None)]
op232.outputs = [
    buf232: ExternKernelOut
    buf232.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf232.users = [
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
    ]
]
op232.node.kernel = extern_kernels.mm


op233_op234_op236: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op233_op234_op236.writes = 
    [   MemoryDep('buf233', c0, {c0: 128}),
        MemoryDep('buf234', c0, {c0: 128}),
        MemoryDep('buf236', c0, {c0: 98304})]
op233_op234_op236.unmet_dependencies = [MemoryDep('buf229', c0, {c0: 98304}), MemoryDep('buf232', c0, {c0: 98304})]
op233_op234_op236.met_dependencies = 
    [   MemoryDep('arg181_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg182_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg183_1', c1, {c0: 128, c1: 768})]
op233_op234_op236.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf233.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf234.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf236.users = [
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False),
    ]
]
op233_op234_op236.snodes[0] =
op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 128})]
op233.unmet_dependencies = [MemoryDep('buf229', c0, {c0: 98304}), MemoryDep('buf232', c0, {c0: 98304})]
op233.met_dependencies = [MemoryDep('arg181_1', c1, {c0: 128, c1: 768})]
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf233.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (128, 768)
op233.sizes = ([128], [768])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg181_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op233_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg181_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf229', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf233', get_index_3, getitem)
        return store_reduction
op233_op234_op236.snodes[1] =
op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 128})]
op234.unmet_dependencies = [MemoryDep('buf229', c0, {c0: 98304}), MemoryDep('buf232', c0, {c0: 98304})]
op234.met_dependencies = [MemoryDep('arg181_1', c1, {c0: 128, c1: 768})]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf234.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (128, 768)
op234.sizes = ([128], [768])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg181_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op234_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg181_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf229', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf234', get_index_3, getitem_1)
        return store_reduction
op233_op234_op236.snodes[2] =
op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 98304})]
op236.unmet_dependencies = 
    [   MemoryDep('buf229', c0, {c0: 98304}),
        MemoryDep('buf232', c0, {c0: 98304}),
        MemoryDep('buf233', c0, {c0: 128}),
        MemoryDep('buf234', c0, {c0: 128})]
op236.met_dependencies = 
    [   MemoryDep('arg181_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg182_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg183_1', c1, {c0: 128, c1: 768})]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf236.users = [
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False),
    ]
]
op236.group.device = cuda:0
op236.group.iteration = (98304, 1)
op236.sizes = ([128, 768], [])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg181_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg182_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg183_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op236_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg181_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf229', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf233', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf234', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg182_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg183_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf236', get_index_7, add_3, None)
        return store


op237: ExternKernelSchedulerNode(ExternKernelOut)
op237.writes = [StarDep(name='buf237', mode=None)]
op237.unmet_dependencies = [StarDep(name='buf236', mode=None)]
op237.met_dependencies = [StarDep(name='arg184_1', mode=None), StarDep(name='arg185_1', mode=None)]
op237.outputs = [
    buf237: ExternKernelOut
    buf237.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op237.node.kernel = extern_kernels.bias_addmm


op238: ExternKernelSchedulerNode(ExternKernelOut)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf236', mode=None)]
op238.met_dependencies = [StarDep(name='arg186_1', mode=None), StarDep(name='arg187_1', mode=None)]
op238.outputs = [
    buf238: ExternKernelOut
    buf238.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op238.node.kernel = extern_kernels.bias_addmm


op239: ExternKernelSchedulerNode(ExternKernelOut)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf236', mode=None)]
op239.met_dependencies = [StarDep(name='arg188_1', mode=None), StarDep(name='arg189_1', mode=None)]
op239.outputs = [
    buf239: ExternKernelOut
    buf239.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op239.node.kernel = extern_kernels.bias_addmm


op241: ExternKernelSchedulerNode(FallbackKernel)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = 
    [   StarDep(name='buf237', mode=None),
        StarDep(name='buf238', mode=None),
        StarDep(name='buf239', mode=None),
        StarDep(name='buf240', mode=None)]
op241.met_dependencies = []
op241.outputs = [
    buf241: FallbackKernel
    buf241.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf241.users = [NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op241.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op242: ExternKernelSchedulerNode(MultiOutput)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf241', mode=None)]
op242.met_dependencies = []
op242.outputs = [
    buf242: MultiOutput
    buf242.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf242.users = [NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op242.node.kernel = None


op246: ExternKernelSchedulerNode(ExternKernelOut)
op246.writes = [StarDep(name='buf246', mode=None)]
op246.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op246.met_dependencies = [StarDep(name='arg190_1', mode=None)]
op246.outputs = [
    buf246: ExternKernelOut
    buf246.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf246.users = [
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False),
    ]
]
op246.node.kernel = extern_kernels.mm


op247_op248_op250: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op247_op248_op250.writes = 
    [   MemoryDep('buf247', c0, {c0: 128}),
        MemoryDep('buf248', c0, {c0: 128}),
        MemoryDep('buf250', c0, {c0: 98304})]
op247_op248_op250.unmet_dependencies = [MemoryDep('buf236', c0, {c0: 98304}), MemoryDep('buf246', c0, {c0: 98304})]
op247_op248_op250.met_dependencies = 
    [   MemoryDep('arg191_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg192_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg193_1', c1, {c0: 128, c1: 768})]
op247_op248_op250.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf247.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf248.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf250.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=True, is_weak=False),
    ]
]
op247_op248_op250.snodes[0] =
op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 128})]
op247.unmet_dependencies = [MemoryDep('buf236', c0, {c0: 98304}), MemoryDep('buf246', c0, {c0: 98304})]
op247.met_dependencies = [MemoryDep('arg191_1', c1, {c0: 128, c1: 768})]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf247.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (128, 768)
op247.sizes = ([128], [768])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg191_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op247_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf246', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg191_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf236', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf247', get_index_3, getitem)
        return store_reduction
op247_op248_op250.snodes[1] =
op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 128})]
op248.unmet_dependencies = [MemoryDep('buf236', c0, {c0: 98304}), MemoryDep('buf246', c0, {c0: 98304})]
op248.met_dependencies = [MemoryDep('arg191_1', c1, {c0: 128, c1: 768})]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf248.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (128, 768)
op248.sizes = ([128], [768])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg191_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op248_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf246', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg191_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf236', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf248', get_index_3, getitem_1)
        return store_reduction
op247_op248_op250.snodes[2] =
op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 98304})]
op250.unmet_dependencies = 
    [   MemoryDep('buf236', c0, {c0: 98304}),
        MemoryDep('buf246', c0, {c0: 98304}),
        MemoryDep('buf247', c0, {c0: 128}),
        MemoryDep('buf248', c0, {c0: 128})]
op250.met_dependencies = 
    [   MemoryDep('arg191_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg192_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg193_1', c1, {c0: 128, c1: 768})]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf250.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=True, is_weak=False),
    ]
]
op250.group.device = cuda:0
op250.group.iteration = (98304, 1)
op250.sizes = ([128, 768], [])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg191_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg192_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg193_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op250_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf246', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg191_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf236', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf247', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf248', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg192_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg193_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf250', get_index_7, add_3, None)
        return store


op251: ExternKernelSchedulerNode(ExternKernelOut)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf250', mode=None)]
op251.met_dependencies = [StarDep(name='arg194_1', mode=None)]
op251.outputs = [
    buf251: ExternKernelOut
    buf251.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf251.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False)]
]
op251.node.kernel = extern_kernels.mm


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 393216})]
op252.unmet_dependencies = [MemoryDep('buf251', c0, {c0: 393216})]
op252.met_dependencies = [MemoryDep('arg195_1', c1, {c0: 128, c1: 3072})]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (393216, 1)
op252.sizes = ([128, 3072], [])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg195_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op252_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg195_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf251', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg195_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf252', get_index_4, mul_2, None)
        return store


op253: ExternKernelSchedulerNode(ExternKernelOut)
op253.writes = [StarDep(name='buf253', mode=None)]
op253.unmet_dependencies = [StarDep(name='buf252', mode=None)]
op253.met_dependencies = [StarDep(name='arg196_1', mode=None)]
op253.outputs = [
    buf253: ExternKernelOut
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf253.users = [
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=True, is_weak=False),
    ]
]
op253.node.kernel = extern_kernels.mm


op254_op255_op257: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op254_op255_op257.writes = 
    [   MemoryDep('buf254', c0, {c0: 128}),
        MemoryDep('buf255', c0, {c0: 128}),
        MemoryDep('buf257', c0, {c0: 98304})]
op254_op255_op257.unmet_dependencies = [MemoryDep('buf250', c0, {c0: 98304}), MemoryDep('buf253', c0, {c0: 98304})]
op254_op255_op257.met_dependencies = 
    [   MemoryDep('arg197_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg198_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg199_1', c1, {c0: 128, c1: 768})]
op254_op255_op257.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf254.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf255.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf257.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op254_op255_op257.snodes[0] =
op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 128})]
op254.unmet_dependencies = [MemoryDep('buf250', c0, {c0: 98304}), MemoryDep('buf253', c0, {c0: 98304})]
op254.met_dependencies = [MemoryDep('arg197_1', c1, {c0: 128, c1: 768})]
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf254.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (128, 768)
op254.sizes = ([128], [768])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg197_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf254_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op254_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf250', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf254', get_index_3, getitem)
        return store_reduction
op254_op255_op257.snodes[1] =
op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 128})]
op255.unmet_dependencies = [MemoryDep('buf250', c0, {c0: 98304}), MemoryDep('buf253', c0, {c0: 98304})]
op255.met_dependencies = [MemoryDep('arg197_1', c1, {c0: 128, c1: 768})]
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf255.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (128, 768)
op255.sizes = ([128], [768])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg197_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op255_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf250', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf255', get_index_3, getitem_1)
        return store_reduction
op254_op255_op257.snodes[2] =
op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 98304})]
op257.unmet_dependencies = 
    [   MemoryDep('buf250', c0, {c0: 98304}),
        MemoryDep('buf253', c0, {c0: 98304}),
        MemoryDep('buf254', c0, {c0: 128}),
        MemoryDep('buf255', c0, {c0: 128})]
op257.met_dependencies = 
    [   MemoryDep('arg197_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg198_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg199_1', c1, {c0: 128, c1: 768})]
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf257.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (98304, 1)
op257.sizes = ([128, 768], [])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg197_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf254_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg198_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg199_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op257_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf250', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf254', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf255', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg198_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg199_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf257', get_index_7, add_3, None)
        return store




# ===== run_2025_10_19_03_43_12_574129-pid_19/torchinductor/model__1_inference_1.1/ir_pre_fusion.txt =====
op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 128})]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 128})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (2, 64)
op0.sizes = ([2], [64])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf0_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
class op0_loop_body:
    var_ranges = {p0: 2, p1: 64}
    index0 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        constant = ops.constant(1, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int32, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.int64, src_dtype = torch.int32)
        scan1 = self.scan1((torch.int64,), (to_dtype_1,))
        getitem = scan1[0]
        get_index_1 = self.get_index('index0')
        store = ops.store('buf0', get_index_1, getitem, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 98304})]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 128})]
op1.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 128}),
        MemoryDep('arg1_1', c1, {c0: 2, c1: 64}),
        MemoryDep('arg2_1', c1 + 768*tmp0, {c0: 128, c1: 768}),
        MemoryDep('arg3_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg4_1', c1 + 768*tmp2, {c0: 128, c1: 768})]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (98304, 1)
op1.sizes = ([2, 64, 768], [])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.float32, size=[50265, 768], stride=[768, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.int64, size=[1, 514], stride=[514, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
buf0_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.float32, size=[514, 768], stride=[768, 1])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op1_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 768}
    index0 = 64*p0 + p1
    index1 = 768*indirect0 + p2
    index2 = p1
    index3 = p2
    index4 = 768*indirect2 + p2
    index5 = 49152*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1_1', get_index_2)
        set_indirect1 = self.set_indirect1(load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg3_1', get_index_3)
        add = ops.add(load_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf0', get_index_4)
        to_dtype = ops.to_dtype(load_4, torch.int32, src_dtype = torch.int64)
        constant = ops.constant(0, torch.int32)
        add_1 = ops.add(to_dtype, constant)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('arg0_1', get_index_5)
        constant_1 = ops.constant(1, torch.int64)
        ne = ops.ne(load_5, constant_1)
        to_dtype_1 = ops.to_dtype(ne, torch.int32, src_dtype = torch.bool)
        mul = ops.mul(add_1, to_dtype_1)
        to_dtype_2 = ops.to_dtype(mul, torch.int64, src_dtype = torch.int32)
        constant_2 = ops.constant(1, torch.int64)
        add_2 = ops.add(to_dtype_2, constant_2)
        set_indirect2 = self.set_indirect2(add_2)
        get_index_6 = self.get_index('index4')
        load_6 = ops.load('arg4_1', get_index_6)
        add_3 = ops.add(add, load_6)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf1', get_index_7, add_3, None)
        return store


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 128})]
op2.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 98304})]
op2.met_dependencies = []
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf2.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op2.group.device = cuda:0
op2.group.iteration = (128, 768)
op2.sizes = ([128], [768])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op2_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf2', get_index_1, getitem)
        return store_reduction


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 128})]
op3.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 98304})]
op3.met_dependencies = []
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf3.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (128, 768)
op3.sizes = ([128], [768])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op3_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf3', get_index_1, getitem_1)
        return store_reduction


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 98304})]
op5.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 98304}),
        MemoryDep('buf2', c0, {c0: 128}),
        MemoryDep('buf3', c0, {c0: 128})]
op5.met_dependencies = 
    [   MemoryDep('arg5_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg6_1', c1, {c0: 128, c1: 768})]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf5.users = [
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False),
    ]
]
op5.group.device = cuda:0
op5.group.iteration = (98304, 1)
op5.sizes = ([128, 768], [])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg5_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg6_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op5_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf3', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg5_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg6_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf5', get_index_5, add_1, None)
        return store


op6: SchedulerNode(MultiTemplateBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 98304})]
op6.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op6.met_dependencies = [StarDep(name='arg8_1', mode=None), StarDep(name='arg9_1', mode=None)]
op6.outputs = [
    buf6: MultiTemplateBuffer
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (98304, 1)
op6.sizes = ([128, 768], ())
arg9_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg8_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op7: SchedulerNode(MultiTemplateBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 98304})]
op7.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op7.met_dependencies = [StarDep(name='arg10_1', mode=None), StarDep(name='arg11_1', mode=None)]
op7.outputs = [
    buf7: MultiTemplateBuffer
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (98304, 1)
op7.sizes = ([128, 768], ())
arg11_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg10_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op8: SchedulerNode(MultiTemplateBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 98304})]
op8.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op8.met_dependencies = [StarDep(name='arg12_1', mode=None), StarDep(name='arg13_1', mode=None)]
op8.outputs = [
    buf8: MultiTemplateBuffer
    buf8.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (98304, 1)
op8.sizes = ([128, 768], ())
arg13_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg12_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 98304})]
op9.unmet_dependencies = []
op9.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (98304, 1)
op9.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf9_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op9_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf9', get_index_2, where, None)
        return store


op10: ExternKernelSchedulerNode(FallbackKernel)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = 
    [   StarDep(name='buf6', mode=None),
        StarDep(name='buf7', mode=None),
        StarDep(name='buf8', mode=None),
        StarDep(name='buf9', mode=None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: FallbackKernel
    buf10.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf10.users = [NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op10.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op11: ExternKernelSchedulerNode(MultiOutput)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf10', mode=None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: MultiOutput
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op11.node.kernel = None


op15: ExternKernelSchedulerNode(ExternKernelOut)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf11', mode=None)]
op15.met_dependencies = [StarDep(name='arg14_1', mode=None)]
op15.outputs = [
    buf15: ExternKernelOut
    buf15.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False),
    ]
]
op15.node.kernel = extern_kernels.mm


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 128})]
op16.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 98304}), MemoryDep('buf5', c0, {c0: 98304})]
op16.met_dependencies = [MemoryDep('arg15_1', c1, {c0: 128, c1: 768})]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf16.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (128, 768)
op16.sizes = ([128], [768])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg15_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op16_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg15_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf5', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf16', get_index_3, getitem)
        return store_reduction


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 128})]
op17.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 98304}), MemoryDep('buf5', c0, {c0: 98304})]
op17.met_dependencies = [MemoryDep('arg15_1', c1, {c0: 128, c1: 768})]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf17.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (128, 768)
op17.sizes = ([128], [768])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg15_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op17_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg15_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf5', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf17', get_index_3, getitem_1)
        return store_reduction


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 98304})]
op19.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 98304}),
        MemoryDep('buf16', c0, {c0: 128}),
        MemoryDep('buf17', c0, {c0: 128}),
        MemoryDep('buf5', c0, {c0: 98304})]
op19.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg16_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg17_1', c1, {c0: 128, c1: 768})]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf19.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False),
    ]
]
op19.group.device = cuda:0
op19.group.iteration = (98304, 1)
op19.sizes = ([128, 768], [])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg15_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg16_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg17_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op19_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg15_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf5', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf16', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf17', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg16_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg17_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf19', get_index_7, add_3, None)
        return store


op20: ExternKernelSchedulerNode(ExternKernelOut)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf19', mode=None)]
op20.met_dependencies = [StarDep(name='arg18_1', mode=None)]
op20.outputs = [
    buf20: ExternKernelOut
    buf20.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
]
op20.node.kernel = extern_kernels.mm


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 393216})]
op21.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 393216})]
op21.met_dependencies = [MemoryDep('arg19_1', c1, {c0: 128, c1: 3072})]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (393216, 1)
op21.sizes = ([128, 3072], [])
buf20_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg19_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op21_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg19_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf20', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf21', get_index_4, mul_2, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg20_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf22.users = [
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False),
    ]
]
op22.node.kernel = extern_kernels.mm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 128})]
op23.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 98304}), MemoryDep('buf22', c0, {c0: 98304})]
op23.met_dependencies = [MemoryDep('arg21_1', c1, {c0: 128, c1: 768})]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf23.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (128, 768)
op23.sizes = ([128], [768])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg21_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op23_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg21_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf19', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf23', get_index_3, getitem)
        return store_reduction


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 128})]
op24.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 98304}), MemoryDep('buf22', c0, {c0: 98304})]
op24.met_dependencies = [MemoryDep('arg21_1', c1, {c0: 128, c1: 768})]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf24.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (128, 768)
op24.sizes = ([128], [768])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg21_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op24_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg21_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf19', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf24', get_index_3, getitem_1)
        return store_reduction


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 98304})]
op26.unmet_dependencies = 
    [   MemoryDep('buf19', c0, {c0: 98304}),
        MemoryDep('buf22', c0, {c0: 98304}),
        MemoryDep('buf23', c0, {c0: 128}),
        MemoryDep('buf24', c0, {c0: 128})]
op26.met_dependencies = 
    [   MemoryDep('arg21_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg22_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg23_1', c1, {c0: 128, c1: 768})]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf26.users = [
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=True, is_weak=False),
    ]
]
op26.group.device = cuda:0
op26.group.iteration = (98304, 1)
op26.sizes = ([128, 768], [])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg21_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg22_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg23_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op26_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg21_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf19', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf23', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf24', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg22_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg23_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf26', get_index_7, add_3, None)
        return store


op27: SchedulerNode(MultiTemplateBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 98304})]
op27.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op27.met_dependencies = [StarDep(name='arg24_1', mode=None), StarDep(name='arg25_1', mode=None)]
op27.outputs = [
    buf27: MultiTemplateBuffer
    buf27.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (98304, 1)
op27.sizes = ([128, 768], ())
arg25_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg24_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op28: SchedulerNode(MultiTemplateBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 98304})]
op28.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op28.met_dependencies = [StarDep(name='arg26_1', mode=None), StarDep(name='arg27_1', mode=None)]
op28.outputs = [
    buf28: MultiTemplateBuffer
    buf28.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (98304, 1)
op28.sizes = ([128, 768], ())
arg27_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg26_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf28_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op29: SchedulerNode(MultiTemplateBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 98304})]
op29.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op29.met_dependencies = [StarDep(name='arg28_1', mode=None), StarDep(name='arg29_1', mode=None)]
op29.outputs = [
    buf29: MultiTemplateBuffer
    buf29.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (98304, 1)
op29.sizes = ([128, 768], ())
arg29_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg28_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 98304})]
op30.unmet_dependencies = []
op30.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (98304, 1)
op30.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf30_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op30_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf30', get_index_2, where, None)
        return store


op31: ExternKernelSchedulerNode(FallbackKernel)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = 
    [   StarDep(name='buf27', mode=None),
        StarDep(name='buf28', mode=None),
        StarDep(name='buf29', mode=None),
        StarDep(name='buf30', mode=None)]
op31.met_dependencies = []
op31.outputs = [
    buf31: FallbackKernel
    buf31.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op32: ExternKernelSchedulerNode(MultiOutput)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op32.met_dependencies = []
op32.outputs = [
    buf32: MultiOutput
    buf32.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op32.node.kernel = None


op36: ExternKernelSchedulerNode(ExternKernelOut)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf32', mode=None)]
op36.met_dependencies = [StarDep(name='arg30_1', mode=None)]
op36.outputs = [
    buf36: ExternKernelOut
    buf36.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf36.users = [
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=True, is_weak=False),
    ]
]
op36.node.kernel = extern_kernels.mm


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 128})]
op37.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 98304}), MemoryDep('buf36', c0, {c0: 98304})]
op37.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 128, c1: 768})]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf37.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (128, 768)
op37.sizes = ([128], [768])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf37_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op37_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg31_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf26', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf37', get_index_3, getitem)
        return store_reduction


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 128})]
op38.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 98304}), MemoryDep('buf36', c0, {c0: 98304})]
op38.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 128, c1: 768})]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf38.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (128, 768)
op38.sizes = ([128], [768])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op38_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg31_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf26', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf38', get_index_3, getitem_1)
        return store_reduction


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 98304})]
op40.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 98304}),
        MemoryDep('buf36', c0, {c0: 98304}),
        MemoryDep('buf37', c0, {c0: 128}),
        MemoryDep('buf38', c0, {c0: 128})]
op40.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg32_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg33_1', c1, {c0: 128, c1: 768})]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf40.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
    ]
]
op40.group.device = cuda:0
op40.group.iteration = (98304, 1)
op40.sizes = ([128, 768], [])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf37_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg32_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg33_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op40_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg31_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf26', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf37', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf38', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg32_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg33_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf40', get_index_7, add_3, None)
        return store


op41: ExternKernelSchedulerNode(ExternKernelOut)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = [StarDep(name='arg34_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelOut
    buf41.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
]
op41.node.kernel = extern_kernels.mm


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 393216})]
op42.unmet_dependencies = [MemoryDep('buf41', c0, {c0: 393216})]
op42.met_dependencies = [MemoryDep('arg35_1', c1, {c0: 128, c1: 3072})]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf42.users = [NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (393216, 1)
op42.sizes = ([128, 3072], [])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg35_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op42_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg35_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf41', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg35_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf42', get_index_4, mul_2, None)
        return store


op43: ExternKernelSchedulerNode(ExternKernelOut)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = [StarDep(name='buf42', mode=None)]
op43.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op43.outputs = [
    buf43: ExternKernelOut
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf43.users = [
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
    ]
]
op43.node.kernel = extern_kernels.mm


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 128})]
op44.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 98304}), MemoryDep('buf43', c0, {c0: 98304})]
op44.met_dependencies = [MemoryDep('arg37_1', c1, {c0: 128, c1: 768})]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf44.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (128, 768)
op44.sizes = ([128], [768])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg37_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op44_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf40', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf44', get_index_3, getitem)
        return store_reduction


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 128})]
op45.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 98304}), MemoryDep('buf43', c0, {c0: 98304})]
op45.met_dependencies = [MemoryDep('arg37_1', c1, {c0: 128, c1: 768})]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf45.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (128, 768)
op45.sizes = ([128], [768])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg37_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op45_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf40', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf45', get_index_3, getitem_1)
        return store_reduction


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 98304})]
op47.unmet_dependencies = 
    [   MemoryDep('buf40', c0, {c0: 98304}),
        MemoryDep('buf43', c0, {c0: 98304}),
        MemoryDep('buf44', c0, {c0: 128}),
        MemoryDep('buf45', c0, {c0: 128})]
op47.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg38_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg39_1', c1, {c0: 128, c1: 768})]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=True, is_weak=False),
    ]
]
op47.group.device = cuda:0
op47.group.iteration = (98304, 1)
op47.sizes = ([128, 768], [])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg37_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg38_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg39_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op47_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf40', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf44', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf45', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg38_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg39_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf47', get_index_7, add_3, None)
        return store


op48: SchedulerNode(MultiTemplateBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 98304})]
op48.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op48.met_dependencies = [StarDep(name='arg40_1', mode=None), StarDep(name='arg41_1', mode=None)]
op48.outputs = [
    buf48: MultiTemplateBuffer
    buf48.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (98304, 1)
op48.sizes = ([128, 768], ())
arg41_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg40_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op49: SchedulerNode(MultiTemplateBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 98304})]
op49.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op49.met_dependencies = [StarDep(name='arg42_1', mode=None), StarDep(name='arg43_1', mode=None)]
op49.outputs = [
    buf49: MultiTemplateBuffer
    buf49.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (98304, 1)
op49.sizes = ([128, 768], ())
arg43_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg42_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op50: SchedulerNode(MultiTemplateBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 98304})]
op50.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op50.met_dependencies = [StarDep(name='arg44_1', mode=None), StarDep(name='arg45_1', mode=None)]
op50.outputs = [
    buf50: MultiTemplateBuffer
    buf50.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf50.users = [NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (98304, 1)
op50.sizes = ([128, 768], ())
arg45_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg44_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 98304})]
op51.unmet_dependencies = []
op51.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf51.users = [NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (98304, 1)
op51.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op51_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf51', get_index_2, where, None)
        return store


op52: ExternKernelSchedulerNode(FallbackKernel)
op52.writes = [StarDep(name='buf52', mode=None)]
op52.unmet_dependencies = 
    [   StarDep(name='buf48', mode=None),
        StarDep(name='buf49', mode=None),
        StarDep(name='buf50', mode=None),
        StarDep(name='buf51', mode=None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: FallbackKernel
    buf52.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op52.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op53: ExternKernelSchedulerNode(MultiOutput)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf52', mode=None)]
op53.met_dependencies = []
op53.outputs = [
    buf53: MultiOutput
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op53.node.kernel = None


op57: ExternKernelSchedulerNode(ExternKernelOut)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op57.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op57.outputs = [
    buf57: ExternKernelOut
    buf57.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf57.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=True, is_weak=False),
    ]
]
op57.node.kernel = extern_kernels.mm


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 128})]
op58.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 98304}), MemoryDep('buf57', c0, {c0: 98304})]
op58.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 128, c1: 768})]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf58.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (128, 768)
op58.sizes = ([128], [768])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg47_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op58_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf47', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf58', get_index_3, getitem)
        return store_reduction


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 128})]
op59.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 98304}), MemoryDep('buf57', c0, {c0: 98304})]
op59.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 128, c1: 768})]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf59.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (128, 768)
op59.sizes = ([128], [768])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg47_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op59_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf47', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf59', get_index_3, getitem_1)
        return store_reduction


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 98304})]
op61.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 98304}),
        MemoryDep('buf57', c0, {c0: 98304}),
        MemoryDep('buf58', c0, {c0: 128}),
        MemoryDep('buf59', c0, {c0: 128})]
op61.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg48_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg49_1', c1, {c0: 128, c1: 768})]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf61.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
]
op61.group.device = cuda:0
op61.group.iteration = (98304, 1)
op61.sizes = ([128, 768], [])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg47_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg48_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg49_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op61_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf47', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf58', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf59', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg48_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg49_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf61', get_index_7, add_3, None)
        return store


op62: ExternKernelSchedulerNode(ExternKernelOut)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op62.met_dependencies = [StarDep(name='arg50_1', mode=None)]
op62.outputs = [
    buf62: ExternKernelOut
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False)]
]
op62.node.kernel = extern_kernels.mm


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 393216})]
op63.unmet_dependencies = [MemoryDep('buf62', c0, {c0: 393216})]
op63.met_dependencies = [MemoryDep('arg51_1', c1, {c0: 128, c1: 3072})]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (393216, 1)
op63.sizes = ([128, 3072], [])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg51_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op63_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg51_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf62', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg51_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf63', get_index_4, mul_2, None)
        return store


op64: ExternKernelSchedulerNode(ExternKernelOut)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op64.met_dependencies = [StarDep(name='arg52_1', mode=None)]
op64.outputs = [
    buf64: ExternKernelOut
    buf64.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf64.users = [
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
]
op64.node.kernel = extern_kernels.mm


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 128})]
op65.unmet_dependencies = [MemoryDep('buf61', c0, {c0: 98304}), MemoryDep('buf64', c0, {c0: 98304})]
op65.met_dependencies = [MemoryDep('arg53_1', c1, {c0: 128, c1: 768})]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf65.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (128, 768)
op65.sizes = ([128], [768])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg53_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op65_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg53_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf61', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf65', get_index_3, getitem)
        return store_reduction


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 128})]
op66.unmet_dependencies = [MemoryDep('buf61', c0, {c0: 98304}), MemoryDep('buf64', c0, {c0: 98304})]
op66.met_dependencies = [MemoryDep('arg53_1', c1, {c0: 128, c1: 768})]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf66.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (128, 768)
op66.sizes = ([128], [768])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg53_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op66_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg53_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf61', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf66', get_index_3, getitem_1)
        return store_reduction


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 98304})]
op68.unmet_dependencies = 
    [   MemoryDep('buf61', c0, {c0: 98304}),
        MemoryDep('buf64', c0, {c0: 98304}),
        MemoryDep('buf65', c0, {c0: 128}),
        MemoryDep('buf66', c0, {c0: 128})]
op68.met_dependencies = 
    [   MemoryDep('arg53_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg54_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg55_1', c1, {c0: 128, c1: 768})]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
    ]
]
op68.group.device = cuda:0
op68.group.iteration = (98304, 1)
op68.sizes = ([128, 768], [])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg53_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg54_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg55_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op68_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg53_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf61', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf65', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf66', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg54_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg55_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf68', get_index_7, add_3, None)
        return store


op69: SchedulerNode(MultiTemplateBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 98304})]
op69.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op69.met_dependencies = [StarDep(name='arg56_1', mode=None), StarDep(name='arg57_1', mode=None)]
op69.outputs = [
    buf69: MultiTemplateBuffer
    buf69.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (98304, 1)
op69.sizes = ([128, 768], ())
arg57_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg56_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op70: SchedulerNode(MultiTemplateBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 98304})]
op70.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op70.met_dependencies = [StarDep(name='arg58_1', mode=None), StarDep(name='arg59_1', mode=None)]
op70.outputs = [
    buf70: MultiTemplateBuffer
    buf70.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (98304, 1)
op70.sizes = ([128, 768], ())
arg59_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg58_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op71: SchedulerNode(MultiTemplateBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 98304})]
op71.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op71.met_dependencies = [StarDep(name='arg60_1', mode=None), StarDep(name='arg61_1', mode=None)]
op71.outputs = [
    buf71: MultiTemplateBuffer
    buf71.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (98304, 1)
op71.sizes = ([128, 768], ())
arg61_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg60_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 98304})]
op72.unmet_dependencies = []
op72.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (98304, 1)
op72.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op72_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf72', get_index_2, where, None)
        return store


op73: ExternKernelSchedulerNode(FallbackKernel)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = 
    [   StarDep(name='buf69', mode=None),
        StarDep(name='buf70', mode=None),
        StarDep(name='buf71', mode=None),
        StarDep(name='buf72', mode=None)]
op73.met_dependencies = []
op73.outputs = [
    buf73: FallbackKernel
    buf73.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op74: ExternKernelSchedulerNode(MultiOutput)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: MultiOutput
    buf74.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op74.node.kernel = None


op78: ExternKernelSchedulerNode(ExternKernelOut)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op78.met_dependencies = [StarDep(name='arg62_1', mode=None)]
op78.outputs = [
    buf78: ExternKernelOut
    buf78.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf78.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
    ]
]
op78.node.kernel = extern_kernels.mm


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 128})]
op79.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 98304}), MemoryDep('buf78', c0, {c0: 98304})]
op79.met_dependencies = [MemoryDep('arg63_1', c1, {c0: 128, c1: 768})]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf79.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (128, 768)
op79.sizes = ([128], [768])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg63_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op79_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg63_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf68', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf79', get_index_3, getitem)
        return store_reduction


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 128})]
op80.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 98304}), MemoryDep('buf78', c0, {c0: 98304})]
op80.met_dependencies = [MemoryDep('arg63_1', c1, {c0: 128, c1: 768})]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf80.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (128, 768)
op80.sizes = ([128], [768])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg63_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op80_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg63_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf68', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf80', get_index_3, getitem_1)
        return store_reduction


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 98304})]
op82.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 98304}),
        MemoryDep('buf78', c0, {c0: 98304}),
        MemoryDep('buf79', c0, {c0: 128}),
        MemoryDep('buf80', c0, {c0: 128})]
op82.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg64_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg65_1', c1, {c0: 128, c1: 768})]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf82.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False),
    ]
]
op82.group.device = cuda:0
op82.group.iteration = (98304, 1)
op82.sizes = ([128, 768], [])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg63_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg64_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg65_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op82_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg63_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf68', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf79', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf80', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg64_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg65_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf82', get_index_7, add_3, None)
        return store


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf82', mode=None)]
op83.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
]
op83.node.kernel = extern_kernels.mm


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 393216})]
op84.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 393216})]
op84.met_dependencies = [MemoryDep('arg67_1', c1, {c0: 128, c1: 3072})]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (393216, 1)
op84.sizes = ([128, 3072], [])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg67_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op84_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf83', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg67_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf84', get_index_4, mul_2, None)
        return store


op85: ExternKernelSchedulerNode(ExternKernelOut)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op85.met_dependencies = [StarDep(name='arg68_1', mode=None)]
op85.outputs = [
    buf85: ExternKernelOut
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf85.users = [
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False),
    ]
]
op85.node.kernel = extern_kernels.mm


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 128})]
op86.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 98304}), MemoryDep('buf85', c0, {c0: 98304})]
op86.met_dependencies = [MemoryDep('arg69_1', c1, {c0: 128, c1: 768})]
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf86.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (128, 768)
op86.sizes = ([128], [768])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg69_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf86_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op86_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg69_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf82', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf86', get_index_3, getitem)
        return store_reduction


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 128})]
op87.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 98304}), MemoryDep('buf85', c0, {c0: 98304})]
op87.met_dependencies = [MemoryDep('arg69_1', c1, {c0: 128, c1: 768})]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf87.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (128, 768)
op87.sizes = ([128], [768])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg69_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op87_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg69_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf82', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf87', get_index_3, getitem_1)
        return store_reduction


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 98304})]
op89.unmet_dependencies = 
    [   MemoryDep('buf82', c0, {c0: 98304}),
        MemoryDep('buf85', c0, {c0: 98304}),
        MemoryDep('buf86', c0, {c0: 128}),
        MemoryDep('buf87', c0, {c0: 128})]
op89.met_dependencies = 
    [   MemoryDep('arg69_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg70_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg71_1', c1, {c0: 128, c1: 768})]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf89.users = [
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
    ]
]
op89.group.device = cuda:0
op89.group.iteration = (98304, 1)
op89.sizes = ([128, 768], [])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg69_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf86_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg70_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg71_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op89_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg69_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf82', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf86', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf87', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg70_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg71_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf89', get_index_7, add_3, None)
        return store


op90: SchedulerNode(MultiTemplateBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 98304})]
op90.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op90.met_dependencies = [StarDep(name='arg72_1', mode=None), StarDep(name='arg73_1', mode=None)]
op90.outputs = [
    buf90: MultiTemplateBuffer
    buf90.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (98304, 1)
op90.sizes = ([128, 768], ())
arg73_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg72_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op91: SchedulerNode(MultiTemplateBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 98304})]
op91.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op91.met_dependencies = [StarDep(name='arg74_1', mode=None), StarDep(name='arg75_1', mode=None)]
op91.outputs = [
    buf91: MultiTemplateBuffer
    buf91.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (98304, 1)
op91.sizes = ([128, 768], ())
arg75_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg74_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op92: SchedulerNode(MultiTemplateBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 98304})]
op92.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op92.met_dependencies = [StarDep(name='arg76_1', mode=None), StarDep(name='arg77_1', mode=None)]
op92.outputs = [
    buf92: MultiTemplateBuffer
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf92.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (98304, 1)
op92.sizes = ([128, 768], ())
arg77_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg76_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 98304})]
op93.unmet_dependencies = []
op93.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (98304, 1)
op93.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op93_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf93', get_index_2, where, None)
        return store


op94: ExternKernelSchedulerNode(FallbackKernel)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = 
    [   StarDep(name='buf90', mode=None),
        StarDep(name='buf91', mode=None),
        StarDep(name='buf92', mode=None),
        StarDep(name='buf93', mode=None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: FallbackKernel
    buf94.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf94.users = [NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op94.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op95: ExternKernelSchedulerNode(MultiOutput)
op95.writes = [StarDep(name='buf95', mode=None)]
op95.unmet_dependencies = [StarDep(name='buf94', mode=None)]
op95.met_dependencies = []
op95.outputs = [
    buf95: MultiOutput
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf95.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op95.node.kernel = None


op99: ExternKernelSchedulerNode(ExternKernelOut)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op99.met_dependencies = [StarDep(name='arg78_1', mode=None)]
op99.outputs = [
    buf99: ExternKernelOut
    buf99.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
    ]
]
op99.node.kernel = extern_kernels.mm


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 128})]
op100.unmet_dependencies = [MemoryDep('buf89', c0, {c0: 98304}), MemoryDep('buf99', c0, {c0: 98304})]
op100.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 128, c1: 768})]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf100.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (128, 768)
op100.sizes = ([128], [768])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg79_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf100_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op100_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg79_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf89', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf100', get_index_3, getitem)
        return store_reduction


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 128})]
op101.unmet_dependencies = [MemoryDep('buf89', c0, {c0: 98304}), MemoryDep('buf99', c0, {c0: 98304})]
op101.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 128, c1: 768})]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf101.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (128, 768)
op101.sizes = ([128], [768])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg79_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op101_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg79_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf89', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf101', get_index_3, getitem_1)
        return store_reduction


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 98304})]
op103.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 128}),
        MemoryDep('buf101', c0, {c0: 128}),
        MemoryDep('buf89', c0, {c0: 98304}),
        MemoryDep('buf99', c0, {c0: 98304})]
op103.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg80_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg81_1', c1, {c0: 128, c1: 768})]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf103.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
    ]
]
op103.group.device = cuda:0
op103.group.iteration = (98304, 1)
op103.sizes = ([128, 768], [])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg79_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf100_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg80_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg81_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op103_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg79_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf89', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf100', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf101', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg80_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg81_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf103', get_index_7, add_3, None)
        return store


op104: ExternKernelSchedulerNode(ExternKernelOut)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='arg82_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelOut
    buf104.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf104.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False)]
]
op104.node.kernel = extern_kernels.mm


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 393216})]
op105.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 393216})]
op105.met_dependencies = [MemoryDep('arg83_1', c1, {c0: 128, c1: 3072})]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (393216, 1)
op105.sizes = ([128, 3072], [])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg83_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op105_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg83_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf104', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg83_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf105', get_index_4, mul_2, None)
        return store


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf105', mode=None)]
op106.met_dependencies = [StarDep(name='arg84_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf106.users = [
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
    ]
]
op106.node.kernel = extern_kernels.mm


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 128})]
op107.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 98304}), MemoryDep('buf106', c0, {c0: 98304})]
op107.met_dependencies = [MemoryDep('arg85_1', c1, {c0: 128, c1: 768})]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf107.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (128, 768)
op107.sizes = ([128], [768])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg85_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op107_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg85_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf103', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf107', get_index_3, getitem)
        return store_reduction


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 128})]
op108.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 98304}), MemoryDep('buf106', c0, {c0: 98304})]
op108.met_dependencies = [MemoryDep('arg85_1', c1, {c0: 128, c1: 768})]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf108.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (128, 768)
op108.sizes = ([128], [768])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg85_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op108_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg85_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf103', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf108', get_index_3, getitem_1)
        return store_reduction


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 98304})]
op110.unmet_dependencies = 
    [   MemoryDep('buf103', c0, {c0: 98304}),
        MemoryDep('buf106', c0, {c0: 98304}),
        MemoryDep('buf107', c0, {c0: 128}),
        MemoryDep('buf108', c0, {c0: 128})]
op110.met_dependencies = 
    [   MemoryDep('arg85_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg86_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg87_1', c1, {c0: 128, c1: 768})]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf110.users = [
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
    ]
]
op110.group.device = cuda:0
op110.group.iteration = (98304, 1)
op110.sizes = ([128, 768], [])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg85_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg86_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg87_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op110_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg85_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf103', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf107', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf108', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg86_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg87_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf110', get_index_7, add_3, None)
        return store


op111: SchedulerNode(MultiTemplateBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 98304})]
op111.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op111.met_dependencies = [StarDep(name='arg88_1', mode=None), StarDep(name='arg89_1', mode=None)]
op111.outputs = [
    buf111: MultiTemplateBuffer
    buf111.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (98304, 1)
op111.sizes = ([128, 768], ())
arg89_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg88_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op112: SchedulerNode(MultiTemplateBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 98304})]
op112.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op112.met_dependencies = [StarDep(name='arg90_1', mode=None), StarDep(name='arg91_1', mode=None)]
op112.outputs = [
    buf112: MultiTemplateBuffer
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (98304, 1)
op112.sizes = ([128, 768], ())
arg91_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg90_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op113: SchedulerNode(MultiTemplateBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 98304})]
op113.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op113.met_dependencies = [StarDep(name='arg92_1', mode=None), StarDep(name='arg93_1', mode=None)]
op113.outputs = [
    buf113: MultiTemplateBuffer
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (98304, 1)
op113.sizes = ([128, 768], ())
arg93_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg92_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 98304})]
op114.unmet_dependencies = []
op114.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (98304, 1)
op114.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op114_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf114', get_index_2, where, None)
        return store


op115: ExternKernelSchedulerNode(FallbackKernel)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = 
    [   StarDep(name='buf111', mode=None),
        StarDep(name='buf112', mode=None),
        StarDep(name='buf113', mode=None),
        StarDep(name='buf114', mode=None)]
op115.met_dependencies = []
op115.outputs = [
    buf115: FallbackKernel
    buf115.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op116: ExternKernelSchedulerNode(MultiOutput)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: MultiOutput
    buf116.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf116.users = [NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op116.node.kernel = None


op120: ExternKernelSchedulerNode(ExternKernelOut)
op120.writes = [StarDep(name='buf120', mode=None)]
op120.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op120.met_dependencies = [StarDep(name='arg94_1', mode=None)]
op120.outputs = [
    buf120: ExternKernelOut
    buf120.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf120.users = [
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
    ]
]
op120.node.kernel = extern_kernels.mm


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 128})]
op121.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 98304}), MemoryDep('buf120', c0, {c0: 98304})]
op121.met_dependencies = [MemoryDep('arg95_1', c1, {c0: 128, c1: 768})]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf121.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (128, 768)
op121.sizes = ([128], [768])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg95_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op121_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg95_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf110', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf121', get_index_3, getitem)
        return store_reduction


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 128})]
op122.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 98304}), MemoryDep('buf120', c0, {c0: 98304})]
op122.met_dependencies = [MemoryDep('arg95_1', c1, {c0: 128, c1: 768})]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf122.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (128, 768)
op122.sizes = ([128], [768])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg95_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op122_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg95_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf110', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf122', get_index_3, getitem_1)
        return store_reduction


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 98304})]
op124.unmet_dependencies = 
    [   MemoryDep('buf110', c0, {c0: 98304}),
        MemoryDep('buf120', c0, {c0: 98304}),
        MemoryDep('buf121', c0, {c0: 128}),
        MemoryDep('buf122', c0, {c0: 128})]
op124.met_dependencies = 
    [   MemoryDep('arg95_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg96_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg97_1', c1, {c0: 128, c1: 768})]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf124.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
    ]
]
op124.group.device = cuda:0
op124.group.iteration = (98304, 1)
op124.sizes = ([128, 768], [])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg95_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg96_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg97_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op124_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg95_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf110', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf121', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf122', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg96_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg97_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf124', get_index_7, add_3, None)
        return store


op125: ExternKernelSchedulerNode(ExternKernelOut)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf124', mode=None)]
op125.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op125.outputs = [
    buf125: ExternKernelOut
    buf125.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf125.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False)]
]
op125.node.kernel = extern_kernels.mm


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 393216})]
op126.unmet_dependencies = [MemoryDep('buf125', c0, {c0: 393216})]
op126.met_dependencies = [MemoryDep('arg99_1', c1, {c0: 128, c1: 3072})]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf126.users = [NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (393216, 1)
op126.sizes = ([128, 3072], [])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg99_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf126_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op126_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg99_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf125', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg99_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf126', get_index_4, mul_2, None)
        return store


op127: ExternKernelSchedulerNode(ExternKernelOut)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf126', mode=None)]
op127.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op127.outputs = [
    buf127: ExternKernelOut
    buf127.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf127.users = [
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
    ]
]
op127.node.kernel = extern_kernels.mm


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 128})]
op128.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 98304}), MemoryDep('buf127', c0, {c0: 98304})]
op128.met_dependencies = [MemoryDep('arg101_1', c1, {c0: 128, c1: 768})]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf128.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (128, 768)
op128.sizes = ([128], [768])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg101_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op128_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf124', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf128', get_index_3, getitem)
        return store_reduction


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 128})]
op129.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 98304}), MemoryDep('buf127', c0, {c0: 98304})]
op129.met_dependencies = [MemoryDep('arg101_1', c1, {c0: 128, c1: 768})]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf129.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (128, 768)
op129.sizes = ([128], [768])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg101_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op129_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf124', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf129', get_index_3, getitem_1)
        return store_reduction


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 98304})]
op131.unmet_dependencies = 
    [   MemoryDep('buf124', c0, {c0: 98304}),
        MemoryDep('buf127', c0, {c0: 98304}),
        MemoryDep('buf128', c0, {c0: 128}),
        MemoryDep('buf129', c0, {c0: 128})]
op131.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg102_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg103_1', c1, {c0: 128, c1: 768})]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf131.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
    ]
]
op131.group.device = cuda:0
op131.group.iteration = (98304, 1)
op131.sizes = ([128, 768], [])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg101_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg102_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg103_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op131_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf124', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf128', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf129', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg102_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg103_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf131', get_index_7, add_3, None)
        return store


op132: SchedulerNode(MultiTemplateBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 98304})]
op132.unmet_dependencies = [StarDep(name='buf131', mode=None)]
op132.met_dependencies = [StarDep(name='arg104_1', mode=None), StarDep(name='arg105_1', mode=None)]
op132.outputs = [
    buf132: MultiTemplateBuffer
    buf132.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (98304, 1)
op132.sizes = ([128, 768], ())
arg105_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg104_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf132_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op133: SchedulerNode(MultiTemplateBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 98304})]
op133.unmet_dependencies = [StarDep(name='buf131', mode=None)]
op133.met_dependencies = [StarDep(name='arg106_1', mode=None), StarDep(name='arg107_1', mode=None)]
op133.outputs = [
    buf133: MultiTemplateBuffer
    buf133.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (98304, 1)
op133.sizes = ([128, 768], ())
arg107_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg106_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op134: SchedulerNode(MultiTemplateBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 98304})]
op134.unmet_dependencies = [StarDep(name='buf131', mode=None)]
op134.met_dependencies = [StarDep(name='arg108_1', mode=None), StarDep(name='arg109_1', mode=None)]
op134.outputs = [
    buf134: MultiTemplateBuffer
    buf134.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf134.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (98304, 1)
op134.sizes = ([128, 768], ())
arg109_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg108_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 98304})]
op135.unmet_dependencies = []
op135.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (98304, 1)
op135.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op135_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf135', get_index_2, where, None)
        return store


op136: ExternKernelSchedulerNode(FallbackKernel)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = 
    [   StarDep(name='buf132', mode=None),
        StarDep(name='buf133', mode=None),
        StarDep(name='buf134', mode=None),
        StarDep(name='buf135', mode=None)]
op136.met_dependencies = []
op136.outputs = [
    buf136: FallbackKernel
    buf136.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf136.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op137: ExternKernelSchedulerNode(MultiOutput)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf136', mode=None)]
op137.met_dependencies = []
op137.outputs = [
    buf137: MultiOutput
    buf137.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf137.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op137.node.kernel = None


op141: ExternKernelSchedulerNode(ExternKernelOut)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf137', mode=None)]
op141.met_dependencies = [StarDep(name='arg110_1', mode=None)]
op141.outputs = [
    buf141: ExternKernelOut
    buf141.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf141.users = [
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
    ]
]
op141.node.kernel = extern_kernels.mm


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 128})]
op142.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 98304}), MemoryDep('buf141', c0, {c0: 98304})]
op142.met_dependencies = [MemoryDep('arg111_1', c1, {c0: 128, c1: 768})]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf142.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (128, 768)
op142.sizes = ([128], [768])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg111_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op142_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg111_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf131', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf142', get_index_3, getitem)
        return store_reduction


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 128})]
op143.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 98304}), MemoryDep('buf141', c0, {c0: 98304})]
op143.met_dependencies = [MemoryDep('arg111_1', c1, {c0: 128, c1: 768})]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf143.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (128, 768)
op143.sizes = ([128], [768])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg111_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op143_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg111_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf131', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf143', get_index_3, getitem_1)
        return store_reduction


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 98304})]
op145.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 98304}),
        MemoryDep('buf141', c0, {c0: 98304}),
        MemoryDep('buf142', c0, {c0: 128}),
        MemoryDep('buf143', c0, {c0: 128})]
op145.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg112_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg113_1', c1, {c0: 128, c1: 768})]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf145.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=True, is_weak=False),
    ]
]
op145.group.device = cuda:0
op145.group.iteration = (98304, 1)
op145.sizes = ([128, 768], [])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg111_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg112_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg113_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op145_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg111_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf131', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf142', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf143', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg112_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg113_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf145', get_index_7, add_3, None)
        return store


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op146.met_dependencies = [StarDep(name='arg114_1', mode=None)]
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf146.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False)]
]
op146.node.kernel = extern_kernels.mm


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 393216})]
op147.unmet_dependencies = [MemoryDep('buf146', c0, {c0: 393216})]
op147.met_dependencies = [MemoryDep('arg115_1', c1, {c0: 128, c1: 3072})]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf147.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (393216, 1)
op147.sizes = ([128, 3072], [])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg115_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf147_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op147_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg115_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf146', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg115_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf147', get_index_4, mul_2, None)
        return store


op148: ExternKernelSchedulerNode(ExternKernelOut)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf147', mode=None)]
op148.met_dependencies = [StarDep(name='arg116_1', mode=None)]
op148.outputs = [
    buf148: ExternKernelOut
    buf148.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf148.users = [
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=True, is_weak=False),
    ]
]
op148.node.kernel = extern_kernels.mm


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 128})]
op149.unmet_dependencies = [MemoryDep('buf145', c0, {c0: 98304}), MemoryDep('buf148', c0, {c0: 98304})]
op149.met_dependencies = [MemoryDep('arg117_1', c1, {c0: 128, c1: 768})]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf149.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (128, 768)
op149.sizes = ([128], [768])
buf148_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg117_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op149_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg117_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf145', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf149', get_index_3, getitem)
        return store_reduction


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 128})]
op150.unmet_dependencies = [MemoryDep('buf145', c0, {c0: 98304}), MemoryDep('buf148', c0, {c0: 98304})]
op150.met_dependencies = [MemoryDep('arg117_1', c1, {c0: 128, c1: 768})]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf150.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (128, 768)
op150.sizes = ([128], [768])
buf148_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg117_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op150_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg117_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf145', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf150', get_index_3, getitem_1)
        return store_reduction


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 98304})]
op152.unmet_dependencies = 
    [   MemoryDep('buf145', c0, {c0: 98304}),
        MemoryDep('buf148', c0, {c0: 98304}),
        MemoryDep('buf149', c0, {c0: 128}),
        MemoryDep('buf150', c0, {c0: 128})]
op152.met_dependencies = 
    [   MemoryDep('arg117_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg118_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg119_1', c1, {c0: 128, c1: 768})]
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf152.users = [
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
    ]
]
op152.group.device = cuda:0
op152.group.iteration = (98304, 1)
op152.sizes = ([128, 768], [])
buf148_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg117_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf145_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg118_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg119_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op152_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg117_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf145', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf149', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf150', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg118_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg119_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf152', get_index_7, add_3, None)
        return store


op153: SchedulerNode(MultiTemplateBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 98304})]
op153.unmet_dependencies = [StarDep(name='buf152', mode=None)]
op153.met_dependencies = [StarDep(name='arg120_1', mode=None), StarDep(name='arg121_1', mode=None)]
op153.outputs = [
    buf153: MultiTemplateBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf153.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (98304, 1)
op153.sizes = ([128, 768], ())
arg121_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg120_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op154: SchedulerNode(MultiTemplateBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 98304})]
op154.unmet_dependencies = [StarDep(name='buf152', mode=None)]
op154.met_dependencies = [StarDep(name='arg122_1', mode=None), StarDep(name='arg123_1', mode=None)]
op154.outputs = [
    buf154: MultiTemplateBuffer
    buf154.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (98304, 1)
op154.sizes = ([128, 768], ())
arg123_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg122_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op155: SchedulerNode(MultiTemplateBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 98304})]
op155.unmet_dependencies = [StarDep(name='buf152', mode=None)]
op155.met_dependencies = [StarDep(name='arg124_1', mode=None), StarDep(name='arg125_1', mode=None)]
op155.outputs = [
    buf155: MultiTemplateBuffer
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (98304, 1)
op155.sizes = ([128, 768], ())
arg125_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg124_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 98304})]
op156.unmet_dependencies = []
op156.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (98304, 1)
op156.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op156_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf156', get_index_2, where, None)
        return store


op157: ExternKernelSchedulerNode(FallbackKernel)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = 
    [   StarDep(name='buf153', mode=None),
        StarDep(name='buf154', mode=None),
        StarDep(name='buf155', mode=None),
        StarDep(name='buf156', mode=None)]
op157.met_dependencies = []
op157.outputs = [
    buf157: FallbackKernel
    buf157.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op158: ExternKernelSchedulerNode(MultiOutput)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = [StarDep(name='buf157', mode=None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: MultiOutput
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op158.node.kernel = None


op162: ExternKernelSchedulerNode(ExternKernelOut)
op162.writes = [StarDep(name='buf162', mode=None)]
op162.unmet_dependencies = [StarDep(name='buf158', mode=None)]
op162.met_dependencies = [StarDep(name='arg126_1', mode=None)]
op162.outputs = [
    buf162: ExternKernelOut
    buf162.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf162.users = [
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
    ]
]
op162.node.kernel = extern_kernels.mm


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 128})]
op163.unmet_dependencies = [MemoryDep('buf152', c0, {c0: 98304}), MemoryDep('buf162', c0, {c0: 98304})]
op163.met_dependencies = [MemoryDep('arg127_1', c1, {c0: 128, c1: 768})]
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf163.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (128, 768)
op163.sizes = ([128], [768])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg127_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op163_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg127_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf152', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf163', get_index_3, getitem)
        return store_reduction


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 128})]
op164.unmet_dependencies = [MemoryDep('buf152', c0, {c0: 98304}), MemoryDep('buf162', c0, {c0: 98304})]
op164.met_dependencies = [MemoryDep('arg127_1', c1, {c0: 128, c1: 768})]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf164.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (128, 768)
op164.sizes = ([128], [768])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg127_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op164_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg127_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf152', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf164', get_index_3, getitem_1)
        return store_reduction


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 98304})]
op166.unmet_dependencies = 
    [   MemoryDep('buf152', c0, {c0: 98304}),
        MemoryDep('buf162', c0, {c0: 98304}),
        MemoryDep('buf163', c0, {c0: 128}),
        MemoryDep('buf164', c0, {c0: 128})]
op166.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg128_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg129_1', c1, {c0: 128, c1: 768})]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf166.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False),
    ]
]
op166.group.device = cuda:0
op166.group.iteration = (98304, 1)
op166.sizes = ([128, 768], [])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg127_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg128_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg129_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op166_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg127_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf152', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf163', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf164', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg128_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg129_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf166', get_index_7, add_3, None)
        return store


op167: ExternKernelSchedulerNode(ExternKernelOut)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf166', mode=None)]
op167.met_dependencies = [StarDep(name='arg130_1', mode=None)]
op167.outputs = [
    buf167: ExternKernelOut
    buf167.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf167.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False)]
]
op167.node.kernel = extern_kernels.mm


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 393216})]
op168.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 393216})]
op168.met_dependencies = [MemoryDep('arg131_1', c1, {c0: 128, c1: 3072})]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf168.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (393216, 1)
op168.sizes = ([128, 3072], [])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg131_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf168_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op168_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg131_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf167', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg131_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf168', get_index_4, mul_2, None)
        return store


op169: ExternKernelSchedulerNode(ExternKernelOut)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf168', mode=None)]
op169.met_dependencies = [StarDep(name='arg132_1', mode=None)]
op169.outputs = [
    buf169: ExternKernelOut
    buf169.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf169.users = [
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False),
    ]
]
op169.node.kernel = extern_kernels.mm


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 128})]
op170.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 98304}), MemoryDep('buf169', c0, {c0: 98304})]
op170.met_dependencies = [MemoryDep('arg133_1', c1, {c0: 128, c1: 768})]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf170.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (128, 768)
op170.sizes = ([128], [768])
buf169_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg133_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op170_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg133_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf166', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf170', get_index_3, getitem)
        return store_reduction


op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 128})]
op171.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 98304}), MemoryDep('buf169', c0, {c0: 98304})]
op171.met_dependencies = [MemoryDep('arg133_1', c1, {c0: 128, c1: 768})]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf171.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (128, 768)
op171.sizes = ([128], [768])
buf169_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg133_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op171_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg133_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf166', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf171', get_index_3, getitem_1)
        return store_reduction


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 98304})]
op173.unmet_dependencies = 
    [   MemoryDep('buf166', c0, {c0: 98304}),
        MemoryDep('buf169', c0, {c0: 98304}),
        MemoryDep('buf170', c0, {c0: 128}),
        MemoryDep('buf171', c0, {c0: 128})]
op173.met_dependencies = 
    [   MemoryDep('arg133_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg134_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg135_1', c1, {c0: 128, c1: 768})]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf173.users = [
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
]
op173.group.device = cuda:0
op173.group.iteration = (98304, 1)
op173.sizes = ([128, 768], [])
buf169_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg133_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg134_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg135_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op173_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg133_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf166', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf170', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf171', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg134_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg135_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf173', get_index_7, add_3, None)
        return store


op174: SchedulerNode(MultiTemplateBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 98304})]
op174.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op174.met_dependencies = [StarDep(name='arg136_1', mode=None), StarDep(name='arg137_1', mode=None)]
op174.outputs = [
    buf174: MultiTemplateBuffer
    buf174.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf174.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (98304, 1)
op174.sizes = ([128, 768], ())
arg137_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg136_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op175: SchedulerNode(MultiTemplateBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 98304})]
op175.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op175.met_dependencies = [StarDep(name='arg138_1', mode=None), StarDep(name='arg139_1', mode=None)]
op175.outputs = [
    buf175: MultiTemplateBuffer
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (98304, 1)
op175.sizes = ([128, 768], ())
arg139_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg138_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op176: SchedulerNode(MultiTemplateBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 98304})]
op176.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op176.met_dependencies = [StarDep(name='arg140_1', mode=None), StarDep(name='arg141_1', mode=None)]
op176.outputs = [
    buf176: MultiTemplateBuffer
    buf176.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (98304, 1)
op176.sizes = ([128, 768], ())
arg141_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg140_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 98304})]
op177.unmet_dependencies = []
op177.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (98304, 1)
op177.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf177_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op177_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf177', get_index_2, where, None)
        return store


op178: ExternKernelSchedulerNode(FallbackKernel)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = 
    [   StarDep(name='buf174', mode=None),
        StarDep(name='buf175', mode=None),
        StarDep(name='buf176', mode=None),
        StarDep(name='buf177', mode=None)]
op178.met_dependencies = []
op178.outputs = [
    buf178: FallbackKernel
    buf178.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf178.users = [NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op178.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op179: ExternKernelSchedulerNode(MultiOutput)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op179.met_dependencies = []
op179.outputs = [
    buf179: MultiOutput
    buf179.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op179.node.kernel = None


op183: ExternKernelSchedulerNode(ExternKernelOut)
op183.writes = [StarDep(name='buf183', mode=None)]
op183.unmet_dependencies = [StarDep(name='buf179', mode=None)]
op183.met_dependencies = [StarDep(name='arg142_1', mode=None)]
op183.outputs = [
    buf183: ExternKernelOut
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
]
op183.node.kernel = extern_kernels.mm


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 128})]
op184.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 98304}), MemoryDep('buf183', c0, {c0: 98304})]
op184.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 128, c1: 768})]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf184.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (128, 768)
op184.sizes = ([128], [768])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op184_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg143_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf173', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf184', get_index_3, getitem)
        return store_reduction


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 128})]
op185.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 98304}), MemoryDep('buf183', c0, {c0: 98304})]
op185.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 128, c1: 768})]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf185.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (128, 768)
op185.sizes = ([128], [768])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op185_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg143_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf173', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf185', get_index_3, getitem_1)
        return store_reduction


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 98304})]
op187.unmet_dependencies = 
    [   MemoryDep('buf173', c0, {c0: 98304}),
        MemoryDep('buf183', c0, {c0: 98304}),
        MemoryDep('buf184', c0, {c0: 128}),
        MemoryDep('buf185', c0, {c0: 128})]
op187.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg144_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg145_1', c1, {c0: 128, c1: 768})]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf187.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
    ]
]
op187.group.device = cuda:0
op187.group.iteration = (98304, 1)
op187.sizes = ([128, 768], [])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg144_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg145_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op187_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg143_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf173', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf184', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf185', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg144_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg145_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf187', get_index_7, add_3, None)
        return store


op188: ExternKernelSchedulerNode(ExternKernelOut)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op188.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op188.outputs = [
    buf188: ExternKernelOut
    buf188.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf188.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False)]
]
op188.node.kernel = extern_kernels.mm


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 393216})]
op189.unmet_dependencies = [MemoryDep('buf188', c0, {c0: 393216})]
op189.met_dependencies = [MemoryDep('arg147_1', c1, {c0: 128, c1: 3072})]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (393216, 1)
op189.sizes = ([128, 3072], [])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg147_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf189_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op189_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg147_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf188', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg147_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf189', get_index_4, mul_2, None)
        return store


op190: ExternKernelSchedulerNode(ExternKernelOut)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op190.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op190.outputs = [
    buf190: ExternKernelOut
    buf190.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf190.users = [
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
    ]
]
op190.node.kernel = extern_kernels.mm


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 128})]
op191.unmet_dependencies = [MemoryDep('buf187', c0, {c0: 98304}), MemoryDep('buf190', c0, {c0: 98304})]
op191.met_dependencies = [MemoryDep('arg149_1', c1, {c0: 128, c1: 768})]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf191.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (128, 768)
op191.sizes = ([128], [768])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg149_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op191_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf187', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf191', get_index_3, getitem)
        return store_reduction


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 128})]
op192.unmet_dependencies = [MemoryDep('buf187', c0, {c0: 98304}), MemoryDep('buf190', c0, {c0: 98304})]
op192.met_dependencies = [MemoryDep('arg149_1', c1, {c0: 128, c1: 768})]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf192.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (128, 768)
op192.sizes = ([128], [768])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg149_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op192_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf187', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf192', get_index_3, getitem_1)
        return store_reduction


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 98304})]
op194.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 98304}),
        MemoryDep('buf190', c0, {c0: 98304}),
        MemoryDep('buf191', c0, {c0: 128}),
        MemoryDep('buf192', c0, {c0: 128})]
op194.met_dependencies = 
    [   MemoryDep('arg149_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg150_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg151_1', c1, {c0: 128, c1: 768})]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf194.users = [
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False),
    ]
]
op194.group.device = cuda:0
op194.group.iteration = (98304, 1)
op194.sizes = ([128, 768], [])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg149_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg150_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg151_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op194_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf187', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf191', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf192', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg150_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg151_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf194', get_index_7, add_3, None)
        return store


op195: SchedulerNode(MultiTemplateBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 98304})]
op195.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op195.met_dependencies = [StarDep(name='arg152_1', mode=None), StarDep(name='arg153_1', mode=None)]
op195.outputs = [
    buf195: MultiTemplateBuffer
    buf195.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf195.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (98304, 1)
op195.sizes = ([128, 768], ())
arg153_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg152_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf195_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op196: SchedulerNode(MultiTemplateBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 98304})]
op196.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op196.met_dependencies = [StarDep(name='arg154_1', mode=None), StarDep(name='arg155_1', mode=None)]
op196.outputs = [
    buf196: MultiTemplateBuffer
    buf196.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (98304, 1)
op196.sizes = ([128, 768], ())
arg155_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg154_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op197: SchedulerNode(MultiTemplateBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 98304})]
op197.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op197.met_dependencies = [StarDep(name='arg156_1', mode=None), StarDep(name='arg157_1', mode=None)]
op197.outputs = [
    buf197: MultiTemplateBuffer
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (98304, 1)
op197.sizes = ([128, 768], ())
arg157_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg156_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 98304})]
op198.unmet_dependencies = []
op198.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (98304, 1)
op198.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op198_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf198', get_index_2, where, None)
        return store


op199: ExternKernelSchedulerNode(FallbackKernel)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = 
    [   StarDep(name='buf195', mode=None),
        StarDep(name='buf196', mode=None),
        StarDep(name='buf197', mode=None),
        StarDep(name='buf198', mode=None)]
op199.met_dependencies = []
op199.outputs = [
    buf199: FallbackKernel
    buf199.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf199.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op200: ExternKernelSchedulerNode(MultiOutput)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op200.met_dependencies = []
op200.outputs = [
    buf200: MultiOutput
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op200.node.kernel = None


op204: ExternKernelSchedulerNode(ExternKernelOut)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op204.met_dependencies = [StarDep(name='arg158_1', mode=None)]
op204.outputs = [
    buf204: ExternKernelOut
    buf204.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf204.users = [
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False),
    ]
]
op204.node.kernel = extern_kernels.mm


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 128})]
op205.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 98304}), MemoryDep('buf204', c0, {c0: 98304})]
op205.met_dependencies = [MemoryDep('arg159_1', c1, {c0: 128, c1: 768})]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf205.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (128, 768)
op205.sizes = ([128], [768])
buf204_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg159_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op205_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf194', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf205', get_index_3, getitem)
        return store_reduction


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 128})]
op206.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 98304}), MemoryDep('buf204', c0, {c0: 98304})]
op206.met_dependencies = [MemoryDep('arg159_1', c1, {c0: 128, c1: 768})]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf206.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (128, 768)
op206.sizes = ([128], [768])
buf204_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg159_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op206_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf194', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf206', get_index_3, getitem_1)
        return store_reduction


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 98304})]
op208.unmet_dependencies = 
    [   MemoryDep('buf194', c0, {c0: 98304}),
        MemoryDep('buf204', c0, {c0: 98304}),
        MemoryDep('buf205', c0, {c0: 128}),
        MemoryDep('buf206', c0, {c0: 128})]
op208.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg160_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg161_1', c1, {c0: 128, c1: 768})]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf208.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
    ]
]
op208.group.device = cuda:0
op208.group.iteration = (98304, 1)
op208.sizes = ([128, 768], [])
buf204_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg159_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg160_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg161_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op208_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf194', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf205', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf206', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg160_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg161_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf208', get_index_7, add_3, None)
        return store


op209: ExternKernelSchedulerNode(ExternKernelOut)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op209.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op209.outputs = [
    buf209: ExternKernelOut
    buf209.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf209.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False)]
]
op209.node.kernel = extern_kernels.mm


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 393216})]
op210.unmet_dependencies = [MemoryDep('buf209', c0, {c0: 393216})]
op210.met_dependencies = [MemoryDep('arg163_1', c1, {c0: 128, c1: 3072})]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (393216, 1)
op210.sizes = ([128, 3072], [])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg163_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op210_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg163_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf209', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg163_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf210', get_index_4, mul_2, None)
        return store


op211: ExternKernelSchedulerNode(ExternKernelOut)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op211.met_dependencies = [StarDep(name='arg164_1', mode=None)]
op211.outputs = [
    buf211: ExternKernelOut
    buf211.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf211.users = [
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
    ]
]
op211.node.kernel = extern_kernels.mm


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 128})]
op212.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 98304}), MemoryDep('buf211', c0, {c0: 98304})]
op212.met_dependencies = [MemoryDep('arg165_1', c1, {c0: 128, c1: 768})]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf212.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (128, 768)
op212.sizes = ([128], [768])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg165_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op212_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg165_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf208', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf212', get_index_3, getitem)
        return store_reduction


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 128})]
op213.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 98304}), MemoryDep('buf211', c0, {c0: 98304})]
op213.met_dependencies = [MemoryDep('arg165_1', c1, {c0: 128, c1: 768})]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf213.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (128, 768)
op213.sizes = ([128], [768])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg165_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op213_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg165_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf208', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf213', get_index_3, getitem_1)
        return store_reduction


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 98304})]
op215.unmet_dependencies = 
    [   MemoryDep('buf208', c0, {c0: 98304}),
        MemoryDep('buf211', c0, {c0: 98304}),
        MemoryDep('buf212', c0, {c0: 128}),
        MemoryDep('buf213', c0, {c0: 128})]
op215.met_dependencies = 
    [   MemoryDep('arg165_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg166_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg167_1', c1, {c0: 128, c1: 768})]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf215.users = [
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
    ]
]
op215.group.device = cuda:0
op215.group.iteration = (98304, 1)
op215.sizes = ([128, 768], [])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg165_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg166_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg167_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op215_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg165_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf208', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf212', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf213', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg166_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg167_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf215', get_index_7, add_3, None)
        return store


op216: SchedulerNode(MultiTemplateBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 98304})]
op216.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op216.met_dependencies = [StarDep(name='arg168_1', mode=None), StarDep(name='arg169_1', mode=None)]
op216.outputs = [
    buf216: MultiTemplateBuffer
    buf216.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf216.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (98304, 1)
op216.sizes = ([128, 768], ())
arg169_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg168_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op217: SchedulerNode(MultiTemplateBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 98304})]
op217.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op217.met_dependencies = [StarDep(name='arg170_1', mode=None), StarDep(name='arg171_1', mode=None)]
op217.outputs = [
    buf217: MultiTemplateBuffer
    buf217.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf217.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (98304, 1)
op217.sizes = ([128, 768], ())
arg171_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg170_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op218: SchedulerNode(MultiTemplateBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 98304})]
op218.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op218.met_dependencies = [StarDep(name='arg172_1', mode=None), StarDep(name='arg173_1', mode=None)]
op218.outputs = [
    buf218: MultiTemplateBuffer
    buf218.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf218.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (98304, 1)
op218.sizes = ([128, 768], ())
arg173_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg172_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 98304})]
op219.unmet_dependencies = []
op219.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf219.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (98304, 1)
op219.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf219_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op219_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf219', get_index_2, where, None)
        return store


op220: ExternKernelSchedulerNode(FallbackKernel)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = 
    [   StarDep(name='buf216', mode=None),
        StarDep(name='buf217', mode=None),
        StarDep(name='buf218', mode=None),
        StarDep(name='buf219', mode=None)]
op220.met_dependencies = []
op220.outputs = [
    buf220: FallbackKernel
    buf220.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf220.users = [NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op220.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op221: ExternKernelSchedulerNode(MultiOutput)
op221.writes = [StarDep(name='buf221', mode=None)]
op221.unmet_dependencies = [StarDep(name='buf220', mode=None)]
op221.met_dependencies = []
op221.outputs = [
    buf221: MultiOutput
    buf221.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op221.node.kernel = None


op225: ExternKernelSchedulerNode(ExternKernelOut)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op225.met_dependencies = [StarDep(name='arg174_1', mode=None)]
op225.outputs = [
    buf225: ExternKernelOut
    buf225.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf225.users = [
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
    ]
]
op225.node.kernel = extern_kernels.mm


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 128})]
op226.unmet_dependencies = [MemoryDep('buf215', c0, {c0: 98304}), MemoryDep('buf225', c0, {c0: 98304})]
op226.met_dependencies = [MemoryDep('arg175_1', c1, {c0: 128, c1: 768})]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf226.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (128, 768)
op226.sizes = ([128], [768])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg175_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op226_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg175_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf215', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf226', get_index_3, getitem)
        return store_reduction


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 128})]
op227.unmet_dependencies = [MemoryDep('buf215', c0, {c0: 98304}), MemoryDep('buf225', c0, {c0: 98304})]
op227.met_dependencies = [MemoryDep('arg175_1', c1, {c0: 128, c1: 768})]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf227.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (128, 768)
op227.sizes = ([128], [768])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg175_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op227_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg175_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf215', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf227', get_index_3, getitem_1)
        return store_reduction


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 98304})]
op229.unmet_dependencies = 
    [   MemoryDep('buf215', c0, {c0: 98304}),
        MemoryDep('buf225', c0, {c0: 98304}),
        MemoryDep('buf226', c0, {c0: 128}),
        MemoryDep('buf227', c0, {c0: 128})]
op229.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg176_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg177_1', c1, {c0: 128, c1: 768})]
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf229.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
    ]
]
op229.group.device = cuda:0
op229.group.iteration = (98304, 1)
op229.sizes = ([128, 768], [])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg175_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg176_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg177_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op229_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg175_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf215', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf226', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf227', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg176_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg177_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf229', get_index_7, add_3, None)
        return store


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf229', mode=None)]
op230.met_dependencies = [StarDep(name='arg178_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf230.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False)]
]
op230.node.kernel = extern_kernels.mm


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 393216})]
op231.unmet_dependencies = [MemoryDep('buf230', c0, {c0: 393216})]
op231.met_dependencies = [MemoryDep('arg179_1', c1, {c0: 128, c1: 3072})]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (393216, 1)
op231.sizes = ([128, 3072], [])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg179_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op231_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg179_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf230', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg179_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf231', get_index_4, mul_2, None)
        return store


op232: ExternKernelSchedulerNode(ExternKernelOut)
op232.writes = [StarDep(name='buf232', mode=None)]
op232.unmet_dependencies = [StarDep(name='buf231', mode=None)]
op232.met_dependencies = [StarDep(name='arg180_1', mode=None)]
op232.outputs = [
    buf232: ExternKernelOut
    buf232.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf232.users = [
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
    ]
]
op232.node.kernel = extern_kernels.mm


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 128})]
op233.unmet_dependencies = [MemoryDep('buf229', c0, {c0: 98304}), MemoryDep('buf232', c0, {c0: 98304})]
op233.met_dependencies = [MemoryDep('arg181_1', c1, {c0: 128, c1: 768})]
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf233.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (128, 768)
op233.sizes = ([128], [768])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg181_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op233_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg181_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf229', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf233', get_index_3, getitem)
        return store_reduction


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 128})]
op234.unmet_dependencies = [MemoryDep('buf229', c0, {c0: 98304}), MemoryDep('buf232', c0, {c0: 98304})]
op234.met_dependencies = [MemoryDep('arg181_1', c1, {c0: 128, c1: 768})]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf234.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (128, 768)
op234.sizes = ([128], [768])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg181_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op234_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg181_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf229', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf234', get_index_3, getitem_1)
        return store_reduction


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 98304})]
op236.unmet_dependencies = 
    [   MemoryDep('buf229', c0, {c0: 98304}),
        MemoryDep('buf232', c0, {c0: 98304}),
        MemoryDep('buf233', c0, {c0: 128}),
        MemoryDep('buf234', c0, {c0: 128})]
op236.met_dependencies = 
    [   MemoryDep('arg181_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg182_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg183_1', c1, {c0: 128, c1: 768})]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf236.users = [
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False),
    ]
]
op236.group.device = cuda:0
op236.group.iteration = (98304, 1)
op236.sizes = ([128, 768], [])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg181_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg182_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg183_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op236_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg181_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf229', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf233', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf234', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg182_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg183_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf236', get_index_7, add_3, None)
        return store


op237: SchedulerNode(MultiTemplateBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 98304})]
op237.unmet_dependencies = [StarDep(name='buf236', mode=None)]
op237.met_dependencies = [StarDep(name='arg184_1', mode=None), StarDep(name='arg185_1', mode=None)]
op237.outputs = [
    buf237: MultiTemplateBuffer
    buf237.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (98304, 1)
op237.sizes = ([128, 768], ())
arg185_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg184_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op238: SchedulerNode(MultiTemplateBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 98304})]
op238.unmet_dependencies = [StarDep(name='buf236', mode=None)]
op238.met_dependencies = [StarDep(name='arg186_1', mode=None), StarDep(name='arg187_1', mode=None)]
op238.outputs = [
    buf238: MultiTemplateBuffer
    buf238.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (98304, 1)
op238.sizes = ([128, 768], ())
arg187_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg186_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op239: SchedulerNode(MultiTemplateBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 98304})]
op239.unmet_dependencies = [StarDep(name='buf236', mode=None)]
op239.met_dependencies = [StarDep(name='arg188_1', mode=None), StarDep(name='arg189_1', mode=None)]
op239.outputs = [
    buf239: MultiTemplateBuffer
    buf239.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (98304, 1)
op239.sizes = ([128, 768], ())
arg189_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
arg188_1_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf239_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 98304})]
op240.unmet_dependencies = []
op240.met_dependencies = [MemoryDep('arg7_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (98304, 1)
op240.sizes = ([2, 768, 64], [])
arg7_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf240_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op240_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 64*p0 + p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg7_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf240', get_index_2, where, None)
        return store


op241: ExternKernelSchedulerNode(FallbackKernel)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = 
    [   StarDep(name='buf237', mode=None),
        StarDep(name='buf238', mode=None),
        StarDep(name='buf239', mode=None),
        StarDep(name='buf240', mode=None)]
op241.met_dependencies = []
op241.outputs = [
    buf241: FallbackKernel
    buf241.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf241.users = [NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op241.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op242: ExternKernelSchedulerNode(MultiOutput)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf241', mode=None)]
op242.met_dependencies = []
op242.outputs = [
    buf242: MultiOutput
    buf242.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 64, 768, 1])
    buf242.users = [NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op242.node.kernel = None


op246: ExternKernelSchedulerNode(ExternKernelOut)
op246.writes = [StarDep(name='buf246', mode=None)]
op246.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op246.met_dependencies = [StarDep(name='arg190_1', mode=None)]
op246.outputs = [
    buf246: ExternKernelOut
    buf246.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf246.users = [
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False),
    ]
]
op246.node.kernel = extern_kernels.mm


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 128})]
op247.unmet_dependencies = [MemoryDep('buf236', c0, {c0: 98304}), MemoryDep('buf246', c0, {c0: 98304})]
op247.met_dependencies = [MemoryDep('arg191_1', c1, {c0: 128, c1: 768})]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf247.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (128, 768)
op247.sizes = ([128], [768])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg191_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op247_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf246', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg191_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf236', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf247', get_index_3, getitem)
        return store_reduction


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 128})]
op248.unmet_dependencies = [MemoryDep('buf236', c0, {c0: 98304}), MemoryDep('buf246', c0, {c0: 98304})]
op248.met_dependencies = [MemoryDep('arg191_1', c1, {c0: 128, c1: 768})]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf248.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (128, 768)
op248.sizes = ([128], [768])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg191_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op248_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf246', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg191_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf236', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf248', get_index_3, getitem_1)
        return store_reduction


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 98304})]
op250.unmet_dependencies = 
    [   MemoryDep('buf236', c0, {c0: 98304}),
        MemoryDep('buf246', c0, {c0: 98304}),
        MemoryDep('buf247', c0, {c0: 128}),
        MemoryDep('buf248', c0, {c0: 128})]
op250.met_dependencies = 
    [   MemoryDep('arg191_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg192_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg193_1', c1, {c0: 128, c1: 768})]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf250.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=True, is_weak=False),
    ]
]
op250.group.device = cuda:0
op250.group.iteration = (98304, 1)
op250.sizes = ([128, 768], [])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg191_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg192_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg193_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op250_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf246', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg191_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf236', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf247', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf248', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg192_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg193_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf250', get_index_7, add_3, None)
        return store


op251: ExternKernelSchedulerNode(ExternKernelOut)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf250', mode=None)]
op251.met_dependencies = [StarDep(name='arg194_1', mode=None)]
op251.outputs = [
    buf251: ExternKernelOut
    buf251.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf251.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False)]
]
op251.node.kernel = extern_kernels.mm


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 393216})]
op252.unmet_dependencies = [MemoryDep('buf251', c0, {c0: 393216})]
op252.met_dependencies = [MemoryDep('arg195_1', c1, {c0: 128, c1: 3072})]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (393216, 1)
op252.sizes = ([128, 3072], [])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg195_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op252_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg195_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf251', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg195_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf252', get_index_4, mul_2, None)
        return store


op253: ExternKernelSchedulerNode(ExternKernelOut)
op253.writes = [StarDep(name='buf253', mode=None)]
op253.unmet_dependencies = [StarDep(name='buf252', mode=None)]
op253.met_dependencies = [StarDep(name='arg196_1', mode=None)]
op253.outputs = [
    buf253: ExternKernelOut
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf253.users = [
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=True, is_weak=False),
    ]
]
op253.node.kernel = extern_kernels.mm


op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 128})]
op254.unmet_dependencies = [MemoryDep('buf250', c0, {c0: 98304}), MemoryDep('buf253', c0, {c0: 98304})]
op254.met_dependencies = [MemoryDep('arg197_1', c1, {c0: 128, c1: 768})]
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf254.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (128, 768)
op254.sizes = ([128], [768])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg197_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf254_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op254_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf250', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf254', get_index_3, getitem)
        return store_reduction


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 128})]
op255.unmet_dependencies = [MemoryDep('buf250', c0, {c0: 98304}), MemoryDep('buf253', c0, {c0: 98304})]
op255.met_dependencies = [MemoryDep('arg197_1', c1, {c0: 128, c1: 768})]
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf255.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (128, 768)
op255.sizes = ([128], [768])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg197_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op255_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf250', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf255', get_index_3, getitem_1)
        return store_reduction


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 98304})]
op257.unmet_dependencies = 
    [   MemoryDep('buf250', c0, {c0: 98304}),
        MemoryDep('buf253', c0, {c0: 98304}),
        MemoryDep('buf254', c0, {c0: 128}),
        MemoryDep('buf255', c0, {c0: 128})]
op257.met_dependencies = 
    [   MemoryDep('arg197_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg198_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg199_1', c1, {c0: 128, c1: 768})]
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf257.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (98304, 1)
op257.sizes = ([128, 768], [])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg197_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf254_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg198_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg199_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op257_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf250', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf254', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf255', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg198_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg199_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf257', get_index_7, add_3, None)
        return store




# ===== run_2025_10_19_03_43_12_574129-pid_19/torchinductor/model__1_inference_1.1/output_code.py =====
# AOT ID: ['1_inference']
from ctypes import c_void_p, c_long, c_int
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align
from torch import device, empty_strided
from torch._inductor.async_compile import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels
from torch._inductor.codegen.multi_kernel import MultiKernelCall
import triton
import triton.language as tl
from torch._inductor.runtime.triton_heuristics import (
    grid,
    split_scan_grid,
    grid_combo_kernels,
    start_graph,
    end_graph,
    cooperative_reduction_grid,
)
from torch._C import _cuda_getCurrentRawStream as get_raw_stream
from torch._C import _cuda_getCurrentRawStream as get_raw_stream

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
_quantized = torch.ops._quantized
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
alloc_from_pool = torch.ops.inductor._alloc_from_pool
async_compile = AsyncCompile()
empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p


# kernel path: /tmp/torchinductor_root/3e/c3eotp5uv6y22uwhui335tdp6voxsteshcrrc6r6hftn2qaatlr6.py
# Topologically Sorted Source Nodes: [ne, mask, cumsum], Original ATen: [aten.ne, aten._to_copy, aten.cumsum]
# Source node to ATen node mapping:
#   cumsum => cumsum
#   mask => convert_element_type
#   ne => ne
# Graph fragment:
#   %ne : [num_users=1] = call_function[target=torch.ops.aten.ne.Scalar](args = (%arg0_1, 1), kwargs = {})
#   %convert_element_type : [num_users=2] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%ne, torch.int32), kwargs = {})
#   %cumsum : [num_users=1] = call_function[target=torch.ops.aten.cumsum.default](args = (%convert_element_type, 1), kwargs = {})
triton_per_fused__to_copy_cumsum_ne_0 = async_compile.triton('triton_per_fused__to_copy_cumsum_ne_0', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton.jit
def _triton_helper_fn_add0(arg0_0, arg1_0):
    tmp0 = arg0_0 + arg1_0
    return tmp0

@triton_heuristics.persistent_reduction(
    size_hints={'x': 2, 'r': 64},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*i64', 'out_ptr0': '*i64', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused__to_copy_cumsum_ne_0', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False}
)
@triton.jit
def triton_per_fused__to_copy_cumsum_ne_0(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 2
    rnumel = 64
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    roffset = 0
    rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + 64*x0), xmask, other=0.0)
    tmp1 = tl.full([1, 1], 1, tl.int64)
    tmp2 = tmp0 != tmp1
    tmp3 = tmp2.to(tl.int32)
    tmp4 = tmp3.to(tl.int64)
    tmp5 = tmp4.to(tl.int64)
    tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
    tmp7, = tl.associative_scan((tmp6,), 1, _triton_helper_fn_add0)
    tl.store(out_ptr0 + (r1 + 64*x0), tmp7, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/lk/clkggiek5rb3oxczh64sjn5skjsgl564mnioq24ydxmfwjvnux6v.py
# Topologically Sorted Source Nodes: [inputs_embeds, token_type_embeddings, embeddings, ne, mask, type_as, add, incremental_indices, long, position_ids, position_embeddings, embeddings_1, embeddings_2], Original ATen: [aten.embedding, aten.add, aten.ne, aten._to_copy, aten.mul, aten.native_layer_norm]
# Source node to ATen node mapping:
#   add => add
#   embeddings => add_2
#   embeddings_1 => add_3
#   embeddings_2 => add_4, add_5, mul_1, mul_2, rsqrt, sub, var_mean
#   incremental_indices => mul
#   inputs_embeds => embedding
#   long => convert_element_type_2
#   mask => convert_element_type
#   ne => ne
#   position_embeddings => embedding_2
#   position_ids => add_1
#   token_type_embeddings => embedding_1
#   type_as => convert_element_type_1
# Graph fragment:
#   %embedding : [num_users=1] = call_function[target=torch.ops.aten.embedding.default](args = (%arg2_1, %arg0_1, 1), kwargs = {})
#   %embedding_1 : [num_users=1] = call_function[target=torch.ops.aten.embedding.default](args = (%arg3_1, %expand), kwargs = {})
#   %add_2 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%embedding, %embedding_1), kwargs = {})
#   %ne : [num_users=1] = call_function[target=torch.ops.aten.ne.Scalar](args = (%arg0_1, 1), kwargs = {})
#   %convert_element_type : [num_users=2] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%ne, torch.int32), kwargs = {})
#   %convert_element_type_1 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%cumsum, torch.int32), kwargs = {})
#   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convert_element_type_1, 0), kwargs = {})
#   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add, %convert_element_type), kwargs = {})
#   %convert_element_type_2 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%mul, torch.int64), kwargs = {})
#   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convert_element_type_2, 1), kwargs = {})
#   %embedding_2 : [num_users=1] = call_function[target=torch.ops.aten.embedding.default](args = (%arg4_1, %add_1, 1), kwargs = {})
#   %add_3 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_2, %embedding_2), kwargs = {})
#   %var_mean : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_3, [2]), kwargs = {correction: 0, keepdim: True})
#   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_3, %getitem_1), kwargs = {})
#   %add_4 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem, 1e-05), kwargs = {})
#   %rsqrt : [num_users=1] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_4,), kwargs = {})
#   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub, %rsqrt), kwargs = {})
#   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_1, %arg5_1), kwargs = {})
#   %add_5 : [num_users=4] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_2, %arg6_1), kwargs = {})
triton_per_fused__to_copy_add_embedding_mul_native_layer_norm_ne_1 = async_compile.triton('triton_per_fused__to_copy_add_embedding_mul_native_layer_norm_ne_1', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 128, 'r': 1024},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*i64', 'in_ptr1': '*fp32', 'in_ptr2': '*i64', 'in_ptr3': '*fp32', 'in_ptr4': '*i64', 'in_ptr5': '*fp32', 'in_ptr6': '*fp32', 'in_ptr7': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused__to_copy_add_embedding_mul_native_layer_norm_ne_1', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 6, 'num_reduction': 4, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False}
)
@triton.jit
def triton_per_fused__to_copy_add_embedding_mul_native_layer_norm_ne_1(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, xnumel, rnumel):
    xnumel = 128
    XBLOCK: tl.constexpr = 1
    rnumel = 768
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = rindex < rnumel
    x3 = xindex
    r2 = rindex
    x0 = (xindex % 64)
    tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
    tmp7 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
    tmp13 = tl.load(in_ptr3 + (r2), rmask, eviction_policy='evict_last', other=0.0)
    tmp15 = tl.load(in_ptr4 + (x3), None, eviction_policy='evict_last')
    tmp55 = tl.load(in_ptr6 + (r2), rmask, eviction_policy='evict_last', other=0.0)
    tmp57 = tl.load(in_ptr7 + (r2), rmask, eviction_policy='evict_last', other=0.0)
    tmp1 = tl.full([RBLOCK], 50265, tl.int32)
    tmp2 = tmp0 + tmp1
    tmp3 = tmp0 < 0
    tmp4 = tl.where(tmp3, tmp2, tmp0)
    tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
    tmp6 = tl.load(in_ptr1 + (r2 + 768*tmp4), rmask, other=0.0)
    tmp8 = tl.full([RBLOCK], 1, tl.int32)
    tmp9 = tmp7 + tmp8
    tmp10 = tmp7 < 0
    tmp11 = tl.where(tmp10, tmp9, tmp7)
    tl.device_assert((0 <= tmp11) & (tmp11 < 1), "index out of bounds: 0 <= tmp11 < 1")
    tmp14 = tmp6 + tmp13
    tmp16 = tmp15.to(tl.int32)
    tmp17 = tl.full([1], 0, tl.int32)
    tmp18 = tmp16 + tmp17
    tmp19 = tl.full([1], 1, tl.int64)
    tmp20 = tmp0 != tmp19
    tmp21 = tmp20.to(tl.int32)
    tmp22 = tmp18 * tmp21
    tmp23 = tmp22.to(tl.int64)
    tmp24 = tmp23 + tmp19
    tmp25 = tl.full([RBLOCK], 514, tl.int32)
    tmp26 = tmp24 + tmp25
    tmp27 = tmp24 < 0
    tmp28 = tl.where(tmp27, tmp26, tmp24)
    tl.device_assert((0 <= tmp28) & (tmp28 < 514), "index out of bounds: 0 <= tmp28 < 514")
    tmp30 = tl.load(in_ptr5 + (r2 + 768*tmp28), rmask, other=0.0)
    tmp31 = tmp14 + tmp30
    tmp32 = tl.broadcast_to(tmp31, [RBLOCK])
    tmp34 = tl.where(rmask, tmp32, 0)
    tmp35 = tl.broadcast_to(tmp32, [RBLOCK])
    tmp37 = tl.where(rmask, tmp35, 0)
    tmp38 = triton_helpers.promote_to_tensor(tl.sum(tmp37, 0))
    tmp39 = tl.full([1], 768, tl.int32)
    tmp40 = tmp39.to(tl.float32)
    tmp41 = tmp38 / tmp40
    tmp42 = tmp32 - tmp41
    tmp43 = tmp42 * tmp42
    tmp44 = tl.broadcast_to(tmp43, [RBLOCK])
    tmp46 = tl.where(rmask, tmp44, 0)
    tmp47 = triton_helpers.promote_to_tensor(tl.sum(tmp46, 0))
    tmp48 = tmp31 - tmp41
    tmp49 = 768.0
    tmp50 = tmp47 / tmp49
    tmp51 = 1e-05
    tmp52 = tmp50 + tmp51
    tmp53 = libdevice.rsqrt(tmp52)
    tmp54 = tmp48 * tmp53
    tmp56 = tmp54 * tmp55
    tmp58 = tmp56 + tmp57
    tl.store(in_out_ptr0 + (r2 + 768*x3), tmp58, rmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/ia/ciamej5fx7bcu4psqa2uvdlofm3izbfmvpml4j6p5dgeb5kx3op4.py
# Topologically Sorted Source Nodes: [attn_output, attn_output_3, attn_output_6, attn_output_9, attn_output_12], Original ATen: [aten._scaled_dot_product_efficient_attention]
# Source node to ATen node mapping:
#   attn_output => _scaled_dot_product_efficient_attention
#   attn_output_12 => _scaled_dot_product_efficient_attention_4
#   attn_output_3 => _scaled_dot_product_efficient_attention_1
#   attn_output_6 => _scaled_dot_product_efficient_attention_2
#   attn_output_9 => _scaled_dot_product_efficient_attention_3
# Graph fragment:
#   %_scaled_dot_product_efficient_attention : [num_users=1] = call_function[target=torch.ops.aten._scaled_dot_product_efficient_attention.default](args = (%permute_1, %permute_3, %permute_5, %expand_2, False), kwargs = {})
#   %_scaled_dot_product_efficient_attention_1 : [num_users=1] = call_function[target=torch.ops.aten._scaled_dot_product_efficient_attention.default](args = (%permute_11, %permute_13, %permute_15, %expand_3, False), kwargs = {})
#   %_scaled_dot_product_efficient_attention_2 : [num_users=1] = call_function[target=torch.ops.aten._scaled_dot_product_efficient_attention.default](args = (%permute_21, %permute_23, %permute_25, %expand_4, False), kwargs = {})
#   %_scaled_dot_product_efficient_attention_3 : [num_users=1] = call_function[target=torch.ops.aten._scaled_dot_product_efficient_attention.default](args = (%permute_31, %permute_33, %permute_35, %expand_5, False), kwargs = {})
#   %_scaled_dot_product_efficient_attention_4 : [num_users=1] = call_function[target=torch.ops.aten._scaled_dot_product_efficient_attention.default](args = (%permute_41, %permute_43, %permute_45, %expand_6, False), kwargs = {})
triton_poi_fused__scaled_dot_product_efficient_attention_2 = async_compile.triton('triton_poi_fused__scaled_dot_product_efficient_attention_2', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 131072}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*i64', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'out_ptr2': '*fp32', 'out_ptr3': '*fp32', 'out_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__scaled_dot_product_efficient_attention_2', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused__scaled_dot_product_efficient_attention_2(in_ptr0, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, xnumel, XBLOCK : tl.constexpr):
    xnumel = 98304
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = (xindex % 64)
    x2 = xindex // 49152
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + 64*x2), None, eviction_policy='evict_last')
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 1.0
    tmp3 = tmp2 - tmp1
    tmp4 = (tmp3 != 0)
    tmp5 = -3.4028234663852886e+38
    tmp6 = tl.where(tmp4, tmp5, tmp3)
    tl.store(out_ptr0 + (x3), tmp6, None)
    tl.store(out_ptr1 + (x3), tmp6, None)
    tl.store(out_ptr2 + (x3), tmp6, None)
    tl.store(out_ptr3 + (x3), tmp6, None)
    tl.store(out_ptr4 + (x3), tmp6, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/tz/ctzzybaieebcyq7svswx5bezyx2avk7vjazlrsjlyvcadbkt3d6e.py
# Topologically Sorted Source Nodes: [add_3, hidden_states_2], Original ATen: [aten.add, aten.native_layer_norm]
# Source node to ATen node mapping:
#   add_3 => add_6
#   hidden_states_2 => add_7, add_8, mul_3, mul_4, rsqrt_1, sub_2, var_mean_1
# Graph fragment:
#   %add_6 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_11, %add_5), kwargs = {})
#   %var_mean_1 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_6, [2]), kwargs = {correction: 0, keepdim: True})
#   %sub_2 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_6, %getitem_7), kwargs = {})
#   %add_7 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_6, 1e-05), kwargs = {})
#   %rsqrt_1 : [num_users=1] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_7,), kwargs = {})
#   %mul_3 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_2, %rsqrt_1), kwargs = {})
#   %mul_4 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_3, %arg16_1), kwargs = {})
#   %add_8 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_4, %arg17_1), kwargs = {})
triton_per_fused_add_native_layer_norm_3 = async_compile.triton('triton_per_fused_add_native_layer_norm_3', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 128, 'r': 1024},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_native_layer_norm_3', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False}
)
@triton.jit
def triton_per_fused_add_native_layer_norm_3(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, rnumel):
    xnumel = 128
    XBLOCK: tl.constexpr = 1
    rnumel = 768
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (r1 + 768*x0), rmask, other=0.0)
    tmp1 = tl.load(in_ptr0 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + 768*x0), rmask, other=0.0)
    tmp28 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp30 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp2 = tmp0 + tmp1
    tmp4 = tmp2 + tmp3
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask, tmp5, 0)
    tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
    tmp10 = tl.where(rmask, tmp8, 0)
    tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
    tmp12 = tl.full([1], 768, tl.int32)
    tmp13 = tmp12.to(tl.float32)
    tmp14 = tmp11 / tmp13
    tmp15 = tmp5 - tmp14
    tmp16 = tmp15 * tmp15
    tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
    tmp19 = tl.where(rmask, tmp17, 0)
    tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
    tmp21 = tmp4 - tmp14
    tmp22 = 768.0
    tmp23 = tmp20 / tmp22
    tmp24 = 1e-05
    tmp25 = tmp23 + tmp24
    tmp26 = libdevice.rsqrt(tmp25)
    tmp27 = tmp21 * tmp26
    tmp29 = tmp27 * tmp28
    tmp31 = tmp29 + tmp30
    tl.store(in_out_ptr0 + (r1 + 768*x0), tmp31, rmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/hz/chzn4byzgwqjrfja7ch6fjpjorgbo4cmowkrk4edfqryo77o2uah.py
# Topologically Sorted Source Nodes: [hidden_states_4], Original ATen: [aten.gelu]
# Source node to ATen node mapping:
#   hidden_states_4 => add_9, erf, mul_5, mul_6, mul_7
# Graph fragment:
#   %mul_5 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_13, 0.5), kwargs = {})
#   %mul_6 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_13, 0.7071067811865476), kwargs = {})
#   %erf : [num_users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_6,), kwargs = {})
#   %add_9 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})
#   %mul_7 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_5, %add_9), kwargs = {})
triton_poi_fused_gelu_4 = async_compile.triton('triton_poi_fused_gelu_4', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 524288}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_4', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_gelu_4(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 393216
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x2 = xindex
    x0 = (xindex % 3072)
    tmp0 = tl.load(in_out_ptr0 + (x2), None)
    tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
    tmp2 = tmp0 + tmp1
    tmp3 = 0.5
    tmp4 = tmp2 * tmp3
    tmp5 = 0.7071067811865476
    tmp6 = tmp2 * tmp5
    tmp7 = libdevice.erf(tmp6)
    tmp8 = 1.0
    tmp9 = tmp7 + tmp8
    tmp10 = tmp4 * tmp9
    tl.store(in_out_ptr0 + (x2), tmp10, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/ng/cngp5667i2t5fwjt7lgaj7kb2ajmewclrbxmuivfqo36g3aevfff.py
# Topologically Sorted Source Nodes: [attn_output_30, attn_output_33], Original ATen: [aten._scaled_dot_product_efficient_attention]
# Source node to ATen node mapping:
#   attn_output_30 => _scaled_dot_product_efficient_attention_10
#   attn_output_33 => _scaled_dot_product_efficient_attention_11
# Graph fragment:
#   %_scaled_dot_product_efficient_attention_10 : [num_users=1] = call_function[target=torch.ops.aten._scaled_dot_product_efficient_attention.default](args = (%permute_101, %permute_103, %permute_105, %expand_12, False), kwargs = {})
#   %_scaled_dot_product_efficient_attention_11 : [num_users=1] = call_function[target=torch.ops.aten._scaled_dot_product_efficient_attention.default](args = (%permute_111, %permute_113, %permute_115, %expand_13, False), kwargs = {})
triton_poi_fused__scaled_dot_product_efficient_attention_5 = async_compile.triton('triton_poi_fused__scaled_dot_product_efficient_attention_5', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 131072}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*i64', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__scaled_dot_product_efficient_attention_5', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused__scaled_dot_product_efficient_attention_5(in_ptr0, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
    xnumel = 98304
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = (xindex % 64)
    x2 = xindex // 49152
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + 64*x2), None, eviction_policy='evict_last')
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 1.0
    tmp3 = tmp2 - tmp1
    tmp4 = (tmp3 != 0)
    tmp5 = -3.4028234663852886e+38
    tmp6 = tl.where(tmp4, tmp5, tmp3)
    tl.store(out_ptr0 + (x3), tmp6, None)
    tl.store(out_ptr1 + (x3), tmp6, None)
''', device_str='cuda')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1, arg7_1, arg8_1, arg9_1, arg10_1, arg11_1, arg12_1, arg13_1, arg14_1, arg15_1, arg16_1, arg17_1, arg18_1, arg19_1, arg20_1, arg21_1, arg22_1, arg23_1, arg24_1, arg25_1, arg26_1, arg27_1, arg28_1, arg29_1, arg30_1, arg31_1, arg32_1, arg33_1, arg34_1, arg35_1, arg36_1, arg37_1, arg38_1, arg39_1, arg40_1, arg41_1, arg42_1, arg43_1, arg44_1, arg45_1, arg46_1, arg47_1, arg48_1, arg49_1, arg50_1, arg51_1, arg52_1, arg53_1, arg54_1, arg55_1, arg56_1, arg57_1, arg58_1, arg59_1, arg60_1, arg61_1, arg62_1, arg63_1, arg64_1, arg65_1, arg66_1, arg67_1, arg68_1, arg69_1, arg70_1, arg71_1, arg72_1, arg73_1, arg74_1, arg75_1, arg76_1, arg77_1, arg78_1, arg79_1, arg80_1, arg81_1, arg82_1, arg83_1, arg84_1, arg85_1, arg86_1, arg87_1, arg88_1, arg89_1, arg90_1, arg91_1, arg92_1, arg93_1, arg94_1, arg95_1, arg96_1, arg97_1, arg98_1, arg99_1, arg100_1, arg101_1, arg102_1, arg103_1, arg104_1, arg105_1, arg106_1, arg107_1, arg108_1, arg109_1, arg110_1, arg111_1, arg112_1, arg113_1, arg114_1, arg115_1, arg116_1, arg117_1, arg118_1, arg119_1, arg120_1, arg121_1, arg122_1, arg123_1, arg124_1, arg125_1, arg126_1, arg127_1, arg128_1, arg129_1, arg130_1, arg131_1, arg132_1, arg133_1, arg134_1, arg135_1, arg136_1, arg137_1, arg138_1, arg139_1, arg140_1, arg141_1, arg142_1, arg143_1, arg144_1, arg145_1, arg146_1, arg147_1, arg148_1, arg149_1, arg150_1, arg151_1, arg152_1, arg153_1, arg154_1, arg155_1, arg156_1, arg157_1, arg158_1, arg159_1, arg160_1, arg161_1, arg162_1, arg163_1, arg164_1, arg165_1, arg166_1, arg167_1, arg168_1, arg169_1, arg170_1, arg171_1, arg172_1, arg173_1, arg174_1, arg175_1, arg176_1, arg177_1, arg178_1, arg179_1, arg180_1, arg181_1, arg182_1, arg183_1, arg184_1, arg185_1, arg186_1, arg187_1, arg188_1, arg189_1, arg190_1, arg191_1, arg192_1, arg193_1, arg194_1, arg195_1, arg196_1, arg197_1, arg198_1, arg199_1 = args
    args.clear()
    assert_size_stride(arg0_1, (2, 64), (64, 1))
    assert_size_stride(arg1_1, (1, 514), (514, 1))
    assert_size_stride(arg2_1, (50265, 768), (768, 1))
    assert_size_stride(arg3_1, (1, 768), (768, 1))
    assert_size_stride(arg4_1, (514, 768), (768, 1))
    assert_size_stride(arg5_1, (768, ), (1, ))
    assert_size_stride(arg6_1, (768, ), (1, ))
    assert_size_stride(arg7_1, (2, 64), (64, 1))
    assert_size_stride(arg8_1, (768, 768), (768, 1))
    assert_size_stride(arg9_1, (768, ), (1, ))
    assert_size_stride(arg10_1, (768, 768), (768, 1))
    assert_size_stride(arg11_1, (768, ), (1, ))
    assert_size_stride(arg12_1, (768, 768), (768, 1))
    assert_size_stride(arg13_1, (768, ), (1, ))
    assert_size_stride(arg14_1, (768, 768), (768, 1))
    assert_size_stride(arg15_1, (768, ), (1, ))
    assert_size_stride(arg16_1, (768, ), (1, ))
    assert_size_stride(arg17_1, (768, ), (1, ))
    assert_size_stride(arg18_1, (3072, 768), (768, 1))
    assert_size_stride(arg19_1, (3072, ), (1, ))
    assert_size_stride(arg20_1, (768, 3072), (3072, 1))
    assert_size_stride(arg21_1, (768, ), (1, ))
    assert_size_stride(arg22_1, (768, ), (1, ))
    assert_size_stride(arg23_1, (768, ), (1, ))
    assert_size_stride(arg24_1, (768, 768), (768, 1))
    assert_size_stride(arg25_1, (768, ), (1, ))
    assert_size_stride(arg26_1, (768, 768), (768, 1))
    assert_size_stride(arg27_1, (768, ), (1, ))
    assert_size_stride(arg28_1, (768, 768), (768, 1))
    assert_size_stride(arg29_1, (768, ), (1, ))
    assert_size_stride(arg30_1, (768, 768), (768, 1))
    assert_size_stride(arg31_1, (768, ), (1, ))
    assert_size_stride(arg32_1, (768, ), (1, ))
    assert_size_stride(arg33_1, (768, ), (1, ))
    assert_size_stride(arg34_1, (3072, 768), (768, 1))
    assert_size_stride(arg35_1, (3072, ), (1, ))
    assert_size_stride(arg36_1, (768, 3072), (3072, 1))
    assert_size_stride(arg37_1, (768, ), (1, ))
    assert_size_stride(arg38_1, (768, ), (1, ))
    assert_size_stride(arg39_1, (768, ), (1, ))
    assert_size_stride(arg40_1, (768, 768), (768, 1))
    assert_size_stride(arg41_1, (768, ), (1, ))
    assert_size_stride(arg42_1, (768, 768), (768, 1))
    assert_size_stride(arg43_1, (768, ), (1, ))
    assert_size_stride(arg44_1, (768, 768), (768, 1))
    assert_size_stride(arg45_1, (768, ), (1, ))
    assert_size_stride(arg46_1, (768, 768), (768, 1))
    assert_size_stride(arg47_1, (768, ), (1, ))
    assert_size_stride(arg48_1, (768, ), (1, ))
    assert_size_stride(arg49_1, (768, ), (1, ))
    assert_size_stride(arg50_1, (3072, 768), (768, 1))
    assert_size_stride(arg51_1, (3072, ), (1, ))
    assert_size_stride(arg52_1, (768, 3072), (3072, 1))
    assert_size_stride(arg53_1, (768, ), (1, ))
    assert_size_stride(arg54_1, (768, ), (1, ))
    assert_size_stride(arg55_1, (768, ), (1, ))
    assert_size_stride(arg56_1, (768, 768), (768, 1))
    assert_size_stride(arg57_1, (768, ), (1, ))
    assert_size_stride(arg58_1, (768, 768), (768, 1))
    assert_size_stride(arg59_1, (768, ), (1, ))
    assert_size_stride(arg60_1, (768, 768), (768, 1))
    assert_size_stride(arg61_1, (768, ), (1, ))
    assert_size_stride(arg62_1, (768, 768), (768, 1))
    assert_size_stride(arg63_1, (768, ), (1, ))
    assert_size_stride(arg64_1, (768, ), (1, ))
    assert_size_stride(arg65_1, (768, ), (1, ))
    assert_size_stride(arg66_1, (3072, 768), (768, 1))
    assert_size_stride(arg67_1, (3072, ), (1, ))
    assert_size_stride(arg68_1, (768, 3072), (3072, 1))
    assert_size_stride(arg69_1, (768, ), (1, ))
    assert_size_stride(arg70_1, (768, ), (1, ))
    assert_size_stride(arg71_1, (768, ), (1, ))
    assert_size_stride(arg72_1, (768, 768), (768, 1))
    assert_size_stride(arg73_1, (768, ), (1, ))
    assert_size_stride(arg74_1, (768, 768), (768, 1))
    assert_size_stride(arg75_1, (768, ), (1, ))
    assert_size_stride(arg76_1, (768, 768), (768, 1))
    assert_size_stride(arg77_1, (768, ), (1, ))
    assert_size_stride(arg78_1, (768, 768), (768, 1))
    assert_size_stride(arg79_1, (768, ), (1, ))
    assert_size_stride(arg80_1, (768, ), (1, ))
    assert_size_stride(arg81_1, (768, ), (1, ))
    assert_size_stride(arg82_1, (3072, 768), (768, 1))
    assert_size_stride(arg83_1, (3072, ), (1, ))
    assert_size_stride(arg84_1, (768, 3072), (3072, 1))
    assert_size_stride(arg85_1, (768, ), (1, ))
    assert_size_stride(arg86_1, (768, ), (1, ))
    assert_size_stride(arg87_1, (768, ), (1, ))
    assert_size_stride(arg88_1, (768, 768), (768, 1))
    assert_size_stride(arg89_1, (768, ), (1, ))
    assert_size_stride(arg90_1, (768, 768), (768, 1))
    assert_size_stride(arg91_1, (768, ), (1, ))
    assert_size_stride(arg92_1, (768, 768), (768, 1))
    assert_size_stride(arg93_1, (768, ), (1, ))
    assert_size_stride(arg94_1, (768, 768), (768, 1))
    assert_size_stride(arg95_1, (768, ), (1, ))
    assert_size_stride(arg96_1, (768, ), (1, ))
    assert_size_stride(arg97_1, (768, ), (1, ))
    assert_size_stride(arg98_1, (3072, 768), (768, 1))
    assert_size_stride(arg99_1, (3072, ), (1, ))
    assert_size_stride(arg100_1, (768, 3072), (3072, 1))
    assert_size_stride(arg101_1, (768, ), (1, ))
    assert_size_stride(arg102_1, (768, ), (1, ))
    assert_size_stride(arg103_1, (768, ), (1, ))
    assert_size_stride(arg104_1, (768, 768), (768, 1))
    assert_size_stride(arg105_1, (768, ), (1, ))
    assert_size_stride(arg106_1, (768, 768), (768, 1))
    assert_size_stride(arg107_1, (768, ), (1, ))
    assert_size_stride(arg108_1, (768, 768), (768, 1))
    assert_size_stride(arg109_1, (768, ), (1, ))
    assert_size_stride(arg110_1, (768, 768), (768, 1))
    assert_size_stride(arg111_1, (768, ), (1, ))
    assert_size_stride(arg112_1, (768, ), (1, ))
    assert_size_stride(arg113_1, (768, ), (1, ))
    assert_size_stride(arg114_1, (3072, 768), (768, 1))
    assert_size_stride(arg115_1, (3072, ), (1, ))
    assert_size_stride(arg116_1, (768, 3072), (3072, 1))
    assert_size_stride(arg117_1, (768, ), (1, ))
    assert_size_stride(arg118_1, (768, ), (1, ))
    assert_size_stride(arg119_1, (768, ), (1, ))
    assert_size_stride(arg120_1, (768, 768), (768, 1))
    assert_size_stride(arg121_1, (768, ), (1, ))
    assert_size_stride(arg122_1, (768, 768), (768, 1))
    assert_size_stride(arg123_1, (768, ), (1, ))
    assert_size_stride(arg124_1, (768, 768), (768, 1))
    assert_size_stride(arg125_1, (768, ), (1, ))
    assert_size_stride(arg126_1, (768, 768), (768, 1))
    assert_size_stride(arg127_1, (768, ), (1, ))
    assert_size_stride(arg128_1, (768, ), (1, ))
    assert_size_stride(arg129_1, (768, ), (1, ))
    assert_size_stride(arg130_1, (3072, 768), (768, 1))
    assert_size_stride(arg131_1, (3072, ), (1, ))
    assert_size_stride(arg132_1, (768, 3072), (3072, 1))
    assert_size_stride(arg133_1, (768, ), (1, ))
    assert_size_stride(arg134_1, (768, ), (1, ))
    assert_size_stride(arg135_1, (768, ), (1, ))
    assert_size_stride(arg136_1, (768, 768), (768, 1))
    assert_size_stride(arg137_1, (768, ), (1, ))
    assert_size_stride(arg138_1, (768, 768), (768, 1))
    assert_size_stride(arg139_1, (768, ), (1, ))
    assert_size_stride(arg140_1, (768, 768), (768, 1))
    assert_size_stride(arg141_1, (768, ), (1, ))
    assert_size_stride(arg142_1, (768, 768), (768, 1))
    assert_size_stride(arg143_1, (768, ), (1, ))
    assert_size_stride(arg144_1, (768, ), (1, ))
    assert_size_stride(arg145_1, (768, ), (1, ))
    assert_size_stride(arg146_1, (3072, 768), (768, 1))
    assert_size_stride(arg147_1, (3072, ), (1, ))
    assert_size_stride(arg148_1, (768, 3072), (3072, 1))
    assert_size_stride(arg149_1, (768, ), (1, ))
    assert_size_stride(arg150_1, (768, ), (1, ))
    assert_size_stride(arg151_1, (768, ), (1, ))
    assert_size_stride(arg152_1, (768, 768), (768, 1))
    assert_size_stride(arg153_1, (768, ), (1, ))
    assert_size_stride(arg154_1, (768, 768), (768, 1))
    assert_size_stride(arg155_1, (768, ), (1, ))
    assert_size_stride(arg156_1, (768, 768), (768, 1))
    assert_size_stride(arg157_1, (768, ), (1, ))
    assert_size_stride(arg158_1, (768, 768), (768, 1))
    assert_size_stride(arg159_1, (768, ), (1, ))
    assert_size_stride(arg160_1, (768, ), (1, ))
    assert_size_stride(arg161_1, (768, ), (1, ))
    assert_size_stride(arg162_1, (3072, 768), (768, 1))
    assert_size_stride(arg163_1, (3072, ), (1, ))
    assert_size_stride(arg164_1, (768, 3072), (3072, 1))
    assert_size_stride(arg165_1, (768, ), (1, ))
    assert_size_stride(arg166_1, (768, ), (1, ))
    assert_size_stride(arg167_1, (768, ), (1, ))
    assert_size_stride(arg168_1, (768, 768), (768, 1))
    assert_size_stride(arg169_1, (768, ), (1, ))
    assert_size_stride(arg170_1, (768, 768), (768, 1))
    assert_size_stride(arg171_1, (768, ), (1, ))
    assert_size_stride(arg172_1, (768, 768), (768, 1))
    assert_size_stride(arg173_1, (768, ), (1, ))
    assert_size_stride(arg174_1, (768, 768), (768, 1))
    assert_size_stride(arg175_1, (768, ), (1, ))
    assert_size_stride(arg176_1, (768, ), (1, ))
    assert_size_stride(arg177_1, (768, ), (1, ))
    assert_size_stride(arg178_1, (3072, 768), (768, 1))
    assert_size_stride(arg179_1, (3072, ), (1, ))
    assert_size_stride(arg180_1, (768, 3072), (3072, 1))
    assert_size_stride(arg181_1, (768, ), (1, ))
    assert_size_stride(arg182_1, (768, ), (1, ))
    assert_size_stride(arg183_1, (768, ), (1, ))
    assert_size_stride(arg184_1, (768, 768), (768, 1))
    assert_size_stride(arg185_1, (768, ), (1, ))
    assert_size_stride(arg186_1, (768, 768), (768, 1))
    assert_size_stride(arg187_1, (768, ), (1, ))
    assert_size_stride(arg188_1, (768, 768), (768, 1))
    assert_size_stride(arg189_1, (768, ), (1, ))
    assert_size_stride(arg190_1, (768, 768), (768, 1))
    assert_size_stride(arg191_1, (768, ), (1, ))
    assert_size_stride(arg192_1, (768, ), (1, ))
    assert_size_stride(arg193_1, (768, ), (1, ))
    assert_size_stride(arg194_1, (3072, 768), (768, 1))
    assert_size_stride(arg195_1, (3072, ), (1, ))
    assert_size_stride(arg196_1, (768, 3072), (3072, 1))
    assert_size_stride(arg197_1, (768, ), (1, ))
    assert_size_stride(arg198_1, (768, ), (1, ))
    assert_size_stride(arg199_1, (768, ), (1, ))
    with torch.cuda._DeviceGuard(0):
        torch.cuda.set_device(0)
        buf0 = empty_strided_cuda((2, 64), (64, 1), torch.int64)
        # Topologically Sorted Source Nodes: [ne, mask, cumsum], Original ATen: [aten.ne, aten._to_copy, aten.cumsum]
        stream0 = get_raw_stream(0)
        triton_per_fused__to_copy_cumsum_ne_0.run(arg0_1, buf0, 2, 64, grid=grid(2), stream=stream0)
        buf1 = empty_strided_cuda((2, 64, 768), (49152, 768, 1), torch.float32)
        buf5 = buf1; del buf1  # reuse
        # Topologically Sorted Source Nodes: [inputs_embeds, token_type_embeddings, embeddings, ne, mask, type_as, add, incremental_indices, long, position_ids, position_embeddings, embeddings_1, embeddings_2], Original ATen: [aten.embedding, aten.add, aten.ne, aten._to_copy, aten.mul, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused__to_copy_add_embedding_mul_native_layer_norm_ne_1.run(buf5, arg0_1, arg2_1, arg1_1, arg3_1, buf0, arg4_1, arg5_1, arg6_1, 128, 768, grid=grid(128), stream=stream0)
        del arg0_1
        del arg1_1
        del arg2_1
        del arg3_1
        del arg4_1
        del arg5_1
        del arg6_1
        del buf0
        buf6 = empty_strided_cuda((128, 768), (768, 1), torch.float32)
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg9_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf5, (128, 768), (768, 1), 0), reinterpret_tensor(arg8_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf6)
        del arg8_1
        del arg9_1
        buf7 = empty_strided_cuda((128, 768), (768, 1), torch.float32)
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg11_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf5, (128, 768), (768, 1), 0), reinterpret_tensor(arg10_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf7)
        del arg10_1
        del arg11_1
        buf8 = empty_strided_cuda((128, 768), (768, 1), torch.float32)
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg13_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf5, (128, 768), (768, 1), 0), reinterpret_tensor(arg12_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf8)
        del arg12_1
        del arg13_1
        buf9 = empty_strided_cuda((2, 12, 64, 64), (49152, 4096, 64, 1), torch.float32)
        buf30 = empty_strided_cuda((2, 12, 64, 64), (49152, 4096, 64, 1), torch.float32)
        buf51 = empty_strided_cuda((2, 12, 64, 64), (49152, 4096, 64, 1), torch.float32)
        buf72 = empty_strided_cuda((2, 12, 64, 64), (49152, 4096, 64, 1), torch.float32)
        buf93 = empty_strided_cuda((2, 12, 64, 64), (49152, 4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_output, attn_output_3, attn_output_6, attn_output_9, attn_output_12], Original ATen: [aten._scaled_dot_product_efficient_attention]
        stream0 = get_raw_stream(0)
        triton_poi_fused__scaled_dot_product_efficient_attention_2.run(arg7_1, buf9, buf30, buf51, buf72, buf93, 98304, grid=grid(98304), stream=stream0)
        # Topologically Sorted Source Nodes: [attn_output], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf10 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf6, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf7, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf8, (2, 12, 64, 64), (49152, 64, 768, 1), 0), buf9, False)
        del buf6
        del buf7
        buf11 = buf10[0]
        del buf10
        buf15 = reinterpret_tensor(buf9, (128, 768), (768, 1), 0); del buf9  # reuse
        # Topologically Sorted Source Nodes: [hidden_states], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf11, (128, 768), (768, 1), 0), reinterpret_tensor(arg14_1, (768, 768), (1, 768), 0), out=buf15)
        del arg14_1
        buf19 = reinterpret_tensor(buf15, (2, 64, 768), (49152, 768, 1), 0); del buf15  # reuse
        # Topologically Sorted Source Nodes: [add_3, hidden_states_2], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf19, arg15_1, buf5, arg16_1, arg17_1, 128, 768, grid=grid(128), stream=stream0)
        del arg15_1
        del arg16_1
        del arg17_1
        buf20 = empty_strided_cuda((128, 3072), (3072, 1), torch.float32)
        # Topologically Sorted Source Nodes: [hidden_states_3], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf19, (128, 768), (768, 1), 0), reinterpret_tensor(arg18_1, (768, 3072), (1, 768), 0), out=buf20)
        del arg18_1
        buf21 = reinterpret_tensor(buf20, (2, 64, 3072), (196608, 3072, 1), 0); del buf20  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_4], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_4.run(buf21, arg19_1, 393216, grid=grid(393216), stream=stream0)
        del arg19_1
        buf22 = reinterpret_tensor(buf5, (128, 768), (768, 1), 0); del buf5  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_5], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf21, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg20_1, (3072, 768), (1, 3072), 0), out=buf22)
        del arg20_1
        buf26 = reinterpret_tensor(buf22, (2, 64, 768), (49152, 768, 1), 0); del buf22  # reuse
        # Topologically Sorted Source Nodes: [add_4, hidden_states_7], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf26, arg21_1, buf19, arg22_1, arg23_1, 128, 768, grid=grid(128), stream=stream0)
        del arg21_1
        del arg22_1
        del arg23_1
        buf27 = reinterpret_tensor(buf19, (128, 768), (768, 1), 0); del buf19  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg25_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf26, (128, 768), (768, 1), 0), reinterpret_tensor(arg24_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf27)
        del arg24_1
        del arg25_1
        buf28 = reinterpret_tensor(buf11, (128, 768), (768, 1), 0); del buf11  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg27_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf26, (128, 768), (768, 1), 0), reinterpret_tensor(arg26_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf28)
        del arg26_1
        del arg27_1
        buf29 = buf8; del buf8  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg29_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf26, (128, 768), (768, 1), 0), reinterpret_tensor(arg28_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf29)
        del arg28_1
        del arg29_1
        # Topologically Sorted Source Nodes: [attn_output_3], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf31 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf27, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf28, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf29, (2, 12, 64, 64), (49152, 64, 768, 1), 0), buf30, False)
        del buf27
        del buf28
        buf32 = buf31[0]
        del buf31
        buf36 = reinterpret_tensor(buf30, (128, 768), (768, 1), 0); del buf30  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_8], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf32, (128, 768), (768, 1), 0), reinterpret_tensor(arg30_1, (768, 768), (1, 768), 0), out=buf36)
        del arg30_1
        buf40 = reinterpret_tensor(buf36, (2, 64, 768), (49152, 768, 1), 0); del buf36  # reuse
        # Topologically Sorted Source Nodes: [add_5, hidden_states_10], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf40, arg31_1, buf26, arg32_1, arg33_1, 128, 768, grid=grid(128), stream=stream0)
        del arg31_1
        del arg32_1
        del arg33_1
        buf41 = reinterpret_tensor(buf21, (128, 3072), (3072, 1), 0); del buf21  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_11], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf40, (128, 768), (768, 1), 0), reinterpret_tensor(arg34_1, (768, 3072), (1, 768), 0), out=buf41)
        del arg34_1
        buf42 = reinterpret_tensor(buf41, (2, 64, 3072), (196608, 3072, 1), 0); del buf41  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_12], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_4.run(buf42, arg35_1, 393216, grid=grid(393216), stream=stream0)
        del arg35_1
        buf43 = reinterpret_tensor(buf26, (128, 768), (768, 1), 0); del buf26  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_13], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf42, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg36_1, (3072, 768), (1, 3072), 0), out=buf43)
        del arg36_1
        buf47 = reinterpret_tensor(buf43, (2, 64, 768), (49152, 768, 1), 0); del buf43  # reuse
        # Topologically Sorted Source Nodes: [add_6, hidden_states_15], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf47, arg37_1, buf40, arg38_1, arg39_1, 128, 768, grid=grid(128), stream=stream0)
        del arg37_1
        del arg38_1
        del arg39_1
        buf48 = reinterpret_tensor(buf40, (128, 768), (768, 1), 0); del buf40  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg41_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf47, (128, 768), (768, 1), 0), reinterpret_tensor(arg40_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf48)
        del arg40_1
        del arg41_1
        buf49 = reinterpret_tensor(buf32, (128, 768), (768, 1), 0); del buf32  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg43_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf47, (128, 768), (768, 1), 0), reinterpret_tensor(arg42_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf49)
        del arg42_1
        del arg43_1
        buf50 = buf29; del buf29  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg45_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf47, (128, 768), (768, 1), 0), reinterpret_tensor(arg44_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf50)
        del arg44_1
        del arg45_1
        # Topologically Sorted Source Nodes: [attn_output_6], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf52 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf48, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf49, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf50, (2, 12, 64, 64), (49152, 64, 768, 1), 0), buf51, False)
        del buf48
        buf53 = buf52[0]
        del buf52
        buf57 = reinterpret_tensor(buf51, (128, 768), (768, 1), 0); del buf51  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_16], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf53, (128, 768), (768, 1), 0), reinterpret_tensor(arg46_1, (768, 768), (1, 768), 0), out=buf57)
        del arg46_1
        buf61 = reinterpret_tensor(buf57, (2, 64, 768), (49152, 768, 1), 0); del buf57  # reuse
        # Topologically Sorted Source Nodes: [add_7, hidden_states_18], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf61, arg47_1, buf47, arg48_1, arg49_1, 128, 768, grid=grid(128), stream=stream0)
        del arg47_1
        del arg48_1
        del arg49_1
        buf62 = reinterpret_tensor(buf42, (128, 3072), (3072, 1), 0); del buf42  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_19], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf61, (128, 768), (768, 1), 0), reinterpret_tensor(arg50_1, (768, 3072), (1, 768), 0), out=buf62)
        del arg50_1
        buf63 = reinterpret_tensor(buf62, (2, 64, 3072), (196608, 3072, 1), 0); del buf62  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_20], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_4.run(buf63, arg51_1, 393216, grid=grid(393216), stream=stream0)
        del arg51_1
        buf64 = reinterpret_tensor(buf47, (128, 768), (768, 1), 0); del buf47  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_21], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf63, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg52_1, (3072, 768), (1, 3072), 0), out=buf64)
        del arg52_1
        buf68 = reinterpret_tensor(buf64, (2, 64, 768), (49152, 768, 1), 0); del buf64  # reuse
        # Topologically Sorted Source Nodes: [add_8, hidden_states_23], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf68, arg53_1, buf61, arg54_1, arg55_1, 128, 768, grid=grid(128), stream=stream0)
        del arg53_1
        del arg54_1
        del arg55_1
        buf69 = reinterpret_tensor(buf61, (128, 768), (768, 1), 0); del buf61  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg57_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf68, (128, 768), (768, 1), 0), reinterpret_tensor(arg56_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf69)
        del arg56_1
        del arg57_1
        buf70 = reinterpret_tensor(buf53, (128, 768), (768, 1), 0); del buf53  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg59_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf68, (128, 768), (768, 1), 0), reinterpret_tensor(arg58_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf70)
        del arg58_1
        del arg59_1
        buf71 = buf50; del buf50  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg61_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf68, (128, 768), (768, 1), 0), reinterpret_tensor(arg60_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf71)
        del arg60_1
        del arg61_1
        # Topologically Sorted Source Nodes: [attn_output_9], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf73 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf69, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf70, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf71, (2, 12, 64, 64), (49152, 64, 768, 1), 0), buf72, False)
        buf74 = buf73[0]
        del buf73
        buf78 = reinterpret_tensor(buf72, (128, 768), (768, 1), 0); del buf72  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_24], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf74, (128, 768), (768, 1), 0), reinterpret_tensor(arg62_1, (768, 768), (1, 768), 0), out=buf78)
        del arg62_1
        buf82 = reinterpret_tensor(buf78, (2, 64, 768), (49152, 768, 1), 0); del buf78  # reuse
        # Topologically Sorted Source Nodes: [add_9, hidden_states_26], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf82, arg63_1, buf68, arg64_1, arg65_1, 128, 768, grid=grid(128), stream=stream0)
        del arg63_1
        del arg64_1
        del arg65_1
        buf83 = reinterpret_tensor(buf63, (128, 3072), (3072, 1), 0); del buf63  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_27], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf82, (128, 768), (768, 1), 0), reinterpret_tensor(arg66_1, (768, 3072), (1, 768), 0), out=buf83)
        del arg66_1
        buf84 = reinterpret_tensor(buf83, (2, 64, 3072), (196608, 3072, 1), 0); del buf83  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_28], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_4.run(buf84, arg67_1, 393216, grid=grid(393216), stream=stream0)
        del arg67_1
        buf85 = reinterpret_tensor(buf68, (128, 768), (768, 1), 0); del buf68  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_29], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf84, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg68_1, (3072, 768), (1, 3072), 0), out=buf85)
        del arg68_1
        buf89 = reinterpret_tensor(buf85, (2, 64, 768), (49152, 768, 1), 0); del buf85  # reuse
        # Topologically Sorted Source Nodes: [add_10, hidden_states_31], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf89, arg69_1, buf82, arg70_1, arg71_1, 128, 768, grid=grid(128), stream=stream0)
        del arg69_1
        del arg70_1
        del arg71_1
        buf90 = reinterpret_tensor(buf82, (128, 768), (768, 1), 0); del buf82  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg73_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf89, (128, 768), (768, 1), 0), reinterpret_tensor(arg72_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf90)
        del arg72_1
        del arg73_1
        buf91 = reinterpret_tensor(buf74, (128, 768), (768, 1), 0); del buf74  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg75_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf89, (128, 768), (768, 1), 0), reinterpret_tensor(arg74_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf91)
        del arg74_1
        del arg75_1
        buf92 = buf71; del buf71  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg77_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf89, (128, 768), (768, 1), 0), reinterpret_tensor(arg76_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf92)
        del arg76_1
        del arg77_1
        # Topologically Sorted Source Nodes: [attn_output_12], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf94 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf90, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf91, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf92, (2, 12, 64, 64), (49152, 64, 768, 1), 0), buf93, False)
        buf95 = buf94[0]
        del buf94
        buf99 = reinterpret_tensor(buf93, (128, 768), (768, 1), 0); del buf93  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_32], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf95, (128, 768), (768, 1), 0), reinterpret_tensor(arg78_1, (768, 768), (1, 768), 0), out=buf99)
        del arg78_1
        buf103 = reinterpret_tensor(buf99, (2, 64, 768), (49152, 768, 1), 0); del buf99  # reuse
        # Topologically Sorted Source Nodes: [add_11, hidden_states_34], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf103, arg79_1, buf89, arg80_1, arg81_1, 128, 768, grid=grid(128), stream=stream0)
        del arg79_1
        del arg80_1
        del arg81_1
        buf104 = reinterpret_tensor(buf84, (128, 3072), (3072, 1), 0); del buf84  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_35], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf103, (128, 768), (768, 1), 0), reinterpret_tensor(arg82_1, (768, 3072), (1, 768), 0), out=buf104)
        del arg82_1
        buf105 = reinterpret_tensor(buf104, (2, 64, 3072), (196608, 3072, 1), 0); del buf104  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_36], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_4.run(buf105, arg83_1, 393216, grid=grid(393216), stream=stream0)
        del arg83_1
        buf106 = reinterpret_tensor(buf89, (128, 768), (768, 1), 0); del buf89  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_37], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf105, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg84_1, (3072, 768), (1, 3072), 0), out=buf106)
        del arg84_1
        buf110 = reinterpret_tensor(buf106, (2, 64, 768), (49152, 768, 1), 0); del buf106  # reuse
        # Topologically Sorted Source Nodes: [add_12, hidden_states_39], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf110, arg85_1, buf103, arg86_1, arg87_1, 128, 768, grid=grid(128), stream=stream0)
        del arg85_1
        del arg86_1
        del arg87_1
        buf111 = reinterpret_tensor(buf103, (128, 768), (768, 1), 0); del buf103  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg89_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf110, (128, 768), (768, 1), 0), reinterpret_tensor(arg88_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf111)
        del arg88_1
        del arg89_1
        buf112 = reinterpret_tensor(buf95, (128, 768), (768, 1), 0); del buf95  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg91_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf110, (128, 768), (768, 1), 0), reinterpret_tensor(arg90_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf112)
        del arg90_1
        del arg91_1
        buf113 = buf92; del buf92  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg93_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf110, (128, 768), (768, 1), 0), reinterpret_tensor(arg92_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf113)
        del arg92_1
        del arg93_1
        buf114 = reinterpret_tensor(buf91, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf91  # reuse
        buf135 = reinterpret_tensor(buf90, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf90  # reuse
        buf156 = reinterpret_tensor(buf70, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf70  # reuse
        buf177 = reinterpret_tensor(buf69, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf69  # reuse
        buf198 = reinterpret_tensor(buf49, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf49  # reuse
        # Topologically Sorted Source Nodes: [attn_output_15, attn_output_18, attn_output_21, attn_output_24, attn_output_27], Original ATen: [aten._scaled_dot_product_efficient_attention]
        stream0 = get_raw_stream(0)
        triton_poi_fused__scaled_dot_product_efficient_attention_2.run(arg7_1, buf114, buf135, buf156, buf177, buf198, 98304, grid=grid(98304), stream=stream0)
        # Topologically Sorted Source Nodes: [attn_output_15], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf115 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf111, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf112, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf113, (2, 12, 64, 64), (49152, 64, 768, 1), 0), buf114, False)
        del buf111
        del buf112
        buf116 = buf115[0]
        del buf115
        buf120 = reinterpret_tensor(buf114, (128, 768), (768, 1), 0); del buf114  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_40], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf116, (128, 768), (768, 1), 0), reinterpret_tensor(arg94_1, (768, 768), (1, 768), 0), out=buf120)
        del arg94_1
        buf124 = reinterpret_tensor(buf120, (2, 64, 768), (49152, 768, 1), 0); del buf120  # reuse
        # Topologically Sorted Source Nodes: [add_13, hidden_states_42], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf124, arg95_1, buf110, arg96_1, arg97_1, 128, 768, grid=grid(128), stream=stream0)
        del arg95_1
        del arg96_1
        del arg97_1
        buf125 = reinterpret_tensor(buf105, (128, 3072), (3072, 1), 0); del buf105  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_43], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf124, (128, 768), (768, 1), 0), reinterpret_tensor(arg98_1, (768, 3072), (1, 768), 0), out=buf125)
        del arg98_1
        buf126 = reinterpret_tensor(buf125, (2, 64, 3072), (196608, 3072, 1), 0); del buf125  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_44], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_4.run(buf126, arg99_1, 393216, grid=grid(393216), stream=stream0)
        del arg99_1
        buf127 = reinterpret_tensor(buf110, (128, 768), (768, 1), 0); del buf110  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_45], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf126, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg100_1, (3072, 768), (1, 3072), 0), out=buf127)
        del arg100_1
        buf131 = reinterpret_tensor(buf127, (2, 64, 768), (49152, 768, 1), 0); del buf127  # reuse
        # Topologically Sorted Source Nodes: [add_14, hidden_states_47], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf131, arg101_1, buf124, arg102_1, arg103_1, 128, 768, grid=grid(128), stream=stream0)
        del arg101_1
        del arg102_1
        del arg103_1
        buf132 = reinterpret_tensor(buf124, (128, 768), (768, 1), 0); del buf124  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg105_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf131, (128, 768), (768, 1), 0), reinterpret_tensor(arg104_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf132)
        del arg104_1
        del arg105_1
        buf133 = reinterpret_tensor(buf116, (128, 768), (768, 1), 0); del buf116  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg107_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf131, (128, 768), (768, 1), 0), reinterpret_tensor(arg106_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf133)
        del arg106_1
        del arg107_1
        buf134 = buf113; del buf113  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg109_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf131, (128, 768), (768, 1), 0), reinterpret_tensor(arg108_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf134)
        del arg108_1
        del arg109_1
        # Topologically Sorted Source Nodes: [attn_output_18], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf136 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf132, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf133, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf134, (2, 12, 64, 64), (49152, 64, 768, 1), 0), buf135, False)
        del buf132
        del buf133
        buf137 = buf136[0]
        del buf136
        buf141 = reinterpret_tensor(buf135, (128, 768), (768, 1), 0); del buf135  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_48], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf137, (128, 768), (768, 1), 0), reinterpret_tensor(arg110_1, (768, 768), (1, 768), 0), out=buf141)
        del arg110_1
        buf145 = reinterpret_tensor(buf141, (2, 64, 768), (49152, 768, 1), 0); del buf141  # reuse
        # Topologically Sorted Source Nodes: [add_15, hidden_states_50], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf145, arg111_1, buf131, arg112_1, arg113_1, 128, 768, grid=grid(128), stream=stream0)
        del arg111_1
        del arg112_1
        del arg113_1
        buf146 = reinterpret_tensor(buf126, (128, 3072), (3072, 1), 0); del buf126  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_51], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf145, (128, 768), (768, 1), 0), reinterpret_tensor(arg114_1, (768, 3072), (1, 768), 0), out=buf146)
        del arg114_1
        buf147 = reinterpret_tensor(buf146, (2, 64, 3072), (196608, 3072, 1), 0); del buf146  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_52], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_4.run(buf147, arg115_1, 393216, grid=grid(393216), stream=stream0)
        del arg115_1
        buf148 = reinterpret_tensor(buf131, (128, 768), (768, 1), 0); del buf131  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_53], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf147, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg116_1, (3072, 768), (1, 3072), 0), out=buf148)
        del arg116_1
        buf152 = reinterpret_tensor(buf148, (2, 64, 768), (49152, 768, 1), 0); del buf148  # reuse
        # Topologically Sorted Source Nodes: [add_16, hidden_states_55], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf152, arg117_1, buf145, arg118_1, arg119_1, 128, 768, grid=grid(128), stream=stream0)
        del arg117_1
        del arg118_1
        del arg119_1
        buf153 = reinterpret_tensor(buf145, (128, 768), (768, 1), 0); del buf145  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg121_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf152, (128, 768), (768, 1), 0), reinterpret_tensor(arg120_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf153)
        del arg120_1
        del arg121_1
        buf154 = reinterpret_tensor(buf137, (128, 768), (768, 1), 0); del buf137  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg123_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf152, (128, 768), (768, 1), 0), reinterpret_tensor(arg122_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf154)
        del arg122_1
        del arg123_1
        buf155 = buf134; del buf134  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg125_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf152, (128, 768), (768, 1), 0), reinterpret_tensor(arg124_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf155)
        del arg124_1
        del arg125_1
        # Topologically Sorted Source Nodes: [attn_output_21], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf157 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf153, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf154, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf155, (2, 12, 64, 64), (49152, 64, 768, 1), 0), buf156, False)
        del buf153
        del buf154
        buf158 = buf157[0]
        del buf157
        buf162 = reinterpret_tensor(buf156, (128, 768), (768, 1), 0); del buf156  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_56], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf158, (128, 768), (768, 1), 0), reinterpret_tensor(arg126_1, (768, 768), (1, 768), 0), out=buf162)
        del arg126_1
        buf166 = reinterpret_tensor(buf162, (2, 64, 768), (49152, 768, 1), 0); del buf162  # reuse
        # Topologically Sorted Source Nodes: [add_17, hidden_states_58], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf166, arg127_1, buf152, arg128_1, arg129_1, 128, 768, grid=grid(128), stream=stream0)
        del arg127_1
        del arg128_1
        del arg129_1
        buf167 = reinterpret_tensor(buf147, (128, 3072), (3072, 1), 0); del buf147  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_59], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf166, (128, 768), (768, 1), 0), reinterpret_tensor(arg130_1, (768, 3072), (1, 768), 0), out=buf167)
        del arg130_1
        buf168 = reinterpret_tensor(buf167, (2, 64, 3072), (196608, 3072, 1), 0); del buf167  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_60], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_4.run(buf168, arg131_1, 393216, grid=grid(393216), stream=stream0)
        del arg131_1
        buf169 = reinterpret_tensor(buf152, (128, 768), (768, 1), 0); del buf152  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_61], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf168, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg132_1, (3072, 768), (1, 3072), 0), out=buf169)
        del arg132_1
        buf173 = reinterpret_tensor(buf169, (2, 64, 768), (49152, 768, 1), 0); del buf169  # reuse
        # Topologically Sorted Source Nodes: [add_18, hidden_states_63], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf173, arg133_1, buf166, arg134_1, arg135_1, 128, 768, grid=grid(128), stream=stream0)
        del arg133_1
        del arg134_1
        del arg135_1
        buf174 = reinterpret_tensor(buf166, (128, 768), (768, 1), 0); del buf166  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg137_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf173, (128, 768), (768, 1), 0), reinterpret_tensor(arg136_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf174)
        del arg136_1
        del arg137_1
        buf175 = reinterpret_tensor(buf158, (128, 768), (768, 1), 0); del buf158  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg139_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf173, (128, 768), (768, 1), 0), reinterpret_tensor(arg138_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf175)
        del arg138_1
        del arg139_1
        buf176 = buf155; del buf155  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg141_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf173, (128, 768), (768, 1), 0), reinterpret_tensor(arg140_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf176)
        del arg140_1
        del arg141_1
        # Topologically Sorted Source Nodes: [attn_output_24], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf178 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf174, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf175, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf176, (2, 12, 64, 64), (49152, 64, 768, 1), 0), buf177, False)
        del buf174
        del buf175
        buf179 = buf178[0]
        del buf178
        buf183 = reinterpret_tensor(buf177, (128, 768), (768, 1), 0); del buf177  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_64], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf179, (128, 768), (768, 1), 0), reinterpret_tensor(arg142_1, (768, 768), (1, 768), 0), out=buf183)
        del arg142_1
        buf187 = reinterpret_tensor(buf183, (2, 64, 768), (49152, 768, 1), 0); del buf183  # reuse
        # Topologically Sorted Source Nodes: [add_19, hidden_states_66], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf187, arg143_1, buf173, arg144_1, arg145_1, 128, 768, grid=grid(128), stream=stream0)
        del arg143_1
        del arg144_1
        del arg145_1
        buf188 = reinterpret_tensor(buf168, (128, 3072), (3072, 1), 0); del buf168  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_67], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf187, (128, 768), (768, 1), 0), reinterpret_tensor(arg146_1, (768, 3072), (1, 768), 0), out=buf188)
        del arg146_1
        buf189 = reinterpret_tensor(buf188, (2, 64, 3072), (196608, 3072, 1), 0); del buf188  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_68], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_4.run(buf189, arg147_1, 393216, grid=grid(393216), stream=stream0)
        del arg147_1
        buf190 = reinterpret_tensor(buf173, (128, 768), (768, 1), 0); del buf173  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_69], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf189, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg148_1, (3072, 768), (1, 3072), 0), out=buf190)
        del arg148_1
        buf194 = reinterpret_tensor(buf190, (2, 64, 768), (49152, 768, 1), 0); del buf190  # reuse
        # Topologically Sorted Source Nodes: [add_20, hidden_states_71], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf194, arg149_1, buf187, arg150_1, arg151_1, 128, 768, grid=grid(128), stream=stream0)
        del arg149_1
        del arg150_1
        del arg151_1
        buf195 = reinterpret_tensor(buf187, (128, 768), (768, 1), 0); del buf187  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg153_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf194, (128, 768), (768, 1), 0), reinterpret_tensor(arg152_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf195)
        del arg152_1
        del arg153_1
        buf196 = reinterpret_tensor(buf179, (128, 768), (768, 1), 0); del buf179  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg155_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf194, (128, 768), (768, 1), 0), reinterpret_tensor(arg154_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf196)
        del arg154_1
        del arg155_1
        buf197 = buf176; del buf176  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg157_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf194, (128, 768), (768, 1), 0), reinterpret_tensor(arg156_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf197)
        del arg156_1
        del arg157_1
        # Topologically Sorted Source Nodes: [attn_output_27], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf199 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf195, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf196, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf197, (2, 12, 64, 64), (49152, 64, 768, 1), 0), buf198, False)
        buf200 = buf199[0]
        del buf199
        buf204 = reinterpret_tensor(buf198, (128, 768), (768, 1), 0); del buf198  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_72], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf200, (128, 768), (768, 1), 0), reinterpret_tensor(arg158_1, (768, 768), (1, 768), 0), out=buf204)
        del arg158_1
        buf208 = reinterpret_tensor(buf204, (2, 64, 768), (49152, 768, 1), 0); del buf204  # reuse
        # Topologically Sorted Source Nodes: [add_21, hidden_states_74], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf208, arg159_1, buf194, arg160_1, arg161_1, 128, 768, grid=grid(128), stream=stream0)
        del arg159_1
        del arg160_1
        del arg161_1
        buf209 = reinterpret_tensor(buf189, (128, 3072), (3072, 1), 0); del buf189  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_75], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf208, (128, 768), (768, 1), 0), reinterpret_tensor(arg162_1, (768, 3072), (1, 768), 0), out=buf209)
        del arg162_1
        buf210 = reinterpret_tensor(buf209, (2, 64, 3072), (196608, 3072, 1), 0); del buf209  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_76], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_4.run(buf210, arg163_1, 393216, grid=grid(393216), stream=stream0)
        del arg163_1
        buf211 = reinterpret_tensor(buf194, (128, 768), (768, 1), 0); del buf194  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_77], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf210, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg164_1, (3072, 768), (1, 3072), 0), out=buf211)
        del arg164_1
        buf215 = reinterpret_tensor(buf211, (2, 64, 768), (49152, 768, 1), 0); del buf211  # reuse
        # Topologically Sorted Source Nodes: [add_22, hidden_states_79], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf215, arg165_1, buf208, arg166_1, arg167_1, 128, 768, grid=grid(128), stream=stream0)
        del arg165_1
        del arg166_1
        del arg167_1
        buf216 = reinterpret_tensor(buf208, (128, 768), (768, 1), 0); del buf208  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg169_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf215, (128, 768), (768, 1), 0), reinterpret_tensor(arg168_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf216)
        del arg168_1
        del arg169_1
        buf217 = reinterpret_tensor(buf200, (128, 768), (768, 1), 0); del buf200  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg171_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf215, (128, 768), (768, 1), 0), reinterpret_tensor(arg170_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf217)
        del arg170_1
        del arg171_1
        buf218 = buf197; del buf197  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg173_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf215, (128, 768), (768, 1), 0), reinterpret_tensor(arg172_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf218)
        del arg172_1
        del arg173_1
        buf219 = reinterpret_tensor(buf196, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf196  # reuse
        buf240 = reinterpret_tensor(buf195, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf195  # reuse
        # Topologically Sorted Source Nodes: [attn_output_30, attn_output_33], Original ATen: [aten._scaled_dot_product_efficient_attention]
        stream0 = get_raw_stream(0)
        triton_poi_fused__scaled_dot_product_efficient_attention_5.run(arg7_1, buf219, buf240, 98304, grid=grid(98304), stream=stream0)
        del arg7_1
        # Topologically Sorted Source Nodes: [attn_output_30], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf220 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf216, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf217, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf218, (2, 12, 64, 64), (49152, 64, 768, 1), 0), buf219, False)
        del buf216
        del buf217
        buf221 = buf220[0]
        del buf220
        buf225 = reinterpret_tensor(buf219, (128, 768), (768, 1), 0); del buf219  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_80], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf221, (128, 768), (768, 1), 0), reinterpret_tensor(arg174_1, (768, 768), (1, 768), 0), out=buf225)
        del arg174_1
        buf229 = reinterpret_tensor(buf225, (2, 64, 768), (49152, 768, 1), 0); del buf225  # reuse
        # Topologically Sorted Source Nodes: [add_23, hidden_states_82], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf229, arg175_1, buf215, arg176_1, arg177_1, 128, 768, grid=grid(128), stream=stream0)
        del arg175_1
        del arg176_1
        del arg177_1
        buf230 = reinterpret_tensor(buf210, (128, 3072), (3072, 1), 0); del buf210  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_83], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf229, (128, 768), (768, 1), 0), reinterpret_tensor(arg178_1, (768, 3072), (1, 768), 0), out=buf230)
        del arg178_1
        buf231 = reinterpret_tensor(buf230, (2, 64, 3072), (196608, 3072, 1), 0); del buf230  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_84], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_4.run(buf231, arg179_1, 393216, grid=grid(393216), stream=stream0)
        del arg179_1
        buf232 = reinterpret_tensor(buf215, (128, 768), (768, 1), 0); del buf215  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_85], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf231, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg180_1, (3072, 768), (1, 3072), 0), out=buf232)
        del arg180_1
        buf236 = reinterpret_tensor(buf232, (2, 64, 768), (49152, 768, 1), 0); del buf232  # reuse
        # Topologically Sorted Source Nodes: [add_24, hidden_states_87], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf236, arg181_1, buf229, arg182_1, arg183_1, 128, 768, grid=grid(128), stream=stream0)
        del arg181_1
        del arg182_1
        del arg183_1
        buf237 = reinterpret_tensor(buf229, (128, 768), (768, 1), 0); del buf229  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg185_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf236, (128, 768), (768, 1), 0), reinterpret_tensor(arg184_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf237)
        del arg184_1
        del arg185_1
        buf238 = reinterpret_tensor(buf221, (128, 768), (768, 1), 0); del buf221  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg187_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf236, (128, 768), (768, 1), 0), reinterpret_tensor(arg186_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf238)
        del arg186_1
        del arg187_1
        buf239 = buf218; del buf218  # reuse
        # Unsorted Source Nodes: [], Original ATen: []
        extern_kernels.bias_addmm(reinterpret_tensor(arg189_1, (128, 768), (0, 1), 0), reinterpret_tensor(buf236, (128, 768), (768, 1), 0), reinterpret_tensor(arg188_1, (768, 768), (1, 768), 0), alpha=1, beta=1, out=buf239)
        del arg188_1
        del arg189_1
        # Topologically Sorted Source Nodes: [attn_output_33], Original ATen: [aten._scaled_dot_product_efficient_attention]
        buf241 = torch.ops.aten._scaled_dot_product_efficient_attention.default(reinterpret_tensor(buf237, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf238, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf239, (2, 12, 64, 64), (49152, 64, 768, 1), 0), buf240, False)
        del buf237
        del buf238
        del buf239
        buf242 = buf241[0]
        del buf241
        buf246 = reinterpret_tensor(buf240, (128, 768), (768, 1), 0); del buf240  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_88], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf242, (128, 768), (768, 1), 0), reinterpret_tensor(arg190_1, (768, 768), (1, 768), 0), out=buf246)
        del arg190_1
        del buf242
        buf250 = reinterpret_tensor(buf246, (2, 64, 768), (49152, 768, 1), 0); del buf246  # reuse
        # Topologically Sorted Source Nodes: [add_25, hidden_states_90], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf250, arg191_1, buf236, arg192_1, arg193_1, 128, 768, grid=grid(128), stream=stream0)
        del arg191_1
        del arg192_1
        del arg193_1
        buf251 = reinterpret_tensor(buf231, (128, 3072), (3072, 1), 0); del buf231  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_91], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf250, (128, 768), (768, 1), 0), reinterpret_tensor(arg194_1, (768, 3072), (1, 768), 0), out=buf251)
        del arg194_1
        buf252 = reinterpret_tensor(buf251, (2, 64, 3072), (196608, 3072, 1), 0); del buf251  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_92], Original ATen: [aten.gelu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_gelu_4.run(buf252, arg195_1, 393216, grid=grid(393216), stream=stream0)
        del arg195_1
        buf253 = reinterpret_tensor(buf236, (128, 768), (768, 1), 0); del buf236  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_93], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf252, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg196_1, (3072, 768), (1, 3072), 0), out=buf253)
        del arg196_1
        del buf252
        buf257 = reinterpret_tensor(buf253, (2, 64, 768), (49152, 768, 1), 0); del buf253  # reuse
        # Topologically Sorted Source Nodes: [add_26, hidden_states_95], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_3.run(buf257, arg197_1, buf250, arg198_1, arg199_1, 128, 768, grid=grid(128), stream=stream0)
        del arg197_1
        del arg198_1
        del arg199_1
        del buf250
    return (buf257, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((2, 64), (64, 1), device='cuda:0', dtype=torch.int64)
    arg1_1 = rand_strided((1, 514), (514, 1), device='cuda:0', dtype=torch.int64)
    arg2_1 = rand_strided((50265, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg3_1 = rand_strided((1, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg4_1 = rand_strided((514, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg5_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg6_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg7_1 = rand_strided((2, 64), (64, 1), device='cuda:0', dtype=torch.int64)
    arg8_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg9_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg10_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg11_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg12_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg13_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg14_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg15_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg16_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg17_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg18_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg19_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg20_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg21_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg22_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg23_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg24_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg25_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg26_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg27_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg28_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg29_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg30_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg31_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg32_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg33_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg34_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg35_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg36_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg37_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg38_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg39_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg40_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg41_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg42_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg43_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg44_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg45_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg46_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg47_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg48_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg49_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg50_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg51_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg52_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg53_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg54_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg55_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg56_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg57_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg58_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg59_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg60_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg61_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg62_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg63_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg64_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg65_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg66_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg67_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg68_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg69_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg70_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg71_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg72_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg73_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg74_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg75_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg76_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg77_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg78_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg79_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg80_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg81_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg82_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg83_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg84_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg85_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg86_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg87_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg88_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg89_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg90_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg91_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg92_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg93_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg94_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg95_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg96_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg97_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg98_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg99_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg100_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg101_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg102_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg103_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg104_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg105_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg106_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg107_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg108_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg109_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg110_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg111_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg112_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg113_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg114_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg115_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg116_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg117_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg118_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg119_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg120_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg121_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg122_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg123_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg124_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg125_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg126_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg127_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg128_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg129_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg130_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg131_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg132_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg133_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg134_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg135_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg136_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg137_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg138_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg139_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg140_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg141_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg142_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg143_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg144_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg145_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg146_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg147_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg148_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg149_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg150_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg151_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg152_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg153_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg154_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg155_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg156_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg157_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg158_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg159_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg160_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg161_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg162_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg163_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg164_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg165_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg166_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg167_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg168_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg169_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg170_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg171_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg172_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg173_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg174_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg175_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg176_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg177_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg178_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg179_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg180_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg181_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg182_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg183_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg184_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg185_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg186_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg187_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg188_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg189_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg190_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg191_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg192_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg193_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg194_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg195_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg196_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg197_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg198_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg199_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    fn = lambda: call([arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1, arg7_1, arg8_1, arg9_1, arg10_1, arg11_1, arg12_1, arg13_1, arg14_1, arg15_1, arg16_1, arg17_1, arg18_1, arg19_1, arg20_1, arg21_1, arg22_1, arg23_1, arg24_1, arg25_1, arg26_1, arg27_1, arg28_1, arg29_1, arg30_1, arg31_1, arg32_1, arg33_1, arg34_1, arg35_1, arg36_1, arg37_1, arg38_1, arg39_1, arg40_1, arg41_1, arg42_1, arg43_1, arg44_1, arg45_1, arg46_1, arg47_1, arg48_1, arg49_1, arg50_1, arg51_1, arg52_1, arg53_1, arg54_1, arg55_1, arg56_1, arg57_1, arg58_1, arg59_1, arg60_1, arg61_1, arg62_1, arg63_1, arg64_1, arg65_1, arg66_1, arg67_1, arg68_1, arg69_1, arg70_1, arg71_1, arg72_1, arg73_1, arg74_1, arg75_1, arg76_1, arg77_1, arg78_1, arg79_1, arg80_1, arg81_1, arg82_1, arg83_1, arg84_1, arg85_1, arg86_1, arg87_1, arg88_1, arg89_1, arg90_1, arg91_1, arg92_1, arg93_1, arg94_1, arg95_1, arg96_1, arg97_1, arg98_1, arg99_1, arg100_1, arg101_1, arg102_1, arg103_1, arg104_1, arg105_1, arg106_1, arg107_1, arg108_1, arg109_1, arg110_1, arg111_1, arg112_1, arg113_1, arg114_1, arg115_1, arg116_1, arg117_1, arg118_1, arg119_1, arg120_1, arg121_1, arg122_1, arg123_1, arg124_1, arg125_1, arg126_1, arg127_1, arg128_1, arg129_1, arg130_1, arg131_1, arg132_1, arg133_1, arg134_1, arg135_1, arg136_1, arg137_1, arg138_1, arg139_1, arg140_1, arg141_1, arg142_1, arg143_1, arg144_1, arg145_1, arg146_1, arg147_1, arg148_1, arg149_1, arg150_1, arg151_1, arg152_1, arg153_1, arg154_1, arg155_1, arg156_1, arg157_1, arg158_1, arg159_1, arg160_1, arg161_1, arg162_1, arg163_1, arg164_1, arg165_1, arg166_1, arg167_1, arg168_1, arg169_1, arg170_1, arg171_1, arg172_1, arg173_1, arg174_1, arg175_1, arg176_1, arg177_1, arg178_1, arg179_1, arg180_1, arg181_1, arg182_1, arg183_1, arg184_1, arg185_1, arg186_1, arg187_1, arg188_1, arg189_1, arg190_1, arg191_1, arg192_1, arg193_1, arg194_1, arg195_1, arg196_1, arg197_1, arg198_1, arg199_1])
    return print_performance(fn, times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('None', benchmark_compiled_module)
