

# ===== run_2025_10_19_03_43_12_574129-pid_19/torchinductor/model__0_inference_0.0/fx_graph_readable.py =====
class <lambda>(torch.nn.Module):
    def forward(self, arg0_1: "i64[2, 64]", arg1_1: "f32[50257, 768]", arg2_1: "i64[2, 64]", arg3_1: "f32[2048, 768]", arg4_1: "f32[768]", arg5_1: "f32[768]", arg6_1: "f32[768, 768]", arg7_1: "f32[768, 768]", arg8_1: "f32[768, 768]", arg9_1: "b8[1, 1, 2048, 2048]", arg10_1: "f32[768, 768]", arg11_1: "f32[768]", arg12_1: "f32[768]", arg13_1: "f32[768]", arg14_1: "f32[3072, 768]", arg15_1: "f32[3072]", arg16_1: "f32[768, 3072]", arg17_1: "f32[768]", arg18_1: "f32[768]", arg19_1: "f32[768]", arg20_1: "f32[768, 768]", arg21_1: "f32[768, 768]", arg22_1: "f32[768, 768]", arg23_1: "b8[1, 1, 2048, 2048]", arg24_1: "f32[768, 768]", arg25_1: "f32[768]", arg26_1: "f32[768]", arg27_1: "f32[768]", arg28_1: "f32[3072, 768]", arg29_1: "f32[3072]", arg30_1: "f32[768, 3072]", arg31_1: "f32[768]", arg32_1: "f32[768]", arg33_1: "f32[768]", arg34_1: "f32[768, 768]", arg35_1: "f32[768, 768]", arg36_1: "f32[768, 768]", arg37_1: "b8[1, 1, 2048, 2048]", arg38_1: "f32[768, 768]", arg39_1: "f32[768]", arg40_1: "f32[768]", arg41_1: "f32[768]", arg42_1: "f32[3072, 768]", arg43_1: "f32[3072]", arg44_1: "f32[768, 3072]", arg45_1: "f32[768]", arg46_1: "f32[768]", arg47_1: "f32[768]", arg48_1: "f32[768, 768]", arg49_1: "f32[768, 768]", arg50_1: "f32[768, 768]", arg51_1: "b8[1, 1, 2048, 2048]", arg52_1: "f32[768, 768]", arg53_1: "f32[768]", arg54_1: "f32[768]", arg55_1: "f32[768]", arg56_1: "f32[3072, 768]", arg57_1: "f32[3072]", arg58_1: "f32[768, 3072]", arg59_1: "f32[768]", arg60_1: "f32[768]", arg61_1: "f32[768]", arg62_1: "f32[768, 768]", arg63_1: "f32[768, 768]", arg64_1: "f32[768, 768]", arg65_1: "b8[1, 1, 2048, 2048]", arg66_1: "f32[768, 768]", arg67_1: "f32[768]", arg68_1: "f32[768]", arg69_1: "f32[768]", arg70_1: "f32[3072, 768]", arg71_1: "f32[3072]", arg72_1: "f32[768, 3072]", arg73_1: "f32[768]", arg74_1: "f32[768]", arg75_1: "f32[768]", arg76_1: "f32[768, 768]", arg77_1: "f32[768, 768]", arg78_1: "f32[768, 768]", arg79_1: "b8[1, 1, 2048, 2048]", arg80_1: "f32[768, 768]", arg81_1: "f32[768]", arg82_1: "f32[768]", arg83_1: "f32[768]", arg84_1: "f32[3072, 768]", arg85_1: "f32[3072]", arg86_1: "f32[768, 3072]", arg87_1: "f32[768]", arg88_1: "f32[768]", arg89_1: "f32[768]", arg90_1: "f32[768, 768]", arg91_1: "f32[768, 768]", arg92_1: "f32[768, 768]", arg93_1: "b8[1, 1, 2048, 2048]", arg94_1: "f32[768, 768]", arg95_1: "f32[768]", arg96_1: "f32[768]", arg97_1: "f32[768]", arg98_1: "f32[3072, 768]", arg99_1: "f32[3072]", arg100_1: "f32[768, 3072]", arg101_1: "f32[768]", arg102_1: "f32[768]", arg103_1: "f32[768]", arg104_1: "f32[768, 768]", arg105_1: "f32[768, 768]", arg106_1: "f32[768, 768]", arg107_1: "b8[1, 1, 2048, 2048]", arg108_1: "f32[768, 768]", arg109_1: "f32[768]", arg110_1: "f32[768]", arg111_1: "f32[768]", arg112_1: "f32[3072, 768]", arg113_1: "f32[3072]", arg114_1: "f32[768, 3072]", arg115_1: "f32[768]", arg116_1: "f32[768]", arg117_1: "f32[768]", arg118_1: "f32[768, 768]", arg119_1: "f32[768, 768]", arg120_1: "f32[768, 768]", arg121_1: "b8[1, 1, 2048, 2048]", arg122_1: "f32[768, 768]", arg123_1: "f32[768]", arg124_1: "f32[768]", arg125_1: "f32[768]", arg126_1: "f32[3072, 768]", arg127_1: "f32[3072]", arg128_1: "f32[768, 3072]", arg129_1: "f32[768]", arg130_1: "f32[768]", arg131_1: "f32[768]", arg132_1: "f32[768, 768]", arg133_1: "f32[768, 768]", arg134_1: "f32[768, 768]", arg135_1: "b8[1, 1, 2048, 2048]", arg136_1: "f32[768, 768]", arg137_1: "f32[768]", arg138_1: "f32[768]", arg139_1: "f32[768]", arg140_1: "f32[3072, 768]", arg141_1: "f32[3072]", arg142_1: "f32[768, 3072]", arg143_1: "f32[768]", arg144_1: "f32[768]", arg145_1: "f32[768]", arg146_1: "f32[768, 768]", arg147_1: "f32[768, 768]", arg148_1: "f32[768, 768]", arg149_1: "b8[1, 1, 2048, 2048]", arg150_1: "f32[768, 768]", arg151_1: "f32[768]", arg152_1: "f32[768]", arg153_1: "f32[768]", arg154_1: "f32[3072, 768]", arg155_1: "f32[3072]", arg156_1: "f32[768, 3072]", arg157_1: "f32[768]", arg158_1: "f32[768]", arg159_1: "f32[768]", arg160_1: "f32[768, 768]", arg161_1: "f32[768, 768]", arg162_1: "f32[768, 768]", arg163_1: "b8[1, 1, 2048, 2048]", arg164_1: "f32[768, 768]", arg165_1: "f32[768]", arg166_1: "f32[768]", arg167_1: "f32[768]", arg168_1: "f32[3072, 768]", arg169_1: "f32[3072]", arg170_1: "f32[768, 3072]", arg171_1: "f32[768]", arg172_1: "f32[768]", arg173_1: "f32[768]"):
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:588 in forward, code: inputs_embeds = self.wte(input_ids)
        embedding: "f32[2, 64, 768]" = torch.ops.aten.embedding.default(arg1_1, arg0_1);  arg1_1 = arg0_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:607 in forward, code: cache_position = torch.arange(past_seen_tokens, past_seen_tokens + seq_length, device=inputs_embeds.device)
        iota: "i64[64]" = torch.ops.prims.iota.default(64, start = 0, step = 1, dtype = torch.int64, device = device(type='cuda', index=0), requires_grad = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:610 in forward, code: position_ids = cache_position.unsqueeze(0)
        unsqueeze: "i64[1, 64]" = torch.ops.aten.unsqueeze.default(iota, 0)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:784 in _prepare_4d_causal_attention_mask_with_cache_position, code: causal_mask = torch.full(
        full_default: "f32[64, 64]" = torch.ops.aten.full.default([64, 64], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:788 in _prepare_4d_causal_attention_mask_with_cache_position, code: causal_mask = torch.triu(causal_mask, diagonal=1)
        iota_1: "i64[64]" = torch.ops.prims.iota.default(64, start = 0, step = 1, dtype = torch.int64, device = device(type='cuda', index=0), requires_grad = False)
        unsqueeze_1: "i64[1, 64]" = torch.ops.aten.unsqueeze.default(iota_1, -2);  iota_1 = None
        iota_2: "i64[64]" = torch.ops.prims.iota.default(64, start = 0, step = 1, dtype = torch.int64, device = device(type='cuda', index=0), requires_grad = False)
        unsqueeze_2: "i64[64, 1]" = torch.ops.aten.unsqueeze.default(iota_2, -1);  iota_2 = None
        sub: "i64[64, 64]" = torch.ops.aten.sub.Tensor(unsqueeze_1, unsqueeze_2);  unsqueeze_1 = unsqueeze_2 = None
        ge: "b8[64, 64]" = torch.ops.aten.ge.Scalar(sub, 1);  sub = None
        full_default_1: "f32[]" = torch.ops.aten.full.default([], 0.0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where: "f32[64, 64]" = torch.ops.aten.where.self(ge, full_default, full_default_1);  ge = full_default = full_default_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:789 in _prepare_4d_causal_attention_mask_with_cache_position, code: causal_mask *= torch.arange(target_length, device=cache_position.device) > cache_position.reshape(-1, 1)
        iota_3: "i64[64]" = torch.ops.prims.iota.default(64, start = 0, step = 1, dtype = torch.int64, device = device(type='cuda', index=0), requires_grad = False)
        view: "i64[64, 1]" = torch.ops.aten.view.default(iota, [-1, 1]);  iota = None
        gt: "b8[64, 64]" = torch.ops.aten.gt.Tensor(iota_3, view);  iota_3 = view = None
        mul: "f32[64, 64]" = torch.ops.aten.mul.Tensor(where, gt);  where = gt = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:792 in _prepare_4d_causal_attention_mask_with_cache_position, code: causal_mask = causal_mask.clone()  # copy to contiguous memory for in-place edit
        unsqueeze_5: "f32[1, 64, 64]" = torch.ops.aten.unsqueeze.default(mul, 0);  mul = None
        unsqueeze_6: "f32[1, 1, 64, 64]" = torch.ops.aten.unsqueeze.default(unsqueeze_5, 1);  unsqueeze_5 = None
        expand_1: "f32[2, 1, 64, 64]" = torch.ops.aten.expand.default(unsqueeze_6, [2, 1, -1, -1]);  unsqueeze_6 = None
        clone: "f32[2, 1, 64, 64]" = torch.ops.aten.clone.default(expand_1);  expand_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:794 in _prepare_4d_causal_attention_mask_with_cache_position, code: padding_mask = causal_mask[:, :, :, :mask_length] + attention_mask[:, None, None, :].to(
        unsqueeze_7: "i64[2, 1, 64]" = torch.ops.aten.unsqueeze.default(arg2_1, 1);  arg2_1 = None
        unsqueeze_8: "i64[2, 1, 1, 64]" = torch.ops.aten.unsqueeze.default(unsqueeze_7, 2);  unsqueeze_7 = None
        add: "f32[2, 1, 64, 64]" = torch.ops.aten.add.Tensor(clone, unsqueeze_8);  unsqueeze_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:797 in _prepare_4d_causal_attention_mask_with_cache_position, code: padding_mask = padding_mask == 0
        eq: "b8[2, 1, 64, 64]" = torch.ops.aten.eq.Scalar(add, 0);  add = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:798 in _prepare_4d_causal_attention_mask_with_cache_position, code: causal_mask[:, :, :, :mask_length] = causal_mask[:, :, :, :mask_length].masked_fill(
        full_default_2: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where_1: "f32[2, 1, 64, 64]" = torch.ops.aten.where.self(eq, full_default_2, clone);  eq = full_default_2 = clone = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:621 in forward, code: position_embeds = self.wpe(position_ids)
        embedding_1: "f32[1, 64, 768]" = torch.ops.aten.embedding.default(arg3_1, unsqueeze);  arg3_1 = unsqueeze = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:622 in forward, code: hidden_states = inputs_embeds + position_embeds
        add_1: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(embedding, embedding_1);  embedding = embedding_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean = torch.ops.aten.var_mean.correction(add_1, [2], correction = 0, keepdim = True)
        getitem: "f32[2, 64, 1]" = var_mean[0]
        getitem_1: "f32[2, 64, 1]" = var_mean[1];  var_mean = None
        add_2: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem, 1e-05);  getitem = None
        rsqrt: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_2);  add_2 = None
        sub_1: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_1, getitem_1);  getitem_1 = None
        mul_1: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_1, rsqrt);  sub_1 = rsqrt = None
        mul_2: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_1, arg4_1);  mul_1 = arg4_1 = None
        add_3: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_2, arg5_1);  mul_2 = arg5_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        permute: "f32[768, 768]" = torch.ops.aten.permute.default(arg6_1, [1, 0]);  arg6_1 = None
        view_1: "f32[128, 768]" = torch.ops.aten.view.default(add_3, [128, 768])
        mm: "f32[128, 768]" = torch.ops.aten.mm.default(view_1, permute);  view_1 = permute = None
        view_2: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm, [2, 64, 768]);  mm = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        permute_1: "f32[768, 768]" = torch.ops.aten.permute.default(arg7_1, [1, 0]);  arg7_1 = None
        view_3: "f32[128, 768]" = torch.ops.aten.view.default(add_3, [128, 768])
        mm_1: "f32[128, 768]" = torch.ops.aten.mm.default(view_3, permute_1);  view_3 = permute_1 = None
        view_4: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_1, [2, 64, 768]);  mm_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        permute_2: "f32[768, 768]" = torch.ops.aten.permute.default(arg8_1, [1, 0]);  arg8_1 = None
        view_5: "f32[128, 768]" = torch.ops.aten.view.default(add_3, [128, 768]);  add_3 = None
        mm_2: "f32[128, 768]" = torch.ops.aten.mm.default(view_5, permute_2);  view_5 = permute_2 = None
        view_6: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_2, [2, 64, 768]);  mm_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_7: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_2, [2, 64, 12, 64]);  view_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_3: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_7, [0, 2, 1, 3]);  view_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_8: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_4, [2, 64, 12, 64]);  view_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_4: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_8, [0, 2, 1, 3]);  view_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_9: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_6, [2, 64, 12, 64]);  view_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_5: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_9, [0, 2, 1, 3]);  view_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_6: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_4, [0, 1, 3, 2])
        expand_2: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_3, [2, 12, 64, 64]);  permute_3 = None
        clone_2: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_2, memory_format = torch.contiguous_format);  expand_2 = None
        view_10: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_2, [24, 64, 64]);  clone_2 = None
        expand_3: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_6, [2, 12, 64, 64]);  permute_6 = None
        clone_3: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_3, memory_format = torch.contiguous_format);  expand_3 = None
        view_11: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_3, [24, 64, 64]);  clone_3 = None
        bmm: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_10, view_11);  view_10 = view_11 = None
        view_12: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm, [2, 12, 64, 64]);  bmm = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_23: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg9_1, 2, 0, 64);  arg9_1 = None
        slice_24: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_23, 3, 0, 64);  slice_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant0 = self._tensor_constant0;  _tensor_constant0 = None
        full_default_3: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_2: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_24, view_12, full_default_3);  slice_24 = view_12 = full_default_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_4: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_2, where_1);  where_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_4, [-1], True)
        sub_2: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_4, amax);  add_4 = amax = None
        exp: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_2);  sub_2 = None
        sum_1: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp, [-1], True)
        div: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp, sum_1);  exp = sum_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_4: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div, [2, 12, 64, 64]);  div = None
        view_13: "f32[24, 64, 64]" = torch.ops.aten.view.default(expand_4, [24, 64, 64]);  expand_4 = None
        expand_5: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_5, [2, 12, 64, 64])
        clone_5: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_5, memory_format = torch.contiguous_format);  expand_5 = None
        view_14: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_5, [24, 64, 64]);  clone_5 = None
        bmm_1: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_13, view_14);  view_13 = view_14 = None
        view_15: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_1, [2, 12, 64, 64]);  bmm_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_7: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_15, [0, 2, 1, 3]);  view_15 = None
        clone_6: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_7, memory_format = torch.contiguous_format);  permute_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_16: "f32[2, 64, 768]" = torch.ops.aten.view.default(clone_6, [2, 64, 768]);  clone_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_17: "f32[128, 768]" = torch.ops.aten.view.default(view_16, [128, 768]);  view_16 = None
        permute_8: "f32[768, 768]" = torch.ops.aten.permute.default(arg10_1, [1, 0]);  arg10_1 = None
        addmm: "f32[128, 768]" = torch.ops.aten.addmm.default(arg11_1, view_17, permute_8);  arg11_1 = view_17 = permute_8 = None
        view_18: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm, [2, 64, 768]);  addmm = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_5: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_18, add_1);  view_18 = add_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_1 = torch.ops.aten.var_mean.correction(add_5, [2], correction = 0, keepdim = True)
        getitem_2: "f32[2, 64, 1]" = var_mean_1[0]
        getitem_3: "f32[2, 64, 1]" = var_mean_1[1];  var_mean_1 = None
        add_6: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_2, 1e-05);  getitem_2 = None
        rsqrt_1: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_6);  add_6 = None
        sub_3: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_5, getitem_3);  getitem_3 = None
        mul_3: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_3, rsqrt_1);  sub_3 = rsqrt_1 = None
        mul_4: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_3, arg12_1);  mul_3 = arg12_1 = None
        add_7: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_4, arg13_1);  mul_4 = arg13_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_19: "f32[128, 768]" = torch.ops.aten.view.default(add_7, [128, 768]);  add_7 = None
        permute_9: "f32[768, 3072]" = torch.ops.aten.permute.default(arg14_1, [1, 0]);  arg14_1 = None
        addmm_1: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg15_1, view_19, permute_9);  arg15_1 = view_19 = permute_9 = None
        view_20: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_1, [2, 64, 3072]);  addmm_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_5: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_20, 0.5)
        pow_1: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_20, 3.0)
        mul_6: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_1, 0.044715);  pow_1 = None
        add_8: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_20, mul_6);  view_20 = mul_6 = None
        mul_7: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_8, 0.7978845608028654);  add_8 = None
        tanh: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_7);  mul_7 = None
        add_9: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh, 1.0);  tanh = None
        mul_8: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_5, add_9);  mul_5 = add_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_21: "f32[128, 3072]" = torch.ops.aten.view.default(mul_8, [128, 3072]);  mul_8 = None
        permute_10: "f32[3072, 768]" = torch.ops.aten.permute.default(arg16_1, [1, 0]);  arg16_1 = None
        addmm_2: "f32[128, 768]" = torch.ops.aten.addmm.default(arg17_1, view_21, permute_10);  arg17_1 = view_21 = permute_10 = None
        view_22: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_2, [2, 64, 768]);  addmm_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_10: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_5, view_22);  add_5 = view_22 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_2 = torch.ops.aten.var_mean.correction(add_10, [2], correction = 0, keepdim = True)
        getitem_4: "f32[2, 64, 1]" = var_mean_2[0]
        getitem_5: "f32[2, 64, 1]" = var_mean_2[1];  var_mean_2 = None
        add_11: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_4, 1e-05);  getitem_4 = None
        rsqrt_2: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_11);  add_11 = None
        sub_4: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_10, getitem_5);  getitem_5 = None
        mul_9: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_4, rsqrt_2);  sub_4 = rsqrt_2 = None
        mul_10: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_9, arg18_1);  mul_9 = arg18_1 = None
        add_12: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_10, arg19_1);  mul_10 = arg19_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        permute_11: "f32[768, 768]" = torch.ops.aten.permute.default(arg20_1, [1, 0]);  arg20_1 = None
        view_23: "f32[128, 768]" = torch.ops.aten.view.default(add_12, [128, 768])
        mm_3: "f32[128, 768]" = torch.ops.aten.mm.default(view_23, permute_11);  view_23 = permute_11 = None
        view_24: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_3, [2, 64, 768]);  mm_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        permute_12: "f32[768, 768]" = torch.ops.aten.permute.default(arg21_1, [1, 0]);  arg21_1 = None
        view_25: "f32[128, 768]" = torch.ops.aten.view.default(add_12, [128, 768])
        mm_4: "f32[128, 768]" = torch.ops.aten.mm.default(view_25, permute_12);  view_25 = permute_12 = None
        view_26: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_4, [2, 64, 768]);  mm_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        permute_13: "f32[768, 768]" = torch.ops.aten.permute.default(arg22_1, [1, 0]);  arg22_1 = None
        view_27: "f32[128, 768]" = torch.ops.aten.view.default(add_12, [128, 768]);  add_12 = None
        mm_5: "f32[128, 768]" = torch.ops.aten.mm.default(view_27, permute_13);  view_27 = permute_13 = None
        view_28: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_5, [2, 64, 768]);  mm_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_29: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_24, [2, 64, 12, 64]);  view_24 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_14: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_29, [0, 2, 1, 3]);  view_29 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_30: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_26, [2, 64, 12, 64]);  view_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_15: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_30, [0, 2, 1, 3]);  view_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_31: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_28, [2, 64, 12, 64]);  view_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_16: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_31, [0, 2, 1, 3]);  view_31 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_17: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_15, [0, 1, 3, 2])
        expand_6: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_14, [2, 12, 64, 64]);  permute_14 = None
        clone_9: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_6, memory_format = torch.contiguous_format);  expand_6 = None
        view_32: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_9, [24, 64, 64]);  clone_9 = None
        expand_7: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_17, [2, 12, 64, 64]);  permute_17 = None
        clone_10: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_7, memory_format = torch.contiguous_format);  expand_7 = None
        view_33: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_10, [24, 64, 64]);  clone_10 = None
        bmm_2: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_32, view_33);  view_32 = view_33 = None
        view_34: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_2, [2, 12, 64, 64]);  bmm_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_33: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg23_1, 2, 0, 64);  arg23_1 = None
        slice_34: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_33, 3, 0, 64);  slice_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant1 = self._tensor_constant1;  _tensor_constant1 = None
        full_default_4: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_3: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_34, view_34, full_default_4);  slice_34 = view_34 = full_default_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_13: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_3, where_1);  where_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_1: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_13, [-1], True)
        sub_5: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_13, amax_1);  add_13 = amax_1 = None
        exp_1: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_5);  sub_5 = None
        sum_2: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_1, [-1], True)
        div_1: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_1, sum_2);  exp_1 = sum_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_8: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_1, [2, 12, 64, 64]);  div_1 = None
        view_35: "f32[24, 64, 64]" = torch.ops.aten.view.default(expand_8, [24, 64, 64]);  expand_8 = None
        expand_9: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_16, [2, 12, 64, 64])
        clone_12: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_9, memory_format = torch.contiguous_format);  expand_9 = None
        view_36: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_12, [24, 64, 64]);  clone_12 = None
        bmm_3: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_35, view_36);  view_35 = view_36 = None
        view_37: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_3, [2, 12, 64, 64]);  bmm_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_18: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_37, [0, 2, 1, 3]);  view_37 = None
        clone_13: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_18, memory_format = torch.contiguous_format);  permute_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_38: "f32[2, 64, 768]" = torch.ops.aten.view.default(clone_13, [2, 64, 768]);  clone_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_39: "f32[128, 768]" = torch.ops.aten.view.default(view_38, [128, 768]);  view_38 = None
        permute_19: "f32[768, 768]" = torch.ops.aten.permute.default(arg24_1, [1, 0]);  arg24_1 = None
        addmm_3: "f32[128, 768]" = torch.ops.aten.addmm.default(arg25_1, view_39, permute_19);  arg25_1 = view_39 = permute_19 = None
        view_40: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_3, [2, 64, 768]);  addmm_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_14: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_40, add_10);  view_40 = add_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_3 = torch.ops.aten.var_mean.correction(add_14, [2], correction = 0, keepdim = True)
        getitem_6: "f32[2, 64, 1]" = var_mean_3[0]
        getitem_7: "f32[2, 64, 1]" = var_mean_3[1];  var_mean_3 = None
        add_15: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_6, 1e-05);  getitem_6 = None
        rsqrt_3: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_15);  add_15 = None
        sub_6: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_14, getitem_7);  getitem_7 = None
        mul_11: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_6, rsqrt_3);  sub_6 = rsqrt_3 = None
        mul_12: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_11, arg26_1);  mul_11 = arg26_1 = None
        add_16: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_12, arg27_1);  mul_12 = arg27_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_41: "f32[128, 768]" = torch.ops.aten.view.default(add_16, [128, 768]);  add_16 = None
        permute_20: "f32[768, 3072]" = torch.ops.aten.permute.default(arg28_1, [1, 0]);  arg28_1 = None
        addmm_4: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg29_1, view_41, permute_20);  arg29_1 = view_41 = permute_20 = None
        view_42: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_4, [2, 64, 3072]);  addmm_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_13: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_42, 0.5)
        pow_2: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_42, 3.0)
        mul_14: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_2, 0.044715);  pow_2 = None
        add_17: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_42, mul_14);  view_42 = mul_14 = None
        mul_15: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_17, 0.7978845608028654);  add_17 = None
        tanh_1: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_15);  mul_15 = None
        add_18: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_1, 1.0);  tanh_1 = None
        mul_16: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_13, add_18);  mul_13 = add_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_43: "f32[128, 3072]" = torch.ops.aten.view.default(mul_16, [128, 3072]);  mul_16 = None
        permute_21: "f32[3072, 768]" = torch.ops.aten.permute.default(arg30_1, [1, 0]);  arg30_1 = None
        addmm_5: "f32[128, 768]" = torch.ops.aten.addmm.default(arg31_1, view_43, permute_21);  arg31_1 = view_43 = permute_21 = None
        view_44: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_5, [2, 64, 768]);  addmm_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_19: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_14, view_44);  add_14 = view_44 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_4 = torch.ops.aten.var_mean.correction(add_19, [2], correction = 0, keepdim = True)
        getitem_8: "f32[2, 64, 1]" = var_mean_4[0]
        getitem_9: "f32[2, 64, 1]" = var_mean_4[1];  var_mean_4 = None
        add_20: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_8, 1e-05);  getitem_8 = None
        rsqrt_4: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_20);  add_20 = None
        sub_7: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_19, getitem_9);  getitem_9 = None
        mul_17: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_7, rsqrt_4);  sub_7 = rsqrt_4 = None
        mul_18: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_17, arg32_1);  mul_17 = arg32_1 = None
        add_21: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_18, arg33_1);  mul_18 = arg33_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        permute_22: "f32[768, 768]" = torch.ops.aten.permute.default(arg34_1, [1, 0]);  arg34_1 = None
        view_45: "f32[128, 768]" = torch.ops.aten.view.default(add_21, [128, 768])
        mm_6: "f32[128, 768]" = torch.ops.aten.mm.default(view_45, permute_22);  view_45 = permute_22 = None
        view_46: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_6, [2, 64, 768]);  mm_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        permute_23: "f32[768, 768]" = torch.ops.aten.permute.default(arg35_1, [1, 0]);  arg35_1 = None
        view_47: "f32[128, 768]" = torch.ops.aten.view.default(add_21, [128, 768])
        mm_7: "f32[128, 768]" = torch.ops.aten.mm.default(view_47, permute_23);  view_47 = permute_23 = None
        view_48: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_7, [2, 64, 768]);  mm_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        permute_24: "f32[768, 768]" = torch.ops.aten.permute.default(arg36_1, [1, 0]);  arg36_1 = None
        view_49: "f32[128, 768]" = torch.ops.aten.view.default(add_21, [128, 768]);  add_21 = None
        mm_8: "f32[128, 768]" = torch.ops.aten.mm.default(view_49, permute_24);  view_49 = permute_24 = None
        view_50: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_8, [2, 64, 768]);  mm_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_51: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_46, [2, 64, 12, 64]);  view_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_25: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_51, [0, 2, 1, 3]);  view_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_52: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_48, [2, 64, 12, 64]);  view_48 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_26: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_52, [0, 2, 1, 3]);  view_52 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_53: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_50, [2, 64, 12, 64]);  view_50 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_27: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_53, [0, 2, 1, 3]);  view_53 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_28: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_26, [0, 1, 3, 2])
        expand_10: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_25, [2, 12, 64, 64]);  permute_25 = None
        clone_16: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_10, memory_format = torch.contiguous_format);  expand_10 = None
        view_54: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_16, [24, 64, 64]);  clone_16 = None
        expand_11: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_28, [2, 12, 64, 64]);  permute_28 = None
        clone_17: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_11, memory_format = torch.contiguous_format);  expand_11 = None
        view_55: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_17, [24, 64, 64]);  clone_17 = None
        bmm_4: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_54, view_55);  view_54 = view_55 = None
        view_56: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_4, [2, 12, 64, 64]);  bmm_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_43: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg37_1, 2, 0, 64);  arg37_1 = None
        slice_44: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_43, 3, 0, 64);  slice_43 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant2 = self._tensor_constant2;  _tensor_constant2 = None
        full_default_5: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_4: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_44, view_56, full_default_5);  slice_44 = view_56 = full_default_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_22: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_4, where_1);  where_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_2: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_22, [-1], True)
        sub_8: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_22, amax_2);  add_22 = amax_2 = None
        exp_2: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_8);  sub_8 = None
        sum_3: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_2, [-1], True)
        div_2: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_2, sum_3);  exp_2 = sum_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_12: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_2, [2, 12, 64, 64]);  div_2 = None
        view_57: "f32[24, 64, 64]" = torch.ops.aten.view.default(expand_12, [24, 64, 64]);  expand_12 = None
        expand_13: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_27, [2, 12, 64, 64])
        clone_19: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_13, memory_format = torch.contiguous_format);  expand_13 = None
        view_58: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_19, [24, 64, 64]);  clone_19 = None
        bmm_5: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_57, view_58);  view_57 = view_58 = None
        view_59: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_5, [2, 12, 64, 64]);  bmm_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_29: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_59, [0, 2, 1, 3]);  view_59 = None
        clone_20: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_29, memory_format = torch.contiguous_format);  permute_29 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_60: "f32[2, 64, 768]" = torch.ops.aten.view.default(clone_20, [2, 64, 768]);  clone_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_61: "f32[128, 768]" = torch.ops.aten.view.default(view_60, [128, 768]);  view_60 = None
        permute_30: "f32[768, 768]" = torch.ops.aten.permute.default(arg38_1, [1, 0]);  arg38_1 = None
        addmm_6: "f32[128, 768]" = torch.ops.aten.addmm.default(arg39_1, view_61, permute_30);  arg39_1 = view_61 = permute_30 = None
        view_62: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_6, [2, 64, 768]);  addmm_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_23: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_62, add_19);  view_62 = add_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_5 = torch.ops.aten.var_mean.correction(add_23, [2], correction = 0, keepdim = True)
        getitem_10: "f32[2, 64, 1]" = var_mean_5[0]
        getitem_11: "f32[2, 64, 1]" = var_mean_5[1];  var_mean_5 = None
        add_24: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_10, 1e-05);  getitem_10 = None
        rsqrt_5: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_24);  add_24 = None
        sub_9: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_23, getitem_11);  getitem_11 = None
        mul_19: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_9, rsqrt_5);  sub_9 = rsqrt_5 = None
        mul_20: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_19, arg40_1);  mul_19 = arg40_1 = None
        add_25: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_20, arg41_1);  mul_20 = arg41_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_63: "f32[128, 768]" = torch.ops.aten.view.default(add_25, [128, 768]);  add_25 = None
        permute_31: "f32[768, 3072]" = torch.ops.aten.permute.default(arg42_1, [1, 0]);  arg42_1 = None
        addmm_7: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg43_1, view_63, permute_31);  arg43_1 = view_63 = permute_31 = None
        view_64: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_7, [2, 64, 3072]);  addmm_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_21: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_64, 0.5)
        pow_3: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_64, 3.0)
        mul_22: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_3, 0.044715);  pow_3 = None
        add_26: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_64, mul_22);  view_64 = mul_22 = None
        mul_23: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_26, 0.7978845608028654);  add_26 = None
        tanh_2: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_23);  mul_23 = None
        add_27: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_2, 1.0);  tanh_2 = None
        mul_24: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_21, add_27);  mul_21 = add_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_65: "f32[128, 3072]" = torch.ops.aten.view.default(mul_24, [128, 3072]);  mul_24 = None
        permute_32: "f32[3072, 768]" = torch.ops.aten.permute.default(arg44_1, [1, 0]);  arg44_1 = None
        addmm_8: "f32[128, 768]" = torch.ops.aten.addmm.default(arg45_1, view_65, permute_32);  arg45_1 = view_65 = permute_32 = None
        view_66: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_8, [2, 64, 768]);  addmm_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_28: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_23, view_66);  add_23 = view_66 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_6 = torch.ops.aten.var_mean.correction(add_28, [2], correction = 0, keepdim = True)
        getitem_12: "f32[2, 64, 1]" = var_mean_6[0]
        getitem_13: "f32[2, 64, 1]" = var_mean_6[1];  var_mean_6 = None
        add_29: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_12, 1e-05);  getitem_12 = None
        rsqrt_6: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_29);  add_29 = None
        sub_10: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_28, getitem_13);  getitem_13 = None
        mul_25: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_10, rsqrt_6);  sub_10 = rsqrt_6 = None
        mul_26: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_25, arg46_1);  mul_25 = arg46_1 = None
        add_30: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_26, arg47_1);  mul_26 = arg47_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        permute_33: "f32[768, 768]" = torch.ops.aten.permute.default(arg48_1, [1, 0]);  arg48_1 = None
        view_67: "f32[128, 768]" = torch.ops.aten.view.default(add_30, [128, 768])
        mm_9: "f32[128, 768]" = torch.ops.aten.mm.default(view_67, permute_33);  view_67 = permute_33 = None
        view_68: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_9, [2, 64, 768]);  mm_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        permute_34: "f32[768, 768]" = torch.ops.aten.permute.default(arg49_1, [1, 0]);  arg49_1 = None
        view_69: "f32[128, 768]" = torch.ops.aten.view.default(add_30, [128, 768])
        mm_10: "f32[128, 768]" = torch.ops.aten.mm.default(view_69, permute_34);  view_69 = permute_34 = None
        view_70: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_10, [2, 64, 768]);  mm_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        permute_35: "f32[768, 768]" = torch.ops.aten.permute.default(arg50_1, [1, 0]);  arg50_1 = None
        view_71: "f32[128, 768]" = torch.ops.aten.view.default(add_30, [128, 768]);  add_30 = None
        mm_11: "f32[128, 768]" = torch.ops.aten.mm.default(view_71, permute_35);  view_71 = permute_35 = None
        view_72: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_11, [2, 64, 768]);  mm_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_73: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_68, [2, 64, 12, 64]);  view_68 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_36: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_73, [0, 2, 1, 3]);  view_73 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_74: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_70, [2, 64, 12, 64]);  view_70 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_37: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_74, [0, 2, 1, 3]);  view_74 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_75: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_72, [2, 64, 12, 64]);  view_72 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_38: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_75, [0, 2, 1, 3]);  view_75 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_39: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_37, [0, 1, 3, 2])
        expand_14: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_36, [2, 12, 64, 64]);  permute_36 = None
        clone_23: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_14, memory_format = torch.contiguous_format);  expand_14 = None
        view_76: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_23, [24, 64, 64]);  clone_23 = None
        expand_15: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_39, [2, 12, 64, 64]);  permute_39 = None
        clone_24: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_15, memory_format = torch.contiguous_format);  expand_15 = None
        view_77: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_24, [24, 64, 64]);  clone_24 = None
        bmm_6: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_76, view_77);  view_76 = view_77 = None
        view_78: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_6, [2, 12, 64, 64]);  bmm_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_53: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg51_1, 2, 0, 64);  arg51_1 = None
        slice_54: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_53, 3, 0, 64);  slice_53 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant3 = self._tensor_constant3;  _tensor_constant3 = None
        full_default_6: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_5: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_54, view_78, full_default_6);  slice_54 = view_78 = full_default_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_31: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_5, where_1);  where_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_3: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_31, [-1], True)
        sub_11: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_31, amax_3);  add_31 = amax_3 = None
        exp_3: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_11);  sub_11 = None
        sum_4: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_3, [-1], True)
        div_3: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_3, sum_4);  exp_3 = sum_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_16: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_3, [2, 12, 64, 64]);  div_3 = None
        view_79: "f32[24, 64, 64]" = torch.ops.aten.view.default(expand_16, [24, 64, 64]);  expand_16 = None
        expand_17: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_38, [2, 12, 64, 64])
        clone_26: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_17, memory_format = torch.contiguous_format);  expand_17 = None
        view_80: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_26, [24, 64, 64]);  clone_26 = None
        bmm_7: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_79, view_80);  view_79 = view_80 = None
        view_81: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_7, [2, 12, 64, 64]);  bmm_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_40: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_81, [0, 2, 1, 3]);  view_81 = None
        clone_27: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_40, memory_format = torch.contiguous_format);  permute_40 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_82: "f32[2, 64, 768]" = torch.ops.aten.view.default(clone_27, [2, 64, 768]);  clone_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_83: "f32[128, 768]" = torch.ops.aten.view.default(view_82, [128, 768]);  view_82 = None
        permute_41: "f32[768, 768]" = torch.ops.aten.permute.default(arg52_1, [1, 0]);  arg52_1 = None
        addmm_9: "f32[128, 768]" = torch.ops.aten.addmm.default(arg53_1, view_83, permute_41);  arg53_1 = view_83 = permute_41 = None
        view_84: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_9, [2, 64, 768]);  addmm_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_32: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_84, add_28);  view_84 = add_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_7 = torch.ops.aten.var_mean.correction(add_32, [2], correction = 0, keepdim = True)
        getitem_14: "f32[2, 64, 1]" = var_mean_7[0]
        getitem_15: "f32[2, 64, 1]" = var_mean_7[1];  var_mean_7 = None
        add_33: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_14, 1e-05);  getitem_14 = None
        rsqrt_7: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_33);  add_33 = None
        sub_12: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_32, getitem_15);  getitem_15 = None
        mul_27: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_12, rsqrt_7);  sub_12 = rsqrt_7 = None
        mul_28: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_27, arg54_1);  mul_27 = arg54_1 = None
        add_34: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_28, arg55_1);  mul_28 = arg55_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_85: "f32[128, 768]" = torch.ops.aten.view.default(add_34, [128, 768]);  add_34 = None
        permute_42: "f32[768, 3072]" = torch.ops.aten.permute.default(arg56_1, [1, 0]);  arg56_1 = None
        addmm_10: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg57_1, view_85, permute_42);  arg57_1 = view_85 = permute_42 = None
        view_86: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_10, [2, 64, 3072]);  addmm_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_29: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_86, 0.5)
        pow_4: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_86, 3.0)
        mul_30: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_4, 0.044715);  pow_4 = None
        add_35: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_86, mul_30);  view_86 = mul_30 = None
        mul_31: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_35, 0.7978845608028654);  add_35 = None
        tanh_3: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_31);  mul_31 = None
        add_36: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_3, 1.0);  tanh_3 = None
        mul_32: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_29, add_36);  mul_29 = add_36 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_87: "f32[128, 3072]" = torch.ops.aten.view.default(mul_32, [128, 3072]);  mul_32 = None
        permute_43: "f32[3072, 768]" = torch.ops.aten.permute.default(arg58_1, [1, 0]);  arg58_1 = None
        addmm_11: "f32[128, 768]" = torch.ops.aten.addmm.default(arg59_1, view_87, permute_43);  arg59_1 = view_87 = permute_43 = None
        view_88: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_11, [2, 64, 768]);  addmm_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_37: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_32, view_88);  add_32 = view_88 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_8 = torch.ops.aten.var_mean.correction(add_37, [2], correction = 0, keepdim = True)
        getitem_16: "f32[2, 64, 1]" = var_mean_8[0]
        getitem_17: "f32[2, 64, 1]" = var_mean_8[1];  var_mean_8 = None
        add_38: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_16, 1e-05);  getitem_16 = None
        rsqrt_8: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_38);  add_38 = None
        sub_13: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_37, getitem_17);  getitem_17 = None
        mul_33: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_13, rsqrt_8);  sub_13 = rsqrt_8 = None
        mul_34: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_33, arg60_1);  mul_33 = arg60_1 = None
        add_39: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_34, arg61_1);  mul_34 = arg61_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        permute_44: "f32[768, 768]" = torch.ops.aten.permute.default(arg62_1, [1, 0]);  arg62_1 = None
        view_89: "f32[128, 768]" = torch.ops.aten.view.default(add_39, [128, 768])
        mm_12: "f32[128, 768]" = torch.ops.aten.mm.default(view_89, permute_44);  view_89 = permute_44 = None
        view_90: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_12, [2, 64, 768]);  mm_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        permute_45: "f32[768, 768]" = torch.ops.aten.permute.default(arg63_1, [1, 0]);  arg63_1 = None
        view_91: "f32[128, 768]" = torch.ops.aten.view.default(add_39, [128, 768])
        mm_13: "f32[128, 768]" = torch.ops.aten.mm.default(view_91, permute_45);  view_91 = permute_45 = None
        view_92: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_13, [2, 64, 768]);  mm_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        permute_46: "f32[768, 768]" = torch.ops.aten.permute.default(arg64_1, [1, 0]);  arg64_1 = None
        view_93: "f32[128, 768]" = torch.ops.aten.view.default(add_39, [128, 768]);  add_39 = None
        mm_14: "f32[128, 768]" = torch.ops.aten.mm.default(view_93, permute_46);  view_93 = permute_46 = None
        view_94: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_14, [2, 64, 768]);  mm_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_95: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_90, [2, 64, 12, 64]);  view_90 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_47: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_95, [0, 2, 1, 3]);  view_95 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_96: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_92, [2, 64, 12, 64]);  view_92 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_48: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_96, [0, 2, 1, 3]);  view_96 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_97: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_94, [2, 64, 12, 64]);  view_94 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_49: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_97, [0, 2, 1, 3]);  view_97 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_50: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_48, [0, 1, 3, 2])
        expand_18: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_47, [2, 12, 64, 64]);  permute_47 = None
        clone_30: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_18, memory_format = torch.contiguous_format);  expand_18 = None
        view_98: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_30, [24, 64, 64]);  clone_30 = None
        expand_19: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_50, [2, 12, 64, 64]);  permute_50 = None
        clone_31: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_19, memory_format = torch.contiguous_format);  expand_19 = None
        view_99: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_31, [24, 64, 64]);  clone_31 = None
        bmm_8: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_98, view_99);  view_98 = view_99 = None
        view_100: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_8, [2, 12, 64, 64]);  bmm_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_63: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg65_1, 2, 0, 64);  arg65_1 = None
        slice_64: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_63, 3, 0, 64);  slice_63 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant4 = self._tensor_constant4;  _tensor_constant4 = None
        full_default_7: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_6: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_64, view_100, full_default_7);  slice_64 = view_100 = full_default_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_40: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_6, where_1);  where_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_4: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_40, [-1], True)
        sub_14: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_40, amax_4);  add_40 = amax_4 = None
        exp_4: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_14);  sub_14 = None
        sum_5: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_4, [-1], True)
        div_4: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_4, sum_5);  exp_4 = sum_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_20: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_4, [2, 12, 64, 64]);  div_4 = None
        view_101: "f32[24, 64, 64]" = torch.ops.aten.view.default(expand_20, [24, 64, 64]);  expand_20 = None
        expand_21: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_49, [2, 12, 64, 64])
        clone_33: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_21, memory_format = torch.contiguous_format);  expand_21 = None
        view_102: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_33, [24, 64, 64]);  clone_33 = None
        bmm_9: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_101, view_102);  view_101 = view_102 = None
        view_103: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_9, [2, 12, 64, 64]);  bmm_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_51: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_103, [0, 2, 1, 3]);  view_103 = None
        clone_34: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_51, memory_format = torch.contiguous_format);  permute_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_104: "f32[2, 64, 768]" = torch.ops.aten.view.default(clone_34, [2, 64, 768]);  clone_34 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_105: "f32[128, 768]" = torch.ops.aten.view.default(view_104, [128, 768]);  view_104 = None
        permute_52: "f32[768, 768]" = torch.ops.aten.permute.default(arg66_1, [1, 0]);  arg66_1 = None
        addmm_12: "f32[128, 768]" = torch.ops.aten.addmm.default(arg67_1, view_105, permute_52);  arg67_1 = view_105 = permute_52 = None
        view_106: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_12, [2, 64, 768]);  addmm_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_41: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_106, add_37);  view_106 = add_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_9 = torch.ops.aten.var_mean.correction(add_41, [2], correction = 0, keepdim = True)
        getitem_18: "f32[2, 64, 1]" = var_mean_9[0]
        getitem_19: "f32[2, 64, 1]" = var_mean_9[1];  var_mean_9 = None
        add_42: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_18, 1e-05);  getitem_18 = None
        rsqrt_9: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_42);  add_42 = None
        sub_15: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_41, getitem_19);  getitem_19 = None
        mul_35: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_15, rsqrt_9);  sub_15 = rsqrt_9 = None
        mul_36: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_35, arg68_1);  mul_35 = arg68_1 = None
        add_43: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_36, arg69_1);  mul_36 = arg69_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_107: "f32[128, 768]" = torch.ops.aten.view.default(add_43, [128, 768]);  add_43 = None
        permute_53: "f32[768, 3072]" = torch.ops.aten.permute.default(arg70_1, [1, 0]);  arg70_1 = None
        addmm_13: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg71_1, view_107, permute_53);  arg71_1 = view_107 = permute_53 = None
        view_108: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_13, [2, 64, 3072]);  addmm_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_37: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_108, 0.5)
        pow_5: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_108, 3.0)
        mul_38: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_5, 0.044715);  pow_5 = None
        add_44: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_108, mul_38);  view_108 = mul_38 = None
        mul_39: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_44, 0.7978845608028654);  add_44 = None
        tanh_4: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_39);  mul_39 = None
        add_45: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_4, 1.0);  tanh_4 = None
        mul_40: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_37, add_45);  mul_37 = add_45 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_109: "f32[128, 3072]" = torch.ops.aten.view.default(mul_40, [128, 3072]);  mul_40 = None
        permute_54: "f32[3072, 768]" = torch.ops.aten.permute.default(arg72_1, [1, 0]);  arg72_1 = None
        addmm_14: "f32[128, 768]" = torch.ops.aten.addmm.default(arg73_1, view_109, permute_54);  arg73_1 = view_109 = permute_54 = None
        view_110: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_14, [2, 64, 768]);  addmm_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_46: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_41, view_110);  add_41 = view_110 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_10 = torch.ops.aten.var_mean.correction(add_46, [2], correction = 0, keepdim = True)
        getitem_20: "f32[2, 64, 1]" = var_mean_10[0]
        getitem_21: "f32[2, 64, 1]" = var_mean_10[1];  var_mean_10 = None
        add_47: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_20, 1e-05);  getitem_20 = None
        rsqrt_10: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_47);  add_47 = None
        sub_16: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_46, getitem_21);  getitem_21 = None
        mul_41: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_16, rsqrt_10);  sub_16 = rsqrt_10 = None
        mul_42: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_41, arg74_1);  mul_41 = arg74_1 = None
        add_48: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_42, arg75_1);  mul_42 = arg75_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        permute_55: "f32[768, 768]" = torch.ops.aten.permute.default(arg76_1, [1, 0]);  arg76_1 = None
        view_111: "f32[128, 768]" = torch.ops.aten.view.default(add_48, [128, 768])
        mm_15: "f32[128, 768]" = torch.ops.aten.mm.default(view_111, permute_55);  view_111 = permute_55 = None
        view_112: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_15, [2, 64, 768]);  mm_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        permute_56: "f32[768, 768]" = torch.ops.aten.permute.default(arg77_1, [1, 0]);  arg77_1 = None
        view_113: "f32[128, 768]" = torch.ops.aten.view.default(add_48, [128, 768])
        mm_16: "f32[128, 768]" = torch.ops.aten.mm.default(view_113, permute_56);  view_113 = permute_56 = None
        view_114: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_16, [2, 64, 768]);  mm_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        permute_57: "f32[768, 768]" = torch.ops.aten.permute.default(arg78_1, [1, 0]);  arg78_1 = None
        view_115: "f32[128, 768]" = torch.ops.aten.view.default(add_48, [128, 768]);  add_48 = None
        mm_17: "f32[128, 768]" = torch.ops.aten.mm.default(view_115, permute_57);  view_115 = permute_57 = None
        view_116: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_17, [2, 64, 768]);  mm_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_117: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_112, [2, 64, 12, 64]);  view_112 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_58: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_117, [0, 2, 1, 3]);  view_117 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_118: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_114, [2, 64, 12, 64]);  view_114 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_59: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_118, [0, 2, 1, 3]);  view_118 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_119: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_116, [2, 64, 12, 64]);  view_116 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_60: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_119, [0, 2, 1, 3]);  view_119 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_61: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_59, [0, 1, 3, 2])
        expand_22: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_58, [2, 12, 64, 64]);  permute_58 = None
        clone_37: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_22, memory_format = torch.contiguous_format);  expand_22 = None
        view_120: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_37, [24, 64, 64]);  clone_37 = None
        expand_23: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_61, [2, 12, 64, 64]);  permute_61 = None
        clone_38: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_23, memory_format = torch.contiguous_format);  expand_23 = None
        view_121: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_38, [24, 64, 64]);  clone_38 = None
        bmm_10: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_120, view_121);  view_120 = view_121 = None
        view_122: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_10, [2, 12, 64, 64]);  bmm_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_73: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg79_1, 2, 0, 64);  arg79_1 = None
        slice_74: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_73, 3, 0, 64);  slice_73 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant5 = self._tensor_constant5;  _tensor_constant5 = None
        full_default_8: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_7: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_74, view_122, full_default_8);  slice_74 = view_122 = full_default_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_49: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_7, where_1);  where_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_5: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_49, [-1], True)
        sub_17: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_49, amax_5);  add_49 = amax_5 = None
        exp_5: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_17);  sub_17 = None
        sum_6: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_5, [-1], True)
        div_5: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_5, sum_6);  exp_5 = sum_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_24: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_5, [2, 12, 64, 64]);  div_5 = None
        view_123: "f32[24, 64, 64]" = torch.ops.aten.view.default(expand_24, [24, 64, 64]);  expand_24 = None
        expand_25: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_60, [2, 12, 64, 64])
        clone_40: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_25, memory_format = torch.contiguous_format);  expand_25 = None
        view_124: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_40, [24, 64, 64]);  clone_40 = None
        bmm_11: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_123, view_124);  view_123 = view_124 = None
        view_125: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_11, [2, 12, 64, 64]);  bmm_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_62: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_125, [0, 2, 1, 3]);  view_125 = None
        clone_41: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_62, memory_format = torch.contiguous_format);  permute_62 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_126: "f32[2, 64, 768]" = torch.ops.aten.view.default(clone_41, [2, 64, 768]);  clone_41 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_127: "f32[128, 768]" = torch.ops.aten.view.default(view_126, [128, 768]);  view_126 = None
        permute_63: "f32[768, 768]" = torch.ops.aten.permute.default(arg80_1, [1, 0]);  arg80_1 = None
        addmm_15: "f32[128, 768]" = torch.ops.aten.addmm.default(arg81_1, view_127, permute_63);  arg81_1 = view_127 = permute_63 = None
        view_128: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_15, [2, 64, 768]);  addmm_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_50: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_128, add_46);  view_128 = add_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_11 = torch.ops.aten.var_mean.correction(add_50, [2], correction = 0, keepdim = True)
        getitem_22: "f32[2, 64, 1]" = var_mean_11[0]
        getitem_23: "f32[2, 64, 1]" = var_mean_11[1];  var_mean_11 = None
        add_51: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_22, 1e-05);  getitem_22 = None
        rsqrt_11: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_51);  add_51 = None
        sub_18: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_50, getitem_23);  getitem_23 = None
        mul_43: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_18, rsqrt_11);  sub_18 = rsqrt_11 = None
        mul_44: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_43, arg82_1);  mul_43 = arg82_1 = None
        add_52: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_44, arg83_1);  mul_44 = arg83_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_129: "f32[128, 768]" = torch.ops.aten.view.default(add_52, [128, 768]);  add_52 = None
        permute_64: "f32[768, 3072]" = torch.ops.aten.permute.default(arg84_1, [1, 0]);  arg84_1 = None
        addmm_16: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg85_1, view_129, permute_64);  arg85_1 = view_129 = permute_64 = None
        view_130: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_16, [2, 64, 3072]);  addmm_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_45: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_130, 0.5)
        pow_6: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_130, 3.0)
        mul_46: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_6, 0.044715);  pow_6 = None
        add_53: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_130, mul_46);  view_130 = mul_46 = None
        mul_47: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_53, 0.7978845608028654);  add_53 = None
        tanh_5: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_47);  mul_47 = None
        add_54: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_5, 1.0);  tanh_5 = None
        mul_48: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_45, add_54);  mul_45 = add_54 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_131: "f32[128, 3072]" = torch.ops.aten.view.default(mul_48, [128, 3072]);  mul_48 = None
        permute_65: "f32[3072, 768]" = torch.ops.aten.permute.default(arg86_1, [1, 0]);  arg86_1 = None
        addmm_17: "f32[128, 768]" = torch.ops.aten.addmm.default(arg87_1, view_131, permute_65);  arg87_1 = view_131 = permute_65 = None
        view_132: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_17, [2, 64, 768]);  addmm_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_55: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_50, view_132);  add_50 = view_132 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_12 = torch.ops.aten.var_mean.correction(add_55, [2], correction = 0, keepdim = True)
        getitem_24: "f32[2, 64, 1]" = var_mean_12[0]
        getitem_25: "f32[2, 64, 1]" = var_mean_12[1];  var_mean_12 = None
        add_56: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_24, 1e-05);  getitem_24 = None
        rsqrt_12: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_56);  add_56 = None
        sub_19: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_55, getitem_25);  getitem_25 = None
        mul_49: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_19, rsqrt_12);  sub_19 = rsqrt_12 = None
        mul_50: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_49, arg88_1);  mul_49 = arg88_1 = None
        add_57: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_50, arg89_1);  mul_50 = arg89_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        permute_66: "f32[768, 768]" = torch.ops.aten.permute.default(arg90_1, [1, 0]);  arg90_1 = None
        view_133: "f32[128, 768]" = torch.ops.aten.view.default(add_57, [128, 768])
        mm_18: "f32[128, 768]" = torch.ops.aten.mm.default(view_133, permute_66);  view_133 = permute_66 = None
        view_134: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_18, [2, 64, 768]);  mm_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        permute_67: "f32[768, 768]" = torch.ops.aten.permute.default(arg91_1, [1, 0]);  arg91_1 = None
        view_135: "f32[128, 768]" = torch.ops.aten.view.default(add_57, [128, 768])
        mm_19: "f32[128, 768]" = torch.ops.aten.mm.default(view_135, permute_67);  view_135 = permute_67 = None
        view_136: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_19, [2, 64, 768]);  mm_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        permute_68: "f32[768, 768]" = torch.ops.aten.permute.default(arg92_1, [1, 0]);  arg92_1 = None
        view_137: "f32[128, 768]" = torch.ops.aten.view.default(add_57, [128, 768]);  add_57 = None
        mm_20: "f32[128, 768]" = torch.ops.aten.mm.default(view_137, permute_68);  view_137 = permute_68 = None
        view_138: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_20, [2, 64, 768]);  mm_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_139: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_134, [2, 64, 12, 64]);  view_134 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_69: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_139, [0, 2, 1, 3]);  view_139 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_140: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_136, [2, 64, 12, 64]);  view_136 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_70: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_140, [0, 2, 1, 3]);  view_140 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_141: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_138, [2, 64, 12, 64]);  view_138 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_71: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_141, [0, 2, 1, 3]);  view_141 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_72: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_70, [0, 1, 3, 2])
        expand_26: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_69, [2, 12, 64, 64]);  permute_69 = None
        clone_44: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_26, memory_format = torch.contiguous_format);  expand_26 = None
        view_142: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_44, [24, 64, 64]);  clone_44 = None
        expand_27: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_72, [2, 12, 64, 64]);  permute_72 = None
        clone_45: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_27, memory_format = torch.contiguous_format);  expand_27 = None
        view_143: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_45, [24, 64, 64]);  clone_45 = None
        bmm_12: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_142, view_143);  view_142 = view_143 = None
        view_144: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_12, [2, 12, 64, 64]);  bmm_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_83: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg93_1, 2, 0, 64);  arg93_1 = None
        slice_84: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_83, 3, 0, 64);  slice_83 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant6 = self._tensor_constant6;  _tensor_constant6 = None
        full_default_9: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_8: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_84, view_144, full_default_9);  slice_84 = view_144 = full_default_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_58: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_8, where_1);  where_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_6: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_58, [-1], True)
        sub_20: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_58, amax_6);  add_58 = amax_6 = None
        exp_6: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_20);  sub_20 = None
        sum_7: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_6, [-1], True)
        div_6: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_6, sum_7);  exp_6 = sum_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_28: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_6, [2, 12, 64, 64]);  div_6 = None
        view_145: "f32[24, 64, 64]" = torch.ops.aten.view.default(expand_28, [24, 64, 64]);  expand_28 = None
        expand_29: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_71, [2, 12, 64, 64])
        clone_47: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_29, memory_format = torch.contiguous_format);  expand_29 = None
        view_146: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_47, [24, 64, 64]);  clone_47 = None
        bmm_13: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_145, view_146);  view_145 = view_146 = None
        view_147: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_13, [2, 12, 64, 64]);  bmm_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_73: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_147, [0, 2, 1, 3]);  view_147 = None
        clone_48: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_73, memory_format = torch.contiguous_format);  permute_73 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_148: "f32[2, 64, 768]" = torch.ops.aten.view.default(clone_48, [2, 64, 768]);  clone_48 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_149: "f32[128, 768]" = torch.ops.aten.view.default(view_148, [128, 768]);  view_148 = None
        permute_74: "f32[768, 768]" = torch.ops.aten.permute.default(arg94_1, [1, 0]);  arg94_1 = None
        addmm_18: "f32[128, 768]" = torch.ops.aten.addmm.default(arg95_1, view_149, permute_74);  arg95_1 = view_149 = permute_74 = None
        view_150: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_18, [2, 64, 768]);  addmm_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_59: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_150, add_55);  view_150 = add_55 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_13 = torch.ops.aten.var_mean.correction(add_59, [2], correction = 0, keepdim = True)
        getitem_26: "f32[2, 64, 1]" = var_mean_13[0]
        getitem_27: "f32[2, 64, 1]" = var_mean_13[1];  var_mean_13 = None
        add_60: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_26, 1e-05);  getitem_26 = None
        rsqrt_13: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_60);  add_60 = None
        sub_21: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_59, getitem_27);  getitem_27 = None
        mul_51: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_21, rsqrt_13);  sub_21 = rsqrt_13 = None
        mul_52: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_51, arg96_1);  mul_51 = arg96_1 = None
        add_61: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_52, arg97_1);  mul_52 = arg97_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_151: "f32[128, 768]" = torch.ops.aten.view.default(add_61, [128, 768]);  add_61 = None
        permute_75: "f32[768, 3072]" = torch.ops.aten.permute.default(arg98_1, [1, 0]);  arg98_1 = None
        addmm_19: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg99_1, view_151, permute_75);  arg99_1 = view_151 = permute_75 = None
        view_152: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_19, [2, 64, 3072]);  addmm_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_53: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_152, 0.5)
        pow_7: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_152, 3.0)
        mul_54: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_7, 0.044715);  pow_7 = None
        add_62: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_152, mul_54);  view_152 = mul_54 = None
        mul_55: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_62, 0.7978845608028654);  add_62 = None
        tanh_6: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_55);  mul_55 = None
        add_63: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_6, 1.0);  tanh_6 = None
        mul_56: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_53, add_63);  mul_53 = add_63 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_153: "f32[128, 3072]" = torch.ops.aten.view.default(mul_56, [128, 3072]);  mul_56 = None
        permute_76: "f32[3072, 768]" = torch.ops.aten.permute.default(arg100_1, [1, 0]);  arg100_1 = None
        addmm_20: "f32[128, 768]" = torch.ops.aten.addmm.default(arg101_1, view_153, permute_76);  arg101_1 = view_153 = permute_76 = None
        view_154: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_20, [2, 64, 768]);  addmm_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_64: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_59, view_154);  add_59 = view_154 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_14 = torch.ops.aten.var_mean.correction(add_64, [2], correction = 0, keepdim = True)
        getitem_28: "f32[2, 64, 1]" = var_mean_14[0]
        getitem_29: "f32[2, 64, 1]" = var_mean_14[1];  var_mean_14 = None
        add_65: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_28, 1e-05);  getitem_28 = None
        rsqrt_14: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_65);  add_65 = None
        sub_22: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_64, getitem_29);  getitem_29 = None
        mul_57: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_22, rsqrt_14);  sub_22 = rsqrt_14 = None
        mul_58: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_57, arg102_1);  mul_57 = arg102_1 = None
        add_66: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_58, arg103_1);  mul_58 = arg103_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        permute_77: "f32[768, 768]" = torch.ops.aten.permute.default(arg104_1, [1, 0]);  arg104_1 = None
        view_155: "f32[128, 768]" = torch.ops.aten.view.default(add_66, [128, 768])
        mm_21: "f32[128, 768]" = torch.ops.aten.mm.default(view_155, permute_77);  view_155 = permute_77 = None
        view_156: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_21, [2, 64, 768]);  mm_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        permute_78: "f32[768, 768]" = torch.ops.aten.permute.default(arg105_1, [1, 0]);  arg105_1 = None
        view_157: "f32[128, 768]" = torch.ops.aten.view.default(add_66, [128, 768])
        mm_22: "f32[128, 768]" = torch.ops.aten.mm.default(view_157, permute_78);  view_157 = permute_78 = None
        view_158: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_22, [2, 64, 768]);  mm_22 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        permute_79: "f32[768, 768]" = torch.ops.aten.permute.default(arg106_1, [1, 0]);  arg106_1 = None
        view_159: "f32[128, 768]" = torch.ops.aten.view.default(add_66, [128, 768]);  add_66 = None
        mm_23: "f32[128, 768]" = torch.ops.aten.mm.default(view_159, permute_79);  view_159 = permute_79 = None
        view_160: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_23, [2, 64, 768]);  mm_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_161: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_156, [2, 64, 12, 64]);  view_156 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_80: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_161, [0, 2, 1, 3]);  view_161 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_162: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_158, [2, 64, 12, 64]);  view_158 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_81: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_162, [0, 2, 1, 3]);  view_162 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_163: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_160, [2, 64, 12, 64]);  view_160 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_82: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_163, [0, 2, 1, 3]);  view_163 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_83: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_81, [0, 1, 3, 2])
        expand_30: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_80, [2, 12, 64, 64]);  permute_80 = None
        clone_51: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_30, memory_format = torch.contiguous_format);  expand_30 = None
        view_164: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_51, [24, 64, 64]);  clone_51 = None
        expand_31: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_83, [2, 12, 64, 64]);  permute_83 = None
        clone_52: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_31, memory_format = torch.contiguous_format);  expand_31 = None
        view_165: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_52, [24, 64, 64]);  clone_52 = None
        bmm_14: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_164, view_165);  view_164 = view_165 = None
        view_166: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_14, [2, 12, 64, 64]);  bmm_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_93: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg107_1, 2, 0, 64);  arg107_1 = None
        slice_94: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_93, 3, 0, 64);  slice_93 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant7 = self._tensor_constant7;  _tensor_constant7 = None
        full_default_10: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_9: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_94, view_166, full_default_10);  slice_94 = view_166 = full_default_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_67: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_9, where_1);  where_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_7: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_67, [-1], True)
        sub_23: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_67, amax_7);  add_67 = amax_7 = None
        exp_7: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_23);  sub_23 = None
        sum_8: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_7, [-1], True)
        div_7: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_7, sum_8);  exp_7 = sum_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_32: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_7, [2, 12, 64, 64]);  div_7 = None
        view_167: "f32[24, 64, 64]" = torch.ops.aten.view.default(expand_32, [24, 64, 64]);  expand_32 = None
        expand_33: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_82, [2, 12, 64, 64])
        clone_54: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_33, memory_format = torch.contiguous_format);  expand_33 = None
        view_168: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_54, [24, 64, 64]);  clone_54 = None
        bmm_15: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_167, view_168);  view_167 = view_168 = None
        view_169: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_15, [2, 12, 64, 64]);  bmm_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_84: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_169, [0, 2, 1, 3]);  view_169 = None
        clone_55: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_84, memory_format = torch.contiguous_format);  permute_84 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_170: "f32[2, 64, 768]" = torch.ops.aten.view.default(clone_55, [2, 64, 768]);  clone_55 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_171: "f32[128, 768]" = torch.ops.aten.view.default(view_170, [128, 768]);  view_170 = None
        permute_85: "f32[768, 768]" = torch.ops.aten.permute.default(arg108_1, [1, 0]);  arg108_1 = None
        addmm_21: "f32[128, 768]" = torch.ops.aten.addmm.default(arg109_1, view_171, permute_85);  arg109_1 = view_171 = permute_85 = None
        view_172: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_21, [2, 64, 768]);  addmm_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_68: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_172, add_64);  view_172 = add_64 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_15 = torch.ops.aten.var_mean.correction(add_68, [2], correction = 0, keepdim = True)
        getitem_30: "f32[2, 64, 1]" = var_mean_15[0]
        getitem_31: "f32[2, 64, 1]" = var_mean_15[1];  var_mean_15 = None
        add_69: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_30, 1e-05);  getitem_30 = None
        rsqrt_15: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_69);  add_69 = None
        sub_24: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_68, getitem_31);  getitem_31 = None
        mul_59: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_24, rsqrt_15);  sub_24 = rsqrt_15 = None
        mul_60: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_59, arg110_1);  mul_59 = arg110_1 = None
        add_70: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_60, arg111_1);  mul_60 = arg111_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_173: "f32[128, 768]" = torch.ops.aten.view.default(add_70, [128, 768]);  add_70 = None
        permute_86: "f32[768, 3072]" = torch.ops.aten.permute.default(arg112_1, [1, 0]);  arg112_1 = None
        addmm_22: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg113_1, view_173, permute_86);  arg113_1 = view_173 = permute_86 = None
        view_174: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_22, [2, 64, 3072]);  addmm_22 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_61: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_174, 0.5)
        pow_8: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_174, 3.0)
        mul_62: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_8, 0.044715);  pow_8 = None
        add_71: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_174, mul_62);  view_174 = mul_62 = None
        mul_63: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_71, 0.7978845608028654);  add_71 = None
        tanh_7: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_63);  mul_63 = None
        add_72: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_7, 1.0);  tanh_7 = None
        mul_64: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_61, add_72);  mul_61 = add_72 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_175: "f32[128, 3072]" = torch.ops.aten.view.default(mul_64, [128, 3072]);  mul_64 = None
        permute_87: "f32[3072, 768]" = torch.ops.aten.permute.default(arg114_1, [1, 0]);  arg114_1 = None
        addmm_23: "f32[128, 768]" = torch.ops.aten.addmm.default(arg115_1, view_175, permute_87);  arg115_1 = view_175 = permute_87 = None
        view_176: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_23, [2, 64, 768]);  addmm_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_73: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_68, view_176);  add_68 = view_176 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_16 = torch.ops.aten.var_mean.correction(add_73, [2], correction = 0, keepdim = True)
        getitem_32: "f32[2, 64, 1]" = var_mean_16[0]
        getitem_33: "f32[2, 64, 1]" = var_mean_16[1];  var_mean_16 = None
        add_74: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_32, 1e-05);  getitem_32 = None
        rsqrt_16: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_74);  add_74 = None
        sub_25: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_73, getitem_33);  getitem_33 = None
        mul_65: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_25, rsqrt_16);  sub_25 = rsqrt_16 = None
        mul_66: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_65, arg116_1);  mul_65 = arg116_1 = None
        add_75: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_66, arg117_1);  mul_66 = arg117_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        permute_88: "f32[768, 768]" = torch.ops.aten.permute.default(arg118_1, [1, 0]);  arg118_1 = None
        view_177: "f32[128, 768]" = torch.ops.aten.view.default(add_75, [128, 768])
        mm_24: "f32[128, 768]" = torch.ops.aten.mm.default(view_177, permute_88);  view_177 = permute_88 = None
        view_178: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_24, [2, 64, 768]);  mm_24 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        permute_89: "f32[768, 768]" = torch.ops.aten.permute.default(arg119_1, [1, 0]);  arg119_1 = None
        view_179: "f32[128, 768]" = torch.ops.aten.view.default(add_75, [128, 768])
        mm_25: "f32[128, 768]" = torch.ops.aten.mm.default(view_179, permute_89);  view_179 = permute_89 = None
        view_180: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_25, [2, 64, 768]);  mm_25 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        permute_90: "f32[768, 768]" = torch.ops.aten.permute.default(arg120_1, [1, 0]);  arg120_1 = None
        view_181: "f32[128, 768]" = torch.ops.aten.view.default(add_75, [128, 768]);  add_75 = None
        mm_26: "f32[128, 768]" = torch.ops.aten.mm.default(view_181, permute_90);  view_181 = permute_90 = None
        view_182: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_26, [2, 64, 768]);  mm_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_183: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_178, [2, 64, 12, 64]);  view_178 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_91: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_183, [0, 2, 1, 3]);  view_183 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_184: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_180, [2, 64, 12, 64]);  view_180 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_92: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_184, [0, 2, 1, 3]);  view_184 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_185: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_182, [2, 64, 12, 64]);  view_182 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_93: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_185, [0, 2, 1, 3]);  view_185 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_94: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_92, [0, 1, 3, 2])
        expand_34: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_91, [2, 12, 64, 64]);  permute_91 = None
        clone_58: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_34, memory_format = torch.contiguous_format);  expand_34 = None
        view_186: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_58, [24, 64, 64]);  clone_58 = None
        expand_35: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_94, [2, 12, 64, 64]);  permute_94 = None
        clone_59: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_35, memory_format = torch.contiguous_format);  expand_35 = None
        view_187: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_59, [24, 64, 64]);  clone_59 = None
        bmm_16: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_186, view_187);  view_186 = view_187 = None
        view_188: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_16, [2, 12, 64, 64]);  bmm_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_103: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg121_1, 2, 0, 64);  arg121_1 = None
        slice_104: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_103, 3, 0, 64);  slice_103 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant8 = self._tensor_constant8;  _tensor_constant8 = None
        full_default_11: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_10: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_104, view_188, full_default_11);  slice_104 = view_188 = full_default_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_76: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_10, where_1);  where_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_8: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_76, [-1], True)
        sub_26: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_76, amax_8);  add_76 = amax_8 = None
        exp_8: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_26);  sub_26 = None
        sum_9: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_8, [-1], True)
        div_8: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_8, sum_9);  exp_8 = sum_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_36: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_8, [2, 12, 64, 64]);  div_8 = None
        view_189: "f32[24, 64, 64]" = torch.ops.aten.view.default(expand_36, [24, 64, 64]);  expand_36 = None
        expand_37: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_93, [2, 12, 64, 64])
        clone_61: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_37, memory_format = torch.contiguous_format);  expand_37 = None
        view_190: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_61, [24, 64, 64]);  clone_61 = None
        bmm_17: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_189, view_190);  view_189 = view_190 = None
        view_191: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_17, [2, 12, 64, 64]);  bmm_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_95: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_191, [0, 2, 1, 3]);  view_191 = None
        clone_62: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_95, memory_format = torch.contiguous_format);  permute_95 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_192: "f32[2, 64, 768]" = torch.ops.aten.view.default(clone_62, [2, 64, 768]);  clone_62 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_193: "f32[128, 768]" = torch.ops.aten.view.default(view_192, [128, 768]);  view_192 = None
        permute_96: "f32[768, 768]" = torch.ops.aten.permute.default(arg122_1, [1, 0]);  arg122_1 = None
        addmm_24: "f32[128, 768]" = torch.ops.aten.addmm.default(arg123_1, view_193, permute_96);  arg123_1 = view_193 = permute_96 = None
        view_194: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_24, [2, 64, 768]);  addmm_24 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_77: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_194, add_73);  view_194 = add_73 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_17 = torch.ops.aten.var_mean.correction(add_77, [2], correction = 0, keepdim = True)
        getitem_34: "f32[2, 64, 1]" = var_mean_17[0]
        getitem_35: "f32[2, 64, 1]" = var_mean_17[1];  var_mean_17 = None
        add_78: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_34, 1e-05);  getitem_34 = None
        rsqrt_17: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_78);  add_78 = None
        sub_27: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_77, getitem_35);  getitem_35 = None
        mul_67: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_27, rsqrt_17);  sub_27 = rsqrt_17 = None
        mul_68: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_67, arg124_1);  mul_67 = arg124_1 = None
        add_79: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_68, arg125_1);  mul_68 = arg125_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_195: "f32[128, 768]" = torch.ops.aten.view.default(add_79, [128, 768]);  add_79 = None
        permute_97: "f32[768, 3072]" = torch.ops.aten.permute.default(arg126_1, [1, 0]);  arg126_1 = None
        addmm_25: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg127_1, view_195, permute_97);  arg127_1 = view_195 = permute_97 = None
        view_196: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_25, [2, 64, 3072]);  addmm_25 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_69: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_196, 0.5)
        pow_9: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_196, 3.0)
        mul_70: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_9, 0.044715);  pow_9 = None
        add_80: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_196, mul_70);  view_196 = mul_70 = None
        mul_71: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_80, 0.7978845608028654);  add_80 = None
        tanh_8: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_71);  mul_71 = None
        add_81: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_8, 1.0);  tanh_8 = None
        mul_72: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_69, add_81);  mul_69 = add_81 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_197: "f32[128, 3072]" = torch.ops.aten.view.default(mul_72, [128, 3072]);  mul_72 = None
        permute_98: "f32[3072, 768]" = torch.ops.aten.permute.default(arg128_1, [1, 0]);  arg128_1 = None
        addmm_26: "f32[128, 768]" = torch.ops.aten.addmm.default(arg129_1, view_197, permute_98);  arg129_1 = view_197 = permute_98 = None
        view_198: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_26, [2, 64, 768]);  addmm_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_82: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_77, view_198);  add_77 = view_198 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_18 = torch.ops.aten.var_mean.correction(add_82, [2], correction = 0, keepdim = True)
        getitem_36: "f32[2, 64, 1]" = var_mean_18[0]
        getitem_37: "f32[2, 64, 1]" = var_mean_18[1];  var_mean_18 = None
        add_83: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_36, 1e-05);  getitem_36 = None
        rsqrt_18: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_83);  add_83 = None
        sub_28: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_82, getitem_37);  getitem_37 = None
        mul_73: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_28, rsqrt_18);  sub_28 = rsqrt_18 = None
        mul_74: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_73, arg130_1);  mul_73 = arg130_1 = None
        add_84: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_74, arg131_1);  mul_74 = arg131_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        permute_99: "f32[768, 768]" = torch.ops.aten.permute.default(arg132_1, [1, 0]);  arg132_1 = None
        view_199: "f32[128, 768]" = torch.ops.aten.view.default(add_84, [128, 768])
        mm_27: "f32[128, 768]" = torch.ops.aten.mm.default(view_199, permute_99);  view_199 = permute_99 = None
        view_200: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_27, [2, 64, 768]);  mm_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        permute_100: "f32[768, 768]" = torch.ops.aten.permute.default(arg133_1, [1, 0]);  arg133_1 = None
        view_201: "f32[128, 768]" = torch.ops.aten.view.default(add_84, [128, 768])
        mm_28: "f32[128, 768]" = torch.ops.aten.mm.default(view_201, permute_100);  view_201 = permute_100 = None
        view_202: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_28, [2, 64, 768]);  mm_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        permute_101: "f32[768, 768]" = torch.ops.aten.permute.default(arg134_1, [1, 0]);  arg134_1 = None
        view_203: "f32[128, 768]" = torch.ops.aten.view.default(add_84, [128, 768]);  add_84 = None
        mm_29: "f32[128, 768]" = torch.ops.aten.mm.default(view_203, permute_101);  view_203 = permute_101 = None
        view_204: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_29, [2, 64, 768]);  mm_29 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_205: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_200, [2, 64, 12, 64]);  view_200 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_102: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_205, [0, 2, 1, 3]);  view_205 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_206: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_202, [2, 64, 12, 64]);  view_202 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_103: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_206, [0, 2, 1, 3]);  view_206 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_207: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_204, [2, 64, 12, 64]);  view_204 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_104: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_207, [0, 2, 1, 3]);  view_207 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_105: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_103, [0, 1, 3, 2])
        expand_38: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_102, [2, 12, 64, 64]);  permute_102 = None
        clone_65: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_38, memory_format = torch.contiguous_format);  expand_38 = None
        view_208: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_65, [24, 64, 64]);  clone_65 = None
        expand_39: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_105, [2, 12, 64, 64]);  permute_105 = None
        clone_66: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_39, memory_format = torch.contiguous_format);  expand_39 = None
        view_209: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_66, [24, 64, 64]);  clone_66 = None
        bmm_18: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_208, view_209);  view_208 = view_209 = None
        view_210: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_18, [2, 12, 64, 64]);  bmm_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_113: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg135_1, 2, 0, 64);  arg135_1 = None
        slice_114: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_113, 3, 0, 64);  slice_113 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant9 = self._tensor_constant9;  _tensor_constant9 = None
        full_default_12: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_11: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_114, view_210, full_default_12);  slice_114 = view_210 = full_default_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_85: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_11, where_1);  where_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_9: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_85, [-1], True)
        sub_29: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_85, amax_9);  add_85 = amax_9 = None
        exp_9: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_29);  sub_29 = None
        sum_10: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_9, [-1], True)
        div_9: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_9, sum_10);  exp_9 = sum_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_40: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_9, [2, 12, 64, 64]);  div_9 = None
        view_211: "f32[24, 64, 64]" = torch.ops.aten.view.default(expand_40, [24, 64, 64]);  expand_40 = None
        expand_41: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_104, [2, 12, 64, 64])
        clone_68: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_41, memory_format = torch.contiguous_format);  expand_41 = None
        view_212: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_68, [24, 64, 64]);  clone_68 = None
        bmm_19: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_211, view_212);  view_211 = view_212 = None
        view_213: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_19, [2, 12, 64, 64]);  bmm_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_106: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_213, [0, 2, 1, 3]);  view_213 = None
        clone_69: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_106, memory_format = torch.contiguous_format);  permute_106 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_214: "f32[2, 64, 768]" = torch.ops.aten.view.default(clone_69, [2, 64, 768]);  clone_69 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_215: "f32[128, 768]" = torch.ops.aten.view.default(view_214, [128, 768]);  view_214 = None
        permute_107: "f32[768, 768]" = torch.ops.aten.permute.default(arg136_1, [1, 0]);  arg136_1 = None
        addmm_27: "f32[128, 768]" = torch.ops.aten.addmm.default(arg137_1, view_215, permute_107);  arg137_1 = view_215 = permute_107 = None
        view_216: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_27, [2, 64, 768]);  addmm_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_86: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_216, add_82);  view_216 = add_82 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_19 = torch.ops.aten.var_mean.correction(add_86, [2], correction = 0, keepdim = True)
        getitem_38: "f32[2, 64, 1]" = var_mean_19[0]
        getitem_39: "f32[2, 64, 1]" = var_mean_19[1];  var_mean_19 = None
        add_87: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_38, 1e-05);  getitem_38 = None
        rsqrt_19: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_87);  add_87 = None
        sub_30: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_86, getitem_39);  getitem_39 = None
        mul_75: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_30, rsqrt_19);  sub_30 = rsqrt_19 = None
        mul_76: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_75, arg138_1);  mul_75 = arg138_1 = None
        add_88: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_76, arg139_1);  mul_76 = arg139_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_217: "f32[128, 768]" = torch.ops.aten.view.default(add_88, [128, 768]);  add_88 = None
        permute_108: "f32[768, 3072]" = torch.ops.aten.permute.default(arg140_1, [1, 0]);  arg140_1 = None
        addmm_28: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg141_1, view_217, permute_108);  arg141_1 = view_217 = permute_108 = None
        view_218: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_28, [2, 64, 3072]);  addmm_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_77: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_218, 0.5)
        pow_10: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_218, 3.0)
        mul_78: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_10, 0.044715);  pow_10 = None
        add_89: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_218, mul_78);  view_218 = mul_78 = None
        mul_79: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_89, 0.7978845608028654);  add_89 = None
        tanh_9: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_79);  mul_79 = None
        add_90: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_9, 1.0);  tanh_9 = None
        mul_80: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_77, add_90);  mul_77 = add_90 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_219: "f32[128, 3072]" = torch.ops.aten.view.default(mul_80, [128, 3072]);  mul_80 = None
        permute_109: "f32[3072, 768]" = torch.ops.aten.permute.default(arg142_1, [1, 0]);  arg142_1 = None
        addmm_29: "f32[128, 768]" = torch.ops.aten.addmm.default(arg143_1, view_219, permute_109);  arg143_1 = view_219 = permute_109 = None
        view_220: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_29, [2, 64, 768]);  addmm_29 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_91: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_86, view_220);  add_86 = view_220 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_20 = torch.ops.aten.var_mean.correction(add_91, [2], correction = 0, keepdim = True)
        getitem_40: "f32[2, 64, 1]" = var_mean_20[0]
        getitem_41: "f32[2, 64, 1]" = var_mean_20[1];  var_mean_20 = None
        add_92: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_40, 1e-05);  getitem_40 = None
        rsqrt_20: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_92);  add_92 = None
        sub_31: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_91, getitem_41);  getitem_41 = None
        mul_81: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_31, rsqrt_20);  sub_31 = rsqrt_20 = None
        mul_82: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_81, arg144_1);  mul_81 = arg144_1 = None
        add_93: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_82, arg145_1);  mul_82 = arg145_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        permute_110: "f32[768, 768]" = torch.ops.aten.permute.default(arg146_1, [1, 0]);  arg146_1 = None
        view_221: "f32[128, 768]" = torch.ops.aten.view.default(add_93, [128, 768])
        mm_30: "f32[128, 768]" = torch.ops.aten.mm.default(view_221, permute_110);  view_221 = permute_110 = None
        view_222: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_30, [2, 64, 768]);  mm_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        permute_111: "f32[768, 768]" = torch.ops.aten.permute.default(arg147_1, [1, 0]);  arg147_1 = None
        view_223: "f32[128, 768]" = torch.ops.aten.view.default(add_93, [128, 768])
        mm_31: "f32[128, 768]" = torch.ops.aten.mm.default(view_223, permute_111);  view_223 = permute_111 = None
        view_224: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_31, [2, 64, 768]);  mm_31 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        permute_112: "f32[768, 768]" = torch.ops.aten.permute.default(arg148_1, [1, 0]);  arg148_1 = None
        view_225: "f32[128, 768]" = torch.ops.aten.view.default(add_93, [128, 768]);  add_93 = None
        mm_32: "f32[128, 768]" = torch.ops.aten.mm.default(view_225, permute_112);  view_225 = permute_112 = None
        view_226: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_32, [2, 64, 768]);  mm_32 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_227: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_222, [2, 64, 12, 64]);  view_222 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_113: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_227, [0, 2, 1, 3]);  view_227 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_228: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_224, [2, 64, 12, 64]);  view_224 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_114: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_228, [0, 2, 1, 3]);  view_228 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_229: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_226, [2, 64, 12, 64]);  view_226 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_115: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_229, [0, 2, 1, 3]);  view_229 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_116: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_114, [0, 1, 3, 2])
        expand_42: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_113, [2, 12, 64, 64]);  permute_113 = None
        clone_72: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_42, memory_format = torch.contiguous_format);  expand_42 = None
        view_230: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_72, [24, 64, 64]);  clone_72 = None
        expand_43: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_116, [2, 12, 64, 64]);  permute_116 = None
        clone_73: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_43, memory_format = torch.contiguous_format);  expand_43 = None
        view_231: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_73, [24, 64, 64]);  clone_73 = None
        bmm_20: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_230, view_231);  view_230 = view_231 = None
        view_232: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_20, [2, 12, 64, 64]);  bmm_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_123: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg149_1, 2, 0, 64);  arg149_1 = None
        slice_124: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_123, 3, 0, 64);  slice_123 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant10 = self._tensor_constant10;  _tensor_constant10 = None
        full_default_13: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_12: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_124, view_232, full_default_13);  slice_124 = view_232 = full_default_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_94: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_12, where_1);  where_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_10: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_94, [-1], True)
        sub_32: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_94, amax_10);  add_94 = amax_10 = None
        exp_10: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_32);  sub_32 = None
        sum_11: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_10, [-1], True)
        div_10: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_10, sum_11);  exp_10 = sum_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_44: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_10, [2, 12, 64, 64]);  div_10 = None
        view_233: "f32[24, 64, 64]" = torch.ops.aten.view.default(expand_44, [24, 64, 64]);  expand_44 = None
        expand_45: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_115, [2, 12, 64, 64])
        clone_75: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_45, memory_format = torch.contiguous_format);  expand_45 = None
        view_234: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_75, [24, 64, 64]);  clone_75 = None
        bmm_21: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_233, view_234);  view_233 = view_234 = None
        view_235: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_21, [2, 12, 64, 64]);  bmm_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_117: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_235, [0, 2, 1, 3]);  view_235 = None
        clone_76: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_117, memory_format = torch.contiguous_format);  permute_117 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_236: "f32[2, 64, 768]" = torch.ops.aten.view.default(clone_76, [2, 64, 768]);  clone_76 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_237: "f32[128, 768]" = torch.ops.aten.view.default(view_236, [128, 768]);  view_236 = None
        permute_118: "f32[768, 768]" = torch.ops.aten.permute.default(arg150_1, [1, 0]);  arg150_1 = None
        addmm_30: "f32[128, 768]" = torch.ops.aten.addmm.default(arg151_1, view_237, permute_118);  arg151_1 = view_237 = permute_118 = None
        view_238: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_30, [2, 64, 768]);  addmm_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_95: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_238, add_91);  view_238 = add_91 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_21 = torch.ops.aten.var_mean.correction(add_95, [2], correction = 0, keepdim = True)
        getitem_42: "f32[2, 64, 1]" = var_mean_21[0]
        getitem_43: "f32[2, 64, 1]" = var_mean_21[1];  var_mean_21 = None
        add_96: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_42, 1e-05);  getitem_42 = None
        rsqrt_21: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_96);  add_96 = None
        sub_33: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_95, getitem_43);  getitem_43 = None
        mul_83: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_33, rsqrt_21);  sub_33 = rsqrt_21 = None
        mul_84: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_83, arg152_1);  mul_83 = arg152_1 = None
        add_97: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_84, arg153_1);  mul_84 = arg153_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_239: "f32[128, 768]" = torch.ops.aten.view.default(add_97, [128, 768]);  add_97 = None
        permute_119: "f32[768, 3072]" = torch.ops.aten.permute.default(arg154_1, [1, 0]);  arg154_1 = None
        addmm_31: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg155_1, view_239, permute_119);  arg155_1 = view_239 = permute_119 = None
        view_240: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_31, [2, 64, 3072]);  addmm_31 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_85: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_240, 0.5)
        pow_11: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_240, 3.0)
        mul_86: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_11, 0.044715);  pow_11 = None
        add_98: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_240, mul_86);  view_240 = mul_86 = None
        mul_87: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_98, 0.7978845608028654);  add_98 = None
        tanh_10: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_87);  mul_87 = None
        add_99: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_10, 1.0);  tanh_10 = None
        mul_88: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_85, add_99);  mul_85 = add_99 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_241: "f32[128, 3072]" = torch.ops.aten.view.default(mul_88, [128, 3072]);  mul_88 = None
        permute_120: "f32[3072, 768]" = torch.ops.aten.permute.default(arg156_1, [1, 0]);  arg156_1 = None
        addmm_32: "f32[128, 768]" = torch.ops.aten.addmm.default(arg157_1, view_241, permute_120);  arg157_1 = view_241 = permute_120 = None
        view_242: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_32, [2, 64, 768]);  addmm_32 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_100: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_95, view_242);  add_95 = view_242 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_22 = torch.ops.aten.var_mean.correction(add_100, [2], correction = 0, keepdim = True)
        getitem_44: "f32[2, 64, 1]" = var_mean_22[0]
        getitem_45: "f32[2, 64, 1]" = var_mean_22[1];  var_mean_22 = None
        add_101: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_44, 1e-05);  getitem_44 = None
        rsqrt_22: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_101);  add_101 = None
        sub_34: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_100, getitem_45);  getitem_45 = None
        mul_89: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_34, rsqrt_22);  sub_34 = rsqrt_22 = None
        mul_90: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_89, arg158_1);  mul_89 = arg158_1 = None
        add_102: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_90, arg159_1);  mul_90 = arg159_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        permute_121: "f32[768, 768]" = torch.ops.aten.permute.default(arg160_1, [1, 0]);  arg160_1 = None
        view_243: "f32[128, 768]" = torch.ops.aten.view.default(add_102, [128, 768])
        mm_33: "f32[128, 768]" = torch.ops.aten.mm.default(view_243, permute_121);  view_243 = permute_121 = None
        view_244: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_33, [2, 64, 768]);  mm_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        permute_122: "f32[768, 768]" = torch.ops.aten.permute.default(arg161_1, [1, 0]);  arg161_1 = None
        view_245: "f32[128, 768]" = torch.ops.aten.view.default(add_102, [128, 768])
        mm_34: "f32[128, 768]" = torch.ops.aten.mm.default(view_245, permute_122);  view_245 = permute_122 = None
        view_246: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_34, [2, 64, 768]);  mm_34 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        permute_123: "f32[768, 768]" = torch.ops.aten.permute.default(arg162_1, [1, 0]);  arg162_1 = None
        view_247: "f32[128, 768]" = torch.ops.aten.view.default(add_102, [128, 768]);  add_102 = None
        mm_35: "f32[128, 768]" = torch.ops.aten.mm.default(view_247, permute_123);  view_247 = permute_123 = None
        view_248: "f32[2, 64, 768]" = torch.ops.aten.view.default(mm_35, [2, 64, 768]);  mm_35 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_249: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_244, [2, 64, 12, 64]);  view_244 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_124: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_249, [0, 2, 1, 3]);  view_249 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_250: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_246, [2, 64, 12, 64]);  view_246 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_125: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_250, [0, 2, 1, 3]);  view_250 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_251: "f32[2, 64, 12, 64]" = torch.ops.aten.view.default(view_248, [2, 64, 12, 64]);  view_248 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_126: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_251, [0, 2, 1, 3]);  view_251 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_127: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_125, [0, 1, 3, 2])
        expand_46: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_124, [2, 12, 64, 64]);  permute_124 = None
        clone_79: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_46, memory_format = torch.contiguous_format);  expand_46 = None
        view_252: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_79, [24, 64, 64]);  clone_79 = None
        expand_47: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_127, [2, 12, 64, 64]);  permute_127 = None
        clone_80: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_47, memory_format = torch.contiguous_format);  expand_47 = None
        view_253: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_80, [24, 64, 64]);  clone_80 = None
        bmm_22: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_252, view_253);  view_252 = view_253 = None
        view_254: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_22, [2, 12, 64, 64]);  bmm_22 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_133: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg163_1, 2, 0, 64);  arg163_1 = None
        slice_134: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_133, 3, 0, 64);  slice_133 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant11 = self._tensor_constant11;  _tensor_constant11 = None
        full_default_14: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_13: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_134, view_254, full_default_14);  slice_134 = view_254 = full_default_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_103: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_13, where_1);  where_13 = where_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_11: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_103, [-1], True)
        sub_35: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_103, amax_11);  add_103 = amax_11 = None
        exp_11: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_35);  sub_35 = None
        sum_12: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_11, [-1], True)
        div_11: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_11, sum_12);  exp_11 = sum_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_48: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_11, [2, 12, 64, 64]);  div_11 = None
        view_255: "f32[24, 64, 64]" = torch.ops.aten.view.default(expand_48, [24, 64, 64]);  expand_48 = None
        expand_49: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_126, [2, 12, 64, 64])
        clone_82: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_49, memory_format = torch.contiguous_format);  expand_49 = None
        view_256: "f32[24, 64, 64]" = torch.ops.aten.view.default(clone_82, [24, 64, 64]);  clone_82 = None
        bmm_23: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_255, view_256);  view_255 = view_256 = None
        view_257: "f32[2, 12, 64, 64]" = torch.ops.aten.view.default(bmm_23, [2, 12, 64, 64]);  bmm_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_128: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_257, [0, 2, 1, 3]);  view_257 = None
        clone_83: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_128, memory_format = torch.contiguous_format);  permute_128 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_258: "f32[2, 64, 768]" = torch.ops.aten.view.default(clone_83, [2, 64, 768]);  clone_83 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_259: "f32[128, 768]" = torch.ops.aten.view.default(view_258, [128, 768]);  view_258 = None
        permute_129: "f32[768, 768]" = torch.ops.aten.permute.default(arg164_1, [1, 0]);  arg164_1 = None
        addmm_33: "f32[128, 768]" = torch.ops.aten.addmm.default(arg165_1, view_259, permute_129);  arg165_1 = view_259 = permute_129 = None
        view_260: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_33, [2, 64, 768]);  addmm_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_104: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_260, add_100);  view_260 = add_100 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_23 = torch.ops.aten.var_mean.correction(add_104, [2], correction = 0, keepdim = True)
        getitem_46: "f32[2, 64, 1]" = var_mean_23[0]
        getitem_47: "f32[2, 64, 1]" = var_mean_23[1];  var_mean_23 = None
        add_105: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_46, 1e-05);  getitem_46 = None
        rsqrt_23: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_105);  add_105 = None
        sub_36: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_104, getitem_47);  getitem_47 = None
        mul_91: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_36, rsqrt_23);  sub_36 = rsqrt_23 = None
        mul_92: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_91, arg166_1);  mul_91 = arg166_1 = None
        add_106: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_92, arg167_1);  mul_92 = arg167_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_261: "f32[128, 768]" = torch.ops.aten.view.default(add_106, [128, 768]);  add_106 = None
        permute_130: "f32[768, 3072]" = torch.ops.aten.permute.default(arg168_1, [1, 0]);  arg168_1 = None
        addmm_34: "f32[128, 3072]" = torch.ops.aten.addmm.default(arg169_1, view_261, permute_130);  arg169_1 = view_261 = permute_130 = None
        view_262: "f32[2, 64, 3072]" = torch.ops.aten.view.default(addmm_34, [2, 64, 3072]);  addmm_34 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_93: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_262, 0.5)
        pow_12: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_262, 3.0)
        mul_94: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_12, 0.044715);  pow_12 = None
        add_107: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_262, mul_94);  view_262 = mul_94 = None
        mul_95: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_107, 0.7978845608028654);  add_107 = None
        tanh_11: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_95);  mul_95 = None
        add_108: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_11, 1.0);  tanh_11 = None
        mul_96: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_93, add_108);  mul_93 = add_108 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_263: "f32[128, 3072]" = torch.ops.aten.view.default(mul_96, [128, 3072]);  mul_96 = None
        permute_131: "f32[3072, 768]" = torch.ops.aten.permute.default(arg170_1, [1, 0]);  arg170_1 = None
        addmm_35: "f32[128, 768]" = torch.ops.aten.addmm.default(arg171_1, view_263, permute_131);  arg171_1 = view_263 = permute_131 = None
        view_264: "f32[2, 64, 768]" = torch.ops.aten.view.default(addmm_35, [2, 64, 768]);  addmm_35 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_109: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_104, view_264);  add_104 = view_264 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:656 in forward, code: hidden_states = self.ln_f(hidden_states)
        var_mean_24 = torch.ops.aten.var_mean.correction(add_109, [2], correction = 0, keepdim = True)
        getitem_48: "f32[2, 64, 1]" = var_mean_24[0]
        getitem_49: "f32[2, 64, 1]" = var_mean_24[1];  var_mean_24 = None
        add_110: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_48, 1e-05);  getitem_48 = None
        rsqrt_24: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_110);  add_110 = None
        sub_37: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_109, getitem_49);  add_109 = getitem_49 = None
        mul_97: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_37, rsqrt_24);  sub_37 = rsqrt_24 = None
        mul_98: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_97, arg172_1);  mul_97 = arg172_1 = None
        add_111: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_98, arg173_1);  mul_98 = arg173_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:658 in forward, code: hidden_states = hidden_states.view(output_shape)
        view_265: "f32[2, 64, 768]" = torch.ops.aten.view.default(add_111, [-1, 64, 768]);  add_111 = None
        return (view_265, permute_4, permute_5, permute_15, permute_16, permute_26, permute_27, permute_37, permute_38, permute_48, permute_49, permute_59, permute_60, permute_70, permute_71, permute_81, permute_82, permute_92, permute_93, permute_103, permute_104, permute_114, permute_115, permute_125, permute_126)
        

# ===== run_2025_10_19_03_43_12_574129-pid_19/torchinductor/model__0_inference_0.0/fx_graph_runnable.py =====

import torch
from torch import tensor, device
import torch.fx as fx
from torch._dynamo.testing import rand_strided
from math import inf
import torch._inductor.inductor_prims

import torch._dynamo.config
import torch._inductor.config
import torch._functorch.config
import torch.fx.experimental._config
torch._dynamo.config.traceable_tensor_subclasses = set()
torch._dynamo.config._ddp_optimization_mode = ['ddp_optimizer', 'python_reducer', 'python_reducer_without_compiled_forward', 'no_optimization']
torch._dynamo.config._save_config_ignore = {'constant_functions', 'repro_after', 'skipfiles_inline_module_allowlist', 'repro_level'}
torch._dynamo.config.reorderable_logging_functions = set()
torch._inductor.config.pre_grad_fusion_options = {}
torch._inductor.config.post_grad_fusion_options = {}
torch._inductor.config.fx_passes_numeric_check = {'pre_grad': False, 'precision': 0.0001, 'num_iterations': 1, 'requires_optimizer': True}
torch._inductor.config.reorder_for_compute_comm_overlap_passes = ['reorder_compute_for_overlap', 'sink_waits', 'raise_comms']
torch._inductor.config.max_autotune = True
torch._inductor.config.coordinate_descent_tuning = True
torch._inductor.config._fuse_ddp_communication_passes = ['fuse_ddp_with_concat_op', 'schedule_comm_wait']
torch._inductor.config.triton.cudagraphs = True
torch._inductor.config.aot_inductor.metadata = {}
torch._inductor.config.aot_inductor.presets = {}
torch._inductor.config.rocm.arch = []
torch._inductor.config.rocm.ck_supported_arch = ['gfx90a', 'gfx940', 'gfx941', 'gfx942']
torch._inductor.config.trace.enabled = False
torch._inductor.config.trace.save_real_tensors = False
torch._inductor.config._save_config_ignore = ['trace.upload_tar', 'joint_custom_pre_pass', 'joint_custom_post_pass', 'pre_grad_custom_pass']
torch._inductor.config._cache_config_ignore_prefix = ['trace', 'cuda.cutlass_dir', 'worker_start_method', 'compile_threads', 'post_grad_custom_post_pass', 'post_grad_custom_pre_pass', 'always_complex_memory_overlap_TESTING_ONLY']
torch._inductor.config.external_matmul = []
torch._functorch.config.functionalize_rng_ops = False
torch._functorch.config.debug_partitioner = True
torch._functorch.config.fake_tensor_allow_unsafe_data_ptr_access = True
torch._functorch.config.unlift_effect_tokens = True



isolate_fails_code_str = None




# torch version: 2.6.0+cu124
# torch cuda version: 12.4
# torch git version: 2236df1770800ffea5697b11b0bb0d910b2e59e1


# CUDA Info: 
# nvcc: NVIDIA (R) Cuda compiler driver 
# Copyright (c) 2005-2024 NVIDIA Corporation 
# Built on Thu_Jun__6_02:18:23_PDT_2024 
# Cuda compilation tools, release 12.5, V12.5.82 
# Build cuda_12.5.r12.5/compiler.34385749_0 

# GPU Hardware Info: 
# Tesla T4 : 2 


from torch.nn import *
class Repro(torch.nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.register_buffer('_tensor_constant0', tensor(-3.4028e+38, device='cuda:0').cuda())
        self.register_buffer('_tensor_constant1', tensor(-3.4028e+38, device='cuda:0').cuda())
        self.register_buffer('_tensor_constant2', tensor(-3.4028e+38, device='cuda:0').cuda())
        self.register_buffer('_tensor_constant3', tensor(-3.4028e+38, device='cuda:0').cuda())
        self.register_buffer('_tensor_constant4', tensor(-3.4028e+38, device='cuda:0').cuda())
        self.register_buffer('_tensor_constant5', tensor(-3.4028e+38, device='cuda:0').cuda())
        self.register_buffer('_tensor_constant6', tensor(-3.4028e+38, device='cuda:0').cuda())
        self.register_buffer('_tensor_constant7', tensor(-3.4028e+38, device='cuda:0').cuda())
        self.register_buffer('_tensor_constant8', tensor(-3.4028e+38, device='cuda:0').cuda())
        self.register_buffer('_tensor_constant9', tensor(-3.4028e+38, device='cuda:0').cuda())
        self.register_buffer('_tensor_constant10', tensor(-3.4028e+38, device='cuda:0').cuda())
        self.register_buffer('_tensor_constant11', tensor(-3.4028e+38, device='cuda:0').cuda())

    
    
    def forward(self, arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1, arg7_1, arg8_1, arg9_1, arg10_1, arg11_1, arg12_1, arg13_1, arg14_1, arg15_1, arg16_1, arg17_1, arg18_1, arg19_1, arg20_1, arg21_1, arg22_1, arg23_1, arg24_1, arg25_1, arg26_1, arg27_1, arg28_1, arg29_1, arg30_1, arg31_1, arg32_1, arg33_1, arg34_1, arg35_1, arg36_1, arg37_1, arg38_1, arg39_1, arg40_1, arg41_1, arg42_1, arg43_1, arg44_1, arg45_1, arg46_1, arg47_1, arg48_1, arg49_1, arg50_1, arg51_1, arg52_1, arg53_1, arg54_1, arg55_1, arg56_1, arg57_1, arg58_1, arg59_1, arg60_1, arg61_1, arg62_1, arg63_1, arg64_1, arg65_1, arg66_1, arg67_1, arg68_1, arg69_1, arg70_1, arg71_1, arg72_1, arg73_1, arg74_1, arg75_1, arg76_1, arg77_1, arg78_1, arg79_1, arg80_1, arg81_1, arg82_1, arg83_1, arg84_1, arg85_1, arg86_1, arg87_1, arg88_1, arg89_1, arg90_1, arg91_1, arg92_1, arg93_1, arg94_1, arg95_1, arg96_1, arg97_1, arg98_1, arg99_1, arg100_1, arg101_1, arg102_1, arg103_1, arg104_1, arg105_1, arg106_1, arg107_1, arg108_1, arg109_1, arg110_1, arg111_1, arg112_1, arg113_1, arg114_1, arg115_1, arg116_1, arg117_1, arg118_1, arg119_1, arg120_1, arg121_1, arg122_1, arg123_1, arg124_1, arg125_1, arg126_1, arg127_1, arg128_1, arg129_1, arg130_1, arg131_1, arg132_1, arg133_1, arg134_1, arg135_1, arg136_1, arg137_1, arg138_1, arg139_1, arg140_1, arg141_1, arg142_1, arg143_1, arg144_1, arg145_1, arg146_1, arg147_1, arg148_1, arg149_1, arg150_1, arg151_1, arg152_1, arg153_1, arg154_1, arg155_1, arg156_1, arg157_1, arg158_1, arg159_1, arg160_1, arg161_1, arg162_1, arg163_1, arg164_1, arg165_1, arg166_1, arg167_1, arg168_1, arg169_1, arg170_1, arg171_1, arg172_1, arg173_1):
        embedding = torch.ops.aten.embedding.default(arg1_1, arg0_1);  arg1_1 = arg0_1 = None
        iota = torch.ops.prims.iota.default(64, start = 0, step = 1, dtype = torch.int64, device = device(type='cuda', index=0), requires_grad = False)
        unsqueeze = torch.ops.aten.unsqueeze.default(iota, 0)
        full_default = torch.ops.aten.full.default([64, 64], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        iota_1 = torch.ops.prims.iota.default(64, start = 0, step = 1, dtype = torch.int64, device = device(type='cuda', index=0), requires_grad = False)
        unsqueeze_1 = torch.ops.aten.unsqueeze.default(iota_1, -2);  iota_1 = None
        iota_2 = torch.ops.prims.iota.default(64, start = 0, step = 1, dtype = torch.int64, device = device(type='cuda', index=0), requires_grad = False)
        unsqueeze_2 = torch.ops.aten.unsqueeze.default(iota_2, -1);  iota_2 = None
        sub = torch.ops.aten.sub.Tensor(unsqueeze_1, unsqueeze_2);  unsqueeze_1 = unsqueeze_2 = None
        ge = torch.ops.aten.ge.Scalar(sub, 1);  sub = None
        full_default_1 = torch.ops.aten.full.default([], 0.0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where = torch.ops.aten.where.self(ge, full_default, full_default_1);  ge = full_default = full_default_1 = None
        iota_3 = torch.ops.prims.iota.default(64, start = 0, step = 1, dtype = torch.int64, device = device(type='cuda', index=0), requires_grad = False)
        view = torch.ops.aten.view.default(iota, [-1, 1]);  iota = None
        gt = torch.ops.aten.gt.Tensor(iota_3, view);  iota_3 = view = None
        mul = torch.ops.aten.mul.Tensor(where, gt);  where = gt = None
        unsqueeze_5 = torch.ops.aten.unsqueeze.default(mul, 0);  mul = None
        unsqueeze_6 = torch.ops.aten.unsqueeze.default(unsqueeze_5, 1);  unsqueeze_5 = None
        expand_1 = torch.ops.aten.expand.default(unsqueeze_6, [2, 1, -1, -1]);  unsqueeze_6 = None
        clone = torch.ops.aten.clone.default(expand_1);  expand_1 = None
        unsqueeze_7 = torch.ops.aten.unsqueeze.default(arg2_1, 1);  arg2_1 = None
        unsqueeze_8 = torch.ops.aten.unsqueeze.default(unsqueeze_7, 2);  unsqueeze_7 = None
        add = torch.ops.aten.add.Tensor(clone, unsqueeze_8);  unsqueeze_8 = None
        eq = torch.ops.aten.eq.Scalar(add, 0);  add = None
        full_default_2 = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where_1 = torch.ops.aten.where.self(eq, full_default_2, clone);  eq = full_default_2 = clone = None
        embedding_1 = torch.ops.aten.embedding.default(arg3_1, unsqueeze);  arg3_1 = unsqueeze = None
        add_1 = torch.ops.aten.add.Tensor(embedding, embedding_1);  embedding = embedding_1 = None
        var_mean = torch.ops.aten.var_mean.correction(add_1, [2], correction = 0, keepdim = True)
        getitem = var_mean[0]
        getitem_1 = var_mean[1];  var_mean = None
        add_2 = torch.ops.aten.add.Tensor(getitem, 1e-05);  getitem = None
        rsqrt = torch.ops.aten.rsqrt.default(add_2);  add_2 = None
        sub_1 = torch.ops.aten.sub.Tensor(add_1, getitem_1);  getitem_1 = None
        mul_1 = torch.ops.aten.mul.Tensor(sub_1, rsqrt);  sub_1 = rsqrt = None
        mul_2 = torch.ops.aten.mul.Tensor(mul_1, arg4_1);  mul_1 = arg4_1 = None
        add_3 = torch.ops.aten.add.Tensor(mul_2, arg5_1);  mul_2 = arg5_1 = None
        permute = torch.ops.aten.permute.default(arg6_1, [1, 0]);  arg6_1 = None
        view_1 = torch.ops.aten.view.default(add_3, [128, 768])
        mm = torch.ops.aten.mm.default(view_1, permute);  view_1 = permute = None
        view_2 = torch.ops.aten.view.default(mm, [2, 64, 768]);  mm = None
        permute_1 = torch.ops.aten.permute.default(arg7_1, [1, 0]);  arg7_1 = None
        view_3 = torch.ops.aten.view.default(add_3, [128, 768])
        mm_1 = torch.ops.aten.mm.default(view_3, permute_1);  view_3 = permute_1 = None
        view_4 = torch.ops.aten.view.default(mm_1, [2, 64, 768]);  mm_1 = None
        permute_2 = torch.ops.aten.permute.default(arg8_1, [1, 0]);  arg8_1 = None
        view_5 = torch.ops.aten.view.default(add_3, [128, 768]);  add_3 = None
        mm_2 = torch.ops.aten.mm.default(view_5, permute_2);  view_5 = permute_2 = None
        view_6 = torch.ops.aten.view.default(mm_2, [2, 64, 768]);  mm_2 = None
        view_7 = torch.ops.aten.view.default(view_2, [2, 64, 12, 64]);  view_2 = None
        permute_3 = torch.ops.aten.permute.default(view_7, [0, 2, 1, 3]);  view_7 = None
        view_8 = torch.ops.aten.view.default(view_4, [2, 64, 12, 64]);  view_4 = None
        permute_4 = torch.ops.aten.permute.default(view_8, [0, 2, 1, 3]);  view_8 = None
        view_9 = torch.ops.aten.view.default(view_6, [2, 64, 12, 64]);  view_6 = None
        permute_5 = torch.ops.aten.permute.default(view_9, [0, 2, 1, 3]);  view_9 = None
        permute_6 = torch.ops.aten.permute.default(permute_4, [0, 1, 3, 2])
        expand_2 = torch.ops.aten.expand.default(permute_3, [2, 12, 64, 64]);  permute_3 = None
        clone_2 = torch.ops.aten.clone.default(expand_2, memory_format = torch.contiguous_format);  expand_2 = None
        view_10 = torch.ops.aten.view.default(clone_2, [24, 64, 64]);  clone_2 = None
        expand_3 = torch.ops.aten.expand.default(permute_6, [2, 12, 64, 64]);  permute_6 = None
        clone_3 = torch.ops.aten.clone.default(expand_3, memory_format = torch.contiguous_format);  expand_3 = None
        view_11 = torch.ops.aten.view.default(clone_3, [24, 64, 64]);  clone_3 = None
        bmm = torch.ops.aten.bmm.default(view_10, view_11);  view_10 = view_11 = None
        view_12 = torch.ops.aten.view.default(bmm, [2, 12, 64, 64]);  bmm = None
        slice_23 = torch.ops.aten.slice.Tensor(arg9_1, 2, 0, 64);  arg9_1 = None
        slice_24 = torch.ops.aten.slice.Tensor(slice_23, 3, 0, 64);  slice_23 = None
        _tensor_constant0 = self._tensor_constant0;  _tensor_constant0 = None
        full_default_3 = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where_2 = torch.ops.aten.where.self(slice_24, view_12, full_default_3);  slice_24 = view_12 = full_default_3 = None
        add_4 = torch.ops.aten.add.Tensor(where_2, where_1);  where_2 = None
        amax = torch.ops.aten.amax.default(add_4, [-1], True)
        sub_2 = torch.ops.aten.sub.Tensor(add_4, amax);  add_4 = amax = None
        exp = torch.ops.aten.exp.default(sub_2);  sub_2 = None
        sum_1 = torch.ops.aten.sum.dim_IntList(exp, [-1], True)
        div = torch.ops.aten.div.Tensor(exp, sum_1);  exp = sum_1 = None
        expand_4 = torch.ops.aten.expand.default(div, [2, 12, 64, 64]);  div = None
        view_13 = torch.ops.aten.view.default(expand_4, [24, 64, 64]);  expand_4 = None
        expand_5 = torch.ops.aten.expand.default(permute_5, [2, 12, 64, 64])
        clone_5 = torch.ops.aten.clone.default(expand_5, memory_format = torch.contiguous_format);  expand_5 = None
        view_14 = torch.ops.aten.view.default(clone_5, [24, 64, 64]);  clone_5 = None
        bmm_1 = torch.ops.aten.bmm.default(view_13, view_14);  view_13 = view_14 = None
        view_15 = torch.ops.aten.view.default(bmm_1, [2, 12, 64, 64]);  bmm_1 = None
        permute_7 = torch.ops.aten.permute.default(view_15, [0, 2, 1, 3]);  view_15 = None
        clone_6 = torch.ops.aten.clone.default(permute_7, memory_format = torch.contiguous_format);  permute_7 = None
        view_16 = torch.ops.aten.view.default(clone_6, [2, 64, 768]);  clone_6 = None
        view_17 = torch.ops.aten.view.default(view_16, [128, 768]);  view_16 = None
        permute_8 = torch.ops.aten.permute.default(arg10_1, [1, 0]);  arg10_1 = None
        addmm = torch.ops.aten.addmm.default(arg11_1, view_17, permute_8);  arg11_1 = view_17 = permute_8 = None
        view_18 = torch.ops.aten.view.default(addmm, [2, 64, 768]);  addmm = None
        add_5 = torch.ops.aten.add.Tensor(view_18, add_1);  view_18 = add_1 = None
        var_mean_1 = torch.ops.aten.var_mean.correction(add_5, [2], correction = 0, keepdim = True)
        getitem_2 = var_mean_1[0]
        getitem_3 = var_mean_1[1];  var_mean_1 = None
        add_6 = torch.ops.aten.add.Tensor(getitem_2, 1e-05);  getitem_2 = None
        rsqrt_1 = torch.ops.aten.rsqrt.default(add_6);  add_6 = None
        sub_3 = torch.ops.aten.sub.Tensor(add_5, getitem_3);  getitem_3 = None
        mul_3 = torch.ops.aten.mul.Tensor(sub_3, rsqrt_1);  sub_3 = rsqrt_1 = None
        mul_4 = torch.ops.aten.mul.Tensor(mul_3, arg12_1);  mul_3 = arg12_1 = None
        add_7 = torch.ops.aten.add.Tensor(mul_4, arg13_1);  mul_4 = arg13_1 = None
        view_19 = torch.ops.aten.view.default(add_7, [128, 768]);  add_7 = None
        permute_9 = torch.ops.aten.permute.default(arg14_1, [1, 0]);  arg14_1 = None
        addmm_1 = torch.ops.aten.addmm.default(arg15_1, view_19, permute_9);  arg15_1 = view_19 = permute_9 = None
        view_20 = torch.ops.aten.view.default(addmm_1, [2, 64, 3072]);  addmm_1 = None
        mul_5 = torch.ops.aten.mul.Tensor(view_20, 0.5)
        pow_1 = torch.ops.aten.pow.Tensor_Scalar(view_20, 3.0)
        mul_6 = torch.ops.aten.mul.Tensor(pow_1, 0.044715);  pow_1 = None
        add_8 = torch.ops.aten.add.Tensor(view_20, mul_6);  view_20 = mul_6 = None
        mul_7 = torch.ops.aten.mul.Tensor(add_8, 0.7978845608028654);  add_8 = None
        tanh = torch.ops.aten.tanh.default(mul_7);  mul_7 = None
        add_9 = torch.ops.aten.add.Tensor(tanh, 1.0);  tanh = None
        mul_8 = torch.ops.aten.mul.Tensor(mul_5, add_9);  mul_5 = add_9 = None
        view_21 = torch.ops.aten.view.default(mul_8, [128, 3072]);  mul_8 = None
        permute_10 = torch.ops.aten.permute.default(arg16_1, [1, 0]);  arg16_1 = None
        addmm_2 = torch.ops.aten.addmm.default(arg17_1, view_21, permute_10);  arg17_1 = view_21 = permute_10 = None
        view_22 = torch.ops.aten.view.default(addmm_2, [2, 64, 768]);  addmm_2 = None
        add_10 = torch.ops.aten.add.Tensor(add_5, view_22);  add_5 = view_22 = None
        var_mean_2 = torch.ops.aten.var_mean.correction(add_10, [2], correction = 0, keepdim = True)
        getitem_4 = var_mean_2[0]
        getitem_5 = var_mean_2[1];  var_mean_2 = None
        add_11 = torch.ops.aten.add.Tensor(getitem_4, 1e-05);  getitem_4 = None
        rsqrt_2 = torch.ops.aten.rsqrt.default(add_11);  add_11 = None
        sub_4 = torch.ops.aten.sub.Tensor(add_10, getitem_5);  getitem_5 = None
        mul_9 = torch.ops.aten.mul.Tensor(sub_4, rsqrt_2);  sub_4 = rsqrt_2 = None
        mul_10 = torch.ops.aten.mul.Tensor(mul_9, arg18_1);  mul_9 = arg18_1 = None
        add_12 = torch.ops.aten.add.Tensor(mul_10, arg19_1);  mul_10 = arg19_1 = None
        permute_11 = torch.ops.aten.permute.default(arg20_1, [1, 0]);  arg20_1 = None
        view_23 = torch.ops.aten.view.default(add_12, [128, 768])
        mm_3 = torch.ops.aten.mm.default(view_23, permute_11);  view_23 = permute_11 = None
        view_24 = torch.ops.aten.view.default(mm_3, [2, 64, 768]);  mm_3 = None
        permute_12 = torch.ops.aten.permute.default(arg21_1, [1, 0]);  arg21_1 = None
        view_25 = torch.ops.aten.view.default(add_12, [128, 768])
        mm_4 = torch.ops.aten.mm.default(view_25, permute_12);  view_25 = permute_12 = None
        view_26 = torch.ops.aten.view.default(mm_4, [2, 64, 768]);  mm_4 = None
        permute_13 = torch.ops.aten.permute.default(arg22_1, [1, 0]);  arg22_1 = None
        view_27 = torch.ops.aten.view.default(add_12, [128, 768]);  add_12 = None
        mm_5 = torch.ops.aten.mm.default(view_27, permute_13);  view_27 = permute_13 = None
        view_28 = torch.ops.aten.view.default(mm_5, [2, 64, 768]);  mm_5 = None
        view_29 = torch.ops.aten.view.default(view_24, [2, 64, 12, 64]);  view_24 = None
        permute_14 = torch.ops.aten.permute.default(view_29, [0, 2, 1, 3]);  view_29 = None
        view_30 = torch.ops.aten.view.default(view_26, [2, 64, 12, 64]);  view_26 = None
        permute_15 = torch.ops.aten.permute.default(view_30, [0, 2, 1, 3]);  view_30 = None
        view_31 = torch.ops.aten.view.default(view_28, [2, 64, 12, 64]);  view_28 = None
        permute_16 = torch.ops.aten.permute.default(view_31, [0, 2, 1, 3]);  view_31 = None
        permute_17 = torch.ops.aten.permute.default(permute_15, [0, 1, 3, 2])
        expand_6 = torch.ops.aten.expand.default(permute_14, [2, 12, 64, 64]);  permute_14 = None
        clone_9 = torch.ops.aten.clone.default(expand_6, memory_format = torch.contiguous_format);  expand_6 = None
        view_32 = torch.ops.aten.view.default(clone_9, [24, 64, 64]);  clone_9 = None
        expand_7 = torch.ops.aten.expand.default(permute_17, [2, 12, 64, 64]);  permute_17 = None
        clone_10 = torch.ops.aten.clone.default(expand_7, memory_format = torch.contiguous_format);  expand_7 = None
        view_33 = torch.ops.aten.view.default(clone_10, [24, 64, 64]);  clone_10 = None
        bmm_2 = torch.ops.aten.bmm.default(view_32, view_33);  view_32 = view_33 = None
        view_34 = torch.ops.aten.view.default(bmm_2, [2, 12, 64, 64]);  bmm_2 = None
        slice_33 = torch.ops.aten.slice.Tensor(arg23_1, 2, 0, 64);  arg23_1 = None
        slice_34 = torch.ops.aten.slice.Tensor(slice_33, 3, 0, 64);  slice_33 = None
        _tensor_constant1 = self._tensor_constant1;  _tensor_constant1 = None
        full_default_4 = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where_3 = torch.ops.aten.where.self(slice_34, view_34, full_default_4);  slice_34 = view_34 = full_default_4 = None
        add_13 = torch.ops.aten.add.Tensor(where_3, where_1);  where_3 = None
        amax_1 = torch.ops.aten.amax.default(add_13, [-1], True)
        sub_5 = torch.ops.aten.sub.Tensor(add_13, amax_1);  add_13 = amax_1 = None
        exp_1 = torch.ops.aten.exp.default(sub_5);  sub_5 = None
        sum_2 = torch.ops.aten.sum.dim_IntList(exp_1, [-1], True)
        div_1 = torch.ops.aten.div.Tensor(exp_1, sum_2);  exp_1 = sum_2 = None
        expand_8 = torch.ops.aten.expand.default(div_1, [2, 12, 64, 64]);  div_1 = None
        view_35 = torch.ops.aten.view.default(expand_8, [24, 64, 64]);  expand_8 = None
        expand_9 = torch.ops.aten.expand.default(permute_16, [2, 12, 64, 64])
        clone_12 = torch.ops.aten.clone.default(expand_9, memory_format = torch.contiguous_format);  expand_9 = None
        view_36 = torch.ops.aten.view.default(clone_12, [24, 64, 64]);  clone_12 = None
        bmm_3 = torch.ops.aten.bmm.default(view_35, view_36);  view_35 = view_36 = None
        view_37 = torch.ops.aten.view.default(bmm_3, [2, 12, 64, 64]);  bmm_3 = None
        permute_18 = torch.ops.aten.permute.default(view_37, [0, 2, 1, 3]);  view_37 = None
        clone_13 = torch.ops.aten.clone.default(permute_18, memory_format = torch.contiguous_format);  permute_18 = None
        view_38 = torch.ops.aten.view.default(clone_13, [2, 64, 768]);  clone_13 = None
        view_39 = torch.ops.aten.view.default(view_38, [128, 768]);  view_38 = None
        permute_19 = torch.ops.aten.permute.default(arg24_1, [1, 0]);  arg24_1 = None
        addmm_3 = torch.ops.aten.addmm.default(arg25_1, view_39, permute_19);  arg25_1 = view_39 = permute_19 = None
        view_40 = torch.ops.aten.view.default(addmm_3, [2, 64, 768]);  addmm_3 = None
        add_14 = torch.ops.aten.add.Tensor(view_40, add_10);  view_40 = add_10 = None
        var_mean_3 = torch.ops.aten.var_mean.correction(add_14, [2], correction = 0, keepdim = True)
        getitem_6 = var_mean_3[0]
        getitem_7 = var_mean_3[1];  var_mean_3 = None
        add_15 = torch.ops.aten.add.Tensor(getitem_6, 1e-05);  getitem_6 = None
        rsqrt_3 = torch.ops.aten.rsqrt.default(add_15);  add_15 = None
        sub_6 = torch.ops.aten.sub.Tensor(add_14, getitem_7);  getitem_7 = None
        mul_11 = torch.ops.aten.mul.Tensor(sub_6, rsqrt_3);  sub_6 = rsqrt_3 = None
        mul_12 = torch.ops.aten.mul.Tensor(mul_11, arg26_1);  mul_11 = arg26_1 = None
        add_16 = torch.ops.aten.add.Tensor(mul_12, arg27_1);  mul_12 = arg27_1 = None
        view_41 = torch.ops.aten.view.default(add_16, [128, 768]);  add_16 = None
        permute_20 = torch.ops.aten.permute.default(arg28_1, [1, 0]);  arg28_1 = None
        addmm_4 = torch.ops.aten.addmm.default(arg29_1, view_41, permute_20);  arg29_1 = view_41 = permute_20 = None
        view_42 = torch.ops.aten.view.default(addmm_4, [2, 64, 3072]);  addmm_4 = None
        mul_13 = torch.ops.aten.mul.Tensor(view_42, 0.5)
        pow_2 = torch.ops.aten.pow.Tensor_Scalar(view_42, 3.0)
        mul_14 = torch.ops.aten.mul.Tensor(pow_2, 0.044715);  pow_2 = None
        add_17 = torch.ops.aten.add.Tensor(view_42, mul_14);  view_42 = mul_14 = None
        mul_15 = torch.ops.aten.mul.Tensor(add_17, 0.7978845608028654);  add_17 = None
        tanh_1 = torch.ops.aten.tanh.default(mul_15);  mul_15 = None
        add_18 = torch.ops.aten.add.Tensor(tanh_1, 1.0);  tanh_1 = None
        mul_16 = torch.ops.aten.mul.Tensor(mul_13, add_18);  mul_13 = add_18 = None
        view_43 = torch.ops.aten.view.default(mul_16, [128, 3072]);  mul_16 = None
        permute_21 = torch.ops.aten.permute.default(arg30_1, [1, 0]);  arg30_1 = None
        addmm_5 = torch.ops.aten.addmm.default(arg31_1, view_43, permute_21);  arg31_1 = view_43 = permute_21 = None
        view_44 = torch.ops.aten.view.default(addmm_5, [2, 64, 768]);  addmm_5 = None
        add_19 = torch.ops.aten.add.Tensor(add_14, view_44);  add_14 = view_44 = None
        var_mean_4 = torch.ops.aten.var_mean.correction(add_19, [2], correction = 0, keepdim = True)
        getitem_8 = var_mean_4[0]
        getitem_9 = var_mean_4[1];  var_mean_4 = None
        add_20 = torch.ops.aten.add.Tensor(getitem_8, 1e-05);  getitem_8 = None
        rsqrt_4 = torch.ops.aten.rsqrt.default(add_20);  add_20 = None
        sub_7 = torch.ops.aten.sub.Tensor(add_19, getitem_9);  getitem_9 = None
        mul_17 = torch.ops.aten.mul.Tensor(sub_7, rsqrt_4);  sub_7 = rsqrt_4 = None
        mul_18 = torch.ops.aten.mul.Tensor(mul_17, arg32_1);  mul_17 = arg32_1 = None
        add_21 = torch.ops.aten.add.Tensor(mul_18, arg33_1);  mul_18 = arg33_1 = None
        permute_22 = torch.ops.aten.permute.default(arg34_1, [1, 0]);  arg34_1 = None
        view_45 = torch.ops.aten.view.default(add_21, [128, 768])
        mm_6 = torch.ops.aten.mm.default(view_45, permute_22);  view_45 = permute_22 = None
        view_46 = torch.ops.aten.view.default(mm_6, [2, 64, 768]);  mm_6 = None
        permute_23 = torch.ops.aten.permute.default(arg35_1, [1, 0]);  arg35_1 = None
        view_47 = torch.ops.aten.view.default(add_21, [128, 768])
        mm_7 = torch.ops.aten.mm.default(view_47, permute_23);  view_47 = permute_23 = None
        view_48 = torch.ops.aten.view.default(mm_7, [2, 64, 768]);  mm_7 = None
        permute_24 = torch.ops.aten.permute.default(arg36_1, [1, 0]);  arg36_1 = None
        view_49 = torch.ops.aten.view.default(add_21, [128, 768]);  add_21 = None
        mm_8 = torch.ops.aten.mm.default(view_49, permute_24);  view_49 = permute_24 = None
        view_50 = torch.ops.aten.view.default(mm_8, [2, 64, 768]);  mm_8 = None
        view_51 = torch.ops.aten.view.default(view_46, [2, 64, 12, 64]);  view_46 = None
        permute_25 = torch.ops.aten.permute.default(view_51, [0, 2, 1, 3]);  view_51 = None
        view_52 = torch.ops.aten.view.default(view_48, [2, 64, 12, 64]);  view_48 = None
        permute_26 = torch.ops.aten.permute.default(view_52, [0, 2, 1, 3]);  view_52 = None
        view_53 = torch.ops.aten.view.default(view_50, [2, 64, 12, 64]);  view_50 = None
        permute_27 = torch.ops.aten.permute.default(view_53, [0, 2, 1, 3]);  view_53 = None
        permute_28 = torch.ops.aten.permute.default(permute_26, [0, 1, 3, 2])
        expand_10 = torch.ops.aten.expand.default(permute_25, [2, 12, 64, 64]);  permute_25 = None
        clone_16 = torch.ops.aten.clone.default(expand_10, memory_format = torch.contiguous_format);  expand_10 = None
        view_54 = torch.ops.aten.view.default(clone_16, [24, 64, 64]);  clone_16 = None
        expand_11 = torch.ops.aten.expand.default(permute_28, [2, 12, 64, 64]);  permute_28 = None
        clone_17 = torch.ops.aten.clone.default(expand_11, memory_format = torch.contiguous_format);  expand_11 = None
        view_55 = torch.ops.aten.view.default(clone_17, [24, 64, 64]);  clone_17 = None
        bmm_4 = torch.ops.aten.bmm.default(view_54, view_55);  view_54 = view_55 = None
        view_56 = torch.ops.aten.view.default(bmm_4, [2, 12, 64, 64]);  bmm_4 = None
        slice_43 = torch.ops.aten.slice.Tensor(arg37_1, 2, 0, 64);  arg37_1 = None
        slice_44 = torch.ops.aten.slice.Tensor(slice_43, 3, 0, 64);  slice_43 = None
        _tensor_constant2 = self._tensor_constant2;  _tensor_constant2 = None
        full_default_5 = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where_4 = torch.ops.aten.where.self(slice_44, view_56, full_default_5);  slice_44 = view_56 = full_default_5 = None
        add_22 = torch.ops.aten.add.Tensor(where_4, where_1);  where_4 = None
        amax_2 = torch.ops.aten.amax.default(add_22, [-1], True)
        sub_8 = torch.ops.aten.sub.Tensor(add_22, amax_2);  add_22 = amax_2 = None
        exp_2 = torch.ops.aten.exp.default(sub_8);  sub_8 = None
        sum_3 = torch.ops.aten.sum.dim_IntList(exp_2, [-1], True)
        div_2 = torch.ops.aten.div.Tensor(exp_2, sum_3);  exp_2 = sum_3 = None
        expand_12 = torch.ops.aten.expand.default(div_2, [2, 12, 64, 64]);  div_2 = None
        view_57 = torch.ops.aten.view.default(expand_12, [24, 64, 64]);  expand_12 = None
        expand_13 = torch.ops.aten.expand.default(permute_27, [2, 12, 64, 64])
        clone_19 = torch.ops.aten.clone.default(expand_13, memory_format = torch.contiguous_format);  expand_13 = None
        view_58 = torch.ops.aten.view.default(clone_19, [24, 64, 64]);  clone_19 = None
        bmm_5 = torch.ops.aten.bmm.default(view_57, view_58);  view_57 = view_58 = None
        view_59 = torch.ops.aten.view.default(bmm_5, [2, 12, 64, 64]);  bmm_5 = None
        permute_29 = torch.ops.aten.permute.default(view_59, [0, 2, 1, 3]);  view_59 = None
        clone_20 = torch.ops.aten.clone.default(permute_29, memory_format = torch.contiguous_format);  permute_29 = None
        view_60 = torch.ops.aten.view.default(clone_20, [2, 64, 768]);  clone_20 = None
        view_61 = torch.ops.aten.view.default(view_60, [128, 768]);  view_60 = None
        permute_30 = torch.ops.aten.permute.default(arg38_1, [1, 0]);  arg38_1 = None
        addmm_6 = torch.ops.aten.addmm.default(arg39_1, view_61, permute_30);  arg39_1 = view_61 = permute_30 = None
        view_62 = torch.ops.aten.view.default(addmm_6, [2, 64, 768]);  addmm_6 = None
        add_23 = torch.ops.aten.add.Tensor(view_62, add_19);  view_62 = add_19 = None
        var_mean_5 = torch.ops.aten.var_mean.correction(add_23, [2], correction = 0, keepdim = True)
        getitem_10 = var_mean_5[0]
        getitem_11 = var_mean_5[1];  var_mean_5 = None
        add_24 = torch.ops.aten.add.Tensor(getitem_10, 1e-05);  getitem_10 = None
        rsqrt_5 = torch.ops.aten.rsqrt.default(add_24);  add_24 = None
        sub_9 = torch.ops.aten.sub.Tensor(add_23, getitem_11);  getitem_11 = None
        mul_19 = torch.ops.aten.mul.Tensor(sub_9, rsqrt_5);  sub_9 = rsqrt_5 = None
        mul_20 = torch.ops.aten.mul.Tensor(mul_19, arg40_1);  mul_19 = arg40_1 = None
        add_25 = torch.ops.aten.add.Tensor(mul_20, arg41_1);  mul_20 = arg41_1 = None
        view_63 = torch.ops.aten.view.default(add_25, [128, 768]);  add_25 = None
        permute_31 = torch.ops.aten.permute.default(arg42_1, [1, 0]);  arg42_1 = None
        addmm_7 = torch.ops.aten.addmm.default(arg43_1, view_63, permute_31);  arg43_1 = view_63 = permute_31 = None
        view_64 = torch.ops.aten.view.default(addmm_7, [2, 64, 3072]);  addmm_7 = None
        mul_21 = torch.ops.aten.mul.Tensor(view_64, 0.5)
        pow_3 = torch.ops.aten.pow.Tensor_Scalar(view_64, 3.0)
        mul_22 = torch.ops.aten.mul.Tensor(pow_3, 0.044715);  pow_3 = None
        add_26 = torch.ops.aten.add.Tensor(view_64, mul_22);  view_64 = mul_22 = None
        mul_23 = torch.ops.aten.mul.Tensor(add_26, 0.7978845608028654);  add_26 = None
        tanh_2 = torch.ops.aten.tanh.default(mul_23);  mul_23 = None
        add_27 = torch.ops.aten.add.Tensor(tanh_2, 1.0);  tanh_2 = None
        mul_24 = torch.ops.aten.mul.Tensor(mul_21, add_27);  mul_21 = add_27 = None
        view_65 = torch.ops.aten.view.default(mul_24, [128, 3072]);  mul_24 = None
        permute_32 = torch.ops.aten.permute.default(arg44_1, [1, 0]);  arg44_1 = None
        addmm_8 = torch.ops.aten.addmm.default(arg45_1, view_65, permute_32);  arg45_1 = view_65 = permute_32 = None
        view_66 = torch.ops.aten.view.default(addmm_8, [2, 64, 768]);  addmm_8 = None
        add_28 = torch.ops.aten.add.Tensor(add_23, view_66);  add_23 = view_66 = None
        var_mean_6 = torch.ops.aten.var_mean.correction(add_28, [2], correction = 0, keepdim = True)
        getitem_12 = var_mean_6[0]
        getitem_13 = var_mean_6[1];  var_mean_6 = None
        add_29 = torch.ops.aten.add.Tensor(getitem_12, 1e-05);  getitem_12 = None
        rsqrt_6 = torch.ops.aten.rsqrt.default(add_29);  add_29 = None
        sub_10 = torch.ops.aten.sub.Tensor(add_28, getitem_13);  getitem_13 = None
        mul_25 = torch.ops.aten.mul.Tensor(sub_10, rsqrt_6);  sub_10 = rsqrt_6 = None
        mul_26 = torch.ops.aten.mul.Tensor(mul_25, arg46_1);  mul_25 = arg46_1 = None
        add_30 = torch.ops.aten.add.Tensor(mul_26, arg47_1);  mul_26 = arg47_1 = None
        permute_33 = torch.ops.aten.permute.default(arg48_1, [1, 0]);  arg48_1 = None
        view_67 = torch.ops.aten.view.default(add_30, [128, 768])
        mm_9 = torch.ops.aten.mm.default(view_67, permute_33);  view_67 = permute_33 = None
        view_68 = torch.ops.aten.view.default(mm_9, [2, 64, 768]);  mm_9 = None
        permute_34 = torch.ops.aten.permute.default(arg49_1, [1, 0]);  arg49_1 = None
        view_69 = torch.ops.aten.view.default(add_30, [128, 768])
        mm_10 = torch.ops.aten.mm.default(view_69, permute_34);  view_69 = permute_34 = None
        view_70 = torch.ops.aten.view.default(mm_10, [2, 64, 768]);  mm_10 = None
        permute_35 = torch.ops.aten.permute.default(arg50_1, [1, 0]);  arg50_1 = None
        view_71 = torch.ops.aten.view.default(add_30, [128, 768]);  add_30 = None
        mm_11 = torch.ops.aten.mm.default(view_71, permute_35);  view_71 = permute_35 = None
        view_72 = torch.ops.aten.view.default(mm_11, [2, 64, 768]);  mm_11 = None
        view_73 = torch.ops.aten.view.default(view_68, [2, 64, 12, 64]);  view_68 = None
        permute_36 = torch.ops.aten.permute.default(view_73, [0, 2, 1, 3]);  view_73 = None
        view_74 = torch.ops.aten.view.default(view_70, [2, 64, 12, 64]);  view_70 = None
        permute_37 = torch.ops.aten.permute.default(view_74, [0, 2, 1, 3]);  view_74 = None
        view_75 = torch.ops.aten.view.default(view_72, [2, 64, 12, 64]);  view_72 = None
        permute_38 = torch.ops.aten.permute.default(view_75, [0, 2, 1, 3]);  view_75 = None
        permute_39 = torch.ops.aten.permute.default(permute_37, [0, 1, 3, 2])
        expand_14 = torch.ops.aten.expand.default(permute_36, [2, 12, 64, 64]);  permute_36 = None
        clone_23 = torch.ops.aten.clone.default(expand_14, memory_format = torch.contiguous_format);  expand_14 = None
        view_76 = torch.ops.aten.view.default(clone_23, [24, 64, 64]);  clone_23 = None
        expand_15 = torch.ops.aten.expand.default(permute_39, [2, 12, 64, 64]);  permute_39 = None
        clone_24 = torch.ops.aten.clone.default(expand_15, memory_format = torch.contiguous_format);  expand_15 = None
        view_77 = torch.ops.aten.view.default(clone_24, [24, 64, 64]);  clone_24 = None
        bmm_6 = torch.ops.aten.bmm.default(view_76, view_77);  view_76 = view_77 = None
        view_78 = torch.ops.aten.view.default(bmm_6, [2, 12, 64, 64]);  bmm_6 = None
        slice_53 = torch.ops.aten.slice.Tensor(arg51_1, 2, 0, 64);  arg51_1 = None
        slice_54 = torch.ops.aten.slice.Tensor(slice_53, 3, 0, 64);  slice_53 = None
        _tensor_constant3 = self._tensor_constant3;  _tensor_constant3 = None
        full_default_6 = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where_5 = torch.ops.aten.where.self(slice_54, view_78, full_default_6);  slice_54 = view_78 = full_default_6 = None
        add_31 = torch.ops.aten.add.Tensor(where_5, where_1);  where_5 = None
        amax_3 = torch.ops.aten.amax.default(add_31, [-1], True)
        sub_11 = torch.ops.aten.sub.Tensor(add_31, amax_3);  add_31 = amax_3 = None
        exp_3 = torch.ops.aten.exp.default(sub_11);  sub_11 = None
        sum_4 = torch.ops.aten.sum.dim_IntList(exp_3, [-1], True)
        div_3 = torch.ops.aten.div.Tensor(exp_3, sum_4);  exp_3 = sum_4 = None
        expand_16 = torch.ops.aten.expand.default(div_3, [2, 12, 64, 64]);  div_3 = None
        view_79 = torch.ops.aten.view.default(expand_16, [24, 64, 64]);  expand_16 = None
        expand_17 = torch.ops.aten.expand.default(permute_38, [2, 12, 64, 64])
        clone_26 = torch.ops.aten.clone.default(expand_17, memory_format = torch.contiguous_format);  expand_17 = None
        view_80 = torch.ops.aten.view.default(clone_26, [24, 64, 64]);  clone_26 = None
        bmm_7 = torch.ops.aten.bmm.default(view_79, view_80);  view_79 = view_80 = None
        view_81 = torch.ops.aten.view.default(bmm_7, [2, 12, 64, 64]);  bmm_7 = None
        permute_40 = torch.ops.aten.permute.default(view_81, [0, 2, 1, 3]);  view_81 = None
        clone_27 = torch.ops.aten.clone.default(permute_40, memory_format = torch.contiguous_format);  permute_40 = None
        view_82 = torch.ops.aten.view.default(clone_27, [2, 64, 768]);  clone_27 = None
        view_83 = torch.ops.aten.view.default(view_82, [128, 768]);  view_82 = None
        permute_41 = torch.ops.aten.permute.default(arg52_1, [1, 0]);  arg52_1 = None
        addmm_9 = torch.ops.aten.addmm.default(arg53_1, view_83, permute_41);  arg53_1 = view_83 = permute_41 = None
        view_84 = torch.ops.aten.view.default(addmm_9, [2, 64, 768]);  addmm_9 = None
        add_32 = torch.ops.aten.add.Tensor(view_84, add_28);  view_84 = add_28 = None
        var_mean_7 = torch.ops.aten.var_mean.correction(add_32, [2], correction = 0, keepdim = True)
        getitem_14 = var_mean_7[0]
        getitem_15 = var_mean_7[1];  var_mean_7 = None
        add_33 = torch.ops.aten.add.Tensor(getitem_14, 1e-05);  getitem_14 = None
        rsqrt_7 = torch.ops.aten.rsqrt.default(add_33);  add_33 = None
        sub_12 = torch.ops.aten.sub.Tensor(add_32, getitem_15);  getitem_15 = None
        mul_27 = torch.ops.aten.mul.Tensor(sub_12, rsqrt_7);  sub_12 = rsqrt_7 = None
        mul_28 = torch.ops.aten.mul.Tensor(mul_27, arg54_1);  mul_27 = arg54_1 = None
        add_34 = torch.ops.aten.add.Tensor(mul_28, arg55_1);  mul_28 = arg55_1 = None
        view_85 = torch.ops.aten.view.default(add_34, [128, 768]);  add_34 = None
        permute_42 = torch.ops.aten.permute.default(arg56_1, [1, 0]);  arg56_1 = None
        addmm_10 = torch.ops.aten.addmm.default(arg57_1, view_85, permute_42);  arg57_1 = view_85 = permute_42 = None
        view_86 = torch.ops.aten.view.default(addmm_10, [2, 64, 3072]);  addmm_10 = None
        mul_29 = torch.ops.aten.mul.Tensor(view_86, 0.5)
        pow_4 = torch.ops.aten.pow.Tensor_Scalar(view_86, 3.0)
        mul_30 = torch.ops.aten.mul.Tensor(pow_4, 0.044715);  pow_4 = None
        add_35 = torch.ops.aten.add.Tensor(view_86, mul_30);  view_86 = mul_30 = None
        mul_31 = torch.ops.aten.mul.Tensor(add_35, 0.7978845608028654);  add_35 = None
        tanh_3 = torch.ops.aten.tanh.default(mul_31);  mul_31 = None
        add_36 = torch.ops.aten.add.Tensor(tanh_3, 1.0);  tanh_3 = None
        mul_32 = torch.ops.aten.mul.Tensor(mul_29, add_36);  mul_29 = add_36 = None
        view_87 = torch.ops.aten.view.default(mul_32, [128, 3072]);  mul_32 = None
        permute_43 = torch.ops.aten.permute.default(arg58_1, [1, 0]);  arg58_1 = None
        addmm_11 = torch.ops.aten.addmm.default(arg59_1, view_87, permute_43);  arg59_1 = view_87 = permute_43 = None
        view_88 = torch.ops.aten.view.default(addmm_11, [2, 64, 768]);  addmm_11 = None
        add_37 = torch.ops.aten.add.Tensor(add_32, view_88);  add_32 = view_88 = None
        var_mean_8 = torch.ops.aten.var_mean.correction(add_37, [2], correction = 0, keepdim = True)
        getitem_16 = var_mean_8[0]
        getitem_17 = var_mean_8[1];  var_mean_8 = None
        add_38 = torch.ops.aten.add.Tensor(getitem_16, 1e-05);  getitem_16 = None
        rsqrt_8 = torch.ops.aten.rsqrt.default(add_38);  add_38 = None
        sub_13 = torch.ops.aten.sub.Tensor(add_37, getitem_17);  getitem_17 = None
        mul_33 = torch.ops.aten.mul.Tensor(sub_13, rsqrt_8);  sub_13 = rsqrt_8 = None
        mul_34 = torch.ops.aten.mul.Tensor(mul_33, arg60_1);  mul_33 = arg60_1 = None
        add_39 = torch.ops.aten.add.Tensor(mul_34, arg61_1);  mul_34 = arg61_1 = None
        permute_44 = torch.ops.aten.permute.default(arg62_1, [1, 0]);  arg62_1 = None
        view_89 = torch.ops.aten.view.default(add_39, [128, 768])
        mm_12 = torch.ops.aten.mm.default(view_89, permute_44);  view_89 = permute_44 = None
        view_90 = torch.ops.aten.view.default(mm_12, [2, 64, 768]);  mm_12 = None
        permute_45 = torch.ops.aten.permute.default(arg63_1, [1, 0]);  arg63_1 = None
        view_91 = torch.ops.aten.view.default(add_39, [128, 768])
        mm_13 = torch.ops.aten.mm.default(view_91, permute_45);  view_91 = permute_45 = None
        view_92 = torch.ops.aten.view.default(mm_13, [2, 64, 768]);  mm_13 = None
        permute_46 = torch.ops.aten.permute.default(arg64_1, [1, 0]);  arg64_1 = None
        view_93 = torch.ops.aten.view.default(add_39, [128, 768]);  add_39 = None
        mm_14 = torch.ops.aten.mm.default(view_93, permute_46);  view_93 = permute_46 = None
        view_94 = torch.ops.aten.view.default(mm_14, [2, 64, 768]);  mm_14 = None
        view_95 = torch.ops.aten.view.default(view_90, [2, 64, 12, 64]);  view_90 = None
        permute_47 = torch.ops.aten.permute.default(view_95, [0, 2, 1, 3]);  view_95 = None
        view_96 = torch.ops.aten.view.default(view_92, [2, 64, 12, 64]);  view_92 = None
        permute_48 = torch.ops.aten.permute.default(view_96, [0, 2, 1, 3]);  view_96 = None
        view_97 = torch.ops.aten.view.default(view_94, [2, 64, 12, 64]);  view_94 = None
        permute_49 = torch.ops.aten.permute.default(view_97, [0, 2, 1, 3]);  view_97 = None
        permute_50 = torch.ops.aten.permute.default(permute_48, [0, 1, 3, 2])
        expand_18 = torch.ops.aten.expand.default(permute_47, [2, 12, 64, 64]);  permute_47 = None
        clone_30 = torch.ops.aten.clone.default(expand_18, memory_format = torch.contiguous_format);  expand_18 = None
        view_98 = torch.ops.aten.view.default(clone_30, [24, 64, 64]);  clone_30 = None
        expand_19 = torch.ops.aten.expand.default(permute_50, [2, 12, 64, 64]);  permute_50 = None
        clone_31 = torch.ops.aten.clone.default(expand_19, memory_format = torch.contiguous_format);  expand_19 = None
        view_99 = torch.ops.aten.view.default(clone_31, [24, 64, 64]);  clone_31 = None
        bmm_8 = torch.ops.aten.bmm.default(view_98, view_99);  view_98 = view_99 = None
        view_100 = torch.ops.aten.view.default(bmm_8, [2, 12, 64, 64]);  bmm_8 = None
        slice_63 = torch.ops.aten.slice.Tensor(arg65_1, 2, 0, 64);  arg65_1 = None
        slice_64 = torch.ops.aten.slice.Tensor(slice_63, 3, 0, 64);  slice_63 = None
        _tensor_constant4 = self._tensor_constant4;  _tensor_constant4 = None
        full_default_7 = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where_6 = torch.ops.aten.where.self(slice_64, view_100, full_default_7);  slice_64 = view_100 = full_default_7 = None
        add_40 = torch.ops.aten.add.Tensor(where_6, where_1);  where_6 = None
        amax_4 = torch.ops.aten.amax.default(add_40, [-1], True)
        sub_14 = torch.ops.aten.sub.Tensor(add_40, amax_4);  add_40 = amax_4 = None
        exp_4 = torch.ops.aten.exp.default(sub_14);  sub_14 = None
        sum_5 = torch.ops.aten.sum.dim_IntList(exp_4, [-1], True)
        div_4 = torch.ops.aten.div.Tensor(exp_4, sum_5);  exp_4 = sum_5 = None
        expand_20 = torch.ops.aten.expand.default(div_4, [2, 12, 64, 64]);  div_4 = None
        view_101 = torch.ops.aten.view.default(expand_20, [24, 64, 64]);  expand_20 = None
        expand_21 = torch.ops.aten.expand.default(permute_49, [2, 12, 64, 64])
        clone_33 = torch.ops.aten.clone.default(expand_21, memory_format = torch.contiguous_format);  expand_21 = None
        view_102 = torch.ops.aten.view.default(clone_33, [24, 64, 64]);  clone_33 = None
        bmm_9 = torch.ops.aten.bmm.default(view_101, view_102);  view_101 = view_102 = None
        view_103 = torch.ops.aten.view.default(bmm_9, [2, 12, 64, 64]);  bmm_9 = None
        permute_51 = torch.ops.aten.permute.default(view_103, [0, 2, 1, 3]);  view_103 = None
        clone_34 = torch.ops.aten.clone.default(permute_51, memory_format = torch.contiguous_format);  permute_51 = None
        view_104 = torch.ops.aten.view.default(clone_34, [2, 64, 768]);  clone_34 = None
        view_105 = torch.ops.aten.view.default(view_104, [128, 768]);  view_104 = None
        permute_52 = torch.ops.aten.permute.default(arg66_1, [1, 0]);  arg66_1 = None
        addmm_12 = torch.ops.aten.addmm.default(arg67_1, view_105, permute_52);  arg67_1 = view_105 = permute_52 = None
        view_106 = torch.ops.aten.view.default(addmm_12, [2, 64, 768]);  addmm_12 = None
        add_41 = torch.ops.aten.add.Tensor(view_106, add_37);  view_106 = add_37 = None
        var_mean_9 = torch.ops.aten.var_mean.correction(add_41, [2], correction = 0, keepdim = True)
        getitem_18 = var_mean_9[0]
        getitem_19 = var_mean_9[1];  var_mean_9 = None
        add_42 = torch.ops.aten.add.Tensor(getitem_18, 1e-05);  getitem_18 = None
        rsqrt_9 = torch.ops.aten.rsqrt.default(add_42);  add_42 = None
        sub_15 = torch.ops.aten.sub.Tensor(add_41, getitem_19);  getitem_19 = None
        mul_35 = torch.ops.aten.mul.Tensor(sub_15, rsqrt_9);  sub_15 = rsqrt_9 = None
        mul_36 = torch.ops.aten.mul.Tensor(mul_35, arg68_1);  mul_35 = arg68_1 = None
        add_43 = torch.ops.aten.add.Tensor(mul_36, arg69_1);  mul_36 = arg69_1 = None
        view_107 = torch.ops.aten.view.default(add_43, [128, 768]);  add_43 = None
        permute_53 = torch.ops.aten.permute.default(arg70_1, [1, 0]);  arg70_1 = None
        addmm_13 = torch.ops.aten.addmm.default(arg71_1, view_107, permute_53);  arg71_1 = view_107 = permute_53 = None
        view_108 = torch.ops.aten.view.default(addmm_13, [2, 64, 3072]);  addmm_13 = None
        mul_37 = torch.ops.aten.mul.Tensor(view_108, 0.5)
        pow_5 = torch.ops.aten.pow.Tensor_Scalar(view_108, 3.0)
        mul_38 = torch.ops.aten.mul.Tensor(pow_5, 0.044715);  pow_5 = None
        add_44 = torch.ops.aten.add.Tensor(view_108, mul_38);  view_108 = mul_38 = None
        mul_39 = torch.ops.aten.mul.Tensor(add_44, 0.7978845608028654);  add_44 = None
        tanh_4 = torch.ops.aten.tanh.default(mul_39);  mul_39 = None
        add_45 = torch.ops.aten.add.Tensor(tanh_4, 1.0);  tanh_4 = None
        mul_40 = torch.ops.aten.mul.Tensor(mul_37, add_45);  mul_37 = add_45 = None
        view_109 = torch.ops.aten.view.default(mul_40, [128, 3072]);  mul_40 = None
        permute_54 = torch.ops.aten.permute.default(arg72_1, [1, 0]);  arg72_1 = None
        addmm_14 = torch.ops.aten.addmm.default(arg73_1, view_109, permute_54);  arg73_1 = view_109 = permute_54 = None
        view_110 = torch.ops.aten.view.default(addmm_14, [2, 64, 768]);  addmm_14 = None
        add_46 = torch.ops.aten.add.Tensor(add_41, view_110);  add_41 = view_110 = None
        var_mean_10 = torch.ops.aten.var_mean.correction(add_46, [2], correction = 0, keepdim = True)
        getitem_20 = var_mean_10[0]
        getitem_21 = var_mean_10[1];  var_mean_10 = None
        add_47 = torch.ops.aten.add.Tensor(getitem_20, 1e-05);  getitem_20 = None
        rsqrt_10 = torch.ops.aten.rsqrt.default(add_47);  add_47 = None
        sub_16 = torch.ops.aten.sub.Tensor(add_46, getitem_21);  getitem_21 = None
        mul_41 = torch.ops.aten.mul.Tensor(sub_16, rsqrt_10);  sub_16 = rsqrt_10 = None
        mul_42 = torch.ops.aten.mul.Tensor(mul_41, arg74_1);  mul_41 = arg74_1 = None
        add_48 = torch.ops.aten.add.Tensor(mul_42, arg75_1);  mul_42 = arg75_1 = None
        permute_55 = torch.ops.aten.permute.default(arg76_1, [1, 0]);  arg76_1 = None
        view_111 = torch.ops.aten.view.default(add_48, [128, 768])
        mm_15 = torch.ops.aten.mm.default(view_111, permute_55);  view_111 = permute_55 = None
        view_112 = torch.ops.aten.view.default(mm_15, [2, 64, 768]);  mm_15 = None
        permute_56 = torch.ops.aten.permute.default(arg77_1, [1, 0]);  arg77_1 = None
        view_113 = torch.ops.aten.view.default(add_48, [128, 768])
        mm_16 = torch.ops.aten.mm.default(view_113, permute_56);  view_113 = permute_56 = None
        view_114 = torch.ops.aten.view.default(mm_16, [2, 64, 768]);  mm_16 = None
        permute_57 = torch.ops.aten.permute.default(arg78_1, [1, 0]);  arg78_1 = None
        view_115 = torch.ops.aten.view.default(add_48, [128, 768]);  add_48 = None
        mm_17 = torch.ops.aten.mm.default(view_115, permute_57);  view_115 = permute_57 = None
        view_116 = torch.ops.aten.view.default(mm_17, [2, 64, 768]);  mm_17 = None
        view_117 = torch.ops.aten.view.default(view_112, [2, 64, 12, 64]);  view_112 = None
        permute_58 = torch.ops.aten.permute.default(view_117, [0, 2, 1, 3]);  view_117 = None
        view_118 = torch.ops.aten.view.default(view_114, [2, 64, 12, 64]);  view_114 = None
        permute_59 = torch.ops.aten.permute.default(view_118, [0, 2, 1, 3]);  view_118 = None
        view_119 = torch.ops.aten.view.default(view_116, [2, 64, 12, 64]);  view_116 = None
        permute_60 = torch.ops.aten.permute.default(view_119, [0, 2, 1, 3]);  view_119 = None
        permute_61 = torch.ops.aten.permute.default(permute_59, [0, 1, 3, 2])
        expand_22 = torch.ops.aten.expand.default(permute_58, [2, 12, 64, 64]);  permute_58 = None
        clone_37 = torch.ops.aten.clone.default(expand_22, memory_format = torch.contiguous_format);  expand_22 = None
        view_120 = torch.ops.aten.view.default(clone_37, [24, 64, 64]);  clone_37 = None
        expand_23 = torch.ops.aten.expand.default(permute_61, [2, 12, 64, 64]);  permute_61 = None
        clone_38 = torch.ops.aten.clone.default(expand_23, memory_format = torch.contiguous_format);  expand_23 = None
        view_121 = torch.ops.aten.view.default(clone_38, [24, 64, 64]);  clone_38 = None
        bmm_10 = torch.ops.aten.bmm.default(view_120, view_121);  view_120 = view_121 = None
        view_122 = torch.ops.aten.view.default(bmm_10, [2, 12, 64, 64]);  bmm_10 = None
        slice_73 = torch.ops.aten.slice.Tensor(arg79_1, 2, 0, 64);  arg79_1 = None
        slice_74 = torch.ops.aten.slice.Tensor(slice_73, 3, 0, 64);  slice_73 = None
        _tensor_constant5 = self._tensor_constant5;  _tensor_constant5 = None
        full_default_8 = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where_7 = torch.ops.aten.where.self(slice_74, view_122, full_default_8);  slice_74 = view_122 = full_default_8 = None
        add_49 = torch.ops.aten.add.Tensor(where_7, where_1);  where_7 = None
        amax_5 = torch.ops.aten.amax.default(add_49, [-1], True)
        sub_17 = torch.ops.aten.sub.Tensor(add_49, amax_5);  add_49 = amax_5 = None
        exp_5 = torch.ops.aten.exp.default(sub_17);  sub_17 = None
        sum_6 = torch.ops.aten.sum.dim_IntList(exp_5, [-1], True)
        div_5 = torch.ops.aten.div.Tensor(exp_5, sum_6);  exp_5 = sum_6 = None
        expand_24 = torch.ops.aten.expand.default(div_5, [2, 12, 64, 64]);  div_5 = None
        view_123 = torch.ops.aten.view.default(expand_24, [24, 64, 64]);  expand_24 = None
        expand_25 = torch.ops.aten.expand.default(permute_60, [2, 12, 64, 64])
        clone_40 = torch.ops.aten.clone.default(expand_25, memory_format = torch.contiguous_format);  expand_25 = None
        view_124 = torch.ops.aten.view.default(clone_40, [24, 64, 64]);  clone_40 = None
        bmm_11 = torch.ops.aten.bmm.default(view_123, view_124);  view_123 = view_124 = None
        view_125 = torch.ops.aten.view.default(bmm_11, [2, 12, 64, 64]);  bmm_11 = None
        permute_62 = torch.ops.aten.permute.default(view_125, [0, 2, 1, 3]);  view_125 = None
        clone_41 = torch.ops.aten.clone.default(permute_62, memory_format = torch.contiguous_format);  permute_62 = None
        view_126 = torch.ops.aten.view.default(clone_41, [2, 64, 768]);  clone_41 = None
        view_127 = torch.ops.aten.view.default(view_126, [128, 768]);  view_126 = None
        permute_63 = torch.ops.aten.permute.default(arg80_1, [1, 0]);  arg80_1 = None
        addmm_15 = torch.ops.aten.addmm.default(arg81_1, view_127, permute_63);  arg81_1 = view_127 = permute_63 = None
        view_128 = torch.ops.aten.view.default(addmm_15, [2, 64, 768]);  addmm_15 = None
        add_50 = torch.ops.aten.add.Tensor(view_128, add_46);  view_128 = add_46 = None
        var_mean_11 = torch.ops.aten.var_mean.correction(add_50, [2], correction = 0, keepdim = True)
        getitem_22 = var_mean_11[0]
        getitem_23 = var_mean_11[1];  var_mean_11 = None
        add_51 = torch.ops.aten.add.Tensor(getitem_22, 1e-05);  getitem_22 = None
        rsqrt_11 = torch.ops.aten.rsqrt.default(add_51);  add_51 = None
        sub_18 = torch.ops.aten.sub.Tensor(add_50, getitem_23);  getitem_23 = None
        mul_43 = torch.ops.aten.mul.Tensor(sub_18, rsqrt_11);  sub_18 = rsqrt_11 = None
        mul_44 = torch.ops.aten.mul.Tensor(mul_43, arg82_1);  mul_43 = arg82_1 = None
        add_52 = torch.ops.aten.add.Tensor(mul_44, arg83_1);  mul_44 = arg83_1 = None
        view_129 = torch.ops.aten.view.default(add_52, [128, 768]);  add_52 = None
        permute_64 = torch.ops.aten.permute.default(arg84_1, [1, 0]);  arg84_1 = None
        addmm_16 = torch.ops.aten.addmm.default(arg85_1, view_129, permute_64);  arg85_1 = view_129 = permute_64 = None
        view_130 = torch.ops.aten.view.default(addmm_16, [2, 64, 3072]);  addmm_16 = None
        mul_45 = torch.ops.aten.mul.Tensor(view_130, 0.5)
        pow_6 = torch.ops.aten.pow.Tensor_Scalar(view_130, 3.0)
        mul_46 = torch.ops.aten.mul.Tensor(pow_6, 0.044715);  pow_6 = None
        add_53 = torch.ops.aten.add.Tensor(view_130, mul_46);  view_130 = mul_46 = None
        mul_47 = torch.ops.aten.mul.Tensor(add_53, 0.7978845608028654);  add_53 = None
        tanh_5 = torch.ops.aten.tanh.default(mul_47);  mul_47 = None
        add_54 = torch.ops.aten.add.Tensor(tanh_5, 1.0);  tanh_5 = None
        mul_48 = torch.ops.aten.mul.Tensor(mul_45, add_54);  mul_45 = add_54 = None
        view_131 = torch.ops.aten.view.default(mul_48, [128, 3072]);  mul_48 = None
        permute_65 = torch.ops.aten.permute.default(arg86_1, [1, 0]);  arg86_1 = None
        addmm_17 = torch.ops.aten.addmm.default(arg87_1, view_131, permute_65);  arg87_1 = view_131 = permute_65 = None
        view_132 = torch.ops.aten.view.default(addmm_17, [2, 64, 768]);  addmm_17 = None
        add_55 = torch.ops.aten.add.Tensor(add_50, view_132);  add_50 = view_132 = None
        var_mean_12 = torch.ops.aten.var_mean.correction(add_55, [2], correction = 0, keepdim = True)
        getitem_24 = var_mean_12[0]
        getitem_25 = var_mean_12[1];  var_mean_12 = None
        add_56 = torch.ops.aten.add.Tensor(getitem_24, 1e-05);  getitem_24 = None
        rsqrt_12 = torch.ops.aten.rsqrt.default(add_56);  add_56 = None
        sub_19 = torch.ops.aten.sub.Tensor(add_55, getitem_25);  getitem_25 = None
        mul_49 = torch.ops.aten.mul.Tensor(sub_19, rsqrt_12);  sub_19 = rsqrt_12 = None
        mul_50 = torch.ops.aten.mul.Tensor(mul_49, arg88_1);  mul_49 = arg88_1 = None
        add_57 = torch.ops.aten.add.Tensor(mul_50, arg89_1);  mul_50 = arg89_1 = None
        permute_66 = torch.ops.aten.permute.default(arg90_1, [1, 0]);  arg90_1 = None
        view_133 = torch.ops.aten.view.default(add_57, [128, 768])
        mm_18 = torch.ops.aten.mm.default(view_133, permute_66);  view_133 = permute_66 = None
        view_134 = torch.ops.aten.view.default(mm_18, [2, 64, 768]);  mm_18 = None
        permute_67 = torch.ops.aten.permute.default(arg91_1, [1, 0]);  arg91_1 = None
        view_135 = torch.ops.aten.view.default(add_57, [128, 768])
        mm_19 = torch.ops.aten.mm.default(view_135, permute_67);  view_135 = permute_67 = None
        view_136 = torch.ops.aten.view.default(mm_19, [2, 64, 768]);  mm_19 = None
        permute_68 = torch.ops.aten.permute.default(arg92_1, [1, 0]);  arg92_1 = None
        view_137 = torch.ops.aten.view.default(add_57, [128, 768]);  add_57 = None
        mm_20 = torch.ops.aten.mm.default(view_137, permute_68);  view_137 = permute_68 = None
        view_138 = torch.ops.aten.view.default(mm_20, [2, 64, 768]);  mm_20 = None
        view_139 = torch.ops.aten.view.default(view_134, [2, 64, 12, 64]);  view_134 = None
        permute_69 = torch.ops.aten.permute.default(view_139, [0, 2, 1, 3]);  view_139 = None
        view_140 = torch.ops.aten.view.default(view_136, [2, 64, 12, 64]);  view_136 = None
        permute_70 = torch.ops.aten.permute.default(view_140, [0, 2, 1, 3]);  view_140 = None
        view_141 = torch.ops.aten.view.default(view_138, [2, 64, 12, 64]);  view_138 = None
        permute_71 = torch.ops.aten.permute.default(view_141, [0, 2, 1, 3]);  view_141 = None
        permute_72 = torch.ops.aten.permute.default(permute_70, [0, 1, 3, 2])
        expand_26 = torch.ops.aten.expand.default(permute_69, [2, 12, 64, 64]);  permute_69 = None
        clone_44 = torch.ops.aten.clone.default(expand_26, memory_format = torch.contiguous_format);  expand_26 = None
        view_142 = torch.ops.aten.view.default(clone_44, [24, 64, 64]);  clone_44 = None
        expand_27 = torch.ops.aten.expand.default(permute_72, [2, 12, 64, 64]);  permute_72 = None
        clone_45 = torch.ops.aten.clone.default(expand_27, memory_format = torch.contiguous_format);  expand_27 = None
        view_143 = torch.ops.aten.view.default(clone_45, [24, 64, 64]);  clone_45 = None
        bmm_12 = torch.ops.aten.bmm.default(view_142, view_143);  view_142 = view_143 = None
        view_144 = torch.ops.aten.view.default(bmm_12, [2, 12, 64, 64]);  bmm_12 = None
        slice_83 = torch.ops.aten.slice.Tensor(arg93_1, 2, 0, 64);  arg93_1 = None
        slice_84 = torch.ops.aten.slice.Tensor(slice_83, 3, 0, 64);  slice_83 = None
        _tensor_constant6 = self._tensor_constant6;  _tensor_constant6 = None
        full_default_9 = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where_8 = torch.ops.aten.where.self(slice_84, view_144, full_default_9);  slice_84 = view_144 = full_default_9 = None
        add_58 = torch.ops.aten.add.Tensor(where_8, where_1);  where_8 = None
        amax_6 = torch.ops.aten.amax.default(add_58, [-1], True)
        sub_20 = torch.ops.aten.sub.Tensor(add_58, amax_6);  add_58 = amax_6 = None
        exp_6 = torch.ops.aten.exp.default(sub_20);  sub_20 = None
        sum_7 = torch.ops.aten.sum.dim_IntList(exp_6, [-1], True)
        div_6 = torch.ops.aten.div.Tensor(exp_6, sum_7);  exp_6 = sum_7 = None
        expand_28 = torch.ops.aten.expand.default(div_6, [2, 12, 64, 64]);  div_6 = None
        view_145 = torch.ops.aten.view.default(expand_28, [24, 64, 64]);  expand_28 = None
        expand_29 = torch.ops.aten.expand.default(permute_71, [2, 12, 64, 64])
        clone_47 = torch.ops.aten.clone.default(expand_29, memory_format = torch.contiguous_format);  expand_29 = None
        view_146 = torch.ops.aten.view.default(clone_47, [24, 64, 64]);  clone_47 = None
        bmm_13 = torch.ops.aten.bmm.default(view_145, view_146);  view_145 = view_146 = None
        view_147 = torch.ops.aten.view.default(bmm_13, [2, 12, 64, 64]);  bmm_13 = None
        permute_73 = torch.ops.aten.permute.default(view_147, [0, 2, 1, 3]);  view_147 = None
        clone_48 = torch.ops.aten.clone.default(permute_73, memory_format = torch.contiguous_format);  permute_73 = None
        view_148 = torch.ops.aten.view.default(clone_48, [2, 64, 768]);  clone_48 = None
        view_149 = torch.ops.aten.view.default(view_148, [128, 768]);  view_148 = None
        permute_74 = torch.ops.aten.permute.default(arg94_1, [1, 0]);  arg94_1 = None
        addmm_18 = torch.ops.aten.addmm.default(arg95_1, view_149, permute_74);  arg95_1 = view_149 = permute_74 = None
        view_150 = torch.ops.aten.view.default(addmm_18, [2, 64, 768]);  addmm_18 = None
        add_59 = torch.ops.aten.add.Tensor(view_150, add_55);  view_150 = add_55 = None
        var_mean_13 = torch.ops.aten.var_mean.correction(add_59, [2], correction = 0, keepdim = True)
        getitem_26 = var_mean_13[0]
        getitem_27 = var_mean_13[1];  var_mean_13 = None
        add_60 = torch.ops.aten.add.Tensor(getitem_26, 1e-05);  getitem_26 = None
        rsqrt_13 = torch.ops.aten.rsqrt.default(add_60);  add_60 = None
        sub_21 = torch.ops.aten.sub.Tensor(add_59, getitem_27);  getitem_27 = None
        mul_51 = torch.ops.aten.mul.Tensor(sub_21, rsqrt_13);  sub_21 = rsqrt_13 = None
        mul_52 = torch.ops.aten.mul.Tensor(mul_51, arg96_1);  mul_51 = arg96_1 = None
        add_61 = torch.ops.aten.add.Tensor(mul_52, arg97_1);  mul_52 = arg97_1 = None
        view_151 = torch.ops.aten.view.default(add_61, [128, 768]);  add_61 = None
        permute_75 = torch.ops.aten.permute.default(arg98_1, [1, 0]);  arg98_1 = None
        addmm_19 = torch.ops.aten.addmm.default(arg99_1, view_151, permute_75);  arg99_1 = view_151 = permute_75 = None
        view_152 = torch.ops.aten.view.default(addmm_19, [2, 64, 3072]);  addmm_19 = None
        mul_53 = torch.ops.aten.mul.Tensor(view_152, 0.5)
        pow_7 = torch.ops.aten.pow.Tensor_Scalar(view_152, 3.0)
        mul_54 = torch.ops.aten.mul.Tensor(pow_7, 0.044715);  pow_7 = None
        add_62 = torch.ops.aten.add.Tensor(view_152, mul_54);  view_152 = mul_54 = None
        mul_55 = torch.ops.aten.mul.Tensor(add_62, 0.7978845608028654);  add_62 = None
        tanh_6 = torch.ops.aten.tanh.default(mul_55);  mul_55 = None
        add_63 = torch.ops.aten.add.Tensor(tanh_6, 1.0);  tanh_6 = None
        mul_56 = torch.ops.aten.mul.Tensor(mul_53, add_63);  mul_53 = add_63 = None
        view_153 = torch.ops.aten.view.default(mul_56, [128, 3072]);  mul_56 = None
        permute_76 = torch.ops.aten.permute.default(arg100_1, [1, 0]);  arg100_1 = None
        addmm_20 = torch.ops.aten.addmm.default(arg101_1, view_153, permute_76);  arg101_1 = view_153 = permute_76 = None
        view_154 = torch.ops.aten.view.default(addmm_20, [2, 64, 768]);  addmm_20 = None
        add_64 = torch.ops.aten.add.Tensor(add_59, view_154);  add_59 = view_154 = None
        var_mean_14 = torch.ops.aten.var_mean.correction(add_64, [2], correction = 0, keepdim = True)
        getitem_28 = var_mean_14[0]
        getitem_29 = var_mean_14[1];  var_mean_14 = None
        add_65 = torch.ops.aten.add.Tensor(getitem_28, 1e-05);  getitem_28 = None
        rsqrt_14 = torch.ops.aten.rsqrt.default(add_65);  add_65 = None
        sub_22 = torch.ops.aten.sub.Tensor(add_64, getitem_29);  getitem_29 = None
        mul_57 = torch.ops.aten.mul.Tensor(sub_22, rsqrt_14);  sub_22 = rsqrt_14 = None
        mul_58 = torch.ops.aten.mul.Tensor(mul_57, arg102_1);  mul_57 = arg102_1 = None
        add_66 = torch.ops.aten.add.Tensor(mul_58, arg103_1);  mul_58 = arg103_1 = None
        permute_77 = torch.ops.aten.permute.default(arg104_1, [1, 0]);  arg104_1 = None
        view_155 = torch.ops.aten.view.default(add_66, [128, 768])
        mm_21 = torch.ops.aten.mm.default(view_155, permute_77);  view_155 = permute_77 = None
        view_156 = torch.ops.aten.view.default(mm_21, [2, 64, 768]);  mm_21 = None
        permute_78 = torch.ops.aten.permute.default(arg105_1, [1, 0]);  arg105_1 = None
        view_157 = torch.ops.aten.view.default(add_66, [128, 768])
        mm_22 = torch.ops.aten.mm.default(view_157, permute_78);  view_157 = permute_78 = None
        view_158 = torch.ops.aten.view.default(mm_22, [2, 64, 768]);  mm_22 = None
        permute_79 = torch.ops.aten.permute.default(arg106_1, [1, 0]);  arg106_1 = None
        view_159 = torch.ops.aten.view.default(add_66, [128, 768]);  add_66 = None
        mm_23 = torch.ops.aten.mm.default(view_159, permute_79);  view_159 = permute_79 = None
        view_160 = torch.ops.aten.view.default(mm_23, [2, 64, 768]);  mm_23 = None
        view_161 = torch.ops.aten.view.default(view_156, [2, 64, 12, 64]);  view_156 = None
        permute_80 = torch.ops.aten.permute.default(view_161, [0, 2, 1, 3]);  view_161 = None
        view_162 = torch.ops.aten.view.default(view_158, [2, 64, 12, 64]);  view_158 = None
        permute_81 = torch.ops.aten.permute.default(view_162, [0, 2, 1, 3]);  view_162 = None
        view_163 = torch.ops.aten.view.default(view_160, [2, 64, 12, 64]);  view_160 = None
        permute_82 = torch.ops.aten.permute.default(view_163, [0, 2, 1, 3]);  view_163 = None
        permute_83 = torch.ops.aten.permute.default(permute_81, [0, 1, 3, 2])
        expand_30 = torch.ops.aten.expand.default(permute_80, [2, 12, 64, 64]);  permute_80 = None
        clone_51 = torch.ops.aten.clone.default(expand_30, memory_format = torch.contiguous_format);  expand_30 = None
        view_164 = torch.ops.aten.view.default(clone_51, [24, 64, 64]);  clone_51 = None
        expand_31 = torch.ops.aten.expand.default(permute_83, [2, 12, 64, 64]);  permute_83 = None
        clone_52 = torch.ops.aten.clone.default(expand_31, memory_format = torch.contiguous_format);  expand_31 = None
        view_165 = torch.ops.aten.view.default(clone_52, [24, 64, 64]);  clone_52 = None
        bmm_14 = torch.ops.aten.bmm.default(view_164, view_165);  view_164 = view_165 = None
        view_166 = torch.ops.aten.view.default(bmm_14, [2, 12, 64, 64]);  bmm_14 = None
        slice_93 = torch.ops.aten.slice.Tensor(arg107_1, 2, 0, 64);  arg107_1 = None
        slice_94 = torch.ops.aten.slice.Tensor(slice_93, 3, 0, 64);  slice_93 = None
        _tensor_constant7 = self._tensor_constant7;  _tensor_constant7 = None
        full_default_10 = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where_9 = torch.ops.aten.where.self(slice_94, view_166, full_default_10);  slice_94 = view_166 = full_default_10 = None
        add_67 = torch.ops.aten.add.Tensor(where_9, where_1);  where_9 = None
        amax_7 = torch.ops.aten.amax.default(add_67, [-1], True)
        sub_23 = torch.ops.aten.sub.Tensor(add_67, amax_7);  add_67 = amax_7 = None
        exp_7 = torch.ops.aten.exp.default(sub_23);  sub_23 = None
        sum_8 = torch.ops.aten.sum.dim_IntList(exp_7, [-1], True)
        div_7 = torch.ops.aten.div.Tensor(exp_7, sum_8);  exp_7 = sum_8 = None
        expand_32 = torch.ops.aten.expand.default(div_7, [2, 12, 64, 64]);  div_7 = None
        view_167 = torch.ops.aten.view.default(expand_32, [24, 64, 64]);  expand_32 = None
        expand_33 = torch.ops.aten.expand.default(permute_82, [2, 12, 64, 64])
        clone_54 = torch.ops.aten.clone.default(expand_33, memory_format = torch.contiguous_format);  expand_33 = None
        view_168 = torch.ops.aten.view.default(clone_54, [24, 64, 64]);  clone_54 = None
        bmm_15 = torch.ops.aten.bmm.default(view_167, view_168);  view_167 = view_168 = None
        view_169 = torch.ops.aten.view.default(bmm_15, [2, 12, 64, 64]);  bmm_15 = None
        permute_84 = torch.ops.aten.permute.default(view_169, [0, 2, 1, 3]);  view_169 = None
        clone_55 = torch.ops.aten.clone.default(permute_84, memory_format = torch.contiguous_format);  permute_84 = None
        view_170 = torch.ops.aten.view.default(clone_55, [2, 64, 768]);  clone_55 = None
        view_171 = torch.ops.aten.view.default(view_170, [128, 768]);  view_170 = None
        permute_85 = torch.ops.aten.permute.default(arg108_1, [1, 0]);  arg108_1 = None
        addmm_21 = torch.ops.aten.addmm.default(arg109_1, view_171, permute_85);  arg109_1 = view_171 = permute_85 = None
        view_172 = torch.ops.aten.view.default(addmm_21, [2, 64, 768]);  addmm_21 = None
        add_68 = torch.ops.aten.add.Tensor(view_172, add_64);  view_172 = add_64 = None
        var_mean_15 = torch.ops.aten.var_mean.correction(add_68, [2], correction = 0, keepdim = True)
        getitem_30 = var_mean_15[0]
        getitem_31 = var_mean_15[1];  var_mean_15 = None
        add_69 = torch.ops.aten.add.Tensor(getitem_30, 1e-05);  getitem_30 = None
        rsqrt_15 = torch.ops.aten.rsqrt.default(add_69);  add_69 = None
        sub_24 = torch.ops.aten.sub.Tensor(add_68, getitem_31);  getitem_31 = None
        mul_59 = torch.ops.aten.mul.Tensor(sub_24, rsqrt_15);  sub_24 = rsqrt_15 = None
        mul_60 = torch.ops.aten.mul.Tensor(mul_59, arg110_1);  mul_59 = arg110_1 = None
        add_70 = torch.ops.aten.add.Tensor(mul_60, arg111_1);  mul_60 = arg111_1 = None
        view_173 = torch.ops.aten.view.default(add_70, [128, 768]);  add_70 = None
        permute_86 = torch.ops.aten.permute.default(arg112_1, [1, 0]);  arg112_1 = None
        addmm_22 = torch.ops.aten.addmm.default(arg113_1, view_173, permute_86);  arg113_1 = view_173 = permute_86 = None
        view_174 = torch.ops.aten.view.default(addmm_22, [2, 64, 3072]);  addmm_22 = None
        mul_61 = torch.ops.aten.mul.Tensor(view_174, 0.5)
        pow_8 = torch.ops.aten.pow.Tensor_Scalar(view_174, 3.0)
        mul_62 = torch.ops.aten.mul.Tensor(pow_8, 0.044715);  pow_8 = None
        add_71 = torch.ops.aten.add.Tensor(view_174, mul_62);  view_174 = mul_62 = None
        mul_63 = torch.ops.aten.mul.Tensor(add_71, 0.7978845608028654);  add_71 = None
        tanh_7 = torch.ops.aten.tanh.default(mul_63);  mul_63 = None
        add_72 = torch.ops.aten.add.Tensor(tanh_7, 1.0);  tanh_7 = None
        mul_64 = torch.ops.aten.mul.Tensor(mul_61, add_72);  mul_61 = add_72 = None
        view_175 = torch.ops.aten.view.default(mul_64, [128, 3072]);  mul_64 = None
        permute_87 = torch.ops.aten.permute.default(arg114_1, [1, 0]);  arg114_1 = None
        addmm_23 = torch.ops.aten.addmm.default(arg115_1, view_175, permute_87);  arg115_1 = view_175 = permute_87 = None
        view_176 = torch.ops.aten.view.default(addmm_23, [2, 64, 768]);  addmm_23 = None
        add_73 = torch.ops.aten.add.Tensor(add_68, view_176);  add_68 = view_176 = None
        var_mean_16 = torch.ops.aten.var_mean.correction(add_73, [2], correction = 0, keepdim = True)
        getitem_32 = var_mean_16[0]
        getitem_33 = var_mean_16[1];  var_mean_16 = None
        add_74 = torch.ops.aten.add.Tensor(getitem_32, 1e-05);  getitem_32 = None
        rsqrt_16 = torch.ops.aten.rsqrt.default(add_74);  add_74 = None
        sub_25 = torch.ops.aten.sub.Tensor(add_73, getitem_33);  getitem_33 = None
        mul_65 = torch.ops.aten.mul.Tensor(sub_25, rsqrt_16);  sub_25 = rsqrt_16 = None
        mul_66 = torch.ops.aten.mul.Tensor(mul_65, arg116_1);  mul_65 = arg116_1 = None
        add_75 = torch.ops.aten.add.Tensor(mul_66, arg117_1);  mul_66 = arg117_1 = None
        permute_88 = torch.ops.aten.permute.default(arg118_1, [1, 0]);  arg118_1 = None
        view_177 = torch.ops.aten.view.default(add_75, [128, 768])
        mm_24 = torch.ops.aten.mm.default(view_177, permute_88);  view_177 = permute_88 = None
        view_178 = torch.ops.aten.view.default(mm_24, [2, 64, 768]);  mm_24 = None
        permute_89 = torch.ops.aten.permute.default(arg119_1, [1, 0]);  arg119_1 = None
        view_179 = torch.ops.aten.view.default(add_75, [128, 768])
        mm_25 = torch.ops.aten.mm.default(view_179, permute_89);  view_179 = permute_89 = None
        view_180 = torch.ops.aten.view.default(mm_25, [2, 64, 768]);  mm_25 = None
        permute_90 = torch.ops.aten.permute.default(arg120_1, [1, 0]);  arg120_1 = None
        view_181 = torch.ops.aten.view.default(add_75, [128, 768]);  add_75 = None
        mm_26 = torch.ops.aten.mm.default(view_181, permute_90);  view_181 = permute_90 = None
        view_182 = torch.ops.aten.view.default(mm_26, [2, 64, 768]);  mm_26 = None
        view_183 = torch.ops.aten.view.default(view_178, [2, 64, 12, 64]);  view_178 = None
        permute_91 = torch.ops.aten.permute.default(view_183, [0, 2, 1, 3]);  view_183 = None
        view_184 = torch.ops.aten.view.default(view_180, [2, 64, 12, 64]);  view_180 = None
        permute_92 = torch.ops.aten.permute.default(view_184, [0, 2, 1, 3]);  view_184 = None
        view_185 = torch.ops.aten.view.default(view_182, [2, 64, 12, 64]);  view_182 = None
        permute_93 = torch.ops.aten.permute.default(view_185, [0, 2, 1, 3]);  view_185 = None
        permute_94 = torch.ops.aten.permute.default(permute_92, [0, 1, 3, 2])
        expand_34 = torch.ops.aten.expand.default(permute_91, [2, 12, 64, 64]);  permute_91 = None
        clone_58 = torch.ops.aten.clone.default(expand_34, memory_format = torch.contiguous_format);  expand_34 = None
        view_186 = torch.ops.aten.view.default(clone_58, [24, 64, 64]);  clone_58 = None
        expand_35 = torch.ops.aten.expand.default(permute_94, [2, 12, 64, 64]);  permute_94 = None
        clone_59 = torch.ops.aten.clone.default(expand_35, memory_format = torch.contiguous_format);  expand_35 = None
        view_187 = torch.ops.aten.view.default(clone_59, [24, 64, 64]);  clone_59 = None
        bmm_16 = torch.ops.aten.bmm.default(view_186, view_187);  view_186 = view_187 = None
        view_188 = torch.ops.aten.view.default(bmm_16, [2, 12, 64, 64]);  bmm_16 = None
        slice_103 = torch.ops.aten.slice.Tensor(arg121_1, 2, 0, 64);  arg121_1 = None
        slice_104 = torch.ops.aten.slice.Tensor(slice_103, 3, 0, 64);  slice_103 = None
        _tensor_constant8 = self._tensor_constant8;  _tensor_constant8 = None
        full_default_11 = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where_10 = torch.ops.aten.where.self(slice_104, view_188, full_default_11);  slice_104 = view_188 = full_default_11 = None
        add_76 = torch.ops.aten.add.Tensor(where_10, where_1);  where_10 = None
        amax_8 = torch.ops.aten.amax.default(add_76, [-1], True)
        sub_26 = torch.ops.aten.sub.Tensor(add_76, amax_8);  add_76 = amax_8 = None
        exp_8 = torch.ops.aten.exp.default(sub_26);  sub_26 = None
        sum_9 = torch.ops.aten.sum.dim_IntList(exp_8, [-1], True)
        div_8 = torch.ops.aten.div.Tensor(exp_8, sum_9);  exp_8 = sum_9 = None
        expand_36 = torch.ops.aten.expand.default(div_8, [2, 12, 64, 64]);  div_8 = None
        view_189 = torch.ops.aten.view.default(expand_36, [24, 64, 64]);  expand_36 = None
        expand_37 = torch.ops.aten.expand.default(permute_93, [2, 12, 64, 64])
        clone_61 = torch.ops.aten.clone.default(expand_37, memory_format = torch.contiguous_format);  expand_37 = None
        view_190 = torch.ops.aten.view.default(clone_61, [24, 64, 64]);  clone_61 = None
        bmm_17 = torch.ops.aten.bmm.default(view_189, view_190);  view_189 = view_190 = None
        view_191 = torch.ops.aten.view.default(bmm_17, [2, 12, 64, 64]);  bmm_17 = None
        permute_95 = torch.ops.aten.permute.default(view_191, [0, 2, 1, 3]);  view_191 = None
        clone_62 = torch.ops.aten.clone.default(permute_95, memory_format = torch.contiguous_format);  permute_95 = None
        view_192 = torch.ops.aten.view.default(clone_62, [2, 64, 768]);  clone_62 = None
        view_193 = torch.ops.aten.view.default(view_192, [128, 768]);  view_192 = None
        permute_96 = torch.ops.aten.permute.default(arg122_1, [1, 0]);  arg122_1 = None
        addmm_24 = torch.ops.aten.addmm.default(arg123_1, view_193, permute_96);  arg123_1 = view_193 = permute_96 = None
        view_194 = torch.ops.aten.view.default(addmm_24, [2, 64, 768]);  addmm_24 = None
        add_77 = torch.ops.aten.add.Tensor(view_194, add_73);  view_194 = add_73 = None
        var_mean_17 = torch.ops.aten.var_mean.correction(add_77, [2], correction = 0, keepdim = True)
        getitem_34 = var_mean_17[0]
        getitem_35 = var_mean_17[1];  var_mean_17 = None
        add_78 = torch.ops.aten.add.Tensor(getitem_34, 1e-05);  getitem_34 = None
        rsqrt_17 = torch.ops.aten.rsqrt.default(add_78);  add_78 = None
        sub_27 = torch.ops.aten.sub.Tensor(add_77, getitem_35);  getitem_35 = None
        mul_67 = torch.ops.aten.mul.Tensor(sub_27, rsqrt_17);  sub_27 = rsqrt_17 = None
        mul_68 = torch.ops.aten.mul.Tensor(mul_67, arg124_1);  mul_67 = arg124_1 = None
        add_79 = torch.ops.aten.add.Tensor(mul_68, arg125_1);  mul_68 = arg125_1 = None
        view_195 = torch.ops.aten.view.default(add_79, [128, 768]);  add_79 = None
        permute_97 = torch.ops.aten.permute.default(arg126_1, [1, 0]);  arg126_1 = None
        addmm_25 = torch.ops.aten.addmm.default(arg127_1, view_195, permute_97);  arg127_1 = view_195 = permute_97 = None
        view_196 = torch.ops.aten.view.default(addmm_25, [2, 64, 3072]);  addmm_25 = None
        mul_69 = torch.ops.aten.mul.Tensor(view_196, 0.5)
        pow_9 = torch.ops.aten.pow.Tensor_Scalar(view_196, 3.0)
        mul_70 = torch.ops.aten.mul.Tensor(pow_9, 0.044715);  pow_9 = None
        add_80 = torch.ops.aten.add.Tensor(view_196, mul_70);  view_196 = mul_70 = None
        mul_71 = torch.ops.aten.mul.Tensor(add_80, 0.7978845608028654);  add_80 = None
        tanh_8 = torch.ops.aten.tanh.default(mul_71);  mul_71 = None
        add_81 = torch.ops.aten.add.Tensor(tanh_8, 1.0);  tanh_8 = None
        mul_72 = torch.ops.aten.mul.Tensor(mul_69, add_81);  mul_69 = add_81 = None
        view_197 = torch.ops.aten.view.default(mul_72, [128, 3072]);  mul_72 = None
        permute_98 = torch.ops.aten.permute.default(arg128_1, [1, 0]);  arg128_1 = None
        addmm_26 = torch.ops.aten.addmm.default(arg129_1, view_197, permute_98);  arg129_1 = view_197 = permute_98 = None
        view_198 = torch.ops.aten.view.default(addmm_26, [2, 64, 768]);  addmm_26 = None
        add_82 = torch.ops.aten.add.Tensor(add_77, view_198);  add_77 = view_198 = None
        var_mean_18 = torch.ops.aten.var_mean.correction(add_82, [2], correction = 0, keepdim = True)
        getitem_36 = var_mean_18[0]
        getitem_37 = var_mean_18[1];  var_mean_18 = None
        add_83 = torch.ops.aten.add.Tensor(getitem_36, 1e-05);  getitem_36 = None
        rsqrt_18 = torch.ops.aten.rsqrt.default(add_83);  add_83 = None
        sub_28 = torch.ops.aten.sub.Tensor(add_82, getitem_37);  getitem_37 = None
        mul_73 = torch.ops.aten.mul.Tensor(sub_28, rsqrt_18);  sub_28 = rsqrt_18 = None
        mul_74 = torch.ops.aten.mul.Tensor(mul_73, arg130_1);  mul_73 = arg130_1 = None
        add_84 = torch.ops.aten.add.Tensor(mul_74, arg131_1);  mul_74 = arg131_1 = None
        permute_99 = torch.ops.aten.permute.default(arg132_1, [1, 0]);  arg132_1 = None
        view_199 = torch.ops.aten.view.default(add_84, [128, 768])
        mm_27 = torch.ops.aten.mm.default(view_199, permute_99);  view_199 = permute_99 = None
        view_200 = torch.ops.aten.view.default(mm_27, [2, 64, 768]);  mm_27 = None
        permute_100 = torch.ops.aten.permute.default(arg133_1, [1, 0]);  arg133_1 = None
        view_201 = torch.ops.aten.view.default(add_84, [128, 768])
        mm_28 = torch.ops.aten.mm.default(view_201, permute_100);  view_201 = permute_100 = None
        view_202 = torch.ops.aten.view.default(mm_28, [2, 64, 768]);  mm_28 = None
        permute_101 = torch.ops.aten.permute.default(arg134_1, [1, 0]);  arg134_1 = None
        view_203 = torch.ops.aten.view.default(add_84, [128, 768]);  add_84 = None
        mm_29 = torch.ops.aten.mm.default(view_203, permute_101);  view_203 = permute_101 = None
        view_204 = torch.ops.aten.view.default(mm_29, [2, 64, 768]);  mm_29 = None
        view_205 = torch.ops.aten.view.default(view_200, [2, 64, 12, 64]);  view_200 = None
        permute_102 = torch.ops.aten.permute.default(view_205, [0, 2, 1, 3]);  view_205 = None
        view_206 = torch.ops.aten.view.default(view_202, [2, 64, 12, 64]);  view_202 = None
        permute_103 = torch.ops.aten.permute.default(view_206, [0, 2, 1, 3]);  view_206 = None
        view_207 = torch.ops.aten.view.default(view_204, [2, 64, 12, 64]);  view_204 = None
        permute_104 = torch.ops.aten.permute.default(view_207, [0, 2, 1, 3]);  view_207 = None
        permute_105 = torch.ops.aten.permute.default(permute_103, [0, 1, 3, 2])
        expand_38 = torch.ops.aten.expand.default(permute_102, [2, 12, 64, 64]);  permute_102 = None
        clone_65 = torch.ops.aten.clone.default(expand_38, memory_format = torch.contiguous_format);  expand_38 = None
        view_208 = torch.ops.aten.view.default(clone_65, [24, 64, 64]);  clone_65 = None
        expand_39 = torch.ops.aten.expand.default(permute_105, [2, 12, 64, 64]);  permute_105 = None
        clone_66 = torch.ops.aten.clone.default(expand_39, memory_format = torch.contiguous_format);  expand_39 = None
        view_209 = torch.ops.aten.view.default(clone_66, [24, 64, 64]);  clone_66 = None
        bmm_18 = torch.ops.aten.bmm.default(view_208, view_209);  view_208 = view_209 = None
        view_210 = torch.ops.aten.view.default(bmm_18, [2, 12, 64, 64]);  bmm_18 = None
        slice_113 = torch.ops.aten.slice.Tensor(arg135_1, 2, 0, 64);  arg135_1 = None
        slice_114 = torch.ops.aten.slice.Tensor(slice_113, 3, 0, 64);  slice_113 = None
        _tensor_constant9 = self._tensor_constant9;  _tensor_constant9 = None
        full_default_12 = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where_11 = torch.ops.aten.where.self(slice_114, view_210, full_default_12);  slice_114 = view_210 = full_default_12 = None
        add_85 = torch.ops.aten.add.Tensor(where_11, where_1);  where_11 = None
        amax_9 = torch.ops.aten.amax.default(add_85, [-1], True)
        sub_29 = torch.ops.aten.sub.Tensor(add_85, amax_9);  add_85 = amax_9 = None
        exp_9 = torch.ops.aten.exp.default(sub_29);  sub_29 = None
        sum_10 = torch.ops.aten.sum.dim_IntList(exp_9, [-1], True)
        div_9 = torch.ops.aten.div.Tensor(exp_9, sum_10);  exp_9 = sum_10 = None
        expand_40 = torch.ops.aten.expand.default(div_9, [2, 12, 64, 64]);  div_9 = None
        view_211 = torch.ops.aten.view.default(expand_40, [24, 64, 64]);  expand_40 = None
        expand_41 = torch.ops.aten.expand.default(permute_104, [2, 12, 64, 64])
        clone_68 = torch.ops.aten.clone.default(expand_41, memory_format = torch.contiguous_format);  expand_41 = None
        view_212 = torch.ops.aten.view.default(clone_68, [24, 64, 64]);  clone_68 = None
        bmm_19 = torch.ops.aten.bmm.default(view_211, view_212);  view_211 = view_212 = None
        view_213 = torch.ops.aten.view.default(bmm_19, [2, 12, 64, 64]);  bmm_19 = None
        permute_106 = torch.ops.aten.permute.default(view_213, [0, 2, 1, 3]);  view_213 = None
        clone_69 = torch.ops.aten.clone.default(permute_106, memory_format = torch.contiguous_format);  permute_106 = None
        view_214 = torch.ops.aten.view.default(clone_69, [2, 64, 768]);  clone_69 = None
        view_215 = torch.ops.aten.view.default(view_214, [128, 768]);  view_214 = None
        permute_107 = torch.ops.aten.permute.default(arg136_1, [1, 0]);  arg136_1 = None
        addmm_27 = torch.ops.aten.addmm.default(arg137_1, view_215, permute_107);  arg137_1 = view_215 = permute_107 = None
        view_216 = torch.ops.aten.view.default(addmm_27, [2, 64, 768]);  addmm_27 = None
        add_86 = torch.ops.aten.add.Tensor(view_216, add_82);  view_216 = add_82 = None
        var_mean_19 = torch.ops.aten.var_mean.correction(add_86, [2], correction = 0, keepdim = True)
        getitem_38 = var_mean_19[0]
        getitem_39 = var_mean_19[1];  var_mean_19 = None
        add_87 = torch.ops.aten.add.Tensor(getitem_38, 1e-05);  getitem_38 = None
        rsqrt_19 = torch.ops.aten.rsqrt.default(add_87);  add_87 = None
        sub_30 = torch.ops.aten.sub.Tensor(add_86, getitem_39);  getitem_39 = None
        mul_75 = torch.ops.aten.mul.Tensor(sub_30, rsqrt_19);  sub_30 = rsqrt_19 = None
        mul_76 = torch.ops.aten.mul.Tensor(mul_75, arg138_1);  mul_75 = arg138_1 = None
        add_88 = torch.ops.aten.add.Tensor(mul_76, arg139_1);  mul_76 = arg139_1 = None
        view_217 = torch.ops.aten.view.default(add_88, [128, 768]);  add_88 = None
        permute_108 = torch.ops.aten.permute.default(arg140_1, [1, 0]);  arg140_1 = None
        addmm_28 = torch.ops.aten.addmm.default(arg141_1, view_217, permute_108);  arg141_1 = view_217 = permute_108 = None
        view_218 = torch.ops.aten.view.default(addmm_28, [2, 64, 3072]);  addmm_28 = None
        mul_77 = torch.ops.aten.mul.Tensor(view_218, 0.5)
        pow_10 = torch.ops.aten.pow.Tensor_Scalar(view_218, 3.0)
        mul_78 = torch.ops.aten.mul.Tensor(pow_10, 0.044715);  pow_10 = None
        add_89 = torch.ops.aten.add.Tensor(view_218, mul_78);  view_218 = mul_78 = None
        mul_79 = torch.ops.aten.mul.Tensor(add_89, 0.7978845608028654);  add_89 = None
        tanh_9 = torch.ops.aten.tanh.default(mul_79);  mul_79 = None
        add_90 = torch.ops.aten.add.Tensor(tanh_9, 1.0);  tanh_9 = None
        mul_80 = torch.ops.aten.mul.Tensor(mul_77, add_90);  mul_77 = add_90 = None
        view_219 = torch.ops.aten.view.default(mul_80, [128, 3072]);  mul_80 = None
        permute_109 = torch.ops.aten.permute.default(arg142_1, [1, 0]);  arg142_1 = None
        addmm_29 = torch.ops.aten.addmm.default(arg143_1, view_219, permute_109);  arg143_1 = view_219 = permute_109 = None
        view_220 = torch.ops.aten.view.default(addmm_29, [2, 64, 768]);  addmm_29 = None
        add_91 = torch.ops.aten.add.Tensor(add_86, view_220);  add_86 = view_220 = None
        var_mean_20 = torch.ops.aten.var_mean.correction(add_91, [2], correction = 0, keepdim = True)
        getitem_40 = var_mean_20[0]
        getitem_41 = var_mean_20[1];  var_mean_20 = None
        add_92 = torch.ops.aten.add.Tensor(getitem_40, 1e-05);  getitem_40 = None
        rsqrt_20 = torch.ops.aten.rsqrt.default(add_92);  add_92 = None
        sub_31 = torch.ops.aten.sub.Tensor(add_91, getitem_41);  getitem_41 = None
        mul_81 = torch.ops.aten.mul.Tensor(sub_31, rsqrt_20);  sub_31 = rsqrt_20 = None
        mul_82 = torch.ops.aten.mul.Tensor(mul_81, arg144_1);  mul_81 = arg144_1 = None
        add_93 = torch.ops.aten.add.Tensor(mul_82, arg145_1);  mul_82 = arg145_1 = None
        permute_110 = torch.ops.aten.permute.default(arg146_1, [1, 0]);  arg146_1 = None
        view_221 = torch.ops.aten.view.default(add_93, [128, 768])
        mm_30 = torch.ops.aten.mm.default(view_221, permute_110);  view_221 = permute_110 = None
        view_222 = torch.ops.aten.view.default(mm_30, [2, 64, 768]);  mm_30 = None
        permute_111 = torch.ops.aten.permute.default(arg147_1, [1, 0]);  arg147_1 = None
        view_223 = torch.ops.aten.view.default(add_93, [128, 768])
        mm_31 = torch.ops.aten.mm.default(view_223, permute_111);  view_223 = permute_111 = None
        view_224 = torch.ops.aten.view.default(mm_31, [2, 64, 768]);  mm_31 = None
        permute_112 = torch.ops.aten.permute.default(arg148_1, [1, 0]);  arg148_1 = None
        view_225 = torch.ops.aten.view.default(add_93, [128, 768]);  add_93 = None
        mm_32 = torch.ops.aten.mm.default(view_225, permute_112);  view_225 = permute_112 = None
        view_226 = torch.ops.aten.view.default(mm_32, [2, 64, 768]);  mm_32 = None
        view_227 = torch.ops.aten.view.default(view_222, [2, 64, 12, 64]);  view_222 = None
        permute_113 = torch.ops.aten.permute.default(view_227, [0, 2, 1, 3]);  view_227 = None
        view_228 = torch.ops.aten.view.default(view_224, [2, 64, 12, 64]);  view_224 = None
        permute_114 = torch.ops.aten.permute.default(view_228, [0, 2, 1, 3]);  view_228 = None
        view_229 = torch.ops.aten.view.default(view_226, [2, 64, 12, 64]);  view_226 = None
        permute_115 = torch.ops.aten.permute.default(view_229, [0, 2, 1, 3]);  view_229 = None
        permute_116 = torch.ops.aten.permute.default(permute_114, [0, 1, 3, 2])
        expand_42 = torch.ops.aten.expand.default(permute_113, [2, 12, 64, 64]);  permute_113 = None
        clone_72 = torch.ops.aten.clone.default(expand_42, memory_format = torch.contiguous_format);  expand_42 = None
        view_230 = torch.ops.aten.view.default(clone_72, [24, 64, 64]);  clone_72 = None
        expand_43 = torch.ops.aten.expand.default(permute_116, [2, 12, 64, 64]);  permute_116 = None
        clone_73 = torch.ops.aten.clone.default(expand_43, memory_format = torch.contiguous_format);  expand_43 = None
        view_231 = torch.ops.aten.view.default(clone_73, [24, 64, 64]);  clone_73 = None
        bmm_20 = torch.ops.aten.bmm.default(view_230, view_231);  view_230 = view_231 = None
        view_232 = torch.ops.aten.view.default(bmm_20, [2, 12, 64, 64]);  bmm_20 = None
        slice_123 = torch.ops.aten.slice.Tensor(arg149_1, 2, 0, 64);  arg149_1 = None
        slice_124 = torch.ops.aten.slice.Tensor(slice_123, 3, 0, 64);  slice_123 = None
        _tensor_constant10 = self._tensor_constant10;  _tensor_constant10 = None
        full_default_13 = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where_12 = torch.ops.aten.where.self(slice_124, view_232, full_default_13);  slice_124 = view_232 = full_default_13 = None
        add_94 = torch.ops.aten.add.Tensor(where_12, where_1);  where_12 = None
        amax_10 = torch.ops.aten.amax.default(add_94, [-1], True)
        sub_32 = torch.ops.aten.sub.Tensor(add_94, amax_10);  add_94 = amax_10 = None
        exp_10 = torch.ops.aten.exp.default(sub_32);  sub_32 = None
        sum_11 = torch.ops.aten.sum.dim_IntList(exp_10, [-1], True)
        div_10 = torch.ops.aten.div.Tensor(exp_10, sum_11);  exp_10 = sum_11 = None
        expand_44 = torch.ops.aten.expand.default(div_10, [2, 12, 64, 64]);  div_10 = None
        view_233 = torch.ops.aten.view.default(expand_44, [24, 64, 64]);  expand_44 = None
        expand_45 = torch.ops.aten.expand.default(permute_115, [2, 12, 64, 64])
        clone_75 = torch.ops.aten.clone.default(expand_45, memory_format = torch.contiguous_format);  expand_45 = None
        view_234 = torch.ops.aten.view.default(clone_75, [24, 64, 64]);  clone_75 = None
        bmm_21 = torch.ops.aten.bmm.default(view_233, view_234);  view_233 = view_234 = None
        view_235 = torch.ops.aten.view.default(bmm_21, [2, 12, 64, 64]);  bmm_21 = None
        permute_117 = torch.ops.aten.permute.default(view_235, [0, 2, 1, 3]);  view_235 = None
        clone_76 = torch.ops.aten.clone.default(permute_117, memory_format = torch.contiguous_format);  permute_117 = None
        view_236 = torch.ops.aten.view.default(clone_76, [2, 64, 768]);  clone_76 = None
        view_237 = torch.ops.aten.view.default(view_236, [128, 768]);  view_236 = None
        permute_118 = torch.ops.aten.permute.default(arg150_1, [1, 0]);  arg150_1 = None
        addmm_30 = torch.ops.aten.addmm.default(arg151_1, view_237, permute_118);  arg151_1 = view_237 = permute_118 = None
        view_238 = torch.ops.aten.view.default(addmm_30, [2, 64, 768]);  addmm_30 = None
        add_95 = torch.ops.aten.add.Tensor(view_238, add_91);  view_238 = add_91 = None
        var_mean_21 = torch.ops.aten.var_mean.correction(add_95, [2], correction = 0, keepdim = True)
        getitem_42 = var_mean_21[0]
        getitem_43 = var_mean_21[1];  var_mean_21 = None
        add_96 = torch.ops.aten.add.Tensor(getitem_42, 1e-05);  getitem_42 = None
        rsqrt_21 = torch.ops.aten.rsqrt.default(add_96);  add_96 = None
        sub_33 = torch.ops.aten.sub.Tensor(add_95, getitem_43);  getitem_43 = None
        mul_83 = torch.ops.aten.mul.Tensor(sub_33, rsqrt_21);  sub_33 = rsqrt_21 = None
        mul_84 = torch.ops.aten.mul.Tensor(mul_83, arg152_1);  mul_83 = arg152_1 = None
        add_97 = torch.ops.aten.add.Tensor(mul_84, arg153_1);  mul_84 = arg153_1 = None
        view_239 = torch.ops.aten.view.default(add_97, [128, 768]);  add_97 = None
        permute_119 = torch.ops.aten.permute.default(arg154_1, [1, 0]);  arg154_1 = None
        addmm_31 = torch.ops.aten.addmm.default(arg155_1, view_239, permute_119);  arg155_1 = view_239 = permute_119 = None
        view_240 = torch.ops.aten.view.default(addmm_31, [2, 64, 3072]);  addmm_31 = None
        mul_85 = torch.ops.aten.mul.Tensor(view_240, 0.5)
        pow_11 = torch.ops.aten.pow.Tensor_Scalar(view_240, 3.0)
        mul_86 = torch.ops.aten.mul.Tensor(pow_11, 0.044715);  pow_11 = None
        add_98 = torch.ops.aten.add.Tensor(view_240, mul_86);  view_240 = mul_86 = None
        mul_87 = torch.ops.aten.mul.Tensor(add_98, 0.7978845608028654);  add_98 = None
        tanh_10 = torch.ops.aten.tanh.default(mul_87);  mul_87 = None
        add_99 = torch.ops.aten.add.Tensor(tanh_10, 1.0);  tanh_10 = None
        mul_88 = torch.ops.aten.mul.Tensor(mul_85, add_99);  mul_85 = add_99 = None
        view_241 = torch.ops.aten.view.default(mul_88, [128, 3072]);  mul_88 = None
        permute_120 = torch.ops.aten.permute.default(arg156_1, [1, 0]);  arg156_1 = None
        addmm_32 = torch.ops.aten.addmm.default(arg157_1, view_241, permute_120);  arg157_1 = view_241 = permute_120 = None
        view_242 = torch.ops.aten.view.default(addmm_32, [2, 64, 768]);  addmm_32 = None
        add_100 = torch.ops.aten.add.Tensor(add_95, view_242);  add_95 = view_242 = None
        var_mean_22 = torch.ops.aten.var_mean.correction(add_100, [2], correction = 0, keepdim = True)
        getitem_44 = var_mean_22[0]
        getitem_45 = var_mean_22[1];  var_mean_22 = None
        add_101 = torch.ops.aten.add.Tensor(getitem_44, 1e-05);  getitem_44 = None
        rsqrt_22 = torch.ops.aten.rsqrt.default(add_101);  add_101 = None
        sub_34 = torch.ops.aten.sub.Tensor(add_100, getitem_45);  getitem_45 = None
        mul_89 = torch.ops.aten.mul.Tensor(sub_34, rsqrt_22);  sub_34 = rsqrt_22 = None
        mul_90 = torch.ops.aten.mul.Tensor(mul_89, arg158_1);  mul_89 = arg158_1 = None
        add_102 = torch.ops.aten.add.Tensor(mul_90, arg159_1);  mul_90 = arg159_1 = None
        permute_121 = torch.ops.aten.permute.default(arg160_1, [1, 0]);  arg160_1 = None
        view_243 = torch.ops.aten.view.default(add_102, [128, 768])
        mm_33 = torch.ops.aten.mm.default(view_243, permute_121);  view_243 = permute_121 = None
        view_244 = torch.ops.aten.view.default(mm_33, [2, 64, 768]);  mm_33 = None
        permute_122 = torch.ops.aten.permute.default(arg161_1, [1, 0]);  arg161_1 = None
        view_245 = torch.ops.aten.view.default(add_102, [128, 768])
        mm_34 = torch.ops.aten.mm.default(view_245, permute_122);  view_245 = permute_122 = None
        view_246 = torch.ops.aten.view.default(mm_34, [2, 64, 768]);  mm_34 = None
        permute_123 = torch.ops.aten.permute.default(arg162_1, [1, 0]);  arg162_1 = None
        view_247 = torch.ops.aten.view.default(add_102, [128, 768]);  add_102 = None
        mm_35 = torch.ops.aten.mm.default(view_247, permute_123);  view_247 = permute_123 = None
        view_248 = torch.ops.aten.view.default(mm_35, [2, 64, 768]);  mm_35 = None
        view_249 = torch.ops.aten.view.default(view_244, [2, 64, 12, 64]);  view_244 = None
        permute_124 = torch.ops.aten.permute.default(view_249, [0, 2, 1, 3]);  view_249 = None
        view_250 = torch.ops.aten.view.default(view_246, [2, 64, 12, 64]);  view_246 = None
        permute_125 = torch.ops.aten.permute.default(view_250, [0, 2, 1, 3]);  view_250 = None
        view_251 = torch.ops.aten.view.default(view_248, [2, 64, 12, 64]);  view_248 = None
        permute_126 = torch.ops.aten.permute.default(view_251, [0, 2, 1, 3]);  view_251 = None
        permute_127 = torch.ops.aten.permute.default(permute_125, [0, 1, 3, 2])
        expand_46 = torch.ops.aten.expand.default(permute_124, [2, 12, 64, 64]);  permute_124 = None
        clone_79 = torch.ops.aten.clone.default(expand_46, memory_format = torch.contiguous_format);  expand_46 = None
        view_252 = torch.ops.aten.view.default(clone_79, [24, 64, 64]);  clone_79 = None
        expand_47 = torch.ops.aten.expand.default(permute_127, [2, 12, 64, 64]);  permute_127 = None
        clone_80 = torch.ops.aten.clone.default(expand_47, memory_format = torch.contiguous_format);  expand_47 = None
        view_253 = torch.ops.aten.view.default(clone_80, [24, 64, 64]);  clone_80 = None
        bmm_22 = torch.ops.aten.bmm.default(view_252, view_253);  view_252 = view_253 = None
        view_254 = torch.ops.aten.view.default(bmm_22, [2, 12, 64, 64]);  bmm_22 = None
        slice_133 = torch.ops.aten.slice.Tensor(arg163_1, 2, 0, 64);  arg163_1 = None
        slice_134 = torch.ops.aten.slice.Tensor(slice_133, 3, 0, 64);  slice_133 = None
        _tensor_constant11 = self._tensor_constant11;  _tensor_constant11 = None
        full_default_14 = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where_13 = torch.ops.aten.where.self(slice_134, view_254, full_default_14);  slice_134 = view_254 = full_default_14 = None
        add_103 = torch.ops.aten.add.Tensor(where_13, where_1);  where_13 = where_1 = None
        amax_11 = torch.ops.aten.amax.default(add_103, [-1], True)
        sub_35 = torch.ops.aten.sub.Tensor(add_103, amax_11);  add_103 = amax_11 = None
        exp_11 = torch.ops.aten.exp.default(sub_35);  sub_35 = None
        sum_12 = torch.ops.aten.sum.dim_IntList(exp_11, [-1], True)
        div_11 = torch.ops.aten.div.Tensor(exp_11, sum_12);  exp_11 = sum_12 = None
        expand_48 = torch.ops.aten.expand.default(div_11, [2, 12, 64, 64]);  div_11 = None
        view_255 = torch.ops.aten.view.default(expand_48, [24, 64, 64]);  expand_48 = None
        expand_49 = torch.ops.aten.expand.default(permute_126, [2, 12, 64, 64])
        clone_82 = torch.ops.aten.clone.default(expand_49, memory_format = torch.contiguous_format);  expand_49 = None
        view_256 = torch.ops.aten.view.default(clone_82, [24, 64, 64]);  clone_82 = None
        bmm_23 = torch.ops.aten.bmm.default(view_255, view_256);  view_255 = view_256 = None
        view_257 = torch.ops.aten.view.default(bmm_23, [2, 12, 64, 64]);  bmm_23 = None
        permute_128 = torch.ops.aten.permute.default(view_257, [0, 2, 1, 3]);  view_257 = None
        clone_83 = torch.ops.aten.clone.default(permute_128, memory_format = torch.contiguous_format);  permute_128 = None
        view_258 = torch.ops.aten.view.default(clone_83, [2, 64, 768]);  clone_83 = None
        view_259 = torch.ops.aten.view.default(view_258, [128, 768]);  view_258 = None
        permute_129 = torch.ops.aten.permute.default(arg164_1, [1, 0]);  arg164_1 = None
        addmm_33 = torch.ops.aten.addmm.default(arg165_1, view_259, permute_129);  arg165_1 = view_259 = permute_129 = None
        view_260 = torch.ops.aten.view.default(addmm_33, [2, 64, 768]);  addmm_33 = None
        add_104 = torch.ops.aten.add.Tensor(view_260, add_100);  view_260 = add_100 = None
        var_mean_23 = torch.ops.aten.var_mean.correction(add_104, [2], correction = 0, keepdim = True)
        getitem_46 = var_mean_23[0]
        getitem_47 = var_mean_23[1];  var_mean_23 = None
        add_105 = torch.ops.aten.add.Tensor(getitem_46, 1e-05);  getitem_46 = None
        rsqrt_23 = torch.ops.aten.rsqrt.default(add_105);  add_105 = None
        sub_36 = torch.ops.aten.sub.Tensor(add_104, getitem_47);  getitem_47 = None
        mul_91 = torch.ops.aten.mul.Tensor(sub_36, rsqrt_23);  sub_36 = rsqrt_23 = None
        mul_92 = torch.ops.aten.mul.Tensor(mul_91, arg166_1);  mul_91 = arg166_1 = None
        add_106 = torch.ops.aten.add.Tensor(mul_92, arg167_1);  mul_92 = arg167_1 = None
        view_261 = torch.ops.aten.view.default(add_106, [128, 768]);  add_106 = None
        permute_130 = torch.ops.aten.permute.default(arg168_1, [1, 0]);  arg168_1 = None
        addmm_34 = torch.ops.aten.addmm.default(arg169_1, view_261, permute_130);  arg169_1 = view_261 = permute_130 = None
        view_262 = torch.ops.aten.view.default(addmm_34, [2, 64, 3072]);  addmm_34 = None
        mul_93 = torch.ops.aten.mul.Tensor(view_262, 0.5)
        pow_12 = torch.ops.aten.pow.Tensor_Scalar(view_262, 3.0)
        mul_94 = torch.ops.aten.mul.Tensor(pow_12, 0.044715);  pow_12 = None
        add_107 = torch.ops.aten.add.Tensor(view_262, mul_94);  view_262 = mul_94 = None
        mul_95 = torch.ops.aten.mul.Tensor(add_107, 0.7978845608028654);  add_107 = None
        tanh_11 = torch.ops.aten.tanh.default(mul_95);  mul_95 = None
        add_108 = torch.ops.aten.add.Tensor(tanh_11, 1.0);  tanh_11 = None
        mul_96 = torch.ops.aten.mul.Tensor(mul_93, add_108);  mul_93 = add_108 = None
        view_263 = torch.ops.aten.view.default(mul_96, [128, 3072]);  mul_96 = None
        permute_131 = torch.ops.aten.permute.default(arg170_1, [1, 0]);  arg170_1 = None
        addmm_35 = torch.ops.aten.addmm.default(arg171_1, view_263, permute_131);  arg171_1 = view_263 = permute_131 = None
        view_264 = torch.ops.aten.view.default(addmm_35, [2, 64, 768]);  addmm_35 = None
        add_109 = torch.ops.aten.add.Tensor(add_104, view_264);  add_104 = view_264 = None
        var_mean_24 = torch.ops.aten.var_mean.correction(add_109, [2], correction = 0, keepdim = True)
        getitem_48 = var_mean_24[0]
        getitem_49 = var_mean_24[1];  var_mean_24 = None
        add_110 = torch.ops.aten.add.Tensor(getitem_48, 1e-05);  getitem_48 = None
        rsqrt_24 = torch.ops.aten.rsqrt.default(add_110);  add_110 = None
        sub_37 = torch.ops.aten.sub.Tensor(add_109, getitem_49);  add_109 = getitem_49 = None
        mul_97 = torch.ops.aten.mul.Tensor(sub_37, rsqrt_24);  sub_37 = rsqrt_24 = None
        mul_98 = torch.ops.aten.mul.Tensor(mul_97, arg172_1);  mul_97 = arg172_1 = None
        add_111 = torch.ops.aten.add.Tensor(mul_98, arg173_1);  mul_98 = arg173_1 = None
        view_265 = torch.ops.aten.view.default(add_111, [-1, 64, 768]);  add_111 = None
        return (view_265, permute_4, permute_5, permute_15, permute_16, permute_26, permute_27, permute_37, permute_38, permute_48, permute_49, permute_59, permute_60, permute_70, permute_71, permute_81, permute_82, permute_92, permute_93, permute_103, permute_104, permute_114, permute_115, permute_125, permute_126)
        
def load_args(reader):
    buf0 = reader.storage(None, 1024, device=device(type='cuda', index=0), dtype_hint=torch.int64)
    reader.tensor(buf0, (2, 64), dtype=torch.int64, is_leaf=True)  # arg0_1
    buf1 = reader.storage(None, 154389504, device=device(type='cuda', index=0))
    reader.tensor(buf1, (50257, 768), is_leaf=True)  # arg1_1
    buf2 = reader.storage(None, 1024, device=device(type='cuda', index=0), dtype_hint=torch.int64)
    reader.tensor(buf2, (2, 64), dtype=torch.int64, is_leaf=True)  # arg2_1
    buf3 = reader.storage(None, 6291456, device=device(type='cuda', index=0))
    reader.tensor(buf3, (2048, 768), is_leaf=True)  # arg3_1
    buf4 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf4, (768,), is_leaf=True)  # arg4_1
    buf5 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf5, (768,), is_leaf=True)  # arg5_1
    buf6 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf6, (768, 768), is_leaf=True)  # arg6_1
    buf7 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf7, (768, 768), is_leaf=True)  # arg7_1
    buf8 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf8, (768, 768), is_leaf=True)  # arg8_1
    buf9 = reader.storage(None, 4194304, device=device(type='cuda', index=0), dtype_hint=torch.bool)
    reader.tensor(buf9, (1, 1, 2048, 2048), dtype=torch.bool, is_leaf=True)  # arg9_1
    buf10 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf10, (768, 768), is_leaf=True)  # arg10_1
    buf11 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf11, (768,), is_leaf=True)  # arg11_1
    buf12 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf12, (768,), is_leaf=True)  # arg12_1
    buf13 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf13, (768,), is_leaf=True)  # arg13_1
    buf14 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf14, (3072, 768), is_leaf=True)  # arg14_1
    buf15 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf15, (3072,), is_leaf=True)  # arg15_1
    buf16 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf16, (768, 3072), is_leaf=True)  # arg16_1
    buf17 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf17, (768,), is_leaf=True)  # arg17_1
    buf18 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf18, (768,), is_leaf=True)  # arg18_1
    buf19 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf19, (768,), is_leaf=True)  # arg19_1
    buf20 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf20, (768, 768), is_leaf=True)  # arg20_1
    buf21 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf21, (768, 768), is_leaf=True)  # arg21_1
    buf22 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf22, (768, 768), is_leaf=True)  # arg22_1
    buf23 = reader.storage(None, 4194304, device=device(type='cuda', index=0), dtype_hint=torch.bool)
    reader.tensor(buf23, (1, 1, 2048, 2048), dtype=torch.bool, is_leaf=True)  # arg23_1
    buf24 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf24, (768, 768), is_leaf=True)  # arg24_1
    buf25 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf25, (768,), is_leaf=True)  # arg25_1
    buf26 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf26, (768,), is_leaf=True)  # arg26_1
    buf27 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf27, (768,), is_leaf=True)  # arg27_1
    buf28 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf28, (3072, 768), is_leaf=True)  # arg28_1
    buf29 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf29, (3072,), is_leaf=True)  # arg29_1
    buf30 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf30, (768, 3072), is_leaf=True)  # arg30_1
    buf31 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf31, (768,), is_leaf=True)  # arg31_1
    buf32 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf32, (768,), is_leaf=True)  # arg32_1
    buf33 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf33, (768,), is_leaf=True)  # arg33_1
    buf34 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf34, (768, 768), is_leaf=True)  # arg34_1
    buf35 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf35, (768, 768), is_leaf=True)  # arg35_1
    buf36 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf36, (768, 768), is_leaf=True)  # arg36_1
    buf37 = reader.storage(None, 4194304, device=device(type='cuda', index=0), dtype_hint=torch.bool)
    reader.tensor(buf37, (1, 1, 2048, 2048), dtype=torch.bool, is_leaf=True)  # arg37_1
    buf38 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf38, (768, 768), is_leaf=True)  # arg38_1
    buf39 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf39, (768,), is_leaf=True)  # arg39_1
    buf40 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf40, (768,), is_leaf=True)  # arg40_1
    buf41 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf41, (768,), is_leaf=True)  # arg41_1
    buf42 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf42, (3072, 768), is_leaf=True)  # arg42_1
    buf43 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf43, (3072,), is_leaf=True)  # arg43_1
    buf44 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf44, (768, 3072), is_leaf=True)  # arg44_1
    buf45 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf45, (768,), is_leaf=True)  # arg45_1
    buf46 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf46, (768,), is_leaf=True)  # arg46_1
    buf47 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf47, (768,), is_leaf=True)  # arg47_1
    buf48 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf48, (768, 768), is_leaf=True)  # arg48_1
    buf49 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf49, (768, 768), is_leaf=True)  # arg49_1
    buf50 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf50, (768, 768), is_leaf=True)  # arg50_1
    buf51 = reader.storage(None, 4194304, device=device(type='cuda', index=0), dtype_hint=torch.bool)
    reader.tensor(buf51, (1, 1, 2048, 2048), dtype=torch.bool, is_leaf=True)  # arg51_1
    buf52 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf52, (768, 768), is_leaf=True)  # arg52_1
    buf53 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf53, (768,), is_leaf=True)  # arg53_1
    buf54 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf54, (768,), is_leaf=True)  # arg54_1
    buf55 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf55, (768,), is_leaf=True)  # arg55_1
    buf56 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf56, (3072, 768), is_leaf=True)  # arg56_1
    buf57 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf57, (3072,), is_leaf=True)  # arg57_1
    buf58 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf58, (768, 3072), is_leaf=True)  # arg58_1
    buf59 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf59, (768,), is_leaf=True)  # arg59_1
    buf60 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf60, (768,), is_leaf=True)  # arg60_1
    buf61 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf61, (768,), is_leaf=True)  # arg61_1
    buf62 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf62, (768, 768), is_leaf=True)  # arg62_1
    buf63 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf63, (768, 768), is_leaf=True)  # arg63_1
    buf64 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf64, (768, 768), is_leaf=True)  # arg64_1
    buf65 = reader.storage(None, 4194304, device=device(type='cuda', index=0), dtype_hint=torch.bool)
    reader.tensor(buf65, (1, 1, 2048, 2048), dtype=torch.bool, is_leaf=True)  # arg65_1
    buf66 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf66, (768, 768), is_leaf=True)  # arg66_1
    buf67 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf67, (768,), is_leaf=True)  # arg67_1
    buf68 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf68, (768,), is_leaf=True)  # arg68_1
    buf69 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf69, (768,), is_leaf=True)  # arg69_1
    buf70 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf70, (3072, 768), is_leaf=True)  # arg70_1
    buf71 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf71, (3072,), is_leaf=True)  # arg71_1
    buf72 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf72, (768, 3072), is_leaf=True)  # arg72_1
    buf73 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf73, (768,), is_leaf=True)  # arg73_1
    buf74 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf74, (768,), is_leaf=True)  # arg74_1
    buf75 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf75, (768,), is_leaf=True)  # arg75_1
    buf76 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf76, (768, 768), is_leaf=True)  # arg76_1
    buf77 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf77, (768, 768), is_leaf=True)  # arg77_1
    buf78 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf78, (768, 768), is_leaf=True)  # arg78_1
    buf79 = reader.storage(None, 4194304, device=device(type='cuda', index=0), dtype_hint=torch.bool)
    reader.tensor(buf79, (1, 1, 2048, 2048), dtype=torch.bool, is_leaf=True)  # arg79_1
    buf80 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf80, (768, 768), is_leaf=True)  # arg80_1
    buf81 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf81, (768,), is_leaf=True)  # arg81_1
    buf82 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf82, (768,), is_leaf=True)  # arg82_1
    buf83 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf83, (768,), is_leaf=True)  # arg83_1
    buf84 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf84, (3072, 768), is_leaf=True)  # arg84_1
    buf85 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf85, (3072,), is_leaf=True)  # arg85_1
    buf86 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf86, (768, 3072), is_leaf=True)  # arg86_1
    buf87 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf87, (768,), is_leaf=True)  # arg87_1
    buf88 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf88, (768,), is_leaf=True)  # arg88_1
    buf89 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf89, (768,), is_leaf=True)  # arg89_1
    buf90 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf90, (768, 768), is_leaf=True)  # arg90_1
    buf91 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf91, (768, 768), is_leaf=True)  # arg91_1
    buf92 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf92, (768, 768), is_leaf=True)  # arg92_1
    buf93 = reader.storage(None, 4194304, device=device(type='cuda', index=0), dtype_hint=torch.bool)
    reader.tensor(buf93, (1, 1, 2048, 2048), dtype=torch.bool, is_leaf=True)  # arg93_1
    buf94 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf94, (768, 768), is_leaf=True)  # arg94_1
    buf95 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf95, (768,), is_leaf=True)  # arg95_1
    buf96 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf96, (768,), is_leaf=True)  # arg96_1
    buf97 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf97, (768,), is_leaf=True)  # arg97_1
    buf98 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf98, (3072, 768), is_leaf=True)  # arg98_1
    buf99 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf99, (3072,), is_leaf=True)  # arg99_1
    buf100 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf100, (768, 3072), is_leaf=True)  # arg100_1
    buf101 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf101, (768,), is_leaf=True)  # arg101_1
    buf102 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf102, (768,), is_leaf=True)  # arg102_1
    buf103 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf103, (768,), is_leaf=True)  # arg103_1
    buf104 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf104, (768, 768), is_leaf=True)  # arg104_1
    buf105 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf105, (768, 768), is_leaf=True)  # arg105_1
    buf106 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf106, (768, 768), is_leaf=True)  # arg106_1
    buf107 = reader.storage(None, 4194304, device=device(type='cuda', index=0), dtype_hint=torch.bool)
    reader.tensor(buf107, (1, 1, 2048, 2048), dtype=torch.bool, is_leaf=True)  # arg107_1
    buf108 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf108, (768, 768), is_leaf=True)  # arg108_1
    buf109 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf109, (768,), is_leaf=True)  # arg109_1
    buf110 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf110, (768,), is_leaf=True)  # arg110_1
    buf111 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf111, (768,), is_leaf=True)  # arg111_1
    buf112 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf112, (3072, 768), is_leaf=True)  # arg112_1
    buf113 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf113, (3072,), is_leaf=True)  # arg113_1
    buf114 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf114, (768, 3072), is_leaf=True)  # arg114_1
    buf115 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf115, (768,), is_leaf=True)  # arg115_1
    buf116 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf116, (768,), is_leaf=True)  # arg116_1
    buf117 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf117, (768,), is_leaf=True)  # arg117_1
    buf118 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf118, (768, 768), is_leaf=True)  # arg118_1
    buf119 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf119, (768, 768), is_leaf=True)  # arg119_1
    buf120 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf120, (768, 768), is_leaf=True)  # arg120_1
    buf121 = reader.storage(None, 4194304, device=device(type='cuda', index=0), dtype_hint=torch.bool)
    reader.tensor(buf121, (1, 1, 2048, 2048), dtype=torch.bool, is_leaf=True)  # arg121_1
    buf122 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf122, (768, 768), is_leaf=True)  # arg122_1
    buf123 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf123, (768,), is_leaf=True)  # arg123_1
    buf124 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf124, (768,), is_leaf=True)  # arg124_1
    buf125 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf125, (768,), is_leaf=True)  # arg125_1
    buf126 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf126, (3072, 768), is_leaf=True)  # arg126_1
    buf127 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf127, (3072,), is_leaf=True)  # arg127_1
    buf128 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf128, (768, 3072), is_leaf=True)  # arg128_1
    buf129 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf129, (768,), is_leaf=True)  # arg129_1
    buf130 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf130, (768,), is_leaf=True)  # arg130_1
    buf131 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf131, (768,), is_leaf=True)  # arg131_1
    buf132 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf132, (768, 768), is_leaf=True)  # arg132_1
    buf133 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf133, (768, 768), is_leaf=True)  # arg133_1
    buf134 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf134, (768, 768), is_leaf=True)  # arg134_1
    buf135 = reader.storage(None, 4194304, device=device(type='cuda', index=0), dtype_hint=torch.bool)
    reader.tensor(buf135, (1, 1, 2048, 2048), dtype=torch.bool, is_leaf=True)  # arg135_1
    buf136 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf136, (768, 768), is_leaf=True)  # arg136_1
    buf137 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf137, (768,), is_leaf=True)  # arg137_1
    buf138 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf138, (768,), is_leaf=True)  # arg138_1
    buf139 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf139, (768,), is_leaf=True)  # arg139_1
    buf140 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf140, (3072, 768), is_leaf=True)  # arg140_1
    buf141 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf141, (3072,), is_leaf=True)  # arg141_1
    buf142 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf142, (768, 3072), is_leaf=True)  # arg142_1
    buf143 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf143, (768,), is_leaf=True)  # arg143_1
    buf144 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf144, (768,), is_leaf=True)  # arg144_1
    buf145 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf145, (768,), is_leaf=True)  # arg145_1
    buf146 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf146, (768, 768), is_leaf=True)  # arg146_1
    buf147 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf147, (768, 768), is_leaf=True)  # arg147_1
    buf148 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf148, (768, 768), is_leaf=True)  # arg148_1
    buf149 = reader.storage(None, 4194304, device=device(type='cuda', index=0), dtype_hint=torch.bool)
    reader.tensor(buf149, (1, 1, 2048, 2048), dtype=torch.bool, is_leaf=True)  # arg149_1
    buf150 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf150, (768, 768), is_leaf=True)  # arg150_1
    buf151 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf151, (768,), is_leaf=True)  # arg151_1
    buf152 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf152, (768,), is_leaf=True)  # arg152_1
    buf153 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf153, (768,), is_leaf=True)  # arg153_1
    buf154 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf154, (3072, 768), is_leaf=True)  # arg154_1
    buf155 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf155, (3072,), is_leaf=True)  # arg155_1
    buf156 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf156, (768, 3072), is_leaf=True)  # arg156_1
    buf157 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf157, (768,), is_leaf=True)  # arg157_1
    buf158 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf158, (768,), is_leaf=True)  # arg158_1
    buf159 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf159, (768,), is_leaf=True)  # arg159_1
    buf160 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf160, (768, 768), is_leaf=True)  # arg160_1
    buf161 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf161, (768, 768), is_leaf=True)  # arg161_1
    buf162 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf162, (768, 768), is_leaf=True)  # arg162_1
    buf163 = reader.storage(None, 4194304, device=device(type='cuda', index=0), dtype_hint=torch.bool)
    reader.tensor(buf163, (1, 1, 2048, 2048), dtype=torch.bool, is_leaf=True)  # arg163_1
    buf164 = reader.storage(None, 2359296, device=device(type='cuda', index=0))
    reader.tensor(buf164, (768, 768), is_leaf=True)  # arg164_1
    buf165 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf165, (768,), is_leaf=True)  # arg165_1
    buf166 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf166, (768,), is_leaf=True)  # arg166_1
    buf167 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf167, (768,), is_leaf=True)  # arg167_1
    buf168 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf168, (3072, 768), is_leaf=True)  # arg168_1
    buf169 = reader.storage(None, 12288, device=device(type='cuda', index=0))
    reader.tensor(buf169, (3072,), is_leaf=True)  # arg169_1
    buf170 = reader.storage(None, 9437184, device=device(type='cuda', index=0))
    reader.tensor(buf170, (768, 3072), is_leaf=True)  # arg170_1
    buf171 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf171, (768,), is_leaf=True)  # arg171_1
    buf172 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf172, (768,), is_leaf=True)  # arg172_1
    buf173 = reader.storage(None, 3072, device=device(type='cuda', index=0))
    reader.tensor(buf173, (768,), is_leaf=True)  # arg173_1
load_args._version = 0
mod = Repro()
if __name__ == '__main__':
    from torch._dynamo.repro.after_aot import run_repro
    with torch.no_grad():
        run_repro(mod, load_args, accuracy=False, command='run', save_dir=None, tracing_mode='real', check_str=None)
        # To run it separately, do 
        # mod, args = run_repro(mod, load_args, accuracy=False, command='get_args', save_dir=None, tracing_mode='real', check_str=None)
        # mod(*args)

# ===== run_2025_10_19_03_43_12_574129-pid_19/torchinductor/model__0_inference_0.0/fx_graph_transformed.py =====
class <lambda>(torch.nn.Module):
    def forward(self, arg0_1: "i64[2, 64]", arg1_1: "f32[50257, 768]", arg2_1: "i64[2, 64]", arg3_1: "f32[2048, 768]", arg4_1: "f32[768]", arg5_1: "f32[768]", arg6_1: "f32[768, 768]", arg7_1: "f32[768, 768]", arg8_1: "f32[768, 768]", arg9_1: "b8[1, 1, 2048, 2048]", arg10_1: "f32[768, 768]", arg11_1: "f32[768]", arg12_1: "f32[768]", arg13_1: "f32[768]", arg14_1: "f32[3072, 768]", arg15_1: "f32[3072]", arg16_1: "f32[768, 3072]", arg17_1: "f32[768]", arg18_1: "f32[768]", arg19_1: "f32[768]", arg20_1: "f32[768, 768]", arg21_1: "f32[768, 768]", arg22_1: "f32[768, 768]", arg23_1: "b8[1, 1, 2048, 2048]", arg24_1: "f32[768, 768]", arg25_1: "f32[768]", arg26_1: "f32[768]", arg27_1: "f32[768]", arg28_1: "f32[3072, 768]", arg29_1: "f32[3072]", arg30_1: "f32[768, 3072]", arg31_1: "f32[768]", arg32_1: "f32[768]", arg33_1: "f32[768]", arg34_1: "f32[768, 768]", arg35_1: "f32[768, 768]", arg36_1: "f32[768, 768]", arg37_1: "b8[1, 1, 2048, 2048]", arg38_1: "f32[768, 768]", arg39_1: "f32[768]", arg40_1: "f32[768]", arg41_1: "f32[768]", arg42_1: "f32[3072, 768]", arg43_1: "f32[3072]", arg44_1: "f32[768, 3072]", arg45_1: "f32[768]", arg46_1: "f32[768]", arg47_1: "f32[768]", arg48_1: "f32[768, 768]", arg49_1: "f32[768, 768]", arg50_1: "f32[768, 768]", arg51_1: "b8[1, 1, 2048, 2048]", arg52_1: "f32[768, 768]", arg53_1: "f32[768]", arg54_1: "f32[768]", arg55_1: "f32[768]", arg56_1: "f32[3072, 768]", arg57_1: "f32[3072]", arg58_1: "f32[768, 3072]", arg59_1: "f32[768]", arg60_1: "f32[768]", arg61_1: "f32[768]", arg62_1: "f32[768, 768]", arg63_1: "f32[768, 768]", arg64_1: "f32[768, 768]", arg65_1: "b8[1, 1, 2048, 2048]", arg66_1: "f32[768, 768]", arg67_1: "f32[768]", arg68_1: "f32[768]", arg69_1: "f32[768]", arg70_1: "f32[3072, 768]", arg71_1: "f32[3072]", arg72_1: "f32[768, 3072]", arg73_1: "f32[768]", arg74_1: "f32[768]", arg75_1: "f32[768]", arg76_1: "f32[768, 768]", arg77_1: "f32[768, 768]", arg78_1: "f32[768, 768]", arg79_1: "b8[1, 1, 2048, 2048]", arg80_1: "f32[768, 768]", arg81_1: "f32[768]", arg82_1: "f32[768]", arg83_1: "f32[768]", arg84_1: "f32[3072, 768]", arg85_1: "f32[3072]", arg86_1: "f32[768, 3072]", arg87_1: "f32[768]", arg88_1: "f32[768]", arg89_1: "f32[768]", arg90_1: "f32[768, 768]", arg91_1: "f32[768, 768]", arg92_1: "f32[768, 768]", arg93_1: "b8[1, 1, 2048, 2048]", arg94_1: "f32[768, 768]", arg95_1: "f32[768]", arg96_1: "f32[768]", arg97_1: "f32[768]", arg98_1: "f32[3072, 768]", arg99_1: "f32[3072]", arg100_1: "f32[768, 3072]", arg101_1: "f32[768]", arg102_1: "f32[768]", arg103_1: "f32[768]", arg104_1: "f32[768, 768]", arg105_1: "f32[768, 768]", arg106_1: "f32[768, 768]", arg107_1: "b8[1, 1, 2048, 2048]", arg108_1: "f32[768, 768]", arg109_1: "f32[768]", arg110_1: "f32[768]", arg111_1: "f32[768]", arg112_1: "f32[3072, 768]", arg113_1: "f32[3072]", arg114_1: "f32[768, 3072]", arg115_1: "f32[768]", arg116_1: "f32[768]", arg117_1: "f32[768]", arg118_1: "f32[768, 768]", arg119_1: "f32[768, 768]", arg120_1: "f32[768, 768]", arg121_1: "b8[1, 1, 2048, 2048]", arg122_1: "f32[768, 768]", arg123_1: "f32[768]", arg124_1: "f32[768]", arg125_1: "f32[768]", arg126_1: "f32[3072, 768]", arg127_1: "f32[3072]", arg128_1: "f32[768, 3072]", arg129_1: "f32[768]", arg130_1: "f32[768]", arg131_1: "f32[768]", arg132_1: "f32[768, 768]", arg133_1: "f32[768, 768]", arg134_1: "f32[768, 768]", arg135_1: "b8[1, 1, 2048, 2048]", arg136_1: "f32[768, 768]", arg137_1: "f32[768]", arg138_1: "f32[768]", arg139_1: "f32[768]", arg140_1: "f32[3072, 768]", arg141_1: "f32[3072]", arg142_1: "f32[768, 3072]", arg143_1: "f32[768]", arg144_1: "f32[768]", arg145_1: "f32[768]", arg146_1: "f32[768, 768]", arg147_1: "f32[768, 768]", arg148_1: "f32[768, 768]", arg149_1: "b8[1, 1, 2048, 2048]", arg150_1: "f32[768, 768]", arg151_1: "f32[768]", arg152_1: "f32[768]", arg153_1: "f32[768]", arg154_1: "f32[3072, 768]", arg155_1: "f32[3072]", arg156_1: "f32[768, 3072]", arg157_1: "f32[768]", arg158_1: "f32[768]", arg159_1: "f32[768]", arg160_1: "f32[768, 768]", arg161_1: "f32[768, 768]", arg162_1: "f32[768, 768]", arg163_1: "b8[1, 1, 2048, 2048]", arg164_1: "f32[768, 768]", arg165_1: "f32[768]", arg166_1: "f32[768]", arg167_1: "f32[768]", arg168_1: "f32[3072, 768]", arg169_1: "f32[3072]", arg170_1: "f32[768, 3072]", arg171_1: "f32[768]", arg172_1: "f32[768]", arg173_1: "f32[768]"):
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:588 in forward, code: inputs_embeds = self.wte(input_ids)
        embedding: "f32[2, 64, 768]" = torch.ops.aten.embedding.default(arg1_1, arg0_1);  arg1_1 = arg0_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:607 in forward, code: cache_position = torch.arange(past_seen_tokens, past_seen_tokens + seq_length, device=inputs_embeds.device)
        iota: "i64[64]" = torch.ops.prims.iota.default(64, start = 0, step = 1, dtype = torch.int64, device = device(type='cuda', index=0), requires_grad = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:610 in forward, code: position_ids = cache_position.unsqueeze(0)
        unsqueeze: "i64[1, 64]" = torch.ops.aten.unsqueeze.default(iota, 0)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:621 in forward, code: position_embeds = self.wpe(position_ids)
        embedding_1: "f32[1, 64, 768]" = torch.ops.aten.embedding.default(arg3_1, unsqueeze);  arg3_1 = unsqueeze = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:622 in forward, code: hidden_states = inputs_embeds + position_embeds
        add_1: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(embedding, embedding_1);  embedding = embedding_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean = torch.ops.aten.var_mean.correction(add_1, [2], correction = 0, keepdim = True)
        getitem: "f32[2, 64, 1]" = var_mean[0]
        getitem_1: "f32[2, 64, 1]" = var_mean[1];  var_mean = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant0: "f32[]" = self._tensor_constant0;  _tensor_constant0 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_23: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg9_1, 2, 0, 64);  arg9_1 = None
        slice_24: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_23, 3, 0, 64);  slice_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        sub_1: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_1, getitem_1);  getitem_1 = None
        add_2: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem, 1e-05);  getitem = None
        rsqrt: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_2);  add_2 = None
        mul_1: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_1, rsqrt);  sub_1 = rsqrt = None
        mul_2: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_1, arg4_1);  mul_1 = arg4_1 = None
        add_3: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_2, arg5_1);  mul_2 = arg5_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        view_1: "f32[128, 768]" = torch.ops.aten.reshape.default(add_3, [128, 768])
        permute: "f32[768, 768]" = torch.ops.aten.permute.default(arg6_1, [1, 0]);  arg6_1 = None
        mm: "f32[128, 768]" = torch.ops.aten.mm.default(view_1, permute);  view_1 = permute = None
        view_2: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm, [2, 64, 768]);  mm = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_7: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_2, [2, 64, 12, 64]);  view_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_3: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_7, [0, 2, 1, 3]);  view_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        expand_2: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_3, [2, 12, 64, 64]);  permute_3 = None
        clone_2: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_2, memory_format = torch.contiguous_format);  expand_2 = None
        view_10: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_2, [24, 64, 64]);  clone_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        view_3: "f32[128, 768]" = torch.ops.aten.reshape.default(add_3, [128, 768])
        permute_1: "f32[768, 768]" = torch.ops.aten.permute.default(arg7_1, [1, 0]);  arg7_1 = None
        mm_1: "f32[128, 768]" = torch.ops.aten.mm.default(view_3, permute_1);  view_3 = permute_1 = None
        view_4: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_1, [2, 64, 768]);  mm_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_8: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_4, [2, 64, 12, 64]);  view_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_4: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_8, [0, 2, 1, 3]);  view_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_6: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_4, [0, 1, 3, 2])
        expand_3: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_6, [2, 12, 64, 64]);  permute_6 = None
        clone_3: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_3, memory_format = torch.contiguous_format);  expand_3 = None
        view_11: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_3, [24, 64, 64]);  clone_3 = None
        bmm: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_10, view_11);  view_10 = view_11 = None
        view_12: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm, [2, 12, 64, 64]);  bmm = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        full_default_3: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_2: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_24, view_12, full_default_3);  slice_24 = view_12 = full_default_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:788 in _prepare_4d_causal_attention_mask_with_cache_position, code: causal_mask = torch.triu(causal_mask, diagonal=1)
        iota_1: "i64[64]" = torch.ops.prims.iota.default(64, start = 0, step = 1, dtype = torch.int64, device = device(type='cuda', index=0), requires_grad = False)
        unsqueeze_1: "i64[1, 64]" = torch.ops.aten.unsqueeze.default(iota_1, -2);  iota_1 = None
        iota_2: "i64[64]" = torch.ops.prims.iota.default(64, start = 0, step = 1, dtype = torch.int64, device = device(type='cuda', index=0), requires_grad = False)
        unsqueeze_2: "i64[64, 1]" = torch.ops.aten.unsqueeze.default(iota_2, -1);  iota_2 = None
        sub: "i64[64, 64]" = torch.ops.aten.sub.Tensor(unsqueeze_1, unsqueeze_2);  unsqueeze_1 = unsqueeze_2 = None
        ge: "b8[64, 64]" = torch.ops.aten.ge.Scalar(sub, 1);  sub = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:784 in _prepare_4d_causal_attention_mask_with_cache_position, code: causal_mask = torch.full(
        full_default: "f32[64, 64]" = torch.ops.aten.full.default([64, 64], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:788 in _prepare_4d_causal_attention_mask_with_cache_position, code: causal_mask = torch.triu(causal_mask, diagonal=1)
        full_default_1: "f32[]" = torch.ops.aten.full.default([], 0.0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where: "f32[64, 64]" = torch.ops.aten.where.self(ge, full_default, full_default_1);  ge = full_default = full_default_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:789 in _prepare_4d_causal_attention_mask_with_cache_position, code: causal_mask *= torch.arange(target_length, device=cache_position.device) > cache_position.reshape(-1, 1)
        iota_3: "i64[64]" = torch.ops.prims.iota.default(64, start = 0, step = 1, dtype = torch.int64, device = device(type='cuda', index=0), requires_grad = False)
        view: "i64[64, 1]" = torch.ops.aten.reshape.default(iota, [-1, 1]);  iota = None
        gt: "b8[64, 64]" = torch.ops.aten.gt.Tensor(iota_3, view);  iota_3 = view = None
        mul: "f32[64, 64]" = torch.ops.aten.mul.Tensor(where, gt);  where = gt = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:792 in _prepare_4d_causal_attention_mask_with_cache_position, code: causal_mask = causal_mask.clone()  # copy to contiguous memory for in-place edit
        unsqueeze_5: "f32[1, 64, 64]" = torch.ops.aten.unsqueeze.default(mul, 0);  mul = None
        unsqueeze_6: "f32[1, 1, 64, 64]" = torch.ops.aten.unsqueeze.default(unsqueeze_5, 1);  unsqueeze_5 = None
        expand_1: "f32[2, 1, 64, 64]" = torch.ops.aten.expand.default(unsqueeze_6, [2, 1, -1, -1]);  unsqueeze_6 = None
        clone: "f32[2, 1, 64, 64]" = torch.ops.aten.clone.default(expand_1);  expand_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:794 in _prepare_4d_causal_attention_mask_with_cache_position, code: padding_mask = causal_mask[:, :, :, :mask_length] + attention_mask[:, None, None, :].to(
        unsqueeze_7: "i64[2, 1, 64]" = torch.ops.aten.unsqueeze.default(arg2_1, 1);  arg2_1 = None
        unsqueeze_8: "i64[2, 1, 1, 64]" = torch.ops.aten.unsqueeze.default(unsqueeze_7, 2);  unsqueeze_7 = None
        add: "f32[2, 1, 64, 64]" = torch.ops.aten.add.Tensor(clone, unsqueeze_8);  unsqueeze_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:797 in _prepare_4d_causal_attention_mask_with_cache_position, code: padding_mask = padding_mask == 0
        eq: "b8[2, 1, 64, 64]" = torch.ops.aten.eq.Scalar(add, 0);  add = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:798 in _prepare_4d_causal_attention_mask_with_cache_position, code: causal_mask[:, :, :, :mask_length] = causal_mask[:, :, :, :mask_length].masked_fill(
        full_default_2: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where_1: "f32[2, 1, 64, 64]" = torch.ops.aten.where.self(eq, full_default_2, clone);  eq = full_default_2 = clone = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_4: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_2, where_1);  where_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_4, [-1], True)
        sub_2: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_4, amax);  add_4 = amax = None
        exp: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_2);  sub_2 = None
        sum_1: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp, [-1], True)
        div: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp, sum_1);  exp = sum_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_4: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div, [2, 12, 64, 64]);  div = None
        view_13: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(expand_4, [24, 64, 64]);  expand_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        view_5: "f32[128, 768]" = torch.ops.aten.reshape.default(add_3, [128, 768]);  add_3 = None
        permute_2: "f32[768, 768]" = torch.ops.aten.permute.default(arg8_1, [1, 0]);  arg8_1 = None
        mm_2: "f32[128, 768]" = torch.ops.aten.mm.default(view_5, permute_2);  view_5 = permute_2 = None
        view_6: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_2, [2, 64, 768]);  mm_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_9: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_6, [2, 64, 12, 64]);  view_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_5: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_9, [0, 2, 1, 3]);  view_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_5: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_5, [2, 12, 64, 64])
        clone_5: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_5, memory_format = torch.contiguous_format);  expand_5 = None
        view_14: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_5, [24, 64, 64]);  clone_5 = None
        bmm_1: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_13, view_14);  view_13 = view_14 = None
        view_15: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_1, [2, 12, 64, 64]);  bmm_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_7: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_15, [0, 2, 1, 3]);  view_15 = None
        clone_6: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_7, memory_format = torch.contiguous_format);  permute_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_16: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(clone_6, [2, 64, 768]);  clone_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_17: "f32[128, 768]" = torch.ops.aten.reshape.default(view_16, [128, 768]);  view_16 = None
        permute_8: "f32[768, 768]" = torch.ops.aten.permute.default(arg10_1, [1, 0]);  arg10_1 = None
        
        # No stacktrace found for following nodes
        mm_default_35: "f32[128, 768]" = torch.ops.aten.mm.default(view_17, permute_8);  view_17 = permute_8 = None
        add_tensor_35: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_35, arg11_1);  mm_default_35 = arg11_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_18: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_35, [2, 64, 768]);  add_tensor_35 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_5: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_18, add_1);  view_18 = add_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_1 = torch.ops.aten.var_mean.correction(add_5, [2], correction = 0, keepdim = True)
        getitem_2: "f32[2, 64, 1]" = var_mean_1[0]
        getitem_3: "f32[2, 64, 1]" = var_mean_1[1];  var_mean_1 = None
        sub_3: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_5, getitem_3);  getitem_3 = None
        add_6: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_2, 1e-05);  getitem_2 = None
        rsqrt_1: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_6);  add_6 = None
        mul_3: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_3, rsqrt_1);  sub_3 = rsqrt_1 = None
        mul_4: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_3, arg12_1);  mul_3 = arg12_1 = None
        add_7: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_4, arg13_1);  mul_4 = arg13_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_19: "f32[128, 768]" = torch.ops.aten.reshape.default(add_7, [128, 768]);  add_7 = None
        permute_9: "f32[768, 3072]" = torch.ops.aten.permute.default(arg14_1, [1, 0]);  arg14_1 = None
        
        # No stacktrace found for following nodes
        mm_default_34: "f32[128, 3072]" = torch.ops.aten.mm.default(view_19, permute_9);  view_19 = permute_9 = None
        add_tensor_34: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_34, arg15_1);  mm_default_34 = arg15_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_20: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_34, [2, 64, 3072]);  add_tensor_34 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_5: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_20, 0.5)
        pow_1: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_20, 3.0)
        mul_6: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_1, 0.044715);  pow_1 = None
        add_8: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_20, mul_6);  view_20 = mul_6 = None
        mul_7: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_8, 0.7978845608028654);  add_8 = None
        tanh: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_7);  mul_7 = None
        add_9: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh, 1.0);  tanh = None
        mul_8: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_5, add_9);  mul_5 = add_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_21: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_8, [128, 3072]);  mul_8 = None
        permute_10: "f32[3072, 768]" = torch.ops.aten.permute.default(arg16_1, [1, 0]);  arg16_1 = None
        
        # No stacktrace found for following nodes
        mm_default_33: "f32[128, 768]" = torch.ops.aten.mm.default(view_21, permute_10);  view_21 = permute_10 = None
        add_tensor_33: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_33, arg17_1);  mm_default_33 = arg17_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_22: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_33, [2, 64, 768]);  add_tensor_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_10: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_5, view_22);  add_5 = view_22 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_2 = torch.ops.aten.var_mean.correction(add_10, [2], correction = 0, keepdim = True)
        getitem_4: "f32[2, 64, 1]" = var_mean_2[0]
        getitem_5: "f32[2, 64, 1]" = var_mean_2[1];  var_mean_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant1: "f32[]" = self._tensor_constant1;  _tensor_constant1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_33: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg23_1, 2, 0, 64);  arg23_1 = None
        slice_34: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_33, 3, 0, 64);  slice_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        sub_4: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_10, getitem_5);  getitem_5 = None
        add_11: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_4, 1e-05);  getitem_4 = None
        rsqrt_2: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_11);  add_11 = None
        mul_9: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_4, rsqrt_2);  sub_4 = rsqrt_2 = None
        mul_10: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_9, arg18_1);  mul_9 = arg18_1 = None
        add_12: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_10, arg19_1);  mul_10 = arg19_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        view_23: "f32[128, 768]" = torch.ops.aten.reshape.default(add_12, [128, 768])
        permute_11: "f32[768, 768]" = torch.ops.aten.permute.default(arg20_1, [1, 0]);  arg20_1 = None
        mm_3: "f32[128, 768]" = torch.ops.aten.mm.default(view_23, permute_11);  view_23 = permute_11 = None
        view_24: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_3, [2, 64, 768]);  mm_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_29: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_24, [2, 64, 12, 64]);  view_24 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_14: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_29, [0, 2, 1, 3]);  view_29 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        expand_6: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_14, [2, 12, 64, 64]);  permute_14 = None
        clone_9: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_6, memory_format = torch.contiguous_format);  expand_6 = None
        view_32: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_9, [24, 64, 64]);  clone_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        view_25: "f32[128, 768]" = torch.ops.aten.reshape.default(add_12, [128, 768])
        permute_12: "f32[768, 768]" = torch.ops.aten.permute.default(arg21_1, [1, 0]);  arg21_1 = None
        mm_4: "f32[128, 768]" = torch.ops.aten.mm.default(view_25, permute_12);  view_25 = permute_12 = None
        view_26: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_4, [2, 64, 768]);  mm_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_30: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_26, [2, 64, 12, 64]);  view_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_15: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_30, [0, 2, 1, 3]);  view_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_17: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_15, [0, 1, 3, 2])
        expand_7: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_17, [2, 12, 64, 64]);  permute_17 = None
        clone_10: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_7, memory_format = torch.contiguous_format);  expand_7 = None
        view_33: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_10, [24, 64, 64]);  clone_10 = None
        bmm_2: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_32, view_33);  view_32 = view_33 = None
        view_34: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_2, [2, 12, 64, 64]);  bmm_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        full_default_4: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_3: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_34, view_34, full_default_4);  slice_34 = view_34 = full_default_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_13: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_3, where_1);  where_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_1: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_13, [-1], True)
        sub_5: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_13, amax_1);  add_13 = amax_1 = None
        exp_1: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_5);  sub_5 = None
        sum_2: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_1, [-1], True)
        div_1: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_1, sum_2);  exp_1 = sum_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_8: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_1, [2, 12, 64, 64]);  div_1 = None
        view_35: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(expand_8, [24, 64, 64]);  expand_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        view_27: "f32[128, 768]" = torch.ops.aten.reshape.default(add_12, [128, 768]);  add_12 = None
        permute_13: "f32[768, 768]" = torch.ops.aten.permute.default(arg22_1, [1, 0]);  arg22_1 = None
        mm_5: "f32[128, 768]" = torch.ops.aten.mm.default(view_27, permute_13);  view_27 = permute_13 = None
        view_28: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_5, [2, 64, 768]);  mm_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_31: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_28, [2, 64, 12, 64]);  view_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_16: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_31, [0, 2, 1, 3]);  view_31 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_9: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_16, [2, 12, 64, 64])
        clone_12: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_9, memory_format = torch.contiguous_format);  expand_9 = None
        view_36: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_12, [24, 64, 64]);  clone_12 = None
        bmm_3: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_35, view_36);  view_35 = view_36 = None
        view_37: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_3, [2, 12, 64, 64]);  bmm_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_18: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_37, [0, 2, 1, 3]);  view_37 = None
        clone_13: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_18, memory_format = torch.contiguous_format);  permute_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_38: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(clone_13, [2, 64, 768]);  clone_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_39: "f32[128, 768]" = torch.ops.aten.reshape.default(view_38, [128, 768]);  view_38 = None
        permute_19: "f32[768, 768]" = torch.ops.aten.permute.default(arg24_1, [1, 0]);  arg24_1 = None
        
        # No stacktrace found for following nodes
        mm_default_32: "f32[128, 768]" = torch.ops.aten.mm.default(view_39, permute_19);  view_39 = permute_19 = None
        add_tensor_32: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_32, arg25_1);  mm_default_32 = arg25_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_40: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_32, [2, 64, 768]);  add_tensor_32 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_14: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_40, add_10);  view_40 = add_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_3 = torch.ops.aten.var_mean.correction(add_14, [2], correction = 0, keepdim = True)
        getitem_6: "f32[2, 64, 1]" = var_mean_3[0]
        getitem_7: "f32[2, 64, 1]" = var_mean_3[1];  var_mean_3 = None
        sub_6: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_14, getitem_7);  getitem_7 = None
        add_15: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_6, 1e-05);  getitem_6 = None
        rsqrt_3: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_15);  add_15 = None
        mul_11: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_6, rsqrt_3);  sub_6 = rsqrt_3 = None
        mul_12: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_11, arg26_1);  mul_11 = arg26_1 = None
        add_16: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_12, arg27_1);  mul_12 = arg27_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_41: "f32[128, 768]" = torch.ops.aten.reshape.default(add_16, [128, 768]);  add_16 = None
        permute_20: "f32[768, 3072]" = torch.ops.aten.permute.default(arg28_1, [1, 0]);  arg28_1 = None
        
        # No stacktrace found for following nodes
        mm_default_31: "f32[128, 3072]" = torch.ops.aten.mm.default(view_41, permute_20);  view_41 = permute_20 = None
        add_tensor_31: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_31, arg29_1);  mm_default_31 = arg29_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_42: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_31, [2, 64, 3072]);  add_tensor_31 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_13: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_42, 0.5)
        pow_2: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_42, 3.0)
        mul_14: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_2, 0.044715);  pow_2 = None
        add_17: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_42, mul_14);  view_42 = mul_14 = None
        mul_15: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_17, 0.7978845608028654);  add_17 = None
        tanh_1: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_15);  mul_15 = None
        add_18: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_1, 1.0);  tanh_1 = None
        mul_16: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_13, add_18);  mul_13 = add_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_43: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_16, [128, 3072]);  mul_16 = None
        permute_21: "f32[3072, 768]" = torch.ops.aten.permute.default(arg30_1, [1, 0]);  arg30_1 = None
        
        # No stacktrace found for following nodes
        mm_default_30: "f32[128, 768]" = torch.ops.aten.mm.default(view_43, permute_21);  view_43 = permute_21 = None
        add_tensor_30: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_30, arg31_1);  mm_default_30 = arg31_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_44: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_30, [2, 64, 768]);  add_tensor_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_19: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_14, view_44);  add_14 = view_44 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_4 = torch.ops.aten.var_mean.correction(add_19, [2], correction = 0, keepdim = True)
        getitem_8: "f32[2, 64, 1]" = var_mean_4[0]
        getitem_9: "f32[2, 64, 1]" = var_mean_4[1];  var_mean_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant2: "f32[]" = self._tensor_constant2;  _tensor_constant2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_43: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg37_1, 2, 0, 64);  arg37_1 = None
        slice_44: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_43, 3, 0, 64);  slice_43 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        sub_7: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_19, getitem_9);  getitem_9 = None
        add_20: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_8, 1e-05);  getitem_8 = None
        rsqrt_4: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_20);  add_20 = None
        mul_17: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_7, rsqrt_4);  sub_7 = rsqrt_4 = None
        mul_18: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_17, arg32_1);  mul_17 = arg32_1 = None
        add_21: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_18, arg33_1);  mul_18 = arg33_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        view_45: "f32[128, 768]" = torch.ops.aten.reshape.default(add_21, [128, 768])
        permute_22: "f32[768, 768]" = torch.ops.aten.permute.default(arg34_1, [1, 0]);  arg34_1 = None
        mm_6: "f32[128, 768]" = torch.ops.aten.mm.default(view_45, permute_22);  view_45 = permute_22 = None
        view_46: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_6, [2, 64, 768]);  mm_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_51: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_46, [2, 64, 12, 64]);  view_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_25: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_51, [0, 2, 1, 3]);  view_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        expand_10: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_25, [2, 12, 64, 64]);  permute_25 = None
        clone_16: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_10, memory_format = torch.contiguous_format);  expand_10 = None
        view_54: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_16, [24, 64, 64]);  clone_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        view_47: "f32[128, 768]" = torch.ops.aten.reshape.default(add_21, [128, 768])
        permute_23: "f32[768, 768]" = torch.ops.aten.permute.default(arg35_1, [1, 0]);  arg35_1 = None
        mm_7: "f32[128, 768]" = torch.ops.aten.mm.default(view_47, permute_23);  view_47 = permute_23 = None
        view_48: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_7, [2, 64, 768]);  mm_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_52: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_48, [2, 64, 12, 64]);  view_48 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_26: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_52, [0, 2, 1, 3]);  view_52 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_28: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_26, [0, 1, 3, 2])
        expand_11: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_28, [2, 12, 64, 64]);  permute_28 = None
        clone_17: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_11, memory_format = torch.contiguous_format);  expand_11 = None
        view_55: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_17, [24, 64, 64]);  clone_17 = None
        bmm_4: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_54, view_55);  view_54 = view_55 = None
        view_56: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_4, [2, 12, 64, 64]);  bmm_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        full_default_5: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_4: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_44, view_56, full_default_5);  slice_44 = view_56 = full_default_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_22: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_4, where_1);  where_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_2: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_22, [-1], True)
        sub_8: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_22, amax_2);  add_22 = amax_2 = None
        exp_2: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_8);  sub_8 = None
        sum_3: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_2, [-1], True)
        div_2: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_2, sum_3);  exp_2 = sum_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_12: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_2, [2, 12, 64, 64]);  div_2 = None
        view_57: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(expand_12, [24, 64, 64]);  expand_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        view_49: "f32[128, 768]" = torch.ops.aten.reshape.default(add_21, [128, 768]);  add_21 = None
        permute_24: "f32[768, 768]" = torch.ops.aten.permute.default(arg36_1, [1, 0]);  arg36_1 = None
        mm_8: "f32[128, 768]" = torch.ops.aten.mm.default(view_49, permute_24);  view_49 = permute_24 = None
        view_50: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_8, [2, 64, 768]);  mm_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_53: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_50, [2, 64, 12, 64]);  view_50 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_27: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_53, [0, 2, 1, 3]);  view_53 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_13: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_27, [2, 12, 64, 64])
        clone_19: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_13, memory_format = torch.contiguous_format);  expand_13 = None
        view_58: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_19, [24, 64, 64]);  clone_19 = None
        bmm_5: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_57, view_58);  view_57 = view_58 = None
        view_59: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_5, [2, 12, 64, 64]);  bmm_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_29: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_59, [0, 2, 1, 3]);  view_59 = None
        clone_20: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_29, memory_format = torch.contiguous_format);  permute_29 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_60: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(clone_20, [2, 64, 768]);  clone_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_61: "f32[128, 768]" = torch.ops.aten.reshape.default(view_60, [128, 768]);  view_60 = None
        permute_30: "f32[768, 768]" = torch.ops.aten.permute.default(arg38_1, [1, 0]);  arg38_1 = None
        
        # No stacktrace found for following nodes
        mm_default_29: "f32[128, 768]" = torch.ops.aten.mm.default(view_61, permute_30);  view_61 = permute_30 = None
        add_tensor_29: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_29, arg39_1);  mm_default_29 = arg39_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_62: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_29, [2, 64, 768]);  add_tensor_29 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_23: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_62, add_19);  view_62 = add_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_5 = torch.ops.aten.var_mean.correction(add_23, [2], correction = 0, keepdim = True)
        getitem_10: "f32[2, 64, 1]" = var_mean_5[0]
        getitem_11: "f32[2, 64, 1]" = var_mean_5[1];  var_mean_5 = None
        sub_9: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_23, getitem_11);  getitem_11 = None
        add_24: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_10, 1e-05);  getitem_10 = None
        rsqrt_5: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_24);  add_24 = None
        mul_19: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_9, rsqrt_5);  sub_9 = rsqrt_5 = None
        mul_20: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_19, arg40_1);  mul_19 = arg40_1 = None
        add_25: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_20, arg41_1);  mul_20 = arg41_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_63: "f32[128, 768]" = torch.ops.aten.reshape.default(add_25, [128, 768]);  add_25 = None
        permute_31: "f32[768, 3072]" = torch.ops.aten.permute.default(arg42_1, [1, 0]);  arg42_1 = None
        
        # No stacktrace found for following nodes
        mm_default_28: "f32[128, 3072]" = torch.ops.aten.mm.default(view_63, permute_31);  view_63 = permute_31 = None
        add_tensor_28: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_28, arg43_1);  mm_default_28 = arg43_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_64: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_28, [2, 64, 3072]);  add_tensor_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_21: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_64, 0.5)
        pow_3: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_64, 3.0)
        mul_22: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_3, 0.044715);  pow_3 = None
        add_26: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_64, mul_22);  view_64 = mul_22 = None
        mul_23: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_26, 0.7978845608028654);  add_26 = None
        tanh_2: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_23);  mul_23 = None
        add_27: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_2, 1.0);  tanh_2 = None
        mul_24: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_21, add_27);  mul_21 = add_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_65: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_24, [128, 3072]);  mul_24 = None
        permute_32: "f32[3072, 768]" = torch.ops.aten.permute.default(arg44_1, [1, 0]);  arg44_1 = None
        
        # No stacktrace found for following nodes
        mm_default_27: "f32[128, 768]" = torch.ops.aten.mm.default(view_65, permute_32);  view_65 = permute_32 = None
        add_tensor_27: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_27, arg45_1);  mm_default_27 = arg45_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_66: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_27, [2, 64, 768]);  add_tensor_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_28: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_23, view_66);  add_23 = view_66 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_6 = torch.ops.aten.var_mean.correction(add_28, [2], correction = 0, keepdim = True)
        getitem_12: "f32[2, 64, 1]" = var_mean_6[0]
        getitem_13: "f32[2, 64, 1]" = var_mean_6[1];  var_mean_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant3: "f32[]" = self._tensor_constant3;  _tensor_constant3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_53: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg51_1, 2, 0, 64);  arg51_1 = None
        slice_54: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_53, 3, 0, 64);  slice_53 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        sub_10: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_28, getitem_13);  getitem_13 = None
        add_29: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_12, 1e-05);  getitem_12 = None
        rsqrt_6: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_29);  add_29 = None
        mul_25: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_10, rsqrt_6);  sub_10 = rsqrt_6 = None
        mul_26: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_25, arg46_1);  mul_25 = arg46_1 = None
        add_30: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_26, arg47_1);  mul_26 = arg47_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        view_67: "f32[128, 768]" = torch.ops.aten.reshape.default(add_30, [128, 768])
        permute_33: "f32[768, 768]" = torch.ops.aten.permute.default(arg48_1, [1, 0]);  arg48_1 = None
        mm_9: "f32[128, 768]" = torch.ops.aten.mm.default(view_67, permute_33);  view_67 = permute_33 = None
        view_68: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_9, [2, 64, 768]);  mm_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_73: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_68, [2, 64, 12, 64]);  view_68 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_36: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_73, [0, 2, 1, 3]);  view_73 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        expand_14: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_36, [2, 12, 64, 64]);  permute_36 = None
        clone_23: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_14, memory_format = torch.contiguous_format);  expand_14 = None
        view_76: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_23, [24, 64, 64]);  clone_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        view_69: "f32[128, 768]" = torch.ops.aten.reshape.default(add_30, [128, 768])
        permute_34: "f32[768, 768]" = torch.ops.aten.permute.default(arg49_1, [1, 0]);  arg49_1 = None
        mm_10: "f32[128, 768]" = torch.ops.aten.mm.default(view_69, permute_34);  view_69 = permute_34 = None
        view_70: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_10, [2, 64, 768]);  mm_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_74: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_70, [2, 64, 12, 64]);  view_70 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_37: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_74, [0, 2, 1, 3]);  view_74 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_39: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_37, [0, 1, 3, 2])
        expand_15: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_39, [2, 12, 64, 64]);  permute_39 = None
        clone_24: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_15, memory_format = torch.contiguous_format);  expand_15 = None
        view_77: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_24, [24, 64, 64]);  clone_24 = None
        bmm_6: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_76, view_77);  view_76 = view_77 = None
        view_78: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_6, [2, 12, 64, 64]);  bmm_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        full_default_6: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_5: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_54, view_78, full_default_6);  slice_54 = view_78 = full_default_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_31: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_5, where_1);  where_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_3: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_31, [-1], True)
        sub_11: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_31, amax_3);  add_31 = amax_3 = None
        exp_3: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_11);  sub_11 = None
        sum_4: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_3, [-1], True)
        div_3: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_3, sum_4);  exp_3 = sum_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_16: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_3, [2, 12, 64, 64]);  div_3 = None
        view_79: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(expand_16, [24, 64, 64]);  expand_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        view_71: "f32[128, 768]" = torch.ops.aten.reshape.default(add_30, [128, 768]);  add_30 = None
        permute_35: "f32[768, 768]" = torch.ops.aten.permute.default(arg50_1, [1, 0]);  arg50_1 = None
        mm_11: "f32[128, 768]" = torch.ops.aten.mm.default(view_71, permute_35);  view_71 = permute_35 = None
        view_72: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_11, [2, 64, 768]);  mm_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_75: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_72, [2, 64, 12, 64]);  view_72 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_38: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_75, [0, 2, 1, 3]);  view_75 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_17: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_38, [2, 12, 64, 64])
        clone_26: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_17, memory_format = torch.contiguous_format);  expand_17 = None
        view_80: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_26, [24, 64, 64]);  clone_26 = None
        bmm_7: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_79, view_80);  view_79 = view_80 = None
        view_81: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_7, [2, 12, 64, 64]);  bmm_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_40: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_81, [0, 2, 1, 3]);  view_81 = None
        clone_27: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_40, memory_format = torch.contiguous_format);  permute_40 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_82: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(clone_27, [2, 64, 768]);  clone_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_83: "f32[128, 768]" = torch.ops.aten.reshape.default(view_82, [128, 768]);  view_82 = None
        permute_41: "f32[768, 768]" = torch.ops.aten.permute.default(arg52_1, [1, 0]);  arg52_1 = None
        
        # No stacktrace found for following nodes
        mm_default_26: "f32[128, 768]" = torch.ops.aten.mm.default(view_83, permute_41);  view_83 = permute_41 = None
        add_tensor_26: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_26, arg53_1);  mm_default_26 = arg53_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_84: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_26, [2, 64, 768]);  add_tensor_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_32: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_84, add_28);  view_84 = add_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_7 = torch.ops.aten.var_mean.correction(add_32, [2], correction = 0, keepdim = True)
        getitem_14: "f32[2, 64, 1]" = var_mean_7[0]
        getitem_15: "f32[2, 64, 1]" = var_mean_7[1];  var_mean_7 = None
        sub_12: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_32, getitem_15);  getitem_15 = None
        add_33: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_14, 1e-05);  getitem_14 = None
        rsqrt_7: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_33);  add_33 = None
        mul_27: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_12, rsqrt_7);  sub_12 = rsqrt_7 = None
        mul_28: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_27, arg54_1);  mul_27 = arg54_1 = None
        add_34: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_28, arg55_1);  mul_28 = arg55_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_85: "f32[128, 768]" = torch.ops.aten.reshape.default(add_34, [128, 768]);  add_34 = None
        permute_42: "f32[768, 3072]" = torch.ops.aten.permute.default(arg56_1, [1, 0]);  arg56_1 = None
        
        # No stacktrace found for following nodes
        mm_default_25: "f32[128, 3072]" = torch.ops.aten.mm.default(view_85, permute_42);  view_85 = permute_42 = None
        add_tensor_25: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_25, arg57_1);  mm_default_25 = arg57_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_86: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_25, [2, 64, 3072]);  add_tensor_25 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_29: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_86, 0.5)
        pow_4: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_86, 3.0)
        mul_30: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_4, 0.044715);  pow_4 = None
        add_35: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_86, mul_30);  view_86 = mul_30 = None
        mul_31: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_35, 0.7978845608028654);  add_35 = None
        tanh_3: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_31);  mul_31 = None
        add_36: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_3, 1.0);  tanh_3 = None
        mul_32: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_29, add_36);  mul_29 = add_36 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_87: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_32, [128, 3072]);  mul_32 = None
        permute_43: "f32[3072, 768]" = torch.ops.aten.permute.default(arg58_1, [1, 0]);  arg58_1 = None
        
        # No stacktrace found for following nodes
        mm_default_24: "f32[128, 768]" = torch.ops.aten.mm.default(view_87, permute_43);  view_87 = permute_43 = None
        add_tensor_24: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_24, arg59_1);  mm_default_24 = arg59_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_88: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_24, [2, 64, 768]);  add_tensor_24 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_37: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_32, view_88);  add_32 = view_88 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_8 = torch.ops.aten.var_mean.correction(add_37, [2], correction = 0, keepdim = True)
        getitem_16: "f32[2, 64, 1]" = var_mean_8[0]
        getitem_17: "f32[2, 64, 1]" = var_mean_8[1];  var_mean_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant4: "f32[]" = self._tensor_constant4;  _tensor_constant4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_63: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg65_1, 2, 0, 64);  arg65_1 = None
        slice_64: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_63, 3, 0, 64);  slice_63 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        sub_13: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_37, getitem_17);  getitem_17 = None
        add_38: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_16, 1e-05);  getitem_16 = None
        rsqrt_8: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_38);  add_38 = None
        mul_33: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_13, rsqrt_8);  sub_13 = rsqrt_8 = None
        mul_34: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_33, arg60_1);  mul_33 = arg60_1 = None
        add_39: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_34, arg61_1);  mul_34 = arg61_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        view_89: "f32[128, 768]" = torch.ops.aten.reshape.default(add_39, [128, 768])
        permute_44: "f32[768, 768]" = torch.ops.aten.permute.default(arg62_1, [1, 0]);  arg62_1 = None
        mm_12: "f32[128, 768]" = torch.ops.aten.mm.default(view_89, permute_44);  view_89 = permute_44 = None
        view_90: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_12, [2, 64, 768]);  mm_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_95: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_90, [2, 64, 12, 64]);  view_90 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_47: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_95, [0, 2, 1, 3]);  view_95 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        expand_18: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_47, [2, 12, 64, 64]);  permute_47 = None
        clone_30: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_18, memory_format = torch.contiguous_format);  expand_18 = None
        view_98: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_30, [24, 64, 64]);  clone_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        view_91: "f32[128, 768]" = torch.ops.aten.reshape.default(add_39, [128, 768])
        permute_45: "f32[768, 768]" = torch.ops.aten.permute.default(arg63_1, [1, 0]);  arg63_1 = None
        mm_13: "f32[128, 768]" = torch.ops.aten.mm.default(view_91, permute_45);  view_91 = permute_45 = None
        view_92: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_13, [2, 64, 768]);  mm_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_96: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_92, [2, 64, 12, 64]);  view_92 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_48: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_96, [0, 2, 1, 3]);  view_96 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_50: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_48, [0, 1, 3, 2])
        expand_19: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_50, [2, 12, 64, 64]);  permute_50 = None
        clone_31: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_19, memory_format = torch.contiguous_format);  expand_19 = None
        view_99: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_31, [24, 64, 64]);  clone_31 = None
        bmm_8: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_98, view_99);  view_98 = view_99 = None
        view_100: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_8, [2, 12, 64, 64]);  bmm_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        full_default_7: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_6: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_64, view_100, full_default_7);  slice_64 = view_100 = full_default_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_40: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_6, where_1);  where_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_4: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_40, [-1], True)
        sub_14: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_40, amax_4);  add_40 = amax_4 = None
        exp_4: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_14);  sub_14 = None
        sum_5: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_4, [-1], True)
        div_4: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_4, sum_5);  exp_4 = sum_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_20: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_4, [2, 12, 64, 64]);  div_4 = None
        view_101: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(expand_20, [24, 64, 64]);  expand_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        view_93: "f32[128, 768]" = torch.ops.aten.reshape.default(add_39, [128, 768]);  add_39 = None
        permute_46: "f32[768, 768]" = torch.ops.aten.permute.default(arg64_1, [1, 0]);  arg64_1 = None
        mm_14: "f32[128, 768]" = torch.ops.aten.mm.default(view_93, permute_46);  view_93 = permute_46 = None
        view_94: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_14, [2, 64, 768]);  mm_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_97: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_94, [2, 64, 12, 64]);  view_94 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_49: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_97, [0, 2, 1, 3]);  view_97 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_21: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_49, [2, 12, 64, 64])
        clone_33: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_21, memory_format = torch.contiguous_format);  expand_21 = None
        view_102: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_33, [24, 64, 64]);  clone_33 = None
        bmm_9: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_101, view_102);  view_101 = view_102 = None
        view_103: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_9, [2, 12, 64, 64]);  bmm_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_51: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_103, [0, 2, 1, 3]);  view_103 = None
        clone_34: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_51, memory_format = torch.contiguous_format);  permute_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_104: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(clone_34, [2, 64, 768]);  clone_34 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_105: "f32[128, 768]" = torch.ops.aten.reshape.default(view_104, [128, 768]);  view_104 = None
        permute_52: "f32[768, 768]" = torch.ops.aten.permute.default(arg66_1, [1, 0]);  arg66_1 = None
        
        # No stacktrace found for following nodes
        mm_default_23: "f32[128, 768]" = torch.ops.aten.mm.default(view_105, permute_52);  view_105 = permute_52 = None
        add_tensor_23: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_23, arg67_1);  mm_default_23 = arg67_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_106: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_23, [2, 64, 768]);  add_tensor_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_41: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_106, add_37);  view_106 = add_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_9 = torch.ops.aten.var_mean.correction(add_41, [2], correction = 0, keepdim = True)
        getitem_18: "f32[2, 64, 1]" = var_mean_9[0]
        getitem_19: "f32[2, 64, 1]" = var_mean_9[1];  var_mean_9 = None
        sub_15: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_41, getitem_19);  getitem_19 = None
        add_42: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_18, 1e-05);  getitem_18 = None
        rsqrt_9: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_42);  add_42 = None
        mul_35: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_15, rsqrt_9);  sub_15 = rsqrt_9 = None
        mul_36: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_35, arg68_1);  mul_35 = arg68_1 = None
        add_43: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_36, arg69_1);  mul_36 = arg69_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_107: "f32[128, 768]" = torch.ops.aten.reshape.default(add_43, [128, 768]);  add_43 = None
        permute_53: "f32[768, 3072]" = torch.ops.aten.permute.default(arg70_1, [1, 0]);  arg70_1 = None
        
        # No stacktrace found for following nodes
        mm_default_22: "f32[128, 3072]" = torch.ops.aten.mm.default(view_107, permute_53);  view_107 = permute_53 = None
        add_tensor_22: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_22, arg71_1);  mm_default_22 = arg71_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_108: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_22, [2, 64, 3072]);  add_tensor_22 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_37: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_108, 0.5)
        pow_5: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_108, 3.0)
        mul_38: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_5, 0.044715);  pow_5 = None
        add_44: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_108, mul_38);  view_108 = mul_38 = None
        mul_39: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_44, 0.7978845608028654);  add_44 = None
        tanh_4: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_39);  mul_39 = None
        add_45: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_4, 1.0);  tanh_4 = None
        mul_40: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_37, add_45);  mul_37 = add_45 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_109: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_40, [128, 3072]);  mul_40 = None
        permute_54: "f32[3072, 768]" = torch.ops.aten.permute.default(arg72_1, [1, 0]);  arg72_1 = None
        
        # No stacktrace found for following nodes
        mm_default_21: "f32[128, 768]" = torch.ops.aten.mm.default(view_109, permute_54);  view_109 = permute_54 = None
        add_tensor_21: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_21, arg73_1);  mm_default_21 = arg73_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_110: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_21, [2, 64, 768]);  add_tensor_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_46: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_41, view_110);  add_41 = view_110 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_10 = torch.ops.aten.var_mean.correction(add_46, [2], correction = 0, keepdim = True)
        getitem_20: "f32[2, 64, 1]" = var_mean_10[0]
        getitem_21: "f32[2, 64, 1]" = var_mean_10[1];  var_mean_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant5: "f32[]" = self._tensor_constant5;  _tensor_constant5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_73: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg79_1, 2, 0, 64);  arg79_1 = None
        slice_74: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_73, 3, 0, 64);  slice_73 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        sub_16: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_46, getitem_21);  getitem_21 = None
        add_47: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_20, 1e-05);  getitem_20 = None
        rsqrt_10: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_47);  add_47 = None
        mul_41: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_16, rsqrt_10);  sub_16 = rsqrt_10 = None
        mul_42: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_41, arg74_1);  mul_41 = arg74_1 = None
        add_48: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_42, arg75_1);  mul_42 = arg75_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        view_111: "f32[128, 768]" = torch.ops.aten.reshape.default(add_48, [128, 768])
        permute_55: "f32[768, 768]" = torch.ops.aten.permute.default(arg76_1, [1, 0]);  arg76_1 = None
        mm_15: "f32[128, 768]" = torch.ops.aten.mm.default(view_111, permute_55);  view_111 = permute_55 = None
        view_112: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_15, [2, 64, 768]);  mm_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_117: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_112, [2, 64, 12, 64]);  view_112 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_58: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_117, [0, 2, 1, 3]);  view_117 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        expand_22: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_58, [2, 12, 64, 64]);  permute_58 = None
        clone_37: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_22, memory_format = torch.contiguous_format);  expand_22 = None
        view_120: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_37, [24, 64, 64]);  clone_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        view_113: "f32[128, 768]" = torch.ops.aten.reshape.default(add_48, [128, 768])
        permute_56: "f32[768, 768]" = torch.ops.aten.permute.default(arg77_1, [1, 0]);  arg77_1 = None
        mm_16: "f32[128, 768]" = torch.ops.aten.mm.default(view_113, permute_56);  view_113 = permute_56 = None
        view_114: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_16, [2, 64, 768]);  mm_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_118: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_114, [2, 64, 12, 64]);  view_114 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_59: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_118, [0, 2, 1, 3]);  view_118 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_61: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_59, [0, 1, 3, 2])
        expand_23: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_61, [2, 12, 64, 64]);  permute_61 = None
        clone_38: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_23, memory_format = torch.contiguous_format);  expand_23 = None
        view_121: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_38, [24, 64, 64]);  clone_38 = None
        bmm_10: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_120, view_121);  view_120 = view_121 = None
        view_122: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_10, [2, 12, 64, 64]);  bmm_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        full_default_8: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_7: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_74, view_122, full_default_8);  slice_74 = view_122 = full_default_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_49: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_7, where_1);  where_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_5: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_49, [-1], True)
        sub_17: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_49, amax_5);  add_49 = amax_5 = None
        exp_5: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_17);  sub_17 = None
        sum_6: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_5, [-1], True)
        div_5: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_5, sum_6);  exp_5 = sum_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_24: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_5, [2, 12, 64, 64]);  div_5 = None
        view_123: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(expand_24, [24, 64, 64]);  expand_24 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        view_115: "f32[128, 768]" = torch.ops.aten.reshape.default(add_48, [128, 768]);  add_48 = None
        permute_57: "f32[768, 768]" = torch.ops.aten.permute.default(arg78_1, [1, 0]);  arg78_1 = None
        mm_17: "f32[128, 768]" = torch.ops.aten.mm.default(view_115, permute_57);  view_115 = permute_57 = None
        view_116: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_17, [2, 64, 768]);  mm_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_119: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_116, [2, 64, 12, 64]);  view_116 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_60: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_119, [0, 2, 1, 3]);  view_119 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_25: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_60, [2, 12, 64, 64])
        clone_40: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_25, memory_format = torch.contiguous_format);  expand_25 = None
        view_124: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_40, [24, 64, 64]);  clone_40 = None
        bmm_11: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_123, view_124);  view_123 = view_124 = None
        view_125: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_11, [2, 12, 64, 64]);  bmm_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_62: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_125, [0, 2, 1, 3]);  view_125 = None
        clone_41: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_62, memory_format = torch.contiguous_format);  permute_62 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_126: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(clone_41, [2, 64, 768]);  clone_41 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_127: "f32[128, 768]" = torch.ops.aten.reshape.default(view_126, [128, 768]);  view_126 = None
        permute_63: "f32[768, 768]" = torch.ops.aten.permute.default(arg80_1, [1, 0]);  arg80_1 = None
        
        # No stacktrace found for following nodes
        mm_default_20: "f32[128, 768]" = torch.ops.aten.mm.default(view_127, permute_63);  view_127 = permute_63 = None
        add_tensor_20: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_20, arg81_1);  mm_default_20 = arg81_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_128: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_20, [2, 64, 768]);  add_tensor_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_50: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_128, add_46);  view_128 = add_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_11 = torch.ops.aten.var_mean.correction(add_50, [2], correction = 0, keepdim = True)
        getitem_22: "f32[2, 64, 1]" = var_mean_11[0]
        getitem_23: "f32[2, 64, 1]" = var_mean_11[1];  var_mean_11 = None
        sub_18: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_50, getitem_23);  getitem_23 = None
        add_51: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_22, 1e-05);  getitem_22 = None
        rsqrt_11: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_51);  add_51 = None
        mul_43: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_18, rsqrt_11);  sub_18 = rsqrt_11 = None
        mul_44: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_43, arg82_1);  mul_43 = arg82_1 = None
        add_52: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_44, arg83_1);  mul_44 = arg83_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_129: "f32[128, 768]" = torch.ops.aten.reshape.default(add_52, [128, 768]);  add_52 = None
        permute_64: "f32[768, 3072]" = torch.ops.aten.permute.default(arg84_1, [1, 0]);  arg84_1 = None
        
        # No stacktrace found for following nodes
        mm_default_19: "f32[128, 3072]" = torch.ops.aten.mm.default(view_129, permute_64);  view_129 = permute_64 = None
        add_tensor_19: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_19, arg85_1);  mm_default_19 = arg85_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_130: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_19, [2, 64, 3072]);  add_tensor_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_45: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_130, 0.5)
        pow_6: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_130, 3.0)
        mul_46: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_6, 0.044715);  pow_6 = None
        add_53: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_130, mul_46);  view_130 = mul_46 = None
        mul_47: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_53, 0.7978845608028654);  add_53 = None
        tanh_5: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_47);  mul_47 = None
        add_54: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_5, 1.0);  tanh_5 = None
        mul_48: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_45, add_54);  mul_45 = add_54 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_131: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_48, [128, 3072]);  mul_48 = None
        permute_65: "f32[3072, 768]" = torch.ops.aten.permute.default(arg86_1, [1, 0]);  arg86_1 = None
        
        # No stacktrace found for following nodes
        mm_default_18: "f32[128, 768]" = torch.ops.aten.mm.default(view_131, permute_65);  view_131 = permute_65 = None
        add_tensor_18: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_18, arg87_1);  mm_default_18 = arg87_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_132: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_18, [2, 64, 768]);  add_tensor_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_55: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_50, view_132);  add_50 = view_132 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_12 = torch.ops.aten.var_mean.correction(add_55, [2], correction = 0, keepdim = True)
        getitem_24: "f32[2, 64, 1]" = var_mean_12[0]
        getitem_25: "f32[2, 64, 1]" = var_mean_12[1];  var_mean_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant6: "f32[]" = self._tensor_constant6;  _tensor_constant6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_83: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg93_1, 2, 0, 64);  arg93_1 = None
        slice_84: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_83, 3, 0, 64);  slice_83 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        sub_19: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_55, getitem_25);  getitem_25 = None
        add_56: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_24, 1e-05);  getitem_24 = None
        rsqrt_12: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_56);  add_56 = None
        mul_49: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_19, rsqrt_12);  sub_19 = rsqrt_12 = None
        mul_50: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_49, arg88_1);  mul_49 = arg88_1 = None
        add_57: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_50, arg89_1);  mul_50 = arg89_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        view_133: "f32[128, 768]" = torch.ops.aten.reshape.default(add_57, [128, 768])
        permute_66: "f32[768, 768]" = torch.ops.aten.permute.default(arg90_1, [1, 0]);  arg90_1 = None
        mm_18: "f32[128, 768]" = torch.ops.aten.mm.default(view_133, permute_66);  view_133 = permute_66 = None
        view_134: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_18, [2, 64, 768]);  mm_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_139: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_134, [2, 64, 12, 64]);  view_134 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_69: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_139, [0, 2, 1, 3]);  view_139 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        expand_26: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_69, [2, 12, 64, 64]);  permute_69 = None
        clone_44: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_26, memory_format = torch.contiguous_format);  expand_26 = None
        view_142: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_44, [24, 64, 64]);  clone_44 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        view_135: "f32[128, 768]" = torch.ops.aten.reshape.default(add_57, [128, 768])
        permute_67: "f32[768, 768]" = torch.ops.aten.permute.default(arg91_1, [1, 0]);  arg91_1 = None
        mm_19: "f32[128, 768]" = torch.ops.aten.mm.default(view_135, permute_67);  view_135 = permute_67 = None
        view_136: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_19, [2, 64, 768]);  mm_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_140: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_136, [2, 64, 12, 64]);  view_136 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_70: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_140, [0, 2, 1, 3]);  view_140 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_72: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_70, [0, 1, 3, 2])
        expand_27: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_72, [2, 12, 64, 64]);  permute_72 = None
        clone_45: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_27, memory_format = torch.contiguous_format);  expand_27 = None
        view_143: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_45, [24, 64, 64]);  clone_45 = None
        bmm_12: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_142, view_143);  view_142 = view_143 = None
        view_144: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_12, [2, 12, 64, 64]);  bmm_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        full_default_9: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_8: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_84, view_144, full_default_9);  slice_84 = view_144 = full_default_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_58: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_8, where_1);  where_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_6: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_58, [-1], True)
        sub_20: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_58, amax_6);  add_58 = amax_6 = None
        exp_6: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_20);  sub_20 = None
        sum_7: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_6, [-1], True)
        div_6: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_6, sum_7);  exp_6 = sum_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_28: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_6, [2, 12, 64, 64]);  div_6 = None
        view_145: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(expand_28, [24, 64, 64]);  expand_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        view_137: "f32[128, 768]" = torch.ops.aten.reshape.default(add_57, [128, 768]);  add_57 = None
        permute_68: "f32[768, 768]" = torch.ops.aten.permute.default(arg92_1, [1, 0]);  arg92_1 = None
        mm_20: "f32[128, 768]" = torch.ops.aten.mm.default(view_137, permute_68);  view_137 = permute_68 = None
        view_138: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_20, [2, 64, 768]);  mm_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_141: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_138, [2, 64, 12, 64]);  view_138 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_71: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_141, [0, 2, 1, 3]);  view_141 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_29: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_71, [2, 12, 64, 64])
        clone_47: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_29, memory_format = torch.contiguous_format);  expand_29 = None
        view_146: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_47, [24, 64, 64]);  clone_47 = None
        bmm_13: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_145, view_146);  view_145 = view_146 = None
        view_147: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_13, [2, 12, 64, 64]);  bmm_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_73: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_147, [0, 2, 1, 3]);  view_147 = None
        clone_48: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_73, memory_format = torch.contiguous_format);  permute_73 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_148: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(clone_48, [2, 64, 768]);  clone_48 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_149: "f32[128, 768]" = torch.ops.aten.reshape.default(view_148, [128, 768]);  view_148 = None
        permute_74: "f32[768, 768]" = torch.ops.aten.permute.default(arg94_1, [1, 0]);  arg94_1 = None
        
        # No stacktrace found for following nodes
        mm_default_17: "f32[128, 768]" = torch.ops.aten.mm.default(view_149, permute_74);  view_149 = permute_74 = None
        add_tensor_17: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_17, arg95_1);  mm_default_17 = arg95_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_150: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_17, [2, 64, 768]);  add_tensor_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_59: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_150, add_55);  view_150 = add_55 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_13 = torch.ops.aten.var_mean.correction(add_59, [2], correction = 0, keepdim = True)
        getitem_26: "f32[2, 64, 1]" = var_mean_13[0]
        getitem_27: "f32[2, 64, 1]" = var_mean_13[1];  var_mean_13 = None
        sub_21: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_59, getitem_27);  getitem_27 = None
        add_60: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_26, 1e-05);  getitem_26 = None
        rsqrt_13: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_60);  add_60 = None
        mul_51: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_21, rsqrt_13);  sub_21 = rsqrt_13 = None
        mul_52: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_51, arg96_1);  mul_51 = arg96_1 = None
        add_61: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_52, arg97_1);  mul_52 = arg97_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_151: "f32[128, 768]" = torch.ops.aten.reshape.default(add_61, [128, 768]);  add_61 = None
        permute_75: "f32[768, 3072]" = torch.ops.aten.permute.default(arg98_1, [1, 0]);  arg98_1 = None
        
        # No stacktrace found for following nodes
        mm_default_16: "f32[128, 3072]" = torch.ops.aten.mm.default(view_151, permute_75);  view_151 = permute_75 = None
        add_tensor_16: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_16, arg99_1);  mm_default_16 = arg99_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_152: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_16, [2, 64, 3072]);  add_tensor_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_53: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_152, 0.5)
        pow_7: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_152, 3.0)
        mul_54: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_7, 0.044715);  pow_7 = None
        add_62: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_152, mul_54);  view_152 = mul_54 = None
        mul_55: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_62, 0.7978845608028654);  add_62 = None
        tanh_6: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_55);  mul_55 = None
        add_63: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_6, 1.0);  tanh_6 = None
        mul_56: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_53, add_63);  mul_53 = add_63 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_153: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_56, [128, 3072]);  mul_56 = None
        permute_76: "f32[3072, 768]" = torch.ops.aten.permute.default(arg100_1, [1, 0]);  arg100_1 = None
        
        # No stacktrace found for following nodes
        mm_default_15: "f32[128, 768]" = torch.ops.aten.mm.default(view_153, permute_76);  view_153 = permute_76 = None
        add_tensor_15: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_15, arg101_1);  mm_default_15 = arg101_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_154: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_15, [2, 64, 768]);  add_tensor_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_64: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_59, view_154);  add_59 = view_154 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_14 = torch.ops.aten.var_mean.correction(add_64, [2], correction = 0, keepdim = True)
        getitem_28: "f32[2, 64, 1]" = var_mean_14[0]
        getitem_29: "f32[2, 64, 1]" = var_mean_14[1];  var_mean_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant7: "f32[]" = self._tensor_constant7;  _tensor_constant7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_93: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg107_1, 2, 0, 64);  arg107_1 = None
        slice_94: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_93, 3, 0, 64);  slice_93 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        sub_22: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_64, getitem_29);  getitem_29 = None
        add_65: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_28, 1e-05);  getitem_28 = None
        rsqrt_14: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_65);  add_65 = None
        mul_57: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_22, rsqrt_14);  sub_22 = rsqrt_14 = None
        mul_58: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_57, arg102_1);  mul_57 = arg102_1 = None
        add_66: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_58, arg103_1);  mul_58 = arg103_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        view_155: "f32[128, 768]" = torch.ops.aten.reshape.default(add_66, [128, 768])
        permute_77: "f32[768, 768]" = torch.ops.aten.permute.default(arg104_1, [1, 0]);  arg104_1 = None
        mm_21: "f32[128, 768]" = torch.ops.aten.mm.default(view_155, permute_77);  view_155 = permute_77 = None
        view_156: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_21, [2, 64, 768]);  mm_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_161: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_156, [2, 64, 12, 64]);  view_156 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_80: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_161, [0, 2, 1, 3]);  view_161 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        expand_30: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_80, [2, 12, 64, 64]);  permute_80 = None
        clone_51: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_30, memory_format = torch.contiguous_format);  expand_30 = None
        view_164: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_51, [24, 64, 64]);  clone_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        view_157: "f32[128, 768]" = torch.ops.aten.reshape.default(add_66, [128, 768])
        permute_78: "f32[768, 768]" = torch.ops.aten.permute.default(arg105_1, [1, 0]);  arg105_1 = None
        mm_22: "f32[128, 768]" = torch.ops.aten.mm.default(view_157, permute_78);  view_157 = permute_78 = None
        view_158: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_22, [2, 64, 768]);  mm_22 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_162: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_158, [2, 64, 12, 64]);  view_158 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_81: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_162, [0, 2, 1, 3]);  view_162 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_83: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_81, [0, 1, 3, 2])
        expand_31: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_83, [2, 12, 64, 64]);  permute_83 = None
        clone_52: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_31, memory_format = torch.contiguous_format);  expand_31 = None
        view_165: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_52, [24, 64, 64]);  clone_52 = None
        bmm_14: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_164, view_165);  view_164 = view_165 = None
        view_166: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_14, [2, 12, 64, 64]);  bmm_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        full_default_10: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_9: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_94, view_166, full_default_10);  slice_94 = view_166 = full_default_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_67: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_9, where_1);  where_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_7: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_67, [-1], True)
        sub_23: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_67, amax_7);  add_67 = amax_7 = None
        exp_7: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_23);  sub_23 = None
        sum_8: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_7, [-1], True)
        div_7: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_7, sum_8);  exp_7 = sum_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_32: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_7, [2, 12, 64, 64]);  div_7 = None
        view_167: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(expand_32, [24, 64, 64]);  expand_32 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        view_159: "f32[128, 768]" = torch.ops.aten.reshape.default(add_66, [128, 768]);  add_66 = None
        permute_79: "f32[768, 768]" = torch.ops.aten.permute.default(arg106_1, [1, 0]);  arg106_1 = None
        mm_23: "f32[128, 768]" = torch.ops.aten.mm.default(view_159, permute_79);  view_159 = permute_79 = None
        view_160: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_23, [2, 64, 768]);  mm_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_163: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_160, [2, 64, 12, 64]);  view_160 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_82: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_163, [0, 2, 1, 3]);  view_163 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_33: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_82, [2, 12, 64, 64])
        clone_54: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_33, memory_format = torch.contiguous_format);  expand_33 = None
        view_168: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_54, [24, 64, 64]);  clone_54 = None
        bmm_15: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_167, view_168);  view_167 = view_168 = None
        view_169: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_15, [2, 12, 64, 64]);  bmm_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_84: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_169, [0, 2, 1, 3]);  view_169 = None
        clone_55: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_84, memory_format = torch.contiguous_format);  permute_84 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_170: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(clone_55, [2, 64, 768]);  clone_55 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_171: "f32[128, 768]" = torch.ops.aten.reshape.default(view_170, [128, 768]);  view_170 = None
        permute_85: "f32[768, 768]" = torch.ops.aten.permute.default(arg108_1, [1, 0]);  arg108_1 = None
        
        # No stacktrace found for following nodes
        mm_default_14: "f32[128, 768]" = torch.ops.aten.mm.default(view_171, permute_85);  view_171 = permute_85 = None
        add_tensor_14: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_14, arg109_1);  mm_default_14 = arg109_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_172: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_14, [2, 64, 768]);  add_tensor_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_68: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_172, add_64);  view_172 = add_64 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_15 = torch.ops.aten.var_mean.correction(add_68, [2], correction = 0, keepdim = True)
        getitem_30: "f32[2, 64, 1]" = var_mean_15[0]
        getitem_31: "f32[2, 64, 1]" = var_mean_15[1];  var_mean_15 = None
        sub_24: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_68, getitem_31);  getitem_31 = None
        add_69: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_30, 1e-05);  getitem_30 = None
        rsqrt_15: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_69);  add_69 = None
        mul_59: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_24, rsqrt_15);  sub_24 = rsqrt_15 = None
        mul_60: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_59, arg110_1);  mul_59 = arg110_1 = None
        add_70: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_60, arg111_1);  mul_60 = arg111_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_173: "f32[128, 768]" = torch.ops.aten.reshape.default(add_70, [128, 768]);  add_70 = None
        permute_86: "f32[768, 3072]" = torch.ops.aten.permute.default(arg112_1, [1, 0]);  arg112_1 = None
        
        # No stacktrace found for following nodes
        mm_default_13: "f32[128, 3072]" = torch.ops.aten.mm.default(view_173, permute_86);  view_173 = permute_86 = None
        add_tensor_13: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_13, arg113_1);  mm_default_13 = arg113_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_174: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_13, [2, 64, 3072]);  add_tensor_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_61: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_174, 0.5)
        pow_8: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_174, 3.0)
        mul_62: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_8, 0.044715);  pow_8 = None
        add_71: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_174, mul_62);  view_174 = mul_62 = None
        mul_63: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_71, 0.7978845608028654);  add_71 = None
        tanh_7: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_63);  mul_63 = None
        add_72: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_7, 1.0);  tanh_7 = None
        mul_64: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_61, add_72);  mul_61 = add_72 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_175: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_64, [128, 3072]);  mul_64 = None
        permute_87: "f32[3072, 768]" = torch.ops.aten.permute.default(arg114_1, [1, 0]);  arg114_1 = None
        
        # No stacktrace found for following nodes
        mm_default_12: "f32[128, 768]" = torch.ops.aten.mm.default(view_175, permute_87);  view_175 = permute_87 = None
        add_tensor_12: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_12, arg115_1);  mm_default_12 = arg115_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_176: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_12, [2, 64, 768]);  add_tensor_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_73: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_68, view_176);  add_68 = view_176 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_16 = torch.ops.aten.var_mean.correction(add_73, [2], correction = 0, keepdim = True)
        getitem_32: "f32[2, 64, 1]" = var_mean_16[0]
        getitem_33: "f32[2, 64, 1]" = var_mean_16[1];  var_mean_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant8: "f32[]" = self._tensor_constant8;  _tensor_constant8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_103: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg121_1, 2, 0, 64);  arg121_1 = None
        slice_104: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_103, 3, 0, 64);  slice_103 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        sub_25: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_73, getitem_33);  getitem_33 = None
        add_74: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_32, 1e-05);  getitem_32 = None
        rsqrt_16: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_74);  add_74 = None
        mul_65: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_25, rsqrt_16);  sub_25 = rsqrt_16 = None
        mul_66: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_65, arg116_1);  mul_65 = arg116_1 = None
        add_75: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_66, arg117_1);  mul_66 = arg117_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        view_177: "f32[128, 768]" = torch.ops.aten.reshape.default(add_75, [128, 768])
        permute_88: "f32[768, 768]" = torch.ops.aten.permute.default(arg118_1, [1, 0]);  arg118_1 = None
        mm_24: "f32[128, 768]" = torch.ops.aten.mm.default(view_177, permute_88);  view_177 = permute_88 = None
        view_178: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_24, [2, 64, 768]);  mm_24 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_183: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_178, [2, 64, 12, 64]);  view_178 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_91: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_183, [0, 2, 1, 3]);  view_183 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        expand_34: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_91, [2, 12, 64, 64]);  permute_91 = None
        clone_58: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_34, memory_format = torch.contiguous_format);  expand_34 = None
        view_186: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_58, [24, 64, 64]);  clone_58 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        view_179: "f32[128, 768]" = torch.ops.aten.reshape.default(add_75, [128, 768])
        permute_89: "f32[768, 768]" = torch.ops.aten.permute.default(arg119_1, [1, 0]);  arg119_1 = None
        mm_25: "f32[128, 768]" = torch.ops.aten.mm.default(view_179, permute_89);  view_179 = permute_89 = None
        view_180: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_25, [2, 64, 768]);  mm_25 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_184: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_180, [2, 64, 12, 64]);  view_180 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_92: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_184, [0, 2, 1, 3]);  view_184 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_94: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_92, [0, 1, 3, 2])
        expand_35: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_94, [2, 12, 64, 64]);  permute_94 = None
        clone_59: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_35, memory_format = torch.contiguous_format);  expand_35 = None
        view_187: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_59, [24, 64, 64]);  clone_59 = None
        bmm_16: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_186, view_187);  view_186 = view_187 = None
        view_188: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_16, [2, 12, 64, 64]);  bmm_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        full_default_11: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_10: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_104, view_188, full_default_11);  slice_104 = view_188 = full_default_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_76: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_10, where_1);  where_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_8: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_76, [-1], True)
        sub_26: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_76, amax_8);  add_76 = amax_8 = None
        exp_8: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_26);  sub_26 = None
        sum_9: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_8, [-1], True)
        div_8: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_8, sum_9);  exp_8 = sum_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_36: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_8, [2, 12, 64, 64]);  div_8 = None
        view_189: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(expand_36, [24, 64, 64]);  expand_36 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        view_181: "f32[128, 768]" = torch.ops.aten.reshape.default(add_75, [128, 768]);  add_75 = None
        permute_90: "f32[768, 768]" = torch.ops.aten.permute.default(arg120_1, [1, 0]);  arg120_1 = None
        mm_26: "f32[128, 768]" = torch.ops.aten.mm.default(view_181, permute_90);  view_181 = permute_90 = None
        view_182: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_26, [2, 64, 768]);  mm_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_185: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_182, [2, 64, 12, 64]);  view_182 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_93: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_185, [0, 2, 1, 3]);  view_185 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_37: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_93, [2, 12, 64, 64])
        clone_61: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_37, memory_format = torch.contiguous_format);  expand_37 = None
        view_190: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_61, [24, 64, 64]);  clone_61 = None
        bmm_17: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_189, view_190);  view_189 = view_190 = None
        view_191: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_17, [2, 12, 64, 64]);  bmm_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_95: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_191, [0, 2, 1, 3]);  view_191 = None
        clone_62: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_95, memory_format = torch.contiguous_format);  permute_95 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_192: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(clone_62, [2, 64, 768]);  clone_62 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_193: "f32[128, 768]" = torch.ops.aten.reshape.default(view_192, [128, 768]);  view_192 = None
        permute_96: "f32[768, 768]" = torch.ops.aten.permute.default(arg122_1, [1, 0]);  arg122_1 = None
        
        # No stacktrace found for following nodes
        mm_default_11: "f32[128, 768]" = torch.ops.aten.mm.default(view_193, permute_96);  view_193 = permute_96 = None
        add_tensor_11: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_11, arg123_1);  mm_default_11 = arg123_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_194: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_11, [2, 64, 768]);  add_tensor_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_77: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_194, add_73);  view_194 = add_73 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_17 = torch.ops.aten.var_mean.correction(add_77, [2], correction = 0, keepdim = True)
        getitem_34: "f32[2, 64, 1]" = var_mean_17[0]
        getitem_35: "f32[2, 64, 1]" = var_mean_17[1];  var_mean_17 = None
        sub_27: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_77, getitem_35);  getitem_35 = None
        add_78: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_34, 1e-05);  getitem_34 = None
        rsqrt_17: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_78);  add_78 = None
        mul_67: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_27, rsqrt_17);  sub_27 = rsqrt_17 = None
        mul_68: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_67, arg124_1);  mul_67 = arg124_1 = None
        add_79: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_68, arg125_1);  mul_68 = arg125_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_195: "f32[128, 768]" = torch.ops.aten.reshape.default(add_79, [128, 768]);  add_79 = None
        permute_97: "f32[768, 3072]" = torch.ops.aten.permute.default(arg126_1, [1, 0]);  arg126_1 = None
        
        # No stacktrace found for following nodes
        mm_default_10: "f32[128, 3072]" = torch.ops.aten.mm.default(view_195, permute_97);  view_195 = permute_97 = None
        add_tensor_10: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_10, arg127_1);  mm_default_10 = arg127_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_196: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_10, [2, 64, 3072]);  add_tensor_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_69: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_196, 0.5)
        pow_9: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_196, 3.0)
        mul_70: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_9, 0.044715);  pow_9 = None
        add_80: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_196, mul_70);  view_196 = mul_70 = None
        mul_71: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_80, 0.7978845608028654);  add_80 = None
        tanh_8: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_71);  mul_71 = None
        add_81: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_8, 1.0);  tanh_8 = None
        mul_72: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_69, add_81);  mul_69 = add_81 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_197: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_72, [128, 3072]);  mul_72 = None
        permute_98: "f32[3072, 768]" = torch.ops.aten.permute.default(arg128_1, [1, 0]);  arg128_1 = None
        
        # No stacktrace found for following nodes
        mm_default_9: "f32[128, 768]" = torch.ops.aten.mm.default(view_197, permute_98);  view_197 = permute_98 = None
        add_tensor_9: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_9, arg129_1);  mm_default_9 = arg129_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_198: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_9, [2, 64, 768]);  add_tensor_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_82: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_77, view_198);  add_77 = view_198 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_18 = torch.ops.aten.var_mean.correction(add_82, [2], correction = 0, keepdim = True)
        getitem_36: "f32[2, 64, 1]" = var_mean_18[0]
        getitem_37: "f32[2, 64, 1]" = var_mean_18[1];  var_mean_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant9: "f32[]" = self._tensor_constant9;  _tensor_constant9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_113: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg135_1, 2, 0, 64);  arg135_1 = None
        slice_114: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_113, 3, 0, 64);  slice_113 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        sub_28: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_82, getitem_37);  getitem_37 = None
        add_83: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_36, 1e-05);  getitem_36 = None
        rsqrt_18: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_83);  add_83 = None
        mul_73: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_28, rsqrt_18);  sub_28 = rsqrt_18 = None
        mul_74: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_73, arg130_1);  mul_73 = arg130_1 = None
        add_84: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_74, arg131_1);  mul_74 = arg131_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        view_199: "f32[128, 768]" = torch.ops.aten.reshape.default(add_84, [128, 768])
        permute_99: "f32[768, 768]" = torch.ops.aten.permute.default(arg132_1, [1, 0]);  arg132_1 = None
        mm_27: "f32[128, 768]" = torch.ops.aten.mm.default(view_199, permute_99);  view_199 = permute_99 = None
        view_200: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_27, [2, 64, 768]);  mm_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_205: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_200, [2, 64, 12, 64]);  view_200 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_102: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_205, [0, 2, 1, 3]);  view_205 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        expand_38: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_102, [2, 12, 64, 64]);  permute_102 = None
        clone_65: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_38, memory_format = torch.contiguous_format);  expand_38 = None
        view_208: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_65, [24, 64, 64]);  clone_65 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        view_201: "f32[128, 768]" = torch.ops.aten.reshape.default(add_84, [128, 768])
        permute_100: "f32[768, 768]" = torch.ops.aten.permute.default(arg133_1, [1, 0]);  arg133_1 = None
        mm_28: "f32[128, 768]" = torch.ops.aten.mm.default(view_201, permute_100);  view_201 = permute_100 = None
        view_202: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_28, [2, 64, 768]);  mm_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_206: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_202, [2, 64, 12, 64]);  view_202 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_103: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_206, [0, 2, 1, 3]);  view_206 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_105: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_103, [0, 1, 3, 2])
        expand_39: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_105, [2, 12, 64, 64]);  permute_105 = None
        clone_66: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_39, memory_format = torch.contiguous_format);  expand_39 = None
        view_209: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_66, [24, 64, 64]);  clone_66 = None
        bmm_18: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_208, view_209);  view_208 = view_209 = None
        view_210: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_18, [2, 12, 64, 64]);  bmm_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        full_default_12: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_11: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_114, view_210, full_default_12);  slice_114 = view_210 = full_default_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_85: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_11, where_1);  where_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_9: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_85, [-1], True)
        sub_29: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_85, amax_9);  add_85 = amax_9 = None
        exp_9: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_29);  sub_29 = None
        sum_10: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_9, [-1], True)
        div_9: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_9, sum_10);  exp_9 = sum_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_40: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_9, [2, 12, 64, 64]);  div_9 = None
        view_211: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(expand_40, [24, 64, 64]);  expand_40 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        view_203: "f32[128, 768]" = torch.ops.aten.reshape.default(add_84, [128, 768]);  add_84 = None
        permute_101: "f32[768, 768]" = torch.ops.aten.permute.default(arg134_1, [1, 0]);  arg134_1 = None
        mm_29: "f32[128, 768]" = torch.ops.aten.mm.default(view_203, permute_101);  view_203 = permute_101 = None
        view_204: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_29, [2, 64, 768]);  mm_29 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_207: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_204, [2, 64, 12, 64]);  view_204 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_104: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_207, [0, 2, 1, 3]);  view_207 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_41: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_104, [2, 12, 64, 64])
        clone_68: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_41, memory_format = torch.contiguous_format);  expand_41 = None
        view_212: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_68, [24, 64, 64]);  clone_68 = None
        bmm_19: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_211, view_212);  view_211 = view_212 = None
        view_213: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_19, [2, 12, 64, 64]);  bmm_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_106: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_213, [0, 2, 1, 3]);  view_213 = None
        clone_69: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_106, memory_format = torch.contiguous_format);  permute_106 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_214: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(clone_69, [2, 64, 768]);  clone_69 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_215: "f32[128, 768]" = torch.ops.aten.reshape.default(view_214, [128, 768]);  view_214 = None
        permute_107: "f32[768, 768]" = torch.ops.aten.permute.default(arg136_1, [1, 0]);  arg136_1 = None
        
        # No stacktrace found for following nodes
        mm_default_8: "f32[128, 768]" = torch.ops.aten.mm.default(view_215, permute_107);  view_215 = permute_107 = None
        add_tensor_8: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_8, arg137_1);  mm_default_8 = arg137_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_216: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_8, [2, 64, 768]);  add_tensor_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_86: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_216, add_82);  view_216 = add_82 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_19 = torch.ops.aten.var_mean.correction(add_86, [2], correction = 0, keepdim = True)
        getitem_38: "f32[2, 64, 1]" = var_mean_19[0]
        getitem_39: "f32[2, 64, 1]" = var_mean_19[1];  var_mean_19 = None
        sub_30: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_86, getitem_39);  getitem_39 = None
        add_87: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_38, 1e-05);  getitem_38 = None
        rsqrt_19: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_87);  add_87 = None
        mul_75: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_30, rsqrt_19);  sub_30 = rsqrt_19 = None
        mul_76: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_75, arg138_1);  mul_75 = arg138_1 = None
        add_88: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_76, arg139_1);  mul_76 = arg139_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_217: "f32[128, 768]" = torch.ops.aten.reshape.default(add_88, [128, 768]);  add_88 = None
        permute_108: "f32[768, 3072]" = torch.ops.aten.permute.default(arg140_1, [1, 0]);  arg140_1 = None
        
        # No stacktrace found for following nodes
        mm_default_7: "f32[128, 3072]" = torch.ops.aten.mm.default(view_217, permute_108);  view_217 = permute_108 = None
        add_tensor_7: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_7, arg141_1);  mm_default_7 = arg141_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_218: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_7, [2, 64, 3072]);  add_tensor_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_77: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_218, 0.5)
        pow_10: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_218, 3.0)
        mul_78: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_10, 0.044715);  pow_10 = None
        add_89: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_218, mul_78);  view_218 = mul_78 = None
        mul_79: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_89, 0.7978845608028654);  add_89 = None
        tanh_9: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_79);  mul_79 = None
        add_90: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_9, 1.0);  tanh_9 = None
        mul_80: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_77, add_90);  mul_77 = add_90 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_219: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_80, [128, 3072]);  mul_80 = None
        permute_109: "f32[3072, 768]" = torch.ops.aten.permute.default(arg142_1, [1, 0]);  arg142_1 = None
        
        # No stacktrace found for following nodes
        mm_default_6: "f32[128, 768]" = torch.ops.aten.mm.default(view_219, permute_109);  view_219 = permute_109 = None
        add_tensor_6: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_6, arg143_1);  mm_default_6 = arg143_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_220: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_6, [2, 64, 768]);  add_tensor_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_91: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_86, view_220);  add_86 = view_220 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_20 = torch.ops.aten.var_mean.correction(add_91, [2], correction = 0, keepdim = True)
        getitem_40: "f32[2, 64, 1]" = var_mean_20[0]
        getitem_41: "f32[2, 64, 1]" = var_mean_20[1];  var_mean_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant10: "f32[]" = self._tensor_constant10;  _tensor_constant10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_123: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg149_1, 2, 0, 64);  arg149_1 = None
        slice_124: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_123, 3, 0, 64);  slice_123 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        sub_31: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_91, getitem_41);  getitem_41 = None
        add_92: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_40, 1e-05);  getitem_40 = None
        rsqrt_20: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_92);  add_92 = None
        mul_81: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_31, rsqrt_20);  sub_31 = rsqrt_20 = None
        mul_82: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_81, arg144_1);  mul_81 = arg144_1 = None
        add_93: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_82, arg145_1);  mul_82 = arg145_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        view_221: "f32[128, 768]" = torch.ops.aten.reshape.default(add_93, [128, 768])
        permute_110: "f32[768, 768]" = torch.ops.aten.permute.default(arg146_1, [1, 0]);  arg146_1 = None
        mm_30: "f32[128, 768]" = torch.ops.aten.mm.default(view_221, permute_110);  view_221 = permute_110 = None
        view_222: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_30, [2, 64, 768]);  mm_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_227: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_222, [2, 64, 12, 64]);  view_222 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_113: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_227, [0, 2, 1, 3]);  view_227 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        expand_42: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_113, [2, 12, 64, 64]);  permute_113 = None
        clone_72: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_42, memory_format = torch.contiguous_format);  expand_42 = None
        view_230: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_72, [24, 64, 64]);  clone_72 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        view_223: "f32[128, 768]" = torch.ops.aten.reshape.default(add_93, [128, 768])
        permute_111: "f32[768, 768]" = torch.ops.aten.permute.default(arg147_1, [1, 0]);  arg147_1 = None
        mm_31: "f32[128, 768]" = torch.ops.aten.mm.default(view_223, permute_111);  view_223 = permute_111 = None
        view_224: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_31, [2, 64, 768]);  mm_31 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_228: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_224, [2, 64, 12, 64]);  view_224 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_114: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_228, [0, 2, 1, 3]);  view_228 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_116: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_114, [0, 1, 3, 2])
        expand_43: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_116, [2, 12, 64, 64]);  permute_116 = None
        clone_73: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_43, memory_format = torch.contiguous_format);  expand_43 = None
        view_231: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_73, [24, 64, 64]);  clone_73 = None
        bmm_20: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_230, view_231);  view_230 = view_231 = None
        view_232: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_20, [2, 12, 64, 64]);  bmm_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        full_default_13: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_12: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_124, view_232, full_default_13);  slice_124 = view_232 = full_default_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_94: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_12, where_1);  where_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_10: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_94, [-1], True)
        sub_32: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_94, amax_10);  add_94 = amax_10 = None
        exp_10: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_32);  sub_32 = None
        sum_11: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_10, [-1], True)
        div_10: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_10, sum_11);  exp_10 = sum_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_44: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_10, [2, 12, 64, 64]);  div_10 = None
        view_233: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(expand_44, [24, 64, 64]);  expand_44 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        view_225: "f32[128, 768]" = torch.ops.aten.reshape.default(add_93, [128, 768]);  add_93 = None
        permute_112: "f32[768, 768]" = torch.ops.aten.permute.default(arg148_1, [1, 0]);  arg148_1 = None
        mm_32: "f32[128, 768]" = torch.ops.aten.mm.default(view_225, permute_112);  view_225 = permute_112 = None
        view_226: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_32, [2, 64, 768]);  mm_32 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_229: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_226, [2, 64, 12, 64]);  view_226 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_115: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_229, [0, 2, 1, 3]);  view_229 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_45: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_115, [2, 12, 64, 64])
        clone_75: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_45, memory_format = torch.contiguous_format);  expand_45 = None
        view_234: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_75, [24, 64, 64]);  clone_75 = None
        bmm_21: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_233, view_234);  view_233 = view_234 = None
        view_235: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_21, [2, 12, 64, 64]);  bmm_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_117: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_235, [0, 2, 1, 3]);  view_235 = None
        clone_76: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_117, memory_format = torch.contiguous_format);  permute_117 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_236: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(clone_76, [2, 64, 768]);  clone_76 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_237: "f32[128, 768]" = torch.ops.aten.reshape.default(view_236, [128, 768]);  view_236 = None
        permute_118: "f32[768, 768]" = torch.ops.aten.permute.default(arg150_1, [1, 0]);  arg150_1 = None
        
        # No stacktrace found for following nodes
        mm_default_5: "f32[128, 768]" = torch.ops.aten.mm.default(view_237, permute_118);  view_237 = permute_118 = None
        add_tensor_5: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_5, arg151_1);  mm_default_5 = arg151_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_238: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_5, [2, 64, 768]);  add_tensor_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_95: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_238, add_91);  view_238 = add_91 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_21 = torch.ops.aten.var_mean.correction(add_95, [2], correction = 0, keepdim = True)
        getitem_42: "f32[2, 64, 1]" = var_mean_21[0]
        getitem_43: "f32[2, 64, 1]" = var_mean_21[1];  var_mean_21 = None
        sub_33: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_95, getitem_43);  getitem_43 = None
        add_96: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_42, 1e-05);  getitem_42 = None
        rsqrt_21: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_96);  add_96 = None
        mul_83: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_33, rsqrt_21);  sub_33 = rsqrt_21 = None
        mul_84: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_83, arg152_1);  mul_83 = arg152_1 = None
        add_97: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_84, arg153_1);  mul_84 = arg153_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_239: "f32[128, 768]" = torch.ops.aten.reshape.default(add_97, [128, 768]);  add_97 = None
        permute_119: "f32[768, 3072]" = torch.ops.aten.permute.default(arg154_1, [1, 0]);  arg154_1 = None
        
        # No stacktrace found for following nodes
        mm_default_4: "f32[128, 3072]" = torch.ops.aten.mm.default(view_239, permute_119);  view_239 = permute_119 = None
        add_tensor_4: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_4, arg155_1);  mm_default_4 = arg155_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_240: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_4, [2, 64, 3072]);  add_tensor_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_85: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_240, 0.5)
        pow_11: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_240, 3.0)
        mul_86: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_11, 0.044715);  pow_11 = None
        add_98: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_240, mul_86);  view_240 = mul_86 = None
        mul_87: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_98, 0.7978845608028654);  add_98 = None
        tanh_10: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_87);  mul_87 = None
        add_99: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_10, 1.0);  tanh_10 = None
        mul_88: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_85, add_99);  mul_85 = add_99 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_241: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_88, [128, 3072]);  mul_88 = None
        permute_120: "f32[3072, 768]" = torch.ops.aten.permute.default(arg156_1, [1, 0]);  arg156_1 = None
        
        # No stacktrace found for following nodes
        mm_default_3: "f32[128, 768]" = torch.ops.aten.mm.default(view_241, permute_120);  view_241 = permute_120 = None
        add_tensor_3: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_3, arg157_1);  mm_default_3 = arg157_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_242: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_3, [2, 64, 768]);  add_tensor_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_100: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_95, view_242);  add_95 = view_242 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        var_mean_22 = torch.ops.aten.var_mean.correction(add_100, [2], correction = 0, keepdim = True)
        getitem_44: "f32[2, 64, 1]" = var_mean_22[0]
        getitem_45: "f32[2, 64, 1]" = var_mean_22[1];  var_mean_22 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        _tensor_constant11: "f32[]" = self._tensor_constant11;  _tensor_constant11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:210 in _attn, code: causal_mask = self.bias[:, :, key_length - query_length : key_length, :key_length]
        slice_133: "b8[1, 1, 64, 2048]" = torch.ops.aten.slice.Tensor(arg163_1, 2, 0, 64);  arg163_1 = None
        slice_134: "b8[1, 1, 64, 64]" = torch.ops.aten.slice.Tensor(slice_133, 3, 0, 64);  slice_133 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:456 in forward, code: hidden_states = self.ln_1(hidden_states)
        sub_34: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_100, getitem_45);  getitem_45 = None
        add_101: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_44, 1e-05);  getitem_44 = None
        rsqrt_22: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_101);  add_101 = None
        mul_89: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_34, rsqrt_22);  sub_34 = rsqrt_22 = None
        mul_90: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_89, arg158_1);  mul_89 = arg158_1 = None
        add_102: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_90, arg159_1);  mul_90 = arg159_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:243 in forward, code: query = self.q_proj(hidden_states)
        view_243: "f32[128, 768]" = torch.ops.aten.reshape.default(add_102, [128, 768])
        permute_121: "f32[768, 768]" = torch.ops.aten.permute.default(arg160_1, [1, 0]);  arg160_1 = None
        mm_33: "f32[128, 768]" = torch.ops.aten.mm.default(view_243, permute_121);  view_243 = permute_121 = None
        view_244: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_33, [2, 64, 768]);  mm_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_249: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_244, [2, 64, 12, 64]);  view_244 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_124: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_249, [0, 2, 1, 3]);  view_249 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        expand_46: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_124, [2, 12, 64, 64]);  permute_124 = None
        clone_79: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_46, memory_format = torch.contiguous_format);  expand_46 = None
        view_252: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_79, [24, 64, 64]);  clone_79 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:244 in forward, code: key = self.k_proj(hidden_states)
        view_245: "f32[128, 768]" = torch.ops.aten.reshape.default(add_102, [128, 768])
        permute_122: "f32[768, 768]" = torch.ops.aten.permute.default(arg161_1, [1, 0]);  arg161_1 = None
        mm_34: "f32[128, 768]" = torch.ops.aten.mm.default(view_245, permute_122);  view_245 = permute_122 = None
        view_246: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_34, [2, 64, 768]);  mm_34 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_250: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_246, [2, 64, 12, 64]);  view_246 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_125: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_250, [0, 2, 1, 3]);  view_250 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:206 in _attn, code: attn_weights = torch.matmul(query, key.transpose(-1, -2))
        permute_127: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(permute_125, [0, 1, 3, 2])
        expand_47: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_127, [2, 12, 64, 64]);  permute_127 = None
        clone_80: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_47, memory_format = torch.contiguous_format);  expand_47 = None
        view_253: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_80, [24, 64, 64]);  clone_80 = None
        bmm_22: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_252, view_253);  view_252 = view_253 = None
        view_254: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_22, [2, 12, 64, 64]);  bmm_22 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:214 in _attn, code: mask_value = torch.tensor(mask_value, dtype=attn_weights.dtype, device=attn_weights.device)
        full_default_14: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:215 in _attn, code: attn_weights = torch.where(causal_mask, attn_weights, mask_value)
        where_13: "f32[2, 12, 64, 64]" = torch.ops.aten.where.self(slice_134, view_254, full_default_14);  slice_134 = view_254 = full_default_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:219 in _attn, code: attn_weights = attn_weights + causal_mask
        add_103: "f32[2, 12, 64, 64]" = torch.ops.aten.add.Tensor(where_13, where_1);  where_13 = where_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:221 in _attn, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_11: "f32[2, 12, 64, 1]" = torch.ops.aten.amax.default(add_103, [-1], True)
        sub_35: "f32[2, 12, 64, 64]" = torch.ops.aten.sub.Tensor(add_103, amax_11);  add_103 = amax_11 = None
        exp_11: "f32[2, 12, 64, 64]" = torch.ops.aten.exp.default(sub_35);  sub_35 = None
        sum_12: "f32[2, 12, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_11, [-1], True)
        div_11: "f32[2, 12, 64, 64]" = torch.ops.aten.div.Tensor(exp_11, sum_12);  exp_11 = sum_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_48: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(div_11, [2, 12, 64, 64]);  div_11 = None
        view_255: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(expand_48, [24, 64, 64]);  expand_48 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:245 in forward, code: value = self.v_proj(hidden_states)
        view_247: "f32[128, 768]" = torch.ops.aten.reshape.default(add_102, [128, 768]);  add_102 = None
        permute_123: "f32[768, 768]" = torch.ops.aten.permute.default(arg162_1, [1, 0]);  arg162_1 = None
        mm_35: "f32[128, 768]" = torch.ops.aten.mm.default(view_247, permute_123);  view_247 = permute_123 = None
        view_248: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(mm_35, [2, 64, 768]);  mm_35 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:190 in _split_heads, code: tensor = tensor.view(new_shape)
        view_251: "f32[2, 64, 12, 64]" = torch.ops.aten.reshape.default(view_248, [2, 64, 12, 64]);  view_248 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:191 in _split_heads, code: return tensor.permute(0, 2, 1, 3)  # (batch, head, seq_length, head_features)
        permute_126: "f32[2, 12, 64, 64]" = torch.ops.aten.permute.default(view_251, [0, 2, 1, 3]);  view_251 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:229 in _attn, code: attn_output = torch.matmul(attn_weights, value)
        expand_49: "f32[2, 12, 64, 64]" = torch.ops.aten.expand.default(permute_126, [2, 12, 64, 64])
        clone_82: "f32[2, 12, 64, 64]" = torch.ops.aten.clone.default(expand_49, memory_format = torch.contiguous_format);  expand_49 = None
        view_256: "f32[24, 64, 64]" = torch.ops.aten.reshape.default(clone_82, [24, 64, 64]);  clone_82 = None
        bmm_23: "f32[24, 64, 64]" = torch.ops.aten.bmm.default(view_255, view_256);  view_255 = view_256 = None
        view_257: "f32[2, 12, 64, 64]" = torch.ops.aten.reshape.default(bmm_23, [2, 12, 64, 64]);  bmm_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:197 in _merge_heads, code: tensor = tensor.permute(0, 2, 1, 3).contiguous()
        permute_128: "f32[2, 64, 12, 64]" = torch.ops.aten.permute.default(view_257, [0, 2, 1, 3]);  view_257 = None
        clone_83: "f32[2, 64, 12, 64]" = torch.ops.aten.clone.default(permute_128, memory_format = torch.contiguous_format);  permute_128 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:199 in _merge_heads, code: return tensor.view(new_shape)
        view_258: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(clone_83, [2, 64, 768]);  clone_83 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_259: "f32[128, 768]" = torch.ops.aten.reshape.default(view_258, [128, 768]);  view_258 = None
        permute_129: "f32[768, 768]" = torch.ops.aten.permute.default(arg164_1, [1, 0]);  arg164_1 = None
        
        # No stacktrace found for following nodes
        mm_default_2: "f32[128, 768]" = torch.ops.aten.mm.default(view_259, permute_129);  view_259 = permute_129 = None
        add_tensor_2: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default_2, arg165_1);  mm_default_2 = arg165_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:258 in forward, code: attn_output = self.out_proj(attn_output)
        view_260: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor_2, [2, 64, 768]);  add_tensor_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:469 in forward, code: hidden_states = attn_output + residual
        add_104: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(view_260, add_100);  view_260 = add_100 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:472 in forward, code: hidden_states = self.ln_2(hidden_states)
        var_mean_23 = torch.ops.aten.var_mean.correction(add_104, [2], correction = 0, keepdim = True)
        getitem_46: "f32[2, 64, 1]" = var_mean_23[0]
        getitem_47: "f32[2, 64, 1]" = var_mean_23[1];  var_mean_23 = None
        sub_36: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_104, getitem_47);  getitem_47 = None
        add_105: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_46, 1e-05);  getitem_46 = None
        rsqrt_23: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_105);  add_105 = None
        mul_91: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_36, rsqrt_23);  sub_36 = rsqrt_23 = None
        mul_92: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_91, arg166_1);  mul_91 = arg166_1 = None
        add_106: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_92, arg167_1);  mul_92 = arg167_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_261: "f32[128, 768]" = torch.ops.aten.reshape.default(add_106, [128, 768]);  add_106 = None
        permute_130: "f32[768, 3072]" = torch.ops.aten.permute.default(arg168_1, [1, 0]);  arg168_1 = None
        
        # No stacktrace found for following nodes
        mm_default_1: "f32[128, 3072]" = torch.ops.aten.mm.default(view_261, permute_130);  view_261 = permute_130 = None
        add_tensor_1: "f32[128, 3072]" = torch.ops.aten.add.Tensor(mm_default_1, arg169_1);  mm_default_1 = arg169_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:428 in forward, code: hidden_states = self.c_fc(hidden_states)
        view_262: "f32[2, 64, 3072]" = torch.ops.aten.reshape.default(add_tensor_1, [2, 64, 3072]);  add_tensor_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/activations.py:47 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul_93: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(view_262, 0.5)
        pow_12: "f32[2, 64, 3072]" = torch.ops.aten.pow.Tensor_Scalar(view_262, 3.0)
        mul_94: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(pow_12, 0.044715);  pow_12 = None
        add_107: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(view_262, mul_94);  view_262 = mul_94 = None
        mul_95: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(add_107, 0.7978845608028654);  add_107 = None
        tanh_11: "f32[2, 64, 3072]" = torch.ops.aten.tanh.default(mul_95);  mul_95 = None
        add_108: "f32[2, 64, 3072]" = torch.ops.aten.add.Tensor(tanh_11, 1.0);  tanh_11 = None
        mul_96: "f32[2, 64, 3072]" = torch.ops.aten.mul.Tensor(mul_93, add_108);  mul_93 = add_108 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_263: "f32[128, 3072]" = torch.ops.aten.reshape.default(mul_96, [128, 3072]);  mul_96 = None
        permute_131: "f32[3072, 768]" = torch.ops.aten.permute.default(arg170_1, [1, 0]);  arg170_1 = None
        
        # No stacktrace found for following nodes
        mm_default: "f32[128, 768]" = torch.ops.aten.mm.default(view_263, permute_131);  view_263 = permute_131 = None
        add_tensor: "f32[128, 768]" = torch.ops.aten.add.Tensor(mm_default, arg171_1);  mm_default = arg171_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:430 in forward, code: hidden_states = self.c_proj(hidden_states)
        view_264: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_tensor, [2, 64, 768]);  add_tensor = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:475 in forward, code: hidden_states = residual + feed_forward_hidden_states
        add_109: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(add_104, view_264);  add_104 = view_264 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:656 in forward, code: hidden_states = self.ln_f(hidden_states)
        var_mean_24 = torch.ops.aten.var_mean.correction(add_109, [2], correction = 0, keepdim = True)
        getitem_48: "f32[2, 64, 1]" = var_mean_24[0]
        getitem_49: "f32[2, 64, 1]" = var_mean_24[1];  var_mean_24 = None
        sub_37: "f32[2, 64, 768]" = torch.ops.aten.sub.Tensor(add_109, getitem_49);  add_109 = getitem_49 = None
        add_110: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_48, 1e-05);  getitem_48 = None
        rsqrt_24: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_110);  add_110 = None
        mul_97: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(sub_37, rsqrt_24);  sub_37 = rsqrt_24 = None
        mul_98: "f32[2, 64, 768]" = torch.ops.aten.mul.Tensor(mul_97, arg172_1);  mul_97 = arg172_1 = None
        add_111: "f32[2, 64, 768]" = torch.ops.aten.add.Tensor(mul_98, arg173_1);  mul_98 = arg173_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/gpt_neo/modeling_gpt_neo.py:658 in forward, code: hidden_states = hidden_states.view(output_shape)
        view_265: "f32[2, 64, 768]" = torch.ops.aten.reshape.default(add_111, [-1, 64, 768]);  add_111 = None
        return (view_265, permute_4, permute_5, permute_15, permute_16, permute_26, permute_27, permute_37, permute_38, permute_48, permute_49, permute_59, permute_60, permute_70, permute_71, permute_81, permute_82, permute_92, permute_93, permute_103, permute_104, permute_114, permute_115, permute_125, permute_126)
        

# ===== run_2025_10_19_03_43_12_574129-pid_19/torchinductor/model__0_inference_0.0/ir_post_fusion.txt =====
op0_op1_op3: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op0_op1_op3.writes = 
    [   MemoryDep('buf0', c0, {c0: 128}),
        MemoryDep('buf1', c0, {c0: 128}),
        MemoryDep('buf3', c0, {c0: 98304})]
op0_op1_op3.unmet_dependencies = []
op0_op1_op3.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 128}),
        MemoryDep('arg1_1', c1 + 768*tmp0, {c0: 128, c1: 768}),
        MemoryDep('arg3_1', c1, {c0: 2, c1: 49152}),
        MemoryDep('arg4_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg5_1', c1, {c0: 128, c1: 768})]
op0_op1_op3.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf0.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf1.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf3.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op0_op1_op3.snodes[0] =
op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 128})]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 128}),
        MemoryDep('arg1_1', c1 + 768*tmp0, {c0: 128, c1: 768}),
        MemoryDep('arg3_1', c1, {c0: 2, c1: 49152})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf0.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (128, 768)
op0.sizes = ([2, 64], [768])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[50257, 768], stride=[768, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.float32, size=[2048, 768], stride=[768, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op0_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 768}
    index0 = 64*p0 + p1
    index1 = 768*indirect0 + p2
    index2 = p1
    index3 = 2048
    index4 = 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg3_1', get_index_4)
        add = ops.add(load_1, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf0', get_index_5, getitem)
        return store_reduction
op0_op1_op3.snodes[1] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 128})]
op1.unmet_dependencies = []
op1.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 128}),
        MemoryDep('arg1_1', c1 + 768*tmp0, {c0: 128, c1: 768}),
        MemoryDep('arg3_1', c1, {c0: 2, c1: 49152})]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf1.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (128, 768)
op1.sizes = ([2, 64], [768])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[50257, 768], stride=[768, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.float32, size=[2048, 768], stride=[768, 1])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op1_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 768}
    index0 = 64*p0 + p1
    index1 = 768*indirect0 + p2
    index2 = p1
    index3 = 2048
    index4 = 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg3_1', get_index_4)
        add = ops.add(load_1, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf1', get_index_5, getitem_1)
        return store_reduction
op0_op1_op3.snodes[2] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 98304})]
op3.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 128}), MemoryDep('buf1', c0, {c0: 128})]
op3.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 128}),
        MemoryDep('arg1_1', c1 + 768*tmp0, {c0: 128, c1: 768}),
        MemoryDep('arg3_1', c1, {c0: 2, c1: 49152}),
        MemoryDep('arg4_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg5_1', c1, {c0: 128, c1: 768})]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf3.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (98304, 1)
op3.sizes = ([2, 64, 768], [])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[50257, 768], stride=[768, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.float32, size=[2048, 768], stride=[768, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg4_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg5_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op3_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 768}
    index0 = 64*p0 + p1
    index1 = 768*indirect0 + p2
    index2 = p1
    index3 = 2048
    index4 = 768*p1 + p2
    index5 = p2
    index6 = 49152*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg3_1', get_index_4)
        add = ops.add(load_1, load_2)
        get_index_5 = self.get_index('index0')
        load_3 = ops.load('buf0', get_index_5)
        sub = ops.sub(add, load_3)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_6)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_7 = self.get_index('index5')
        load_5 = ops.load('arg4_1', get_index_7)
        mul_1 = ops.mul(mul, load_5)
        get_index_8 = self.get_index('index5')
        load_6 = ops.load('arg5_1', get_index_8)
        add_2 = ops.add(mul_1, load_6)
        get_index_9 = self.get_index('index6')
        store = ops.store('buf3', get_index_9, add_2, None)
        return store


op4: ExternKernelSchedulerNode(ExternKernelOut)
op4.writes = [StarDep(name='buf4', mode=None)]
op4.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op4.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op4.outputs = [
    buf4: ExternKernelOut
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf4.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op4.node.kernel = extern_kernels.mm


op5: ExternKernelSchedulerNode(ExternKernelOut)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op5.met_dependencies = [StarDep(name='arg7_1', mode=None)]
op5.outputs = [
    buf5: ExternKernelOut
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf5.users = [
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op5.node.kernel = extern_kernels.mm


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 98304})]
op6.unmet_dependencies = [   MemoryDep('buf4', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op6.met_dependencies = []
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (98304, 1)
op6.sizes = ([2, 12, 64, 64], [])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op6_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf6', get_index_1, load, None)
        return store


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 98304})]
op7.unmet_dependencies = [MemoryDep('buf5', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op7.met_dependencies = []
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (98304, 1)
op7.sizes = ([2, 768, 64], [])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op7_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf7', get_index_1, load, None)
        return store


op8: ExternKernelSchedulerNode(ExternKernelOut)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf6', mode=None), StarDep(name='buf7', mode=None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ExternKernelOut
    buf8.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False),
    ]
]
op8.node.kernel = extern_kernels.bmm


op9_op10_op12: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op9_op10_op12.writes = 
    [   MemoryDep('buf10', c0, {c0: 1536}),
        MemoryDep('buf12', c0, {c0: 98304}),
        MemoryDep('buf9', c0, {c0: 1536})]
op9_op10_op12.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 98304})]
op9_op10_op12.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg9_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op9_op10_op12.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf9.users = [
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf10.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op9_op10_op12.snodes[0] =
op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 1536})]
op9.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 98304})]
op9.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg9_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf9.users = [
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
]
op9.group.device = cuda:0
op9.group.iteration = (1536, 64)
op9.sizes = ([2, 12, 64], [64])
arg9_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf9_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op9_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg9_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf8', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf9', get_index_9, reduction)
        return store_reduction
op9_op10_op12.snodes[1] =
op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 1536})]
op10.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 98304}), MemoryDep('buf9', c0, {c0: 1536})]
op10.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg9_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf10.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (1536, 64)
op10.sizes = ([2, 12, 64], [64])
arg9_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf9_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op10_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg9_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf8', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf9', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf10', get_index_10, reduction)
        return store_reduction
op9_op10_op12.snodes[2] =
op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 98304})]
op12.unmet_dependencies = 
    [   MemoryDep('buf10', c0, {c0: 1536}),
        MemoryDep('buf8', c0, {c0: 98304}),
        MemoryDep('buf9', c0, {c0: 1536})]
op12.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg9_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (98304, 1)
op12.sizes = ([2, 12, 64, 64], [])
arg9_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf9_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op12_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg9_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf8', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf9', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf10', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf12', get_index_11, truediv, None)
        return store


op11: ExternKernelSchedulerNode(ExternKernelOut)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op11.met_dependencies = [StarDep(name='arg8_1', mode=None)]
op11.outputs = [
    buf11: ExternKernelOut
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf11.users = [
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op11.node.kernel = extern_kernels.mm


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 98304})]
op13.unmet_dependencies = [   MemoryDep('buf11', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op13.met_dependencies = []
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (98304, 1)
op13.sizes = ([2, 12, 64, 64], [])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf13_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op13_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf13', get_index_1, load, None)
        return store


op14: ExternKernelSchedulerNode(ExternKernelOut)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf12', mode=None), StarDep(name='buf13', mode=None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ExternKernelOut
    buf14.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.node.kernel = extern_kernels.bmm


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 98304})]
op15.unmet_dependencies = [   MemoryDep('buf14', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (98304, 1)
op15.sizes = ([2, 64, 12, 64], [])
buf14_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op15_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf15', get_index_1, load, None)
        return store


op16: ExternKernelSchedulerNode(ExternKernelOut)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op16.met_dependencies = [StarDep(name='arg10_1', mode=None)]
op16.outputs = [
    buf16: ExternKernelOut
    buf16.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False)]
]
op16.node.kernel = extern_kernels.mm


op17_op18_op19_op21: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op17_op18_op19_op21.writes = 
    [   MemoryDep('buf17', c0, {c0: 98304}),
        MemoryDep('buf18', c0, {c0: 128}),
        MemoryDep('buf19', c0, {c0: 128}),
        MemoryDep('buf21', c0, {c0: 98304})]
op17_op18_op19_op21.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 98304})]
op17_op18_op19_op21.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 128}),
        MemoryDep('arg11_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg12_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg13_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg1_1', c1 + 768*tmp0, {c0: 128, c1: 768}),
        MemoryDep('arg3_1', c1, {c0: 2, c1: 49152})]
op17_op18_op19_op21.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op17_op18_op19_op21.snodes[0] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 98304})]
op17.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 98304})]
op17.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 128}),
        MemoryDep('arg11_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg1_1', c1 + 768*tmp0, {c0: 128, c1: 768}),
        MemoryDep('arg3_1', c1, {c0: 2, c1: 49152})]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
]
op17.group.device = cuda:0
op17.group.iteration = (98304, 1)
op17.sizes = ([2, 64, 768], [])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg11_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[50257, 768], stride=[768, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.float32, size=[2048, 768], stride=[768, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op17_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 768}
    index0 = 49152*p0 + 768*p1 + p2
    index1 = p2
    index2 = 64*p0 + p1
    index3 = 768*indirect0 + p2
    index4 = p1
    index5 = 2048
    index6 = 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg11_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg0_1', get_index_2)
        set_indirect0 = self.set_indirect0(load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg1_1', get_index_3)
        get_index_4 = self.get_index('index4')
        get_index_5 = self.get_index('index5')
        check_bounds = ops.check_bounds(get_index_4, get_index_5, False, False)
        get_index_6 = self.get_index('index6')
        load_4 = ops.load('arg3_1', get_index_6)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(add, add_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf17', get_index_7, add_2, None)
        return store
op17_op18_op19_op21.snodes[1] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 128})]
op18.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 98304})]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (128, 768)
op18.sizes = ([128], [768])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op18_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf18', get_index_1, getitem)
        return store_reduction
op17_op18_op19_op21.snodes[2] =
op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 128})]
op19.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 98304})]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (128, 768)
op19.sizes = ([128], [768])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op19_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf19', get_index_1, getitem_1)
        return store_reduction
op17_op18_op19_op21.snodes[3] =
op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 98304})]
op21.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 98304}),
        MemoryDep('buf18', c0, {c0: 128}),
        MemoryDep('buf19', c0, {c0: 128})]
op21.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg13_1', c1, {c0: 128, c1: 768})]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (98304, 1)
op21.sizes = ([128, 768], [])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg12_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg13_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op21_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf18', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf19', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg12_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg13_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf21', get_index_5, add_1, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg14_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.node.kernel = extern_kernels.mm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 393216})]
op23.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 393216})]
op23.met_dependencies = [MemoryDep('arg15_1', c1, {c0: 128, c1: 3072})]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (393216, 1)
op23.sizes = ([128, 3072], [])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg15_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op23_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg15_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf22', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg15_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf22', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg15_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf23', get_index_6, mul_5, None)
        return store


op24: ExternKernelSchedulerNode(ExternKernelOut)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelOut
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
]
op24.node.kernel = extern_kernels.mm


op25_op26_op28: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op25_op26_op28.writes = 
    [   MemoryDep('buf25', c0, {c0: 128}),
        MemoryDep('buf26', c0, {c0: 128}),
        MemoryDep('buf28', c0, {c0: 98304})]
op25_op26_op28.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 98304}), MemoryDep('buf24', c0, {c0: 98304})]
op25_op26_op28.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg18_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg19_1', c1, {c0: 128, c1: 768})]
op25_op26_op28.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf25.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf26.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf28.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
]
op25_op26_op28.snodes[0] =
op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 128})]
op25.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 98304}), MemoryDep('buf24', c0, {c0: 98304})]
op25.met_dependencies = [MemoryDep('arg17_1', c1, {c0: 128, c1: 768})]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf25.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (128, 768)
op25.sizes = ([128], [768])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg17_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op25_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg17_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf25', get_index_3, getitem)
        return store_reduction
op25_op26_op28.snodes[1] =
op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 128})]
op26.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 98304}), MemoryDep('buf24', c0, {c0: 98304})]
op26.met_dependencies = [MemoryDep('arg17_1', c1, {c0: 128, c1: 768})]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf26.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (128, 768)
op26.sizes = ([128], [768])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg17_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op26_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg17_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf26', get_index_3, getitem_1)
        return store_reduction
op25_op26_op28.snodes[2] =
op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 98304})]
op28.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 98304}),
        MemoryDep('buf24', c0, {c0: 98304}),
        MemoryDep('buf25', c0, {c0: 128}),
        MemoryDep('buf26', c0, {c0: 128})]
op28.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg18_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg19_1', c1, {c0: 128, c1: 768})]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf28.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
]
op28.group.device = cuda:0
op28.group.iteration = (98304, 1)
op28.sizes = ([128, 768], [])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg17_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg18_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg19_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf28_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op28_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg17_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf25', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf26', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg18_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg19_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf28', get_index_7, add_3, None)
        return store


op29: ExternKernelSchedulerNode(ExternKernelOut)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = [StarDep(name='arg20_1', mode=None)]
op29.outputs = [
    buf29: ExternKernelOut
    buf29.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf29.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op29.node.kernel = extern_kernels.mm


op30: ExternKernelSchedulerNode(ExternKernelOut)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op30.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelOut
    buf30.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf30.users = [
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op30.node.kernel = extern_kernels.mm


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 98304})]
op31.unmet_dependencies = [   MemoryDep('buf29', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op31.met_dependencies = []
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (98304, 1)
op31.sizes = ([2, 12, 64, 64], [])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op31_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf31', get_index_1, load, None)
        return store


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 98304})]
op32.unmet_dependencies = [MemoryDep('buf30', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op32.met_dependencies = []
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (98304, 1)
op32.sizes = ([2, 768, 64], [])
buf30_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op32_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf32', get_index_1, load, None)
        return store


op33: ExternKernelSchedulerNode(ExternKernelOut)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf31', mode=None), StarDep(name='buf32', mode=None)]
op33.met_dependencies = []
op33.outputs = [
    buf33: ExternKernelOut
    buf33.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf33.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False),
    ]
]
op33.node.kernel = extern_kernels.bmm


op34_op35_op37: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op34_op35_op37.writes = 
    [   MemoryDep('buf34', c0, {c0: 1536}),
        MemoryDep('buf35', c0, {c0: 1536}),
        MemoryDep('buf37', c0, {c0: 98304})]
op34_op35_op37.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 98304})]
op34_op35_op37.met_dependencies = 
    [   MemoryDep('arg23_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op34_op35_op37.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
    ]
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf35.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op34_op35_op37.snodes[0] =
op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 1536})]
op34.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 98304})]
op34.met_dependencies = 
    [   MemoryDep('arg23_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
    ]
]
op34.group.device = cuda:0
op34.group.iteration = (1536, 64)
op34.sizes = ([2, 12, 64], [64])
arg23_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op34_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg23_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf33', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf34', get_index_9, reduction)
        return store_reduction
op34_op35_op37.snodes[1] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 1536})]
op35.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 98304}), MemoryDep('buf34', c0, {c0: 1536})]
op35.met_dependencies = 
    [   MemoryDep('arg23_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf35.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (1536, 64)
op35.sizes = ([2, 12, 64], [64])
arg23_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op35_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg23_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf33', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf34', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf35', get_index_10, reduction)
        return store_reduction
op34_op35_op37.snodes[2] =
op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 98304})]
op37.unmet_dependencies = 
    [   MemoryDep('buf33', c0, {c0: 98304}),
        MemoryDep('buf34', c0, {c0: 1536}),
        MemoryDep('buf35', c0, {c0: 1536})]
op37.met_dependencies = 
    [   MemoryDep('arg23_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (98304, 1)
op37.sizes = ([2, 12, 64, 64], [])
arg23_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf37_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op37_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg23_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf33', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf34', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf35', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf37', get_index_11, truediv, None)
        return store


op36: ExternKernelSchedulerNode(ExternKernelOut)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op36.met_dependencies = [StarDep(name='arg22_1', mode=None)]
op36.outputs = [
    buf36: ExternKernelOut
    buf36.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf36.users = [
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op36.node.kernel = extern_kernels.mm


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 98304})]
op38.unmet_dependencies = [   MemoryDep('buf36', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op38.met_dependencies = []
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (98304, 1)
op38.sizes = ([2, 12, 64, 64], [])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op38_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf38', get_index_1, load, None)
        return store


op39: ExternKernelSchedulerNode(ExternKernelOut)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf37', mode=None), StarDep(name='buf38', mode=None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: ExternKernelOut
    buf39.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf39.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.node.kernel = extern_kernels.bmm


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 98304})]
op40.unmet_dependencies = [   MemoryDep('buf39', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (98304, 1)
op40.sizes = ([2, 64, 12, 64], [])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op40_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf40', get_index_1, load, None)
        return store


op41: ExternKernelSchedulerNode(ExternKernelOut)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = [StarDep(name='arg24_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelOut
    buf41.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
]
op41.node.kernel = extern_kernels.mm


op42_op43_op44_op46: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op42_op43_op44_op46.writes = 
    [   MemoryDep('buf42', c0, {c0: 98304}),
        MemoryDep('buf43', c0, {c0: 128}),
        MemoryDep('buf44', c0, {c0: 128}),
        MemoryDep('buf46', c0, {c0: 98304})]
op42_op43_op44_op46.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 98304}),
        MemoryDep('buf24', c0, {c0: 98304}),
        MemoryDep('buf41', c0, {c0: 98304})]
op42_op43_op44_op46.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg25_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg26_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg27_1', c1, {c0: 128, c1: 768})]
op42_op43_op44_op46.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf43.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf44.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op42_op43_op44_op46.snodes[0] =
op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 98304})]
op42.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 98304}),
        MemoryDep('buf24', c0, {c0: 98304}),
        MemoryDep('buf41', c0, {c0: 98304})]
op42.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg25_1', c1, {c0: 128, c1: 768})]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
]
op42.group.device = cuda:0
op42.group.iteration = (98304, 1)
op42.sizes = ([128, 768], [])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg25_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg17_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op42_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg25_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf17', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf24', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg17_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf42', get_index_5, add_3, None)
        return store
op42_op43_op44_op46.snodes[1] =
op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 128})]
op43.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 98304})]
op43.met_dependencies = []
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf43.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (128, 768)
op43.sizes = ([128], [768])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op43_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf43', get_index_1, getitem)
        return store_reduction
op42_op43_op44_op46.snodes[2] =
op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 128})]
op44.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 98304})]
op44.met_dependencies = []
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf44.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (128, 768)
op44.sizes = ([128], [768])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op44_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf44', get_index_1, getitem_1)
        return store_reduction
op42_op43_op44_op46.snodes[3] =
op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 98304})]
op46.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 98304}),
        MemoryDep('buf43', c0, {c0: 128}),
        MemoryDep('buf44', c0, {c0: 128})]
op46.met_dependencies = 
    [   MemoryDep('arg26_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg27_1', c1, {c0: 128, c1: 768})]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (98304, 1)
op46.sizes = ([128, 768], [])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg26_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg27_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op46_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf43', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf44', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg26_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg27_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf46', get_index_5, add_1, None)
        return store


op47: ExternKernelSchedulerNode(ExternKernelOut)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg28_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelOut
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.node.kernel = extern_kernels.mm


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 393216})]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 393216})]
op48.met_dependencies = [MemoryDep('arg29_1', c1, {c0: 128, c1: 3072})]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (393216, 1)
op48.sizes = ([128, 3072], [])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg29_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op48_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg29_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf47', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg29_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf47', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg29_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf48', get_index_6, mul_5, None)
        return store


op49: ExternKernelSchedulerNode(ExternKernelOut)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = [StarDep(name='arg30_1', mode=None)]
op49.outputs = [
    buf49: ExternKernelOut
    buf49.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf49.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
]
op49.node.kernel = extern_kernels.mm


op50_op51_op53: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op50_op51_op53.writes = 
    [   MemoryDep('buf50', c0, {c0: 128}),
        MemoryDep('buf51', c0, {c0: 128}),
        MemoryDep('buf53', c0, {c0: 98304})]
op50_op51_op53.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 98304}), MemoryDep('buf49', c0, {c0: 98304})]
op50_op51_op53.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg32_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg33_1', c1, {c0: 128, c1: 768})]
op50_op51_op53.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf50.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf51.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf53.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
    ]
]
op50_op51_op53.snodes[0] =
op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 128})]
op50.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 98304}), MemoryDep('buf49', c0, {c0: 98304})]
op50.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 128, c1: 768})]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf50.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (128, 768)
op50.sizes = ([128], [768])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op50_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf50', get_index_3, getitem)
        return store_reduction
op50_op51_op53.snodes[1] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 128})]
op51.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 98304}), MemoryDep('buf49', c0, {c0: 98304})]
op51.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 128, c1: 768})]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf51.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (128, 768)
op51.sizes = ([128], [768])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op51_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf51', get_index_3, getitem_1)
        return store_reduction
op50_op51_op53.snodes[2] =
op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 98304})]
op53.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 98304}),
        MemoryDep('buf49', c0, {c0: 98304}),
        MemoryDep('buf50', c0, {c0: 128}),
        MemoryDep('buf51', c0, {c0: 128})]
op53.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg32_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg33_1', c1, {c0: 128, c1: 768})]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf53.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
    ]
]
op53.group.device = cuda:0
op53.group.iteration = (98304, 1)
op53.sizes = ([128, 768], [])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg32_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg33_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op53_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf50', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf51', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg32_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg33_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf53', get_index_7, add_3, None)
        return store


op54: ExternKernelSchedulerNode(ExternKernelOut)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op54.met_dependencies = [StarDep(name='arg34_1', mode=None)]
op54.outputs = [
    buf54: ExternKernelOut
    buf54.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf54.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op54.node.kernel = extern_kernels.mm


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op55.met_dependencies = [StarDep(name='arg35_1', mode=None)]
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf55.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op55.node.kernel = extern_kernels.mm


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 98304})]
op56.unmet_dependencies = [   MemoryDep('buf54', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op56.met_dependencies = []
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (98304, 1)
op56.sizes = ([2, 12, 64, 64], [])
buf54_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf56_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op56_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf56', get_index_1, load, None)
        return store


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 98304})]
op57.unmet_dependencies = [MemoryDep('buf55', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op57.met_dependencies = []
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf57.users = [NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (98304, 1)
op57.sizes = ([2, 768, 64], [])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op57_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf57', get_index_1, load, None)
        return store


op58: ExternKernelSchedulerNode(ExternKernelOut)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = [StarDep(name='buf56', mode=None), StarDep(name='buf57', mode=None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ExternKernelOut
    buf58.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False),
    ]
]
op58.node.kernel = extern_kernels.bmm


op59_op60_op62: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op59_op60_op62.writes = 
    [   MemoryDep('buf59', c0, {c0: 1536}),
        MemoryDep('buf60', c0, {c0: 1536}),
        MemoryDep('buf62', c0, {c0: 98304})]
op59_op60_op62.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 98304})]
op59_op60_op62.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg37_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op59_op60_op62.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf59.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
    ]
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf60.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op59_op60_op62.snodes[0] =
op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 1536})]
op59.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 98304})]
op59.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg37_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf59.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
    ]
]
op59.group.device = cuda:0
op59.group.iteration = (1536, 64)
op59.sizes = ([2, 12, 64], [64])
arg37_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op59_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg37_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf58', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf59', get_index_9, reduction)
        return store_reduction
op59_op60_op62.snodes[1] =
op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 1536})]
op60.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 98304}), MemoryDep('buf59', c0, {c0: 1536})]
op60.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg37_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf60.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (1536, 64)
op60.sizes = ([2, 12, 64], [64])
arg37_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf60_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op60_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg37_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf58', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf59', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf60', get_index_10, reduction)
        return store_reduction
op59_op60_op62.snodes[2] =
op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 98304})]
op62.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 98304}),
        MemoryDep('buf59', c0, {c0: 1536}),
        MemoryDep('buf60', c0, {c0: 1536})]
op62.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg37_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (98304, 1)
op62.sizes = ([2, 12, 64, 64], [])
arg37_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf60_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op62_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg37_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf58', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf59', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf60', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf62', get_index_11, truediv, None)
        return store


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op61.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf61.users = [
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op61.node.kernel = extern_kernels.mm


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 98304})]
op63.unmet_dependencies = [   MemoryDep('buf61', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op63.met_dependencies = []
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (98304, 1)
op63.sizes = ([2, 12, 64, 64], [])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op63_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf63', get_index_1, load, None)
        return store


op64: ExternKernelSchedulerNode(ExternKernelOut)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf62', mode=None), StarDep(name='buf63', mode=None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: ExternKernelOut
    buf64.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf64.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op64.node.kernel = extern_kernels.bmm


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 98304})]
op65.unmet_dependencies = [   MemoryDep('buf64', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (98304, 1)
op65.sizes = ([2, 64, 12, 64], [])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op65_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf65', get_index_1, load, None)
        return store


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='arg38_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False)]
]
op66.node.kernel = extern_kernels.mm


op67_op68_op69_op71: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op67_op68_op69_op71.writes = 
    [   MemoryDep('buf67', c0, {c0: 98304}),
        MemoryDep('buf68', c0, {c0: 128}),
        MemoryDep('buf69', c0, {c0: 128}),
        MemoryDep('buf71', c0, {c0: 98304})]
op67_op68_op69_op71.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 98304}),
        MemoryDep('buf49', c0, {c0: 98304}),
        MemoryDep('buf66', c0, {c0: 98304})]
op67_op68_op69_op71.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg39_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg40_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg41_1', c1, {c0: 128, c1: 768})]
op67_op68_op69_op71.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf67.users = [
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf68.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf69.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op67_op68_op69_op71.snodes[0] =
op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 98304})]
op67.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 98304}),
        MemoryDep('buf49', c0, {c0: 98304}),
        MemoryDep('buf66', c0, {c0: 98304})]
op67.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg39_1', c1, {c0: 128, c1: 768})]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf67.users = [
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op67.group.device = cuda:0
op67.group.iteration = (98304, 1)
op67.sizes = ([128, 768], [])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg39_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op67_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg39_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf42', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf49', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg31_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf67', get_index_5, add_3, None)
        return store
op67_op68_op69_op71.snodes[1] =
op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 128})]
op68.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 98304})]
op68.met_dependencies = []
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf68.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (128, 768)
op68.sizes = ([128], [768])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op68_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf68', get_index_1, getitem)
        return store_reduction
op67_op68_op69_op71.snodes[2] =
op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 128})]
op69.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 98304})]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf69.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (128, 768)
op69.sizes = ([128], [768])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op69_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf69', get_index_1, getitem_1)
        return store_reduction
op67_op68_op69_op71.snodes[3] =
op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 98304})]
op71.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 98304}),
        MemoryDep('buf68', c0, {c0: 128}),
        MemoryDep('buf69', c0, {c0: 128})]
op71.met_dependencies = 
    [   MemoryDep('arg40_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg41_1', c1, {c0: 128, c1: 768})]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (98304, 1)
op71.sizes = ([128, 768], [])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg40_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg41_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op71_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf68', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf69', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg40_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg41_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf71', get_index_5, add_1, None)
        return store


op72: ExternKernelSchedulerNode(ExternKernelOut)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = [StarDep(name='arg42_1', mode=None)]
op72.outputs = [
    buf72: ExternKernelOut
    buf72.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf72.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False)]
]
op72.node.kernel = extern_kernels.mm


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 393216})]
op73.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 393216})]
op73.met_dependencies = [MemoryDep('arg43_1', c1, {c0: 128, c1: 3072})]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (393216, 1)
op73.sizes = ([128, 3072], [])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg43_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op73_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg43_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf72', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg43_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf72', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg43_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf73', get_index_6, mul_5, None)
        return store


op74: ExternKernelSchedulerNode(ExternKernelOut)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = [StarDep(name='arg44_1', mode=None)]
op74.outputs = [
    buf74: ExternKernelOut
    buf74.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf74.users = [
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op74.node.kernel = extern_kernels.mm


op75_op76_op78: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op75_op76_op78.writes = 
    [   MemoryDep('buf75', c0, {c0: 128}),
        MemoryDep('buf76', c0, {c0: 128}),
        MemoryDep('buf78', c0, {c0: 98304})]
op75_op76_op78.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 98304}), MemoryDep('buf74', c0, {c0: 98304})]
op75_op76_op78.met_dependencies = 
    [   MemoryDep('arg45_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg46_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg47_1', c1, {c0: 128, c1: 768})]
op75_op76_op78.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf75.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf76.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf78.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
    ]
]
op75_op76_op78.snodes[0] =
op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 128})]
op75.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 98304}), MemoryDep('buf74', c0, {c0: 98304})]
op75.met_dependencies = [MemoryDep('arg45_1', c1, {c0: 128, c1: 768})]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf75.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (128, 768)
op75.sizes = ([128], [768])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg45_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op75_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg45_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf75', get_index_3, getitem)
        return store_reduction
op75_op76_op78.snodes[1] =
op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 128})]
op76.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 98304}), MemoryDep('buf74', c0, {c0: 98304})]
op76.met_dependencies = [MemoryDep('arg45_1', c1, {c0: 128, c1: 768})]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf76.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (128, 768)
op76.sizes = ([128], [768])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg45_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf76_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op76_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg45_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf76', get_index_3, getitem_1)
        return store_reduction
op75_op76_op78.snodes[2] =
op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 98304})]
op78.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 98304}),
        MemoryDep('buf74', c0, {c0: 98304}),
        MemoryDep('buf75', c0, {c0: 128}),
        MemoryDep('buf76', c0, {c0: 128})]
op78.met_dependencies = 
    [   MemoryDep('arg45_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg46_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg47_1', c1, {c0: 128, c1: 768})]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf78.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
    ]
]
op78.group.device = cuda:0
op78.group.iteration = (98304, 1)
op78.sizes = ([128, 768], [])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg45_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf76_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg46_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg47_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op78_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg45_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf75', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf76', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg46_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg47_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf78', get_index_7, add_3, None)
        return store


op79: ExternKernelSchedulerNode(ExternKernelOut)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op79.met_dependencies = [StarDep(name='arg48_1', mode=None)]
op79.outputs = [
    buf79: ExternKernelOut
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf79.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op79.node.kernel = extern_kernels.mm


op80: ExternKernelSchedulerNode(ExternKernelOut)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op80.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelOut
    buf80.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf80.users = [
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op80.node.kernel = extern_kernels.mm


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 98304})]
op81.unmet_dependencies = [   MemoryDep('buf79', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op81.met_dependencies = []
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (98304, 1)
op81.sizes = ([2, 12, 64, 64], [])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf81_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op81_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf81', get_index_1, load, None)
        return store


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 98304})]
op82.unmet_dependencies = [MemoryDep('buf80', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (98304, 1)
op82.sizes = ([2, 768, 64], [])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op82_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf82', get_index_1, load, None)
        return store


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf81', mode=None), StarDep(name='buf82', mode=None)]
op83.met_dependencies = []
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf83.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
    ]
]
op83.node.kernel = extern_kernels.bmm


op84_op85_op87: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op84_op85_op87.writes = 
    [   MemoryDep('buf84', c0, {c0: 1536}),
        MemoryDep('buf85', c0, {c0: 1536}),
        MemoryDep('buf87', c0, {c0: 98304})]
op84_op85_op87.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 98304})]
op84_op85_op87.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg51_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op84_op85_op87.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf84.users = [
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
    ]
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf85.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op84_op85_op87.snodes[0] =
op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 1536})]
op84.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 98304})]
op84.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg51_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf84.users = [
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
    ]
]
op84.group.device = cuda:0
op84.group.iteration = (1536, 64)
op84.sizes = ([2, 12, 64], [64])
arg51_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op84_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg51_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf83', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf84', get_index_9, reduction)
        return store_reduction
op84_op85_op87.snodes[1] =
op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 1536})]
op85.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 98304}), MemoryDep('buf84', c0, {c0: 1536})]
op85.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg51_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf85.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (1536, 64)
op85.sizes = ([2, 12, 64], [64])
arg51_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op85_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg51_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf83', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf84', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf85', get_index_10, reduction)
        return store_reduction
op84_op85_op87.snodes[2] =
op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 98304})]
op87.unmet_dependencies = 
    [   MemoryDep('buf83', c0, {c0: 98304}),
        MemoryDep('buf84', c0, {c0: 1536}),
        MemoryDep('buf85', c0, {c0: 1536})]
op87.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg51_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (98304, 1)
op87.sizes = ([2, 12, 64, 64], [])
arg51_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op87_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg51_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf83', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf84', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf85', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf87', get_index_11, truediv, None)
        return store


op86: ExternKernelSchedulerNode(ExternKernelOut)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op86.met_dependencies = [StarDep(name='arg50_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelOut
    buf86.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf86.users = [
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op86.node.kernel = extern_kernels.mm


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 98304})]
op88.unmet_dependencies = [   MemoryDep('buf86', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (98304, 1)
op88.sizes = ([2, 12, 64, 64], [])
buf86_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op88_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf88', get_index_1, load, None)
        return store


op89: ExternKernelSchedulerNode(ExternKernelOut)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf87', mode=None), StarDep(name='buf88', mode=None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: ExternKernelOut
    buf89.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.node.kernel = extern_kernels.bmm


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 98304})]
op90.unmet_dependencies = [   MemoryDep('buf89', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op90.met_dependencies = []
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (98304, 1)
op90.sizes = ([2, 64, 12, 64], [])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op90_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf90', get_index_1, load, None)
        return store


op91: ExternKernelSchedulerNode(ExternKernelOut)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op91.met_dependencies = [StarDep(name='arg52_1', mode=None)]
op91.outputs = [
    buf91: ExternKernelOut
    buf91.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False)]
]
op91.node.kernel = extern_kernels.mm


op92_op93_op94_op96: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op92_op93_op94_op96.writes = 
    [   MemoryDep('buf92', c0, {c0: 98304}),
        MemoryDep('buf93', c0, {c0: 128}),
        MemoryDep('buf94', c0, {c0: 128}),
        MemoryDep('buf96', c0, {c0: 98304})]
op92_op93_op94_op96.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 98304}),
        MemoryDep('buf74', c0, {c0: 98304}),
        MemoryDep('buf91', c0, {c0: 98304})]
op92_op93_op94_op96.met_dependencies = 
    [   MemoryDep('arg45_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg53_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg54_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg55_1', c1, {c0: 128, c1: 768})]
op92_op93_op94_op96.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf93.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf94.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op92_op93_op94_op96.snodes[0] =
op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 98304})]
op92.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 98304}),
        MemoryDep('buf74', c0, {c0: 98304}),
        MemoryDep('buf91', c0, {c0: 98304})]
op92.met_dependencies = 
    [   MemoryDep('arg45_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg53_1', c1, {c0: 128, c1: 768})]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
]
op92.group.device = cuda:0
op92.group.iteration = (98304, 1)
op92.sizes = ([128, 768], [])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg53_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg45_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op92_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg53_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf67', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf74', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg45_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf92', get_index_5, add_3, None)
        return store
op92_op93_op94_op96.snodes[1] =
op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 128})]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 98304})]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf93.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (128, 768)
op93.sizes = ([128], [768])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op93_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf93', get_index_1, getitem)
        return store_reduction
op92_op93_op94_op96.snodes[2] =
op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 128})]
op94.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 98304})]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf94.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (128, 768)
op94.sizes = ([128], [768])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op94_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf94', get_index_1, getitem_1)
        return store_reduction
op92_op93_op94_op96.snodes[3] =
op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 98304})]
op96.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 98304}),
        MemoryDep('buf93', c0, {c0: 128}),
        MemoryDep('buf94', c0, {c0: 128})]
op96.met_dependencies = 
    [   MemoryDep('arg54_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg55_1', c1, {c0: 128, c1: 768})]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (98304, 1)
op96.sizes = ([128, 768], [])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg54_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg55_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op96_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf93', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf94', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg54_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg55_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf96', get_index_5, add_1, None)
        return store


op97: ExternKernelSchedulerNode(ExternKernelOut)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op97.met_dependencies = [StarDep(name='arg56_1', mode=None)]
op97.outputs = [
    buf97: ExternKernelOut
    buf97.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False)]
]
op97.node.kernel = extern_kernels.mm


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 393216})]
op98.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 393216})]
op98.met_dependencies = [MemoryDep('arg57_1', c1, {c0: 128, c1: 3072})]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (393216, 1)
op98.sizes = ([128, 3072], [])
buf97_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg57_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op98_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg57_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf97', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg57_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf97', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg57_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf98', get_index_6, mul_5, None)
        return store


op99: ExternKernelSchedulerNode(ExternKernelOut)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf98', mode=None)]
op99.met_dependencies = [StarDep(name='arg58_1', mode=None)]
op99.outputs = [
    buf99: ExternKernelOut
    buf99.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
]
op99.node.kernel = extern_kernels.mm


op100_op101_op103: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op100_op101_op103.writes = 
    [   MemoryDep('buf100', c0, {c0: 128}),
        MemoryDep('buf101', c0, {c0: 128}),
        MemoryDep('buf103', c0, {c0: 98304})]
op100_op101_op103.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 98304}), MemoryDep('buf99', c0, {c0: 98304})]
op100_op101_op103.met_dependencies = 
    [   MemoryDep('arg59_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg60_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg61_1', c1, {c0: 128, c1: 768})]
op100_op101_op103.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf100.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf101.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf103.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
    ]
]
op100_op101_op103.snodes[0] =
op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 128})]
op100.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 98304}), MemoryDep('buf99', c0, {c0: 98304})]
op100.met_dependencies = [MemoryDep('arg59_1', c1, {c0: 128, c1: 768})]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf100.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (128, 768)
op100.sizes = ([128], [768])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg59_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf100_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op100_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg59_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf100', get_index_3, getitem)
        return store_reduction
op100_op101_op103.snodes[1] =
op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 128})]
op101.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 98304}), MemoryDep('buf99', c0, {c0: 98304})]
op101.met_dependencies = [MemoryDep('arg59_1', c1, {c0: 128, c1: 768})]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf101.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (128, 768)
op101.sizes = ([128], [768])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg59_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op101_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg59_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf101', get_index_3, getitem_1)
        return store_reduction
op100_op101_op103.snodes[2] =
op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 98304})]
op103.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 128}),
        MemoryDep('buf101', c0, {c0: 128}),
        MemoryDep('buf92', c0, {c0: 98304}),
        MemoryDep('buf99', c0, {c0: 98304})]
op103.met_dependencies = 
    [   MemoryDep('arg59_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg60_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg61_1', c1, {c0: 128, c1: 768})]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf103.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
    ]
]
op103.group.device = cuda:0
op103.group.iteration = (98304, 1)
op103.sizes = ([128, 768], [])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg59_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf100_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg60_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg61_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op103_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg59_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf100', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf101', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg60_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg61_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf103', get_index_7, add_3, None)
        return store


op104: ExternKernelSchedulerNode(ExternKernelOut)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='arg62_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelOut
    buf104.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf104.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op104.node.kernel = extern_kernels.mm


op105: ExternKernelSchedulerNode(ExternKernelOut)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op105.met_dependencies = [StarDep(name='arg63_1', mode=None)]
op105.outputs = [
    buf105: ExternKernelOut
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf105.users = [
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op105.node.kernel = extern_kernels.mm


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 98304})]
op106.unmet_dependencies = [   MemoryDep('buf104', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op106.met_dependencies = []
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf106.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (98304, 1)
op106.sizes = ([2, 12, 64, 64], [])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op106_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf106', get_index_1, load, None)
        return store


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 98304})]
op107.unmet_dependencies = [MemoryDep('buf105', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op107.met_dependencies = []
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (98304, 1)
op107.sizes = ([2, 768, 64], [])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op107_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf107', get_index_1, load, None)
        return store


op108: ExternKernelSchedulerNode(ExternKernelOut)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf106', mode=None), StarDep(name='buf107', mode=None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ExternKernelOut
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf108.users = [
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False),
    ]
]
op108.node.kernel = extern_kernels.bmm


op109_op110_op112: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op109_op110_op112.writes = 
    [   MemoryDep('buf109', c0, {c0: 1536}),
        MemoryDep('buf110', c0, {c0: 1536}),
        MemoryDep('buf112', c0, {c0: 98304})]
op109_op110_op112.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 98304})]
op109_op110_op112.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg65_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op109_op110_op112.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf109.users = [
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
    ]
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf110.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op109_op110_op112.snodes[0] =
op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 1536})]
op109.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 98304})]
op109.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg65_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf109.users = [
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
    ]
]
op109.group.device = cuda:0
op109.group.iteration = (1536, 64)
op109.sizes = ([2, 12, 64], [64])
arg65_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op109_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg65_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf108', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf109', get_index_9, reduction)
        return store_reduction
op109_op110_op112.snodes[1] =
op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 1536})]
op110.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 98304}), MemoryDep('buf109', c0, {c0: 1536})]
op110.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg65_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf110.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (1536, 64)
op110.sizes = ([2, 12, 64], [64])
arg65_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op110_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg65_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf108', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf109', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf110', get_index_10, reduction)
        return store_reduction
op109_op110_op112.snodes[2] =
op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 98304})]
op112.unmet_dependencies = 
    [   MemoryDep('buf108', c0, {c0: 98304}),
        MemoryDep('buf109', c0, {c0: 1536}),
        MemoryDep('buf110', c0, {c0: 1536})]
op112.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg65_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (98304, 1)
op112.sizes = ([2, 12, 64, 64], [])
arg65_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op112_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg65_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf108', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf109', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf110', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf112', get_index_11, truediv, None)
        return store


op111: ExternKernelSchedulerNode(ExternKernelOut)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op111.met_dependencies = [StarDep(name='arg64_1', mode=None)]
op111.outputs = [
    buf111: ExternKernelOut
    buf111.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf111.users = [
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op111.node.kernel = extern_kernels.mm


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 98304})]
op113.unmet_dependencies = [   MemoryDep('buf111', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op113.met_dependencies = []
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (98304, 1)
op113.sizes = ([2, 12, 64, 64], [])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op113_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf113', get_index_1, load, None)
        return store


op114: ExternKernelSchedulerNode(ExternKernelOut)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf112', mode=None), StarDep(name='buf113', mode=None)]
op114.met_dependencies = []
op114.outputs = [
    buf114: ExternKernelOut
    buf114.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf114.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.node.kernel = extern_kernels.bmm


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 98304})]
op115.unmet_dependencies = [   MemoryDep('buf114', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op115.met_dependencies = []
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (98304, 1)
op115.sizes = ([2, 64, 12, 64], [])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op115_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf115', get_index_1, load, None)
        return store


op116: ExternKernelSchedulerNode(ExternKernelOut)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op116.outputs = [
    buf116: ExternKernelOut
    buf116.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf116.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False)]
]
op116.node.kernel = extern_kernels.mm


op117_op118_op119_op121: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op117_op118_op119_op121.writes = 
    [   MemoryDep('buf117', c0, {c0: 98304}),
        MemoryDep('buf118', c0, {c0: 128}),
        MemoryDep('buf119', c0, {c0: 128}),
        MemoryDep('buf121', c0, {c0: 98304})]
op117_op118_op119_op121.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 98304}),
        MemoryDep('buf92', c0, {c0: 98304}),
        MemoryDep('buf99', c0, {c0: 98304})]
op117_op118_op119_op121.met_dependencies = 
    [   MemoryDep('arg59_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg67_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg68_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg69_1', c1, {c0: 128, c1: 768})]
op117_op118_op119_op121.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf118.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf119.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op117_op118_op119_op121.snodes[0] =
op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 98304})]
op117.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 98304}),
        MemoryDep('buf92', c0, {c0: 98304}),
        MemoryDep('buf99', c0, {c0: 98304})]
op117.met_dependencies = 
    [   MemoryDep('arg59_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg67_1', c1, {c0: 128, c1: 768})]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op117.group.device = cuda:0
op117.group.iteration = (98304, 1)
op117.sizes = ([128, 768], [])
buf116_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg67_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg59_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op117_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf92', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf99', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg59_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf117', get_index_5, add_3, None)
        return store
op117_op118_op119_op121.snodes[1] =
op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 128})]
op118.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 98304})]
op118.met_dependencies = []
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf118.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (128, 768)
op118.sizes = ([128], [768])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op118_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf118', get_index_1, getitem)
        return store_reduction
op117_op118_op119_op121.snodes[2] =
op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 128})]
op119.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 98304})]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf119.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (128, 768)
op119.sizes = ([128], [768])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op119_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf119', get_index_1, getitem_1)
        return store_reduction
op117_op118_op119_op121.snodes[3] =
op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 98304})]
op121.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 98304}),
        MemoryDep('buf118', c0, {c0: 128}),
        MemoryDep('buf119', c0, {c0: 128})]
op121.met_dependencies = 
    [   MemoryDep('arg68_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg69_1', c1, {c0: 128, c1: 768})]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (98304, 1)
op121.sizes = ([128, 768], [])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg68_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg69_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op121_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf118', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf119', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg68_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg69_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf121', get_index_5, add_1, None)
        return store


op122: ExternKernelSchedulerNode(ExternKernelOut)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf121', mode=None)]
op122.met_dependencies = [StarDep(name='arg70_1', mode=None)]
op122.outputs = [
    buf122: ExternKernelOut
    buf122.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf122.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False)]
]
op122.node.kernel = extern_kernels.mm


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 393216})]
op123.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 393216})]
op123.met_dependencies = [MemoryDep('arg71_1', c1, {c0: 128, c1: 3072})]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (393216, 1)
op123.sizes = ([128, 3072], [])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg71_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op123_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf122', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg71_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf122', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg71_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf123', get_index_6, mul_5, None)
        return store


op124: ExternKernelSchedulerNode(ExternKernelOut)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op124.met_dependencies = [StarDep(name='arg72_1', mode=None)]
op124.outputs = [
    buf124: ExternKernelOut
    buf124.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf124.users = [
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op124.node.kernel = extern_kernels.mm


op125_op126_op128: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op125_op126_op128.writes = 
    [   MemoryDep('buf125', c0, {c0: 128}),
        MemoryDep('buf126', c0, {c0: 128}),
        MemoryDep('buf128', c0, {c0: 98304})]
op125_op126_op128.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 98304}), MemoryDep('buf124', c0, {c0: 98304})]
op125_op126_op128.met_dependencies = 
    [   MemoryDep('arg73_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg74_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg75_1', c1, {c0: 128, c1: 768})]
op125_op126_op128.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf125.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf126.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf128.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
    ]
]
op125_op126_op128.snodes[0] =
op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 128})]
op125.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 98304}), MemoryDep('buf124', c0, {c0: 98304})]
op125.met_dependencies = [MemoryDep('arg73_1', c1, {c0: 128, c1: 768})]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf125.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (128, 768)
op125.sizes = ([128], [768])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg73_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op125_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg73_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf125', get_index_3, getitem)
        return store_reduction
op125_op126_op128.snodes[1] =
op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 128})]
op126.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 98304}), MemoryDep('buf124', c0, {c0: 98304})]
op126.met_dependencies = [MemoryDep('arg73_1', c1, {c0: 128, c1: 768})]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf126.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (128, 768)
op126.sizes = ([128], [768])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg73_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf126_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op126_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg73_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf126', get_index_3, getitem_1)
        return store_reduction
op125_op126_op128.snodes[2] =
op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 98304})]
op128.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 98304}),
        MemoryDep('buf124', c0, {c0: 98304}),
        MemoryDep('buf125', c0, {c0: 128}),
        MemoryDep('buf126', c0, {c0: 128})]
op128.met_dependencies = 
    [   MemoryDep('arg73_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg74_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg75_1', c1, {c0: 128, c1: 768})]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf128.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
    ]
]
op128.group.device = cuda:0
op128.group.iteration = (98304, 1)
op128.sizes = ([128, 768], [])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg73_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf126_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg74_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg75_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op128_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg73_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf125', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf126', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg74_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg75_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf128', get_index_7, add_3, None)
        return store


op129: ExternKernelSchedulerNode(ExternKernelOut)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op129.met_dependencies = [StarDep(name='arg76_1', mode=None)]
op129.outputs = [
    buf129: ExternKernelOut
    buf129.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf129.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op129.node.kernel = extern_kernels.mm


op130: ExternKernelSchedulerNode(ExternKernelOut)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op130.met_dependencies = [StarDep(name='arg77_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelOut
    buf130.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf130.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op130.node.kernel = extern_kernels.mm


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 98304})]
op131.unmet_dependencies = [   MemoryDep('buf129', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (98304, 1)
op131.sizes = ([2, 12, 64, 64], [])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op131_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf131', get_index_1, load, None)
        return store


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 98304})]
op132.unmet_dependencies = [MemoryDep('buf130', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op132.met_dependencies = []
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (98304, 1)
op132.sizes = ([2, 768, 64], [])
buf130_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf132_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op132_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf132', get_index_1, load, None)
        return store


op133: ExternKernelSchedulerNode(ExternKernelOut)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf131', mode=None), StarDep(name='buf132', mode=None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: ExternKernelOut
    buf133.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf133.users = [
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=True, is_weak=False),
    ]
]
op133.node.kernel = extern_kernels.bmm


op134_op135_op137: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op134_op135_op137.writes = 
    [   MemoryDep('buf134', c0, {c0: 1536}),
        MemoryDep('buf135', c0, {c0: 1536}),
        MemoryDep('buf137', c0, {c0: 98304})]
op134_op135_op137.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 98304})]
op134_op135_op137.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg79_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op134_op135_op137.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf134.users = [
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
    ]
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf135.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf137.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op134_op135_op137.snodes[0] =
op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 1536})]
op134.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 98304})]
op134.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg79_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf134.users = [
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
    ]
]
op134.group.device = cuda:0
op134.group.iteration = (1536, 64)
op134.sizes = ([2, 12, 64], [64])
arg79_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op134_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg79_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf133', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf134', get_index_9, reduction)
        return store_reduction
op134_op135_op137.snodes[1] =
op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 1536})]
op135.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 98304}), MemoryDep('buf134', c0, {c0: 1536})]
op135.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg79_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf135.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (1536, 64)
op135.sizes = ([2, 12, 64], [64])
arg79_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op135_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg79_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf133', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf134', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf135', get_index_10, reduction)
        return store_reduction
op134_op135_op137.snodes[2] =
op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 98304})]
op137.unmet_dependencies = 
    [   MemoryDep('buf133', c0, {c0: 98304}),
        MemoryDep('buf134', c0, {c0: 1536}),
        MemoryDep('buf135', c0, {c0: 1536})]
op137.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg79_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf137.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (98304, 1)
op137.sizes = ([2, 12, 64, 64], [])
arg79_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op137_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg79_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf133', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf134', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf135', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf137', get_index_11, truediv, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelOut)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op136.met_dependencies = [StarDep(name='arg78_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelOut
    buf136.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf136.users = [
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op136.node.kernel = extern_kernels.mm


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 98304})]
op138.unmet_dependencies = [   MemoryDep('buf136', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op138.met_dependencies = []
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (98304, 1)
op138.sizes = ([2, 12, 64, 64], [])
buf136_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf138_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op138_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf138', get_index_1, load, None)
        return store


op139: ExternKernelSchedulerNode(ExternKernelOut)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf137', mode=None), StarDep(name='buf138', mode=None)]
op139.met_dependencies = []
op139.outputs = [
    buf139: ExternKernelOut
    buf139.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf139.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.node.kernel = extern_kernels.bmm


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 98304})]
op140.unmet_dependencies = [   MemoryDep('buf139', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op140.met_dependencies = []
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (98304, 1)
op140.sizes = ([2, 64, 12, 64], [])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf140_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op140_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf140', get_index_1, load, None)
        return store


op141: ExternKernelSchedulerNode(ExternKernelOut)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf140', mode=None)]
op141.met_dependencies = [StarDep(name='arg80_1', mode=None)]
op141.outputs = [
    buf141: ExternKernelOut
    buf141.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf141.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False)]
]
op141.node.kernel = extern_kernels.mm


op142_op143_op144_op146: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op142_op143_op144_op146.writes = 
    [   MemoryDep('buf142', c0, {c0: 98304}),
        MemoryDep('buf143', c0, {c0: 128}),
        MemoryDep('buf144', c0, {c0: 128}),
        MemoryDep('buf146', c0, {c0: 98304})]
op142_op143_op144_op146.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 98304}),
        MemoryDep('buf124', c0, {c0: 98304}),
        MemoryDep('buf141', c0, {c0: 98304})]
op142_op143_op144_op146.met_dependencies = 
    [   MemoryDep('arg73_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg81_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg82_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg83_1', c1, {c0: 128, c1: 768})]
op142_op143_op144_op146.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
    ]
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf143.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf144.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op142_op143_op144_op146.snodes[0] =
op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 98304})]
op142.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 98304}),
        MemoryDep('buf124', c0, {c0: 98304}),
        MemoryDep('buf141', c0, {c0: 98304})]
op142.met_dependencies = 
    [   MemoryDep('arg73_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg81_1', c1, {c0: 128, c1: 768})]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
    ]
]
op142.group.device = cuda:0
op142.group.iteration = (98304, 1)
op142.sizes = ([128, 768], [])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg81_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg73_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op142_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf117', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf124', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg73_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf142', get_index_5, add_3, None)
        return store
op142_op143_op144_op146.snodes[1] =
op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 128})]
op143.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 98304})]
op143.met_dependencies = []
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf143.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (128, 768)
op143.sizes = ([128], [768])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op143_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf143', get_index_1, getitem)
        return store_reduction
op142_op143_op144_op146.snodes[2] =
op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 128})]
op144.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 98304})]
op144.met_dependencies = []
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf144.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (128, 768)
op144.sizes = ([128], [768])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf144_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op144_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf144', get_index_1, getitem_1)
        return store_reduction
op142_op143_op144_op146.snodes[3] =
op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 98304})]
op146.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 98304}),
        MemoryDep('buf143', c0, {c0: 128}),
        MemoryDep('buf144', c0, {c0: 128})]
op146.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg83_1', c1, {c0: 128, c1: 768})]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (98304, 1)
op146.sizes = ([128, 768], [])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf144_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg82_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg83_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op146_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf143', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf144', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg82_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg83_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf146', get_index_5, add_1, None)
        return store


op147: ExternKernelSchedulerNode(ExternKernelOut)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op147.met_dependencies = [StarDep(name='arg84_1', mode=None)]
op147.outputs = [
    buf147: ExternKernelOut
    buf147.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf147.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False)]
]
op147.node.kernel = extern_kernels.mm


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 393216})]
op148.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 393216})]
op148.met_dependencies = [MemoryDep('arg85_1', c1, {c0: 128, c1: 3072})]
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (393216, 1)
op148.sizes = ([128, 3072], [])
buf147_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg85_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf148_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op148_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg85_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf147', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg85_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf147', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg85_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf148', get_index_6, mul_5, None)
        return store


op149: ExternKernelSchedulerNode(ExternKernelOut)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op149.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op149.outputs = [
    buf149: ExternKernelOut
    buf149.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf149.users = [
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
    ]
]
op149.node.kernel = extern_kernels.mm


op150_op151_op153: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op150_op151_op153.writes = 
    [   MemoryDep('buf150', c0, {c0: 128}),
        MemoryDep('buf151', c0, {c0: 128}),
        MemoryDep('buf153', c0, {c0: 98304})]
op150_op151_op153.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 98304}), MemoryDep('buf149', c0, {c0: 98304})]
op150_op151_op153.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg88_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg89_1', c1, {c0: 128, c1: 768})]
op150_op151_op153.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf150.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf151.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf153.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False),
    ]
]
op150_op151_op153.snodes[0] =
op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 128})]
op150.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 98304}), MemoryDep('buf149', c0, {c0: 98304})]
op150.met_dependencies = [MemoryDep('arg87_1', c1, {c0: 128, c1: 768})]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf150.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (128, 768)
op150.sizes = ([128], [768])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg87_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op150_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg87_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf150', get_index_3, getitem)
        return store_reduction
op150_op151_op153.snodes[1] =
op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 128})]
op151.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 98304}), MemoryDep('buf149', c0, {c0: 98304})]
op151.met_dependencies = [MemoryDep('arg87_1', c1, {c0: 128, c1: 768})]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf151.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (128, 768)
op151.sizes = ([128], [768])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg87_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op151_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg87_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf151', get_index_3, getitem_1)
        return store_reduction
op150_op151_op153.snodes[2] =
op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 98304})]
op153.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 98304}),
        MemoryDep('buf149', c0, {c0: 98304}),
        MemoryDep('buf150', c0, {c0: 128}),
        MemoryDep('buf151', c0, {c0: 128})]
op153.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg88_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg89_1', c1, {c0: 128, c1: 768})]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf153.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False),
    ]
]
op153.group.device = cuda:0
op153.group.iteration = (98304, 1)
op153.sizes = ([128, 768], [])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg87_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg88_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg89_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op153_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg87_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf150', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf151', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg88_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg89_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf153', get_index_7, add_3, None)
        return store


op154: ExternKernelSchedulerNode(ExternKernelOut)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op154.met_dependencies = [StarDep(name='arg90_1', mode=None)]
op154.outputs = [
    buf154: ExternKernelOut
    buf154.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf154.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op154.node.kernel = extern_kernels.mm


op155: ExternKernelSchedulerNode(ExternKernelOut)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op155.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelOut
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf155.users = [
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op155.node.kernel = extern_kernels.mm


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 98304})]
op156.unmet_dependencies = [   MemoryDep('buf154', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op156.met_dependencies = []
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (98304, 1)
op156.sizes = ([2, 12, 64, 64], [])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op156_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf156', get_index_1, load, None)
        return store


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 98304})]
op157.unmet_dependencies = [MemoryDep('buf155', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op157.met_dependencies = []
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (98304, 1)
op157.sizes = ([2, 768, 64], [])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op157_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf157', get_index_1, load, None)
        return store


op158: ExternKernelSchedulerNode(ExternKernelOut)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = [StarDep(name='buf156', mode=None), StarDep(name='buf157', mode=None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: ExternKernelOut
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf158.users = [
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=True, is_weak=False),
    ]
]
op158.node.kernel = extern_kernels.bmm


op159_op160_op162: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op159_op160_op162.writes = 
    [   MemoryDep('buf159', c0, {c0: 1536}),
        MemoryDep('buf160', c0, {c0: 1536}),
        MemoryDep('buf162', c0, {c0: 98304})]
op159_op160_op162.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 98304})]
op159_op160_op162.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg93_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op159_op160_op162.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
    ]
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf160.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf162.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op159_op160_op162.snodes[0] =
op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 1536})]
op159.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 98304})]
op159.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg93_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
    ]
]
op159.group.device = cuda:0
op159.group.iteration = (1536, 64)
op159.sizes = ([2, 12, 64], [64])
arg93_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op159_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg93_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf158', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf159', get_index_9, reduction)
        return store_reduction
op159_op160_op162.snodes[1] =
op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 1536})]
op160.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 98304}), MemoryDep('buf159', c0, {c0: 1536})]
op160.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg93_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf160.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (1536, 64)
op160.sizes = ([2, 12, 64], [64])
arg93_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op160_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg93_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf158', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf159', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf160', get_index_10, reduction)
        return store_reduction
op159_op160_op162.snodes[2] =
op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 98304})]
op162.unmet_dependencies = 
    [   MemoryDep('buf158', c0, {c0: 98304}),
        MemoryDep('buf159', c0, {c0: 1536}),
        MemoryDep('buf160', c0, {c0: 1536})]
op162.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg93_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf162.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (98304, 1)
op162.sizes = ([2, 12, 64, 64], [])
arg93_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op162_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg93_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf158', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf159', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf160', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf162', get_index_11, truediv, None)
        return store


op161: ExternKernelSchedulerNode(ExternKernelOut)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op161.met_dependencies = [StarDep(name='arg92_1', mode=None)]
op161.outputs = [
    buf161: ExternKernelOut
    buf161.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf161.users = [
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op161.node.kernel = extern_kernels.mm


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 98304})]
op163.unmet_dependencies = [   MemoryDep('buf161', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op163.met_dependencies = []
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (98304, 1)
op163.sizes = ([2, 12, 64, 64], [])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op163_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf163', get_index_1, load, None)
        return store


op164: ExternKernelSchedulerNode(ExternKernelOut)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf162', mode=None), StarDep(name='buf163', mode=None)]
op164.met_dependencies = []
op164.outputs = [
    buf164: ExternKernelOut
    buf164.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf164.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.node.kernel = extern_kernels.bmm


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 98304})]
op165.unmet_dependencies = [   MemoryDep('buf164', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op165.met_dependencies = []
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (98304, 1)
op165.sizes = ([2, 64, 12, 64], [])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf165_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op165_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf165', get_index_1, load, None)
        return store


op166: ExternKernelSchedulerNode(ExternKernelOut)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf165', mode=None)]
op166.met_dependencies = [StarDep(name='arg94_1', mode=None)]
op166.outputs = [
    buf166: ExternKernelOut
    buf166.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False)]
]
op166.node.kernel = extern_kernels.mm


op167_op168_op169_op171: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op167_op168_op169_op171.writes = 
    [   MemoryDep('buf167', c0, {c0: 98304}),
        MemoryDep('buf168', c0, {c0: 128}),
        MemoryDep('buf169', c0, {c0: 128}),
        MemoryDep('buf171', c0, {c0: 98304})]
op167_op168_op169_op171.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 98304}),
        MemoryDep('buf149', c0, {c0: 98304}),
        MemoryDep('buf166', c0, {c0: 98304})]
op167_op168_op169_op171.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg95_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg96_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg97_1', c1, {c0: 128, c1: 768})]
op167_op168_op169_op171.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf167.users = [
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf168.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf169.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op167_op168_op169_op171.snodes[0] =
op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 98304})]
op167.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 98304}),
        MemoryDep('buf149', c0, {c0: 98304}),
        MemoryDep('buf166', c0, {c0: 98304})]
op167.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg95_1', c1, {c0: 128, c1: 768})]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf167.users = [
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
]
op167.group.device = cuda:0
op167.group.iteration = (98304, 1)
op167.sizes = ([128, 768], [])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg95_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg87_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op167_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg95_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf142', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf149', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg87_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf167', get_index_5, add_3, None)
        return store
op167_op168_op169_op171.snodes[1] =
op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 128})]
op168.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 98304})]
op168.met_dependencies = []
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf168.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (128, 768)
op168.sizes = ([128], [768])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf168_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op168_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf168', get_index_1, getitem)
        return store_reduction
op167_op168_op169_op171.snodes[2] =
op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 128})]
op169.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 98304})]
op169.met_dependencies = []
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf169.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (128, 768)
op169.sizes = ([128], [768])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf169_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op169_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf169', get_index_1, getitem_1)
        return store_reduction
op167_op168_op169_op171.snodes[3] =
op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 98304})]
op171.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 98304}),
        MemoryDep('buf168', c0, {c0: 128}),
        MemoryDep('buf169', c0, {c0: 128})]
op171.met_dependencies = 
    [   MemoryDep('arg96_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg97_1', c1, {c0: 128, c1: 768})]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (98304, 1)
op171.sizes = ([128, 768], [])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf168_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf169_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg96_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg97_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op171_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf168', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf169', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg96_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg97_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf171', get_index_5, add_1, None)
        return store


op172: ExternKernelSchedulerNode(ExternKernelOut)
op172.writes = [StarDep(name='buf172', mode=None)]
op172.unmet_dependencies = [StarDep(name='buf171', mode=None)]
op172.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op172.outputs = [
    buf172: ExternKernelOut
    buf172.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf172.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False)]
]
op172.node.kernel = extern_kernels.mm


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 393216})]
op173.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 393216})]
op173.met_dependencies = [MemoryDep('arg99_1', c1, {c0: 128, c1: 3072})]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf173.users = [NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (393216, 1)
op173.sizes = ([128, 3072], [])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg99_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op173_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg99_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf172', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg99_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf172', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg99_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf173', get_index_6, mul_5, None)
        return store


op174: ExternKernelSchedulerNode(ExternKernelOut)
op174.writes = [StarDep(name='buf174', mode=None)]
op174.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op174.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op174.outputs = [
    buf174: ExternKernelOut
    buf174.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf174.users = [
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
]
op174.node.kernel = extern_kernels.mm


op175_op176_op178: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op175_op176_op178.writes = 
    [   MemoryDep('buf175', c0, {c0: 128}),
        MemoryDep('buf176', c0, {c0: 128}),
        MemoryDep('buf178', c0, {c0: 98304})]
op175_op176_op178.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 98304}), MemoryDep('buf174', c0, {c0: 98304})]
op175_op176_op178.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg102_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg103_1', c1, {c0: 128, c1: 768})]
op175_op176_op178.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf175.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf176.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf178.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
    ]
]
op175_op176_op178.snodes[0] =
op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 128})]
op175.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 98304}), MemoryDep('buf174', c0, {c0: 98304})]
op175.met_dependencies = [MemoryDep('arg101_1', c1, {c0: 128, c1: 768})]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf175.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (128, 768)
op175.sizes = ([128], [768])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg101_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op175_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg101_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf175', get_index_3, getitem)
        return store_reduction
op175_op176_op178.snodes[1] =
op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 128})]
op176.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 98304}), MemoryDep('buf174', c0, {c0: 98304})]
op176.met_dependencies = [MemoryDep('arg101_1', c1, {c0: 128, c1: 768})]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf176.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (128, 768)
op176.sizes = ([128], [768])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg101_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op176_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg101_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf176', get_index_3, getitem_1)
        return store_reduction
op175_op176_op178.snodes[2] =
op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 98304})]
op178.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 98304}),
        MemoryDep('buf174', c0, {c0: 98304}),
        MemoryDep('buf175', c0, {c0: 128}),
        MemoryDep('buf176', c0, {c0: 128})]
op178.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg102_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg103_1', c1, {c0: 128, c1: 768})]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf178.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
    ]
]
op178.group.device = cuda:0
op178.group.iteration = (98304, 1)
op178.sizes = ([128, 768], [])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg101_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg102_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg103_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf178_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op178_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg101_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf175', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf176', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg102_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg103_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf178', get_index_7, add_3, None)
        return store


op179: ExternKernelSchedulerNode(ExternKernelOut)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op179.met_dependencies = [StarDep(name='arg104_1', mode=None)]
op179.outputs = [
    buf179: ExternKernelOut
    buf179.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf179.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op179.node.kernel = extern_kernels.mm


op180: ExternKernelSchedulerNode(ExternKernelOut)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op180.met_dependencies = [StarDep(name='arg105_1', mode=None)]
op180.outputs = [
    buf180: ExternKernelOut
    buf180.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf180.users = [
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op180.node.kernel = extern_kernels.mm


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 98304})]
op181.unmet_dependencies = [   MemoryDep('buf179', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op181.met_dependencies = []
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf181.users = [NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (98304, 1)
op181.sizes = ([2, 12, 64, 64], [])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op181_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf181', get_index_1, load, None)
        return store


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 98304})]
op182.unmet_dependencies = [MemoryDep('buf180', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op182.met_dependencies = []
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf182.users = [NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (98304, 1)
op182.sizes = ([2, 768, 64], [])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf182_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op182_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf182', get_index_1, load, None)
        return store


op183: ExternKernelSchedulerNode(ExternKernelOut)
op183.writes = [StarDep(name='buf183', mode=None)]
op183.unmet_dependencies = [StarDep(name='buf181', mode=None), StarDep(name='buf182', mode=None)]
op183.met_dependencies = []
op183.outputs = [
    buf183: ExternKernelOut
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
]
op183.node.kernel = extern_kernels.bmm


op184_op185_op187: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op184_op185_op187.writes = 
    [   MemoryDep('buf184', c0, {c0: 1536}),
        MemoryDep('buf185', c0, {c0: 1536}),
        MemoryDep('buf187', c0, {c0: 98304})]
op184_op185_op187.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 98304})]
op184_op185_op187.met_dependencies = 
    [   MemoryDep('arg107_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op184_op185_op187.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf184.users = [
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
    ]
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf185.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op184_op185_op187.snodes[0] =
op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 1536})]
op184.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 98304})]
op184.met_dependencies = 
    [   MemoryDep('arg107_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf184.users = [
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
    ]
]
op184.group.device = cuda:0
op184.group.iteration = (1536, 64)
op184.sizes = ([2, 12, 64], [64])
arg107_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op184_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg107_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf183', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf184', get_index_9, reduction)
        return store_reduction
op184_op185_op187.snodes[1] =
op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 1536})]
op185.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 98304}), MemoryDep('buf184', c0, {c0: 1536})]
op185.met_dependencies = 
    [   MemoryDep('arg107_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf185.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (1536, 64)
op185.sizes = ([2, 12, 64], [64])
arg107_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op185_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg107_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf183', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf184', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf185', get_index_10, reduction)
        return store_reduction
op184_op185_op187.snodes[2] =
op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 98304})]
op187.unmet_dependencies = 
    [   MemoryDep('buf183', c0, {c0: 98304}),
        MemoryDep('buf184', c0, {c0: 1536}),
        MemoryDep('buf185', c0, {c0: 1536})]
op187.met_dependencies = 
    [   MemoryDep('arg107_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (98304, 1)
op187.sizes = ([2, 12, 64, 64], [])
arg107_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op187_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg107_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf183', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf184', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf185', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf187', get_index_11, truediv, None)
        return store


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op186.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf186.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op186.node.kernel = extern_kernels.mm


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 98304})]
op188.unmet_dependencies = [   MemoryDep('buf186', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op188.met_dependencies = []
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf188.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (98304, 1)
op188.sizes = ([2, 12, 64, 64], [])
buf186_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op188_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf188', get_index_1, load, None)
        return store


op189: ExternKernelSchedulerNode(ExternKernelOut)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf187', mode=None), StarDep(name='buf188', mode=None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: ExternKernelOut
    buf189.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf189.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.node.kernel = extern_kernels.bmm


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 98304})]
op190.unmet_dependencies = [   MemoryDep('buf189', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op190.met_dependencies = []
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (98304, 1)
op190.sizes = ([2, 64, 12, 64], [])
buf189_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op190_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf190', get_index_1, load, None)
        return store


op191: ExternKernelSchedulerNode(ExternKernelOut)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op191.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op191.outputs = [
    buf191: ExternKernelOut
    buf191.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf191.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False)]
]
op191.node.kernel = extern_kernels.mm


op192_op193_op194_op196: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op192_op193_op194_op196.writes = 
    [   MemoryDep('buf192', c0, {c0: 98304}),
        MemoryDep('buf193', c0, {c0: 128}),
        MemoryDep('buf194', c0, {c0: 128}),
        MemoryDep('buf196', c0, {c0: 98304})]
op192_op193_op194_op196.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 98304}),
        MemoryDep('buf174', c0, {c0: 98304}),
        MemoryDep('buf191', c0, {c0: 98304})]
op192_op193_op194_op196.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg109_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg110_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg111_1', c1, {c0: 128, c1: 768})]
op192_op193_op194_op196.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf192.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf193.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf194.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op192_op193_op194_op196.snodes[0] =
op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 98304})]
op192.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 98304}),
        MemoryDep('buf174', c0, {c0: 98304}),
        MemoryDep('buf191', c0, {c0: 98304})]
op192.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg109_1', c1, {c0: 128, c1: 768})]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf192.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
]
op192.group.device = cuda:0
op192.group.iteration = (98304, 1)
op192.sizes = ([128, 768], [])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg109_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg101_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op192_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg109_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf167', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf174', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg101_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf192', get_index_5, add_3, None)
        return store
op192_op193_op194_op196.snodes[1] =
op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 128})]
op193.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 98304})]
op193.met_dependencies = []
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf193.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (128, 768)
op193.sizes = ([128], [768])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op193_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf193', get_index_1, getitem)
        return store_reduction
op192_op193_op194_op196.snodes[2] =
op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 128})]
op194.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 98304})]
op194.met_dependencies = []
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf194.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (128, 768)
op194.sizes = ([128], [768])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op194_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf194', get_index_1, getitem_1)
        return store_reduction
op192_op193_op194_op196.snodes[3] =
op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 98304})]
op196.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 98304}),
        MemoryDep('buf193', c0, {c0: 128}),
        MemoryDep('buf194', c0, {c0: 128})]
op196.met_dependencies = 
    [   MemoryDep('arg110_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg111_1', c1, {c0: 128, c1: 768})]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (98304, 1)
op196.sizes = ([128, 768], [])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg110_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg111_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op196_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf193', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf194', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg110_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg111_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf196', get_index_5, add_1, None)
        return store


op197: ExternKernelSchedulerNode(ExternKernelOut)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = [StarDep(name='arg112_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelOut
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf197.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False)]
]
op197.node.kernel = extern_kernels.mm


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 393216})]
op198.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 393216})]
op198.met_dependencies = [MemoryDep('arg113_1', c1, {c0: 128, c1: 3072})]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (393216, 1)
op198.sizes = ([128, 3072], [])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg113_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op198_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf197', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg113_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf197', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg113_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf198', get_index_6, mul_5, None)
        return store


op199: ExternKernelSchedulerNode(ExternKernelOut)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf198', mode=None)]
op199.met_dependencies = [StarDep(name='arg114_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelOut
    buf199.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf199.users = [
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
]
op199.node.kernel = extern_kernels.mm


op200_op201_op203: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op200_op201_op203.writes = 
    [   MemoryDep('buf200', c0, {c0: 128}),
        MemoryDep('buf201', c0, {c0: 128}),
        MemoryDep('buf203', c0, {c0: 98304})]
op200_op201_op203.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 98304}), MemoryDep('buf199', c0, {c0: 98304})]
op200_op201_op203.met_dependencies = 
    [   MemoryDep('arg115_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg116_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg117_1', c1, {c0: 128, c1: 768})]
op200_op201_op203.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf200.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf201.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf203.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False),
    ]
]
op200_op201_op203.snodes[0] =
op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 128})]
op200.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 98304}), MemoryDep('buf199', c0, {c0: 98304})]
op200.met_dependencies = [MemoryDep('arg115_1', c1, {c0: 128, c1: 768})]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf200.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (128, 768)
op200.sizes = ([128], [768])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg115_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op200_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg115_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf200', get_index_3, getitem)
        return store_reduction
op200_op201_op203.snodes[1] =
op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 128})]
op201.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 98304}), MemoryDep('buf199', c0, {c0: 98304})]
op201.met_dependencies = [MemoryDep('arg115_1', c1, {c0: 128, c1: 768})]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf201.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (128, 768)
op201.sizes = ([128], [768])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg115_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op201_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg115_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf201', get_index_3, getitem_1)
        return store_reduction
op200_op201_op203.snodes[2] =
op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 98304})]
op203.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 98304}),
        MemoryDep('buf199', c0, {c0: 98304}),
        MemoryDep('buf200', c0, {c0: 128}),
        MemoryDep('buf201', c0, {c0: 128})]
op203.met_dependencies = 
    [   MemoryDep('arg115_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg116_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg117_1', c1, {c0: 128, c1: 768})]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf203.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False),
    ]
]
op203.group.device = cuda:0
op203.group.iteration = (98304, 1)
op203.sizes = ([128, 768], [])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg115_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg116_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg117_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op203_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg115_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf200', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf201', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg116_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg117_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf203', get_index_7, add_3, None)
        return store


op204: ExternKernelSchedulerNode(ExternKernelOut)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op204.met_dependencies = [StarDep(name='arg118_1', mode=None)]
op204.outputs = [
    buf204: ExternKernelOut
    buf204.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf204.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op204.node.kernel = extern_kernels.mm


op205: ExternKernelSchedulerNode(ExternKernelOut)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op205.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op205.outputs = [
    buf205: ExternKernelOut
    buf205.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf205.users = [
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op205.node.kernel = extern_kernels.mm


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 98304})]
op206.unmet_dependencies = [   MemoryDep('buf204', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op206.met_dependencies = []
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (98304, 1)
op206.sizes = ([2, 12, 64, 64], [])
buf204_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op206_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf206', get_index_1, load, None)
        return store


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 98304})]
op207.unmet_dependencies = [MemoryDep('buf205', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op207.met_dependencies = []
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (98304, 1)
op207.sizes = ([2, 768, 64], [])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op207_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf207', get_index_1, load, None)
        return store


op208: ExternKernelSchedulerNode(ExternKernelOut)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = [StarDep(name='buf206', mode=None), StarDep(name='buf207', mode=None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: ExternKernelOut
    buf208.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf208.users = [
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False),
    ]
]
op208.node.kernel = extern_kernels.bmm


op209_op210_op212: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op209_op210_op212.writes = 
    [   MemoryDep('buf209', c0, {c0: 1536}),
        MemoryDep('buf210', c0, {c0: 1536}),
        MemoryDep('buf212', c0, {c0: 98304})]
op209_op210_op212.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 98304})]
op209_op210_op212.met_dependencies = 
    [   MemoryDep('arg121_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op209_op210_op212.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf209.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
    ]
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf210.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf212.users = [NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op209_op210_op212.snodes[0] =
op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 1536})]
op209.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 98304})]
op209.met_dependencies = 
    [   MemoryDep('arg121_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf209.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
    ]
]
op209.group.device = cuda:0
op209.group.iteration = (1536, 64)
op209.sizes = ([2, 12, 64], [64])
arg121_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op209_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg121_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf208', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf209', get_index_9, reduction)
        return store_reduction
op209_op210_op212.snodes[1] =
op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 1536})]
op210.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 98304}), MemoryDep('buf209', c0, {c0: 1536})]
op210.met_dependencies = 
    [   MemoryDep('arg121_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf210.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (1536, 64)
op210.sizes = ([2, 12, 64], [64])
arg121_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op210_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg121_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf208', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf209', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf210', get_index_10, reduction)
        return store_reduction
op209_op210_op212.snodes[2] =
op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 98304})]
op212.unmet_dependencies = 
    [   MemoryDep('buf208', c0, {c0: 98304}),
        MemoryDep('buf209', c0, {c0: 1536}),
        MemoryDep('buf210', c0, {c0: 1536})]
op212.met_dependencies = 
    [   MemoryDep('arg121_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf212.users = [NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (98304, 1)
op212.sizes = ([2, 12, 64, 64], [])
arg121_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op212_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg121_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf208', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf209', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf210', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf212', get_index_11, truediv, None)
        return store


op211: ExternKernelSchedulerNode(ExternKernelOut)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op211.met_dependencies = [StarDep(name='arg120_1', mode=None)]
op211.outputs = [
    buf211: ExternKernelOut
    buf211.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf211.users = [
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op211.node.kernel = extern_kernels.mm


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 98304})]
op213.unmet_dependencies = [   MemoryDep('buf211', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op213.met_dependencies = []
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf213.users = [NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (98304, 1)
op213.sizes = ([2, 12, 64, 64], [])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op213_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf213', get_index_1, load, None)
        return store


op214: ExternKernelSchedulerNode(ExternKernelOut)
op214.writes = [StarDep(name='buf214', mode=None)]
op214.unmet_dependencies = [StarDep(name='buf212', mode=None), StarDep(name='buf213', mode=None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: ExternKernelOut
    buf214.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf214.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op214.node.kernel = extern_kernels.bmm


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 98304})]
op215.unmet_dependencies = [   MemoryDep('buf214', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op215.met_dependencies = []
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (98304, 1)
op215.sizes = ([2, 64, 12, 64], [])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op215_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf215', get_index_1, load, None)
        return store


op216: ExternKernelSchedulerNode(ExternKernelOut)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op216.met_dependencies = [StarDep(name='arg122_1', mode=None)]
op216.outputs = [
    buf216: ExternKernelOut
    buf216.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False)]
]
op216.node.kernel = extern_kernels.mm


op217_op218_op219_op221: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op217_op218_op219_op221.writes = 
    [   MemoryDep('buf217', c0, {c0: 98304}),
        MemoryDep('buf218', c0, {c0: 128}),
        MemoryDep('buf219', c0, {c0: 128}),
        MemoryDep('buf221', c0, {c0: 98304})]
op217_op218_op219_op221.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 98304}),
        MemoryDep('buf199', c0, {c0: 98304}),
        MemoryDep('buf216', c0, {c0: 98304})]
op217_op218_op219_op221.met_dependencies = 
    [   MemoryDep('arg115_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg123_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg124_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg125_1', c1, {c0: 128, c1: 768})]
op217_op218_op219_op221.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
    ]
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf218.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf219.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op217_op218_op219_op221.snodes[0] =
op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 98304})]
op217.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 98304}),
        MemoryDep('buf199', c0, {c0: 98304}),
        MemoryDep('buf216', c0, {c0: 98304})]
op217.met_dependencies = 
    [   MemoryDep('arg115_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg123_1', c1, {c0: 128, c1: 768})]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
    ]
]
op217.group.device = cuda:0
op217.group.iteration = (98304, 1)
op217.sizes = ([128, 768], [])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg123_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg115_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op217_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg123_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf192', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf199', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg115_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf217', get_index_5, add_3, None)
        return store
op217_op218_op219_op221.snodes[1] =
op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 128})]
op218.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 98304})]
op218.met_dependencies = []
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf218.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (128, 768)
op218.sizes = ([128], [768])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op218_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf218', get_index_1, getitem)
        return store_reduction
op217_op218_op219_op221.snodes[2] =
op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 128})]
op219.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 98304})]
op219.met_dependencies = []
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf219.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (128, 768)
op219.sizes = ([128], [768])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf219_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op219_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf219', get_index_1, getitem_1)
        return store_reduction
op217_op218_op219_op221.snodes[3] =
op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 98304})]
op221.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 98304}),
        MemoryDep('buf218', c0, {c0: 128}),
        MemoryDep('buf219', c0, {c0: 128})]
op221.met_dependencies = 
    [   MemoryDep('arg124_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg125_1', c1, {c0: 128, c1: 768})]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (98304, 1)
op221.sizes = ([128, 768], [])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf219_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg124_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg125_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf221_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op221_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf218', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf219', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg124_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg125_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf221', get_index_5, add_1, None)
        return store


op222: ExternKernelSchedulerNode(ExternKernelOut)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='arg126_1', mode=None)]
op222.outputs = [
    buf222: ExternKernelOut
    buf222.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf222.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False)]
]
op222.node.kernel = extern_kernels.mm


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 393216})]
op223.unmet_dependencies = [MemoryDep('buf222', c0, {c0: 393216})]
op223.met_dependencies = [MemoryDep('arg127_1', c1, {c0: 128, c1: 3072})]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (393216, 1)
op223.sizes = ([128, 3072], [])
buf222_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg127_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op223_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg127_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf222', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg127_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf222', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg127_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf223', get_index_6, mul_5, None)
        return store


op224: ExternKernelSchedulerNode(ExternKernelOut)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf223', mode=None)]
op224.met_dependencies = [StarDep(name='arg128_1', mode=None)]
op224.outputs = [
    buf224: ExternKernelOut
    buf224.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf224.users = [
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
    ]
]
op224.node.kernel = extern_kernels.mm


op225_op226_op228: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op225_op226_op228.writes = 
    [   MemoryDep('buf225', c0, {c0: 128}),
        MemoryDep('buf226', c0, {c0: 128}),
        MemoryDep('buf228', c0, {c0: 98304})]
op225_op226_op228.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 98304}), MemoryDep('buf224', c0, {c0: 98304})]
op225_op226_op228.met_dependencies = 
    [   MemoryDep('arg129_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg130_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg131_1', c1, {c0: 128, c1: 768})]
op225_op226_op228.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf225.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf226.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf228.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False),
    ]
]
op225_op226_op228.snodes[0] =
op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 128})]
op225.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 98304}), MemoryDep('buf224', c0, {c0: 98304})]
op225.met_dependencies = [MemoryDep('arg129_1', c1, {c0: 128, c1: 768})]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf225.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (128, 768)
op225.sizes = ([128], [768])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg129_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op225_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg129_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf225', get_index_3, getitem)
        return store_reduction
op225_op226_op228.snodes[1] =
op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 128})]
op226.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 98304}), MemoryDep('buf224', c0, {c0: 98304})]
op226.met_dependencies = [MemoryDep('arg129_1', c1, {c0: 128, c1: 768})]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf226.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (128, 768)
op226.sizes = ([128], [768])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg129_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op226_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg129_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf226', get_index_3, getitem_1)
        return store_reduction
op225_op226_op228.snodes[2] =
op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 98304})]
op228.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 98304}),
        MemoryDep('buf224', c0, {c0: 98304}),
        MemoryDep('buf225', c0, {c0: 128}),
        MemoryDep('buf226', c0, {c0: 128})]
op228.met_dependencies = 
    [   MemoryDep('arg129_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg130_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg131_1', c1, {c0: 128, c1: 768})]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf228.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False),
    ]
]
op228.group.device = cuda:0
op228.group.iteration = (98304, 1)
op228.sizes = ([128, 768], [])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg129_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg130_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg131_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op228_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg129_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf225', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf226', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg130_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg131_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf228', get_index_7, add_3, None)
        return store


op229: ExternKernelSchedulerNode(ExternKernelOut)
op229.writes = [StarDep(name='buf229', mode=None)]
op229.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op229.met_dependencies = [StarDep(name='arg132_1', mode=None)]
op229.outputs = [
    buf229: ExternKernelOut
    buf229.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf229.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op229.node.kernel = extern_kernels.mm


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op230.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf230.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op230.node.kernel = extern_kernels.mm


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 98304})]
op231.unmet_dependencies = [   MemoryDep('buf229', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op231.met_dependencies = []
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (98304, 1)
op231.sizes = ([2, 12, 64, 64], [])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op231_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf231', get_index_1, load, None)
        return store


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 98304})]
op232.unmet_dependencies = [MemoryDep('buf230', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (98304, 1)
op232.sizes = ([2, 768, 64], [])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op232_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf232', get_index_1, load, None)
        return store


op233: ExternKernelSchedulerNode(ExternKernelOut)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf231', mode=None), StarDep(name='buf232', mode=None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: ExternKernelOut
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf233.users = [
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
    ]
]
op233.node.kernel = extern_kernels.bmm


op234_op235_op237: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op234_op235_op237.writes = 
    [   MemoryDep('buf234', c0, {c0: 1536}),
        MemoryDep('buf235', c0, {c0: 1536}),
        MemoryDep('buf237', c0, {c0: 98304})]
op234_op235_op237.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 98304})]
op234_op235_op237.met_dependencies = 
    [   MemoryDep('arg135_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op234_op235_op237.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf234.users = [
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
    ]
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf235.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op234_op235_op237.snodes[0] =
op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 1536})]
op234.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 98304})]
op234.met_dependencies = 
    [   MemoryDep('arg135_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf234.users = [
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
    ]
]
op234.group.device = cuda:0
op234.group.iteration = (1536, 64)
op234.sizes = ([2, 12, 64], [64])
arg135_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op234_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg135_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf233', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf234', get_index_9, reduction)
        return store_reduction
op234_op235_op237.snodes[1] =
op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 1536})]
op235.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 98304}), MemoryDep('buf234', c0, {c0: 1536})]
op235.met_dependencies = 
    [   MemoryDep('arg135_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf235.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (1536, 64)
op235.sizes = ([2, 12, 64], [64])
arg135_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op235_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg135_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf233', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf234', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf235', get_index_10, reduction)
        return store_reduction
op234_op235_op237.snodes[2] =
op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 98304})]
op237.unmet_dependencies = 
    [   MemoryDep('buf233', c0, {c0: 98304}),
        MemoryDep('buf234', c0, {c0: 1536}),
        MemoryDep('buf235', c0, {c0: 1536})]
op237.met_dependencies = 
    [   MemoryDep('arg135_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (98304, 1)
op237.sizes = ([2, 12, 64, 64], [])
arg135_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op237_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg135_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf233', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf234', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf235', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf237', get_index_11, truediv, None)
        return store


op236: ExternKernelSchedulerNode(ExternKernelOut)
op236.writes = [StarDep(name='buf236', mode=None)]
op236.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op236.met_dependencies = [StarDep(name='arg134_1', mode=None)]
op236.outputs = [
    buf236: ExternKernelOut
    buf236.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf236.users = [
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op236.node.kernel = extern_kernels.mm


op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 98304})]
op238.unmet_dependencies = [   MemoryDep('buf236', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op238.met_dependencies = []
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (98304, 1)
op238.sizes = ([2, 12, 64, 64], [])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op238_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf238', get_index_1, load, None)
        return store


op239: ExternKernelSchedulerNode(ExternKernelOut)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf237', mode=None), StarDep(name='buf238', mode=None)]
op239.met_dependencies = []
op239.outputs = [
    buf239: ExternKernelOut
    buf239.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf239.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.node.kernel = extern_kernels.bmm


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 98304})]
op240.unmet_dependencies = [   MemoryDep('buf239', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op240.met_dependencies = []
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (98304, 1)
op240.sizes = ([2, 64, 12, 64], [])
buf239_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf240_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op240_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf240', get_index_1, load, None)
        return store


op241: ExternKernelSchedulerNode(ExternKernelOut)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op241.met_dependencies = [StarDep(name='arg136_1', mode=None)]
op241.outputs = [
    buf241: ExternKernelOut
    buf241.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf241.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False)]
]
op241.node.kernel = extern_kernels.mm


op242_op243_op244_op246: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op242_op243_op244_op246.writes = 
    [   MemoryDep('buf242', c0, {c0: 98304}),
        MemoryDep('buf243', c0, {c0: 128}),
        MemoryDep('buf244', c0, {c0: 128}),
        MemoryDep('buf246', c0, {c0: 98304})]
op242_op243_op244_op246.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 98304}),
        MemoryDep('buf224', c0, {c0: 98304}),
        MemoryDep('buf241', c0, {c0: 98304})]
op242_op243_op244_op246.met_dependencies = 
    [   MemoryDep('arg129_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg137_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg138_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg139_1', c1, {c0: 128, c1: 768})]
op242_op243_op244_op246.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf242.users = [
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf243.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf244.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op242_op243_op244_op246.snodes[0] =
op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 98304})]
op242.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 98304}),
        MemoryDep('buf224', c0, {c0: 98304}),
        MemoryDep('buf241', c0, {c0: 98304})]
op242.met_dependencies = 
    [   MemoryDep('arg129_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg137_1', c1, {c0: 128, c1: 768})]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf242.users = [
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op242.group.device = cuda:0
op242.group.iteration = (98304, 1)
op242.sizes = ([128, 768], [])
buf241_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg137_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg129_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op242_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf217', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf224', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg129_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf242', get_index_5, add_3, None)
        return store
op242_op243_op244_op246.snodes[1] =
op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 128})]
op243.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 98304})]
op243.met_dependencies = []
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf243.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (128, 768)
op243.sizes = ([128], [768])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op243_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf243', get_index_1, getitem)
        return store_reduction
op242_op243_op244_op246.snodes[2] =
op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 128})]
op244.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 98304})]
op244.met_dependencies = []
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf244.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (128, 768)
op244.sizes = ([128], [768])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf244_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op244_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf244', get_index_1, getitem_1)
        return store_reduction
op242_op243_op244_op246.snodes[3] =
op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 98304})]
op246.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 98304}),
        MemoryDep('buf243', c0, {c0: 128}),
        MemoryDep('buf244', c0, {c0: 128})]
op246.met_dependencies = 
    [   MemoryDep('arg138_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg139_1', c1, {c0: 128, c1: 768})]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (98304, 1)
op246.sizes = ([128, 768], [])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf244_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg138_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg139_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op246_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf243', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf244', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg138_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg139_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf246', get_index_5, add_1, None)
        return store


op247: ExternKernelSchedulerNode(ExternKernelOut)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf246', mode=None)]
op247.met_dependencies = [StarDep(name='arg140_1', mode=None)]
op247.outputs = [
    buf247: ExternKernelOut
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf247.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False)]
]
op247.node.kernel = extern_kernels.mm


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 393216})]
op248.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 393216})]
op248.met_dependencies = [MemoryDep('arg141_1', c1, {c0: 128, c1: 3072})]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (393216, 1)
op248.sizes = ([128, 3072], [])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg141_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op248_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg141_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf247', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg141_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf247', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg141_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf248', get_index_6, mul_5, None)
        return store


op249: ExternKernelSchedulerNode(ExternKernelOut)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf248', mode=None)]
op249.met_dependencies = [StarDep(name='arg142_1', mode=None)]
op249.outputs = [
    buf249: ExternKernelOut
    buf249.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf249.users = [
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op249.node.kernel = extern_kernels.mm


op250_op251_op253: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op250_op251_op253.writes = 
    [   MemoryDep('buf250', c0, {c0: 128}),
        MemoryDep('buf251', c0, {c0: 128}),
        MemoryDep('buf253', c0, {c0: 98304})]
op250_op251_op253.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 98304}), MemoryDep('buf249', c0, {c0: 98304})]
op250_op251_op253.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg144_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg145_1', c1, {c0: 128, c1: 768})]
op250_op251_op253.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf250.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf251.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf253.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False),
    ]
]
op250_op251_op253.snodes[0] =
op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 128})]
op250.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 98304}), MemoryDep('buf249', c0, {c0: 98304})]
op250.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 128, c1: 768})]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf250.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (128, 768)
op250.sizes = ([128], [768])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op250_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf250', get_index_3, getitem)
        return store_reduction
op250_op251_op253.snodes[1] =
op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 128})]
op251.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 98304}), MemoryDep('buf249', c0, {c0: 98304})]
op251.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 128, c1: 768})]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf251.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (128, 768)
op251.sizes = ([128], [768])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op251_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf251', get_index_3, getitem_1)
        return store_reduction
op250_op251_op253.snodes[2] =
op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 98304})]
op253.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 98304}),
        MemoryDep('buf249', c0, {c0: 98304}),
        MemoryDep('buf250', c0, {c0: 128}),
        MemoryDep('buf251', c0, {c0: 128})]
op253.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg144_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg145_1', c1, {c0: 128, c1: 768})]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf253.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False),
    ]
]
op253.group.device = cuda:0
op253.group.iteration = (98304, 1)
op253.sizes = ([128, 768], [])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg144_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg145_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op253_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf250', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf251', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg144_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg145_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf253', get_index_7, add_3, None)
        return store


op254: ExternKernelSchedulerNode(ExternKernelOut)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op254.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op254.outputs = [
    buf254: ExternKernelOut
    buf254.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf254.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op254.node.kernel = extern_kernels.mm


op255: ExternKernelSchedulerNode(ExternKernelOut)
op255.writes = [StarDep(name='buf255', mode=None)]
op255.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op255.met_dependencies = [StarDep(name='arg147_1', mode=None)]
op255.outputs = [
    buf255: ExternKernelOut
    buf255.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf255.users = [
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op255.node.kernel = extern_kernels.mm


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 98304})]
op256.unmet_dependencies = [   MemoryDep('buf254', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op256.met_dependencies = []
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf256.users = [NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (98304, 1)
op256.sizes = ([2, 12, 64, 64], [])
buf254_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf256_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op256_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf256', get_index_1, load, None)
        return store


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 98304})]
op257.unmet_dependencies = [MemoryDep('buf255', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op257.met_dependencies = []
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf257.users = [NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (98304, 1)
op257.sizes = ([2, 768, 64], [])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op257_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf257', get_index_1, load, None)
        return store


op258: ExternKernelSchedulerNode(ExternKernelOut)
op258.writes = [StarDep(name='buf258', mode=None)]
op258.unmet_dependencies = [StarDep(name='buf256', mode=None), StarDep(name='buf257', mode=None)]
op258.met_dependencies = []
op258.outputs = [
    buf258: ExternKernelOut
    buf258.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf258.users = [
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False),
    ]
]
op258.node.kernel = extern_kernels.bmm


op259_op260_op262: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op259_op260_op262.writes = 
    [   MemoryDep('buf259', c0, {c0: 1536}),
        MemoryDep('buf260', c0, {c0: 1536}),
        MemoryDep('buf262', c0, {c0: 98304})]
op259_op260_op262.unmet_dependencies = [MemoryDep('buf258', c0, {c0: 98304})]
op259_op260_op262.met_dependencies = 
    [   MemoryDep('arg149_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op259_op260_op262.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
    ]
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf260.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf262.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op259_op260_op262.snodes[0] =
op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 1536})]
op259.unmet_dependencies = [MemoryDep('buf258', c0, {c0: 98304})]
op259.met_dependencies = 
    [   MemoryDep('arg149_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
    ]
]
op259.group.device = cuda:0
op259.group.iteration = (1536, 64)
op259.sizes = ([2, 12, 64], [64])
arg149_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op259_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg149_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf258', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf259', get_index_9, reduction)
        return store_reduction
op259_op260_op262.snodes[1] =
op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 1536})]
op260.unmet_dependencies = [MemoryDep('buf258', c0, {c0: 98304}), MemoryDep('buf259', c0, {c0: 1536})]
op260.met_dependencies = 
    [   MemoryDep('arg149_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf260.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (1536, 64)
op260.sizes = ([2, 12, 64], [64])
arg149_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op260_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg149_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf258', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf259', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf260', get_index_10, reduction)
        return store_reduction
op259_op260_op262.snodes[2] =
op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 98304})]
op262.unmet_dependencies = 
    [   MemoryDep('buf258', c0, {c0: 98304}),
        MemoryDep('buf259', c0, {c0: 1536}),
        MemoryDep('buf260', c0, {c0: 1536})]
op262.met_dependencies = 
    [   MemoryDep('arg149_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf262.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op262.group.device = cuda:0
op262.group.iteration = (98304, 1)
op262.sizes = ([2, 12, 64, 64], [])
arg149_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op262_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg149_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf258', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf259', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf260', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf262', get_index_11, truediv, None)
        return store


op261: ExternKernelSchedulerNode(ExternKernelOut)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op261.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op261.outputs = [
    buf261: ExternKernelOut
    buf261.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf261.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op261.node.kernel = extern_kernels.mm


op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 98304})]
op263.unmet_dependencies = [   MemoryDep('buf261', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op263.met_dependencies = []
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (98304, 1)
op263.sizes = ([2, 12, 64, 64], [])
buf261_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf263_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op263_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf263', get_index_1, load, None)
        return store


op264: ExternKernelSchedulerNode(ExternKernelOut)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = [StarDep(name='buf262', mode=None), StarDep(name='buf263', mode=None)]
op264.met_dependencies = []
op264.outputs = [
    buf264: ExternKernelOut
    buf264.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf264.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op264.node.kernel = extern_kernels.bmm


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 98304})]
op265.unmet_dependencies = [   MemoryDep('buf264', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op265.met_dependencies = []
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (98304, 1)
op265.sizes = ([2, 64, 12, 64], [])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op265_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf265', get_index_1, load, None)
        return store


op266: ExternKernelSchedulerNode(ExternKernelOut)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op266.met_dependencies = [StarDep(name='arg150_1', mode=None)]
op266.outputs = [
    buf266: ExternKernelOut
    buf266.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf266.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False)]
]
op266.node.kernel = extern_kernels.mm


op267_op268_op269_op271: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op267_op268_op269_op271.writes = 
    [   MemoryDep('buf267', c0, {c0: 98304}),
        MemoryDep('buf268', c0, {c0: 128}),
        MemoryDep('buf269', c0, {c0: 128}),
        MemoryDep('buf271', c0, {c0: 98304})]
op267_op268_op269_op271.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 98304}),
        MemoryDep('buf249', c0, {c0: 98304}),
        MemoryDep('buf266', c0, {c0: 98304})]
op267_op268_op269_op271.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg151_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg152_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg153_1', c1, {c0: 128, c1: 768})]
op267_op268_op269_op271.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
    ]
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf268.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf269.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op267_op268_op269_op271.snodes[0] =
op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 98304})]
op267.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 98304}),
        MemoryDep('buf249', c0, {c0: 98304}),
        MemoryDep('buf266', c0, {c0: 98304})]
op267.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg151_1', c1, {c0: 128, c1: 768})]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
    ]
]
op267.group.device = cuda:0
op267.group.iteration = (98304, 1)
op267.sizes = ([128, 768], [])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg151_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op267_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg151_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf242', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf249', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg143_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf267', get_index_5, add_3, None)
        return store
op267_op268_op269_op271.snodes[1] =
op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 128})]
op268.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 98304})]
op268.met_dependencies = []
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf268.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (128, 768)
op268.sizes = ([128], [768])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf268_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op268_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf268', get_index_1, getitem)
        return store_reduction
op267_op268_op269_op271.snodes[2] =
op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 128})]
op269.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 98304})]
op269.met_dependencies = []
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf269.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (128, 768)
op269.sizes = ([128], [768])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op269_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf269', get_index_1, getitem_1)
        return store_reduction
op267_op268_op269_op271.snodes[3] =
op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 98304})]
op271.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 98304}),
        MemoryDep('buf268', c0, {c0: 128}),
        MemoryDep('buf269', c0, {c0: 128})]
op271.met_dependencies = 
    [   MemoryDep('arg152_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg153_1', c1, {c0: 128, c1: 768})]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (98304, 1)
op271.sizes = ([128, 768], [])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf268_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg152_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg153_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf271_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op271_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf268', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf269', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg152_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg153_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf271', get_index_5, add_1, None)
        return store


op272: ExternKernelSchedulerNode(ExternKernelOut)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf271', mode=None)]
op272.met_dependencies = [StarDep(name='arg154_1', mode=None)]
op272.outputs = [
    buf272: ExternKernelOut
    buf272.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False)]
]
op272.node.kernel = extern_kernels.mm


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 393216})]
op273.unmet_dependencies = [MemoryDep('buf272', c0, {c0: 393216})]
op273.met_dependencies = [MemoryDep('arg155_1', c1, {c0: 128, c1: 3072})]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (393216, 1)
op273.sizes = ([128, 3072], [])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg155_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op273_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg155_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf272', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg155_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf272', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg155_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf273', get_index_6, mul_5, None)
        return store


op274: ExternKernelSchedulerNode(ExternKernelOut)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf273', mode=None)]
op274.met_dependencies = [StarDep(name='arg156_1', mode=None)]
op274.outputs = [
    buf274: ExternKernelOut
    buf274.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf274.users = [
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
    ]
]
op274.node.kernel = extern_kernels.mm


op275_op276_op278: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op275_op276_op278.writes = 
    [   MemoryDep('buf275', c0, {c0: 128}),
        MemoryDep('buf276', c0, {c0: 128}),
        MemoryDep('buf278', c0, {c0: 98304})]
op275_op276_op278.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 98304}), MemoryDep('buf274', c0, {c0: 98304})]
op275_op276_op278.met_dependencies = 
    [   MemoryDep('arg157_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg158_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg159_1', c1, {c0: 128, c1: 768})]
op275_op276_op278.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf275.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf276.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf278.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False),
    ]
]
op275_op276_op278.snodes[0] =
op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 128})]
op275.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 98304}), MemoryDep('buf274', c0, {c0: 98304})]
op275.met_dependencies = [MemoryDep('arg157_1', c1, {c0: 128, c1: 768})]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf275.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (128, 768)
op275.sizes = ([128], [768])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg157_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op275_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg157_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf275', get_index_3, getitem)
        return store_reduction
op275_op276_op278.snodes[1] =
op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 128})]
op276.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 98304}), MemoryDep('buf274', c0, {c0: 98304})]
op276.met_dependencies = [MemoryDep('arg157_1', c1, {c0: 128, c1: 768})]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf276.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (128, 768)
op276.sizes = ([128], [768])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg157_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op276_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg157_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf276', get_index_3, getitem_1)
        return store_reduction
op275_op276_op278.snodes[2] =
op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 98304})]
op278.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 98304}),
        MemoryDep('buf274', c0, {c0: 98304}),
        MemoryDep('buf275', c0, {c0: 128}),
        MemoryDep('buf276', c0, {c0: 128})]
op278.met_dependencies = 
    [   MemoryDep('arg157_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg158_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg159_1', c1, {c0: 128, c1: 768})]
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf278.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False),
    ]
]
op278.group.device = cuda:0
op278.group.iteration = (98304, 1)
op278.sizes = ([128, 768], [])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg157_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg158_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg159_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf278_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op278_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg157_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf275', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf276', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg158_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg159_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf278', get_index_7, add_3, None)
        return store


op279: ExternKernelSchedulerNode(ExternKernelOut)
op279.writes = [StarDep(name='buf279', mode=None)]
op279.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op279.met_dependencies = [StarDep(name='arg160_1', mode=None)]
op279.outputs = [
    buf279: ExternKernelOut
    buf279.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf279.users = [NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op279.node.kernel = extern_kernels.mm


op280: ExternKernelSchedulerNode(ExternKernelOut)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op280.met_dependencies = [StarDep(name='arg161_1', mode=None)]
op280.outputs = [
    buf280: ExternKernelOut
    buf280.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf280.users = [
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op280.node.kernel = extern_kernels.mm


op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 98304})]
op281.unmet_dependencies = [   MemoryDep('buf279', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op281.met_dependencies = []
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf281.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op281.group.device = cuda:0
op281.group.iteration = (98304, 1)
op281.sizes = ([2, 12, 64, 64], [])
buf279_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf281_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op281_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf281', get_index_1, load, None)
        return store


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 98304})]
op282.unmet_dependencies = [MemoryDep('buf280', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op282.met_dependencies = []
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (98304, 1)
op282.sizes = ([2, 768, 64], [])
buf280_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf282_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op282_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf282', get_index_1, load, None)
        return store


op283: ExternKernelSchedulerNode(ExternKernelOut)
op283.writes = [StarDep(name='buf283', mode=None)]
op283.unmet_dependencies = [StarDep(name='buf281', mode=None), StarDep(name='buf282', mode=None)]
op283.met_dependencies = []
op283.outputs = [
    buf283: ExternKernelOut
    buf283.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf283.users = [
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False),
    ]
]
op283.node.kernel = extern_kernels.bmm


op284_op285_op287: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op284_op285_op287.writes = 
    [   MemoryDep('buf284', c0, {c0: 1536}),
        MemoryDep('buf285', c0, {c0: 1536}),
        MemoryDep('buf287', c0, {c0: 98304})]
op284_op285_op287.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 98304})]
op284_op285_op287.met_dependencies = 
    [   MemoryDep('arg163_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op284_op285_op287.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf284.users = [
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
    ]
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf285.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf287.users = [NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op284_op285_op287.snodes[0] =
op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 1536})]
op284.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 98304})]
op284.met_dependencies = 
    [   MemoryDep('arg163_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf284.users = [
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
    ]
]
op284.group.device = cuda:0
op284.group.iteration = (1536, 64)
op284.sizes = ([2, 12, 64], [64])
arg163_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op284_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg163_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf283', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf284', get_index_9, reduction)
        return store_reduction
op284_op285_op287.snodes[1] =
op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 1536})]
op285.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 98304}), MemoryDep('buf284', c0, {c0: 1536})]
op285.met_dependencies = 
    [   MemoryDep('arg163_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf285.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (1536, 64)
op285.sizes = ([2, 12, 64], [64])
arg163_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf285_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op285_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg163_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf283', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf284', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf285', get_index_10, reduction)
        return store_reduction
op284_op285_op287.snodes[2] =
op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 98304})]
op287.unmet_dependencies = 
    [   MemoryDep('buf283', c0, {c0: 98304}),
        MemoryDep('buf284', c0, {c0: 1536}),
        MemoryDep('buf285', c0, {c0: 1536})]
op287.met_dependencies = 
    [   MemoryDep('arg163_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf287.users = [NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (98304, 1)
op287.sizes = ([2, 12, 64, 64], [])
arg163_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf285_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf287_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op287_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg163_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf283', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf284', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf285', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf287', get_index_11, truediv, None)
        return store


op286: ExternKernelSchedulerNode(ExternKernelOut)
op286.writes = [StarDep(name='buf286', mode=None)]
op286.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op286.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op286.outputs = [
    buf286: ExternKernelOut
    buf286.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf286.users = [
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op286.node.kernel = extern_kernels.mm


op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 98304})]
op288.unmet_dependencies = [   MemoryDep('buf286', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op288.met_dependencies = []
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf288.users = [NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (98304, 1)
op288.sizes = ([2, 12, 64, 64], [])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf288_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op288_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf288', get_index_1, load, None)
        return store


op289: ExternKernelSchedulerNode(ExternKernelOut)
op289.writes = [StarDep(name='buf289', mode=None)]
op289.unmet_dependencies = [StarDep(name='buf287', mode=None), StarDep(name='buf288', mode=None)]
op289.met_dependencies = []
op289.outputs = [
    buf289: ExternKernelOut
    buf289.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf289.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op289.node.kernel = extern_kernels.bmm


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 98304})]
op290.unmet_dependencies = [   MemoryDep('buf289', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op290.met_dependencies = []
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf290.users = [NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (98304, 1)
op290.sizes = ([2, 64, 12, 64], [])
buf289_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op290_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf290', get_index_1, load, None)
        return store


op291: ExternKernelSchedulerNode(ExternKernelOut)
op291.writes = [StarDep(name='buf291', mode=None)]
op291.unmet_dependencies = [StarDep(name='buf290', mode=None)]
op291.met_dependencies = [StarDep(name='arg164_1', mode=None)]
op291.outputs = [
    buf291: ExternKernelOut
    buf291.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf291.users = [NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False)]
]
op291.node.kernel = extern_kernels.mm


op292_op293_op294_op296: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op292_op293_op294_op296.writes = 
    [   MemoryDep('buf292', c0, {c0: 98304}),
        MemoryDep('buf293', c0, {c0: 128}),
        MemoryDep('buf294', c0, {c0: 128}),
        MemoryDep('buf296', c0, {c0: 98304})]
op292_op293_op294_op296.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 98304}),
        MemoryDep('buf274', c0, {c0: 98304}),
        MemoryDep('buf291', c0, {c0: 98304})]
op292_op293_op294_op296.met_dependencies = 
    [   MemoryDep('arg157_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg165_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg166_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg167_1', c1, {c0: 128, c1: 768})]
op292_op293_op294_op296.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf292.users = [
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False),
    ]
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf293.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf294.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf296.users = [NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op292_op293_op294_op296.snodes[0] =
op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 98304})]
op292.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 98304}),
        MemoryDep('buf274', c0, {c0: 98304}),
        MemoryDep('buf291', c0, {c0: 98304})]
op292.met_dependencies = 
    [   MemoryDep('arg157_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg165_1', c1, {c0: 128, c1: 768})]
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf292.users = [
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False),
    ]
]
op292.group.device = cuda:0
op292.group.iteration = (98304, 1)
op292.sizes = ([128, 768], [])
buf291_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg165_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg157_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op292_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg165_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf267', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf274', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg157_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf292', get_index_5, add_3, None)
        return store
op292_op293_op294_op296.snodes[1] =
op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 128})]
op293.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 98304})]
op293.met_dependencies = []
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf293.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op293.group.device = cuda:0
op293.group.iteration = (128, 768)
op293.sizes = ([128], [768])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf293_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op293_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf293', get_index_1, getitem)
        return store_reduction
op292_op293_op294_op296.snodes[2] =
op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 128})]
op294.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 98304})]
op294.met_dependencies = []
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf294.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op294.group.device = cuda:0
op294.group.iteration = (128, 768)
op294.sizes = ([128], [768])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf294_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op294_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf294', get_index_1, getitem_1)
        return store_reduction
op292_op293_op294_op296.snodes[3] =
op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 98304})]
op296.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 98304}),
        MemoryDep('buf293', c0, {c0: 128}),
        MemoryDep('buf294', c0, {c0: 128})]
op296.met_dependencies = 
    [   MemoryDep('arg166_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg167_1', c1, {c0: 128, c1: 768})]
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf296.users = [NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op296.group.device = cuda:0
op296.group.iteration = (98304, 1)
op296.sizes = ([128, 768], [])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf293_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf294_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg166_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg167_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf296_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op296_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf293', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf294', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg166_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg167_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf296', get_index_5, add_1, None)
        return store


op297: ExternKernelSchedulerNode(ExternKernelOut)
op297.writes = [StarDep(name='buf297', mode=None)]
op297.unmet_dependencies = [StarDep(name='buf296', mode=None)]
op297.met_dependencies = [StarDep(name='arg168_1', mode=None)]
op297.outputs = [
    buf297: ExternKernelOut
    buf297.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf297.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False)]
]
op297.node.kernel = extern_kernels.mm


op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 393216})]
op298.unmet_dependencies = [MemoryDep('buf297', c0, {c0: 393216})]
op298.met_dependencies = [MemoryDep('arg169_1', c1, {c0: 128, c1: 3072})]
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf298.users = [NodeUser(node=ExternKernelSchedulerNode(name='op299'), can_inplace=False, is_weak=False)]
]
op298.group.device = cuda:0
op298.group.iteration = (393216, 1)
op298.sizes = ([128, 3072], [])
buf297_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg169_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf298_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op298_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf297', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg169_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf297', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg169_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf297', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg169_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf298', get_index_6, mul_5, None)
        return store


op299: ExternKernelSchedulerNode(ExternKernelOut)
op299.writes = [StarDep(name='buf299', mode=None)]
op299.unmet_dependencies = [StarDep(name='buf298', mode=None)]
op299.met_dependencies = [StarDep(name='arg170_1', mode=None)]
op299.outputs = [
    buf299: ExternKernelOut
    buf299.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf299.users = [
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False),
    ]
]
op299.node.kernel = extern_kernels.mm


op300_op301_op303: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op300_op301_op303.writes = 
    [   MemoryDep('buf300', c0, {c0: 128}),
        MemoryDep('buf301', c0, {c0: 128}),
        MemoryDep('buf303', c0, {c0: 98304})]
op300_op301_op303.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 98304}), MemoryDep('buf299', c0, {c0: 98304})]
op300_op301_op303.met_dependencies = 
    [   MemoryDep('arg171_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg172_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg173_1', c1, {c0: 128, c1: 768})]
op300_op301_op303.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf300.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf301.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf303.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op300_op301_op303.snodes[0] =
op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 128})]
op300.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 98304}), MemoryDep('buf299', c0, {c0: 98304})]
op300.met_dependencies = [MemoryDep('arg171_1', c1, {c0: 128, c1: 768})]
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf300.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op300.group.device = cuda:0
op300.group.iteration = (128, 768)
op300.sizes = ([128], [768])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf299_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg171_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf300_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op300_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf299', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg171_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf300', get_index_3, getitem)
        return store_reduction
op300_op301_op303.snodes[1] =
op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 128})]
op301.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 98304}), MemoryDep('buf299', c0, {c0: 98304})]
op301.met_dependencies = [MemoryDep('arg171_1', c1, {c0: 128, c1: 768})]
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf301.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (128, 768)
op301.sizes = ([128], [768])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf299_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg171_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf301_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op301_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf299', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg171_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf301', get_index_3, getitem_1)
        return store_reduction
op300_op301_op303.snodes[2] =
op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 98304})]
op303.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 98304}),
        MemoryDep('buf299', c0, {c0: 98304}),
        MemoryDep('buf300', c0, {c0: 128}),
        MemoryDep('buf301', c0, {c0: 128})]
op303.met_dependencies = 
    [   MemoryDep('arg171_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg172_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg173_1', c1, {c0: 128, c1: 768})]
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf303.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op303.group.device = cuda:0
op303.group.iteration = (98304, 1)
op303.sizes = ([128, 768], [])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf299_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg171_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf300_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf301_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg172_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg173_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf303_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op303_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf299', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg171_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf300', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf301', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg172_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg173_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf303', get_index_7, add_3, None)
        return store




# ===== run_2025_10_19_03_43_12_574129-pid_19/torchinductor/model__0_inference_0.0/ir_pre_fusion.txt =====
op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 128})]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 128}),
        MemoryDep('arg1_1', c1 + 768*tmp0, {c0: 128, c1: 768}),
        MemoryDep('arg3_1', c1, {c0: 2, c1: 49152})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf0.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (128, 768)
op0.sizes = ([2, 64], [768])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[50257, 768], stride=[768, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.float32, size=[2048, 768], stride=[768, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op0_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 768}
    index0 = 64*p0 + p1
    index1 = 768*indirect0 + p2
    index2 = p1
    index3 = 2048
    index4 = 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg3_1', get_index_4)
        add = ops.add(load_1, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf0', get_index_5, getitem)
        return store_reduction


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 128})]
op1.unmet_dependencies = []
op1.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 128}),
        MemoryDep('arg1_1', c1 + 768*tmp0, {c0: 128, c1: 768}),
        MemoryDep('arg3_1', c1, {c0: 2, c1: 49152})]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf1.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (128, 768)
op1.sizes = ([2, 64], [768])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[50257, 768], stride=[768, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.float32, size=[2048, 768], stride=[768, 1])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op1_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 768}
    index0 = 64*p0 + p1
    index1 = 768*indirect0 + p2
    index2 = p1
    index3 = 2048
    index4 = 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg3_1', get_index_4)
        add = ops.add(load_1, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf1', get_index_5, getitem_1)
        return store_reduction


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 98304})]
op3.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 128}), MemoryDep('buf1', c0, {c0: 128})]
op3.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 128}),
        MemoryDep('arg1_1', c1 + 768*tmp0, {c0: 128, c1: 768}),
        MemoryDep('arg3_1', c1, {c0: 2, c1: 49152}),
        MemoryDep('arg4_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg5_1', c1, {c0: 128, c1: 768})]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf3.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (98304, 1)
op3.sizes = ([2, 64, 768], [])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[50257, 768], stride=[768, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.float32, size=[2048, 768], stride=[768, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg4_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg5_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op3_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 768}
    index0 = 64*p0 + p1
    index1 = 768*indirect0 + p2
    index2 = p1
    index3 = 2048
    index4 = 768*p1 + p2
    index5 = p2
    index6 = 49152*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg3_1', get_index_4)
        add = ops.add(load_1, load_2)
        get_index_5 = self.get_index('index0')
        load_3 = ops.load('buf0', get_index_5)
        sub = ops.sub(add, load_3)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_6)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_7 = self.get_index('index5')
        load_5 = ops.load('arg4_1', get_index_7)
        mul_1 = ops.mul(mul, load_5)
        get_index_8 = self.get_index('index5')
        load_6 = ops.load('arg5_1', get_index_8)
        add_2 = ops.add(mul_1, load_6)
        get_index_9 = self.get_index('index6')
        store = ops.store('buf3', get_index_9, add_2, None)
        return store


op4: ExternKernelSchedulerNode(ExternKernelOut)
op4.writes = [StarDep(name='buf4', mode=None)]
op4.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op4.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op4.outputs = [
    buf4: ExternKernelOut
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf4.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op4.node.kernel = extern_kernels.mm


op5: ExternKernelSchedulerNode(ExternKernelOut)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op5.met_dependencies = [StarDep(name='arg7_1', mode=None)]
op5.outputs = [
    buf5: ExternKernelOut
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf5.users = [
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op5.node.kernel = extern_kernels.mm


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 98304})]
op6.unmet_dependencies = [   MemoryDep('buf4', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op6.met_dependencies = []
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (98304, 1)
op6.sizes = ([2, 12, 64, 64], [])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op6_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf6', get_index_1, load, None)
        return store


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 98304})]
op7.unmet_dependencies = [MemoryDep('buf5', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op7.met_dependencies = []
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (98304, 1)
op7.sizes = ([2, 768, 64], [])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op7_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf7', get_index_1, load, None)
        return store


op8: ExternKernelSchedulerNode(ExternKernelOut)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf6', mode=None), StarDep(name='buf7', mode=None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ExternKernelOut
    buf8.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False),
    ]
]
op8.node.kernel = extern_kernels.bmm


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 1536})]
op9.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 98304})]
op9.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg9_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf9.users = [
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
]
op9.group.device = cuda:0
op9.group.iteration = (1536, 64)
op9.sizes = ([2, 12, 64], [64])
arg9_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf9_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op9_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg9_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf8', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf9', get_index_9, reduction)
        return store_reduction


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 1536})]
op10.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 98304}), MemoryDep('buf9', c0, {c0: 1536})]
op10.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg9_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf10.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (1536, 64)
op10.sizes = ([2, 12, 64], [64])
arg9_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf9_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op10_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg9_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf8', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf9', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf10', get_index_10, reduction)
        return store_reduction


op11: ExternKernelSchedulerNode(ExternKernelOut)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op11.met_dependencies = [StarDep(name='arg8_1', mode=None)]
op11.outputs = [
    buf11: ExternKernelOut
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf11.users = [
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op11.node.kernel = extern_kernels.mm


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 98304})]
op12.unmet_dependencies = 
    [   MemoryDep('buf10', c0, {c0: 1536}),
        MemoryDep('buf8', c0, {c0: 98304}),
        MemoryDep('buf9', c0, {c0: 1536})]
op12.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg9_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (98304, 1)
op12.sizes = ([2, 12, 64, 64], [])
arg9_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf9_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op12_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg9_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf8', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf9', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf10', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf12', get_index_11, truediv, None)
        return store


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 98304})]
op13.unmet_dependencies = [   MemoryDep('buf11', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op13.met_dependencies = []
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (98304, 1)
op13.sizes = ([2, 12, 64, 64], [])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf13_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op13_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf13', get_index_1, load, None)
        return store


op14: ExternKernelSchedulerNode(ExternKernelOut)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf12', mode=None), StarDep(name='buf13', mode=None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ExternKernelOut
    buf14.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.node.kernel = extern_kernels.bmm


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 98304})]
op15.unmet_dependencies = [   MemoryDep('buf14', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (98304, 1)
op15.sizes = ([2, 64, 12, 64], [])
buf14_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op15_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf15', get_index_1, load, None)
        return store


op16: ExternKernelSchedulerNode(ExternKernelOut)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op16.met_dependencies = [StarDep(name='arg10_1', mode=None)]
op16.outputs = [
    buf16: ExternKernelOut
    buf16.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False)]
]
op16.node.kernel = extern_kernels.mm


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 98304})]
op17.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 98304})]
op17.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 128}),
        MemoryDep('arg11_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg1_1', c1 + 768*tmp0, {c0: 128, c1: 768}),
        MemoryDep('arg3_1', c1, {c0: 2, c1: 49152})]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
]
op17.group.device = cuda:0
op17.group.iteration = (98304, 1)
op17.sizes = ([2, 64, 768], [])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg11_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[50257, 768], stride=[768, 1])
arg3_1_layout = FixedLayout('cuda:0', torch.float32, size=[2048, 768], stride=[768, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op17_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 768}
    index0 = 49152*p0 + 768*p1 + p2
    index1 = p2
    index2 = 64*p0 + p1
    index3 = 768*indirect0 + p2
    index4 = p1
    index5 = 2048
    index6 = 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg11_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg0_1', get_index_2)
        set_indirect0 = self.set_indirect0(load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg1_1', get_index_3)
        get_index_4 = self.get_index('index4')
        get_index_5 = self.get_index('index5')
        check_bounds = ops.check_bounds(get_index_4, get_index_5, False, False)
        get_index_6 = self.get_index('index6')
        load_4 = ops.load('arg3_1', get_index_6)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(add, add_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf17', get_index_7, add_2, None)
        return store


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 128})]
op18.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 98304})]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (128, 768)
op18.sizes = ([128], [768])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op18_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf18', get_index_1, getitem)
        return store_reduction


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 128})]
op19.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 98304})]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (128, 768)
op19.sizes = ([128], [768])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op19_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf19', get_index_1, getitem_1)
        return store_reduction


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 98304})]
op21.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 98304}),
        MemoryDep('buf18', c0, {c0: 128}),
        MemoryDep('buf19', c0, {c0: 128})]
op21.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg13_1', c1, {c0: 128, c1: 768})]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (98304, 1)
op21.sizes = ([128, 768], [])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg12_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg13_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op21_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf18', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf19', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg12_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg13_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf21', get_index_5, add_1, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg14_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.node.kernel = extern_kernels.mm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 393216})]
op23.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 393216})]
op23.met_dependencies = [MemoryDep('arg15_1', c1, {c0: 128, c1: 3072})]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (393216, 1)
op23.sizes = ([128, 3072], [])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg15_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op23_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg15_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf22', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg15_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf22', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg15_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf23', get_index_6, mul_5, None)
        return store


op24: ExternKernelSchedulerNode(ExternKernelOut)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelOut
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
]
op24.node.kernel = extern_kernels.mm


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 128})]
op25.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 98304}), MemoryDep('buf24', c0, {c0: 98304})]
op25.met_dependencies = [MemoryDep('arg17_1', c1, {c0: 128, c1: 768})]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf25.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (128, 768)
op25.sizes = ([128], [768])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg17_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op25_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg17_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf25', get_index_3, getitem)
        return store_reduction


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 128})]
op26.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 98304}), MemoryDep('buf24', c0, {c0: 98304})]
op26.met_dependencies = [MemoryDep('arg17_1', c1, {c0: 128, c1: 768})]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf26.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (128, 768)
op26.sizes = ([128], [768])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg17_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op26_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg17_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf26', get_index_3, getitem_1)
        return store_reduction


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 98304})]
op28.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 98304}),
        MemoryDep('buf24', c0, {c0: 98304}),
        MemoryDep('buf25', c0, {c0: 128}),
        MemoryDep('buf26', c0, {c0: 128})]
op28.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg18_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg19_1', c1, {c0: 128, c1: 768})]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf28.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
]
op28.group.device = cuda:0
op28.group.iteration = (98304, 1)
op28.sizes = ([128, 768], [])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg17_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg18_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg19_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf28_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op28_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg17_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf25', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf26', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg18_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg19_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf28', get_index_7, add_3, None)
        return store


op29: ExternKernelSchedulerNode(ExternKernelOut)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = [StarDep(name='arg20_1', mode=None)]
op29.outputs = [
    buf29: ExternKernelOut
    buf29.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf29.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op29.node.kernel = extern_kernels.mm


op30: ExternKernelSchedulerNode(ExternKernelOut)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op30.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelOut
    buf30.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf30.users = [
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op30.node.kernel = extern_kernels.mm


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 98304})]
op31.unmet_dependencies = [   MemoryDep('buf29', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op31.met_dependencies = []
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (98304, 1)
op31.sizes = ([2, 12, 64, 64], [])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op31_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf31', get_index_1, load, None)
        return store


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 98304})]
op32.unmet_dependencies = [MemoryDep('buf30', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op32.met_dependencies = []
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (98304, 1)
op32.sizes = ([2, 768, 64], [])
buf30_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op32_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf32', get_index_1, load, None)
        return store


op33: ExternKernelSchedulerNode(ExternKernelOut)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf31', mode=None), StarDep(name='buf32', mode=None)]
op33.met_dependencies = []
op33.outputs = [
    buf33: ExternKernelOut
    buf33.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf33.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False),
    ]
]
op33.node.kernel = extern_kernels.bmm


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 1536})]
op34.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 98304})]
op34.met_dependencies = 
    [   MemoryDep('arg23_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
    ]
]
op34.group.device = cuda:0
op34.group.iteration = (1536, 64)
op34.sizes = ([2, 12, 64], [64])
arg23_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op34_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg23_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf33', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf34', get_index_9, reduction)
        return store_reduction


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 1536})]
op35.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 98304}), MemoryDep('buf34', c0, {c0: 1536})]
op35.met_dependencies = 
    [   MemoryDep('arg23_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf35.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (1536, 64)
op35.sizes = ([2, 12, 64], [64])
arg23_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op35_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg23_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf33', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf34', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf35', get_index_10, reduction)
        return store_reduction


op36: ExternKernelSchedulerNode(ExternKernelOut)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op36.met_dependencies = [StarDep(name='arg22_1', mode=None)]
op36.outputs = [
    buf36: ExternKernelOut
    buf36.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf36.users = [
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op36.node.kernel = extern_kernels.mm


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 98304})]
op37.unmet_dependencies = 
    [   MemoryDep('buf33', c0, {c0: 98304}),
        MemoryDep('buf34', c0, {c0: 1536}),
        MemoryDep('buf35', c0, {c0: 1536})]
op37.met_dependencies = 
    [   MemoryDep('arg23_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (98304, 1)
op37.sizes = ([2, 12, 64, 64], [])
arg23_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf37_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op37_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg23_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf33', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf34', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf35', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf37', get_index_11, truediv, None)
        return store


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 98304})]
op38.unmet_dependencies = [   MemoryDep('buf36', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op38.met_dependencies = []
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (98304, 1)
op38.sizes = ([2, 12, 64, 64], [])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op38_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf38', get_index_1, load, None)
        return store


op39: ExternKernelSchedulerNode(ExternKernelOut)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf37', mode=None), StarDep(name='buf38', mode=None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: ExternKernelOut
    buf39.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf39.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.node.kernel = extern_kernels.bmm


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 98304})]
op40.unmet_dependencies = [   MemoryDep('buf39', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (98304, 1)
op40.sizes = ([2, 64, 12, 64], [])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op40_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf40', get_index_1, load, None)
        return store


op41: ExternKernelSchedulerNode(ExternKernelOut)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = [StarDep(name='arg24_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelOut
    buf41.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
]
op41.node.kernel = extern_kernels.mm


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 98304})]
op42.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 98304}),
        MemoryDep('buf24', c0, {c0: 98304}),
        MemoryDep('buf41', c0, {c0: 98304})]
op42.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg25_1', c1, {c0: 128, c1: 768})]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
]
op42.group.device = cuda:0
op42.group.iteration = (98304, 1)
op42.sizes = ([128, 768], [])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg25_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg17_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op42_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg25_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf17', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf24', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg17_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf42', get_index_5, add_3, None)
        return store


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 128})]
op43.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 98304})]
op43.met_dependencies = []
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf43.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (128, 768)
op43.sizes = ([128], [768])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op43_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf43', get_index_1, getitem)
        return store_reduction


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 128})]
op44.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 98304})]
op44.met_dependencies = []
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf44.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (128, 768)
op44.sizes = ([128], [768])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op44_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf44', get_index_1, getitem_1)
        return store_reduction


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 98304})]
op46.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 98304}),
        MemoryDep('buf43', c0, {c0: 128}),
        MemoryDep('buf44', c0, {c0: 128})]
op46.met_dependencies = 
    [   MemoryDep('arg26_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg27_1', c1, {c0: 128, c1: 768})]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (98304, 1)
op46.sizes = ([128, 768], [])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg26_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg27_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op46_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf43', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf44', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg26_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg27_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf46', get_index_5, add_1, None)
        return store


op47: ExternKernelSchedulerNode(ExternKernelOut)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg28_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelOut
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.node.kernel = extern_kernels.mm


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 393216})]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 393216})]
op48.met_dependencies = [MemoryDep('arg29_1', c1, {c0: 128, c1: 3072})]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (393216, 1)
op48.sizes = ([128, 3072], [])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg29_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op48_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg29_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf47', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg29_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf47', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg29_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf48', get_index_6, mul_5, None)
        return store


op49: ExternKernelSchedulerNode(ExternKernelOut)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = [StarDep(name='arg30_1', mode=None)]
op49.outputs = [
    buf49: ExternKernelOut
    buf49.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf49.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
]
op49.node.kernel = extern_kernels.mm


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 128})]
op50.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 98304}), MemoryDep('buf49', c0, {c0: 98304})]
op50.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 128, c1: 768})]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf50.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (128, 768)
op50.sizes = ([128], [768])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op50_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf50', get_index_3, getitem)
        return store_reduction


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 128})]
op51.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 98304}), MemoryDep('buf49', c0, {c0: 98304})]
op51.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 128, c1: 768})]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf51.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (128, 768)
op51.sizes = ([128], [768])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op51_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf51', get_index_3, getitem_1)
        return store_reduction


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 98304})]
op53.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 98304}),
        MemoryDep('buf49', c0, {c0: 98304}),
        MemoryDep('buf50', c0, {c0: 128}),
        MemoryDep('buf51', c0, {c0: 128})]
op53.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg32_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg33_1', c1, {c0: 128, c1: 768})]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf53.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
    ]
]
op53.group.device = cuda:0
op53.group.iteration = (98304, 1)
op53.sizes = ([128, 768], [])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg32_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg33_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op53_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf50', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf51', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg32_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg33_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf53', get_index_7, add_3, None)
        return store


op54: ExternKernelSchedulerNode(ExternKernelOut)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op54.met_dependencies = [StarDep(name='arg34_1', mode=None)]
op54.outputs = [
    buf54: ExternKernelOut
    buf54.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf54.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op54.node.kernel = extern_kernels.mm


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op55.met_dependencies = [StarDep(name='arg35_1', mode=None)]
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf55.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op55.node.kernel = extern_kernels.mm


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 98304})]
op56.unmet_dependencies = [   MemoryDep('buf54', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op56.met_dependencies = []
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (98304, 1)
op56.sizes = ([2, 12, 64, 64], [])
buf54_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf56_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op56_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf56', get_index_1, load, None)
        return store


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 98304})]
op57.unmet_dependencies = [MemoryDep('buf55', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op57.met_dependencies = []
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf57.users = [NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (98304, 1)
op57.sizes = ([2, 768, 64], [])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op57_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf57', get_index_1, load, None)
        return store


op58: ExternKernelSchedulerNode(ExternKernelOut)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = [StarDep(name='buf56', mode=None), StarDep(name='buf57', mode=None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ExternKernelOut
    buf58.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False),
    ]
]
op58.node.kernel = extern_kernels.bmm


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 1536})]
op59.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 98304})]
op59.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg37_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf59.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
    ]
]
op59.group.device = cuda:0
op59.group.iteration = (1536, 64)
op59.sizes = ([2, 12, 64], [64])
arg37_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op59_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg37_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf58', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf59', get_index_9, reduction)
        return store_reduction


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 1536})]
op60.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 98304}), MemoryDep('buf59', c0, {c0: 1536})]
op60.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg37_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf60.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (1536, 64)
op60.sizes = ([2, 12, 64], [64])
arg37_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf60_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op60_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg37_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf58', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf59', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf60', get_index_10, reduction)
        return store_reduction


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op61.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf61.users = [
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op61.node.kernel = extern_kernels.mm


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 98304})]
op62.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 98304}),
        MemoryDep('buf59', c0, {c0: 1536}),
        MemoryDep('buf60', c0, {c0: 1536})]
op62.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg37_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (98304, 1)
op62.sizes = ([2, 12, 64, 64], [])
arg37_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf60_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op62_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg37_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf58', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf59', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf60', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf62', get_index_11, truediv, None)
        return store


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 98304})]
op63.unmet_dependencies = [   MemoryDep('buf61', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op63.met_dependencies = []
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (98304, 1)
op63.sizes = ([2, 12, 64, 64], [])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op63_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf63', get_index_1, load, None)
        return store


op64: ExternKernelSchedulerNode(ExternKernelOut)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf62', mode=None), StarDep(name='buf63', mode=None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: ExternKernelOut
    buf64.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf64.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op64.node.kernel = extern_kernels.bmm


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 98304})]
op65.unmet_dependencies = [   MemoryDep('buf64', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (98304, 1)
op65.sizes = ([2, 64, 12, 64], [])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op65_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf65', get_index_1, load, None)
        return store


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='arg38_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False)]
]
op66.node.kernel = extern_kernels.mm


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 98304})]
op67.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 98304}),
        MemoryDep('buf49', c0, {c0: 98304}),
        MemoryDep('buf66', c0, {c0: 98304})]
op67.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg39_1', c1, {c0: 128, c1: 768})]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf67.users = [
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op67.group.device = cuda:0
op67.group.iteration = (98304, 1)
op67.sizes = ([128, 768], [])
buf66_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg39_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf49_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg31_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op67_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg39_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf42', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf49', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg31_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf67', get_index_5, add_3, None)
        return store


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 128})]
op68.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 98304})]
op68.met_dependencies = []
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf68.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (128, 768)
op68.sizes = ([128], [768])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op68_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf68', get_index_1, getitem)
        return store_reduction


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 128})]
op69.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 98304})]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf69.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (128, 768)
op69.sizes = ([128], [768])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op69_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf69', get_index_1, getitem_1)
        return store_reduction


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 98304})]
op71.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 98304}),
        MemoryDep('buf68', c0, {c0: 128}),
        MemoryDep('buf69', c0, {c0: 128})]
op71.met_dependencies = 
    [   MemoryDep('arg40_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg41_1', c1, {c0: 128, c1: 768})]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (98304, 1)
op71.sizes = ([128, 768], [])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg40_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg41_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op71_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf68', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf69', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg40_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg41_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf71', get_index_5, add_1, None)
        return store


op72: ExternKernelSchedulerNode(ExternKernelOut)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = [StarDep(name='arg42_1', mode=None)]
op72.outputs = [
    buf72: ExternKernelOut
    buf72.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf72.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False)]
]
op72.node.kernel = extern_kernels.mm


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 393216})]
op73.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 393216})]
op73.met_dependencies = [MemoryDep('arg43_1', c1, {c0: 128, c1: 3072})]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (393216, 1)
op73.sizes = ([128, 3072], [])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg43_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf73_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op73_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg43_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf72', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg43_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf72', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg43_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf73', get_index_6, mul_5, None)
        return store


op74: ExternKernelSchedulerNode(ExternKernelOut)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = [StarDep(name='arg44_1', mode=None)]
op74.outputs = [
    buf74: ExternKernelOut
    buf74.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf74.users = [
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op74.node.kernel = extern_kernels.mm


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 128})]
op75.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 98304}), MemoryDep('buf74', c0, {c0: 98304})]
op75.met_dependencies = [MemoryDep('arg45_1', c1, {c0: 128, c1: 768})]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf75.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (128, 768)
op75.sizes = ([128], [768])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg45_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op75_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg45_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf75', get_index_3, getitem)
        return store_reduction


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 128})]
op76.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 98304}), MemoryDep('buf74', c0, {c0: 98304})]
op76.met_dependencies = [MemoryDep('arg45_1', c1, {c0: 128, c1: 768})]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf76.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (128, 768)
op76.sizes = ([128], [768])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg45_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf76_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op76_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg45_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf76', get_index_3, getitem_1)
        return store_reduction


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 98304})]
op78.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 98304}),
        MemoryDep('buf74', c0, {c0: 98304}),
        MemoryDep('buf75', c0, {c0: 128}),
        MemoryDep('buf76', c0, {c0: 128})]
op78.met_dependencies = 
    [   MemoryDep('arg45_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg46_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg47_1', c1, {c0: 128, c1: 768})]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf78.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
    ]
]
op78.group.device = cuda:0
op78.group.iteration = (98304, 1)
op78.sizes = ([128, 768], [])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg45_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf76_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg46_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg47_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op78_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg45_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf75', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf76', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg46_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg47_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf78', get_index_7, add_3, None)
        return store


op79: ExternKernelSchedulerNode(ExternKernelOut)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op79.met_dependencies = [StarDep(name='arg48_1', mode=None)]
op79.outputs = [
    buf79: ExternKernelOut
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf79.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op79.node.kernel = extern_kernels.mm


op80: ExternKernelSchedulerNode(ExternKernelOut)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op80.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelOut
    buf80.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf80.users = [
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op80.node.kernel = extern_kernels.mm


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 98304})]
op81.unmet_dependencies = [   MemoryDep('buf79', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op81.met_dependencies = []
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (98304, 1)
op81.sizes = ([2, 12, 64, 64], [])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf81_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op81_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf81', get_index_1, load, None)
        return store


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 98304})]
op82.unmet_dependencies = [MemoryDep('buf80', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (98304, 1)
op82.sizes = ([2, 768, 64], [])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op82_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf82', get_index_1, load, None)
        return store


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf81', mode=None), StarDep(name='buf82', mode=None)]
op83.met_dependencies = []
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf83.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
    ]
]
op83.node.kernel = extern_kernels.bmm


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 1536})]
op84.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 98304})]
op84.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg51_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf84.users = [
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
    ]
]
op84.group.device = cuda:0
op84.group.iteration = (1536, 64)
op84.sizes = ([2, 12, 64], [64])
arg51_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op84_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg51_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf83', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf84', get_index_9, reduction)
        return store_reduction


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 1536})]
op85.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 98304}), MemoryDep('buf84', c0, {c0: 1536})]
op85.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg51_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf85.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (1536, 64)
op85.sizes = ([2, 12, 64], [64])
arg51_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op85_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg51_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf83', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf84', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf85', get_index_10, reduction)
        return store_reduction


op86: ExternKernelSchedulerNode(ExternKernelOut)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op86.met_dependencies = [StarDep(name='arg50_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelOut
    buf86.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf86.users = [
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op86.node.kernel = extern_kernels.mm


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 98304})]
op87.unmet_dependencies = 
    [   MemoryDep('buf83', c0, {c0: 98304}),
        MemoryDep('buf84', c0, {c0: 1536}),
        MemoryDep('buf85', c0, {c0: 1536})]
op87.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg51_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (98304, 1)
op87.sizes = ([2, 12, 64, 64], [])
arg51_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op87_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg51_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf83', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf84', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf85', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf87', get_index_11, truediv, None)
        return store


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 98304})]
op88.unmet_dependencies = [   MemoryDep('buf86', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (98304, 1)
op88.sizes = ([2, 12, 64, 64], [])
buf86_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op88_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf88', get_index_1, load, None)
        return store


op89: ExternKernelSchedulerNode(ExternKernelOut)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf87', mode=None), StarDep(name='buf88', mode=None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: ExternKernelOut
    buf89.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.node.kernel = extern_kernels.bmm


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 98304})]
op90.unmet_dependencies = [   MemoryDep('buf89', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op90.met_dependencies = []
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (98304, 1)
op90.sizes = ([2, 64, 12, 64], [])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op90_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf90', get_index_1, load, None)
        return store


op91: ExternKernelSchedulerNode(ExternKernelOut)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op91.met_dependencies = [StarDep(name='arg52_1', mode=None)]
op91.outputs = [
    buf91: ExternKernelOut
    buf91.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False)]
]
op91.node.kernel = extern_kernels.mm


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 98304})]
op92.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 98304}),
        MemoryDep('buf74', c0, {c0: 98304}),
        MemoryDep('buf91', c0, {c0: 98304})]
op92.met_dependencies = 
    [   MemoryDep('arg45_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg53_1', c1, {c0: 128, c1: 768})]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
]
op92.group.device = cuda:0
op92.group.iteration = (98304, 1)
op92.sizes = ([128, 768], [])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg53_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg45_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op92_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg53_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf67', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf74', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg45_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf92', get_index_5, add_3, None)
        return store


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 128})]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 98304})]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf93.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (128, 768)
op93.sizes = ([128], [768])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op93_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf93', get_index_1, getitem)
        return store_reduction


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 128})]
op94.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 98304})]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf94.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (128, 768)
op94.sizes = ([128], [768])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op94_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf94', get_index_1, getitem_1)
        return store_reduction


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 98304})]
op96.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 98304}),
        MemoryDep('buf93', c0, {c0: 128}),
        MemoryDep('buf94', c0, {c0: 128})]
op96.met_dependencies = 
    [   MemoryDep('arg54_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg55_1', c1, {c0: 128, c1: 768})]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (98304, 1)
op96.sizes = ([128, 768], [])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg54_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg55_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op96_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf93', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf94', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg54_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg55_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf96', get_index_5, add_1, None)
        return store


op97: ExternKernelSchedulerNode(ExternKernelOut)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op97.met_dependencies = [StarDep(name='arg56_1', mode=None)]
op97.outputs = [
    buf97: ExternKernelOut
    buf97.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False)]
]
op97.node.kernel = extern_kernels.mm


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 393216})]
op98.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 393216})]
op98.met_dependencies = [MemoryDep('arg57_1', c1, {c0: 128, c1: 3072})]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (393216, 1)
op98.sizes = ([128, 3072], [])
buf97_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg57_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op98_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg57_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf97', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg57_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf97', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg57_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf98', get_index_6, mul_5, None)
        return store


op99: ExternKernelSchedulerNode(ExternKernelOut)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf98', mode=None)]
op99.met_dependencies = [StarDep(name='arg58_1', mode=None)]
op99.outputs = [
    buf99: ExternKernelOut
    buf99.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
]
op99.node.kernel = extern_kernels.mm


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 128})]
op100.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 98304}), MemoryDep('buf99', c0, {c0: 98304})]
op100.met_dependencies = [MemoryDep('arg59_1', c1, {c0: 128, c1: 768})]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf100.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (128, 768)
op100.sizes = ([128], [768])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg59_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf100_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op100_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg59_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf100', get_index_3, getitem)
        return store_reduction


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 128})]
op101.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 98304}), MemoryDep('buf99', c0, {c0: 98304})]
op101.met_dependencies = [MemoryDep('arg59_1', c1, {c0: 128, c1: 768})]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf101.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (128, 768)
op101.sizes = ([128], [768])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg59_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op101_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg59_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf101', get_index_3, getitem_1)
        return store_reduction


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 98304})]
op103.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 128}),
        MemoryDep('buf101', c0, {c0: 128}),
        MemoryDep('buf92', c0, {c0: 98304}),
        MemoryDep('buf99', c0, {c0: 98304})]
op103.met_dependencies = 
    [   MemoryDep('arg59_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg60_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg61_1', c1, {c0: 128, c1: 768})]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf103.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
    ]
]
op103.group.device = cuda:0
op103.group.iteration = (98304, 1)
op103.sizes = ([128, 768], [])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg59_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf100_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg60_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg61_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op103_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg59_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf100', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf101', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg60_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg61_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf103', get_index_7, add_3, None)
        return store


op104: ExternKernelSchedulerNode(ExternKernelOut)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='arg62_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelOut
    buf104.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf104.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op104.node.kernel = extern_kernels.mm


op105: ExternKernelSchedulerNode(ExternKernelOut)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op105.met_dependencies = [StarDep(name='arg63_1', mode=None)]
op105.outputs = [
    buf105: ExternKernelOut
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf105.users = [
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op105.node.kernel = extern_kernels.mm


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 98304})]
op106.unmet_dependencies = [   MemoryDep('buf104', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op106.met_dependencies = []
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf106.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (98304, 1)
op106.sizes = ([2, 12, 64, 64], [])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op106_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf106', get_index_1, load, None)
        return store


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 98304})]
op107.unmet_dependencies = [MemoryDep('buf105', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op107.met_dependencies = []
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (98304, 1)
op107.sizes = ([2, 768, 64], [])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op107_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf107', get_index_1, load, None)
        return store


op108: ExternKernelSchedulerNode(ExternKernelOut)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf106', mode=None), StarDep(name='buf107', mode=None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ExternKernelOut
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf108.users = [
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False),
    ]
]
op108.node.kernel = extern_kernels.bmm


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 1536})]
op109.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 98304})]
op109.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg65_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf109.users = [
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
    ]
]
op109.group.device = cuda:0
op109.group.iteration = (1536, 64)
op109.sizes = ([2, 12, 64], [64])
arg65_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op109_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg65_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf108', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf109', get_index_9, reduction)
        return store_reduction


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 1536})]
op110.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 98304}), MemoryDep('buf109', c0, {c0: 1536})]
op110.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg65_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf110.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (1536, 64)
op110.sizes = ([2, 12, 64], [64])
arg65_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op110_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg65_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf108', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf109', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf110', get_index_10, reduction)
        return store_reduction


op111: ExternKernelSchedulerNode(ExternKernelOut)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op111.met_dependencies = [StarDep(name='arg64_1', mode=None)]
op111.outputs = [
    buf111: ExternKernelOut
    buf111.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf111.users = [
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op111.node.kernel = extern_kernels.mm


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 98304})]
op112.unmet_dependencies = 
    [   MemoryDep('buf108', c0, {c0: 98304}),
        MemoryDep('buf109', c0, {c0: 1536}),
        MemoryDep('buf110', c0, {c0: 1536})]
op112.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg65_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (98304, 1)
op112.sizes = ([2, 12, 64, 64], [])
arg65_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op112_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg65_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf108', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf109', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf110', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf112', get_index_11, truediv, None)
        return store


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 98304})]
op113.unmet_dependencies = [   MemoryDep('buf111', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op113.met_dependencies = []
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (98304, 1)
op113.sizes = ([2, 12, 64, 64], [])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op113_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf113', get_index_1, load, None)
        return store


op114: ExternKernelSchedulerNode(ExternKernelOut)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf112', mode=None), StarDep(name='buf113', mode=None)]
op114.met_dependencies = []
op114.outputs = [
    buf114: ExternKernelOut
    buf114.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf114.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.node.kernel = extern_kernels.bmm


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 98304})]
op115.unmet_dependencies = [   MemoryDep('buf114', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op115.met_dependencies = []
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (98304, 1)
op115.sizes = ([2, 64, 12, 64], [])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op115_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf115', get_index_1, load, None)
        return store


op116: ExternKernelSchedulerNode(ExternKernelOut)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op116.outputs = [
    buf116: ExternKernelOut
    buf116.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf116.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False)]
]
op116.node.kernel = extern_kernels.mm


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 98304})]
op117.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 98304}),
        MemoryDep('buf92', c0, {c0: 98304}),
        MemoryDep('buf99', c0, {c0: 98304})]
op117.met_dependencies = 
    [   MemoryDep('arg59_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg67_1', c1, {c0: 128, c1: 768})]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op117.group.device = cuda:0
op117.group.iteration = (98304, 1)
op117.sizes = ([128, 768], [])
buf116_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg67_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg59_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op117_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf92', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf99', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg59_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf117', get_index_5, add_3, None)
        return store


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 128})]
op118.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 98304})]
op118.met_dependencies = []
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf118.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (128, 768)
op118.sizes = ([128], [768])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op118_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf118', get_index_1, getitem)
        return store_reduction


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 128})]
op119.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 98304})]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf119.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (128, 768)
op119.sizes = ([128], [768])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op119_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf119', get_index_1, getitem_1)
        return store_reduction


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 98304})]
op121.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 98304}),
        MemoryDep('buf118', c0, {c0: 128}),
        MemoryDep('buf119', c0, {c0: 128})]
op121.met_dependencies = 
    [   MemoryDep('arg68_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg69_1', c1, {c0: 128, c1: 768})]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (98304, 1)
op121.sizes = ([128, 768], [])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg68_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg69_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf121_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op121_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf118', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf119', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg68_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg69_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf121', get_index_5, add_1, None)
        return store


op122: ExternKernelSchedulerNode(ExternKernelOut)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf121', mode=None)]
op122.met_dependencies = [StarDep(name='arg70_1', mode=None)]
op122.outputs = [
    buf122: ExternKernelOut
    buf122.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf122.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False)]
]
op122.node.kernel = extern_kernels.mm


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 393216})]
op123.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 393216})]
op123.met_dependencies = [MemoryDep('arg71_1', c1, {c0: 128, c1: 3072})]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (393216, 1)
op123.sizes = ([128, 3072], [])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg71_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op123_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf122', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg71_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf122', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg71_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf123', get_index_6, mul_5, None)
        return store


op124: ExternKernelSchedulerNode(ExternKernelOut)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op124.met_dependencies = [StarDep(name='arg72_1', mode=None)]
op124.outputs = [
    buf124: ExternKernelOut
    buf124.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf124.users = [
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op124.node.kernel = extern_kernels.mm


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 128})]
op125.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 98304}), MemoryDep('buf124', c0, {c0: 98304})]
op125.met_dependencies = [MemoryDep('arg73_1', c1, {c0: 128, c1: 768})]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf125.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (128, 768)
op125.sizes = ([128], [768])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg73_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op125_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg73_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf125', get_index_3, getitem)
        return store_reduction


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 128})]
op126.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 98304}), MemoryDep('buf124', c0, {c0: 98304})]
op126.met_dependencies = [MemoryDep('arg73_1', c1, {c0: 128, c1: 768})]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf126.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (128, 768)
op126.sizes = ([128], [768])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg73_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf126_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op126_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg73_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf126', get_index_3, getitem_1)
        return store_reduction


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 98304})]
op128.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 98304}),
        MemoryDep('buf124', c0, {c0: 98304}),
        MemoryDep('buf125', c0, {c0: 128}),
        MemoryDep('buf126', c0, {c0: 128})]
op128.met_dependencies = 
    [   MemoryDep('arg73_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg74_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg75_1', c1, {c0: 128, c1: 768})]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf128.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
    ]
]
op128.group.device = cuda:0
op128.group.iteration = (98304, 1)
op128.sizes = ([128, 768], [])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg73_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf126_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg74_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg75_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op128_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg73_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf125', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf126', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg74_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg75_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf128', get_index_7, add_3, None)
        return store


op129: ExternKernelSchedulerNode(ExternKernelOut)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op129.met_dependencies = [StarDep(name='arg76_1', mode=None)]
op129.outputs = [
    buf129: ExternKernelOut
    buf129.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf129.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op129.node.kernel = extern_kernels.mm


op130: ExternKernelSchedulerNode(ExternKernelOut)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op130.met_dependencies = [StarDep(name='arg77_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelOut
    buf130.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf130.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op130.node.kernel = extern_kernels.mm


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 98304})]
op131.unmet_dependencies = [   MemoryDep('buf129', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (98304, 1)
op131.sizes = ([2, 12, 64, 64], [])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op131_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf131', get_index_1, load, None)
        return store


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 98304})]
op132.unmet_dependencies = [MemoryDep('buf130', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op132.met_dependencies = []
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (98304, 1)
op132.sizes = ([2, 768, 64], [])
buf130_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf132_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op132_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf132', get_index_1, load, None)
        return store


op133: ExternKernelSchedulerNode(ExternKernelOut)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf131', mode=None), StarDep(name='buf132', mode=None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: ExternKernelOut
    buf133.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf133.users = [
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=True, is_weak=False),
    ]
]
op133.node.kernel = extern_kernels.bmm


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 1536})]
op134.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 98304})]
op134.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg79_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf134.users = [
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
    ]
]
op134.group.device = cuda:0
op134.group.iteration = (1536, 64)
op134.sizes = ([2, 12, 64], [64])
arg79_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op134_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg79_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf133', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf134', get_index_9, reduction)
        return store_reduction


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 1536})]
op135.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 98304}), MemoryDep('buf134', c0, {c0: 1536})]
op135.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg79_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf135.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (1536, 64)
op135.sizes = ([2, 12, 64], [64])
arg79_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op135_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg79_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf133', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf134', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf135', get_index_10, reduction)
        return store_reduction


op136: ExternKernelSchedulerNode(ExternKernelOut)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op136.met_dependencies = [StarDep(name='arg78_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelOut
    buf136.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf136.users = [
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op136.node.kernel = extern_kernels.mm


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 98304})]
op137.unmet_dependencies = 
    [   MemoryDep('buf133', c0, {c0: 98304}),
        MemoryDep('buf134', c0, {c0: 1536}),
        MemoryDep('buf135', c0, {c0: 1536})]
op137.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg79_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf137.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (98304, 1)
op137.sizes = ([2, 12, 64, 64], [])
arg79_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op137_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg79_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf133', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf134', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf135', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf137', get_index_11, truediv, None)
        return store


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 98304})]
op138.unmet_dependencies = [   MemoryDep('buf136', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op138.met_dependencies = []
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (98304, 1)
op138.sizes = ([2, 12, 64, 64], [])
buf136_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf138_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op138_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf138', get_index_1, load, None)
        return store


op139: ExternKernelSchedulerNode(ExternKernelOut)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf137', mode=None), StarDep(name='buf138', mode=None)]
op139.met_dependencies = []
op139.outputs = [
    buf139: ExternKernelOut
    buf139.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf139.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.node.kernel = extern_kernels.bmm


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 98304})]
op140.unmet_dependencies = [   MemoryDep('buf139', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op140.met_dependencies = []
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (98304, 1)
op140.sizes = ([2, 64, 12, 64], [])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf140_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op140_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf140', get_index_1, load, None)
        return store


op141: ExternKernelSchedulerNode(ExternKernelOut)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf140', mode=None)]
op141.met_dependencies = [StarDep(name='arg80_1', mode=None)]
op141.outputs = [
    buf141: ExternKernelOut
    buf141.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf141.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False)]
]
op141.node.kernel = extern_kernels.mm


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 98304})]
op142.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 98304}),
        MemoryDep('buf124', c0, {c0: 98304}),
        MemoryDep('buf141', c0, {c0: 98304})]
op142.met_dependencies = 
    [   MemoryDep('arg73_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg81_1', c1, {c0: 128, c1: 768})]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
    ]
]
op142.group.device = cuda:0
op142.group.iteration = (98304, 1)
op142.sizes = ([128, 768], [])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg81_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg73_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op142_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf117', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf124', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg73_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf142', get_index_5, add_3, None)
        return store


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 128})]
op143.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 98304})]
op143.met_dependencies = []
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf143.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (128, 768)
op143.sizes = ([128], [768])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op143_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf143', get_index_1, getitem)
        return store_reduction


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 128})]
op144.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 98304})]
op144.met_dependencies = []
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf144.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (128, 768)
op144.sizes = ([128], [768])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf144_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op144_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf144', get_index_1, getitem_1)
        return store_reduction


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 98304})]
op146.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 98304}),
        MemoryDep('buf143', c0, {c0: 128}),
        MemoryDep('buf144', c0, {c0: 128})]
op146.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg83_1', c1, {c0: 128, c1: 768})]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (98304, 1)
op146.sizes = ([128, 768], [])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf144_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg82_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg83_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op146_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf143', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf144', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg82_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg83_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf146', get_index_5, add_1, None)
        return store


op147: ExternKernelSchedulerNode(ExternKernelOut)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op147.met_dependencies = [StarDep(name='arg84_1', mode=None)]
op147.outputs = [
    buf147: ExternKernelOut
    buf147.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf147.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False)]
]
op147.node.kernel = extern_kernels.mm


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 393216})]
op148.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 393216})]
op148.met_dependencies = [MemoryDep('arg85_1', c1, {c0: 128, c1: 3072})]
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (393216, 1)
op148.sizes = ([128, 3072], [])
buf147_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg85_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf148_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op148_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg85_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf147', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg85_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf147', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg85_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf148', get_index_6, mul_5, None)
        return store


op149: ExternKernelSchedulerNode(ExternKernelOut)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op149.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op149.outputs = [
    buf149: ExternKernelOut
    buf149.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf149.users = [
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
    ]
]
op149.node.kernel = extern_kernels.mm


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 128})]
op150.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 98304}), MemoryDep('buf149', c0, {c0: 98304})]
op150.met_dependencies = [MemoryDep('arg87_1', c1, {c0: 128, c1: 768})]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf150.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (128, 768)
op150.sizes = ([128], [768])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg87_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op150_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg87_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf150', get_index_3, getitem)
        return store_reduction


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 128})]
op151.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 98304}), MemoryDep('buf149', c0, {c0: 98304})]
op151.met_dependencies = [MemoryDep('arg87_1', c1, {c0: 128, c1: 768})]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf151.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (128, 768)
op151.sizes = ([128], [768])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg87_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op151_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg87_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf151', get_index_3, getitem_1)
        return store_reduction


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 98304})]
op153.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 98304}),
        MemoryDep('buf149', c0, {c0: 98304}),
        MemoryDep('buf150', c0, {c0: 128}),
        MemoryDep('buf151', c0, {c0: 128})]
op153.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg88_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg89_1', c1, {c0: 128, c1: 768})]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf153.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False),
    ]
]
op153.group.device = cuda:0
op153.group.iteration = (98304, 1)
op153.sizes = ([128, 768], [])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg87_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg88_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg89_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op153_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg87_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf150', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf151', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg88_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg89_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf153', get_index_7, add_3, None)
        return store


op154: ExternKernelSchedulerNode(ExternKernelOut)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op154.met_dependencies = [StarDep(name='arg90_1', mode=None)]
op154.outputs = [
    buf154: ExternKernelOut
    buf154.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf154.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op154.node.kernel = extern_kernels.mm


op155: ExternKernelSchedulerNode(ExternKernelOut)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op155.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelOut
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf155.users = [
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op155.node.kernel = extern_kernels.mm


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 98304})]
op156.unmet_dependencies = [   MemoryDep('buf154', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op156.met_dependencies = []
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (98304, 1)
op156.sizes = ([2, 12, 64, 64], [])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op156_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf156', get_index_1, load, None)
        return store


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 98304})]
op157.unmet_dependencies = [MemoryDep('buf155', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op157.met_dependencies = []
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (98304, 1)
op157.sizes = ([2, 768, 64], [])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op157_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf157', get_index_1, load, None)
        return store


op158: ExternKernelSchedulerNode(ExternKernelOut)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = [StarDep(name='buf156', mode=None), StarDep(name='buf157', mode=None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: ExternKernelOut
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf158.users = [
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=True, is_weak=False),
    ]
]
op158.node.kernel = extern_kernels.bmm


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 1536})]
op159.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 98304})]
op159.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg93_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
    ]
]
op159.group.device = cuda:0
op159.group.iteration = (1536, 64)
op159.sizes = ([2, 12, 64], [64])
arg93_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op159_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg93_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf158', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf159', get_index_9, reduction)
        return store_reduction


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 1536})]
op160.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 98304}), MemoryDep('buf159', c0, {c0: 1536})]
op160.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg93_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf160.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (1536, 64)
op160.sizes = ([2, 12, 64], [64])
arg93_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op160_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg93_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf158', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf159', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf160', get_index_10, reduction)
        return store_reduction


op161: ExternKernelSchedulerNode(ExternKernelOut)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op161.met_dependencies = [StarDep(name='arg92_1', mode=None)]
op161.outputs = [
    buf161: ExternKernelOut
    buf161.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf161.users = [
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op161.node.kernel = extern_kernels.mm


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 98304})]
op162.unmet_dependencies = 
    [   MemoryDep('buf158', c0, {c0: 98304}),
        MemoryDep('buf159', c0, {c0: 1536}),
        MemoryDep('buf160', c0, {c0: 1536})]
op162.met_dependencies = 
    [   MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64}),
        MemoryDep('arg93_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64})]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf162.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (98304, 1)
op162.sizes = ([2, 12, 64, 64], [])
arg93_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op162_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg93_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf158', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf159', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf160', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf162', get_index_11, truediv, None)
        return store


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 98304})]
op163.unmet_dependencies = [   MemoryDep('buf161', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op163.met_dependencies = []
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (98304, 1)
op163.sizes = ([2, 12, 64, 64], [])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op163_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf163', get_index_1, load, None)
        return store


op164: ExternKernelSchedulerNode(ExternKernelOut)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf162', mode=None), StarDep(name='buf163', mode=None)]
op164.met_dependencies = []
op164.outputs = [
    buf164: ExternKernelOut
    buf164.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf164.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.node.kernel = extern_kernels.bmm


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 98304})]
op165.unmet_dependencies = [   MemoryDep('buf164', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op165.met_dependencies = []
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (98304, 1)
op165.sizes = ([2, 64, 12, 64], [])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf165_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op165_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf165', get_index_1, load, None)
        return store


op166: ExternKernelSchedulerNode(ExternKernelOut)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf165', mode=None)]
op166.met_dependencies = [StarDep(name='arg94_1', mode=None)]
op166.outputs = [
    buf166: ExternKernelOut
    buf166.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False)]
]
op166.node.kernel = extern_kernels.mm


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 98304})]
op167.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 98304}),
        MemoryDep('buf149', c0, {c0: 98304}),
        MemoryDep('buf166', c0, {c0: 98304})]
op167.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg95_1', c1, {c0: 128, c1: 768})]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf167.users = [
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
]
op167.group.device = cuda:0
op167.group.iteration = (98304, 1)
op167.sizes = ([128, 768], [])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg95_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg87_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op167_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg95_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf142', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf149', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg87_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf167', get_index_5, add_3, None)
        return store


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 128})]
op168.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 98304})]
op168.met_dependencies = []
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf168.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (128, 768)
op168.sizes = ([128], [768])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf168_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op168_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf168', get_index_1, getitem)
        return store_reduction


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 128})]
op169.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 98304})]
op169.met_dependencies = []
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf169.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (128, 768)
op169.sizes = ([128], [768])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf169_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op169_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf169', get_index_1, getitem_1)
        return store_reduction


op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 98304})]
op171.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 98304}),
        MemoryDep('buf168', c0, {c0: 128}),
        MemoryDep('buf169', c0, {c0: 128})]
op171.met_dependencies = 
    [   MemoryDep('arg96_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg97_1', c1, {c0: 128, c1: 768})]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (98304, 1)
op171.sizes = ([128, 768], [])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf168_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf169_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg96_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg97_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op171_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf168', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf169', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg96_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg97_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf171', get_index_5, add_1, None)
        return store


op172: ExternKernelSchedulerNode(ExternKernelOut)
op172.writes = [StarDep(name='buf172', mode=None)]
op172.unmet_dependencies = [StarDep(name='buf171', mode=None)]
op172.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op172.outputs = [
    buf172: ExternKernelOut
    buf172.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf172.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False)]
]
op172.node.kernel = extern_kernels.mm


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 393216})]
op173.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 393216})]
op173.met_dependencies = [MemoryDep('arg99_1', c1, {c0: 128, c1: 3072})]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf173.users = [NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (393216, 1)
op173.sizes = ([128, 3072], [])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg99_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op173_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg99_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf172', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg99_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf172', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg99_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf173', get_index_6, mul_5, None)
        return store


op174: ExternKernelSchedulerNode(ExternKernelOut)
op174.writes = [StarDep(name='buf174', mode=None)]
op174.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op174.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op174.outputs = [
    buf174: ExternKernelOut
    buf174.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf174.users = [
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
]
op174.node.kernel = extern_kernels.mm


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 128})]
op175.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 98304}), MemoryDep('buf174', c0, {c0: 98304})]
op175.met_dependencies = [MemoryDep('arg101_1', c1, {c0: 128, c1: 768})]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf175.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (128, 768)
op175.sizes = ([128], [768])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg101_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op175_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg101_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf175', get_index_3, getitem)
        return store_reduction


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 128})]
op176.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 98304}), MemoryDep('buf174', c0, {c0: 98304})]
op176.met_dependencies = [MemoryDep('arg101_1', c1, {c0: 128, c1: 768})]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf176.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (128, 768)
op176.sizes = ([128], [768])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg101_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op176_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg101_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf176', get_index_3, getitem_1)
        return store_reduction


op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 98304})]
op178.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 98304}),
        MemoryDep('buf174', c0, {c0: 98304}),
        MemoryDep('buf175', c0, {c0: 128}),
        MemoryDep('buf176', c0, {c0: 128})]
op178.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg102_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg103_1', c1, {c0: 128, c1: 768})]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf178.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
    ]
]
op178.group.device = cuda:0
op178.group.iteration = (98304, 1)
op178.sizes = ([128, 768], [])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg101_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg102_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg103_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf178_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op178_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg101_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf175', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf176', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg102_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg103_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf178', get_index_7, add_3, None)
        return store


op179: ExternKernelSchedulerNode(ExternKernelOut)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op179.met_dependencies = [StarDep(name='arg104_1', mode=None)]
op179.outputs = [
    buf179: ExternKernelOut
    buf179.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf179.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op179.node.kernel = extern_kernels.mm


op180: ExternKernelSchedulerNode(ExternKernelOut)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op180.met_dependencies = [StarDep(name='arg105_1', mode=None)]
op180.outputs = [
    buf180: ExternKernelOut
    buf180.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf180.users = [
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op180.node.kernel = extern_kernels.mm


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 98304})]
op181.unmet_dependencies = [   MemoryDep('buf179', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op181.met_dependencies = []
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf181.users = [NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (98304, 1)
op181.sizes = ([2, 12, 64, 64], [])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op181_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf181', get_index_1, load, None)
        return store


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 98304})]
op182.unmet_dependencies = [MemoryDep('buf180', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op182.met_dependencies = []
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf182.users = [NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (98304, 1)
op182.sizes = ([2, 768, 64], [])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf182_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op182_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf182', get_index_1, load, None)
        return store


op183: ExternKernelSchedulerNode(ExternKernelOut)
op183.writes = [StarDep(name='buf183', mode=None)]
op183.unmet_dependencies = [StarDep(name='buf181', mode=None), StarDep(name='buf182', mode=None)]
op183.met_dependencies = []
op183.outputs = [
    buf183: ExternKernelOut
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
]
op183.node.kernel = extern_kernels.bmm


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 1536})]
op184.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 98304})]
op184.met_dependencies = 
    [   MemoryDep('arg107_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf184.users = [
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
    ]
]
op184.group.device = cuda:0
op184.group.iteration = (1536, 64)
op184.sizes = ([2, 12, 64], [64])
arg107_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op184_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg107_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf183', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf184', get_index_9, reduction)
        return store_reduction


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 1536})]
op185.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 98304}), MemoryDep('buf184', c0, {c0: 1536})]
op185.met_dependencies = 
    [   MemoryDep('arg107_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf185.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (1536, 64)
op185.sizes = ([2, 12, 64], [64])
arg107_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op185_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg107_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf183', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf184', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf185', get_index_10, reduction)
        return store_reduction


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op186.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf186.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op186.node.kernel = extern_kernels.mm


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 98304})]
op187.unmet_dependencies = 
    [   MemoryDep('buf183', c0, {c0: 98304}),
        MemoryDep('buf184', c0, {c0: 1536}),
        MemoryDep('buf185', c0, {c0: 1536})]
op187.met_dependencies = 
    [   MemoryDep('arg107_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (98304, 1)
op187.sizes = ([2, 12, 64, 64], [])
arg107_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op187_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg107_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf183', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf184', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf185', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf187', get_index_11, truediv, None)
        return store


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 98304})]
op188.unmet_dependencies = [   MemoryDep('buf186', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op188.met_dependencies = []
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf188.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (98304, 1)
op188.sizes = ([2, 12, 64, 64], [])
buf186_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op188_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf188', get_index_1, load, None)
        return store


op189: ExternKernelSchedulerNode(ExternKernelOut)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf187', mode=None), StarDep(name='buf188', mode=None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: ExternKernelOut
    buf189.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf189.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.node.kernel = extern_kernels.bmm


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 98304})]
op190.unmet_dependencies = [   MemoryDep('buf189', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op190.met_dependencies = []
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (98304, 1)
op190.sizes = ([2, 64, 12, 64], [])
buf189_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op190_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf190', get_index_1, load, None)
        return store


op191: ExternKernelSchedulerNode(ExternKernelOut)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op191.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op191.outputs = [
    buf191: ExternKernelOut
    buf191.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf191.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False)]
]
op191.node.kernel = extern_kernels.mm


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 98304})]
op192.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 98304}),
        MemoryDep('buf174', c0, {c0: 98304}),
        MemoryDep('buf191', c0, {c0: 98304})]
op192.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg109_1', c1, {c0: 128, c1: 768})]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf192.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
]
op192.group.device = cuda:0
op192.group.iteration = (98304, 1)
op192.sizes = ([128, 768], [])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg109_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg101_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op192_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg109_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf167', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf174', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg101_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf192', get_index_5, add_3, None)
        return store


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 128})]
op193.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 98304})]
op193.met_dependencies = []
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf193.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (128, 768)
op193.sizes = ([128], [768])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op193_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf193', get_index_1, getitem)
        return store_reduction


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 128})]
op194.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 98304})]
op194.met_dependencies = []
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf194.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (128, 768)
op194.sizes = ([128], [768])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op194_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf194', get_index_1, getitem_1)
        return store_reduction


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 98304})]
op196.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 98304}),
        MemoryDep('buf193', c0, {c0: 128}),
        MemoryDep('buf194', c0, {c0: 128})]
op196.met_dependencies = 
    [   MemoryDep('arg110_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg111_1', c1, {c0: 128, c1: 768})]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (98304, 1)
op196.sizes = ([128, 768], [])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg110_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg111_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op196_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf193', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf194', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg110_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg111_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf196', get_index_5, add_1, None)
        return store


op197: ExternKernelSchedulerNode(ExternKernelOut)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = [StarDep(name='arg112_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelOut
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf197.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False)]
]
op197.node.kernel = extern_kernels.mm


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 393216})]
op198.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 393216})]
op198.met_dependencies = [MemoryDep('arg113_1', c1, {c0: 128, c1: 3072})]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (393216, 1)
op198.sizes = ([128, 3072], [])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg113_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op198_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf197', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg113_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf197', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg113_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf198', get_index_6, mul_5, None)
        return store


op199: ExternKernelSchedulerNode(ExternKernelOut)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf198', mode=None)]
op199.met_dependencies = [StarDep(name='arg114_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelOut
    buf199.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf199.users = [
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
]
op199.node.kernel = extern_kernels.mm


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 128})]
op200.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 98304}), MemoryDep('buf199', c0, {c0: 98304})]
op200.met_dependencies = [MemoryDep('arg115_1', c1, {c0: 128, c1: 768})]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf200.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (128, 768)
op200.sizes = ([128], [768])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg115_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op200_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg115_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf200', get_index_3, getitem)
        return store_reduction


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 128})]
op201.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 98304}), MemoryDep('buf199', c0, {c0: 98304})]
op201.met_dependencies = [MemoryDep('arg115_1', c1, {c0: 128, c1: 768})]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf201.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (128, 768)
op201.sizes = ([128], [768])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg115_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op201_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg115_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf201', get_index_3, getitem_1)
        return store_reduction


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 98304})]
op203.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 98304}),
        MemoryDep('buf199', c0, {c0: 98304}),
        MemoryDep('buf200', c0, {c0: 128}),
        MemoryDep('buf201', c0, {c0: 128})]
op203.met_dependencies = 
    [   MemoryDep('arg115_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg116_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg117_1', c1, {c0: 128, c1: 768})]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf203.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False),
    ]
]
op203.group.device = cuda:0
op203.group.iteration = (98304, 1)
op203.sizes = ([128, 768], [])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg115_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg116_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg117_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op203_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg115_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf200', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf201', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg116_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg117_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf203', get_index_7, add_3, None)
        return store


op204: ExternKernelSchedulerNode(ExternKernelOut)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op204.met_dependencies = [StarDep(name='arg118_1', mode=None)]
op204.outputs = [
    buf204: ExternKernelOut
    buf204.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf204.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op204.node.kernel = extern_kernels.mm


op205: ExternKernelSchedulerNode(ExternKernelOut)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op205.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op205.outputs = [
    buf205: ExternKernelOut
    buf205.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf205.users = [
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op205.node.kernel = extern_kernels.mm


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 98304})]
op206.unmet_dependencies = [   MemoryDep('buf204', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op206.met_dependencies = []
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (98304, 1)
op206.sizes = ([2, 12, 64, 64], [])
buf204_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op206_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf206', get_index_1, load, None)
        return store


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 98304})]
op207.unmet_dependencies = [MemoryDep('buf205', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op207.met_dependencies = []
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (98304, 1)
op207.sizes = ([2, 768, 64], [])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op207_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf207', get_index_1, load, None)
        return store


op208: ExternKernelSchedulerNode(ExternKernelOut)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = [StarDep(name='buf206', mode=None), StarDep(name='buf207', mode=None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: ExternKernelOut
    buf208.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf208.users = [
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False),
    ]
]
op208.node.kernel = extern_kernels.bmm


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 1536})]
op209.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 98304})]
op209.met_dependencies = 
    [   MemoryDep('arg121_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf209.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
    ]
]
op209.group.device = cuda:0
op209.group.iteration = (1536, 64)
op209.sizes = ([2, 12, 64], [64])
arg121_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op209_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg121_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf208', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf209', get_index_9, reduction)
        return store_reduction


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 1536})]
op210.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 98304}), MemoryDep('buf209', c0, {c0: 1536})]
op210.met_dependencies = 
    [   MemoryDep('arg121_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf210.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (1536, 64)
op210.sizes = ([2, 12, 64], [64])
arg121_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op210_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg121_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf208', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf209', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf210', get_index_10, reduction)
        return store_reduction


op211: ExternKernelSchedulerNode(ExternKernelOut)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op211.met_dependencies = [StarDep(name='arg120_1', mode=None)]
op211.outputs = [
    buf211: ExternKernelOut
    buf211.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf211.users = [
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op211.node.kernel = extern_kernels.mm


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 98304})]
op212.unmet_dependencies = 
    [   MemoryDep('buf208', c0, {c0: 98304}),
        MemoryDep('buf209', c0, {c0: 1536}),
        MemoryDep('buf210', c0, {c0: 1536})]
op212.met_dependencies = 
    [   MemoryDep('arg121_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf212.users = [NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (98304, 1)
op212.sizes = ([2, 12, 64, 64], [])
arg121_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op212_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg121_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf208', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf209', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf210', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf212', get_index_11, truediv, None)
        return store


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 98304})]
op213.unmet_dependencies = [   MemoryDep('buf211', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op213.met_dependencies = []
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf213.users = [NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (98304, 1)
op213.sizes = ([2, 12, 64, 64], [])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op213_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf213', get_index_1, load, None)
        return store


op214: ExternKernelSchedulerNode(ExternKernelOut)
op214.writes = [StarDep(name='buf214', mode=None)]
op214.unmet_dependencies = [StarDep(name='buf212', mode=None), StarDep(name='buf213', mode=None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: ExternKernelOut
    buf214.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf214.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op214.node.kernel = extern_kernels.bmm


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 98304})]
op215.unmet_dependencies = [   MemoryDep('buf214', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op215.met_dependencies = []
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (98304, 1)
op215.sizes = ([2, 64, 12, 64], [])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op215_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf215', get_index_1, load, None)
        return store


op216: ExternKernelSchedulerNode(ExternKernelOut)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op216.met_dependencies = [StarDep(name='arg122_1', mode=None)]
op216.outputs = [
    buf216: ExternKernelOut
    buf216.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False)]
]
op216.node.kernel = extern_kernels.mm


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 98304})]
op217.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 98304}),
        MemoryDep('buf199', c0, {c0: 98304}),
        MemoryDep('buf216', c0, {c0: 98304})]
op217.met_dependencies = 
    [   MemoryDep('arg115_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg123_1', c1, {c0: 128, c1: 768})]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
    ]
]
op217.group.device = cuda:0
op217.group.iteration = (98304, 1)
op217.sizes = ([128, 768], [])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg123_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg115_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op217_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg123_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf192', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf199', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg115_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf217', get_index_5, add_3, None)
        return store


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 128})]
op218.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 98304})]
op218.met_dependencies = []
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf218.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (128, 768)
op218.sizes = ([128], [768])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op218_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf218', get_index_1, getitem)
        return store_reduction


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 128})]
op219.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 98304})]
op219.met_dependencies = []
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf219.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (128, 768)
op219.sizes = ([128], [768])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf219_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op219_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf219', get_index_1, getitem_1)
        return store_reduction


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 98304})]
op221.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 98304}),
        MemoryDep('buf218', c0, {c0: 128}),
        MemoryDep('buf219', c0, {c0: 128})]
op221.met_dependencies = 
    [   MemoryDep('arg124_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg125_1', c1, {c0: 128, c1: 768})]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (98304, 1)
op221.sizes = ([128, 768], [])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf219_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg124_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg125_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf221_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op221_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf218', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf219', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg124_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg125_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf221', get_index_5, add_1, None)
        return store


op222: ExternKernelSchedulerNode(ExternKernelOut)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='arg126_1', mode=None)]
op222.outputs = [
    buf222: ExternKernelOut
    buf222.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf222.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False)]
]
op222.node.kernel = extern_kernels.mm


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 393216})]
op223.unmet_dependencies = [MemoryDep('buf222', c0, {c0: 393216})]
op223.met_dependencies = [MemoryDep('arg127_1', c1, {c0: 128, c1: 3072})]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (393216, 1)
op223.sizes = ([128, 3072], [])
buf222_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg127_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op223_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg127_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf222', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg127_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf222', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg127_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf223', get_index_6, mul_5, None)
        return store


op224: ExternKernelSchedulerNode(ExternKernelOut)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf223', mode=None)]
op224.met_dependencies = [StarDep(name='arg128_1', mode=None)]
op224.outputs = [
    buf224: ExternKernelOut
    buf224.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf224.users = [
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
    ]
]
op224.node.kernel = extern_kernels.mm


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 128})]
op225.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 98304}), MemoryDep('buf224', c0, {c0: 98304})]
op225.met_dependencies = [MemoryDep('arg129_1', c1, {c0: 128, c1: 768})]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf225.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (128, 768)
op225.sizes = ([128], [768])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg129_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op225_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg129_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf225', get_index_3, getitem)
        return store_reduction


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 128})]
op226.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 98304}), MemoryDep('buf224', c0, {c0: 98304})]
op226.met_dependencies = [MemoryDep('arg129_1', c1, {c0: 128, c1: 768})]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf226.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (128, 768)
op226.sizes = ([128], [768])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg129_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op226_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg129_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf226', get_index_3, getitem_1)
        return store_reduction


op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 98304})]
op228.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 98304}),
        MemoryDep('buf224', c0, {c0: 98304}),
        MemoryDep('buf225', c0, {c0: 128}),
        MemoryDep('buf226', c0, {c0: 128})]
op228.met_dependencies = 
    [   MemoryDep('arg129_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg130_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg131_1', c1, {c0: 128, c1: 768})]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf228.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False),
    ]
]
op228.group.device = cuda:0
op228.group.iteration = (98304, 1)
op228.sizes = ([128, 768], [])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg129_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg130_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg131_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op228_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg129_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf225', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf226', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg130_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg131_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf228', get_index_7, add_3, None)
        return store


op229: ExternKernelSchedulerNode(ExternKernelOut)
op229.writes = [StarDep(name='buf229', mode=None)]
op229.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op229.met_dependencies = [StarDep(name='arg132_1', mode=None)]
op229.outputs = [
    buf229: ExternKernelOut
    buf229.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf229.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op229.node.kernel = extern_kernels.mm


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op230.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf230.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op230.node.kernel = extern_kernels.mm


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 98304})]
op231.unmet_dependencies = [   MemoryDep('buf229', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op231.met_dependencies = []
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (98304, 1)
op231.sizes = ([2, 12, 64, 64], [])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op231_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf231', get_index_1, load, None)
        return store


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 98304})]
op232.unmet_dependencies = [MemoryDep('buf230', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (98304, 1)
op232.sizes = ([2, 768, 64], [])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op232_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf232', get_index_1, load, None)
        return store


op233: ExternKernelSchedulerNode(ExternKernelOut)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf231', mode=None), StarDep(name='buf232', mode=None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: ExternKernelOut
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf233.users = [
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
    ]
]
op233.node.kernel = extern_kernels.bmm


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 1536})]
op234.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 98304})]
op234.met_dependencies = 
    [   MemoryDep('arg135_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf234.users = [
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
    ]
]
op234.group.device = cuda:0
op234.group.iteration = (1536, 64)
op234.sizes = ([2, 12, 64], [64])
arg135_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op234_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg135_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf233', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf234', get_index_9, reduction)
        return store_reduction


op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 1536})]
op235.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 98304}), MemoryDep('buf234', c0, {c0: 1536})]
op235.met_dependencies = 
    [   MemoryDep('arg135_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf235.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (1536, 64)
op235.sizes = ([2, 12, 64], [64])
arg135_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op235_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg135_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf233', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf234', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf235', get_index_10, reduction)
        return store_reduction


op236: ExternKernelSchedulerNode(ExternKernelOut)
op236.writes = [StarDep(name='buf236', mode=None)]
op236.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op236.met_dependencies = [StarDep(name='arg134_1', mode=None)]
op236.outputs = [
    buf236: ExternKernelOut
    buf236.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf236.users = [
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op236.node.kernel = extern_kernels.mm


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 98304})]
op237.unmet_dependencies = 
    [   MemoryDep('buf233', c0, {c0: 98304}),
        MemoryDep('buf234', c0, {c0: 1536}),
        MemoryDep('buf235', c0, {c0: 1536})]
op237.met_dependencies = 
    [   MemoryDep('arg135_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (98304, 1)
op237.sizes = ([2, 12, 64, 64], [])
arg135_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op237_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg135_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf233', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf234', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf235', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf237', get_index_11, truediv, None)
        return store


op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 98304})]
op238.unmet_dependencies = [   MemoryDep('buf236', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op238.met_dependencies = []
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (98304, 1)
op238.sizes = ([2, 12, 64, 64], [])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op238_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf238', get_index_1, load, None)
        return store


op239: ExternKernelSchedulerNode(ExternKernelOut)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf237', mode=None), StarDep(name='buf238', mode=None)]
op239.met_dependencies = []
op239.outputs = [
    buf239: ExternKernelOut
    buf239.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf239.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.node.kernel = extern_kernels.bmm


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 98304})]
op240.unmet_dependencies = [   MemoryDep('buf239', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op240.met_dependencies = []
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (98304, 1)
op240.sizes = ([2, 64, 12, 64], [])
buf239_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf240_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op240_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf240', get_index_1, load, None)
        return store


op241: ExternKernelSchedulerNode(ExternKernelOut)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op241.met_dependencies = [StarDep(name='arg136_1', mode=None)]
op241.outputs = [
    buf241: ExternKernelOut
    buf241.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf241.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False)]
]
op241.node.kernel = extern_kernels.mm


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 98304})]
op242.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 98304}),
        MemoryDep('buf224', c0, {c0: 98304}),
        MemoryDep('buf241', c0, {c0: 98304})]
op242.met_dependencies = 
    [   MemoryDep('arg129_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg137_1', c1, {c0: 128, c1: 768})]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf242.users = [
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op242.group.device = cuda:0
op242.group.iteration = (98304, 1)
op242.sizes = ([128, 768], [])
buf241_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg137_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf217_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg129_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op242_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf217', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf224', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg129_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf242', get_index_5, add_3, None)
        return store


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 128})]
op243.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 98304})]
op243.met_dependencies = []
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf243.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (128, 768)
op243.sizes = ([128], [768])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op243_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf243', get_index_1, getitem)
        return store_reduction


op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 128})]
op244.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 98304})]
op244.met_dependencies = []
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf244.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (128, 768)
op244.sizes = ([128], [768])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf244_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op244_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf244', get_index_1, getitem_1)
        return store_reduction


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 98304})]
op246.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 98304}),
        MemoryDep('buf243', c0, {c0: 128}),
        MemoryDep('buf244', c0, {c0: 128})]
op246.met_dependencies = 
    [   MemoryDep('arg138_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg139_1', c1, {c0: 128, c1: 768})]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (98304, 1)
op246.sizes = ([128, 768], [])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf244_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg138_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg139_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op246_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf243', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf244', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg138_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg139_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf246', get_index_5, add_1, None)
        return store


op247: ExternKernelSchedulerNode(ExternKernelOut)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf246', mode=None)]
op247.met_dependencies = [StarDep(name='arg140_1', mode=None)]
op247.outputs = [
    buf247: ExternKernelOut
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf247.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False)]
]
op247.node.kernel = extern_kernels.mm


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 393216})]
op248.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 393216})]
op248.met_dependencies = [MemoryDep('arg141_1', c1, {c0: 128, c1: 3072})]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (393216, 1)
op248.sizes = ([128, 3072], [])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg141_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op248_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg141_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf247', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg141_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf247', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg141_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf248', get_index_6, mul_5, None)
        return store


op249: ExternKernelSchedulerNode(ExternKernelOut)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf248', mode=None)]
op249.met_dependencies = [StarDep(name='arg142_1', mode=None)]
op249.outputs = [
    buf249: ExternKernelOut
    buf249.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf249.users = [
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op249.node.kernel = extern_kernels.mm


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 128})]
op250.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 98304}), MemoryDep('buf249', c0, {c0: 98304})]
op250.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 128, c1: 768})]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf250.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (128, 768)
op250.sizes = ([128], [768])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op250_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf250', get_index_3, getitem)
        return store_reduction


op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 128})]
op251.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 98304}), MemoryDep('buf249', c0, {c0: 98304})]
op251.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 128, c1: 768})]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf251.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (128, 768)
op251.sizes = ([128], [768])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op251_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf251', get_index_3, getitem_1)
        return store_reduction


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 98304})]
op253.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 98304}),
        MemoryDep('buf249', c0, {c0: 98304}),
        MemoryDep('buf250', c0, {c0: 128}),
        MemoryDep('buf251', c0, {c0: 128})]
op253.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg144_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg145_1', c1, {c0: 128, c1: 768})]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf253.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False),
    ]
]
op253.group.device = cuda:0
op253.group.iteration = (98304, 1)
op253.sizes = ([128, 768], [])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg144_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg145_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op253_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf250', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf251', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg144_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg145_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf253', get_index_7, add_3, None)
        return store


op254: ExternKernelSchedulerNode(ExternKernelOut)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op254.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op254.outputs = [
    buf254: ExternKernelOut
    buf254.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf254.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op254.node.kernel = extern_kernels.mm


op255: ExternKernelSchedulerNode(ExternKernelOut)
op255.writes = [StarDep(name='buf255', mode=None)]
op255.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op255.met_dependencies = [StarDep(name='arg147_1', mode=None)]
op255.outputs = [
    buf255: ExternKernelOut
    buf255.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf255.users = [
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op255.node.kernel = extern_kernels.mm


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 98304})]
op256.unmet_dependencies = [   MemoryDep('buf254', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op256.met_dependencies = []
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf256.users = [NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (98304, 1)
op256.sizes = ([2, 12, 64, 64], [])
buf254_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf256_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op256_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf256', get_index_1, load, None)
        return store


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 98304})]
op257.unmet_dependencies = [MemoryDep('buf255', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op257.met_dependencies = []
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf257.users = [NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (98304, 1)
op257.sizes = ([2, 768, 64], [])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op257_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf257', get_index_1, load, None)
        return store


op258: ExternKernelSchedulerNode(ExternKernelOut)
op258.writes = [StarDep(name='buf258', mode=None)]
op258.unmet_dependencies = [StarDep(name='buf256', mode=None), StarDep(name='buf257', mode=None)]
op258.met_dependencies = []
op258.outputs = [
    buf258: ExternKernelOut
    buf258.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf258.users = [
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False),
    ]
]
op258.node.kernel = extern_kernels.bmm


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 1536})]
op259.unmet_dependencies = [MemoryDep('buf258', c0, {c0: 98304})]
op259.met_dependencies = 
    [   MemoryDep('arg149_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
    ]
]
op259.group.device = cuda:0
op259.group.iteration = (1536, 64)
op259.sizes = ([2, 12, 64], [64])
arg149_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op259_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg149_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf258', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf259', get_index_9, reduction)
        return store_reduction


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 1536})]
op260.unmet_dependencies = [MemoryDep('buf258', c0, {c0: 98304}), MemoryDep('buf259', c0, {c0: 1536})]
op260.met_dependencies = 
    [   MemoryDep('arg149_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf260.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (1536, 64)
op260.sizes = ([2, 12, 64], [64])
arg149_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op260_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg149_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf258', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf259', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf260', get_index_10, reduction)
        return store_reduction


op261: ExternKernelSchedulerNode(ExternKernelOut)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op261.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op261.outputs = [
    buf261: ExternKernelOut
    buf261.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf261.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op261.node.kernel = extern_kernels.mm


op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 98304})]
op262.unmet_dependencies = 
    [   MemoryDep('buf258', c0, {c0: 98304}),
        MemoryDep('buf259', c0, {c0: 1536}),
        MemoryDep('buf260', c0, {c0: 1536})]
op262.met_dependencies = 
    [   MemoryDep('arg149_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf262.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op262.group.device = cuda:0
op262.group.iteration = (98304, 1)
op262.sizes = ([2, 12, 64, 64], [])
arg149_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op262_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg149_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf258', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf259', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf260', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf262', get_index_11, truediv, None)
        return store


op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 98304})]
op263.unmet_dependencies = [   MemoryDep('buf261', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op263.met_dependencies = []
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (98304, 1)
op263.sizes = ([2, 12, 64, 64], [])
buf261_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf263_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op263_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf263', get_index_1, load, None)
        return store


op264: ExternKernelSchedulerNode(ExternKernelOut)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = [StarDep(name='buf262', mode=None), StarDep(name='buf263', mode=None)]
op264.met_dependencies = []
op264.outputs = [
    buf264: ExternKernelOut
    buf264.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf264.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op264.node.kernel = extern_kernels.bmm


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 98304})]
op265.unmet_dependencies = [   MemoryDep('buf264', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op265.met_dependencies = []
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (98304, 1)
op265.sizes = ([2, 64, 12, 64], [])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op265_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf265', get_index_1, load, None)
        return store


op266: ExternKernelSchedulerNode(ExternKernelOut)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op266.met_dependencies = [StarDep(name='arg150_1', mode=None)]
op266.outputs = [
    buf266: ExternKernelOut
    buf266.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf266.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False)]
]
op266.node.kernel = extern_kernels.mm


op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 98304})]
op267.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 98304}),
        MemoryDep('buf249', c0, {c0: 98304}),
        MemoryDep('buf266', c0, {c0: 98304})]
op267.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg151_1', c1, {c0: 128, c1: 768})]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
    ]
]
op267.group.device = cuda:0
op267.group.iteration = (98304, 1)
op267.sizes = ([128, 768], [])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg151_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg143_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op267_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg151_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf242', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf249', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg143_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf267', get_index_5, add_3, None)
        return store


op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 128})]
op268.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 98304})]
op268.met_dependencies = []
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf268.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (128, 768)
op268.sizes = ([128], [768])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf268_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op268_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf268', get_index_1, getitem)
        return store_reduction


op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 128})]
op269.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 98304})]
op269.met_dependencies = []
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf269.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (128, 768)
op269.sizes = ([128], [768])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op269_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf269', get_index_1, getitem_1)
        return store_reduction


op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 98304})]
op271.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 98304}),
        MemoryDep('buf268', c0, {c0: 128}),
        MemoryDep('buf269', c0, {c0: 128})]
op271.met_dependencies = 
    [   MemoryDep('arg152_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg153_1', c1, {c0: 128, c1: 768})]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (98304, 1)
op271.sizes = ([128, 768], [])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf268_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg152_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg153_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf271_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op271_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf268', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf269', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg152_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg153_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf271', get_index_5, add_1, None)
        return store


op272: ExternKernelSchedulerNode(ExternKernelOut)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf271', mode=None)]
op272.met_dependencies = [StarDep(name='arg154_1', mode=None)]
op272.outputs = [
    buf272: ExternKernelOut
    buf272.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False)]
]
op272.node.kernel = extern_kernels.mm


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 393216})]
op273.unmet_dependencies = [MemoryDep('buf272', c0, {c0: 393216})]
op273.met_dependencies = [MemoryDep('arg155_1', c1, {c0: 128, c1: 3072})]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (393216, 1)
op273.sizes = ([128, 3072], [])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg155_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op273_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg155_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf272', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg155_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf272', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg155_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf273', get_index_6, mul_5, None)
        return store


op274: ExternKernelSchedulerNode(ExternKernelOut)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf273', mode=None)]
op274.met_dependencies = [StarDep(name='arg156_1', mode=None)]
op274.outputs = [
    buf274: ExternKernelOut
    buf274.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf274.users = [
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
    ]
]
op274.node.kernel = extern_kernels.mm


op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 128})]
op275.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 98304}), MemoryDep('buf274', c0, {c0: 98304})]
op275.met_dependencies = [MemoryDep('arg157_1', c1, {c0: 128, c1: 768})]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf275.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (128, 768)
op275.sizes = ([128], [768])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg157_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op275_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg157_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf275', get_index_3, getitem)
        return store_reduction


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 128})]
op276.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 98304}), MemoryDep('buf274', c0, {c0: 98304})]
op276.met_dependencies = [MemoryDep('arg157_1', c1, {c0: 128, c1: 768})]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf276.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (128, 768)
op276.sizes = ([128], [768])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg157_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op276_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg157_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf276', get_index_3, getitem_1)
        return store_reduction


op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 98304})]
op278.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 98304}),
        MemoryDep('buf274', c0, {c0: 98304}),
        MemoryDep('buf275', c0, {c0: 128}),
        MemoryDep('buf276', c0, {c0: 128})]
op278.met_dependencies = 
    [   MemoryDep('arg157_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg158_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg159_1', c1, {c0: 128, c1: 768})]
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf278.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False),
    ]
]
op278.group.device = cuda:0
op278.group.iteration = (98304, 1)
op278.sizes = ([128, 768], [])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg157_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg158_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg159_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf278_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op278_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg157_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf275', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf276', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg158_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg159_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf278', get_index_7, add_3, None)
        return store


op279: ExternKernelSchedulerNode(ExternKernelOut)
op279.writes = [StarDep(name='buf279', mode=None)]
op279.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op279.met_dependencies = [StarDep(name='arg160_1', mode=None)]
op279.outputs = [
    buf279: ExternKernelOut
    buf279.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf279.users = [NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op279.node.kernel = extern_kernels.mm


op280: ExternKernelSchedulerNode(ExternKernelOut)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op280.met_dependencies = [StarDep(name='arg161_1', mode=None)]
op280.outputs = [
    buf280: ExternKernelOut
    buf280.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf280.users = [
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op280.node.kernel = extern_kernels.mm


op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 98304})]
op281.unmet_dependencies = [   MemoryDep('buf279', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op281.met_dependencies = []
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf281.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op281.group.device = cuda:0
op281.group.iteration = (98304, 1)
op281.sizes = ([2, 12, 64, 64], [])
buf279_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf281_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op281_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf281', get_index_1, load, None)
        return store


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 98304})]
op282.unmet_dependencies = [MemoryDep('buf280', 49152*c0 + c1 + 768*c2, {c0: 2, c1: 768, c2: 64})]
op282.met_dependencies = []
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (98304, 1)
op282.sizes = ([2, 768, 64], [])
buf280_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf282_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op282_loop_body:
    var_ranges = {p0: 2, p1: 768, p2: 64}
    index0 = 49152*p0 + p1 + 768*p2
    index1 = 49152*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf282', get_index_1, load, None)
        return store


op283: ExternKernelSchedulerNode(ExternKernelOut)
op283.writes = [StarDep(name='buf283', mode=None)]
op283.unmet_dependencies = [StarDep(name='buf281', mode=None), StarDep(name='buf282', mode=None)]
op283.met_dependencies = []
op283.outputs = [
    buf283: ExternKernelOut
    buf283.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf283.users = [
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False),
    ]
]
op283.node.kernel = extern_kernels.bmm


op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 1536})]
op284.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 98304})]
op284.met_dependencies = 
    [   MemoryDep('arg163_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf284.users = [
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
    ]
]
op284.group.device = cuda:0
op284.group.iteration = (1536, 64)
op284.sizes = ([2, 12, 64], [64])
arg163_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op284_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg163_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf283', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_9 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf284', get_index_9, reduction)
        return store_reduction


op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 1536})]
op285.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 98304}), MemoryDep('buf284', c0, {c0: 1536})]
op285.met_dependencies = 
    [   MemoryDep('arg163_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
    buf285.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (1536, 64)
op285.sizes = ([2, 12, 64], [64])
arg163_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf285_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
class op285_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg163_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf283', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf284', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_10 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf285', get_index_10, reduction)
        return store_reduction


op286: ExternKernelSchedulerNode(ExternKernelOut)
op286.writes = [StarDep(name='buf286', mode=None)]
op286.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op286.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op286.outputs = [
    buf286: ExternKernelOut
    buf286.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf286.users = [
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op286.node.kernel = extern_kernels.mm


op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 98304})]
op287.unmet_dependencies = 
    [   MemoryDep('buf283', c0, {c0: 98304}),
        MemoryDep('buf284', c0, {c0: 1536}),
        MemoryDep('buf285', c0, {c0: 1536})]
op287.met_dependencies = 
    [   MemoryDep('arg163_1', 2048*c1 + c2, {c0: 24, c1: 64, c2: 64}),
        MemoryDep('arg2_1', 64*c0 + c2, {c0: 2, c1: 768, c2: 64})]
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf287.users = [NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (98304, 1)
op287.sizes = ([2, 12, 64, 64], [])
arg163_1_layout = FixedLayout('cuda:0', torch.bool, size=[1, 1, 2048, 2048], stride=[4194304, 4194304, 2048, 1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
arg2_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf285_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 1], stride=[768, 64, 1, 1536])
buf287_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op287_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 2048*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    index2 = -p2 + p3
    index3 = p3
    index4 = p2
    index5 = 64*p0 + p3
    index6 = 768*p0 + 64*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg163_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf283', get_index_1)
        constant = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(load, load_1, constant)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        ge = ops.ge(index_expr, constant_1)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ge, constant_2, constant_3)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        gt = ops.gt(index_expr_1, index_expr_2)
        to_dtype = ops.to_dtype(gt, torch.float32, src_dtype = torch.bool)
        mul = ops.mul(where_1, to_dtype)
        get_index_5 = self.get_index('index5')
        load_2 = ops.load('arg2_1', get_index_5)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        add = ops.add(mul, to_dtype_1)
        constant_4 = ops.constant(0.0, torch.float32)
        eq = ops.eq(add, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_5)
        constant_6 = ops.constant(-3.4028234663852886e+38, torch.float32)
        constant_7 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(ge_1, constant_6, constant_7)
        get_index_7 = self.get_index('index3')
        index_expr_4 = ops.index_expr(get_index_7, torch.int64)
        get_index_8 = self.get_index('index4')
        index_expr_5 = ops.index_expr(get_index_8, torch.int64)
        gt_1 = ops.gt(index_expr_4, index_expr_5)
        to_dtype_2 = ops.to_dtype(gt_1, torch.float32, src_dtype = torch.bool)
        mul_1 = ops.mul(where_2, to_dtype_2)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_3 = ops.where(eq, constant_8, mul_1)
        add_1 = ops.add(where, where_3)
        get_index_9 = self.get_index('index6')
        load_3 = ops.load('buf284', get_index_9)
        sub = ops.sub(add_1, load_3)
        exp = ops.exp(sub)
        get_index_10 = self.get_index('index6')
        load_4 = ops.load('buf285', get_index_10)
        truediv = ops.truediv(exp, load_4)
        get_index_11 = self.get_index('index1')
        store = ops.store('buf287', get_index_11, truediv, None)
        return store


op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 98304})]
op288.unmet_dependencies = [   MemoryDep('buf286', 49152*c0 + 64*c1 + 768*c2 + c3, {c0: 2, c1: 12, c2: 64, c3: 64})]
op288.met_dependencies = []
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
    buf288.users = [NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (98304, 1)
op288.sizes = ([2, 12, 64, 64], [])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf288_layout = FixedLayout('cuda:0', torch.float32, size=[2, 12, 64, 64], stride=[49152, 4096, 64, 1])
class op288_loop_body:
    var_ranges = {p0: 2, p1: 12, p2: 64, p3: 64}
    index0 = 49152*p0 + 64*p1 + 768*p2 + p3
    index1 = 49152*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf288', get_index_1, load, None)
        return store


op289: ExternKernelSchedulerNode(ExternKernelOut)
op289.writes = [StarDep(name='buf289', mode=None)]
op289.unmet_dependencies = [StarDep(name='buf287', mode=None), StarDep(name='buf288', mode=None)]
op289.met_dependencies = []
op289.outputs = [
    buf289: ExternKernelOut
    buf289.layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
    buf289.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op289.node.kernel = extern_kernels.bmm


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 98304})]
op290.unmet_dependencies = [   MemoryDep('buf289', 49152*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 12, c3: 64})]
op290.met_dependencies = []
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
    buf290.users = [NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (98304, 1)
op290.sizes = ([2, 64, 12, 64], [])
buf289_layout = FixedLayout('cuda:0', torch.float32, size=[24, 64, 64], stride=[4096, 64, 1])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 12, 64], stride=[49152, 768, 64, 1])
class op290_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 12, p3: 64}
    index0 = 49152*p0 + 64*p1 + 4096*p2 + p3
    index1 = 49152*p0 + 768*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf290', get_index_1, load, None)
        return store


op291: ExternKernelSchedulerNode(ExternKernelOut)
op291.writes = [StarDep(name='buf291', mode=None)]
op291.unmet_dependencies = [StarDep(name='buf290', mode=None)]
op291.met_dependencies = [StarDep(name='arg164_1', mode=None)]
op291.outputs = [
    buf291: ExternKernelOut
    buf291.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf291.users = [NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False)]
]
op291.node.kernel = extern_kernels.mm


op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 98304})]
op292.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 98304}),
        MemoryDep('buf274', c0, {c0: 98304}),
        MemoryDep('buf291', c0, {c0: 98304})]
op292.met_dependencies = 
    [   MemoryDep('arg157_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg165_1', c1, {c0: 128, c1: 768})]
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf292.users = [
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False),
    ]
]
op292.group.device = cuda:0
op292.group.iteration = (98304, 1)
op292.sizes = ([128, 768], [])
buf291_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg165_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg157_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op292_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg165_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf267', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf274', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg157_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(load_2, add_1)
        add_3 = ops.add(add, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf292', get_index_5, add_3, None)
        return store


op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 128})]
op293.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 98304})]
op293.met_dependencies = []
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf293.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op293.group.device = cuda:0
op293.group.iteration = (128, 768)
op293.sizes = ([128], [768])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf293_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op293_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf293', get_index_1, getitem)
        return store_reduction


op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 128})]
op294.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 98304})]
op294.met_dependencies = []
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf294.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op294.group.device = cuda:0
op294.group.iteration = (128, 768)
op294.sizes = ([128], [768])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf294_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op294_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf294', get_index_1, getitem_1)
        return store_reduction


op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 98304})]
op296.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 98304}),
        MemoryDep('buf293', c0, {c0: 128}),
        MemoryDep('buf294', c0, {c0: 128})]
op296.met_dependencies = 
    [   MemoryDep('arg166_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg167_1', c1, {c0: 128, c1: 768})]
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf296.users = [NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op296.group.device = cuda:0
op296.group.iteration = (98304, 1)
op296.sizes = ([128, 768], [])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf293_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf294_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg166_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg167_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf296_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op296_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf293', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf294', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg166_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg167_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf296', get_index_5, add_1, None)
        return store


op297: ExternKernelSchedulerNode(ExternKernelOut)
op297.writes = [StarDep(name='buf297', mode=None)]
op297.unmet_dependencies = [StarDep(name='buf296', mode=None)]
op297.met_dependencies = [StarDep(name='arg168_1', mode=None)]
op297.outputs = [
    buf297: ExternKernelOut
    buf297.layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
    buf297.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False)]
]
op297.node.kernel = extern_kernels.mm


op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 393216})]
op298.unmet_dependencies = [MemoryDep('buf297', c0, {c0: 393216})]
op298.met_dependencies = [MemoryDep('arg169_1', c1, {c0: 128, c1: 3072})]
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
    buf298.users = [NodeUser(node=ExternKernelSchedulerNode(name='op299'), can_inplace=False, is_weak=False)]
]
op298.group.device = cuda:0
op298.group.iteration = (393216, 1)
op298.sizes = ([128, 3072], [])
buf297_layout = FixedLayout('cuda:0', torch.float32, size=[128, 3072], stride=[3072, 1])
arg169_1_layout = FixedLayout('cuda:0', torch.float32, size=[3072], stride=[1])
buf298_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 3072], stride=[196608, 3072, 1])
class op298_loop_body:
    var_ranges = {p0: 128, p1: 3072}
    index0 = 3072*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf297', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg169_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf297', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg169_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf297', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg169_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul_1 = ops.mul(add_2, add_2)
        mul_2 = ops.mul(mul_1, add_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add_3 = ops.add(add_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add_3, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_4)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf298', get_index_6, mul_5, None)
        return store


op299: ExternKernelSchedulerNode(ExternKernelOut)
op299.writes = [StarDep(name='buf299', mode=None)]
op299.unmet_dependencies = [StarDep(name='buf298', mode=None)]
op299.met_dependencies = [StarDep(name='arg170_1', mode=None)]
op299.outputs = [
    buf299: ExternKernelOut
    buf299.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf299.users = [
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False),
    ]
]
op299.node.kernel = extern_kernels.mm


op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 128})]
op300.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 98304}), MemoryDep('buf299', c0, {c0: 98304})]
op300.met_dependencies = [MemoryDep('arg171_1', c1, {c0: 128, c1: 768})]
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf300.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op300.group.device = cuda:0
op300.group.iteration = (128, 768)
op300.sizes = ([128], [768])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf299_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg171_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf300_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op300_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf299', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg171_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf300', get_index_3, getitem)
        return store_reduction


op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 128})]
op301.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 98304}), MemoryDep('buf299', c0, {c0: 98304})]
op301.met_dependencies = [MemoryDep('arg171_1', c1, {c0: 128, c1: 768})]
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf301.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (128, 768)
op301.sizes = ([128], [768])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf299_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg171_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf301_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op301_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf299', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg171_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf301', get_index_3, getitem_1)
        return store_reduction


op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 98304})]
op303.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 98304}),
        MemoryDep('buf299', c0, {c0: 98304}),
        MemoryDep('buf300', c0, {c0: 128}),
        MemoryDep('buf301', c0, {c0: 128})]
op303.met_dependencies = 
    [   MemoryDep('arg171_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg172_1', c1, {c0: 128, c1: 768}),
        MemoryDep('arg173_1', c1, {c0: 128, c1: 768})]
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
    buf303.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op303.group.device = cuda:0
op303.group.iteration = (98304, 1)
op303.sizes = ([128, 768], [])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
buf299_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
arg171_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf300_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf301_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg172_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
arg173_1_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf303_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 768], stride=[49152, 768, 1])
class op303_loop_body:
    var_ranges = {p0: 128, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf299', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg171_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf300', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf301', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg172_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg173_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf303', get_index_7, add_3, None)
        return store




# ===== run_2025_10_19_03_43_12_574129-pid_19/torchinductor/model__0_inference_0.0/output_code.py =====
# AOT ID: ['0_inference']
from ctypes import c_void_p, c_long, c_int
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align
from torch import device, empty_strided
from torch._inductor.async_compile import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels
from torch._inductor.codegen.multi_kernel import MultiKernelCall
import triton
import triton.language as tl
from torch._inductor.runtime.triton_heuristics import (
    grid,
    split_scan_grid,
    grid_combo_kernels,
    start_graph,
    end_graph,
    cooperative_reduction_grid,
)
from torch._C import _cuda_getCurrentRawStream as get_raw_stream
from torch._C import _cuda_getCurrentRawStream as get_raw_stream

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
_quantized = torch.ops._quantized
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
alloc_from_pool = torch.ops.inductor._alloc_from_pool
async_compile = AsyncCompile()
empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p


# kernel path: /tmp/torchinductor_root/u2/cu2avv256uumunkz42m44b2gexgriczy5gacxfaoczav5552onmb.py
# Topologically Sorted Source Nodes: [inputs_embeds, position_embeds, hidden_states, hidden_states_2], Original ATen: [aten.embedding, aten.add, aten.native_layer_norm]
# Source node to ATen node mapping:
#   hidden_states => add_1
#   hidden_states_2 => add_2, add_3, mul_1, mul_2, rsqrt, sub_1, var_mean
#   inputs_embeds => embedding
#   position_embeds => embedding_1
# Graph fragment:
#   %embedding : [num_users=1] = call_function[target=torch.ops.aten.embedding.default](args = (%arg1_1, %arg0_1), kwargs = {})
#   %embedding_1 : [num_users=1] = call_function[target=torch.ops.aten.embedding.default](args = (%arg3_1, %unsqueeze), kwargs = {})
#   %add_1 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%embedding, %embedding_1), kwargs = {})
#   %var_mean : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_1, [2]), kwargs = {correction: 0, keepdim: True})
#   %sub_1 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_1, %getitem_1), kwargs = {})
#   %add_2 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem, 1e-05), kwargs = {})
#   %rsqrt : [num_users=1] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_2,), kwargs = {})
#   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_1, %rsqrt), kwargs = {})
#   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_1, %arg4_1), kwargs = {})
#   %add_3 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_2, %arg5_1), kwargs = {})
triton_red_fused_add_embedding_native_layer_norm_0 = async_compile.triton('triton_red_fused_add_embedding_native_layer_norm_0', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.reduction(
    size_hints={'x': 128, 'r': 1024},
    reduction_hint=ReductionHint.DEFAULT,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*i64', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr2': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_embedding_native_layer_norm_0', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 2, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False}
)
@triton.jit
def triton_red_fused_add_embedding_native_layer_norm_0(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 768
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x3), xmask, eviction_policy='evict_last')
    x0 = (xindex % 64)
    tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp7 = tl.load(in_ptr2 + (r2 + 768*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp1 = tl.full([XBLOCK, RBLOCK], 50257, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert(((0 <= tmp4) & (tmp4 < 50257)) | ~(xmask), "index out of bounds: 0 <= tmp4 < 50257")
        tmp6 = tl.load(in_ptr1 + (r2 + 768*tmp4), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
        tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
            tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
        )
        tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
        tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
        tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
    tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
        tmp10_mean, tmp10_m2, tmp10_weight, 1
    )
    tmp10 = tmp10_tmp[:, None]
    tmp11 = tmp11_tmp[:, None]
    tmp12 = tmp12_tmp[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp19 = tl.load(in_ptr2 + (r2 + 768*x0), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tl.load(in_ptr3 + (r2), rmask, eviction_policy='evict_last', other=0.0)
        tmp30 = tl.load(in_ptr4 + (r2), rmask, eviction_policy='evict_last', other=0.0)
        tmp13 = tl.full([XBLOCK, RBLOCK], 50257, tl.int32)
        tmp14 = tmp0 + tmp13
        tmp15 = tmp0 < 0
        tmp16 = tl.where(tmp15, tmp14, tmp0)
        tl.device_assert(((0 <= tmp16) & (tmp16 < 50257)) | ~(xmask), "index out of bounds: 0 <= tmp16 < 50257")
        tmp18 = tl.load(in_ptr1 + (r2 + 768*tmp16), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp20 - tmp10
        tmp22 = 768.0
        tmp23 = tmp11 / tmp22
        tmp24 = 1e-05
        tmp25 = tmp23 + tmp24
        tmp26 = libdevice.rsqrt(tmp25)
        tmp27 = tmp21 * tmp26
        tmp29 = tmp27 * tmp28
        tmp31 = tmp29 + tmp30
        tl.store(out_ptr2 + (r2 + 768*x3), tmp31, rmask & xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/fp/cfpw67dynbgp7kq56nas2zh4yharlizkj3gxxbefdf7abx2nk46j.py
# Topologically Sorted Source Nodes: [attn_weights], Original ATen: [aten.clone]
# Source node to ATen node mapping:
#   attn_weights => clone_2
# Graph fragment:
#   %clone_2 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%expand_2,), kwargs = {memory_format: torch.contiguous_format})
triton_poi_fused_clone_1 = async_compile.triton('triton_poi_fused_clone_1', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 131072}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_1', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_clone_1(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 98304
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = (xindex % 64)
    x1 = ((xindex // 64) % 64)
    x2 = ((xindex // 4096) % 12)
    x3 = xindex // 49152
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + 64*x2 + 768*x1 + 49152*x3), None)
    tl.store(out_ptr0 + (x4), tmp0, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/q7/cq7wfzxgaizn3vslnyuxwwx5hsksibbqnl73wknqtqg764dakhaf.py
# Topologically Sorted Source Nodes: [attn_weights], Original ATen: [aten.clone]
# Source node to ATen node mapping:
#   attn_weights => clone_3
# Graph fragment:
#   %clone_3 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%expand_3,), kwargs = {memory_format: torch.contiguous_format})
triton_poi_fused_clone_2 = async_compile.triton('triton_poi_fused_clone_2', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'y': 2048, 'x': 64}, tile_hint=TileHint.SQUARE,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_2', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_clone_2(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 1536
    xnumel = 64
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = yindex < ynumel
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x2 = xindex
    y0 = (yindex % 768)
    y1 = yindex // 768
    y3 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + 768*x2 + 49152*y1), xmask & ymask, eviction_policy='evict_last')
    tl.store(out_ptr0 + (x2 + 64*y3), tmp0, xmask & ymask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/pj/cpjzpg4ogpnhoy3nvf5xj4553peawiflr5qpocc6gi7ilytxlkzj.py
# Topologically Sorted Source Nodes: [mask_value, attn_weights_1, causal_mask_4, padding_mask, padding_mask_1, masked_fill, attn_weights_2, attn_weights_3], Original ATen: [aten.lift_fresh, aten.where, aten.clone, aten.add, aten.eq, aten.masked_fill, aten._softmax]
# Source node to ATen node mapping:
#   attn_weights_1 => where_2
#   attn_weights_2 => add_4
#   attn_weights_3 => amax, div, exp, sub_2, sum_1
#   causal_mask_4 => clone
#   mask_value => full_default_3
#   masked_fill => full_default_2, where_1
#   padding_mask => add
#   padding_mask_1 => eq
# Graph fragment:
#   %full_default_3 : [num_users=1] = call_function[target=torch.ops.aten.full.default](args = ([], -3.4028234663852886e+38), kwargs = {dtype: torch.float32, layout: torch.strided, device: cuda:0, pin_memory: False})
#   %where_2 : [num_users=1] = call_function[target=torch.ops.aten.where.self](args = (%slice_24, %view_12, %full_default_3), kwargs = {})
#   %clone : [num_users=2] = call_function[target=torch.ops.aten.clone.default](args = (%expand_1,), kwargs = {})
#   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%clone, %unsqueeze_8), kwargs = {})
#   %eq : [num_users=1] = call_function[target=torch.ops.aten.eq.Scalar](args = (%add, 0), kwargs = {})
#   %full_default_2 : [num_users=1] = call_function[target=torch.ops.aten.full.default](args = ([], -3.4028234663852886e+38), kwargs = {dtype: torch.float32, layout: torch.strided, device: cuda:0, pin_memory: False})
#   %where_1 : [num_users=12] = call_function[target=torch.ops.aten.where.self](args = (%eq, %full_default_2, %clone), kwargs = {})
#   %add_4 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%where_2, %where_1), kwargs = {})
#   %amax : [num_users=1] = call_function[target=torch.ops.aten.amax.default](args = (%add_4, [-1], True), kwargs = {})
#   %sub_2 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_4, %amax), kwargs = {})
#   %exp : [num_users=2] = call_function[target=torch.ops.aten.exp.default](args = (%sub_2,), kwargs = {})
#   %sum_1 : [num_users=1] = call_function[target=torch.ops.aten.sum.dim_IntList](args = (%exp, [-1], True), kwargs = {})
#   %div : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%exp, %sum_1), kwargs = {})
triton_per_fused__softmax_add_clone_eq_lift_fresh_masked_fill_where_3 = async_compile.triton('triton_per_fused__softmax_add_clone_eq_lift_fresh_masked_fill_where_3', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 2048, 'r': 64},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*i1', 'in_ptr1': '*i64', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused__softmax_add_clone_eq_lift_fresh_masked_fill_where_3', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 2, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False}
)
@triton.jit
def triton_per_fused__softmax_add_clone_eq_lift_fresh_masked_fill_where_3(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 1536
    rnumel = 64
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    roffset = 0
    rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
    r3 = rindex
    x0 = (xindex % 64)
    x5 = xindex
    x2 = xindex // 768
    tmp0 = tl.load(in_ptr0 + (r3 + 2048*x0), xmask, eviction_policy='evict_last', other=0.0).to(tl.int1)
    tmp1 = tl.load(in_out_ptr0 + (r3 + 64*x5), xmask, other=0.0)
    tmp14 = tl.load(in_ptr1 + (r3 + 64*x2), xmask, eviction_policy='evict_last', other=0.0)
    tmp2 = -3.4028234663852886e+38
    tmp3 = tl.where(tmp0, tmp1, tmp2)
    tmp4 = r3 + ((-1)*x0)
    tmp5 = tl.full([1, 1], 1, tl.int64)
    tmp6 = tmp4 >= tmp5
    tmp7 = 0.0
    tmp8 = tl.where(tmp6, tmp2, tmp7)
    tmp9 = r3
    tmp10 = x0
    tmp11 = tmp9 > tmp10
    tmp12 = tmp11.to(tl.float32)
    tmp13 = tmp8 * tmp12
    tmp15 = tmp14.to(tl.float32)
    tmp16 = tmp13 + tmp15
    tmp17 = tmp16 == tmp7
    tmp18 = tl.where(tmp17, tmp2, tmp13)
    tmp19 = tmp3 + tmp18
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp22 = tl.where(xmask, tmp20, float("-inf"))
    tmp23 = triton_helpers.max2(tmp22, 1)[:, None]
    tmp24 = tmp19 - tmp23
    tmp25 = tl_math.exp(tmp24)
    tmp26 = tl.broadcast_to(tmp25, [XBLOCK, RBLOCK])
    tmp28 = tl.where(xmask, tmp26, 0)
    tmp29 = tl.sum(tmp28, 1)[:, None]
    tmp30 = tmp25 / tmp29
    tl.store(in_out_ptr0 + (r3 + 64*x5), tmp30, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/h5/ch5z335lcbufe4fakqvqdvdyini2xlsf2nu6fkr7rxby6bcdiu6a.py
# Topologically Sorted Source Nodes: [tensor_4], Original ATen: [aten.clone]
# Source node to ATen node mapping:
#   tensor_4 => clone_6
# Graph fragment:
#   %clone_6 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%permute_7,), kwargs = {memory_format: torch.contiguous_format})
triton_poi_fused_clone_4 = async_compile.triton('triton_poi_fused_clone_4', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 131072}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_4', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_clone_4(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 98304
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = (xindex % 64)
    x1 = ((xindex // 64) % 12)
    x2 = ((xindex // 768) % 64)
    x3 = xindex // 49152
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + 64*x2 + 4096*x1 + 49152*x3), None)
    tl.store(out_ptr0 + (x4), tmp0, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/as/casvvhsdtclh6eoyb4kvn673vr7352b6h3ivweylmtkqmjirl4xc.py
# Topologically Sorted Source Nodes: [inputs_embeds, position_embeds, hidden_states, hidden_states_3, hidden_states_4], Original ATen: [aten.embedding, aten.add, aten.native_layer_norm]
# Source node to ATen node mapping:
#   hidden_states => add_1
#   hidden_states_3 => add_5
#   hidden_states_4 => add_6, add_7, mul_3, mul_4, rsqrt_1, sub_3, var_mean_1
#   inputs_embeds => embedding
#   position_embeds => embedding_1
# Graph fragment:
#   %embedding : [num_users=1] = call_function[target=torch.ops.aten.embedding.default](args = (%arg1_1, %arg0_1), kwargs = {})
#   %embedding_1 : [num_users=1] = call_function[target=torch.ops.aten.embedding.default](args = (%arg3_1, %unsqueeze), kwargs = {})
#   %add_1 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%embedding, %embedding_1), kwargs = {})
#   %add_5 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_18, %add_1), kwargs = {})
#   %var_mean_1 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_5, [2]), kwargs = {correction: 0, keepdim: True})
#   %sub_3 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_5, %getitem_3), kwargs = {})
#   %add_6 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_2, 1e-05), kwargs = {})
#   %rsqrt_1 : [num_users=1] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_6,), kwargs = {})
#   %mul_3 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_3, %rsqrt_1), kwargs = {})
#   %mul_4 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_3, %arg12_1), kwargs = {})
#   %add_7 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_4, %arg13_1), kwargs = {})
triton_per_fused_add_embedding_native_layer_norm_5 = async_compile.triton('triton_per_fused_add_embedding_native_layer_norm_5', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 128, 'r': 1024},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*i64', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'out_ptr2': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_embedding_native_layer_norm_5', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 6, 'num_reduction': 4, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False}
)
@triton.jit
def triton_per_fused_add_embedding_native_layer_norm_5(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
    xnumel = 128
    XBLOCK: tl.constexpr = 1
    rnumel = 768
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = rindex < rnumel
    r2 = rindex
    x3 = xindex
    x0 = (xindex % 64)
    tmp0 = tl.load(in_out_ptr0 + (r2 + 768*x3), rmask, other=0.0)
    tmp1 = tl.load(in_ptr0 + (r2), rmask, eviction_policy='evict_last', other=0.0)
    tmp3 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (r2 + 768*x0), rmask, eviction_policy='evict_last', other=0.0)
    tmp36 = tl.load(in_ptr4 + (r2), rmask, eviction_policy='evict_last', other=0.0)
    tmp38 = tl.load(in_ptr5 + (r2), rmask, eviction_policy='evict_last', other=0.0)
    tmp2 = tmp0 + tmp1
    tmp4 = tl.full([RBLOCK], 50257, tl.int32)
    tmp5 = tmp3 + tmp4
    tmp6 = tmp3 < 0
    tmp7 = tl.where(tmp6, tmp5, tmp3)
    tl.device_assert((0 <= tmp7) & (tmp7 < 50257), "index out of bounds: 0 <= tmp7 < 50257")
    tmp9 = tl.load(in_ptr2 + (r2 + 768*tmp7), rmask, other=0.0)
    tmp11 = tmp9 + tmp10
    tmp12 = tmp2 + tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask, tmp13, 0)
    tmp16 = tl.broadcast_to(tmp13, [RBLOCK])
    tmp18 = tl.where(rmask, tmp16, 0)
    tmp19 = triton_helpers.promote_to_tensor(tl.sum(tmp18, 0))
    tmp20 = tl.full([1], 768, tl.int32)
    tmp21 = tmp20.to(tl.float32)
    tmp22 = tmp19 / tmp21
    tmp23 = tmp13 - tmp22
    tmp24 = tmp23 * tmp23
    tmp25 = tl.broadcast_to(tmp24, [RBLOCK])
    tmp27 = tl.where(rmask, tmp25, 0)
    tmp28 = triton_helpers.promote_to_tensor(tl.sum(tmp27, 0))
    tmp29 = tmp12 - tmp22
    tmp30 = 768.0
    tmp31 = tmp28 / tmp30
    tmp32 = 1e-05
    tmp33 = tmp31 + tmp32
    tmp34 = libdevice.rsqrt(tmp33)
    tmp35 = tmp29 * tmp34
    tmp37 = tmp35 * tmp36
    tmp39 = tmp37 + tmp38
    tl.store(in_out_ptr0 + (r2 + 768*x3), tmp12, rmask)
    tl.store(out_ptr2 + (r2 + 768*x3), tmp39, rmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/hz/chzbru4pdmvk53koe2ysyxqsdomtwuynk362ek3pqkrtkozcwl2d.py
# Topologically Sorted Source Nodes: [mul, pow_1, mul_1, add_4, mul_2, tanh, add_5, hidden_states_6], Original ATen: [aten.mul, aten.pow, aten.add, aten.tanh]
# Source node to ATen node mapping:
#   add_4 => add_8
#   add_5 => add_9
#   hidden_states_6 => mul_8
#   mul => mul_5
#   mul_1 => mul_6
#   mul_2 => mul_7
#   pow_1 => pow_1
#   tanh => tanh
# Graph fragment:
#   %mul_5 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_20, 0.5), kwargs = {})
#   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%view_20, 3.0), kwargs = {})
#   %mul_6 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%pow_1, 0.044715), kwargs = {})
#   %add_8 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_20, %mul_6), kwargs = {})
#   %mul_7 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_8, 0.7978845608028654), kwargs = {})
#   %tanh : [num_users=1] = call_function[target=torch.ops.aten.tanh.default](args = (%mul_7,), kwargs = {})
#   %add_9 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%tanh, 1.0), kwargs = {})
#   %mul_8 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_5, %add_9), kwargs = {})
triton_poi_fused_add_mul_pow_tanh_6 = async_compile.triton('triton_poi_fused_add_mul_pow_tanh_6', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 524288}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_mul_pow_tanh_6', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_mul_pow_tanh_6(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 393216
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x2 = xindex
    x0 = (xindex % 3072)
    tmp0 = tl.load(in_out_ptr0 + (x2), None)
    tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
    tmp2 = tmp0 + tmp1
    tmp3 = 0.5
    tmp4 = tmp2 * tmp3
    tmp5 = tmp2 * tmp2
    tmp6 = tmp5 * tmp2
    tmp7 = 0.044715
    tmp8 = tmp6 * tmp7
    tmp9 = tmp2 + tmp8
    tmp10 = 0.7978845608028654
    tmp11 = tmp9 * tmp10
    tmp12 = libdevice.tanh(tmp11)
    tmp13 = 1.0
    tmp14 = tmp12 + tmp13
    tmp15 = tmp4 * tmp14
    tl.store(in_out_ptr0 + (x2), tmp15, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/rt/crtv4lrq7jwlvqj3j5cnnst3w5veuuydwbfrkyenwn3xpwfrrplq.py
# Topologically Sorted Source Nodes: [hidden_states_9, hidden_states_10], Original ATen: [aten.add, aten.native_layer_norm]
# Source node to ATen node mapping:
#   hidden_states_10 => add_11, add_12, mul_10, mul_9, rsqrt_2, sub_4, var_mean_2
#   hidden_states_9 => add_10
# Graph fragment:
#   %add_10 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_5, %view_22), kwargs = {})
#   %var_mean_2 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_10, [2]), kwargs = {correction: 0, keepdim: True})
#   %sub_4 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_10, %getitem_5), kwargs = {})
#   %add_11 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_4, 1e-05), kwargs = {})
#   %rsqrt_2 : [num_users=1] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_11,), kwargs = {})
#   %mul_9 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_4, %rsqrt_2), kwargs = {})
#   %mul_10 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_9, %arg18_1), kwargs = {})
#   %add_12 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_10, %arg19_1), kwargs = {})
triton_per_fused_add_native_layer_norm_7 = async_compile.triton('triton_per_fused_add_native_layer_norm_7', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 128, 'r': 1024},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr2': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_native_layer_norm_7', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False}
)
@triton.jit
def triton_per_fused_add_native_layer_norm_7(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
    xnumel = 128
    XBLOCK: tl.constexpr = 1
    rnumel = 768
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + 768*x0), rmask, other=0.0)
    tmp1 = tl.load(in_ptr1 + (r1 + 768*x0), rmask, other=0.0)
    tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp28 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp30 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp3 = tmp1 + tmp2
    tmp4 = tmp0 + tmp3
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask, tmp5, 0)
    tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
    tmp10 = tl.where(rmask, tmp8, 0)
    tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
    tmp12 = tl.full([1], 768, tl.int32)
    tmp13 = tmp12.to(tl.float32)
    tmp14 = tmp11 / tmp13
    tmp15 = tmp5 - tmp14
    tmp16 = tmp15 * tmp15
    tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
    tmp19 = tl.where(rmask, tmp17, 0)
    tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
    tmp21 = tmp4 - tmp14
    tmp22 = 768.0
    tmp23 = tmp20 / tmp22
    tmp24 = 1e-05
    tmp25 = tmp23 + tmp24
    tmp26 = libdevice.rsqrt(tmp25)
    tmp27 = tmp21 * tmp26
    tmp29 = tmp27 * tmp28
    tmp31 = tmp29 + tmp30
    tl.store(out_ptr2 + (r1 + 768*x0), tmp31, rmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/tx/ctxslom3ebrrgbo2mcypvhg3hyimvqznnblzesh57jyxyv3eigzb.py
# Topologically Sorted Source Nodes: [hidden_states_9, hidden_states_11, hidden_states_12], Original ATen: [aten.add, aten.native_layer_norm]
# Source node to ATen node mapping:
#   hidden_states_11 => add_14
#   hidden_states_12 => add_15, add_16, mul_11, mul_12, rsqrt_3, sub_6, var_mean_3
#   hidden_states_9 => add_10
# Graph fragment:
#   %add_10 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_5, %view_22), kwargs = {})
#   %add_14 : [num_users=3] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_40, %add_10), kwargs = {})
#   %var_mean_3 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_14, [2]), kwargs = {correction: 0, keepdim: True})
#   %sub_6 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_14, %getitem_7), kwargs = {})
#   %add_15 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_6, 1e-05), kwargs = {})
#   %rsqrt_3 : [num_users=1] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_15,), kwargs = {})
#   %mul_11 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_6, %rsqrt_3), kwargs = {})
#   %mul_12 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_11, %arg26_1), kwargs = {})
#   %add_16 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_12, %arg27_1), kwargs = {})
triton_per_fused_add_native_layer_norm_8 = async_compile.triton('triton_per_fused_add_native_layer_norm_8', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 128, 'r': 1024},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'out_ptr2': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_native_layer_norm_8', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False}
)
@triton.jit
def triton_per_fused_add_native_layer_norm_8(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
    xnumel = 128
    XBLOCK: tl.constexpr = 1
    rnumel = 768
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (r1 + 768*x0), rmask, other=0.0)
    tmp1 = tl.load(in_ptr0 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + 768*x0), rmask, other=0.0)
    tmp4 = tl.load(in_ptr2 + (r1 + 768*x0), rmask, other=0.0)
    tmp5 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp32 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp34 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp2 = tmp0 + tmp1
    tmp6 = tmp4 + tmp5
    tmp7 = tmp3 + tmp6
    tmp8 = tmp2 + tmp7
    tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
    tmp11 = tl.where(rmask, tmp9, 0)
    tmp12 = tl.broadcast_to(tmp9, [RBLOCK])
    tmp14 = tl.where(rmask, tmp12, 0)
    tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp14, 0))
    tmp16 = tl.full([1], 768, tl.int32)
    tmp17 = tmp16.to(tl.float32)
    tmp18 = tmp15 / tmp17
    tmp19 = tmp9 - tmp18
    tmp20 = tmp19 * tmp19
    tmp21 = tl.broadcast_to(tmp20, [RBLOCK])
    tmp23 = tl.where(rmask, tmp21, 0)
    tmp24 = triton_helpers.promote_to_tensor(tl.sum(tmp23, 0))
    tmp25 = tmp8 - tmp18
    tmp26 = 768.0
    tmp27 = tmp24 / tmp26
    tmp28 = 1e-05
    tmp29 = tmp27 + tmp28
    tmp30 = libdevice.rsqrt(tmp29)
    tmp31 = tmp25 * tmp30
    tmp33 = tmp31 * tmp32
    tmp35 = tmp33 + tmp34
    tl.store(in_out_ptr0 + (r1 + 768*x0), tmp8, rmask)
    tl.store(out_ptr2 + (r1 + 768*x0), tmp35, rmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/f2/cf2ksw4m6vpnnbabsq2dag25tbab6sbqwpszauoam5ugrajkpw57.py
# Topologically Sorted Source Nodes: [hidden_states_97, hidden_states_98, hidden_states_99], Original ATen: [aten.add, aten.native_layer_norm, aten.view]
# Source node to ATen node mapping:
#   hidden_states_97 => add_109
#   hidden_states_98 => add_110, add_111, mul_97, mul_98, rsqrt_24, sub_37, var_mean_24
#   hidden_states_99 => view_265
# Graph fragment:
#   %add_109 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_104, %view_264), kwargs = {})
#   %var_mean_24 : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_109, [2]), kwargs = {correction: 0, keepdim: True})
#   %sub_37 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_109, %getitem_49), kwargs = {})
#   %add_110 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem_48, 1e-05), kwargs = {})
#   %rsqrt_24 : [num_users=1] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_110,), kwargs = {})
#   %mul_97 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_37, %rsqrt_24), kwargs = {})
#   %mul_98 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_97, %arg172_1), kwargs = {})
#   %add_111 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_98, %arg173_1), kwargs = {})
#   %view_265 : [num_users=1] = call_function[target=torch.ops.aten.reshape.default](args = (%add_111, [-1, 64, 768]), kwargs = {})
triton_per_fused_add_native_layer_norm_view_9 = async_compile.triton('triton_per_fused_add_native_layer_norm_view_9', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 128, 'r': 1024},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_native_layer_norm_view_9', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False}
)
@triton.jit
def triton_per_fused_add_native_layer_norm_view_9(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, rnumel):
    xnumel = 128
    XBLOCK: tl.constexpr = 1
    rnumel = 768
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (r1 + 768*x0), rmask, other=0.0)
    tmp1 = tl.load(in_ptr0 + (r1 + 768*x0), rmask, other=0.0)
    tmp2 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp28 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp30 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
    tmp3 = tmp1 + tmp2
    tmp4 = tmp0 + tmp3
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask, tmp5, 0)
    tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
    tmp10 = tl.where(rmask, tmp8, 0)
    tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
    tmp12 = tl.full([1], 768, tl.int32)
    tmp13 = tmp12.to(tl.float32)
    tmp14 = tmp11 / tmp13
    tmp15 = tmp5 - tmp14
    tmp16 = tmp15 * tmp15
    tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
    tmp19 = tl.where(rmask, tmp17, 0)
    tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
    tmp21 = tmp4 - tmp14
    tmp22 = 768.0
    tmp23 = tmp20 / tmp22
    tmp24 = 1e-05
    tmp25 = tmp23 + tmp24
    tmp26 = libdevice.rsqrt(tmp25)
    tmp27 = tmp21 * tmp26
    tmp29 = tmp27 * tmp28
    tmp31 = tmp29 + tmp30
    tl.store(in_out_ptr0 + (r1 + 768*x0), tmp31, rmask)
''', device_str='cuda')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1, arg7_1, arg8_1, arg9_1, arg10_1, arg11_1, arg12_1, arg13_1, arg14_1, arg15_1, arg16_1, arg17_1, arg18_1, arg19_1, arg20_1, arg21_1, arg22_1, arg23_1, arg24_1, arg25_1, arg26_1, arg27_1, arg28_1, arg29_1, arg30_1, arg31_1, arg32_1, arg33_1, arg34_1, arg35_1, arg36_1, arg37_1, arg38_1, arg39_1, arg40_1, arg41_1, arg42_1, arg43_1, arg44_1, arg45_1, arg46_1, arg47_1, arg48_1, arg49_1, arg50_1, arg51_1, arg52_1, arg53_1, arg54_1, arg55_1, arg56_1, arg57_1, arg58_1, arg59_1, arg60_1, arg61_1, arg62_1, arg63_1, arg64_1, arg65_1, arg66_1, arg67_1, arg68_1, arg69_1, arg70_1, arg71_1, arg72_1, arg73_1, arg74_1, arg75_1, arg76_1, arg77_1, arg78_1, arg79_1, arg80_1, arg81_1, arg82_1, arg83_1, arg84_1, arg85_1, arg86_1, arg87_1, arg88_1, arg89_1, arg90_1, arg91_1, arg92_1, arg93_1, arg94_1, arg95_1, arg96_1, arg97_1, arg98_1, arg99_1, arg100_1, arg101_1, arg102_1, arg103_1, arg104_1, arg105_1, arg106_1, arg107_1, arg108_1, arg109_1, arg110_1, arg111_1, arg112_1, arg113_1, arg114_1, arg115_1, arg116_1, arg117_1, arg118_1, arg119_1, arg120_1, arg121_1, arg122_1, arg123_1, arg124_1, arg125_1, arg126_1, arg127_1, arg128_1, arg129_1, arg130_1, arg131_1, arg132_1, arg133_1, arg134_1, arg135_1, arg136_1, arg137_1, arg138_1, arg139_1, arg140_1, arg141_1, arg142_1, arg143_1, arg144_1, arg145_1, arg146_1, arg147_1, arg148_1, arg149_1, arg150_1, arg151_1, arg152_1, arg153_1, arg154_1, arg155_1, arg156_1, arg157_1, arg158_1, arg159_1, arg160_1, arg161_1, arg162_1, arg163_1, arg164_1, arg165_1, arg166_1, arg167_1, arg168_1, arg169_1, arg170_1, arg171_1, arg172_1, arg173_1 = args
    args.clear()
    assert_size_stride(arg0_1, (2, 64), (64, 1))
    assert_size_stride(arg1_1, (50257, 768), (768, 1))
    assert_size_stride(arg2_1, (2, 64), (64, 1))
    assert_size_stride(arg3_1, (2048, 768), (768, 1))
    assert_size_stride(arg4_1, (768, ), (1, ))
    assert_size_stride(arg5_1, (768, ), (1, ))
    assert_size_stride(arg6_1, (768, 768), (768, 1))
    assert_size_stride(arg7_1, (768, 768), (768, 1))
    assert_size_stride(arg8_1, (768, 768), (768, 1))
    assert_size_stride(arg9_1, (1, 1, 2048, 2048), (4194304, 4194304, 2048, 1))
    assert_size_stride(arg10_1, (768, 768), (768, 1))
    assert_size_stride(arg11_1, (768, ), (1, ))
    assert_size_stride(arg12_1, (768, ), (1, ))
    assert_size_stride(arg13_1, (768, ), (1, ))
    assert_size_stride(arg14_1, (3072, 768), (768, 1))
    assert_size_stride(arg15_1, (3072, ), (1, ))
    assert_size_stride(arg16_1, (768, 3072), (3072, 1))
    assert_size_stride(arg17_1, (768, ), (1, ))
    assert_size_stride(arg18_1, (768, ), (1, ))
    assert_size_stride(arg19_1, (768, ), (1, ))
    assert_size_stride(arg20_1, (768, 768), (768, 1))
    assert_size_stride(arg21_1, (768, 768), (768, 1))
    assert_size_stride(arg22_1, (768, 768), (768, 1))
    assert_size_stride(arg23_1, (1, 1, 2048, 2048), (4194304, 4194304, 2048, 1))
    assert_size_stride(arg24_1, (768, 768), (768, 1))
    assert_size_stride(arg25_1, (768, ), (1, ))
    assert_size_stride(arg26_1, (768, ), (1, ))
    assert_size_stride(arg27_1, (768, ), (1, ))
    assert_size_stride(arg28_1, (3072, 768), (768, 1))
    assert_size_stride(arg29_1, (3072, ), (1, ))
    assert_size_stride(arg30_1, (768, 3072), (3072, 1))
    assert_size_stride(arg31_1, (768, ), (1, ))
    assert_size_stride(arg32_1, (768, ), (1, ))
    assert_size_stride(arg33_1, (768, ), (1, ))
    assert_size_stride(arg34_1, (768, 768), (768, 1))
    assert_size_stride(arg35_1, (768, 768), (768, 1))
    assert_size_stride(arg36_1, (768, 768), (768, 1))
    assert_size_stride(arg37_1, (1, 1, 2048, 2048), (4194304, 4194304, 2048, 1))
    assert_size_stride(arg38_1, (768, 768), (768, 1))
    assert_size_stride(arg39_1, (768, ), (1, ))
    assert_size_stride(arg40_1, (768, ), (1, ))
    assert_size_stride(arg41_1, (768, ), (1, ))
    assert_size_stride(arg42_1, (3072, 768), (768, 1))
    assert_size_stride(arg43_1, (3072, ), (1, ))
    assert_size_stride(arg44_1, (768, 3072), (3072, 1))
    assert_size_stride(arg45_1, (768, ), (1, ))
    assert_size_stride(arg46_1, (768, ), (1, ))
    assert_size_stride(arg47_1, (768, ), (1, ))
    assert_size_stride(arg48_1, (768, 768), (768, 1))
    assert_size_stride(arg49_1, (768, 768), (768, 1))
    assert_size_stride(arg50_1, (768, 768), (768, 1))
    assert_size_stride(arg51_1, (1, 1, 2048, 2048), (4194304, 4194304, 2048, 1))
    assert_size_stride(arg52_1, (768, 768), (768, 1))
    assert_size_stride(arg53_1, (768, ), (1, ))
    assert_size_stride(arg54_1, (768, ), (1, ))
    assert_size_stride(arg55_1, (768, ), (1, ))
    assert_size_stride(arg56_1, (3072, 768), (768, 1))
    assert_size_stride(arg57_1, (3072, ), (1, ))
    assert_size_stride(arg58_1, (768, 3072), (3072, 1))
    assert_size_stride(arg59_1, (768, ), (1, ))
    assert_size_stride(arg60_1, (768, ), (1, ))
    assert_size_stride(arg61_1, (768, ), (1, ))
    assert_size_stride(arg62_1, (768, 768), (768, 1))
    assert_size_stride(arg63_1, (768, 768), (768, 1))
    assert_size_stride(arg64_1, (768, 768), (768, 1))
    assert_size_stride(arg65_1, (1, 1, 2048, 2048), (4194304, 4194304, 2048, 1))
    assert_size_stride(arg66_1, (768, 768), (768, 1))
    assert_size_stride(arg67_1, (768, ), (1, ))
    assert_size_stride(arg68_1, (768, ), (1, ))
    assert_size_stride(arg69_1, (768, ), (1, ))
    assert_size_stride(arg70_1, (3072, 768), (768, 1))
    assert_size_stride(arg71_1, (3072, ), (1, ))
    assert_size_stride(arg72_1, (768, 3072), (3072, 1))
    assert_size_stride(arg73_1, (768, ), (1, ))
    assert_size_stride(arg74_1, (768, ), (1, ))
    assert_size_stride(arg75_1, (768, ), (1, ))
    assert_size_stride(arg76_1, (768, 768), (768, 1))
    assert_size_stride(arg77_1, (768, 768), (768, 1))
    assert_size_stride(arg78_1, (768, 768), (768, 1))
    assert_size_stride(arg79_1, (1, 1, 2048, 2048), (4194304, 4194304, 2048, 1))
    assert_size_stride(arg80_1, (768, 768), (768, 1))
    assert_size_stride(arg81_1, (768, ), (1, ))
    assert_size_stride(arg82_1, (768, ), (1, ))
    assert_size_stride(arg83_1, (768, ), (1, ))
    assert_size_stride(arg84_1, (3072, 768), (768, 1))
    assert_size_stride(arg85_1, (3072, ), (1, ))
    assert_size_stride(arg86_1, (768, 3072), (3072, 1))
    assert_size_stride(arg87_1, (768, ), (1, ))
    assert_size_stride(arg88_1, (768, ), (1, ))
    assert_size_stride(arg89_1, (768, ), (1, ))
    assert_size_stride(arg90_1, (768, 768), (768, 1))
    assert_size_stride(arg91_1, (768, 768), (768, 1))
    assert_size_stride(arg92_1, (768, 768), (768, 1))
    assert_size_stride(arg93_1, (1, 1, 2048, 2048), (4194304, 4194304, 2048, 1))
    assert_size_stride(arg94_1, (768, 768), (768, 1))
    assert_size_stride(arg95_1, (768, ), (1, ))
    assert_size_stride(arg96_1, (768, ), (1, ))
    assert_size_stride(arg97_1, (768, ), (1, ))
    assert_size_stride(arg98_1, (3072, 768), (768, 1))
    assert_size_stride(arg99_1, (3072, ), (1, ))
    assert_size_stride(arg100_1, (768, 3072), (3072, 1))
    assert_size_stride(arg101_1, (768, ), (1, ))
    assert_size_stride(arg102_1, (768, ), (1, ))
    assert_size_stride(arg103_1, (768, ), (1, ))
    assert_size_stride(arg104_1, (768, 768), (768, 1))
    assert_size_stride(arg105_1, (768, 768), (768, 1))
    assert_size_stride(arg106_1, (768, 768), (768, 1))
    assert_size_stride(arg107_1, (1, 1, 2048, 2048), (4194304, 4194304, 2048, 1))
    assert_size_stride(arg108_1, (768, 768), (768, 1))
    assert_size_stride(arg109_1, (768, ), (1, ))
    assert_size_stride(arg110_1, (768, ), (1, ))
    assert_size_stride(arg111_1, (768, ), (1, ))
    assert_size_stride(arg112_1, (3072, 768), (768, 1))
    assert_size_stride(arg113_1, (3072, ), (1, ))
    assert_size_stride(arg114_1, (768, 3072), (3072, 1))
    assert_size_stride(arg115_1, (768, ), (1, ))
    assert_size_stride(arg116_1, (768, ), (1, ))
    assert_size_stride(arg117_1, (768, ), (1, ))
    assert_size_stride(arg118_1, (768, 768), (768, 1))
    assert_size_stride(arg119_1, (768, 768), (768, 1))
    assert_size_stride(arg120_1, (768, 768), (768, 1))
    assert_size_stride(arg121_1, (1, 1, 2048, 2048), (4194304, 4194304, 2048, 1))
    assert_size_stride(arg122_1, (768, 768), (768, 1))
    assert_size_stride(arg123_1, (768, ), (1, ))
    assert_size_stride(arg124_1, (768, ), (1, ))
    assert_size_stride(arg125_1, (768, ), (1, ))
    assert_size_stride(arg126_1, (3072, 768), (768, 1))
    assert_size_stride(arg127_1, (3072, ), (1, ))
    assert_size_stride(arg128_1, (768, 3072), (3072, 1))
    assert_size_stride(arg129_1, (768, ), (1, ))
    assert_size_stride(arg130_1, (768, ), (1, ))
    assert_size_stride(arg131_1, (768, ), (1, ))
    assert_size_stride(arg132_1, (768, 768), (768, 1))
    assert_size_stride(arg133_1, (768, 768), (768, 1))
    assert_size_stride(arg134_1, (768, 768), (768, 1))
    assert_size_stride(arg135_1, (1, 1, 2048, 2048), (4194304, 4194304, 2048, 1))
    assert_size_stride(arg136_1, (768, 768), (768, 1))
    assert_size_stride(arg137_1, (768, ), (1, ))
    assert_size_stride(arg138_1, (768, ), (1, ))
    assert_size_stride(arg139_1, (768, ), (1, ))
    assert_size_stride(arg140_1, (3072, 768), (768, 1))
    assert_size_stride(arg141_1, (3072, ), (1, ))
    assert_size_stride(arg142_1, (768, 3072), (3072, 1))
    assert_size_stride(arg143_1, (768, ), (1, ))
    assert_size_stride(arg144_1, (768, ), (1, ))
    assert_size_stride(arg145_1, (768, ), (1, ))
    assert_size_stride(arg146_1, (768, 768), (768, 1))
    assert_size_stride(arg147_1, (768, 768), (768, 1))
    assert_size_stride(arg148_1, (768, 768), (768, 1))
    assert_size_stride(arg149_1, (1, 1, 2048, 2048), (4194304, 4194304, 2048, 1))
    assert_size_stride(arg150_1, (768, 768), (768, 1))
    assert_size_stride(arg151_1, (768, ), (1, ))
    assert_size_stride(arg152_1, (768, ), (1, ))
    assert_size_stride(arg153_1, (768, ), (1, ))
    assert_size_stride(arg154_1, (3072, 768), (768, 1))
    assert_size_stride(arg155_1, (3072, ), (1, ))
    assert_size_stride(arg156_1, (768, 3072), (3072, 1))
    assert_size_stride(arg157_1, (768, ), (1, ))
    assert_size_stride(arg158_1, (768, ), (1, ))
    assert_size_stride(arg159_1, (768, ), (1, ))
    assert_size_stride(arg160_1, (768, 768), (768, 1))
    assert_size_stride(arg161_1, (768, 768), (768, 1))
    assert_size_stride(arg162_1, (768, 768), (768, 1))
    assert_size_stride(arg163_1, (1, 1, 2048, 2048), (4194304, 4194304, 2048, 1))
    assert_size_stride(arg164_1, (768, 768), (768, 1))
    assert_size_stride(arg165_1, (768, ), (1, ))
    assert_size_stride(arg166_1, (768, ), (1, ))
    assert_size_stride(arg167_1, (768, ), (1, ))
    assert_size_stride(arg168_1, (3072, 768), (768, 1))
    assert_size_stride(arg169_1, (3072, ), (1, ))
    assert_size_stride(arg170_1, (768, 3072), (3072, 1))
    assert_size_stride(arg171_1, (768, ), (1, ))
    assert_size_stride(arg172_1, (768, ), (1, ))
    assert_size_stride(arg173_1, (768, ), (1, ))
    with torch.cuda._DeviceGuard(0):
        torch.cuda.set_device(0)
        buf3 = empty_strided_cuda((2, 64, 768), (49152, 768, 1), torch.float32)
        # Topologically Sorted Source Nodes: [inputs_embeds, position_embeds, hidden_states, hidden_states_2], Original ATen: [aten.embedding, aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_red_fused_add_embedding_native_layer_norm_0.run(arg0_1, arg1_1, arg3_1, arg4_1, arg5_1, buf3, 128, 768, grid=grid(128), stream=stream0)
        del arg4_1
        del arg5_1
        buf4 = empty_strided_cuda((128, 768), (768, 1), torch.float32)
        # Topologically Sorted Source Nodes: [query], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3, (128, 768), (768, 1), 0), reinterpret_tensor(arg6_1, (768, 768), (1, 768), 0), out=buf4)
        del arg6_1
        buf5 = empty_strided_cuda((128, 768), (768, 1), torch.float32)
        # Topologically Sorted Source Nodes: [key], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3, (128, 768), (768, 1), 0), reinterpret_tensor(arg7_1, (768, 768), (1, 768), 0), out=buf5)
        del arg7_1
        buf6 = empty_strided_cuda((2, 12, 64, 64), (49152, 4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf4, buf6, 98304, grid=grid(98304), stream=stream0)
        buf7 = reinterpret_tensor(buf4, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf4  # reuse
        # Topologically Sorted Source Nodes: [attn_weights], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf5, buf7, 1536, 64, grid=grid(1536, 64), stream=stream0)
        buf8 = empty_strided_cuda((24, 64, 64), (4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf6, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf7, (24, 64, 64), (4096, 64, 1), 0), out=buf8)
        buf12 = reinterpret_tensor(buf8, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf8  # reuse
        # Topologically Sorted Source Nodes: [mask_value, attn_weights_1, causal_mask_4, padding_mask, padding_mask_1, masked_fill, attn_weights_2, attn_weights_3], Original ATen: [aten.lift_fresh, aten.where, aten.clone, aten.add, aten.eq, aten.masked_fill, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_add_clone_eq_lift_fresh_masked_fill_where_3.run(buf12, arg9_1, arg2_1, 1536, 64, grid=grid(1536), stream=stream0)
        del arg9_1
        buf11 = reinterpret_tensor(buf7, (128, 768), (768, 1), 0); del buf7  # reuse
        # Topologically Sorted Source Nodes: [value], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3, (128, 768), (768, 1), 0), reinterpret_tensor(arg8_1, (768, 768), (1, 768), 0), out=buf11)
        del arg8_1
        buf13 = reinterpret_tensor(buf3, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf3  # reuse
        # Topologically Sorted Source Nodes: [attn_output], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf11, buf13, 98304, grid=grid(98304), stream=stream0)
        buf14 = reinterpret_tensor(buf6, (24, 64, 64), (4096, 64, 1), 0); del buf6  # reuse
        # Topologically Sorted Source Nodes: [attn_output], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf12, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf13, (24, 64, 64), (4096, 64, 1), 0), out=buf14)
        buf15 = reinterpret_tensor(buf13, (2, 64, 12, 64), (49152, 768, 64, 1), 0); del buf13  # reuse
        # Topologically Sorted Source Nodes: [tensor_4], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf14, buf15, 98304, grid=grid(98304), stream=stream0)
        buf16 = reinterpret_tensor(buf14, (128, 768), (768, 1), 0); del buf14  # reuse
        # Topologically Sorted Source Nodes: [attn_output_2], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf15, (128, 768), (768, 1), 0), reinterpret_tensor(arg10_1, (768, 768), (1, 768), 0), out=buf16)
        del arg10_1
        buf17 = reinterpret_tensor(buf16, (2, 64, 768), (49152, 768, 1), 0); del buf16  # reuse
        buf21 = reinterpret_tensor(buf15, (2, 64, 768), (49152, 768, 1), 0); del buf15  # reuse
        # Topologically Sorted Source Nodes: [inputs_embeds, position_embeds, hidden_states, hidden_states_3, hidden_states_4], Original ATen: [aten.embedding, aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_embedding_native_layer_norm_5.run(buf17, arg11_1, arg0_1, arg1_1, arg3_1, arg12_1, arg13_1, buf21, 128, 768, grid=grid(128), stream=stream0)
        del arg0_1
        del arg11_1
        del arg12_1
        del arg13_1
        del arg1_1
        del arg3_1
        buf22 = empty_strided_cuda((128, 3072), (3072, 1), torch.float32)
        # Topologically Sorted Source Nodes: [hidden_states_5], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf21, (128, 768), (768, 1), 0), reinterpret_tensor(arg14_1, (768, 3072), (1, 768), 0), out=buf22)
        del arg14_1
        buf23 = reinterpret_tensor(buf22, (2, 64, 3072), (196608, 3072, 1), 0); del buf22  # reuse
        # Topologically Sorted Source Nodes: [mul, pow_1, mul_1, add_4, mul_2, tanh, add_5, hidden_states_6], Original ATen: [aten.mul, aten.pow, aten.add, aten.tanh]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_pow_tanh_6.run(buf23, arg15_1, 393216, grid=grid(393216), stream=stream0)
        del arg15_1
        buf24 = reinterpret_tensor(buf21, (128, 768), (768, 1), 0); del buf21  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_7], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf23, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg16_1, (3072, 768), (1, 3072), 0), out=buf24)
        del arg16_1
        buf28 = reinterpret_tensor(buf12, (2, 64, 768), (49152, 768, 1), 0); del buf12  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_9, hidden_states_10], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_7.run(buf17, buf24, arg17_1, arg18_1, arg19_1, buf28, 128, 768, grid=grid(128), stream=stream0)
        del arg18_1
        del arg19_1
        buf29 = empty_strided_cuda((128, 768), (768, 1), torch.float32)
        # Topologically Sorted Source Nodes: [query_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf28, (128, 768), (768, 1), 0), reinterpret_tensor(arg20_1, (768, 768), (1, 768), 0), out=buf29)
        del arg20_1
        buf30 = empty_strided_cuda((128, 768), (768, 1), torch.float32)
        # Topologically Sorted Source Nodes: [key_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf28, (128, 768), (768, 1), 0), reinterpret_tensor(arg21_1, (768, 768), (1, 768), 0), out=buf30)
        del arg21_1
        buf31 = empty_strided_cuda((2, 12, 64, 64), (49152, 4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_6], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf29, buf31, 98304, grid=grid(98304), stream=stream0)
        buf32 = reinterpret_tensor(buf29, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf29  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_6], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf30, buf32, 1536, 64, grid=grid(1536, 64), stream=stream0)
        buf33 = empty_strided_cuda((24, 64, 64), (4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_6], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf31, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf32, (24, 64, 64), (4096, 64, 1), 0), out=buf33)
        buf37 = reinterpret_tensor(buf33, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf33  # reuse
        # Topologically Sorted Source Nodes: [causal_mask_4, padding_mask, padding_mask_1, masked_fill, mask_value_1, attn_weights_7, attn_weights_8, attn_weights_9], Original ATen: [aten.clone, aten.add, aten.eq, aten.masked_fill, aten.lift_fresh, aten.where, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_add_clone_eq_lift_fresh_masked_fill_where_3.run(buf37, arg23_1, arg2_1, 1536, 64, grid=grid(1536), stream=stream0)
        del arg23_1
        buf36 = reinterpret_tensor(buf32, (128, 768), (768, 1), 0); del buf32  # reuse
        # Topologically Sorted Source Nodes: [value_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf28, (128, 768), (768, 1), 0), reinterpret_tensor(arg22_1, (768, 768), (1, 768), 0), out=buf36)
        del arg22_1
        buf38 = reinterpret_tensor(buf28, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf28  # reuse
        # Topologically Sorted Source Nodes: [attn_output_4], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf36, buf38, 98304, grid=grid(98304), stream=stream0)
        buf39 = reinterpret_tensor(buf31, (24, 64, 64), (4096, 64, 1), 0); del buf31  # reuse
        # Topologically Sorted Source Nodes: [attn_output_4], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf37, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf38, (24, 64, 64), (4096, 64, 1), 0), out=buf39)
        buf40 = reinterpret_tensor(buf38, (2, 64, 12, 64), (49152, 768, 64, 1), 0); del buf38  # reuse
        # Topologically Sorted Source Nodes: [tensor_9], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf39, buf40, 98304, grid=grid(98304), stream=stream0)
        buf41 = reinterpret_tensor(buf39, (128, 768), (768, 1), 0); del buf39  # reuse
        # Topologically Sorted Source Nodes: [attn_output_6], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf40, (128, 768), (768, 1), 0), reinterpret_tensor(arg24_1, (768, 768), (1, 768), 0), out=buf41)
        del arg24_1
        buf42 = reinterpret_tensor(buf41, (2, 64, 768), (49152, 768, 1), 0); del buf41  # reuse
        buf46 = reinterpret_tensor(buf40, (2, 64, 768), (49152, 768, 1), 0); del buf40  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_9, hidden_states_11, hidden_states_12], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_8.run(buf42, arg25_1, buf17, buf24, arg17_1, arg26_1, arg27_1, buf46, 128, 768, grid=grid(128), stream=stream0)
        del arg17_1
        del arg25_1
        del arg26_1
        del arg27_1
        buf47 = reinterpret_tensor(buf23, (128, 3072), (3072, 1), 0); del buf23  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_13], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf46, (128, 768), (768, 1), 0), reinterpret_tensor(arg28_1, (768, 3072), (1, 768), 0), out=buf47)
        del arg28_1
        buf48 = reinterpret_tensor(buf47, (2, 64, 3072), (196608, 3072, 1), 0); del buf47  # reuse
        # Topologically Sorted Source Nodes: [mul_4, pow_2, mul_5, add_9, mul_6, tanh_1, add_10, hidden_states_14], Original ATen: [aten.mul, aten.pow, aten.add, aten.tanh]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_pow_tanh_6.run(buf48, arg29_1, 393216, grid=grid(393216), stream=stream0)
        del arg29_1
        buf49 = reinterpret_tensor(buf46, (128, 768), (768, 1), 0); del buf46  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_15], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf48, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg30_1, (3072, 768), (1, 3072), 0), out=buf49)
        del arg30_1
        buf53 = reinterpret_tensor(buf24, (2, 64, 768), (49152, 768, 1), 0); del buf24  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_17, hidden_states_18], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_7.run(buf42, buf49, arg31_1, arg32_1, arg33_1, buf53, 128, 768, grid=grid(128), stream=stream0)
        del arg32_1
        del arg33_1
        buf54 = reinterpret_tensor(buf17, (128, 768), (768, 1), 0); del buf17  # reuse
        # Topologically Sorted Source Nodes: [query_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf53, (128, 768), (768, 1), 0), reinterpret_tensor(arg34_1, (768, 768), (1, 768), 0), out=buf54)
        del arg34_1
        buf55 = reinterpret_tensor(buf37, (128, 768), (768, 1), 0); del buf37  # reuse
        # Topologically Sorted Source Nodes: [key_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf53, (128, 768), (768, 1), 0), reinterpret_tensor(arg35_1, (768, 768), (1, 768), 0), out=buf55)
        del arg35_1
        buf56 = empty_strided_cuda((2, 12, 64, 64), (49152, 4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_12], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf54, buf56, 98304, grid=grid(98304), stream=stream0)
        buf57 = reinterpret_tensor(buf54, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf54  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_12], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf55, buf57, 1536, 64, grid=grid(1536, 64), stream=stream0)
        buf58 = empty_strided_cuda((24, 64, 64), (4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_12], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf56, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf57, (24, 64, 64), (4096, 64, 1), 0), out=buf58)
        buf62 = reinterpret_tensor(buf58, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf58  # reuse
        # Topologically Sorted Source Nodes: [causal_mask_4, padding_mask, padding_mask_1, masked_fill, mask_value_2, attn_weights_13, attn_weights_14, attn_weights_15], Original ATen: [aten.clone, aten.add, aten.eq, aten.masked_fill, aten.lift_fresh, aten.where, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_add_clone_eq_lift_fresh_masked_fill_where_3.run(buf62, arg37_1, arg2_1, 1536, 64, grid=grid(1536), stream=stream0)
        del arg37_1
        buf61 = reinterpret_tensor(buf57, (128, 768), (768, 1), 0); del buf57  # reuse
        # Topologically Sorted Source Nodes: [value_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf53, (128, 768), (768, 1), 0), reinterpret_tensor(arg36_1, (768, 768), (1, 768), 0), out=buf61)
        del arg36_1
        buf63 = reinterpret_tensor(buf53, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf53  # reuse
        # Topologically Sorted Source Nodes: [attn_output_8], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf61, buf63, 98304, grid=grid(98304), stream=stream0)
        buf64 = reinterpret_tensor(buf56, (24, 64, 64), (4096, 64, 1), 0); del buf56  # reuse
        # Topologically Sorted Source Nodes: [attn_output_8], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf62, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf63, (24, 64, 64), (4096, 64, 1), 0), out=buf64)
        buf65 = reinterpret_tensor(buf63, (2, 64, 12, 64), (49152, 768, 64, 1), 0); del buf63  # reuse
        # Topologically Sorted Source Nodes: [tensor_14], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf64, buf65, 98304, grid=grid(98304), stream=stream0)
        buf66 = reinterpret_tensor(buf64, (128, 768), (768, 1), 0); del buf64  # reuse
        # Topologically Sorted Source Nodes: [attn_output_10], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf65, (128, 768), (768, 1), 0), reinterpret_tensor(arg38_1, (768, 768), (1, 768), 0), out=buf66)
        del arg38_1
        buf67 = reinterpret_tensor(buf66, (2, 64, 768), (49152, 768, 1), 0); del buf66  # reuse
        buf71 = reinterpret_tensor(buf65, (2, 64, 768), (49152, 768, 1), 0); del buf65  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_17, hidden_states_19, hidden_states_20], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_8.run(buf67, arg39_1, buf42, buf49, arg31_1, arg40_1, arg41_1, buf71, 128, 768, grid=grid(128), stream=stream0)
        del arg31_1
        del arg39_1
        del arg40_1
        del arg41_1
        buf72 = reinterpret_tensor(buf48, (128, 3072), (3072, 1), 0); del buf48  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_21], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf71, (128, 768), (768, 1), 0), reinterpret_tensor(arg42_1, (768, 3072), (1, 768), 0), out=buf72)
        del arg42_1
        buf73 = reinterpret_tensor(buf72, (2, 64, 3072), (196608, 3072, 1), 0); del buf72  # reuse
        # Topologically Sorted Source Nodes: [mul_8, pow_3, mul_9, add_14, mul_10, tanh_2, add_15, hidden_states_22], Original ATen: [aten.mul, aten.pow, aten.add, aten.tanh]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_pow_tanh_6.run(buf73, arg43_1, 393216, grid=grid(393216), stream=stream0)
        del arg43_1
        buf74 = reinterpret_tensor(buf71, (128, 768), (768, 1), 0); del buf71  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_23], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf73, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg44_1, (3072, 768), (1, 3072), 0), out=buf74)
        del arg44_1
        buf78 = reinterpret_tensor(buf49, (2, 64, 768), (49152, 768, 1), 0); del buf49  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_25, hidden_states_26], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_7.run(buf67, buf74, arg45_1, arg46_1, arg47_1, buf78, 128, 768, grid=grid(128), stream=stream0)
        del arg46_1
        del arg47_1
        buf79 = reinterpret_tensor(buf42, (128, 768), (768, 1), 0); del buf42  # reuse
        # Topologically Sorted Source Nodes: [query_9], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf78, (128, 768), (768, 1), 0), reinterpret_tensor(arg48_1, (768, 768), (1, 768), 0), out=buf79)
        del arg48_1
        buf80 = reinterpret_tensor(buf62, (128, 768), (768, 1), 0); del buf62  # reuse
        # Topologically Sorted Source Nodes: [key_9], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf78, (128, 768), (768, 1), 0), reinterpret_tensor(arg49_1, (768, 768), (1, 768), 0), out=buf80)
        del arg49_1
        buf81 = empty_strided_cuda((2, 12, 64, 64), (49152, 4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_18], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf79, buf81, 98304, grid=grid(98304), stream=stream0)
        buf82 = reinterpret_tensor(buf79, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf79  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_18], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf80, buf82, 1536, 64, grid=grid(1536, 64), stream=stream0)
        buf83 = empty_strided_cuda((24, 64, 64), (4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_18], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf81, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf82, (24, 64, 64), (4096, 64, 1), 0), out=buf83)
        buf87 = reinterpret_tensor(buf83, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf83  # reuse
        # Topologically Sorted Source Nodes: [causal_mask_4, padding_mask, padding_mask_1, masked_fill, mask_value_3, attn_weights_19, attn_weights_20, attn_weights_21], Original ATen: [aten.clone, aten.add, aten.eq, aten.masked_fill, aten.lift_fresh, aten.where, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_add_clone_eq_lift_fresh_masked_fill_where_3.run(buf87, arg51_1, arg2_1, 1536, 64, grid=grid(1536), stream=stream0)
        del arg51_1
        buf86 = reinterpret_tensor(buf82, (128, 768), (768, 1), 0); del buf82  # reuse
        # Topologically Sorted Source Nodes: [value_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf78, (128, 768), (768, 1), 0), reinterpret_tensor(arg50_1, (768, 768), (1, 768), 0), out=buf86)
        del arg50_1
        buf88 = reinterpret_tensor(buf78, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf78  # reuse
        # Topologically Sorted Source Nodes: [attn_output_12], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf86, buf88, 98304, grid=grid(98304), stream=stream0)
        buf89 = reinterpret_tensor(buf81, (24, 64, 64), (4096, 64, 1), 0); del buf81  # reuse
        # Topologically Sorted Source Nodes: [attn_output_12], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf87, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf88, (24, 64, 64), (4096, 64, 1), 0), out=buf89)
        buf90 = reinterpret_tensor(buf88, (2, 64, 12, 64), (49152, 768, 64, 1), 0); del buf88  # reuse
        # Topologically Sorted Source Nodes: [tensor_19], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf89, buf90, 98304, grid=grid(98304), stream=stream0)
        buf91 = reinterpret_tensor(buf89, (128, 768), (768, 1), 0); del buf89  # reuse
        # Topologically Sorted Source Nodes: [attn_output_14], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf90, (128, 768), (768, 1), 0), reinterpret_tensor(arg52_1, (768, 768), (1, 768), 0), out=buf91)
        del arg52_1
        buf92 = reinterpret_tensor(buf91, (2, 64, 768), (49152, 768, 1), 0); del buf91  # reuse
        buf96 = reinterpret_tensor(buf90, (2, 64, 768), (49152, 768, 1), 0); del buf90  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_25, hidden_states_27, hidden_states_28], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_8.run(buf92, arg53_1, buf67, buf74, arg45_1, arg54_1, arg55_1, buf96, 128, 768, grid=grid(128), stream=stream0)
        del arg45_1
        del arg53_1
        del arg54_1
        del arg55_1
        buf97 = reinterpret_tensor(buf73, (128, 3072), (3072, 1), 0); del buf73  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_29], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf96, (128, 768), (768, 1), 0), reinterpret_tensor(arg56_1, (768, 3072), (1, 768), 0), out=buf97)
        del arg56_1
        buf98 = reinterpret_tensor(buf97, (2, 64, 3072), (196608, 3072, 1), 0); del buf97  # reuse
        # Topologically Sorted Source Nodes: [mul_12, pow_4, mul_13, add_19, mul_14, tanh_3, add_20, hidden_states_30], Original ATen: [aten.mul, aten.pow, aten.add, aten.tanh]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_pow_tanh_6.run(buf98, arg57_1, 393216, grid=grid(393216), stream=stream0)
        del arg57_1
        buf99 = reinterpret_tensor(buf96, (128, 768), (768, 1), 0); del buf96  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_31], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf98, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg58_1, (3072, 768), (1, 3072), 0), out=buf99)
        del arg58_1
        buf103 = reinterpret_tensor(buf74, (2, 64, 768), (49152, 768, 1), 0); del buf74  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_33, hidden_states_34], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_7.run(buf92, buf99, arg59_1, arg60_1, arg61_1, buf103, 128, 768, grid=grid(128), stream=stream0)
        del arg60_1
        del arg61_1
        buf104 = reinterpret_tensor(buf67, (128, 768), (768, 1), 0); del buf67  # reuse
        # Topologically Sorted Source Nodes: [query_12], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf103, (128, 768), (768, 1), 0), reinterpret_tensor(arg62_1, (768, 768), (1, 768), 0), out=buf104)
        del arg62_1
        buf105 = reinterpret_tensor(buf87, (128, 768), (768, 1), 0); del buf87  # reuse
        # Topologically Sorted Source Nodes: [key_12], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf103, (128, 768), (768, 1), 0), reinterpret_tensor(arg63_1, (768, 768), (1, 768), 0), out=buf105)
        del arg63_1
        buf106 = empty_strided_cuda((2, 12, 64, 64), (49152, 4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_24], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf104, buf106, 98304, grid=grid(98304), stream=stream0)
        buf107 = reinterpret_tensor(buf104, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf104  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_24], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf105, buf107, 1536, 64, grid=grid(1536, 64), stream=stream0)
        buf108 = empty_strided_cuda((24, 64, 64), (4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_24], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf106, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf107, (24, 64, 64), (4096, 64, 1), 0), out=buf108)
        buf112 = reinterpret_tensor(buf108, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf108  # reuse
        # Topologically Sorted Source Nodes: [causal_mask_4, padding_mask, padding_mask_1, masked_fill, mask_value_4, attn_weights_25, attn_weights_26, attn_weights_27], Original ATen: [aten.clone, aten.add, aten.eq, aten.masked_fill, aten.lift_fresh, aten.where, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_add_clone_eq_lift_fresh_masked_fill_where_3.run(buf112, arg65_1, arg2_1, 1536, 64, grid=grid(1536), stream=stream0)
        del arg65_1
        buf111 = reinterpret_tensor(buf107, (128, 768), (768, 1), 0); del buf107  # reuse
        # Topologically Sorted Source Nodes: [value_8], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf103, (128, 768), (768, 1), 0), reinterpret_tensor(arg64_1, (768, 768), (1, 768), 0), out=buf111)
        del arg64_1
        buf113 = reinterpret_tensor(buf103, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf103  # reuse
        # Topologically Sorted Source Nodes: [attn_output_16], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf111, buf113, 98304, grid=grid(98304), stream=stream0)
        buf114 = reinterpret_tensor(buf106, (24, 64, 64), (4096, 64, 1), 0); del buf106  # reuse
        # Topologically Sorted Source Nodes: [attn_output_16], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf112, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf113, (24, 64, 64), (4096, 64, 1), 0), out=buf114)
        buf115 = reinterpret_tensor(buf113, (2, 64, 12, 64), (49152, 768, 64, 1), 0); del buf113  # reuse
        # Topologically Sorted Source Nodes: [tensor_24], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf114, buf115, 98304, grid=grid(98304), stream=stream0)
        buf116 = reinterpret_tensor(buf114, (128, 768), (768, 1), 0); del buf114  # reuse
        # Topologically Sorted Source Nodes: [attn_output_18], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf115, (128, 768), (768, 1), 0), reinterpret_tensor(arg66_1, (768, 768), (1, 768), 0), out=buf116)
        del arg66_1
        buf117 = reinterpret_tensor(buf116, (2, 64, 768), (49152, 768, 1), 0); del buf116  # reuse
        buf121 = reinterpret_tensor(buf115, (2, 64, 768), (49152, 768, 1), 0); del buf115  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_33, hidden_states_35, hidden_states_36], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_8.run(buf117, arg67_1, buf92, buf99, arg59_1, arg68_1, arg69_1, buf121, 128, 768, grid=grid(128), stream=stream0)
        del arg59_1
        del arg67_1
        del arg68_1
        del arg69_1
        buf122 = reinterpret_tensor(buf98, (128, 3072), (3072, 1), 0); del buf98  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_37], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf121, (128, 768), (768, 1), 0), reinterpret_tensor(arg70_1, (768, 3072), (1, 768), 0), out=buf122)
        del arg70_1
        buf123 = reinterpret_tensor(buf122, (2, 64, 3072), (196608, 3072, 1), 0); del buf122  # reuse
        # Topologically Sorted Source Nodes: [mul_16, pow_5, mul_17, add_24, mul_18, tanh_4, add_25, hidden_states_38], Original ATen: [aten.mul, aten.pow, aten.add, aten.tanh]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_pow_tanh_6.run(buf123, arg71_1, 393216, grid=grid(393216), stream=stream0)
        del arg71_1
        buf124 = reinterpret_tensor(buf121, (128, 768), (768, 1), 0); del buf121  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_39], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf123, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg72_1, (3072, 768), (1, 3072), 0), out=buf124)
        del arg72_1
        buf128 = reinterpret_tensor(buf99, (2, 64, 768), (49152, 768, 1), 0); del buf99  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_41, hidden_states_42], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_7.run(buf117, buf124, arg73_1, arg74_1, arg75_1, buf128, 128, 768, grid=grid(128), stream=stream0)
        del arg74_1
        del arg75_1
        buf129 = reinterpret_tensor(buf92, (128, 768), (768, 1), 0); del buf92  # reuse
        # Topologically Sorted Source Nodes: [query_15], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf128, (128, 768), (768, 1), 0), reinterpret_tensor(arg76_1, (768, 768), (1, 768), 0), out=buf129)
        del arg76_1
        buf130 = reinterpret_tensor(buf112, (128, 768), (768, 1), 0); del buf112  # reuse
        # Topologically Sorted Source Nodes: [key_15], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf128, (128, 768), (768, 1), 0), reinterpret_tensor(arg77_1, (768, 768), (1, 768), 0), out=buf130)
        del arg77_1
        buf131 = empty_strided_cuda((2, 12, 64, 64), (49152, 4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_30], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf129, buf131, 98304, grid=grid(98304), stream=stream0)
        buf132 = reinterpret_tensor(buf129, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf129  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_30], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf130, buf132, 1536, 64, grid=grid(1536, 64), stream=stream0)
        buf133 = empty_strided_cuda((24, 64, 64), (4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_30], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf131, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf132, (24, 64, 64), (4096, 64, 1), 0), out=buf133)
        buf137 = reinterpret_tensor(buf133, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf133  # reuse
        # Topologically Sorted Source Nodes: [causal_mask_4, padding_mask, padding_mask_1, masked_fill, mask_value_5, attn_weights_31, attn_weights_32, attn_weights_33], Original ATen: [aten.clone, aten.add, aten.eq, aten.masked_fill, aten.lift_fresh, aten.where, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_add_clone_eq_lift_fresh_masked_fill_where_3.run(buf137, arg79_1, arg2_1, 1536, 64, grid=grid(1536), stream=stream0)
        del arg79_1
        buf136 = reinterpret_tensor(buf132, (128, 768), (768, 1), 0); del buf132  # reuse
        # Topologically Sorted Source Nodes: [value_10], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf128, (128, 768), (768, 1), 0), reinterpret_tensor(arg78_1, (768, 768), (1, 768), 0), out=buf136)
        del arg78_1
        buf138 = reinterpret_tensor(buf128, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf128  # reuse
        # Topologically Sorted Source Nodes: [attn_output_20], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf136, buf138, 98304, grid=grid(98304), stream=stream0)
        buf139 = reinterpret_tensor(buf131, (24, 64, 64), (4096, 64, 1), 0); del buf131  # reuse
        # Topologically Sorted Source Nodes: [attn_output_20], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf137, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf138, (24, 64, 64), (4096, 64, 1), 0), out=buf139)
        buf140 = reinterpret_tensor(buf138, (2, 64, 12, 64), (49152, 768, 64, 1), 0); del buf138  # reuse
        # Topologically Sorted Source Nodes: [tensor_29], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf139, buf140, 98304, grid=grid(98304), stream=stream0)
        buf141 = reinterpret_tensor(buf139, (128, 768), (768, 1), 0); del buf139  # reuse
        # Topologically Sorted Source Nodes: [attn_output_22], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf140, (128, 768), (768, 1), 0), reinterpret_tensor(arg80_1, (768, 768), (1, 768), 0), out=buf141)
        del arg80_1
        buf142 = reinterpret_tensor(buf141, (2, 64, 768), (49152, 768, 1), 0); del buf141  # reuse
        buf146 = reinterpret_tensor(buf140, (2, 64, 768), (49152, 768, 1), 0); del buf140  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_41, hidden_states_43, hidden_states_44], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_8.run(buf142, arg81_1, buf117, buf124, arg73_1, arg82_1, arg83_1, buf146, 128, 768, grid=grid(128), stream=stream0)
        del arg73_1
        del arg81_1
        del arg82_1
        del arg83_1
        buf147 = reinterpret_tensor(buf123, (128, 3072), (3072, 1), 0); del buf123  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_45], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf146, (128, 768), (768, 1), 0), reinterpret_tensor(arg84_1, (768, 3072), (1, 768), 0), out=buf147)
        del arg84_1
        buf148 = reinterpret_tensor(buf147, (2, 64, 3072), (196608, 3072, 1), 0); del buf147  # reuse
        # Topologically Sorted Source Nodes: [mul_20, pow_6, mul_21, add_29, mul_22, tanh_5, add_30, hidden_states_46], Original ATen: [aten.mul, aten.pow, aten.add, aten.tanh]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_pow_tanh_6.run(buf148, arg85_1, 393216, grid=grid(393216), stream=stream0)
        del arg85_1
        buf149 = reinterpret_tensor(buf146, (128, 768), (768, 1), 0); del buf146  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_47], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf148, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg86_1, (3072, 768), (1, 3072), 0), out=buf149)
        del arg86_1
        buf153 = reinterpret_tensor(buf124, (2, 64, 768), (49152, 768, 1), 0); del buf124  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_49, hidden_states_50], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_7.run(buf142, buf149, arg87_1, arg88_1, arg89_1, buf153, 128, 768, grid=grid(128), stream=stream0)
        del arg88_1
        del arg89_1
        buf154 = reinterpret_tensor(buf117, (128, 768), (768, 1), 0); del buf117  # reuse
        # Topologically Sorted Source Nodes: [query_18], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf153, (128, 768), (768, 1), 0), reinterpret_tensor(arg90_1, (768, 768), (1, 768), 0), out=buf154)
        del arg90_1
        buf155 = reinterpret_tensor(buf137, (128, 768), (768, 1), 0); del buf137  # reuse
        # Topologically Sorted Source Nodes: [key_18], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf153, (128, 768), (768, 1), 0), reinterpret_tensor(arg91_1, (768, 768), (1, 768), 0), out=buf155)
        del arg91_1
        buf156 = empty_strided_cuda((2, 12, 64, 64), (49152, 4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_36], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf154, buf156, 98304, grid=grid(98304), stream=stream0)
        buf157 = reinterpret_tensor(buf154, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf154  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_36], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf155, buf157, 1536, 64, grid=grid(1536, 64), stream=stream0)
        buf158 = empty_strided_cuda((24, 64, 64), (4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_36], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf156, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf157, (24, 64, 64), (4096, 64, 1), 0), out=buf158)
        buf162 = reinterpret_tensor(buf158, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf158  # reuse
        # Topologically Sorted Source Nodes: [causal_mask_4, padding_mask, padding_mask_1, masked_fill, mask_value_6, attn_weights_37, attn_weights_38, attn_weights_39], Original ATen: [aten.clone, aten.add, aten.eq, aten.masked_fill, aten.lift_fresh, aten.where, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_add_clone_eq_lift_fresh_masked_fill_where_3.run(buf162, arg93_1, arg2_1, 1536, 64, grid=grid(1536), stream=stream0)
        del arg93_1
        buf161 = reinterpret_tensor(buf157, (128, 768), (768, 1), 0); del buf157  # reuse
        # Topologically Sorted Source Nodes: [value_12], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf153, (128, 768), (768, 1), 0), reinterpret_tensor(arg92_1, (768, 768), (1, 768), 0), out=buf161)
        del arg92_1
        buf163 = reinterpret_tensor(buf153, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf153  # reuse
        # Topologically Sorted Source Nodes: [attn_output_24], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf161, buf163, 98304, grid=grid(98304), stream=stream0)
        buf164 = reinterpret_tensor(buf156, (24, 64, 64), (4096, 64, 1), 0); del buf156  # reuse
        # Topologically Sorted Source Nodes: [attn_output_24], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf162, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf163, (24, 64, 64), (4096, 64, 1), 0), out=buf164)
        buf165 = reinterpret_tensor(buf163, (2, 64, 12, 64), (49152, 768, 64, 1), 0); del buf163  # reuse
        # Topologically Sorted Source Nodes: [tensor_34], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf164, buf165, 98304, grid=grid(98304), stream=stream0)
        buf166 = reinterpret_tensor(buf164, (128, 768), (768, 1), 0); del buf164  # reuse
        # Topologically Sorted Source Nodes: [attn_output_26], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf165, (128, 768), (768, 1), 0), reinterpret_tensor(arg94_1, (768, 768), (1, 768), 0), out=buf166)
        del arg94_1
        buf167 = reinterpret_tensor(buf166, (2, 64, 768), (49152, 768, 1), 0); del buf166  # reuse
        buf171 = reinterpret_tensor(buf165, (2, 64, 768), (49152, 768, 1), 0); del buf165  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_49, hidden_states_51, hidden_states_52], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_8.run(buf167, arg95_1, buf142, buf149, arg87_1, arg96_1, arg97_1, buf171, 128, 768, grid=grid(128), stream=stream0)
        del arg87_1
        del arg95_1
        del arg96_1
        del arg97_1
        buf172 = reinterpret_tensor(buf148, (128, 3072), (3072, 1), 0); del buf148  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_53], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf171, (128, 768), (768, 1), 0), reinterpret_tensor(arg98_1, (768, 3072), (1, 768), 0), out=buf172)
        del arg98_1
        buf173 = reinterpret_tensor(buf172, (2, 64, 3072), (196608, 3072, 1), 0); del buf172  # reuse
        # Topologically Sorted Source Nodes: [mul_24, pow_7, mul_25, add_34, mul_26, tanh_6, add_35, hidden_states_54], Original ATen: [aten.mul, aten.pow, aten.add, aten.tanh]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_pow_tanh_6.run(buf173, arg99_1, 393216, grid=grid(393216), stream=stream0)
        del arg99_1
        buf174 = reinterpret_tensor(buf171, (128, 768), (768, 1), 0); del buf171  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_55], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf173, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg100_1, (3072, 768), (1, 3072), 0), out=buf174)
        del arg100_1
        buf178 = reinterpret_tensor(buf149, (2, 64, 768), (49152, 768, 1), 0); del buf149  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_57, hidden_states_58], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_7.run(buf167, buf174, arg101_1, arg102_1, arg103_1, buf178, 128, 768, grid=grid(128), stream=stream0)
        del arg102_1
        del arg103_1
        buf179 = reinterpret_tensor(buf142, (128, 768), (768, 1), 0); del buf142  # reuse
        # Topologically Sorted Source Nodes: [query_21], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf178, (128, 768), (768, 1), 0), reinterpret_tensor(arg104_1, (768, 768), (1, 768), 0), out=buf179)
        del arg104_1
        buf180 = reinterpret_tensor(buf162, (128, 768), (768, 1), 0); del buf162  # reuse
        # Topologically Sorted Source Nodes: [key_21], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf178, (128, 768), (768, 1), 0), reinterpret_tensor(arg105_1, (768, 768), (1, 768), 0), out=buf180)
        del arg105_1
        buf181 = empty_strided_cuda((2, 12, 64, 64), (49152, 4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_42], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf179, buf181, 98304, grid=grid(98304), stream=stream0)
        buf182 = reinterpret_tensor(buf179, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf179  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_42], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf180, buf182, 1536, 64, grid=grid(1536, 64), stream=stream0)
        buf183 = empty_strided_cuda((24, 64, 64), (4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_42], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf181, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf182, (24, 64, 64), (4096, 64, 1), 0), out=buf183)
        buf187 = reinterpret_tensor(buf183, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf183  # reuse
        # Topologically Sorted Source Nodes: [causal_mask_4, padding_mask, padding_mask_1, masked_fill, mask_value_7, attn_weights_43, attn_weights_44, attn_weights_45], Original ATen: [aten.clone, aten.add, aten.eq, aten.masked_fill, aten.lift_fresh, aten.where, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_add_clone_eq_lift_fresh_masked_fill_where_3.run(buf187, arg107_1, arg2_1, 1536, 64, grid=grid(1536), stream=stream0)
        del arg107_1
        buf186 = reinterpret_tensor(buf182, (128, 768), (768, 1), 0); del buf182  # reuse
        # Topologically Sorted Source Nodes: [value_14], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf178, (128, 768), (768, 1), 0), reinterpret_tensor(arg106_1, (768, 768), (1, 768), 0), out=buf186)
        del arg106_1
        buf188 = reinterpret_tensor(buf178, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf178  # reuse
        # Topologically Sorted Source Nodes: [attn_output_28], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf186, buf188, 98304, grid=grid(98304), stream=stream0)
        buf189 = reinterpret_tensor(buf181, (24, 64, 64), (4096, 64, 1), 0); del buf181  # reuse
        # Topologically Sorted Source Nodes: [attn_output_28], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf187, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf188, (24, 64, 64), (4096, 64, 1), 0), out=buf189)
        buf190 = reinterpret_tensor(buf188, (2, 64, 12, 64), (49152, 768, 64, 1), 0); del buf188  # reuse
        # Topologically Sorted Source Nodes: [tensor_39], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf189, buf190, 98304, grid=grid(98304), stream=stream0)
        buf191 = reinterpret_tensor(buf189, (128, 768), (768, 1), 0); del buf189  # reuse
        # Topologically Sorted Source Nodes: [attn_output_30], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf190, (128, 768), (768, 1), 0), reinterpret_tensor(arg108_1, (768, 768), (1, 768), 0), out=buf191)
        del arg108_1
        buf192 = reinterpret_tensor(buf191, (2, 64, 768), (49152, 768, 1), 0); del buf191  # reuse
        buf196 = reinterpret_tensor(buf190, (2, 64, 768), (49152, 768, 1), 0); del buf190  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_57, hidden_states_59, hidden_states_60], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_8.run(buf192, arg109_1, buf167, buf174, arg101_1, arg110_1, arg111_1, buf196, 128, 768, grid=grid(128), stream=stream0)
        del arg101_1
        del arg109_1
        del arg110_1
        del arg111_1
        buf197 = reinterpret_tensor(buf173, (128, 3072), (3072, 1), 0); del buf173  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_61], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf196, (128, 768), (768, 1), 0), reinterpret_tensor(arg112_1, (768, 3072), (1, 768), 0), out=buf197)
        del arg112_1
        buf198 = reinterpret_tensor(buf197, (2, 64, 3072), (196608, 3072, 1), 0); del buf197  # reuse
        # Topologically Sorted Source Nodes: [mul_28, pow_8, mul_29, add_39, mul_30, tanh_7, add_40, hidden_states_62], Original ATen: [aten.mul, aten.pow, aten.add, aten.tanh]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_pow_tanh_6.run(buf198, arg113_1, 393216, grid=grid(393216), stream=stream0)
        del arg113_1
        buf199 = reinterpret_tensor(buf196, (128, 768), (768, 1), 0); del buf196  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_63], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf198, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg114_1, (3072, 768), (1, 3072), 0), out=buf199)
        del arg114_1
        buf203 = reinterpret_tensor(buf174, (2, 64, 768), (49152, 768, 1), 0); del buf174  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_65, hidden_states_66], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_7.run(buf192, buf199, arg115_1, arg116_1, arg117_1, buf203, 128, 768, grid=grid(128), stream=stream0)
        del arg116_1
        del arg117_1
        buf204 = reinterpret_tensor(buf167, (128, 768), (768, 1), 0); del buf167  # reuse
        # Topologically Sorted Source Nodes: [query_24], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf203, (128, 768), (768, 1), 0), reinterpret_tensor(arg118_1, (768, 768), (1, 768), 0), out=buf204)
        del arg118_1
        buf205 = reinterpret_tensor(buf187, (128, 768), (768, 1), 0); del buf187  # reuse
        # Topologically Sorted Source Nodes: [key_24], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf203, (128, 768), (768, 1), 0), reinterpret_tensor(arg119_1, (768, 768), (1, 768), 0), out=buf205)
        del arg119_1
        buf206 = empty_strided_cuda((2, 12, 64, 64), (49152, 4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_48], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf204, buf206, 98304, grid=grid(98304), stream=stream0)
        buf207 = reinterpret_tensor(buf204, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf204  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_48], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf205, buf207, 1536, 64, grid=grid(1536, 64), stream=stream0)
        buf208 = empty_strided_cuda((24, 64, 64), (4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_48], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf206, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf207, (24, 64, 64), (4096, 64, 1), 0), out=buf208)
        buf212 = reinterpret_tensor(buf208, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf208  # reuse
        # Topologically Sorted Source Nodes: [causal_mask_4, padding_mask, padding_mask_1, masked_fill, mask_value_8, attn_weights_49, attn_weights_50, attn_weights_51], Original ATen: [aten.clone, aten.add, aten.eq, aten.masked_fill, aten.lift_fresh, aten.where, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_add_clone_eq_lift_fresh_masked_fill_where_3.run(buf212, arg121_1, arg2_1, 1536, 64, grid=grid(1536), stream=stream0)
        del arg121_1
        buf211 = reinterpret_tensor(buf207, (128, 768), (768, 1), 0); del buf207  # reuse
        # Topologically Sorted Source Nodes: [value_16], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf203, (128, 768), (768, 1), 0), reinterpret_tensor(arg120_1, (768, 768), (1, 768), 0), out=buf211)
        del arg120_1
        buf213 = reinterpret_tensor(buf203, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf203  # reuse
        # Topologically Sorted Source Nodes: [attn_output_32], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf211, buf213, 98304, grid=grid(98304), stream=stream0)
        buf214 = reinterpret_tensor(buf206, (24, 64, 64), (4096, 64, 1), 0); del buf206  # reuse
        # Topologically Sorted Source Nodes: [attn_output_32], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf212, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf213, (24, 64, 64), (4096, 64, 1), 0), out=buf214)
        buf215 = reinterpret_tensor(buf213, (2, 64, 12, 64), (49152, 768, 64, 1), 0); del buf213  # reuse
        # Topologically Sorted Source Nodes: [tensor_44], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf214, buf215, 98304, grid=grid(98304), stream=stream0)
        buf216 = reinterpret_tensor(buf214, (128, 768), (768, 1), 0); del buf214  # reuse
        # Topologically Sorted Source Nodes: [attn_output_34], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf215, (128, 768), (768, 1), 0), reinterpret_tensor(arg122_1, (768, 768), (1, 768), 0), out=buf216)
        del arg122_1
        buf217 = reinterpret_tensor(buf216, (2, 64, 768), (49152, 768, 1), 0); del buf216  # reuse
        buf221 = reinterpret_tensor(buf215, (2, 64, 768), (49152, 768, 1), 0); del buf215  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_65, hidden_states_67, hidden_states_68], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_8.run(buf217, arg123_1, buf192, buf199, arg115_1, arg124_1, arg125_1, buf221, 128, 768, grid=grid(128), stream=stream0)
        del arg115_1
        del arg123_1
        del arg124_1
        del arg125_1
        buf222 = reinterpret_tensor(buf198, (128, 3072), (3072, 1), 0); del buf198  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_69], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf221, (128, 768), (768, 1), 0), reinterpret_tensor(arg126_1, (768, 3072), (1, 768), 0), out=buf222)
        del arg126_1
        buf223 = reinterpret_tensor(buf222, (2, 64, 3072), (196608, 3072, 1), 0); del buf222  # reuse
        # Topologically Sorted Source Nodes: [mul_32, pow_9, mul_33, add_44, mul_34, tanh_8, add_45, hidden_states_70], Original ATen: [aten.mul, aten.pow, aten.add, aten.tanh]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_pow_tanh_6.run(buf223, arg127_1, 393216, grid=grid(393216), stream=stream0)
        del arg127_1
        buf224 = reinterpret_tensor(buf221, (128, 768), (768, 1), 0); del buf221  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_71], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf223, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg128_1, (3072, 768), (1, 3072), 0), out=buf224)
        del arg128_1
        buf228 = reinterpret_tensor(buf199, (2, 64, 768), (49152, 768, 1), 0); del buf199  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_73, hidden_states_74], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_7.run(buf217, buf224, arg129_1, arg130_1, arg131_1, buf228, 128, 768, grid=grid(128), stream=stream0)
        del arg130_1
        del arg131_1
        buf229 = reinterpret_tensor(buf192, (128, 768), (768, 1), 0); del buf192  # reuse
        # Topologically Sorted Source Nodes: [query_27], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf228, (128, 768), (768, 1), 0), reinterpret_tensor(arg132_1, (768, 768), (1, 768), 0), out=buf229)
        del arg132_1
        buf230 = reinterpret_tensor(buf212, (128, 768), (768, 1), 0); del buf212  # reuse
        # Topologically Sorted Source Nodes: [key_27], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf228, (128, 768), (768, 1), 0), reinterpret_tensor(arg133_1, (768, 768), (1, 768), 0), out=buf230)
        del arg133_1
        buf231 = empty_strided_cuda((2, 12, 64, 64), (49152, 4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_54], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf229, buf231, 98304, grid=grid(98304), stream=stream0)
        buf232 = reinterpret_tensor(buf229, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf229  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_54], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf230, buf232, 1536, 64, grid=grid(1536, 64), stream=stream0)
        buf233 = empty_strided_cuda((24, 64, 64), (4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_54], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf231, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf232, (24, 64, 64), (4096, 64, 1), 0), out=buf233)
        buf237 = reinterpret_tensor(buf233, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf233  # reuse
        # Topologically Sorted Source Nodes: [causal_mask_4, padding_mask, padding_mask_1, masked_fill, mask_value_9, attn_weights_55, attn_weights_56, attn_weights_57], Original ATen: [aten.clone, aten.add, aten.eq, aten.masked_fill, aten.lift_fresh, aten.where, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_add_clone_eq_lift_fresh_masked_fill_where_3.run(buf237, arg135_1, arg2_1, 1536, 64, grid=grid(1536), stream=stream0)
        del arg135_1
        buf236 = reinterpret_tensor(buf232, (128, 768), (768, 1), 0); del buf232  # reuse
        # Topologically Sorted Source Nodes: [value_18], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf228, (128, 768), (768, 1), 0), reinterpret_tensor(arg134_1, (768, 768), (1, 768), 0), out=buf236)
        del arg134_1
        buf238 = reinterpret_tensor(buf228, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf228  # reuse
        # Topologically Sorted Source Nodes: [attn_output_36], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf236, buf238, 98304, grid=grid(98304), stream=stream0)
        buf239 = reinterpret_tensor(buf231, (24, 64, 64), (4096, 64, 1), 0); del buf231  # reuse
        # Topologically Sorted Source Nodes: [attn_output_36], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf237, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf238, (24, 64, 64), (4096, 64, 1), 0), out=buf239)
        buf240 = reinterpret_tensor(buf238, (2, 64, 12, 64), (49152, 768, 64, 1), 0); del buf238  # reuse
        # Topologically Sorted Source Nodes: [tensor_49], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf239, buf240, 98304, grid=grid(98304), stream=stream0)
        buf241 = reinterpret_tensor(buf239, (128, 768), (768, 1), 0); del buf239  # reuse
        # Topologically Sorted Source Nodes: [attn_output_38], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf240, (128, 768), (768, 1), 0), reinterpret_tensor(arg136_1, (768, 768), (1, 768), 0), out=buf241)
        del arg136_1
        buf242 = reinterpret_tensor(buf241, (2, 64, 768), (49152, 768, 1), 0); del buf241  # reuse
        buf246 = reinterpret_tensor(buf240, (2, 64, 768), (49152, 768, 1), 0); del buf240  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_73, hidden_states_75, hidden_states_76], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_8.run(buf242, arg137_1, buf217, buf224, arg129_1, arg138_1, arg139_1, buf246, 128, 768, grid=grid(128), stream=stream0)
        del arg129_1
        del arg137_1
        del arg138_1
        del arg139_1
        buf247 = reinterpret_tensor(buf223, (128, 3072), (3072, 1), 0); del buf223  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_77], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf246, (128, 768), (768, 1), 0), reinterpret_tensor(arg140_1, (768, 3072), (1, 768), 0), out=buf247)
        del arg140_1
        buf248 = reinterpret_tensor(buf247, (2, 64, 3072), (196608, 3072, 1), 0); del buf247  # reuse
        # Topologically Sorted Source Nodes: [mul_36, pow_10, mul_37, add_49, mul_38, tanh_9, add_50, hidden_states_78], Original ATen: [aten.mul, aten.pow, aten.add, aten.tanh]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_pow_tanh_6.run(buf248, arg141_1, 393216, grid=grid(393216), stream=stream0)
        del arg141_1
        buf249 = reinterpret_tensor(buf246, (128, 768), (768, 1), 0); del buf246  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_79], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf248, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg142_1, (3072, 768), (1, 3072), 0), out=buf249)
        del arg142_1
        buf253 = reinterpret_tensor(buf224, (2, 64, 768), (49152, 768, 1), 0); del buf224  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_81, hidden_states_82], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_7.run(buf242, buf249, arg143_1, arg144_1, arg145_1, buf253, 128, 768, grid=grid(128), stream=stream0)
        del arg144_1
        del arg145_1
        buf254 = reinterpret_tensor(buf217, (128, 768), (768, 1), 0); del buf217  # reuse
        # Topologically Sorted Source Nodes: [query_30], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf253, (128, 768), (768, 1), 0), reinterpret_tensor(arg146_1, (768, 768), (1, 768), 0), out=buf254)
        del arg146_1
        buf255 = reinterpret_tensor(buf237, (128, 768), (768, 1), 0); del buf237  # reuse
        # Topologically Sorted Source Nodes: [key_30], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf253, (128, 768), (768, 1), 0), reinterpret_tensor(arg147_1, (768, 768), (1, 768), 0), out=buf255)
        del arg147_1
        buf256 = empty_strided_cuda((2, 12, 64, 64), (49152, 4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_60], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf254, buf256, 98304, grid=grid(98304), stream=stream0)
        buf257 = reinterpret_tensor(buf254, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf254  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_60], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf255, buf257, 1536, 64, grid=grid(1536, 64), stream=stream0)
        buf258 = empty_strided_cuda((24, 64, 64), (4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_60], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf256, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf257, (24, 64, 64), (4096, 64, 1), 0), out=buf258)
        buf262 = reinterpret_tensor(buf258, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf258  # reuse
        # Topologically Sorted Source Nodes: [causal_mask_4, padding_mask, padding_mask_1, masked_fill, mask_value_10, attn_weights_61, attn_weights_62, attn_weights_63], Original ATen: [aten.clone, aten.add, aten.eq, aten.masked_fill, aten.lift_fresh, aten.where, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_add_clone_eq_lift_fresh_masked_fill_where_3.run(buf262, arg149_1, arg2_1, 1536, 64, grid=grid(1536), stream=stream0)
        del arg149_1
        buf261 = reinterpret_tensor(buf257, (128, 768), (768, 1), 0); del buf257  # reuse
        # Topologically Sorted Source Nodes: [value_20], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf253, (128, 768), (768, 1), 0), reinterpret_tensor(arg148_1, (768, 768), (1, 768), 0), out=buf261)
        del arg148_1
        buf263 = reinterpret_tensor(buf253, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf253  # reuse
        # Topologically Sorted Source Nodes: [attn_output_40], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf261, buf263, 98304, grid=grid(98304), stream=stream0)
        buf264 = reinterpret_tensor(buf256, (24, 64, 64), (4096, 64, 1), 0); del buf256  # reuse
        # Topologically Sorted Source Nodes: [attn_output_40], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf262, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf263, (24, 64, 64), (4096, 64, 1), 0), out=buf264)
        buf265 = reinterpret_tensor(buf263, (2, 64, 12, 64), (49152, 768, 64, 1), 0); del buf263  # reuse
        # Topologically Sorted Source Nodes: [tensor_54], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf264, buf265, 98304, grid=grid(98304), stream=stream0)
        buf266 = reinterpret_tensor(buf264, (128, 768), (768, 1), 0); del buf264  # reuse
        # Topologically Sorted Source Nodes: [attn_output_42], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf265, (128, 768), (768, 1), 0), reinterpret_tensor(arg150_1, (768, 768), (1, 768), 0), out=buf266)
        del arg150_1
        buf267 = reinterpret_tensor(buf266, (2, 64, 768), (49152, 768, 1), 0); del buf266  # reuse
        buf271 = reinterpret_tensor(buf265, (2, 64, 768), (49152, 768, 1), 0); del buf265  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_81, hidden_states_83, hidden_states_84], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_8.run(buf267, arg151_1, buf242, buf249, arg143_1, arg152_1, arg153_1, buf271, 128, 768, grid=grid(128), stream=stream0)
        del arg143_1
        del arg151_1
        del arg152_1
        del arg153_1
        buf272 = reinterpret_tensor(buf248, (128, 3072), (3072, 1), 0); del buf248  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_85], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf271, (128, 768), (768, 1), 0), reinterpret_tensor(arg154_1, (768, 3072), (1, 768), 0), out=buf272)
        del arg154_1
        buf273 = reinterpret_tensor(buf272, (2, 64, 3072), (196608, 3072, 1), 0); del buf272  # reuse
        # Topologically Sorted Source Nodes: [mul_40, pow_11, mul_41, add_54, mul_42, tanh_10, add_55, hidden_states_86], Original ATen: [aten.mul, aten.pow, aten.add, aten.tanh]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_pow_tanh_6.run(buf273, arg155_1, 393216, grid=grid(393216), stream=stream0)
        del arg155_1
        buf274 = reinterpret_tensor(buf271, (128, 768), (768, 1), 0); del buf271  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_87], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf273, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg156_1, (3072, 768), (1, 3072), 0), out=buf274)
        del arg156_1
        buf278 = reinterpret_tensor(buf249, (2, 64, 768), (49152, 768, 1), 0); del buf249  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_89, hidden_states_90], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_7.run(buf267, buf274, arg157_1, arg158_1, arg159_1, buf278, 128, 768, grid=grid(128), stream=stream0)
        del arg158_1
        del arg159_1
        buf279 = reinterpret_tensor(buf242, (128, 768), (768, 1), 0); del buf242  # reuse
        # Topologically Sorted Source Nodes: [query_33], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf278, (128, 768), (768, 1), 0), reinterpret_tensor(arg160_1, (768, 768), (1, 768), 0), out=buf279)
        del arg160_1
        buf280 = reinterpret_tensor(buf262, (128, 768), (768, 1), 0); del buf262  # reuse
        # Topologically Sorted Source Nodes: [key_33], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf278, (128, 768), (768, 1), 0), reinterpret_tensor(arg161_1, (768, 768), (1, 768), 0), out=buf280)
        del arg161_1
        buf281 = empty_strided_cuda((2, 12, 64, 64), (49152, 4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_66], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf279, buf281, 98304, grid=grid(98304), stream=stream0)
        buf282 = reinterpret_tensor(buf279, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf279  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_66], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf280, buf282, 1536, 64, grid=grid(1536, 64), stream=stream0)
        buf283 = empty_strided_cuda((24, 64, 64), (4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [attn_weights_66], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf281, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf282, (24, 64, 64), (4096, 64, 1), 0), out=buf283)
        buf287 = reinterpret_tensor(buf283, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf283  # reuse
        # Topologically Sorted Source Nodes: [causal_mask_4, padding_mask, padding_mask_1, masked_fill, mask_value_11, attn_weights_67, attn_weights_68, attn_weights_69], Original ATen: [aten.clone, aten.add, aten.eq, aten.masked_fill, aten.lift_fresh, aten.where, aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_add_clone_eq_lift_fresh_masked_fill_where_3.run(buf287, arg163_1, arg2_1, 1536, 64, grid=grid(1536), stream=stream0)
        del arg163_1
        del arg2_1
        buf286 = reinterpret_tensor(buf282, (128, 768), (768, 1), 0); del buf282  # reuse
        # Topologically Sorted Source Nodes: [value_22], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf278, (128, 768), (768, 1), 0), reinterpret_tensor(arg162_1, (768, 768), (1, 768), 0), out=buf286)
        del arg162_1
        buf288 = reinterpret_tensor(buf278, (2, 12, 64, 64), (49152, 4096, 64, 1), 0); del buf278  # reuse
        # Topologically Sorted Source Nodes: [attn_output_44], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_1.run(buf286, buf288, 98304, grid=grid(98304), stream=stream0)
        buf289 = reinterpret_tensor(buf281, (24, 64, 64), (4096, 64, 1), 0); del buf281  # reuse
        # Topologically Sorted Source Nodes: [attn_output_44], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf287, (24, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf288, (24, 64, 64), (4096, 64, 1), 0), out=buf289)
        del buf287
        buf290 = reinterpret_tensor(buf288, (2, 64, 12, 64), (49152, 768, 64, 1), 0); del buf288  # reuse
        # Topologically Sorted Source Nodes: [tensor_59], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_4.run(buf289, buf290, 98304, grid=grid(98304), stream=stream0)
        buf291 = reinterpret_tensor(buf289, (128, 768), (768, 1), 0); del buf289  # reuse
        # Topologically Sorted Source Nodes: [attn_output_46], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf290, (128, 768), (768, 1), 0), reinterpret_tensor(arg164_1, (768, 768), (1, 768), 0), out=buf291)
        del arg164_1
        buf292 = reinterpret_tensor(buf291, (2, 64, 768), (49152, 768, 1), 0); del buf291  # reuse
        buf296 = reinterpret_tensor(buf290, (2, 64, 768), (49152, 768, 1), 0); del buf290  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_89, hidden_states_91, hidden_states_92], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_8.run(buf292, arg165_1, buf267, buf274, arg157_1, arg166_1, arg167_1, buf296, 128, 768, grid=grid(128), stream=stream0)
        del arg157_1
        del arg165_1
        del arg166_1
        del arg167_1
        del buf267
        del buf274
        buf297 = reinterpret_tensor(buf273, (128, 3072), (3072, 1), 0); del buf273  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_93], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf296, (128, 768), (768, 1), 0), reinterpret_tensor(arg168_1, (768, 3072), (1, 768), 0), out=buf297)
        del arg168_1
        buf298 = reinterpret_tensor(buf297, (2, 64, 3072), (196608, 3072, 1), 0); del buf297  # reuse
        # Topologically Sorted Source Nodes: [mul_44, pow_12, mul_45, add_59, mul_46, tanh_11, add_60, hidden_states_94], Original ATen: [aten.mul, aten.pow, aten.add, aten.tanh]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_mul_pow_tanh_6.run(buf298, arg169_1, 393216, grid=grid(393216), stream=stream0)
        del arg169_1
        buf299 = reinterpret_tensor(buf296, (128, 768), (768, 1), 0); del buf296  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_95], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf298, (128, 3072), (3072, 1), 0), reinterpret_tensor(arg170_1, (3072, 768), (1, 3072), 0), out=buf299)
        del arg170_1
        del buf298
        buf303 = buf292; del buf292  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_97, hidden_states_98, hidden_states_99], Original ATen: [aten.add, aten.native_layer_norm, aten.view]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_view_9.run(buf303, buf299, arg171_1, arg172_1, arg173_1, 128, 768, grid=grid(128), stream=stream0)
        del arg171_1
        del arg172_1
        del arg173_1
        del buf299
    return (buf303, reinterpret_tensor(buf5, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf11, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf30, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf36, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf55, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf61, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf80, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf86, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf105, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf111, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf130, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf136, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf155, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf161, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf180, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf186, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf205, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf211, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf230, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf236, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf255, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf261, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf280, (2, 12, 64, 64), (49152, 64, 768, 1), 0), reinterpret_tensor(buf286, (2, 12, 64, 64), (49152, 64, 768, 1), 0), )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((2, 64), (64, 1), device='cuda:0', dtype=torch.int64)
    arg1_1 = rand_strided((50257, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg2_1 = rand_strided((2, 64), (64, 1), device='cuda:0', dtype=torch.int64)
    arg3_1 = rand_strided((2048, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg4_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg5_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg6_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg7_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg8_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg9_1 = rand_strided((1, 1, 2048, 2048), (4194304, 4194304, 2048, 1), device='cuda:0', dtype=torch.bool)
    arg10_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg11_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg12_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg13_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg14_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg15_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg16_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg17_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg18_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg19_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg20_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg21_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg22_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg23_1 = rand_strided((1, 1, 2048, 2048), (4194304, 4194304, 2048, 1), device='cuda:0', dtype=torch.bool)
    arg24_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg25_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg26_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg27_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg28_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg29_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg30_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg31_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg32_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg33_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg34_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg35_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg36_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg37_1 = rand_strided((1, 1, 2048, 2048), (4194304, 4194304, 2048, 1), device='cuda:0', dtype=torch.bool)
    arg38_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg39_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg40_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg41_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg42_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg43_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg44_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg45_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg46_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg47_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg48_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg49_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg50_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg51_1 = rand_strided((1, 1, 2048, 2048), (4194304, 4194304, 2048, 1), device='cuda:0', dtype=torch.bool)
    arg52_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg53_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg54_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg55_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg56_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg57_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg58_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg59_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg60_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg61_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg62_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg63_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg64_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg65_1 = rand_strided((1, 1, 2048, 2048), (4194304, 4194304, 2048, 1), device='cuda:0', dtype=torch.bool)
    arg66_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg67_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg68_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg69_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg70_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg71_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg72_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg73_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg74_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg75_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg76_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg77_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg78_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg79_1 = rand_strided((1, 1, 2048, 2048), (4194304, 4194304, 2048, 1), device='cuda:0', dtype=torch.bool)
    arg80_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg81_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg82_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg83_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg84_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg85_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg86_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg87_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg88_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg89_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg90_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg91_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg92_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg93_1 = rand_strided((1, 1, 2048, 2048), (4194304, 4194304, 2048, 1), device='cuda:0', dtype=torch.bool)
    arg94_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg95_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg96_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg97_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg98_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg99_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg100_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg101_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg102_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg103_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg104_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg105_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg106_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg107_1 = rand_strided((1, 1, 2048, 2048), (4194304, 4194304, 2048, 1), device='cuda:0', dtype=torch.bool)
    arg108_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg109_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg110_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg111_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg112_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg113_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg114_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg115_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg116_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg117_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg118_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg119_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg120_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg121_1 = rand_strided((1, 1, 2048, 2048), (4194304, 4194304, 2048, 1), device='cuda:0', dtype=torch.bool)
    arg122_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg123_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg124_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg125_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg126_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg127_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg128_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg129_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg130_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg131_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg132_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg133_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg134_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg135_1 = rand_strided((1, 1, 2048, 2048), (4194304, 4194304, 2048, 1), device='cuda:0', dtype=torch.bool)
    arg136_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg137_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg138_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg139_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg140_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg141_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg142_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg143_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg144_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg145_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg146_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg147_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg148_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg149_1 = rand_strided((1, 1, 2048, 2048), (4194304, 4194304, 2048, 1), device='cuda:0', dtype=torch.bool)
    arg150_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg151_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg152_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg153_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg154_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg155_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg156_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg157_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg158_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg159_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg160_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg161_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg162_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg163_1 = rand_strided((1, 1, 2048, 2048), (4194304, 4194304, 2048, 1), device='cuda:0', dtype=torch.bool)
    arg164_1 = rand_strided((768, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg165_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg166_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg167_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg168_1 = rand_strided((3072, 768), (768, 1), device='cuda:0', dtype=torch.float32)
    arg169_1 = rand_strided((3072, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg170_1 = rand_strided((768, 3072), (3072, 1), device='cuda:0', dtype=torch.float32)
    arg171_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg172_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg173_1 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    fn = lambda: call([arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1, arg7_1, arg8_1, arg9_1, arg10_1, arg11_1, arg12_1, arg13_1, arg14_1, arg15_1, arg16_1, arg17_1, arg18_1, arg19_1, arg20_1, arg21_1, arg22_1, arg23_1, arg24_1, arg25_1, arg26_1, arg27_1, arg28_1, arg29_1, arg30_1, arg31_1, arg32_1, arg33_1, arg34_1, arg35_1, arg36_1, arg37_1, arg38_1, arg39_1, arg40_1, arg41_1, arg42_1, arg43_1, arg44_1, arg45_1, arg46_1, arg47_1, arg48_1, arg49_1, arg50_1, arg51_1, arg52_1, arg53_1, arg54_1, arg55_1, arg56_1, arg57_1, arg58_1, arg59_1, arg60_1, arg61_1, arg62_1, arg63_1, arg64_1, arg65_1, arg66_1, arg67_1, arg68_1, arg69_1, arg70_1, arg71_1, arg72_1, arg73_1, arg74_1, arg75_1, arg76_1, arg77_1, arg78_1, arg79_1, arg80_1, arg81_1, arg82_1, arg83_1, arg84_1, arg85_1, arg86_1, arg87_1, arg88_1, arg89_1, arg90_1, arg91_1, arg92_1, arg93_1, arg94_1, arg95_1, arg96_1, arg97_1, arg98_1, arg99_1, arg100_1, arg101_1, arg102_1, arg103_1, arg104_1, arg105_1, arg106_1, arg107_1, arg108_1, arg109_1, arg110_1, arg111_1, arg112_1, arg113_1, arg114_1, arg115_1, arg116_1, arg117_1, arg118_1, arg119_1, arg120_1, arg121_1, arg122_1, arg123_1, arg124_1, arg125_1, arg126_1, arg127_1, arg128_1, arg129_1, arg130_1, arg131_1, arg132_1, arg133_1, arg134_1, arg135_1, arg136_1, arg137_1, arg138_1, arg139_1, arg140_1, arg141_1, arg142_1, arg143_1, arg144_1, arg145_1, arg146_1, arg147_1, arg148_1, arg149_1, arg150_1, arg151_1, arg152_1, arg153_1, arg154_1, arg155_1, arg156_1, arg157_1, arg158_1, arg159_1, arg160_1, arg161_1, arg162_1, arg163_1, arg164_1, arg165_1, arg166_1, arg167_1, arg168_1, arg169_1, arg170_1, arg171_1, arg172_1, arg173_1])
    return print_performance(fn, times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('None', benchmark_compiled_module)
