

# ===== run_2025_10_19_03_43_12_574129-pid_19/torchinductor/model__2_inference_2.2/fx_graph_readable.py =====
class <lambda>(torch.nn.Module):
    def forward(self, arg0_1: "i64[2, 64]", arg1_1: "f32[50265, 1024]", arg2_1: "f32[1026, 1024]", arg3_1: "f32[1]", arg4_1: "i64[2, 64]", arg5_1: "f32[1024, 1024]", arg6_1: "f32[1024]", arg7_1: "f32[1024, 1024]", arg8_1: "f32[1024]", arg9_1: "f32[1024, 1024]", arg10_1: "f32[1024]", arg11_1: "f32[1024, 1024]", arg12_1: "f32[1024]", arg13_1: "f32[1024]", arg14_1: "f32[1024]", arg15_1: "f32[4096, 1024]", arg16_1: "f32[4096]", arg17_1: "f32[1024, 4096]", arg18_1: "f32[1024]", arg19_1: "f32[1024]", arg20_1: "f32[1024]", arg21_1: "f32[1024, 1024]", arg22_1: "f32[1024]", arg23_1: "f32[1024, 1024]", arg24_1: "f32[1024]", arg25_1: "f32[1024, 1024]", arg26_1: "f32[1024]", arg27_1: "f32[1024, 1024]", arg28_1: "f32[1024]", arg29_1: "f32[1024]", arg30_1: "f32[1024]", arg31_1: "f32[4096, 1024]", arg32_1: "f32[4096]", arg33_1: "f32[1024, 4096]", arg34_1: "f32[1024]", arg35_1: "f32[1024]", arg36_1: "f32[1024]", arg37_1: "f32[1024, 1024]", arg38_1: "f32[1024]", arg39_1: "f32[1024, 1024]", arg40_1: "f32[1024]", arg41_1: "f32[1024, 1024]", arg42_1: "f32[1024]", arg43_1: "f32[1024, 1024]", arg44_1: "f32[1024]", arg45_1: "f32[1024]", arg46_1: "f32[1024]", arg47_1: "f32[4096, 1024]", arg48_1: "f32[4096]", arg49_1: "f32[1024, 4096]", arg50_1: "f32[1024]", arg51_1: "f32[1024]", arg52_1: "f32[1024]", arg53_1: "f32[1024, 1024]", arg54_1: "f32[1024]", arg55_1: "f32[1024, 1024]", arg56_1: "f32[1024]", arg57_1: "f32[1024, 1024]", arg58_1: "f32[1024]", arg59_1: "f32[1024, 1024]", arg60_1: "f32[1024]", arg61_1: "f32[1024]", arg62_1: "f32[1024]", arg63_1: "f32[4096, 1024]", arg64_1: "f32[4096]", arg65_1: "f32[1024, 4096]", arg66_1: "f32[1024]", arg67_1: "f32[1024]", arg68_1: "f32[1024]", arg69_1: "f32[1024, 1024]", arg70_1: "f32[1024]", arg71_1: "f32[1024, 1024]", arg72_1: "f32[1024]", arg73_1: "f32[1024, 1024]", arg74_1: "f32[1024]", arg75_1: "f32[1024, 1024]", arg76_1: "f32[1024]", arg77_1: "f32[1024]", arg78_1: "f32[1024]", arg79_1: "f32[4096, 1024]", arg80_1: "f32[4096]", arg81_1: "f32[1024, 4096]", arg82_1: "f32[1024]", arg83_1: "f32[1024]", arg84_1: "f32[1024]", arg85_1: "f32[1024, 1024]", arg86_1: "f32[1024]", arg87_1: "f32[1024, 1024]", arg88_1: "f32[1024]", arg89_1: "f32[1024, 1024]", arg90_1: "f32[1024]", arg91_1: "f32[1024, 1024]", arg92_1: "f32[1024]", arg93_1: "f32[1024]", arg94_1: "f32[1024]", arg95_1: "f32[4096, 1024]", arg96_1: "f32[4096]", arg97_1: "f32[1024, 4096]", arg98_1: "f32[1024]", arg99_1: "f32[1024]", arg100_1: "f32[1024]", arg101_1: "f32[1024, 1024]", arg102_1: "f32[1024]", arg103_1: "f32[1024, 1024]", arg104_1: "f32[1024]", arg105_1: "f32[1024, 1024]", arg106_1: "f32[1024]", arg107_1: "f32[1024, 1024]", arg108_1: "f32[1024]", arg109_1: "f32[1024]", arg110_1: "f32[1024]", arg111_1: "f32[4096, 1024]", arg112_1: "f32[4096]", arg113_1: "f32[1024, 4096]", arg114_1: "f32[1024]", arg115_1: "f32[1024]", arg116_1: "f32[1024]", arg117_1: "f32[1024, 1024]", arg118_1: "f32[1024]", arg119_1: "f32[1024, 1024]", arg120_1: "f32[1024]", arg121_1: "f32[1024, 1024]", arg122_1: "f32[1024]", arg123_1: "f32[1024, 1024]", arg124_1: "f32[1024]", arg125_1: "f32[1024]", arg126_1: "f32[1024]", arg127_1: "f32[4096, 1024]", arg128_1: "f32[4096]", arg129_1: "f32[1024, 4096]", arg130_1: "f32[1024]", arg131_1: "f32[1024]", arg132_1: "f32[1024]", arg133_1: "f32[1024, 1024]", arg134_1: "f32[1024]", arg135_1: "f32[1024, 1024]", arg136_1: "f32[1024]", arg137_1: "f32[1024, 1024]", arg138_1: "f32[1024]", arg139_1: "f32[1024, 1024]", arg140_1: "f32[1024]", arg141_1: "f32[1024]", arg142_1: "f32[1024]", arg143_1: "f32[4096, 1024]", arg144_1: "f32[4096]", arg145_1: "f32[1024, 4096]", arg146_1: "f32[1024]", arg147_1: "f32[1024]", arg148_1: "f32[1024]", arg149_1: "f32[1024, 1024]", arg150_1: "f32[1024]", arg151_1: "f32[1024, 1024]", arg152_1: "f32[1024]", arg153_1: "f32[1024, 1024]", arg154_1: "f32[1024]", arg155_1: "f32[1024, 1024]", arg156_1: "f32[1024]", arg157_1: "f32[1024]", arg158_1: "f32[1024]", arg159_1: "f32[4096, 1024]", arg160_1: "f32[4096]", arg161_1: "f32[1024, 4096]", arg162_1: "f32[1024]", arg163_1: "f32[1024]", arg164_1: "f32[1024]", arg165_1: "f32[1024, 1024]", arg166_1: "f32[1024]", arg167_1: "f32[1024, 1024]", arg168_1: "f32[1024]", arg169_1: "f32[1024, 1024]", arg170_1: "f32[1024]", arg171_1: "f32[1024, 1024]", arg172_1: "f32[1024]", arg173_1: "f32[1024]", arg174_1: "f32[1024]", arg175_1: "f32[4096, 1024]", arg176_1: "f32[4096]", arg177_1: "f32[1024, 4096]", arg178_1: "f32[1024]", arg179_1: "f32[1024]", arg180_1: "f32[1024]", arg181_1: "f32[1024, 1024]", arg182_1: "f32[1024]", arg183_1: "f32[1024, 1024]", arg184_1: "f32[1024]", arg185_1: "f32[1024, 1024]", arg186_1: "f32[1024]", arg187_1: "f32[1024, 1024]", arg188_1: "f32[1024]", arg189_1: "f32[1024]", arg190_1: "f32[1024]", arg191_1: "f32[4096, 1024]", arg192_1: "f32[4096]", arg193_1: "f32[1024, 4096]", arg194_1: "f32[1024]", arg195_1: "f32[1024]", arg196_1: "f32[1024]"):
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:577 in forward, code: input_ids = input_ids.view(-1, input.shape[-1])
        view: "i64[2, 64]" = torch.ops.aten.view.default(arg0_1, [-1, 64]);  arg0_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:78 in forward, code: return super().forward(input_ids) * self.embed_scale
        embedding: "f32[2, 64, 1024]" = torch.ops.aten.embedding.default(arg1_1, view, 1);  arg1_1 = None
        mul: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(embedding, 32.0);  embedding = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:138 in create_position_ids_from_input_ids, code: mask = input_ids.ne(padding_idx).int()
        ne: "b8[2, 64]" = torch.ops.aten.ne.Scalar(view, 1);  view = None
        convert_element_type: "i32[2, 64]" = torch.ops.prims.convert_element_type.default(ne, torch.int32);  ne = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:139 in create_position_ids_from_input_ids, code: incremental_indices = (torch.cumsum(mask, dim=1).type_as(mask) + past_key_values_length) * mask
        cumsum: "i64[2, 64]" = torch.ops.aten.cumsum.default(convert_element_type, 1)
        convert_element_type_1: "i32[2, 64]" = torch.ops.prims.convert_element_type.default(cumsum, torch.int32);  cumsum = None
        add: "i32[2, 64]" = torch.ops.aten.add.Tensor(convert_element_type_1, 0);  convert_element_type_1 = None
        mul_1: "i32[2, 64]" = torch.ops.aten.mul.Tensor(add, convert_element_type);  add = convert_element_type = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:140 in create_position_ids_from_input_ids, code: return incremental_indices.long() + padding_idx
        convert_element_type_2: "i64[2, 64]" = torch.ops.prims.convert_element_type.default(mul_1, torch.int64);  mul_1 = None
        add_1: "i64[2, 64]" = torch.ops.aten.add.Tensor(convert_element_type_2, 1);  convert_element_type_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:124 in forward, code: self.weights = self.weights.to(self._float_tensor)
        device_put: "f32[1026, 1024]" = torch.ops.prims.device_put.default(arg2_1, device(type='cuda', index=0));  arg2_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:126 in forward, code: x = self.weights.index_select(0, position_ids.view(-1)).view(bsz, seq_len, -1).detach()
        view_1: "i64[128]" = torch.ops.aten.view.default(add_1, [-1]);  add_1 = None
        index: "f32[128, 1024]" = torch.ops.aten.index.Tensor(device_put, [view_1]);  view_1 = None
        view_2: "f32[2, 64, 1024]" = torch.ops.aten.view.default(index, [2, 64, -1]);  index = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:595 in forward, code: hidden_states = inputs_embeds + embed_pos
        add_2: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul, view_2);  mul = view_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:164 in _make_causal_mask, code: mask = torch.full((tgt_len, tgt_len), torch.finfo(dtype).min, device=device)
        full_default: "f32[64, 64]" = torch.ops.aten.full.default([64, 64], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:165 in _make_causal_mask, code: mask_cond = torch.arange(mask.size(-1), device=device)
        iota: "i64[64]" = torch.ops.prims.iota.default(64, start = 0, step = 1, dtype = torch.int64, device = device(type='cuda', index=0), requires_grad = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:166 in _make_causal_mask, code: mask.masked_fill_(mask_cond < (mask_cond + 1).view(mask.size(-1), 1), 0)
        add_3: "i64[64]" = torch.ops.aten.add.Tensor(iota, 1)
        view_3: "i64[64, 1]" = torch.ops.aten.view.default(add_3, [64, 1]);  add_3 = None
        lt: "b8[64, 64]" = torch.ops.aten.lt.Tensor(iota, view_3);  iota = view_3 = None
        full_default_1: "f32[]" = torch.ops.aten.full.default([], 0.0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where: "f32[64, 64]" = torch.ops.aten.where.self(lt, full_default_1, full_default);  lt = full_default_1 = full_default = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:194 in _expand_mask, code: expanded_mask = mask[:, None, None, :].expand(bsz, 1, tgt_len, src_len).to(dtype)
        unsqueeze_2: "i64[2, 1, 64]" = torch.ops.aten.unsqueeze.default(arg4_1, 1);  arg4_1 = None
        unsqueeze_3: "i64[2, 1, 1, 64]" = torch.ops.aten.unsqueeze.default(unsqueeze_2, 2);  unsqueeze_2 = None
        expand_1: "i64[2, 1, 64, 64]" = torch.ops.aten.expand.default(unsqueeze_3, [2, 1, 64, 64]);  unsqueeze_3 = None
        convert_element_type_4: "f32[2, 1, 64, 64]" = torch.ops.prims.convert_element_type.default(expand_1, torch.float32);  expand_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:196 in _expand_mask, code: inverted_mask = torch.tensor(1.0, dtype=dtype) - expanded_mask
        _tensor_constant0 = self._tensor_constant0;  _tensor_constant0 = None
        full_default_2: "f32[]" = torch.ops.aten.full.default([], 1.0, dtype = torch.float32, layout = torch.strided, device = device(type='cpu'), pin_memory = False)
        sub: "f32[2, 1, 64, 64]" = torch.ops.aten.sub.Tensor(full_default_2, convert_element_type_4);  full_default_2 = convert_element_type_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:198 in _expand_mask, code: return inverted_mask.masked_fill(inverted_mask.to(torch.bool), torch.finfo(dtype).min)
        convert_element_type_5: "b8[2, 1, 64, 64]" = torch.ops.prims.convert_element_type.default(sub, torch.bool)
        full_default_3: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where_1: "f32[2, 1, 64, 64]" = torch.ops.aten.where.self(convert_element_type_5, full_default_3, sub);  convert_element_type_5 = full_default_3 = sub = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:145 in to_4d, code: expanded_attn_mask = causal_4d_mask.masked_fill(expanded_attn_mask.bool(), torch.finfo(dtype).min)
        convert_element_type_6: "b8[2, 1, 64, 64]" = torch.ops.prims.convert_element_type.default(where_1, torch.bool);  where_1 = None
        unsqueeze_4: "f32[1, 64, 64]" = torch.ops.aten.unsqueeze.default(where, 0);  where = None
        unsqueeze_5: "f32[1, 1, 64, 64]" = torch.ops.aten.unsqueeze.default(unsqueeze_4, 1);  unsqueeze_4 = None
        expand_2: "f32[2, 1, 64, 64]" = torch.ops.aten.expand.default(unsqueeze_5, [2, 1, 64, 64]);  unsqueeze_5 = None
        full_default_4: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where_2: "f32[2, 1, 64, 64]" = torch.ops.aten.where.self(convert_element_type_6, full_default_4, expand_2);  convert_element_type_6 = full_default_4 = expand_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_4: "f32[128, 1024]" = torch.ops.aten.view.default(add_2, [128, 1024])
        permute: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg5_1, [1, 0]);  arg5_1 = None
        addmm: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg6_1, view_4, permute);  arg6_1 = view_4 = permute = None
        view_5: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm, [2, 64, 1024]);  addmm = None
        mul_2: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_5, 0.125);  view_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_6: "f32[128, 1024]" = torch.ops.aten.view.default(add_2, [128, 1024])
        permute_1: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg7_1, [1, 0]);  arg7_1 = None
        addmm_1: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg8_1, view_6, permute_1);  arg8_1 = view_6 = permute_1 = None
        view_7: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_1, [2, 64, 1024]);  addmm_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_8: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_7, [2, -1, 16, 64]);  view_7 = None
        permute_2: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_8, [0, 2, 1, 3]);  view_8 = None
        clone_1: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_2, memory_format = torch.contiguous_format);  permute_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_9: "f32[128, 1024]" = torch.ops.aten.view.default(add_2, [128, 1024])
        permute_3: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg9_1, [1, 0]);  arg9_1 = None
        addmm_2: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg10_1, view_9, permute_3);  arg10_1 = view_9 = permute_3 = None
        view_10: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_2, [2, 64, 1024]);  addmm_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_11: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_10, [2, -1, 16, 64]);  view_10 = None
        permute_4: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_11, [0, 2, 1, 3]);  view_11 = None
        clone_2: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_4, memory_format = torch.contiguous_format);  permute_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_12: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(mul_2, [2, 64, 16, 64]);  mul_2 = None
        permute_5: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_12, [0, 2, 1, 3]);  view_12 = None
        clone_3: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_5, memory_format = torch.contiguous_format);  permute_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_13: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_3, [32, -1, 64]);  clone_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_14: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_1, [32, -1, 64]);  clone_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_15: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_2, [32, -1, 64]);  clone_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_6: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_14, [0, 2, 1]);  view_14 = None
        bmm: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_13, permute_6);  view_13 = permute_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_16: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm, [2, 16, 64, 64]);  bmm = None
        add_4: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_16, where_2);  view_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_17: "f32[32, 64, 64]" = torch.ops.aten.view.default(add_4, [32, 64, 64]);  add_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_17, [-1], True)
        sub_1: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_17, amax);  view_17 = amax = None
        exp: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_1);  sub_1 = None
        sum_1: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp, [-1], True)
        div: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp, sum_1);  exp = sum_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_1: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div, view_15);  div = view_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_18: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_1, [2, 16, 64, 64]);  bmm_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_7: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_18, [0, 2, 1, 3]);  view_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_5: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_7, memory_format = torch.contiguous_format);  permute_7 = None
        view_19: "f32[2, 64, 1024]" = torch.ops.aten.view.default(clone_5, [2, 64, 1024]);  clone_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_20: "f32[128, 1024]" = torch.ops.aten.view.default(view_19, [128, 1024]);  view_19 = None
        permute_8: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg11_1, [1, 0]);  arg11_1 = None
        addmm_3: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg12_1, view_20, permute_8);  arg12_1 = view_20 = permute_8 = None
        view_21: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_3, [2, 64, 1024]);  addmm_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_5: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_2, view_21);  add_2 = view_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean = torch.ops.aten.var_mean.correction(add_5, [2], correction = 0, keepdim = True)
        getitem: "f32[2, 64, 1]" = var_mean[0]
        getitem_1: "f32[2, 64, 1]" = var_mean[1];  var_mean = None
        add_6: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem, 1e-05);  getitem = None
        rsqrt: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_6);  add_6 = None
        sub_2: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_5, getitem_1);  add_5 = getitem_1 = None
        mul_3: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_2, rsqrt);  sub_2 = rsqrt = None
        mul_4: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_3, arg13_1);  mul_3 = arg13_1 = None
        add_7: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_4, arg14_1);  mul_4 = arg14_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_22: "f32[128, 1024]" = torch.ops.aten.view.default(add_7, [128, 1024])
        permute_9: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg15_1, [1, 0]);  arg15_1 = None
        addmm_4: "f32[128, 4096]" = torch.ops.aten.addmm.default(arg16_1, view_22, permute_9);  arg16_1 = view_22 = permute_9 = None
        view_23: "f32[2, 64, 4096]" = torch.ops.aten.view.default(addmm_4, [2, 64, 4096]);  addmm_4 = None
        relu: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_23);  view_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_24: "f32[128, 4096]" = torch.ops.aten.view.default(relu, [128, 4096]);  relu = None
        permute_10: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg17_1, [1, 0]);  arg17_1 = None
        addmm_5: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg18_1, view_24, permute_10);  arg18_1 = view_24 = permute_10 = None
        view_25: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_5, [2, 64, 1024]);  addmm_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_8: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_7, view_25);  add_7 = view_25 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_1 = torch.ops.aten.var_mean.correction(add_8, [2], correction = 0, keepdim = True)
        getitem_2: "f32[2, 64, 1]" = var_mean_1[0]
        getitem_3: "f32[2, 64, 1]" = var_mean_1[1];  var_mean_1 = None
        add_9: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_2, 1e-05);  getitem_2 = None
        rsqrt_1: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_9);  add_9 = None
        sub_3: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_8, getitem_3);  add_8 = getitem_3 = None
        mul_5: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_3, rsqrt_1);  sub_3 = rsqrt_1 = None
        mul_6: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_5, arg19_1);  mul_5 = arg19_1 = None
        add_10: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_6, arg20_1);  mul_6 = arg20_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_26: "f32[128, 1024]" = torch.ops.aten.view.default(add_10, [128, 1024])
        permute_11: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg21_1, [1, 0]);  arg21_1 = None
        addmm_6: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg22_1, view_26, permute_11);  arg22_1 = view_26 = permute_11 = None
        view_27: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_6, [2, 64, 1024]);  addmm_6 = None
        mul_7: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_27, 0.125);  view_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_28: "f32[128, 1024]" = torch.ops.aten.view.default(add_10, [128, 1024])
        permute_12: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg23_1, [1, 0]);  arg23_1 = None
        addmm_7: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg24_1, view_28, permute_12);  arg24_1 = view_28 = permute_12 = None
        view_29: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_7, [2, 64, 1024]);  addmm_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_30: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_29, [2, -1, 16, 64]);  view_29 = None
        permute_13: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_30, [0, 2, 1, 3]);  view_30 = None
        clone_9: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_13, memory_format = torch.contiguous_format);  permute_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_31: "f32[128, 1024]" = torch.ops.aten.view.default(add_10, [128, 1024])
        permute_14: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg25_1, [1, 0]);  arg25_1 = None
        addmm_8: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg26_1, view_31, permute_14);  arg26_1 = view_31 = permute_14 = None
        view_32: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_8, [2, 64, 1024]);  addmm_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_33: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_32, [2, -1, 16, 64]);  view_32 = None
        permute_15: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_33, [0, 2, 1, 3]);  view_33 = None
        clone_10: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_15, memory_format = torch.contiguous_format);  permute_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_34: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(mul_7, [2, 64, 16, 64]);  mul_7 = None
        permute_16: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_34, [0, 2, 1, 3]);  view_34 = None
        clone_11: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_16, memory_format = torch.contiguous_format);  permute_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_35: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_11, [32, -1, 64]);  clone_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_36: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_9, [32, -1, 64]);  clone_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_37: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_10, [32, -1, 64]);  clone_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_17: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_36, [0, 2, 1]);  view_36 = None
        bmm_2: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_35, permute_17);  view_35 = permute_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_38: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_2, [2, 16, 64, 64]);  bmm_2 = None
        add_11: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_38, where_2);  view_38 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_39: "f32[32, 64, 64]" = torch.ops.aten.view.default(add_11, [32, 64, 64]);  add_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_1: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_39, [-1], True)
        sub_4: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_39, amax_1);  view_39 = amax_1 = None
        exp_1: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_4);  sub_4 = None
        sum_2: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_1, [-1], True)
        div_1: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_1, sum_2);  exp_1 = sum_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_3: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_1, view_37);  div_1 = view_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_40: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_3, [2, 16, 64, 64]);  bmm_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_18: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_40, [0, 2, 1, 3]);  view_40 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_13: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_18, memory_format = torch.contiguous_format);  permute_18 = None
        view_41: "f32[2, 64, 1024]" = torch.ops.aten.view.default(clone_13, [2, 64, 1024]);  clone_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_42: "f32[128, 1024]" = torch.ops.aten.view.default(view_41, [128, 1024]);  view_41 = None
        permute_19: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg27_1, [1, 0]);  arg27_1 = None
        addmm_9: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg28_1, view_42, permute_19);  arg28_1 = view_42 = permute_19 = None
        view_43: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_9, [2, 64, 1024]);  addmm_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_12: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_10, view_43);  add_10 = view_43 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_2 = torch.ops.aten.var_mean.correction(add_12, [2], correction = 0, keepdim = True)
        getitem_4: "f32[2, 64, 1]" = var_mean_2[0]
        getitem_5: "f32[2, 64, 1]" = var_mean_2[1];  var_mean_2 = None
        add_13: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_4, 1e-05);  getitem_4 = None
        rsqrt_2: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_13);  add_13 = None
        sub_5: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_12, getitem_5);  add_12 = getitem_5 = None
        mul_8: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_5, rsqrt_2);  sub_5 = rsqrt_2 = None
        mul_9: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_8, arg29_1);  mul_8 = arg29_1 = None
        add_14: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_9, arg30_1);  mul_9 = arg30_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_44: "f32[128, 1024]" = torch.ops.aten.view.default(add_14, [128, 1024])
        permute_20: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg31_1, [1, 0]);  arg31_1 = None
        addmm_10: "f32[128, 4096]" = torch.ops.aten.addmm.default(arg32_1, view_44, permute_20);  arg32_1 = view_44 = permute_20 = None
        view_45: "f32[2, 64, 4096]" = torch.ops.aten.view.default(addmm_10, [2, 64, 4096]);  addmm_10 = None
        relu_1: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_45);  view_45 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_46: "f32[128, 4096]" = torch.ops.aten.view.default(relu_1, [128, 4096]);  relu_1 = None
        permute_21: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg33_1, [1, 0]);  arg33_1 = None
        addmm_11: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg34_1, view_46, permute_21);  arg34_1 = view_46 = permute_21 = None
        view_47: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_11, [2, 64, 1024]);  addmm_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_15: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_14, view_47);  add_14 = view_47 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_3 = torch.ops.aten.var_mean.correction(add_15, [2], correction = 0, keepdim = True)
        getitem_6: "f32[2, 64, 1]" = var_mean_3[0]
        getitem_7: "f32[2, 64, 1]" = var_mean_3[1];  var_mean_3 = None
        add_16: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_6, 1e-05);  getitem_6 = None
        rsqrt_3: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_16);  add_16 = None
        sub_6: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_15, getitem_7);  add_15 = getitem_7 = None
        mul_10: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_6, rsqrt_3);  sub_6 = rsqrt_3 = None
        mul_11: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_10, arg35_1);  mul_10 = arg35_1 = None
        add_17: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_11, arg36_1);  mul_11 = arg36_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_48: "f32[128, 1024]" = torch.ops.aten.view.default(add_17, [128, 1024])
        permute_22: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg37_1, [1, 0]);  arg37_1 = None
        addmm_12: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg38_1, view_48, permute_22);  arg38_1 = view_48 = permute_22 = None
        view_49: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_12, [2, 64, 1024]);  addmm_12 = None
        mul_12: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_49, 0.125);  view_49 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_50: "f32[128, 1024]" = torch.ops.aten.view.default(add_17, [128, 1024])
        permute_23: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg39_1, [1, 0]);  arg39_1 = None
        addmm_13: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg40_1, view_50, permute_23);  arg40_1 = view_50 = permute_23 = None
        view_51: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_13, [2, 64, 1024]);  addmm_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_52: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_51, [2, -1, 16, 64]);  view_51 = None
        permute_24: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_52, [0, 2, 1, 3]);  view_52 = None
        clone_17: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_24, memory_format = torch.contiguous_format);  permute_24 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_53: "f32[128, 1024]" = torch.ops.aten.view.default(add_17, [128, 1024])
        permute_25: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg41_1, [1, 0]);  arg41_1 = None
        addmm_14: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg42_1, view_53, permute_25);  arg42_1 = view_53 = permute_25 = None
        view_54: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_14, [2, 64, 1024]);  addmm_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_55: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_54, [2, -1, 16, 64]);  view_54 = None
        permute_26: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_55, [0, 2, 1, 3]);  view_55 = None
        clone_18: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_26, memory_format = torch.contiguous_format);  permute_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_56: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(mul_12, [2, 64, 16, 64]);  mul_12 = None
        permute_27: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_56, [0, 2, 1, 3]);  view_56 = None
        clone_19: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_27, memory_format = torch.contiguous_format);  permute_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_57: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_19, [32, -1, 64]);  clone_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_58: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_17, [32, -1, 64]);  clone_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_59: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_18, [32, -1, 64]);  clone_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_28: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_58, [0, 2, 1]);  view_58 = None
        bmm_4: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_57, permute_28);  view_57 = permute_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_60: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_4, [2, 16, 64, 64]);  bmm_4 = None
        add_18: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_60, where_2);  view_60 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_61: "f32[32, 64, 64]" = torch.ops.aten.view.default(add_18, [32, 64, 64]);  add_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_2: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_61, [-1], True)
        sub_7: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_61, amax_2);  view_61 = amax_2 = None
        exp_2: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_7);  sub_7 = None
        sum_3: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_2, [-1], True)
        div_2: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_2, sum_3);  exp_2 = sum_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_5: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_2, view_59);  div_2 = view_59 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_62: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_5, [2, 16, 64, 64]);  bmm_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_29: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_62, [0, 2, 1, 3]);  view_62 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_21: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_29, memory_format = torch.contiguous_format);  permute_29 = None
        view_63: "f32[2, 64, 1024]" = torch.ops.aten.view.default(clone_21, [2, 64, 1024]);  clone_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_64: "f32[128, 1024]" = torch.ops.aten.view.default(view_63, [128, 1024]);  view_63 = None
        permute_30: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg43_1, [1, 0]);  arg43_1 = None
        addmm_15: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg44_1, view_64, permute_30);  arg44_1 = view_64 = permute_30 = None
        view_65: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_15, [2, 64, 1024]);  addmm_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_19: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_17, view_65);  add_17 = view_65 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_4 = torch.ops.aten.var_mean.correction(add_19, [2], correction = 0, keepdim = True)
        getitem_8: "f32[2, 64, 1]" = var_mean_4[0]
        getitem_9: "f32[2, 64, 1]" = var_mean_4[1];  var_mean_4 = None
        add_20: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_8, 1e-05);  getitem_8 = None
        rsqrt_4: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_20);  add_20 = None
        sub_8: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_19, getitem_9);  add_19 = getitem_9 = None
        mul_13: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_8, rsqrt_4);  sub_8 = rsqrt_4 = None
        mul_14: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_13, arg45_1);  mul_13 = arg45_1 = None
        add_21: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_14, arg46_1);  mul_14 = arg46_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_66: "f32[128, 1024]" = torch.ops.aten.view.default(add_21, [128, 1024])
        permute_31: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg47_1, [1, 0]);  arg47_1 = None
        addmm_16: "f32[128, 4096]" = torch.ops.aten.addmm.default(arg48_1, view_66, permute_31);  arg48_1 = view_66 = permute_31 = None
        view_67: "f32[2, 64, 4096]" = torch.ops.aten.view.default(addmm_16, [2, 64, 4096]);  addmm_16 = None
        relu_2: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_67);  view_67 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_68: "f32[128, 4096]" = torch.ops.aten.view.default(relu_2, [128, 4096]);  relu_2 = None
        permute_32: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg49_1, [1, 0]);  arg49_1 = None
        addmm_17: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg50_1, view_68, permute_32);  arg50_1 = view_68 = permute_32 = None
        view_69: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_17, [2, 64, 1024]);  addmm_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_22: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_21, view_69);  add_21 = view_69 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_5 = torch.ops.aten.var_mean.correction(add_22, [2], correction = 0, keepdim = True)
        getitem_10: "f32[2, 64, 1]" = var_mean_5[0]
        getitem_11: "f32[2, 64, 1]" = var_mean_5[1];  var_mean_5 = None
        add_23: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_10, 1e-05);  getitem_10 = None
        rsqrt_5: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_23);  add_23 = None
        sub_9: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_22, getitem_11);  add_22 = getitem_11 = None
        mul_15: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_9, rsqrt_5);  sub_9 = rsqrt_5 = None
        mul_16: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_15, arg51_1);  mul_15 = arg51_1 = None
        add_24: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_16, arg52_1);  mul_16 = arg52_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_70: "f32[128, 1024]" = torch.ops.aten.view.default(add_24, [128, 1024])
        permute_33: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg53_1, [1, 0]);  arg53_1 = None
        addmm_18: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg54_1, view_70, permute_33);  arg54_1 = view_70 = permute_33 = None
        view_71: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_18, [2, 64, 1024]);  addmm_18 = None
        mul_17: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_71, 0.125);  view_71 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_72: "f32[128, 1024]" = torch.ops.aten.view.default(add_24, [128, 1024])
        permute_34: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg55_1, [1, 0]);  arg55_1 = None
        addmm_19: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg56_1, view_72, permute_34);  arg56_1 = view_72 = permute_34 = None
        view_73: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_19, [2, 64, 1024]);  addmm_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_74: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_73, [2, -1, 16, 64]);  view_73 = None
        permute_35: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_74, [0, 2, 1, 3]);  view_74 = None
        clone_25: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_35, memory_format = torch.contiguous_format);  permute_35 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_75: "f32[128, 1024]" = torch.ops.aten.view.default(add_24, [128, 1024])
        permute_36: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg57_1, [1, 0]);  arg57_1 = None
        addmm_20: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg58_1, view_75, permute_36);  arg58_1 = view_75 = permute_36 = None
        view_76: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_20, [2, 64, 1024]);  addmm_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_77: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_76, [2, -1, 16, 64]);  view_76 = None
        permute_37: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_77, [0, 2, 1, 3]);  view_77 = None
        clone_26: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_37, memory_format = torch.contiguous_format);  permute_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_78: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(mul_17, [2, 64, 16, 64]);  mul_17 = None
        permute_38: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_78, [0, 2, 1, 3]);  view_78 = None
        clone_27: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_38, memory_format = torch.contiguous_format);  permute_38 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_79: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_27, [32, -1, 64]);  clone_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_80: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_25, [32, -1, 64]);  clone_25 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_81: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_26, [32, -1, 64]);  clone_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_39: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_80, [0, 2, 1]);  view_80 = None
        bmm_6: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_79, permute_39);  view_79 = permute_39 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_82: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_6, [2, 16, 64, 64]);  bmm_6 = None
        add_25: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_82, where_2);  view_82 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_83: "f32[32, 64, 64]" = torch.ops.aten.view.default(add_25, [32, 64, 64]);  add_25 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_3: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_83, [-1], True)
        sub_10: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_83, amax_3);  view_83 = amax_3 = None
        exp_3: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_10);  sub_10 = None
        sum_4: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_3, [-1], True)
        div_3: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_3, sum_4);  exp_3 = sum_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_7: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_3, view_81);  div_3 = view_81 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_84: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_7, [2, 16, 64, 64]);  bmm_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_40: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_84, [0, 2, 1, 3]);  view_84 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_29: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_40, memory_format = torch.contiguous_format);  permute_40 = None
        view_85: "f32[2, 64, 1024]" = torch.ops.aten.view.default(clone_29, [2, 64, 1024]);  clone_29 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_86: "f32[128, 1024]" = torch.ops.aten.view.default(view_85, [128, 1024]);  view_85 = None
        permute_41: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg59_1, [1, 0]);  arg59_1 = None
        addmm_21: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg60_1, view_86, permute_41);  arg60_1 = view_86 = permute_41 = None
        view_87: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_21, [2, 64, 1024]);  addmm_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_26: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_24, view_87);  add_24 = view_87 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_6 = torch.ops.aten.var_mean.correction(add_26, [2], correction = 0, keepdim = True)
        getitem_12: "f32[2, 64, 1]" = var_mean_6[0]
        getitem_13: "f32[2, 64, 1]" = var_mean_6[1];  var_mean_6 = None
        add_27: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_12, 1e-05);  getitem_12 = None
        rsqrt_6: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_27);  add_27 = None
        sub_11: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_26, getitem_13);  add_26 = getitem_13 = None
        mul_18: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_11, rsqrt_6);  sub_11 = rsqrt_6 = None
        mul_19: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_18, arg61_1);  mul_18 = arg61_1 = None
        add_28: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_19, arg62_1);  mul_19 = arg62_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_88: "f32[128, 1024]" = torch.ops.aten.view.default(add_28, [128, 1024])
        permute_42: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg63_1, [1, 0]);  arg63_1 = None
        addmm_22: "f32[128, 4096]" = torch.ops.aten.addmm.default(arg64_1, view_88, permute_42);  arg64_1 = view_88 = permute_42 = None
        view_89: "f32[2, 64, 4096]" = torch.ops.aten.view.default(addmm_22, [2, 64, 4096]);  addmm_22 = None
        relu_3: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_89);  view_89 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_90: "f32[128, 4096]" = torch.ops.aten.view.default(relu_3, [128, 4096]);  relu_3 = None
        permute_43: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg65_1, [1, 0]);  arg65_1 = None
        addmm_23: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg66_1, view_90, permute_43);  arg66_1 = view_90 = permute_43 = None
        view_91: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_23, [2, 64, 1024]);  addmm_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_29: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_28, view_91);  add_28 = view_91 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_7 = torch.ops.aten.var_mean.correction(add_29, [2], correction = 0, keepdim = True)
        getitem_14: "f32[2, 64, 1]" = var_mean_7[0]
        getitem_15: "f32[2, 64, 1]" = var_mean_7[1];  var_mean_7 = None
        add_30: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_14, 1e-05);  getitem_14 = None
        rsqrt_7: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_30);  add_30 = None
        sub_12: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_29, getitem_15);  add_29 = getitem_15 = None
        mul_20: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_12, rsqrt_7);  sub_12 = rsqrt_7 = None
        mul_21: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_20, arg67_1);  mul_20 = arg67_1 = None
        add_31: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_21, arg68_1);  mul_21 = arg68_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_92: "f32[128, 1024]" = torch.ops.aten.view.default(add_31, [128, 1024])
        permute_44: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg69_1, [1, 0]);  arg69_1 = None
        addmm_24: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg70_1, view_92, permute_44);  arg70_1 = view_92 = permute_44 = None
        view_93: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_24, [2, 64, 1024]);  addmm_24 = None
        mul_22: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_93, 0.125);  view_93 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_94: "f32[128, 1024]" = torch.ops.aten.view.default(add_31, [128, 1024])
        permute_45: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg71_1, [1, 0]);  arg71_1 = None
        addmm_25: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg72_1, view_94, permute_45);  arg72_1 = view_94 = permute_45 = None
        view_95: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_25, [2, 64, 1024]);  addmm_25 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_96: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_95, [2, -1, 16, 64]);  view_95 = None
        permute_46: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_96, [0, 2, 1, 3]);  view_96 = None
        clone_33: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_46, memory_format = torch.contiguous_format);  permute_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_97: "f32[128, 1024]" = torch.ops.aten.view.default(add_31, [128, 1024])
        permute_47: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg73_1, [1, 0]);  arg73_1 = None
        addmm_26: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg74_1, view_97, permute_47);  arg74_1 = view_97 = permute_47 = None
        view_98: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_26, [2, 64, 1024]);  addmm_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_99: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_98, [2, -1, 16, 64]);  view_98 = None
        permute_48: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_99, [0, 2, 1, 3]);  view_99 = None
        clone_34: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_48, memory_format = torch.contiguous_format);  permute_48 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_100: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(mul_22, [2, 64, 16, 64]);  mul_22 = None
        permute_49: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_100, [0, 2, 1, 3]);  view_100 = None
        clone_35: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_49, memory_format = torch.contiguous_format);  permute_49 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_101: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_35, [32, -1, 64]);  clone_35 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_102: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_33, [32, -1, 64]);  clone_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_103: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_34, [32, -1, 64]);  clone_34 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_50: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_102, [0, 2, 1]);  view_102 = None
        bmm_8: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_101, permute_50);  view_101 = permute_50 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_104: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_8, [2, 16, 64, 64]);  bmm_8 = None
        add_32: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_104, where_2);  view_104 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_105: "f32[32, 64, 64]" = torch.ops.aten.view.default(add_32, [32, 64, 64]);  add_32 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_4: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_105, [-1], True)
        sub_13: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_105, amax_4);  view_105 = amax_4 = None
        exp_4: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_13);  sub_13 = None
        sum_5: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_4, [-1], True)
        div_4: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_4, sum_5);  exp_4 = sum_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_9: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_4, view_103);  div_4 = view_103 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_106: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_9, [2, 16, 64, 64]);  bmm_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_51: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_106, [0, 2, 1, 3]);  view_106 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_37: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_51, memory_format = torch.contiguous_format);  permute_51 = None
        view_107: "f32[2, 64, 1024]" = torch.ops.aten.view.default(clone_37, [2, 64, 1024]);  clone_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_108: "f32[128, 1024]" = torch.ops.aten.view.default(view_107, [128, 1024]);  view_107 = None
        permute_52: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg75_1, [1, 0]);  arg75_1 = None
        addmm_27: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg76_1, view_108, permute_52);  arg76_1 = view_108 = permute_52 = None
        view_109: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_27, [2, 64, 1024]);  addmm_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_33: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_31, view_109);  add_31 = view_109 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_8 = torch.ops.aten.var_mean.correction(add_33, [2], correction = 0, keepdim = True)
        getitem_16: "f32[2, 64, 1]" = var_mean_8[0]
        getitem_17: "f32[2, 64, 1]" = var_mean_8[1];  var_mean_8 = None
        add_34: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_16, 1e-05);  getitem_16 = None
        rsqrt_8: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_34);  add_34 = None
        sub_14: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_33, getitem_17);  add_33 = getitem_17 = None
        mul_23: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_14, rsqrt_8);  sub_14 = rsqrt_8 = None
        mul_24: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_23, arg77_1);  mul_23 = arg77_1 = None
        add_35: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_24, arg78_1);  mul_24 = arg78_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_110: "f32[128, 1024]" = torch.ops.aten.view.default(add_35, [128, 1024])
        permute_53: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg79_1, [1, 0]);  arg79_1 = None
        addmm_28: "f32[128, 4096]" = torch.ops.aten.addmm.default(arg80_1, view_110, permute_53);  arg80_1 = view_110 = permute_53 = None
        view_111: "f32[2, 64, 4096]" = torch.ops.aten.view.default(addmm_28, [2, 64, 4096]);  addmm_28 = None
        relu_4: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_111);  view_111 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_112: "f32[128, 4096]" = torch.ops.aten.view.default(relu_4, [128, 4096]);  relu_4 = None
        permute_54: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg81_1, [1, 0]);  arg81_1 = None
        addmm_29: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg82_1, view_112, permute_54);  arg82_1 = view_112 = permute_54 = None
        view_113: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_29, [2, 64, 1024]);  addmm_29 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_36: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_35, view_113);  add_35 = view_113 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_9 = torch.ops.aten.var_mean.correction(add_36, [2], correction = 0, keepdim = True)
        getitem_18: "f32[2, 64, 1]" = var_mean_9[0]
        getitem_19: "f32[2, 64, 1]" = var_mean_9[1];  var_mean_9 = None
        add_37: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_18, 1e-05);  getitem_18 = None
        rsqrt_9: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_37);  add_37 = None
        sub_15: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_36, getitem_19);  add_36 = getitem_19 = None
        mul_25: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_15, rsqrt_9);  sub_15 = rsqrt_9 = None
        mul_26: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_25, arg83_1);  mul_25 = arg83_1 = None
        add_38: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_26, arg84_1);  mul_26 = arg84_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_114: "f32[128, 1024]" = torch.ops.aten.view.default(add_38, [128, 1024])
        permute_55: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg85_1, [1, 0]);  arg85_1 = None
        addmm_30: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg86_1, view_114, permute_55);  arg86_1 = view_114 = permute_55 = None
        view_115: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_30, [2, 64, 1024]);  addmm_30 = None
        mul_27: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_115, 0.125);  view_115 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_116: "f32[128, 1024]" = torch.ops.aten.view.default(add_38, [128, 1024])
        permute_56: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg87_1, [1, 0]);  arg87_1 = None
        addmm_31: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg88_1, view_116, permute_56);  arg88_1 = view_116 = permute_56 = None
        view_117: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_31, [2, 64, 1024]);  addmm_31 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_118: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_117, [2, -1, 16, 64]);  view_117 = None
        permute_57: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_118, [0, 2, 1, 3]);  view_118 = None
        clone_41: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_57, memory_format = torch.contiguous_format);  permute_57 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_119: "f32[128, 1024]" = torch.ops.aten.view.default(add_38, [128, 1024])
        permute_58: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg89_1, [1, 0]);  arg89_1 = None
        addmm_32: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg90_1, view_119, permute_58);  arg90_1 = view_119 = permute_58 = None
        view_120: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_32, [2, 64, 1024]);  addmm_32 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_121: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_120, [2, -1, 16, 64]);  view_120 = None
        permute_59: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_121, [0, 2, 1, 3]);  view_121 = None
        clone_42: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_59, memory_format = torch.contiguous_format);  permute_59 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_122: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(mul_27, [2, 64, 16, 64]);  mul_27 = None
        permute_60: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_122, [0, 2, 1, 3]);  view_122 = None
        clone_43: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_60, memory_format = torch.contiguous_format);  permute_60 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_123: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_43, [32, -1, 64]);  clone_43 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_124: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_41, [32, -1, 64]);  clone_41 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_125: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_42, [32, -1, 64]);  clone_42 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_61: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_124, [0, 2, 1]);  view_124 = None
        bmm_10: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_123, permute_61);  view_123 = permute_61 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_126: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_10, [2, 16, 64, 64]);  bmm_10 = None
        add_39: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_126, where_2);  view_126 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_127: "f32[32, 64, 64]" = torch.ops.aten.view.default(add_39, [32, 64, 64]);  add_39 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_5: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_127, [-1], True)
        sub_16: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_127, amax_5);  view_127 = amax_5 = None
        exp_5: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_16);  sub_16 = None
        sum_6: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_5, [-1], True)
        div_5: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_5, sum_6);  exp_5 = sum_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_11: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_5, view_125);  div_5 = view_125 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_128: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_11, [2, 16, 64, 64]);  bmm_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_62: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_128, [0, 2, 1, 3]);  view_128 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_45: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_62, memory_format = torch.contiguous_format);  permute_62 = None
        view_129: "f32[2, 64, 1024]" = torch.ops.aten.view.default(clone_45, [2, 64, 1024]);  clone_45 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_130: "f32[128, 1024]" = torch.ops.aten.view.default(view_129, [128, 1024]);  view_129 = None
        permute_63: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg91_1, [1, 0]);  arg91_1 = None
        addmm_33: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg92_1, view_130, permute_63);  arg92_1 = view_130 = permute_63 = None
        view_131: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_33, [2, 64, 1024]);  addmm_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_40: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_38, view_131);  add_38 = view_131 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_10 = torch.ops.aten.var_mean.correction(add_40, [2], correction = 0, keepdim = True)
        getitem_20: "f32[2, 64, 1]" = var_mean_10[0]
        getitem_21: "f32[2, 64, 1]" = var_mean_10[1];  var_mean_10 = None
        add_41: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_20, 1e-05);  getitem_20 = None
        rsqrt_10: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_41);  add_41 = None
        sub_17: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_40, getitem_21);  add_40 = getitem_21 = None
        mul_28: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_17, rsqrt_10);  sub_17 = rsqrt_10 = None
        mul_29: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_28, arg93_1);  mul_28 = arg93_1 = None
        add_42: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_29, arg94_1);  mul_29 = arg94_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_132: "f32[128, 1024]" = torch.ops.aten.view.default(add_42, [128, 1024])
        permute_64: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg95_1, [1, 0]);  arg95_1 = None
        addmm_34: "f32[128, 4096]" = torch.ops.aten.addmm.default(arg96_1, view_132, permute_64);  arg96_1 = view_132 = permute_64 = None
        view_133: "f32[2, 64, 4096]" = torch.ops.aten.view.default(addmm_34, [2, 64, 4096]);  addmm_34 = None
        relu_5: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_133);  view_133 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_134: "f32[128, 4096]" = torch.ops.aten.view.default(relu_5, [128, 4096]);  relu_5 = None
        permute_65: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg97_1, [1, 0]);  arg97_1 = None
        addmm_35: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg98_1, view_134, permute_65);  arg98_1 = view_134 = permute_65 = None
        view_135: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_35, [2, 64, 1024]);  addmm_35 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_43: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_42, view_135);  add_42 = view_135 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_11 = torch.ops.aten.var_mean.correction(add_43, [2], correction = 0, keepdim = True)
        getitem_22: "f32[2, 64, 1]" = var_mean_11[0]
        getitem_23: "f32[2, 64, 1]" = var_mean_11[1];  var_mean_11 = None
        add_44: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_22, 1e-05);  getitem_22 = None
        rsqrt_11: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_44);  add_44 = None
        sub_18: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_43, getitem_23);  add_43 = getitem_23 = None
        mul_30: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_18, rsqrt_11);  sub_18 = rsqrt_11 = None
        mul_31: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_30, arg99_1);  mul_30 = arg99_1 = None
        add_45: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_31, arg100_1);  mul_31 = arg100_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_136: "f32[128, 1024]" = torch.ops.aten.view.default(add_45, [128, 1024])
        permute_66: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg101_1, [1, 0]);  arg101_1 = None
        addmm_36: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg102_1, view_136, permute_66);  arg102_1 = view_136 = permute_66 = None
        view_137: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_36, [2, 64, 1024]);  addmm_36 = None
        mul_32: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_137, 0.125);  view_137 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_138: "f32[128, 1024]" = torch.ops.aten.view.default(add_45, [128, 1024])
        permute_67: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg103_1, [1, 0]);  arg103_1 = None
        addmm_37: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg104_1, view_138, permute_67);  arg104_1 = view_138 = permute_67 = None
        view_139: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_37, [2, 64, 1024]);  addmm_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_140: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_139, [2, -1, 16, 64]);  view_139 = None
        permute_68: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_140, [0, 2, 1, 3]);  view_140 = None
        clone_49: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_68, memory_format = torch.contiguous_format);  permute_68 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_141: "f32[128, 1024]" = torch.ops.aten.view.default(add_45, [128, 1024])
        permute_69: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg105_1, [1, 0]);  arg105_1 = None
        addmm_38: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg106_1, view_141, permute_69);  arg106_1 = view_141 = permute_69 = None
        view_142: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_38, [2, 64, 1024]);  addmm_38 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_143: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_142, [2, -1, 16, 64]);  view_142 = None
        permute_70: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_143, [0, 2, 1, 3]);  view_143 = None
        clone_50: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_70, memory_format = torch.contiguous_format);  permute_70 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_144: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(mul_32, [2, 64, 16, 64]);  mul_32 = None
        permute_71: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_144, [0, 2, 1, 3]);  view_144 = None
        clone_51: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_71, memory_format = torch.contiguous_format);  permute_71 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_145: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_51, [32, -1, 64]);  clone_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_146: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_49, [32, -1, 64]);  clone_49 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_147: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_50, [32, -1, 64]);  clone_50 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_72: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_146, [0, 2, 1]);  view_146 = None
        bmm_12: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_145, permute_72);  view_145 = permute_72 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_148: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_12, [2, 16, 64, 64]);  bmm_12 = None
        add_46: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_148, where_2);  view_148 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_149: "f32[32, 64, 64]" = torch.ops.aten.view.default(add_46, [32, 64, 64]);  add_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_6: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_149, [-1], True)
        sub_19: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_149, amax_6);  view_149 = amax_6 = None
        exp_6: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_19);  sub_19 = None
        sum_7: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_6, [-1], True)
        div_6: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_6, sum_7);  exp_6 = sum_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_13: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_6, view_147);  div_6 = view_147 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_150: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_13, [2, 16, 64, 64]);  bmm_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_73: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_150, [0, 2, 1, 3]);  view_150 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_53: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_73, memory_format = torch.contiguous_format);  permute_73 = None
        view_151: "f32[2, 64, 1024]" = torch.ops.aten.view.default(clone_53, [2, 64, 1024]);  clone_53 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_152: "f32[128, 1024]" = torch.ops.aten.view.default(view_151, [128, 1024]);  view_151 = None
        permute_74: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg107_1, [1, 0]);  arg107_1 = None
        addmm_39: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg108_1, view_152, permute_74);  arg108_1 = view_152 = permute_74 = None
        view_153: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_39, [2, 64, 1024]);  addmm_39 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_47: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_45, view_153);  add_45 = view_153 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_12 = torch.ops.aten.var_mean.correction(add_47, [2], correction = 0, keepdim = True)
        getitem_24: "f32[2, 64, 1]" = var_mean_12[0]
        getitem_25: "f32[2, 64, 1]" = var_mean_12[1];  var_mean_12 = None
        add_48: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_24, 1e-05);  getitem_24 = None
        rsqrt_12: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_48);  add_48 = None
        sub_20: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_47, getitem_25);  add_47 = getitem_25 = None
        mul_33: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_20, rsqrt_12);  sub_20 = rsqrt_12 = None
        mul_34: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_33, arg109_1);  mul_33 = arg109_1 = None
        add_49: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_34, arg110_1);  mul_34 = arg110_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_154: "f32[128, 1024]" = torch.ops.aten.view.default(add_49, [128, 1024])
        permute_75: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg111_1, [1, 0]);  arg111_1 = None
        addmm_40: "f32[128, 4096]" = torch.ops.aten.addmm.default(arg112_1, view_154, permute_75);  arg112_1 = view_154 = permute_75 = None
        view_155: "f32[2, 64, 4096]" = torch.ops.aten.view.default(addmm_40, [2, 64, 4096]);  addmm_40 = None
        relu_6: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_155);  view_155 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_156: "f32[128, 4096]" = torch.ops.aten.view.default(relu_6, [128, 4096]);  relu_6 = None
        permute_76: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg113_1, [1, 0]);  arg113_1 = None
        addmm_41: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg114_1, view_156, permute_76);  arg114_1 = view_156 = permute_76 = None
        view_157: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_41, [2, 64, 1024]);  addmm_41 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_50: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_49, view_157);  add_49 = view_157 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_13 = torch.ops.aten.var_mean.correction(add_50, [2], correction = 0, keepdim = True)
        getitem_26: "f32[2, 64, 1]" = var_mean_13[0]
        getitem_27: "f32[2, 64, 1]" = var_mean_13[1];  var_mean_13 = None
        add_51: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_26, 1e-05);  getitem_26 = None
        rsqrt_13: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_51);  add_51 = None
        sub_21: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_50, getitem_27);  add_50 = getitem_27 = None
        mul_35: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_21, rsqrt_13);  sub_21 = rsqrt_13 = None
        mul_36: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_35, arg115_1);  mul_35 = arg115_1 = None
        add_52: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_36, arg116_1);  mul_36 = arg116_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_158: "f32[128, 1024]" = torch.ops.aten.view.default(add_52, [128, 1024])
        permute_77: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg117_1, [1, 0]);  arg117_1 = None
        addmm_42: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg118_1, view_158, permute_77);  arg118_1 = view_158 = permute_77 = None
        view_159: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_42, [2, 64, 1024]);  addmm_42 = None
        mul_37: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_159, 0.125);  view_159 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_160: "f32[128, 1024]" = torch.ops.aten.view.default(add_52, [128, 1024])
        permute_78: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg119_1, [1, 0]);  arg119_1 = None
        addmm_43: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg120_1, view_160, permute_78);  arg120_1 = view_160 = permute_78 = None
        view_161: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_43, [2, 64, 1024]);  addmm_43 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_162: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_161, [2, -1, 16, 64]);  view_161 = None
        permute_79: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_162, [0, 2, 1, 3]);  view_162 = None
        clone_57: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_79, memory_format = torch.contiguous_format);  permute_79 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_163: "f32[128, 1024]" = torch.ops.aten.view.default(add_52, [128, 1024])
        permute_80: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg121_1, [1, 0]);  arg121_1 = None
        addmm_44: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg122_1, view_163, permute_80);  arg122_1 = view_163 = permute_80 = None
        view_164: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_44, [2, 64, 1024]);  addmm_44 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_165: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_164, [2, -1, 16, 64]);  view_164 = None
        permute_81: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_165, [0, 2, 1, 3]);  view_165 = None
        clone_58: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_81, memory_format = torch.contiguous_format);  permute_81 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_166: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(mul_37, [2, 64, 16, 64]);  mul_37 = None
        permute_82: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_166, [0, 2, 1, 3]);  view_166 = None
        clone_59: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_82, memory_format = torch.contiguous_format);  permute_82 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_167: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_59, [32, -1, 64]);  clone_59 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_168: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_57, [32, -1, 64]);  clone_57 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_169: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_58, [32, -1, 64]);  clone_58 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_83: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_168, [0, 2, 1]);  view_168 = None
        bmm_14: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_167, permute_83);  view_167 = permute_83 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_170: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_14, [2, 16, 64, 64]);  bmm_14 = None
        add_53: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_170, where_2);  view_170 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_171: "f32[32, 64, 64]" = torch.ops.aten.view.default(add_53, [32, 64, 64]);  add_53 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_7: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_171, [-1], True)
        sub_22: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_171, amax_7);  view_171 = amax_7 = None
        exp_7: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_22);  sub_22 = None
        sum_8: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_7, [-1], True)
        div_7: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_7, sum_8);  exp_7 = sum_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_15: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_7, view_169);  div_7 = view_169 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_172: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_15, [2, 16, 64, 64]);  bmm_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_84: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_172, [0, 2, 1, 3]);  view_172 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_61: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_84, memory_format = torch.contiguous_format);  permute_84 = None
        view_173: "f32[2, 64, 1024]" = torch.ops.aten.view.default(clone_61, [2, 64, 1024]);  clone_61 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_174: "f32[128, 1024]" = torch.ops.aten.view.default(view_173, [128, 1024]);  view_173 = None
        permute_85: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg123_1, [1, 0]);  arg123_1 = None
        addmm_45: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg124_1, view_174, permute_85);  arg124_1 = view_174 = permute_85 = None
        view_175: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_45, [2, 64, 1024]);  addmm_45 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_54: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_52, view_175);  add_52 = view_175 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_14 = torch.ops.aten.var_mean.correction(add_54, [2], correction = 0, keepdim = True)
        getitem_28: "f32[2, 64, 1]" = var_mean_14[0]
        getitem_29: "f32[2, 64, 1]" = var_mean_14[1];  var_mean_14 = None
        add_55: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_28, 1e-05);  getitem_28 = None
        rsqrt_14: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_55);  add_55 = None
        sub_23: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_54, getitem_29);  add_54 = getitem_29 = None
        mul_38: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_23, rsqrt_14);  sub_23 = rsqrt_14 = None
        mul_39: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_38, arg125_1);  mul_38 = arg125_1 = None
        add_56: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_39, arg126_1);  mul_39 = arg126_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_176: "f32[128, 1024]" = torch.ops.aten.view.default(add_56, [128, 1024])
        permute_86: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg127_1, [1, 0]);  arg127_1 = None
        addmm_46: "f32[128, 4096]" = torch.ops.aten.addmm.default(arg128_1, view_176, permute_86);  arg128_1 = view_176 = permute_86 = None
        view_177: "f32[2, 64, 4096]" = torch.ops.aten.view.default(addmm_46, [2, 64, 4096]);  addmm_46 = None
        relu_7: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_177);  view_177 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_178: "f32[128, 4096]" = torch.ops.aten.view.default(relu_7, [128, 4096]);  relu_7 = None
        permute_87: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg129_1, [1, 0]);  arg129_1 = None
        addmm_47: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg130_1, view_178, permute_87);  arg130_1 = view_178 = permute_87 = None
        view_179: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_47, [2, 64, 1024]);  addmm_47 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_57: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_56, view_179);  add_56 = view_179 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_15 = torch.ops.aten.var_mean.correction(add_57, [2], correction = 0, keepdim = True)
        getitem_30: "f32[2, 64, 1]" = var_mean_15[0]
        getitem_31: "f32[2, 64, 1]" = var_mean_15[1];  var_mean_15 = None
        add_58: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_30, 1e-05);  getitem_30 = None
        rsqrt_15: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_58);  add_58 = None
        sub_24: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_57, getitem_31);  add_57 = getitem_31 = None
        mul_40: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_24, rsqrt_15);  sub_24 = rsqrt_15 = None
        mul_41: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_40, arg131_1);  mul_40 = arg131_1 = None
        add_59: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_41, arg132_1);  mul_41 = arg132_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_180: "f32[128, 1024]" = torch.ops.aten.view.default(add_59, [128, 1024])
        permute_88: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg133_1, [1, 0]);  arg133_1 = None
        addmm_48: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg134_1, view_180, permute_88);  arg134_1 = view_180 = permute_88 = None
        view_181: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_48, [2, 64, 1024]);  addmm_48 = None
        mul_42: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_181, 0.125);  view_181 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_182: "f32[128, 1024]" = torch.ops.aten.view.default(add_59, [128, 1024])
        permute_89: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg135_1, [1, 0]);  arg135_1 = None
        addmm_49: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg136_1, view_182, permute_89);  arg136_1 = view_182 = permute_89 = None
        view_183: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_49, [2, 64, 1024]);  addmm_49 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_184: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_183, [2, -1, 16, 64]);  view_183 = None
        permute_90: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_184, [0, 2, 1, 3]);  view_184 = None
        clone_65: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_90, memory_format = torch.contiguous_format);  permute_90 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_185: "f32[128, 1024]" = torch.ops.aten.view.default(add_59, [128, 1024])
        permute_91: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg137_1, [1, 0]);  arg137_1 = None
        addmm_50: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg138_1, view_185, permute_91);  arg138_1 = view_185 = permute_91 = None
        view_186: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_50, [2, 64, 1024]);  addmm_50 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_187: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_186, [2, -1, 16, 64]);  view_186 = None
        permute_92: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_187, [0, 2, 1, 3]);  view_187 = None
        clone_66: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_92, memory_format = torch.contiguous_format);  permute_92 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_188: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(mul_42, [2, 64, 16, 64]);  mul_42 = None
        permute_93: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_188, [0, 2, 1, 3]);  view_188 = None
        clone_67: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_93, memory_format = torch.contiguous_format);  permute_93 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_189: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_67, [32, -1, 64]);  clone_67 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_190: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_65, [32, -1, 64]);  clone_65 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_191: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_66, [32, -1, 64]);  clone_66 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_94: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_190, [0, 2, 1]);  view_190 = None
        bmm_16: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_189, permute_94);  view_189 = permute_94 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_192: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_16, [2, 16, 64, 64]);  bmm_16 = None
        add_60: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_192, where_2);  view_192 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_193: "f32[32, 64, 64]" = torch.ops.aten.view.default(add_60, [32, 64, 64]);  add_60 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_8: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_193, [-1], True)
        sub_25: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_193, amax_8);  view_193 = amax_8 = None
        exp_8: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_25);  sub_25 = None
        sum_9: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_8, [-1], True)
        div_8: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_8, sum_9);  exp_8 = sum_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_17: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_8, view_191);  div_8 = view_191 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_194: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_17, [2, 16, 64, 64]);  bmm_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_95: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_194, [0, 2, 1, 3]);  view_194 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_69: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_95, memory_format = torch.contiguous_format);  permute_95 = None
        view_195: "f32[2, 64, 1024]" = torch.ops.aten.view.default(clone_69, [2, 64, 1024]);  clone_69 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_196: "f32[128, 1024]" = torch.ops.aten.view.default(view_195, [128, 1024]);  view_195 = None
        permute_96: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg139_1, [1, 0]);  arg139_1 = None
        addmm_51: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg140_1, view_196, permute_96);  arg140_1 = view_196 = permute_96 = None
        view_197: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_51, [2, 64, 1024]);  addmm_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_61: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_59, view_197);  add_59 = view_197 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_16 = torch.ops.aten.var_mean.correction(add_61, [2], correction = 0, keepdim = True)
        getitem_32: "f32[2, 64, 1]" = var_mean_16[0]
        getitem_33: "f32[2, 64, 1]" = var_mean_16[1];  var_mean_16 = None
        add_62: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_32, 1e-05);  getitem_32 = None
        rsqrt_16: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_62);  add_62 = None
        sub_26: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_61, getitem_33);  add_61 = getitem_33 = None
        mul_43: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_26, rsqrt_16);  sub_26 = rsqrt_16 = None
        mul_44: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_43, arg141_1);  mul_43 = arg141_1 = None
        add_63: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_44, arg142_1);  mul_44 = arg142_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_198: "f32[128, 1024]" = torch.ops.aten.view.default(add_63, [128, 1024])
        permute_97: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg143_1, [1, 0]);  arg143_1 = None
        addmm_52: "f32[128, 4096]" = torch.ops.aten.addmm.default(arg144_1, view_198, permute_97);  arg144_1 = view_198 = permute_97 = None
        view_199: "f32[2, 64, 4096]" = torch.ops.aten.view.default(addmm_52, [2, 64, 4096]);  addmm_52 = None
        relu_8: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_199);  view_199 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_200: "f32[128, 4096]" = torch.ops.aten.view.default(relu_8, [128, 4096]);  relu_8 = None
        permute_98: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg145_1, [1, 0]);  arg145_1 = None
        addmm_53: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg146_1, view_200, permute_98);  arg146_1 = view_200 = permute_98 = None
        view_201: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_53, [2, 64, 1024]);  addmm_53 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_64: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_63, view_201);  add_63 = view_201 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_17 = torch.ops.aten.var_mean.correction(add_64, [2], correction = 0, keepdim = True)
        getitem_34: "f32[2, 64, 1]" = var_mean_17[0]
        getitem_35: "f32[2, 64, 1]" = var_mean_17[1];  var_mean_17 = None
        add_65: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_34, 1e-05);  getitem_34 = None
        rsqrt_17: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_65);  add_65 = None
        sub_27: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_64, getitem_35);  add_64 = getitem_35 = None
        mul_45: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_27, rsqrt_17);  sub_27 = rsqrt_17 = None
        mul_46: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_45, arg147_1);  mul_45 = arg147_1 = None
        add_66: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_46, arg148_1);  mul_46 = arg148_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_202: "f32[128, 1024]" = torch.ops.aten.view.default(add_66, [128, 1024])
        permute_99: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg149_1, [1, 0]);  arg149_1 = None
        addmm_54: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg150_1, view_202, permute_99);  arg150_1 = view_202 = permute_99 = None
        view_203: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_54, [2, 64, 1024]);  addmm_54 = None
        mul_47: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_203, 0.125);  view_203 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_204: "f32[128, 1024]" = torch.ops.aten.view.default(add_66, [128, 1024])
        permute_100: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg151_1, [1, 0]);  arg151_1 = None
        addmm_55: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg152_1, view_204, permute_100);  arg152_1 = view_204 = permute_100 = None
        view_205: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_55, [2, 64, 1024]);  addmm_55 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_206: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_205, [2, -1, 16, 64]);  view_205 = None
        permute_101: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_206, [0, 2, 1, 3]);  view_206 = None
        clone_73: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_101, memory_format = torch.contiguous_format);  permute_101 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_207: "f32[128, 1024]" = torch.ops.aten.view.default(add_66, [128, 1024])
        permute_102: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg153_1, [1, 0]);  arg153_1 = None
        addmm_56: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg154_1, view_207, permute_102);  arg154_1 = view_207 = permute_102 = None
        view_208: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_56, [2, 64, 1024]);  addmm_56 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_209: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_208, [2, -1, 16, 64]);  view_208 = None
        permute_103: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_209, [0, 2, 1, 3]);  view_209 = None
        clone_74: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_103, memory_format = torch.contiguous_format);  permute_103 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_210: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(mul_47, [2, 64, 16, 64]);  mul_47 = None
        permute_104: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_210, [0, 2, 1, 3]);  view_210 = None
        clone_75: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_104, memory_format = torch.contiguous_format);  permute_104 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_211: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_75, [32, -1, 64]);  clone_75 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_212: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_73, [32, -1, 64]);  clone_73 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_213: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_74, [32, -1, 64]);  clone_74 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_105: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_212, [0, 2, 1]);  view_212 = None
        bmm_18: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_211, permute_105);  view_211 = permute_105 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_214: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_18, [2, 16, 64, 64]);  bmm_18 = None
        add_67: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_214, where_2);  view_214 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_215: "f32[32, 64, 64]" = torch.ops.aten.view.default(add_67, [32, 64, 64]);  add_67 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_9: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_215, [-1], True)
        sub_28: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_215, amax_9);  view_215 = amax_9 = None
        exp_9: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_28);  sub_28 = None
        sum_10: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_9, [-1], True)
        div_9: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_9, sum_10);  exp_9 = sum_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_19: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_9, view_213);  div_9 = view_213 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_216: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_19, [2, 16, 64, 64]);  bmm_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_106: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_216, [0, 2, 1, 3]);  view_216 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_77: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_106, memory_format = torch.contiguous_format);  permute_106 = None
        view_217: "f32[2, 64, 1024]" = torch.ops.aten.view.default(clone_77, [2, 64, 1024]);  clone_77 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_218: "f32[128, 1024]" = torch.ops.aten.view.default(view_217, [128, 1024]);  view_217 = None
        permute_107: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg155_1, [1, 0]);  arg155_1 = None
        addmm_57: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg156_1, view_218, permute_107);  arg156_1 = view_218 = permute_107 = None
        view_219: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_57, [2, 64, 1024]);  addmm_57 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_68: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_66, view_219);  add_66 = view_219 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_18 = torch.ops.aten.var_mean.correction(add_68, [2], correction = 0, keepdim = True)
        getitem_36: "f32[2, 64, 1]" = var_mean_18[0]
        getitem_37: "f32[2, 64, 1]" = var_mean_18[1];  var_mean_18 = None
        add_69: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_36, 1e-05);  getitem_36 = None
        rsqrt_18: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_69);  add_69 = None
        sub_29: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_68, getitem_37);  add_68 = getitem_37 = None
        mul_48: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_29, rsqrt_18);  sub_29 = rsqrt_18 = None
        mul_49: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_48, arg157_1);  mul_48 = arg157_1 = None
        add_70: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_49, arg158_1);  mul_49 = arg158_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_220: "f32[128, 1024]" = torch.ops.aten.view.default(add_70, [128, 1024])
        permute_108: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg159_1, [1, 0]);  arg159_1 = None
        addmm_58: "f32[128, 4096]" = torch.ops.aten.addmm.default(arg160_1, view_220, permute_108);  arg160_1 = view_220 = permute_108 = None
        view_221: "f32[2, 64, 4096]" = torch.ops.aten.view.default(addmm_58, [2, 64, 4096]);  addmm_58 = None
        relu_9: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_221);  view_221 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_222: "f32[128, 4096]" = torch.ops.aten.view.default(relu_9, [128, 4096]);  relu_9 = None
        permute_109: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg161_1, [1, 0]);  arg161_1 = None
        addmm_59: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg162_1, view_222, permute_109);  arg162_1 = view_222 = permute_109 = None
        view_223: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_59, [2, 64, 1024]);  addmm_59 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_71: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_70, view_223);  add_70 = view_223 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_19 = torch.ops.aten.var_mean.correction(add_71, [2], correction = 0, keepdim = True)
        getitem_38: "f32[2, 64, 1]" = var_mean_19[0]
        getitem_39: "f32[2, 64, 1]" = var_mean_19[1];  var_mean_19 = None
        add_72: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_38, 1e-05);  getitem_38 = None
        rsqrt_19: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_72);  add_72 = None
        sub_30: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_71, getitem_39);  add_71 = getitem_39 = None
        mul_50: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_30, rsqrt_19);  sub_30 = rsqrt_19 = None
        mul_51: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_50, arg163_1);  mul_50 = arg163_1 = None
        add_73: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_51, arg164_1);  mul_51 = arg164_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_224: "f32[128, 1024]" = torch.ops.aten.view.default(add_73, [128, 1024])
        permute_110: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg165_1, [1, 0]);  arg165_1 = None
        addmm_60: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg166_1, view_224, permute_110);  arg166_1 = view_224 = permute_110 = None
        view_225: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_60, [2, 64, 1024]);  addmm_60 = None
        mul_52: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_225, 0.125);  view_225 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_226: "f32[128, 1024]" = torch.ops.aten.view.default(add_73, [128, 1024])
        permute_111: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg167_1, [1, 0]);  arg167_1 = None
        addmm_61: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg168_1, view_226, permute_111);  arg168_1 = view_226 = permute_111 = None
        view_227: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_61, [2, 64, 1024]);  addmm_61 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_228: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_227, [2, -1, 16, 64]);  view_227 = None
        permute_112: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_228, [0, 2, 1, 3]);  view_228 = None
        clone_81: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_112, memory_format = torch.contiguous_format);  permute_112 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_229: "f32[128, 1024]" = torch.ops.aten.view.default(add_73, [128, 1024])
        permute_113: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg169_1, [1, 0]);  arg169_1 = None
        addmm_62: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg170_1, view_229, permute_113);  arg170_1 = view_229 = permute_113 = None
        view_230: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_62, [2, 64, 1024]);  addmm_62 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_231: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_230, [2, -1, 16, 64]);  view_230 = None
        permute_114: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_231, [0, 2, 1, 3]);  view_231 = None
        clone_82: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_114, memory_format = torch.contiguous_format);  permute_114 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_232: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(mul_52, [2, 64, 16, 64]);  mul_52 = None
        permute_115: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_232, [0, 2, 1, 3]);  view_232 = None
        clone_83: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_115, memory_format = torch.contiguous_format);  permute_115 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_233: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_83, [32, -1, 64]);  clone_83 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_234: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_81, [32, -1, 64]);  clone_81 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_235: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_82, [32, -1, 64]);  clone_82 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_116: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_234, [0, 2, 1]);  view_234 = None
        bmm_20: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_233, permute_116);  view_233 = permute_116 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_236: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_20, [2, 16, 64, 64]);  bmm_20 = None
        add_74: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_236, where_2);  view_236 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_237: "f32[32, 64, 64]" = torch.ops.aten.view.default(add_74, [32, 64, 64]);  add_74 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_10: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_237, [-1], True)
        sub_31: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_237, amax_10);  view_237 = amax_10 = None
        exp_10: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_31);  sub_31 = None
        sum_11: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_10, [-1], True)
        div_10: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_10, sum_11);  exp_10 = sum_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_21: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_10, view_235);  div_10 = view_235 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_238: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_21, [2, 16, 64, 64]);  bmm_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_117: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_238, [0, 2, 1, 3]);  view_238 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_85: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_117, memory_format = torch.contiguous_format);  permute_117 = None
        view_239: "f32[2, 64, 1024]" = torch.ops.aten.view.default(clone_85, [2, 64, 1024]);  clone_85 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_240: "f32[128, 1024]" = torch.ops.aten.view.default(view_239, [128, 1024]);  view_239 = None
        permute_118: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg171_1, [1, 0]);  arg171_1 = None
        addmm_63: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg172_1, view_240, permute_118);  arg172_1 = view_240 = permute_118 = None
        view_241: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_63, [2, 64, 1024]);  addmm_63 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_75: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_73, view_241);  add_73 = view_241 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_20 = torch.ops.aten.var_mean.correction(add_75, [2], correction = 0, keepdim = True)
        getitem_40: "f32[2, 64, 1]" = var_mean_20[0]
        getitem_41: "f32[2, 64, 1]" = var_mean_20[1];  var_mean_20 = None
        add_76: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_40, 1e-05);  getitem_40 = None
        rsqrt_20: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_76);  add_76 = None
        sub_32: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_75, getitem_41);  add_75 = getitem_41 = None
        mul_53: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_32, rsqrt_20);  sub_32 = rsqrt_20 = None
        mul_54: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_53, arg173_1);  mul_53 = arg173_1 = None
        add_77: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_54, arg174_1);  mul_54 = arg174_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_242: "f32[128, 1024]" = torch.ops.aten.view.default(add_77, [128, 1024])
        permute_119: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg175_1, [1, 0]);  arg175_1 = None
        addmm_64: "f32[128, 4096]" = torch.ops.aten.addmm.default(arg176_1, view_242, permute_119);  arg176_1 = view_242 = permute_119 = None
        view_243: "f32[2, 64, 4096]" = torch.ops.aten.view.default(addmm_64, [2, 64, 4096]);  addmm_64 = None
        relu_10: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_243);  view_243 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_244: "f32[128, 4096]" = torch.ops.aten.view.default(relu_10, [128, 4096]);  relu_10 = None
        permute_120: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg177_1, [1, 0]);  arg177_1 = None
        addmm_65: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg178_1, view_244, permute_120);  arg178_1 = view_244 = permute_120 = None
        view_245: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_65, [2, 64, 1024]);  addmm_65 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_78: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_77, view_245);  add_77 = view_245 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_21 = torch.ops.aten.var_mean.correction(add_78, [2], correction = 0, keepdim = True)
        getitem_42: "f32[2, 64, 1]" = var_mean_21[0]
        getitem_43: "f32[2, 64, 1]" = var_mean_21[1];  var_mean_21 = None
        add_79: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_42, 1e-05);  getitem_42 = None
        rsqrt_21: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_79);  add_79 = None
        sub_33: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_78, getitem_43);  add_78 = getitem_43 = None
        mul_55: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_33, rsqrt_21);  sub_33 = rsqrt_21 = None
        mul_56: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_55, arg179_1);  mul_55 = arg179_1 = None
        add_80: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_56, arg180_1);  mul_56 = arg180_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_246: "f32[128, 1024]" = torch.ops.aten.view.default(add_80, [128, 1024])
        permute_121: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg181_1, [1, 0]);  arg181_1 = None
        addmm_66: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg182_1, view_246, permute_121);  arg182_1 = view_246 = permute_121 = None
        view_247: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_66, [2, 64, 1024]);  addmm_66 = None
        mul_57: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_247, 0.125);  view_247 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_248: "f32[128, 1024]" = torch.ops.aten.view.default(add_80, [128, 1024])
        permute_122: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg183_1, [1, 0]);  arg183_1 = None
        addmm_67: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg184_1, view_248, permute_122);  arg184_1 = view_248 = permute_122 = None
        view_249: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_67, [2, 64, 1024]);  addmm_67 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_250: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_249, [2, -1, 16, 64]);  view_249 = None
        permute_123: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_250, [0, 2, 1, 3]);  view_250 = None
        clone_89: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_123, memory_format = torch.contiguous_format);  permute_123 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_251: "f32[128, 1024]" = torch.ops.aten.view.default(add_80, [128, 1024])
        permute_124: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg185_1, [1, 0]);  arg185_1 = None
        addmm_68: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg186_1, view_251, permute_124);  arg186_1 = view_251 = permute_124 = None
        view_252: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_68, [2, 64, 1024]);  addmm_68 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_253: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(view_252, [2, -1, 16, 64]);  view_252 = None
        permute_125: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_253, [0, 2, 1, 3]);  view_253 = None
        clone_90: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_125, memory_format = torch.contiguous_format);  permute_125 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_254: "f32[2, 64, 16, 64]" = torch.ops.aten.view.default(mul_57, [2, 64, 16, 64]);  mul_57 = None
        permute_126: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_254, [0, 2, 1, 3]);  view_254 = None
        clone_91: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_126, memory_format = torch.contiguous_format);  permute_126 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_255: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_91, [32, -1, 64]);  clone_91 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_256: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_89, [32, -1, 64]);  clone_89 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_257: "f32[32, 64, 64]" = torch.ops.aten.view.default(clone_90, [32, -1, 64]);  clone_90 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_127: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_256, [0, 2, 1]);  view_256 = None
        bmm_22: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_255, permute_127);  view_255 = permute_127 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_258: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_22, [2, 16, 64, 64]);  bmm_22 = None
        add_81: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_258, where_2);  view_258 = where_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_259: "f32[32, 64, 64]" = torch.ops.aten.view.default(add_81, [32, 64, 64]);  add_81 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_11: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_259, [-1], True)
        sub_34: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_259, amax_11);  view_259 = amax_11 = None
        exp_11: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_34);  sub_34 = None
        sum_12: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_11, [-1], True)
        div_11: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_11, sum_12);  exp_11 = sum_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_23: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_11, view_257);  div_11 = view_257 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_260: "f32[2, 16, 64, 64]" = torch.ops.aten.view.default(bmm_23, [2, 16, 64, 64]);  bmm_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_128: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_260, [0, 2, 1, 3]);  view_260 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_93: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_128, memory_format = torch.contiguous_format);  permute_128 = None
        view_261: "f32[2, 64, 1024]" = torch.ops.aten.view.default(clone_93, [2, 64, 1024]);  clone_93 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_262: "f32[128, 1024]" = torch.ops.aten.view.default(view_261, [128, 1024]);  view_261 = None
        permute_129: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg187_1, [1, 0]);  arg187_1 = None
        addmm_69: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg188_1, view_262, permute_129);  arg188_1 = view_262 = permute_129 = None
        view_263: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_69, [2, 64, 1024]);  addmm_69 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_82: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_80, view_263);  add_80 = view_263 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_22 = torch.ops.aten.var_mean.correction(add_82, [2], correction = 0, keepdim = True)
        getitem_44: "f32[2, 64, 1]" = var_mean_22[0]
        getitem_45: "f32[2, 64, 1]" = var_mean_22[1];  var_mean_22 = None
        add_83: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_44, 1e-05);  getitem_44 = None
        rsqrt_22: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_83);  add_83 = None
        sub_35: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_82, getitem_45);  add_82 = getitem_45 = None
        mul_58: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_35, rsqrt_22);  sub_35 = rsqrt_22 = None
        mul_59: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_58, arg189_1);  mul_58 = arg189_1 = None
        add_84: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_59, arg190_1);  mul_59 = arg190_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_264: "f32[128, 1024]" = torch.ops.aten.view.default(add_84, [128, 1024])
        permute_130: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg191_1, [1, 0]);  arg191_1 = None
        addmm_70: "f32[128, 4096]" = torch.ops.aten.addmm.default(arg192_1, view_264, permute_130);  arg192_1 = view_264 = permute_130 = None
        view_265: "f32[2, 64, 4096]" = torch.ops.aten.view.default(addmm_70, [2, 64, 4096]);  addmm_70 = None
        relu_11: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_265);  view_265 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_266: "f32[128, 4096]" = torch.ops.aten.view.default(relu_11, [128, 4096]);  relu_11 = None
        permute_131: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg193_1, [1, 0]);  arg193_1 = None
        addmm_71: "f32[128, 1024]" = torch.ops.aten.addmm.default(arg194_1, view_266, permute_131);  arg194_1 = view_266 = permute_131 = None
        view_267: "f32[2, 64, 1024]" = torch.ops.aten.view.default(addmm_71, [2, 64, 1024]);  addmm_71 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_85: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_84, view_267);  add_84 = view_267 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_23 = torch.ops.aten.var_mean.correction(add_85, [2], correction = 0, keepdim = True)
        getitem_46: "f32[2, 64, 1]" = var_mean_23[0]
        getitem_47: "f32[2, 64, 1]" = var_mean_23[1];  var_mean_23 = None
        add_86: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_46, 1e-05);  getitem_46 = None
        rsqrt_23: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_86);  add_86 = None
        sub_36: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_85, getitem_47);  add_85 = getitem_47 = None
        mul_60: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_36, rsqrt_23);  sub_36 = rsqrt_23 = None
        mul_61: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_60, arg195_1);  mul_60 = arg195_1 = None
        add_87: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_61, arg196_1);  mul_61 = arg196_1 = None
        return (add_87, device_put)
        

# ===== run_2025_10_19_03_43_12_574129-pid_19/torchinductor/model__2_inference_2.2/fx_graph_runnable.py =====

import torch
from torch import tensor, device
import torch.fx as fx
from torch._dynamo.testing import rand_strided
from math import inf
import torch._inductor.inductor_prims

import torch._dynamo.config
import torch._inductor.config
import torch._functorch.config
import torch.fx.experimental._config
torch._dynamo.config.traceable_tensor_subclasses = set()
torch._dynamo.config.allowed_functions_module_string_ignorelist = {'torch.distributions', 'torch.testing', 'torch._prims', 'torch._decomp', 'torch._refs'}
torch._dynamo.config._ddp_optimization_mode = ['ddp_optimizer', 'python_reducer', 'python_reducer_without_compiled_forward', 'no_optimization']
torch._dynamo.config._save_config_ignore = {'constant_functions', 'repro_after', 'skipfiles_inline_module_allowlist', 'repro_level'}
torch._dynamo.config.reorderable_logging_functions = set()
torch._dynamo.config.ignore_logger_methods = set()
torch._dynamo.config._autograd_backward_strict_mode_banned_ops = ['stride', 'requires_grad', 'storage_offset', 'layout', 'data', 'is_coalesced', 'is_complex', 'is_conj', 'is_contiguous', 'is_cpu', 'is_cuda', 'is_distributed', 'is_floating_point', 'is_inference', 'is_ipu', 'is_leaf', 'is_maia', 'is_meta', 'is_mkldnn', 'is_mps', 'is_mtia', 'is_neg', 'is_nested', 'is_nonzero', 'is_pinned', 'is_quantized', 'is_same_size', 'is_set_to', 'is_shared', 'is_signed', 'is_sparse', 'is_sparse_csr', 'is_vulkan', 'is_xla', 'is_xpu']
torch._dynamo.config.compiled_autograd_kwargs_override = {}
torch._inductor.config.pre_grad_fusion_options = {}
torch._inductor.config.post_grad_fusion_options = {}
torch._inductor.config.fx_passes_numeric_check = {'pre_grad': False, 'precision': 0.0001, 'num_iterations': 1, 'requires_optimizer': True}
torch._inductor.config.reorder_for_compute_comm_overlap_passes = ['reorder_compute_for_overlap', 'sink_waits', 'raise_comms']
torch._inductor.config.max_autotune = True
torch._inductor.config.coordinate_descent_tuning = True
torch._inductor.config._fuse_ddp_communication_passes = ['fuse_ddp_with_concat_op', 'schedule_comm_wait']
torch._inductor.config.triton.cudagraphs = True
torch._inductor.config.aot_inductor.metadata = {}
torch._inductor.config.aot_inductor.presets = {}
torch._inductor.config.rocm.arch = []
torch._inductor.config.rocm.ck_supported_arch = ['gfx90a', 'gfx940', 'gfx941', 'gfx942']
torch._inductor.config.trace.enabled = False
torch._inductor.config.trace.save_real_tensors = False
torch._inductor.config._save_config_ignore = ['trace.upload_tar', 'joint_custom_pre_pass', 'joint_custom_post_pass', 'pre_grad_custom_pass']
torch._inductor.config._cache_config_ignore_prefix = ['trace', 'cuda.cutlass_dir', 'worker_start_method', 'compile_threads', 'post_grad_custom_post_pass', 'post_grad_custom_pre_pass', 'always_complex_memory_overlap_TESTING_ONLY']
torch._inductor.config.external_matmul = []
torch._functorch.config.functionalize_rng_ops = False
torch._functorch.config.debug_partitioner = True
torch._functorch.config.fake_tensor_allow_unsafe_data_ptr_access = True
torch._functorch.config.unlift_effect_tokens = True



isolate_fails_code_str = None




# torch version: 2.6.0+cu124
# torch cuda version: 12.4
# torch git version: 2236df1770800ffea5697b11b0bb0d910b2e59e1


# CUDA Info: 
# nvcc: NVIDIA (R) Cuda compiler driver 
# Copyright (c) 2005-2024 NVIDIA Corporation 
# Built on Thu_Jun__6_02:18:23_PDT_2024 
# Cuda compilation tools, release 12.5, V12.5.82 
# Build cuda_12.5.r12.5/compiler.34385749_0 

# GPU Hardware Info: 
# Tesla T4 : 2 


from torch.nn import *
class Repro(torch.nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.register_buffer('_tensor_constant0', tensor(1.))

    
    
    def forward(self, arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1, arg7_1, arg8_1, arg9_1, arg10_1, arg11_1, arg12_1, arg13_1, arg14_1, arg15_1, arg16_1, arg17_1, arg18_1, arg19_1, arg20_1, arg21_1, arg22_1, arg23_1, arg24_1, arg25_1, arg26_1, arg27_1, arg28_1, arg29_1, arg30_1, arg31_1, arg32_1, arg33_1, arg34_1, arg35_1, arg36_1, arg37_1, arg38_1, arg39_1, arg40_1, arg41_1, arg42_1, arg43_1, arg44_1, arg45_1, arg46_1, arg47_1, arg48_1, arg49_1, arg50_1, arg51_1, arg52_1, arg53_1, arg54_1, arg55_1, arg56_1, arg57_1, arg58_1, arg59_1, arg60_1, arg61_1, arg62_1, arg63_1, arg64_1, arg65_1, arg66_1, arg67_1, arg68_1, arg69_1, arg70_1, arg71_1, arg72_1, arg73_1, arg74_1, arg75_1, arg76_1, arg77_1, arg78_1, arg79_1, arg80_1, arg81_1, arg82_1, arg83_1, arg84_1, arg85_1, arg86_1, arg87_1, arg88_1, arg89_1, arg90_1, arg91_1, arg92_1, arg93_1, arg94_1, arg95_1, arg96_1, arg97_1, arg98_1, arg99_1, arg100_1, arg101_1, arg102_1, arg103_1, arg104_1, arg105_1, arg106_1, arg107_1, arg108_1, arg109_1, arg110_1, arg111_1, arg112_1, arg113_1, arg114_1, arg115_1, arg116_1, arg117_1, arg118_1, arg119_1, arg120_1, arg121_1, arg122_1, arg123_1, arg124_1, arg125_1, arg126_1, arg127_1, arg128_1, arg129_1, arg130_1, arg131_1, arg132_1, arg133_1, arg134_1, arg135_1, arg136_1, arg137_1, arg138_1, arg139_1, arg140_1, arg141_1, arg142_1, arg143_1, arg144_1, arg145_1, arg146_1, arg147_1, arg148_1, arg149_1, arg150_1, arg151_1, arg152_1, arg153_1, arg154_1, arg155_1, arg156_1, arg157_1, arg158_1, arg159_1, arg160_1, arg161_1, arg162_1, arg163_1, arg164_1, arg165_1, arg166_1, arg167_1, arg168_1, arg169_1, arg170_1, arg171_1, arg172_1, arg173_1, arg174_1, arg175_1, arg176_1, arg177_1, arg178_1, arg179_1, arg180_1, arg181_1, arg182_1, arg183_1, arg184_1, arg185_1, arg186_1, arg187_1, arg188_1, arg189_1, arg190_1, arg191_1, arg192_1, arg193_1, arg194_1, arg195_1, arg196_1):
        view = torch.ops.aten.view.default(arg0_1, [-1, 64]);  arg0_1 = None
        embedding = torch.ops.aten.embedding.default(arg1_1, view, 1);  arg1_1 = None
        mul = torch.ops.aten.mul.Tensor(embedding, 32.0);  embedding = None
        ne = torch.ops.aten.ne.Scalar(view, 1);  view = None
        convert_element_type = torch.ops.prims.convert_element_type.default(ne, torch.int32);  ne = None
        cumsum = torch.ops.aten.cumsum.default(convert_element_type, 1)
        convert_element_type_1 = torch.ops.prims.convert_element_type.default(cumsum, torch.int32);  cumsum = None
        add = torch.ops.aten.add.Tensor(convert_element_type_1, 0);  convert_element_type_1 = None
        mul_1 = torch.ops.aten.mul.Tensor(add, convert_element_type);  add = convert_element_type = None
        convert_element_type_2 = torch.ops.prims.convert_element_type.default(mul_1, torch.int64);  mul_1 = None
        add_1 = torch.ops.aten.add.Tensor(convert_element_type_2, 1);  convert_element_type_2 = None
        device_put = torch.ops.prims.device_put.default(arg2_1, device(type='cuda', index=0));  arg2_1 = None
        view_1 = torch.ops.aten.view.default(add_1, [-1]);  add_1 = None
        index = torch.ops.aten.index.Tensor(device_put, [view_1]);  view_1 = None
        view_2 = torch.ops.aten.view.default(index, [2, 64, -1]);  index = None
        add_2 = torch.ops.aten.add.Tensor(mul, view_2);  mul = view_2 = None
        full_default = torch.ops.aten.full.default([64, 64], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        iota = torch.ops.prims.iota.default(64, start = 0, step = 1, dtype = torch.int64, device = device(type='cuda', index=0), requires_grad = False)
        add_3 = torch.ops.aten.add.Tensor(iota, 1)
        view_3 = torch.ops.aten.view.default(add_3, [64, 1]);  add_3 = None
        lt = torch.ops.aten.lt.Tensor(iota, view_3);  iota = view_3 = None
        full_default_1 = torch.ops.aten.full.default([], 0.0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where = torch.ops.aten.where.self(lt, full_default_1, full_default);  lt = full_default_1 = full_default = None
        unsqueeze_2 = torch.ops.aten.unsqueeze.default(arg4_1, 1);  arg4_1 = None
        unsqueeze_3 = torch.ops.aten.unsqueeze.default(unsqueeze_2, 2);  unsqueeze_2 = None
        expand_1 = torch.ops.aten.expand.default(unsqueeze_3, [2, 1, 64, 64]);  unsqueeze_3 = None
        convert_element_type_4 = torch.ops.prims.convert_element_type.default(expand_1, torch.float32);  expand_1 = None
        _tensor_constant0 = self._tensor_constant0;  _tensor_constant0 = None
        full_default_2 = torch.ops.aten.full.default([], 1.0, dtype = torch.float32, layout = torch.strided, device = device(type='cpu'), pin_memory = False)
        sub = torch.ops.aten.sub.Tensor(full_default_2, convert_element_type_4);  full_default_2 = convert_element_type_4 = None
        convert_element_type_5 = torch.ops.prims.convert_element_type.default(sub, torch.bool)
        full_default_3 = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where_1 = torch.ops.aten.where.self(convert_element_type_5, full_default_3, sub);  convert_element_type_5 = full_default_3 = sub = None
        convert_element_type_6 = torch.ops.prims.convert_element_type.default(where_1, torch.bool);  where_1 = None
        unsqueeze_4 = torch.ops.aten.unsqueeze.default(where, 0);  where = None
        unsqueeze_5 = torch.ops.aten.unsqueeze.default(unsqueeze_4, 1);  unsqueeze_4 = None
        expand_2 = torch.ops.aten.expand.default(unsqueeze_5, [2, 1, 64, 64]);  unsqueeze_5 = None
        full_default_4 = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where_2 = torch.ops.aten.where.self(convert_element_type_6, full_default_4, expand_2);  convert_element_type_6 = full_default_4 = expand_2 = None
        view_4 = torch.ops.aten.view.default(add_2, [128, 1024])
        permute = torch.ops.aten.permute.default(arg5_1, [1, 0]);  arg5_1 = None
        addmm = torch.ops.aten.addmm.default(arg6_1, view_4, permute);  arg6_1 = view_4 = permute = None
        view_5 = torch.ops.aten.view.default(addmm, [2, 64, 1024]);  addmm = None
        mul_2 = torch.ops.aten.mul.Tensor(view_5, 0.125);  view_5 = None
        view_6 = torch.ops.aten.view.default(add_2, [128, 1024])
        permute_1 = torch.ops.aten.permute.default(arg7_1, [1, 0]);  arg7_1 = None
        addmm_1 = torch.ops.aten.addmm.default(arg8_1, view_6, permute_1);  arg8_1 = view_6 = permute_1 = None
        view_7 = torch.ops.aten.view.default(addmm_1, [2, 64, 1024]);  addmm_1 = None
        view_8 = torch.ops.aten.view.default(view_7, [2, -1, 16, 64]);  view_7 = None
        permute_2 = torch.ops.aten.permute.default(view_8, [0, 2, 1, 3]);  view_8 = None
        clone_1 = torch.ops.aten.clone.default(permute_2, memory_format = torch.contiguous_format);  permute_2 = None
        view_9 = torch.ops.aten.view.default(add_2, [128, 1024])
        permute_3 = torch.ops.aten.permute.default(arg9_1, [1, 0]);  arg9_1 = None
        addmm_2 = torch.ops.aten.addmm.default(arg10_1, view_9, permute_3);  arg10_1 = view_9 = permute_3 = None
        view_10 = torch.ops.aten.view.default(addmm_2, [2, 64, 1024]);  addmm_2 = None
        view_11 = torch.ops.aten.view.default(view_10, [2, -1, 16, 64]);  view_10 = None
        permute_4 = torch.ops.aten.permute.default(view_11, [0, 2, 1, 3]);  view_11 = None
        clone_2 = torch.ops.aten.clone.default(permute_4, memory_format = torch.contiguous_format);  permute_4 = None
        view_12 = torch.ops.aten.view.default(mul_2, [2, 64, 16, 64]);  mul_2 = None
        permute_5 = torch.ops.aten.permute.default(view_12, [0, 2, 1, 3]);  view_12 = None
        clone_3 = torch.ops.aten.clone.default(permute_5, memory_format = torch.contiguous_format);  permute_5 = None
        view_13 = torch.ops.aten.view.default(clone_3, [32, -1, 64]);  clone_3 = None
        view_14 = torch.ops.aten.view.default(clone_1, [32, -1, 64]);  clone_1 = None
        view_15 = torch.ops.aten.view.default(clone_2, [32, -1, 64]);  clone_2 = None
        permute_6 = torch.ops.aten.permute.default(view_14, [0, 2, 1]);  view_14 = None
        bmm = torch.ops.aten.bmm.default(view_13, permute_6);  view_13 = permute_6 = None
        view_16 = torch.ops.aten.view.default(bmm, [2, 16, 64, 64]);  bmm = None
        add_4 = torch.ops.aten.add.Tensor(view_16, where_2);  view_16 = None
        view_17 = torch.ops.aten.view.default(add_4, [32, 64, 64]);  add_4 = None
        amax = torch.ops.aten.amax.default(view_17, [-1], True)
        sub_1 = torch.ops.aten.sub.Tensor(view_17, amax);  view_17 = amax = None
        exp = torch.ops.aten.exp.default(sub_1);  sub_1 = None
        sum_1 = torch.ops.aten.sum.dim_IntList(exp, [-1], True)
        div = torch.ops.aten.div.Tensor(exp, sum_1);  exp = sum_1 = None
        bmm_1 = torch.ops.aten.bmm.default(div, view_15);  div = view_15 = None
        view_18 = torch.ops.aten.view.default(bmm_1, [2, 16, 64, 64]);  bmm_1 = None
        permute_7 = torch.ops.aten.permute.default(view_18, [0, 2, 1, 3]);  view_18 = None
        clone_5 = torch.ops.aten.clone.default(permute_7, memory_format = torch.contiguous_format);  permute_7 = None
        view_19 = torch.ops.aten.view.default(clone_5, [2, 64, 1024]);  clone_5 = None
        view_20 = torch.ops.aten.view.default(view_19, [128, 1024]);  view_19 = None
        permute_8 = torch.ops.aten.permute.default(arg11_1, [1, 0]);  arg11_1 = None
        addmm_3 = torch.ops.aten.addmm.default(arg12_1, view_20, permute_8);  arg12_1 = view_20 = permute_8 = None
        view_21 = torch.ops.aten.view.default(addmm_3, [2, 64, 1024]);  addmm_3 = None
        add_5 = torch.ops.aten.add.Tensor(add_2, view_21);  add_2 = view_21 = None
        var_mean = torch.ops.aten.var_mean.correction(add_5, [2], correction = 0, keepdim = True)
        getitem = var_mean[0]
        getitem_1 = var_mean[1];  var_mean = None
        add_6 = torch.ops.aten.add.Tensor(getitem, 1e-05);  getitem = None
        rsqrt = torch.ops.aten.rsqrt.default(add_6);  add_6 = None
        sub_2 = torch.ops.aten.sub.Tensor(add_5, getitem_1);  add_5 = getitem_1 = None
        mul_3 = torch.ops.aten.mul.Tensor(sub_2, rsqrt);  sub_2 = rsqrt = None
        mul_4 = torch.ops.aten.mul.Tensor(mul_3, arg13_1);  mul_3 = arg13_1 = None
        add_7 = torch.ops.aten.add.Tensor(mul_4, arg14_1);  mul_4 = arg14_1 = None
        view_22 = torch.ops.aten.view.default(add_7, [128, 1024])
        permute_9 = torch.ops.aten.permute.default(arg15_1, [1, 0]);  arg15_1 = None
        addmm_4 = torch.ops.aten.addmm.default(arg16_1, view_22, permute_9);  arg16_1 = view_22 = permute_9 = None
        view_23 = torch.ops.aten.view.default(addmm_4, [2, 64, 4096]);  addmm_4 = None
        relu = torch.ops.aten.relu.default(view_23);  view_23 = None
        view_24 = torch.ops.aten.view.default(relu, [128, 4096]);  relu = None
        permute_10 = torch.ops.aten.permute.default(arg17_1, [1, 0]);  arg17_1 = None
        addmm_5 = torch.ops.aten.addmm.default(arg18_1, view_24, permute_10);  arg18_1 = view_24 = permute_10 = None
        view_25 = torch.ops.aten.view.default(addmm_5, [2, 64, 1024]);  addmm_5 = None
        add_8 = torch.ops.aten.add.Tensor(add_7, view_25);  add_7 = view_25 = None
        var_mean_1 = torch.ops.aten.var_mean.correction(add_8, [2], correction = 0, keepdim = True)
        getitem_2 = var_mean_1[0]
        getitem_3 = var_mean_1[1];  var_mean_1 = None
        add_9 = torch.ops.aten.add.Tensor(getitem_2, 1e-05);  getitem_2 = None
        rsqrt_1 = torch.ops.aten.rsqrt.default(add_9);  add_9 = None
        sub_3 = torch.ops.aten.sub.Tensor(add_8, getitem_3);  add_8 = getitem_3 = None
        mul_5 = torch.ops.aten.mul.Tensor(sub_3, rsqrt_1);  sub_3 = rsqrt_1 = None
        mul_6 = torch.ops.aten.mul.Tensor(mul_5, arg19_1);  mul_5 = arg19_1 = None
        add_10 = torch.ops.aten.add.Tensor(mul_6, arg20_1);  mul_6 = arg20_1 = None
        view_26 = torch.ops.aten.view.default(add_10, [128, 1024])
        permute_11 = torch.ops.aten.permute.default(arg21_1, [1, 0]);  arg21_1 = None
        addmm_6 = torch.ops.aten.addmm.default(arg22_1, view_26, permute_11);  arg22_1 = view_26 = permute_11 = None
        view_27 = torch.ops.aten.view.default(addmm_6, [2, 64, 1024]);  addmm_6 = None
        mul_7 = torch.ops.aten.mul.Tensor(view_27, 0.125);  view_27 = None
        view_28 = torch.ops.aten.view.default(add_10, [128, 1024])
        permute_12 = torch.ops.aten.permute.default(arg23_1, [1, 0]);  arg23_1 = None
        addmm_7 = torch.ops.aten.addmm.default(arg24_1, view_28, permute_12);  arg24_1 = view_28 = permute_12 = None
        view_29 = torch.ops.aten.view.default(addmm_7, [2, 64, 1024]);  addmm_7 = None
        view_30 = torch.ops.aten.view.default(view_29, [2, -1, 16, 64]);  view_29 = None
        permute_13 = torch.ops.aten.permute.default(view_30, [0, 2, 1, 3]);  view_30 = None
        clone_9 = torch.ops.aten.clone.default(permute_13, memory_format = torch.contiguous_format);  permute_13 = None
        view_31 = torch.ops.aten.view.default(add_10, [128, 1024])
        permute_14 = torch.ops.aten.permute.default(arg25_1, [1, 0]);  arg25_1 = None
        addmm_8 = torch.ops.aten.addmm.default(arg26_1, view_31, permute_14);  arg26_1 = view_31 = permute_14 = None
        view_32 = torch.ops.aten.view.default(addmm_8, [2, 64, 1024]);  addmm_8 = None
        view_33 = torch.ops.aten.view.default(view_32, [2, -1, 16, 64]);  view_32 = None
        permute_15 = torch.ops.aten.permute.default(view_33, [0, 2, 1, 3]);  view_33 = None
        clone_10 = torch.ops.aten.clone.default(permute_15, memory_format = torch.contiguous_format);  permute_15 = None
        view_34 = torch.ops.aten.view.default(mul_7, [2, 64, 16, 64]);  mul_7 = None
        permute_16 = torch.ops.aten.permute.default(view_34, [0, 2, 1, 3]);  view_34 = None
        clone_11 = torch.ops.aten.clone.default(permute_16, memory_format = torch.contiguous_format);  permute_16 = None
        view_35 = torch.ops.aten.view.default(clone_11, [32, -1, 64]);  clone_11 = None
        view_36 = torch.ops.aten.view.default(clone_9, [32, -1, 64]);  clone_9 = None
        view_37 = torch.ops.aten.view.default(clone_10, [32, -1, 64]);  clone_10 = None
        permute_17 = torch.ops.aten.permute.default(view_36, [0, 2, 1]);  view_36 = None
        bmm_2 = torch.ops.aten.bmm.default(view_35, permute_17);  view_35 = permute_17 = None
        view_38 = torch.ops.aten.view.default(bmm_2, [2, 16, 64, 64]);  bmm_2 = None
        add_11 = torch.ops.aten.add.Tensor(view_38, where_2);  view_38 = None
        view_39 = torch.ops.aten.view.default(add_11, [32, 64, 64]);  add_11 = None
        amax_1 = torch.ops.aten.amax.default(view_39, [-1], True)
        sub_4 = torch.ops.aten.sub.Tensor(view_39, amax_1);  view_39 = amax_1 = None
        exp_1 = torch.ops.aten.exp.default(sub_4);  sub_4 = None
        sum_2 = torch.ops.aten.sum.dim_IntList(exp_1, [-1], True)
        div_1 = torch.ops.aten.div.Tensor(exp_1, sum_2);  exp_1 = sum_2 = None
        bmm_3 = torch.ops.aten.bmm.default(div_1, view_37);  div_1 = view_37 = None
        view_40 = torch.ops.aten.view.default(bmm_3, [2, 16, 64, 64]);  bmm_3 = None
        permute_18 = torch.ops.aten.permute.default(view_40, [0, 2, 1, 3]);  view_40 = None
        clone_13 = torch.ops.aten.clone.default(permute_18, memory_format = torch.contiguous_format);  permute_18 = None
        view_41 = torch.ops.aten.view.default(clone_13, [2, 64, 1024]);  clone_13 = None
        view_42 = torch.ops.aten.view.default(view_41, [128, 1024]);  view_41 = None
        permute_19 = torch.ops.aten.permute.default(arg27_1, [1, 0]);  arg27_1 = None
        addmm_9 = torch.ops.aten.addmm.default(arg28_1, view_42, permute_19);  arg28_1 = view_42 = permute_19 = None
        view_43 = torch.ops.aten.view.default(addmm_9, [2, 64, 1024]);  addmm_9 = None
        add_12 = torch.ops.aten.add.Tensor(add_10, view_43);  add_10 = view_43 = None
        var_mean_2 = torch.ops.aten.var_mean.correction(add_12, [2], correction = 0, keepdim = True)
        getitem_4 = var_mean_2[0]
        getitem_5 = var_mean_2[1];  var_mean_2 = None
        add_13 = torch.ops.aten.add.Tensor(getitem_4, 1e-05);  getitem_4 = None
        rsqrt_2 = torch.ops.aten.rsqrt.default(add_13);  add_13 = None
        sub_5 = torch.ops.aten.sub.Tensor(add_12, getitem_5);  add_12 = getitem_5 = None
        mul_8 = torch.ops.aten.mul.Tensor(sub_5, rsqrt_2);  sub_5 = rsqrt_2 = None
        mul_9 = torch.ops.aten.mul.Tensor(mul_8, arg29_1);  mul_8 = arg29_1 = None
        add_14 = torch.ops.aten.add.Tensor(mul_9, arg30_1);  mul_9 = arg30_1 = None
        view_44 = torch.ops.aten.view.default(add_14, [128, 1024])
        permute_20 = torch.ops.aten.permute.default(arg31_1, [1, 0]);  arg31_1 = None
        addmm_10 = torch.ops.aten.addmm.default(arg32_1, view_44, permute_20);  arg32_1 = view_44 = permute_20 = None
        view_45 = torch.ops.aten.view.default(addmm_10, [2, 64, 4096]);  addmm_10 = None
        relu_1 = torch.ops.aten.relu.default(view_45);  view_45 = None
        view_46 = torch.ops.aten.view.default(relu_1, [128, 4096]);  relu_1 = None
        permute_21 = torch.ops.aten.permute.default(arg33_1, [1, 0]);  arg33_1 = None
        addmm_11 = torch.ops.aten.addmm.default(arg34_1, view_46, permute_21);  arg34_1 = view_46 = permute_21 = None
        view_47 = torch.ops.aten.view.default(addmm_11, [2, 64, 1024]);  addmm_11 = None
        add_15 = torch.ops.aten.add.Tensor(add_14, view_47);  add_14 = view_47 = None
        var_mean_3 = torch.ops.aten.var_mean.correction(add_15, [2], correction = 0, keepdim = True)
        getitem_6 = var_mean_3[0]
        getitem_7 = var_mean_3[1];  var_mean_3 = None
        add_16 = torch.ops.aten.add.Tensor(getitem_6, 1e-05);  getitem_6 = None
        rsqrt_3 = torch.ops.aten.rsqrt.default(add_16);  add_16 = None
        sub_6 = torch.ops.aten.sub.Tensor(add_15, getitem_7);  add_15 = getitem_7 = None
        mul_10 = torch.ops.aten.mul.Tensor(sub_6, rsqrt_3);  sub_6 = rsqrt_3 = None
        mul_11 = torch.ops.aten.mul.Tensor(mul_10, arg35_1);  mul_10 = arg35_1 = None
        add_17 = torch.ops.aten.add.Tensor(mul_11, arg36_1);  mul_11 = arg36_1 = None
        view_48 = torch.ops.aten.view.default(add_17, [128, 1024])
        permute_22 = torch.ops.aten.permute.default(arg37_1, [1, 0]);  arg37_1 = None
        addmm_12 = torch.ops.aten.addmm.default(arg38_1, view_48, permute_22);  arg38_1 = view_48 = permute_22 = None
        view_49 = torch.ops.aten.view.default(addmm_12, [2, 64, 1024]);  addmm_12 = None
        mul_12 = torch.ops.aten.mul.Tensor(view_49, 0.125);  view_49 = None
        view_50 = torch.ops.aten.view.default(add_17, [128, 1024])
        permute_23 = torch.ops.aten.permute.default(arg39_1, [1, 0]);  arg39_1 = None
        addmm_13 = torch.ops.aten.addmm.default(arg40_1, view_50, permute_23);  arg40_1 = view_50 = permute_23 = None
        view_51 = torch.ops.aten.view.default(addmm_13, [2, 64, 1024]);  addmm_13 = None
        view_52 = torch.ops.aten.view.default(view_51, [2, -1, 16, 64]);  view_51 = None
        permute_24 = torch.ops.aten.permute.default(view_52, [0, 2, 1, 3]);  view_52 = None
        clone_17 = torch.ops.aten.clone.default(permute_24, memory_format = torch.contiguous_format);  permute_24 = None
        view_53 = torch.ops.aten.view.default(add_17, [128, 1024])
        permute_25 = torch.ops.aten.permute.default(arg41_1, [1, 0]);  arg41_1 = None
        addmm_14 = torch.ops.aten.addmm.default(arg42_1, view_53, permute_25);  arg42_1 = view_53 = permute_25 = None
        view_54 = torch.ops.aten.view.default(addmm_14, [2, 64, 1024]);  addmm_14 = None
        view_55 = torch.ops.aten.view.default(view_54, [2, -1, 16, 64]);  view_54 = None
        permute_26 = torch.ops.aten.permute.default(view_55, [0, 2, 1, 3]);  view_55 = None
        clone_18 = torch.ops.aten.clone.default(permute_26, memory_format = torch.contiguous_format);  permute_26 = None
        view_56 = torch.ops.aten.view.default(mul_12, [2, 64, 16, 64]);  mul_12 = None
        permute_27 = torch.ops.aten.permute.default(view_56, [0, 2, 1, 3]);  view_56 = None
        clone_19 = torch.ops.aten.clone.default(permute_27, memory_format = torch.contiguous_format);  permute_27 = None
        view_57 = torch.ops.aten.view.default(clone_19, [32, -1, 64]);  clone_19 = None
        view_58 = torch.ops.aten.view.default(clone_17, [32, -1, 64]);  clone_17 = None
        view_59 = torch.ops.aten.view.default(clone_18, [32, -1, 64]);  clone_18 = None
        permute_28 = torch.ops.aten.permute.default(view_58, [0, 2, 1]);  view_58 = None
        bmm_4 = torch.ops.aten.bmm.default(view_57, permute_28);  view_57 = permute_28 = None
        view_60 = torch.ops.aten.view.default(bmm_4, [2, 16, 64, 64]);  bmm_4 = None
        add_18 = torch.ops.aten.add.Tensor(view_60, where_2);  view_60 = None
        view_61 = torch.ops.aten.view.default(add_18, [32, 64, 64]);  add_18 = None
        amax_2 = torch.ops.aten.amax.default(view_61, [-1], True)
        sub_7 = torch.ops.aten.sub.Tensor(view_61, amax_2);  view_61 = amax_2 = None
        exp_2 = torch.ops.aten.exp.default(sub_7);  sub_7 = None
        sum_3 = torch.ops.aten.sum.dim_IntList(exp_2, [-1], True)
        div_2 = torch.ops.aten.div.Tensor(exp_2, sum_3);  exp_2 = sum_3 = None
        bmm_5 = torch.ops.aten.bmm.default(div_2, view_59);  div_2 = view_59 = None
        view_62 = torch.ops.aten.view.default(bmm_5, [2, 16, 64, 64]);  bmm_5 = None
        permute_29 = torch.ops.aten.permute.default(view_62, [0, 2, 1, 3]);  view_62 = None
        clone_21 = torch.ops.aten.clone.default(permute_29, memory_format = torch.contiguous_format);  permute_29 = None
        view_63 = torch.ops.aten.view.default(clone_21, [2, 64, 1024]);  clone_21 = None
        view_64 = torch.ops.aten.view.default(view_63, [128, 1024]);  view_63 = None
        permute_30 = torch.ops.aten.permute.default(arg43_1, [1, 0]);  arg43_1 = None
        addmm_15 = torch.ops.aten.addmm.default(arg44_1, view_64, permute_30);  arg44_1 = view_64 = permute_30 = None
        view_65 = torch.ops.aten.view.default(addmm_15, [2, 64, 1024]);  addmm_15 = None
        add_19 = torch.ops.aten.add.Tensor(add_17, view_65);  add_17 = view_65 = None
        var_mean_4 = torch.ops.aten.var_mean.correction(add_19, [2], correction = 0, keepdim = True)
        getitem_8 = var_mean_4[0]
        getitem_9 = var_mean_4[1];  var_mean_4 = None
        add_20 = torch.ops.aten.add.Tensor(getitem_8, 1e-05);  getitem_8 = None
        rsqrt_4 = torch.ops.aten.rsqrt.default(add_20);  add_20 = None
        sub_8 = torch.ops.aten.sub.Tensor(add_19, getitem_9);  add_19 = getitem_9 = None
        mul_13 = torch.ops.aten.mul.Tensor(sub_8, rsqrt_4);  sub_8 = rsqrt_4 = None
        mul_14 = torch.ops.aten.mul.Tensor(mul_13, arg45_1);  mul_13 = arg45_1 = None
        add_21 = torch.ops.aten.add.Tensor(mul_14, arg46_1);  mul_14 = arg46_1 = None
        view_66 = torch.ops.aten.view.default(add_21, [128, 1024])
        permute_31 = torch.ops.aten.permute.default(arg47_1, [1, 0]);  arg47_1 = None
        addmm_16 = torch.ops.aten.addmm.default(arg48_1, view_66, permute_31);  arg48_1 = view_66 = permute_31 = None
        view_67 = torch.ops.aten.view.default(addmm_16, [2, 64, 4096]);  addmm_16 = None
        relu_2 = torch.ops.aten.relu.default(view_67);  view_67 = None
        view_68 = torch.ops.aten.view.default(relu_2, [128, 4096]);  relu_2 = None
        permute_32 = torch.ops.aten.permute.default(arg49_1, [1, 0]);  arg49_1 = None
        addmm_17 = torch.ops.aten.addmm.default(arg50_1, view_68, permute_32);  arg50_1 = view_68 = permute_32 = None
        view_69 = torch.ops.aten.view.default(addmm_17, [2, 64, 1024]);  addmm_17 = None
        add_22 = torch.ops.aten.add.Tensor(add_21, view_69);  add_21 = view_69 = None
        var_mean_5 = torch.ops.aten.var_mean.correction(add_22, [2], correction = 0, keepdim = True)
        getitem_10 = var_mean_5[0]
        getitem_11 = var_mean_5[1];  var_mean_5 = None
        add_23 = torch.ops.aten.add.Tensor(getitem_10, 1e-05);  getitem_10 = None
        rsqrt_5 = torch.ops.aten.rsqrt.default(add_23);  add_23 = None
        sub_9 = torch.ops.aten.sub.Tensor(add_22, getitem_11);  add_22 = getitem_11 = None
        mul_15 = torch.ops.aten.mul.Tensor(sub_9, rsqrt_5);  sub_9 = rsqrt_5 = None
        mul_16 = torch.ops.aten.mul.Tensor(mul_15, arg51_1);  mul_15 = arg51_1 = None
        add_24 = torch.ops.aten.add.Tensor(mul_16, arg52_1);  mul_16 = arg52_1 = None
        view_70 = torch.ops.aten.view.default(add_24, [128, 1024])
        permute_33 = torch.ops.aten.permute.default(arg53_1, [1, 0]);  arg53_1 = None
        addmm_18 = torch.ops.aten.addmm.default(arg54_1, view_70, permute_33);  arg54_1 = view_70 = permute_33 = None
        view_71 = torch.ops.aten.view.default(addmm_18, [2, 64, 1024]);  addmm_18 = None
        mul_17 = torch.ops.aten.mul.Tensor(view_71, 0.125);  view_71 = None
        view_72 = torch.ops.aten.view.default(add_24, [128, 1024])
        permute_34 = torch.ops.aten.permute.default(arg55_1, [1, 0]);  arg55_1 = None
        addmm_19 = torch.ops.aten.addmm.default(arg56_1, view_72, permute_34);  arg56_1 = view_72 = permute_34 = None
        view_73 = torch.ops.aten.view.default(addmm_19, [2, 64, 1024]);  addmm_19 = None
        view_74 = torch.ops.aten.view.default(view_73, [2, -1, 16, 64]);  view_73 = None
        permute_35 = torch.ops.aten.permute.default(view_74, [0, 2, 1, 3]);  view_74 = None
        clone_25 = torch.ops.aten.clone.default(permute_35, memory_format = torch.contiguous_format);  permute_35 = None
        view_75 = torch.ops.aten.view.default(add_24, [128, 1024])
        permute_36 = torch.ops.aten.permute.default(arg57_1, [1, 0]);  arg57_1 = None
        addmm_20 = torch.ops.aten.addmm.default(arg58_1, view_75, permute_36);  arg58_1 = view_75 = permute_36 = None
        view_76 = torch.ops.aten.view.default(addmm_20, [2, 64, 1024]);  addmm_20 = None
        view_77 = torch.ops.aten.view.default(view_76, [2, -1, 16, 64]);  view_76 = None
        permute_37 = torch.ops.aten.permute.default(view_77, [0, 2, 1, 3]);  view_77 = None
        clone_26 = torch.ops.aten.clone.default(permute_37, memory_format = torch.contiguous_format);  permute_37 = None
        view_78 = torch.ops.aten.view.default(mul_17, [2, 64, 16, 64]);  mul_17 = None
        permute_38 = torch.ops.aten.permute.default(view_78, [0, 2, 1, 3]);  view_78 = None
        clone_27 = torch.ops.aten.clone.default(permute_38, memory_format = torch.contiguous_format);  permute_38 = None
        view_79 = torch.ops.aten.view.default(clone_27, [32, -1, 64]);  clone_27 = None
        view_80 = torch.ops.aten.view.default(clone_25, [32, -1, 64]);  clone_25 = None
        view_81 = torch.ops.aten.view.default(clone_26, [32, -1, 64]);  clone_26 = None
        permute_39 = torch.ops.aten.permute.default(view_80, [0, 2, 1]);  view_80 = None
        bmm_6 = torch.ops.aten.bmm.default(view_79, permute_39);  view_79 = permute_39 = None
        view_82 = torch.ops.aten.view.default(bmm_6, [2, 16, 64, 64]);  bmm_6 = None
        add_25 = torch.ops.aten.add.Tensor(view_82, where_2);  view_82 = None
        view_83 = torch.ops.aten.view.default(add_25, [32, 64, 64]);  add_25 = None
        amax_3 = torch.ops.aten.amax.default(view_83, [-1], True)
        sub_10 = torch.ops.aten.sub.Tensor(view_83, amax_3);  view_83 = amax_3 = None
        exp_3 = torch.ops.aten.exp.default(sub_10);  sub_10 = None
        sum_4 = torch.ops.aten.sum.dim_IntList(exp_3, [-1], True)
        div_3 = torch.ops.aten.div.Tensor(exp_3, sum_4);  exp_3 = sum_4 = None
        bmm_7 = torch.ops.aten.bmm.default(div_3, view_81);  div_3 = view_81 = None
        view_84 = torch.ops.aten.view.default(bmm_7, [2, 16, 64, 64]);  bmm_7 = None
        permute_40 = torch.ops.aten.permute.default(view_84, [0, 2, 1, 3]);  view_84 = None
        clone_29 = torch.ops.aten.clone.default(permute_40, memory_format = torch.contiguous_format);  permute_40 = None
        view_85 = torch.ops.aten.view.default(clone_29, [2, 64, 1024]);  clone_29 = None
        view_86 = torch.ops.aten.view.default(view_85, [128, 1024]);  view_85 = None
        permute_41 = torch.ops.aten.permute.default(arg59_1, [1, 0]);  arg59_1 = None
        addmm_21 = torch.ops.aten.addmm.default(arg60_1, view_86, permute_41);  arg60_1 = view_86 = permute_41 = None
        view_87 = torch.ops.aten.view.default(addmm_21, [2, 64, 1024]);  addmm_21 = None
        add_26 = torch.ops.aten.add.Tensor(add_24, view_87);  add_24 = view_87 = None
        var_mean_6 = torch.ops.aten.var_mean.correction(add_26, [2], correction = 0, keepdim = True)
        getitem_12 = var_mean_6[0]
        getitem_13 = var_mean_6[1];  var_mean_6 = None
        add_27 = torch.ops.aten.add.Tensor(getitem_12, 1e-05);  getitem_12 = None
        rsqrt_6 = torch.ops.aten.rsqrt.default(add_27);  add_27 = None
        sub_11 = torch.ops.aten.sub.Tensor(add_26, getitem_13);  add_26 = getitem_13 = None
        mul_18 = torch.ops.aten.mul.Tensor(sub_11, rsqrt_6);  sub_11 = rsqrt_6 = None
        mul_19 = torch.ops.aten.mul.Tensor(mul_18, arg61_1);  mul_18 = arg61_1 = None
        add_28 = torch.ops.aten.add.Tensor(mul_19, arg62_1);  mul_19 = arg62_1 = None
        view_88 = torch.ops.aten.view.default(add_28, [128, 1024])
        permute_42 = torch.ops.aten.permute.default(arg63_1, [1, 0]);  arg63_1 = None
        addmm_22 = torch.ops.aten.addmm.default(arg64_1, view_88, permute_42);  arg64_1 = view_88 = permute_42 = None
        view_89 = torch.ops.aten.view.default(addmm_22, [2, 64, 4096]);  addmm_22 = None
        relu_3 = torch.ops.aten.relu.default(view_89);  view_89 = None
        view_90 = torch.ops.aten.view.default(relu_3, [128, 4096]);  relu_3 = None
        permute_43 = torch.ops.aten.permute.default(arg65_1, [1, 0]);  arg65_1 = None
        addmm_23 = torch.ops.aten.addmm.default(arg66_1, view_90, permute_43);  arg66_1 = view_90 = permute_43 = None
        view_91 = torch.ops.aten.view.default(addmm_23, [2, 64, 1024]);  addmm_23 = None
        add_29 = torch.ops.aten.add.Tensor(add_28, view_91);  add_28 = view_91 = None
        var_mean_7 = torch.ops.aten.var_mean.correction(add_29, [2], correction = 0, keepdim = True)
        getitem_14 = var_mean_7[0]
        getitem_15 = var_mean_7[1];  var_mean_7 = None
        add_30 = torch.ops.aten.add.Tensor(getitem_14, 1e-05);  getitem_14 = None
        rsqrt_7 = torch.ops.aten.rsqrt.default(add_30);  add_30 = None
        sub_12 = torch.ops.aten.sub.Tensor(add_29, getitem_15);  add_29 = getitem_15 = None
        mul_20 = torch.ops.aten.mul.Tensor(sub_12, rsqrt_7);  sub_12 = rsqrt_7 = None
        mul_21 = torch.ops.aten.mul.Tensor(mul_20, arg67_1);  mul_20 = arg67_1 = None
        add_31 = torch.ops.aten.add.Tensor(mul_21, arg68_1);  mul_21 = arg68_1 = None
        view_92 = torch.ops.aten.view.default(add_31, [128, 1024])
        permute_44 = torch.ops.aten.permute.default(arg69_1, [1, 0]);  arg69_1 = None
        addmm_24 = torch.ops.aten.addmm.default(arg70_1, view_92, permute_44);  arg70_1 = view_92 = permute_44 = None
        view_93 = torch.ops.aten.view.default(addmm_24, [2, 64, 1024]);  addmm_24 = None
        mul_22 = torch.ops.aten.mul.Tensor(view_93, 0.125);  view_93 = None
        view_94 = torch.ops.aten.view.default(add_31, [128, 1024])
        permute_45 = torch.ops.aten.permute.default(arg71_1, [1, 0]);  arg71_1 = None
        addmm_25 = torch.ops.aten.addmm.default(arg72_1, view_94, permute_45);  arg72_1 = view_94 = permute_45 = None
        view_95 = torch.ops.aten.view.default(addmm_25, [2, 64, 1024]);  addmm_25 = None
        view_96 = torch.ops.aten.view.default(view_95, [2, -1, 16, 64]);  view_95 = None
        permute_46 = torch.ops.aten.permute.default(view_96, [0, 2, 1, 3]);  view_96 = None
        clone_33 = torch.ops.aten.clone.default(permute_46, memory_format = torch.contiguous_format);  permute_46 = None
        view_97 = torch.ops.aten.view.default(add_31, [128, 1024])
        permute_47 = torch.ops.aten.permute.default(arg73_1, [1, 0]);  arg73_1 = None
        addmm_26 = torch.ops.aten.addmm.default(arg74_1, view_97, permute_47);  arg74_1 = view_97 = permute_47 = None
        view_98 = torch.ops.aten.view.default(addmm_26, [2, 64, 1024]);  addmm_26 = None
        view_99 = torch.ops.aten.view.default(view_98, [2, -1, 16, 64]);  view_98 = None
        permute_48 = torch.ops.aten.permute.default(view_99, [0, 2, 1, 3]);  view_99 = None
        clone_34 = torch.ops.aten.clone.default(permute_48, memory_format = torch.contiguous_format);  permute_48 = None
        view_100 = torch.ops.aten.view.default(mul_22, [2, 64, 16, 64]);  mul_22 = None
        permute_49 = torch.ops.aten.permute.default(view_100, [0, 2, 1, 3]);  view_100 = None
        clone_35 = torch.ops.aten.clone.default(permute_49, memory_format = torch.contiguous_format);  permute_49 = None
        view_101 = torch.ops.aten.view.default(clone_35, [32, -1, 64]);  clone_35 = None
        view_102 = torch.ops.aten.view.default(clone_33, [32, -1, 64]);  clone_33 = None
        view_103 = torch.ops.aten.view.default(clone_34, [32, -1, 64]);  clone_34 = None
        permute_50 = torch.ops.aten.permute.default(view_102, [0, 2, 1]);  view_102 = None
        bmm_8 = torch.ops.aten.bmm.default(view_101, permute_50);  view_101 = permute_50 = None
        view_104 = torch.ops.aten.view.default(bmm_8, [2, 16, 64, 64]);  bmm_8 = None
        add_32 = torch.ops.aten.add.Tensor(view_104, where_2);  view_104 = None
        view_105 = torch.ops.aten.view.default(add_32, [32, 64, 64]);  add_32 = None
        amax_4 = torch.ops.aten.amax.default(view_105, [-1], True)
        sub_13 = torch.ops.aten.sub.Tensor(view_105, amax_4);  view_105 = amax_4 = None
        exp_4 = torch.ops.aten.exp.default(sub_13);  sub_13 = None
        sum_5 = torch.ops.aten.sum.dim_IntList(exp_4, [-1], True)
        div_4 = torch.ops.aten.div.Tensor(exp_4, sum_5);  exp_4 = sum_5 = None
        bmm_9 = torch.ops.aten.bmm.default(div_4, view_103);  div_4 = view_103 = None
        view_106 = torch.ops.aten.view.default(bmm_9, [2, 16, 64, 64]);  bmm_9 = None
        permute_51 = torch.ops.aten.permute.default(view_106, [0, 2, 1, 3]);  view_106 = None
        clone_37 = torch.ops.aten.clone.default(permute_51, memory_format = torch.contiguous_format);  permute_51 = None
        view_107 = torch.ops.aten.view.default(clone_37, [2, 64, 1024]);  clone_37 = None
        view_108 = torch.ops.aten.view.default(view_107, [128, 1024]);  view_107 = None
        permute_52 = torch.ops.aten.permute.default(arg75_1, [1, 0]);  arg75_1 = None
        addmm_27 = torch.ops.aten.addmm.default(arg76_1, view_108, permute_52);  arg76_1 = view_108 = permute_52 = None
        view_109 = torch.ops.aten.view.default(addmm_27, [2, 64, 1024]);  addmm_27 = None
        add_33 = torch.ops.aten.add.Tensor(add_31, view_109);  add_31 = view_109 = None
        var_mean_8 = torch.ops.aten.var_mean.correction(add_33, [2], correction = 0, keepdim = True)
        getitem_16 = var_mean_8[0]
        getitem_17 = var_mean_8[1];  var_mean_8 = None
        add_34 = torch.ops.aten.add.Tensor(getitem_16, 1e-05);  getitem_16 = None
        rsqrt_8 = torch.ops.aten.rsqrt.default(add_34);  add_34 = None
        sub_14 = torch.ops.aten.sub.Tensor(add_33, getitem_17);  add_33 = getitem_17 = None
        mul_23 = torch.ops.aten.mul.Tensor(sub_14, rsqrt_8);  sub_14 = rsqrt_8 = None
        mul_24 = torch.ops.aten.mul.Tensor(mul_23, arg77_1);  mul_23 = arg77_1 = None
        add_35 = torch.ops.aten.add.Tensor(mul_24, arg78_1);  mul_24 = arg78_1 = None
        view_110 = torch.ops.aten.view.default(add_35, [128, 1024])
        permute_53 = torch.ops.aten.permute.default(arg79_1, [1, 0]);  arg79_1 = None
        addmm_28 = torch.ops.aten.addmm.default(arg80_1, view_110, permute_53);  arg80_1 = view_110 = permute_53 = None
        view_111 = torch.ops.aten.view.default(addmm_28, [2, 64, 4096]);  addmm_28 = None
        relu_4 = torch.ops.aten.relu.default(view_111);  view_111 = None
        view_112 = torch.ops.aten.view.default(relu_4, [128, 4096]);  relu_4 = None
        permute_54 = torch.ops.aten.permute.default(arg81_1, [1, 0]);  arg81_1 = None
        addmm_29 = torch.ops.aten.addmm.default(arg82_1, view_112, permute_54);  arg82_1 = view_112 = permute_54 = None
        view_113 = torch.ops.aten.view.default(addmm_29, [2, 64, 1024]);  addmm_29 = None
        add_36 = torch.ops.aten.add.Tensor(add_35, view_113);  add_35 = view_113 = None
        var_mean_9 = torch.ops.aten.var_mean.correction(add_36, [2], correction = 0, keepdim = True)
        getitem_18 = var_mean_9[0]
        getitem_19 = var_mean_9[1];  var_mean_9 = None
        add_37 = torch.ops.aten.add.Tensor(getitem_18, 1e-05);  getitem_18 = None
        rsqrt_9 = torch.ops.aten.rsqrt.default(add_37);  add_37 = None
        sub_15 = torch.ops.aten.sub.Tensor(add_36, getitem_19);  add_36 = getitem_19 = None
        mul_25 = torch.ops.aten.mul.Tensor(sub_15, rsqrt_9);  sub_15 = rsqrt_9 = None
        mul_26 = torch.ops.aten.mul.Tensor(mul_25, arg83_1);  mul_25 = arg83_1 = None
        add_38 = torch.ops.aten.add.Tensor(mul_26, arg84_1);  mul_26 = arg84_1 = None
        view_114 = torch.ops.aten.view.default(add_38, [128, 1024])
        permute_55 = torch.ops.aten.permute.default(arg85_1, [1, 0]);  arg85_1 = None
        addmm_30 = torch.ops.aten.addmm.default(arg86_1, view_114, permute_55);  arg86_1 = view_114 = permute_55 = None
        view_115 = torch.ops.aten.view.default(addmm_30, [2, 64, 1024]);  addmm_30 = None
        mul_27 = torch.ops.aten.mul.Tensor(view_115, 0.125);  view_115 = None
        view_116 = torch.ops.aten.view.default(add_38, [128, 1024])
        permute_56 = torch.ops.aten.permute.default(arg87_1, [1, 0]);  arg87_1 = None
        addmm_31 = torch.ops.aten.addmm.default(arg88_1, view_116, permute_56);  arg88_1 = view_116 = permute_56 = None
        view_117 = torch.ops.aten.view.default(addmm_31, [2, 64, 1024]);  addmm_31 = None
        view_118 = torch.ops.aten.view.default(view_117, [2, -1, 16, 64]);  view_117 = None
        permute_57 = torch.ops.aten.permute.default(view_118, [0, 2, 1, 3]);  view_118 = None
        clone_41 = torch.ops.aten.clone.default(permute_57, memory_format = torch.contiguous_format);  permute_57 = None
        view_119 = torch.ops.aten.view.default(add_38, [128, 1024])
        permute_58 = torch.ops.aten.permute.default(arg89_1, [1, 0]);  arg89_1 = None
        addmm_32 = torch.ops.aten.addmm.default(arg90_1, view_119, permute_58);  arg90_1 = view_119 = permute_58 = None
        view_120 = torch.ops.aten.view.default(addmm_32, [2, 64, 1024]);  addmm_32 = None
        view_121 = torch.ops.aten.view.default(view_120, [2, -1, 16, 64]);  view_120 = None
        permute_59 = torch.ops.aten.permute.default(view_121, [0, 2, 1, 3]);  view_121 = None
        clone_42 = torch.ops.aten.clone.default(permute_59, memory_format = torch.contiguous_format);  permute_59 = None
        view_122 = torch.ops.aten.view.default(mul_27, [2, 64, 16, 64]);  mul_27 = None
        permute_60 = torch.ops.aten.permute.default(view_122, [0, 2, 1, 3]);  view_122 = None
        clone_43 = torch.ops.aten.clone.default(permute_60, memory_format = torch.contiguous_format);  permute_60 = None
        view_123 = torch.ops.aten.view.default(clone_43, [32, -1, 64]);  clone_43 = None
        view_124 = torch.ops.aten.view.default(clone_41, [32, -1, 64]);  clone_41 = None
        view_125 = torch.ops.aten.view.default(clone_42, [32, -1, 64]);  clone_42 = None
        permute_61 = torch.ops.aten.permute.default(view_124, [0, 2, 1]);  view_124 = None
        bmm_10 = torch.ops.aten.bmm.default(view_123, permute_61);  view_123 = permute_61 = None
        view_126 = torch.ops.aten.view.default(bmm_10, [2, 16, 64, 64]);  bmm_10 = None
        add_39 = torch.ops.aten.add.Tensor(view_126, where_2);  view_126 = None
        view_127 = torch.ops.aten.view.default(add_39, [32, 64, 64]);  add_39 = None
        amax_5 = torch.ops.aten.amax.default(view_127, [-1], True)
        sub_16 = torch.ops.aten.sub.Tensor(view_127, amax_5);  view_127 = amax_5 = None
        exp_5 = torch.ops.aten.exp.default(sub_16);  sub_16 = None
        sum_6 = torch.ops.aten.sum.dim_IntList(exp_5, [-1], True)
        div_5 = torch.ops.aten.div.Tensor(exp_5, sum_6);  exp_5 = sum_6 = None
        bmm_11 = torch.ops.aten.bmm.default(div_5, view_125);  div_5 = view_125 = None
        view_128 = torch.ops.aten.view.default(bmm_11, [2, 16, 64, 64]);  bmm_11 = None
        permute_62 = torch.ops.aten.permute.default(view_128, [0, 2, 1, 3]);  view_128 = None
        clone_45 = torch.ops.aten.clone.default(permute_62, memory_format = torch.contiguous_format);  permute_62 = None
        view_129 = torch.ops.aten.view.default(clone_45, [2, 64, 1024]);  clone_45 = None
        view_130 = torch.ops.aten.view.default(view_129, [128, 1024]);  view_129 = None
        permute_63 = torch.ops.aten.permute.default(arg91_1, [1, 0]);  arg91_1 = None
        addmm_33 = torch.ops.aten.addmm.default(arg92_1, view_130, permute_63);  arg92_1 = view_130 = permute_63 = None
        view_131 = torch.ops.aten.view.default(addmm_33, [2, 64, 1024]);  addmm_33 = None
        add_40 = torch.ops.aten.add.Tensor(add_38, view_131);  add_38 = view_131 = None
        var_mean_10 = torch.ops.aten.var_mean.correction(add_40, [2], correction = 0, keepdim = True)
        getitem_20 = var_mean_10[0]
        getitem_21 = var_mean_10[1];  var_mean_10 = None
        add_41 = torch.ops.aten.add.Tensor(getitem_20, 1e-05);  getitem_20 = None
        rsqrt_10 = torch.ops.aten.rsqrt.default(add_41);  add_41 = None
        sub_17 = torch.ops.aten.sub.Tensor(add_40, getitem_21);  add_40 = getitem_21 = None
        mul_28 = torch.ops.aten.mul.Tensor(sub_17, rsqrt_10);  sub_17 = rsqrt_10 = None
        mul_29 = torch.ops.aten.mul.Tensor(mul_28, arg93_1);  mul_28 = arg93_1 = None
        add_42 = torch.ops.aten.add.Tensor(mul_29, arg94_1);  mul_29 = arg94_1 = None
        view_132 = torch.ops.aten.view.default(add_42, [128, 1024])
        permute_64 = torch.ops.aten.permute.default(arg95_1, [1, 0]);  arg95_1 = None
        addmm_34 = torch.ops.aten.addmm.default(arg96_1, view_132, permute_64);  arg96_1 = view_132 = permute_64 = None
        view_133 = torch.ops.aten.view.default(addmm_34, [2, 64, 4096]);  addmm_34 = None
        relu_5 = torch.ops.aten.relu.default(view_133);  view_133 = None
        view_134 = torch.ops.aten.view.default(relu_5, [128, 4096]);  relu_5 = None
        permute_65 = torch.ops.aten.permute.default(arg97_1, [1, 0]);  arg97_1 = None
        addmm_35 = torch.ops.aten.addmm.default(arg98_1, view_134, permute_65);  arg98_1 = view_134 = permute_65 = None
        view_135 = torch.ops.aten.view.default(addmm_35, [2, 64, 1024]);  addmm_35 = None
        add_43 = torch.ops.aten.add.Tensor(add_42, view_135);  add_42 = view_135 = None
        var_mean_11 = torch.ops.aten.var_mean.correction(add_43, [2], correction = 0, keepdim = True)
        getitem_22 = var_mean_11[0]
        getitem_23 = var_mean_11[1];  var_mean_11 = None
        add_44 = torch.ops.aten.add.Tensor(getitem_22, 1e-05);  getitem_22 = None
        rsqrt_11 = torch.ops.aten.rsqrt.default(add_44);  add_44 = None
        sub_18 = torch.ops.aten.sub.Tensor(add_43, getitem_23);  add_43 = getitem_23 = None
        mul_30 = torch.ops.aten.mul.Tensor(sub_18, rsqrt_11);  sub_18 = rsqrt_11 = None
        mul_31 = torch.ops.aten.mul.Tensor(mul_30, arg99_1);  mul_30 = arg99_1 = None
        add_45 = torch.ops.aten.add.Tensor(mul_31, arg100_1);  mul_31 = arg100_1 = None
        view_136 = torch.ops.aten.view.default(add_45, [128, 1024])
        permute_66 = torch.ops.aten.permute.default(arg101_1, [1, 0]);  arg101_1 = None
        addmm_36 = torch.ops.aten.addmm.default(arg102_1, view_136, permute_66);  arg102_1 = view_136 = permute_66 = None
        view_137 = torch.ops.aten.view.default(addmm_36, [2, 64, 1024]);  addmm_36 = None
        mul_32 = torch.ops.aten.mul.Tensor(view_137, 0.125);  view_137 = None
        view_138 = torch.ops.aten.view.default(add_45, [128, 1024])
        permute_67 = torch.ops.aten.permute.default(arg103_1, [1, 0]);  arg103_1 = None
        addmm_37 = torch.ops.aten.addmm.default(arg104_1, view_138, permute_67);  arg104_1 = view_138 = permute_67 = None
        view_139 = torch.ops.aten.view.default(addmm_37, [2, 64, 1024]);  addmm_37 = None
        view_140 = torch.ops.aten.view.default(view_139, [2, -1, 16, 64]);  view_139 = None
        permute_68 = torch.ops.aten.permute.default(view_140, [0, 2, 1, 3]);  view_140 = None
        clone_49 = torch.ops.aten.clone.default(permute_68, memory_format = torch.contiguous_format);  permute_68 = None
        view_141 = torch.ops.aten.view.default(add_45, [128, 1024])
        permute_69 = torch.ops.aten.permute.default(arg105_1, [1, 0]);  arg105_1 = None
        addmm_38 = torch.ops.aten.addmm.default(arg106_1, view_141, permute_69);  arg106_1 = view_141 = permute_69 = None
        view_142 = torch.ops.aten.view.default(addmm_38, [2, 64, 1024]);  addmm_38 = None
        view_143 = torch.ops.aten.view.default(view_142, [2, -1, 16, 64]);  view_142 = None
        permute_70 = torch.ops.aten.permute.default(view_143, [0, 2, 1, 3]);  view_143 = None
        clone_50 = torch.ops.aten.clone.default(permute_70, memory_format = torch.contiguous_format);  permute_70 = None
        view_144 = torch.ops.aten.view.default(mul_32, [2, 64, 16, 64]);  mul_32 = None
        permute_71 = torch.ops.aten.permute.default(view_144, [0, 2, 1, 3]);  view_144 = None
        clone_51 = torch.ops.aten.clone.default(permute_71, memory_format = torch.contiguous_format);  permute_71 = None
        view_145 = torch.ops.aten.view.default(clone_51, [32, -1, 64]);  clone_51 = None
        view_146 = torch.ops.aten.view.default(clone_49, [32, -1, 64]);  clone_49 = None
        view_147 = torch.ops.aten.view.default(clone_50, [32, -1, 64]);  clone_50 = None
        permute_72 = torch.ops.aten.permute.default(view_146, [0, 2, 1]);  view_146 = None
        bmm_12 = torch.ops.aten.bmm.default(view_145, permute_72);  view_145 = permute_72 = None
        view_148 = torch.ops.aten.view.default(bmm_12, [2, 16, 64, 64]);  bmm_12 = None
        add_46 = torch.ops.aten.add.Tensor(view_148, where_2);  view_148 = None
        view_149 = torch.ops.aten.view.default(add_46, [32, 64, 64]);  add_46 = None
        amax_6 = torch.ops.aten.amax.default(view_149, [-1], True)
        sub_19 = torch.ops.aten.sub.Tensor(view_149, amax_6);  view_149 = amax_6 = None
        exp_6 = torch.ops.aten.exp.default(sub_19);  sub_19 = None
        sum_7 = torch.ops.aten.sum.dim_IntList(exp_6, [-1], True)
        div_6 = torch.ops.aten.div.Tensor(exp_6, sum_7);  exp_6 = sum_7 = None
        bmm_13 = torch.ops.aten.bmm.default(div_6, view_147);  div_6 = view_147 = None
        view_150 = torch.ops.aten.view.default(bmm_13, [2, 16, 64, 64]);  bmm_13 = None
        permute_73 = torch.ops.aten.permute.default(view_150, [0, 2, 1, 3]);  view_150 = None
        clone_53 = torch.ops.aten.clone.default(permute_73, memory_format = torch.contiguous_format);  permute_73 = None
        view_151 = torch.ops.aten.view.default(clone_53, [2, 64, 1024]);  clone_53 = None
        view_152 = torch.ops.aten.view.default(view_151, [128, 1024]);  view_151 = None
        permute_74 = torch.ops.aten.permute.default(arg107_1, [1, 0]);  arg107_1 = None
        addmm_39 = torch.ops.aten.addmm.default(arg108_1, view_152, permute_74);  arg108_1 = view_152 = permute_74 = None
        view_153 = torch.ops.aten.view.default(addmm_39, [2, 64, 1024]);  addmm_39 = None
        add_47 = torch.ops.aten.add.Tensor(add_45, view_153);  add_45 = view_153 = None
        var_mean_12 = torch.ops.aten.var_mean.correction(add_47, [2], correction = 0, keepdim = True)
        getitem_24 = var_mean_12[0]
        getitem_25 = var_mean_12[1];  var_mean_12 = None
        add_48 = torch.ops.aten.add.Tensor(getitem_24, 1e-05);  getitem_24 = None
        rsqrt_12 = torch.ops.aten.rsqrt.default(add_48);  add_48 = None
        sub_20 = torch.ops.aten.sub.Tensor(add_47, getitem_25);  add_47 = getitem_25 = None
        mul_33 = torch.ops.aten.mul.Tensor(sub_20, rsqrt_12);  sub_20 = rsqrt_12 = None
        mul_34 = torch.ops.aten.mul.Tensor(mul_33, arg109_1);  mul_33 = arg109_1 = None
        add_49 = torch.ops.aten.add.Tensor(mul_34, arg110_1);  mul_34 = arg110_1 = None
        view_154 = torch.ops.aten.view.default(add_49, [128, 1024])
        permute_75 = torch.ops.aten.permute.default(arg111_1, [1, 0]);  arg111_1 = None
        addmm_40 = torch.ops.aten.addmm.default(arg112_1, view_154, permute_75);  arg112_1 = view_154 = permute_75 = None
        view_155 = torch.ops.aten.view.default(addmm_40, [2, 64, 4096]);  addmm_40 = None
        relu_6 = torch.ops.aten.relu.default(view_155);  view_155 = None
        view_156 = torch.ops.aten.view.default(relu_6, [128, 4096]);  relu_6 = None
        permute_76 = torch.ops.aten.permute.default(arg113_1, [1, 0]);  arg113_1 = None
        addmm_41 = torch.ops.aten.addmm.default(arg114_1, view_156, permute_76);  arg114_1 = view_156 = permute_76 = None
        view_157 = torch.ops.aten.view.default(addmm_41, [2, 64, 1024]);  addmm_41 = None
        add_50 = torch.ops.aten.add.Tensor(add_49, view_157);  add_49 = view_157 = None
        var_mean_13 = torch.ops.aten.var_mean.correction(add_50, [2], correction = 0, keepdim = True)
        getitem_26 = var_mean_13[0]
        getitem_27 = var_mean_13[1];  var_mean_13 = None
        add_51 = torch.ops.aten.add.Tensor(getitem_26, 1e-05);  getitem_26 = None
        rsqrt_13 = torch.ops.aten.rsqrt.default(add_51);  add_51 = None
        sub_21 = torch.ops.aten.sub.Tensor(add_50, getitem_27);  add_50 = getitem_27 = None
        mul_35 = torch.ops.aten.mul.Tensor(sub_21, rsqrt_13);  sub_21 = rsqrt_13 = None
        mul_36 = torch.ops.aten.mul.Tensor(mul_35, arg115_1);  mul_35 = arg115_1 = None
        add_52 = torch.ops.aten.add.Tensor(mul_36, arg116_1);  mul_36 = arg116_1 = None
        view_158 = torch.ops.aten.view.default(add_52, [128, 1024])
        permute_77 = torch.ops.aten.permute.default(arg117_1, [1, 0]);  arg117_1 = None
        addmm_42 = torch.ops.aten.addmm.default(arg118_1, view_158, permute_77);  arg118_1 = view_158 = permute_77 = None
        view_159 = torch.ops.aten.view.default(addmm_42, [2, 64, 1024]);  addmm_42 = None
        mul_37 = torch.ops.aten.mul.Tensor(view_159, 0.125);  view_159 = None
        view_160 = torch.ops.aten.view.default(add_52, [128, 1024])
        permute_78 = torch.ops.aten.permute.default(arg119_1, [1, 0]);  arg119_1 = None
        addmm_43 = torch.ops.aten.addmm.default(arg120_1, view_160, permute_78);  arg120_1 = view_160 = permute_78 = None
        view_161 = torch.ops.aten.view.default(addmm_43, [2, 64, 1024]);  addmm_43 = None
        view_162 = torch.ops.aten.view.default(view_161, [2, -1, 16, 64]);  view_161 = None
        permute_79 = torch.ops.aten.permute.default(view_162, [0, 2, 1, 3]);  view_162 = None
        clone_57 = torch.ops.aten.clone.default(permute_79, memory_format = torch.contiguous_format);  permute_79 = None
        view_163 = torch.ops.aten.view.default(add_52, [128, 1024])
        permute_80 = torch.ops.aten.permute.default(arg121_1, [1, 0]);  arg121_1 = None
        addmm_44 = torch.ops.aten.addmm.default(arg122_1, view_163, permute_80);  arg122_1 = view_163 = permute_80 = None
        view_164 = torch.ops.aten.view.default(addmm_44, [2, 64, 1024]);  addmm_44 = None
        view_165 = torch.ops.aten.view.default(view_164, [2, -1, 16, 64]);  view_164 = None
        permute_81 = torch.ops.aten.permute.default(view_165, [0, 2, 1, 3]);  view_165 = None
        clone_58 = torch.ops.aten.clone.default(permute_81, memory_format = torch.contiguous_format);  permute_81 = None
        view_166 = torch.ops.aten.view.default(mul_37, [2, 64, 16, 64]);  mul_37 = None
        permute_82 = torch.ops.aten.permute.default(view_166, [0, 2, 1, 3]);  view_166 = None
        clone_59 = torch.ops.aten.clone.default(permute_82, memory_format = torch.contiguous_format);  permute_82 = None
        view_167 = torch.ops.aten.view.default(clone_59, [32, -1, 64]);  clone_59 = None
        view_168 = torch.ops.aten.view.default(clone_57, [32, -1, 64]);  clone_57 = None
        view_169 = torch.ops.aten.view.default(clone_58, [32, -1, 64]);  clone_58 = None
        permute_83 = torch.ops.aten.permute.default(view_168, [0, 2, 1]);  view_168 = None
        bmm_14 = torch.ops.aten.bmm.default(view_167, permute_83);  view_167 = permute_83 = None
        view_170 = torch.ops.aten.view.default(bmm_14, [2, 16, 64, 64]);  bmm_14 = None
        add_53 = torch.ops.aten.add.Tensor(view_170, where_2);  view_170 = None
        view_171 = torch.ops.aten.view.default(add_53, [32, 64, 64]);  add_53 = None
        amax_7 = torch.ops.aten.amax.default(view_171, [-1], True)
        sub_22 = torch.ops.aten.sub.Tensor(view_171, amax_7);  view_171 = amax_7 = None
        exp_7 = torch.ops.aten.exp.default(sub_22);  sub_22 = None
        sum_8 = torch.ops.aten.sum.dim_IntList(exp_7, [-1], True)
        div_7 = torch.ops.aten.div.Tensor(exp_7, sum_8);  exp_7 = sum_8 = None
        bmm_15 = torch.ops.aten.bmm.default(div_7, view_169);  div_7 = view_169 = None
        view_172 = torch.ops.aten.view.default(bmm_15, [2, 16, 64, 64]);  bmm_15 = None
        permute_84 = torch.ops.aten.permute.default(view_172, [0, 2, 1, 3]);  view_172 = None
        clone_61 = torch.ops.aten.clone.default(permute_84, memory_format = torch.contiguous_format);  permute_84 = None
        view_173 = torch.ops.aten.view.default(clone_61, [2, 64, 1024]);  clone_61 = None
        view_174 = torch.ops.aten.view.default(view_173, [128, 1024]);  view_173 = None
        permute_85 = torch.ops.aten.permute.default(arg123_1, [1, 0]);  arg123_1 = None
        addmm_45 = torch.ops.aten.addmm.default(arg124_1, view_174, permute_85);  arg124_1 = view_174 = permute_85 = None
        view_175 = torch.ops.aten.view.default(addmm_45, [2, 64, 1024]);  addmm_45 = None
        add_54 = torch.ops.aten.add.Tensor(add_52, view_175);  add_52 = view_175 = None
        var_mean_14 = torch.ops.aten.var_mean.correction(add_54, [2], correction = 0, keepdim = True)
        getitem_28 = var_mean_14[0]
        getitem_29 = var_mean_14[1];  var_mean_14 = None
        add_55 = torch.ops.aten.add.Tensor(getitem_28, 1e-05);  getitem_28 = None
        rsqrt_14 = torch.ops.aten.rsqrt.default(add_55);  add_55 = None
        sub_23 = torch.ops.aten.sub.Tensor(add_54, getitem_29);  add_54 = getitem_29 = None
        mul_38 = torch.ops.aten.mul.Tensor(sub_23, rsqrt_14);  sub_23 = rsqrt_14 = None
        mul_39 = torch.ops.aten.mul.Tensor(mul_38, arg125_1);  mul_38 = arg125_1 = None
        add_56 = torch.ops.aten.add.Tensor(mul_39, arg126_1);  mul_39 = arg126_1 = None
        view_176 = torch.ops.aten.view.default(add_56, [128, 1024])
        permute_86 = torch.ops.aten.permute.default(arg127_1, [1, 0]);  arg127_1 = None
        addmm_46 = torch.ops.aten.addmm.default(arg128_1, view_176, permute_86);  arg128_1 = view_176 = permute_86 = None
        view_177 = torch.ops.aten.view.default(addmm_46, [2, 64, 4096]);  addmm_46 = None
        relu_7 = torch.ops.aten.relu.default(view_177);  view_177 = None
        view_178 = torch.ops.aten.view.default(relu_7, [128, 4096]);  relu_7 = None
        permute_87 = torch.ops.aten.permute.default(arg129_1, [1, 0]);  arg129_1 = None
        addmm_47 = torch.ops.aten.addmm.default(arg130_1, view_178, permute_87);  arg130_1 = view_178 = permute_87 = None
        view_179 = torch.ops.aten.view.default(addmm_47, [2, 64, 1024]);  addmm_47 = None
        add_57 = torch.ops.aten.add.Tensor(add_56, view_179);  add_56 = view_179 = None
        var_mean_15 = torch.ops.aten.var_mean.correction(add_57, [2], correction = 0, keepdim = True)
        getitem_30 = var_mean_15[0]
        getitem_31 = var_mean_15[1];  var_mean_15 = None
        add_58 = torch.ops.aten.add.Tensor(getitem_30, 1e-05);  getitem_30 = None
        rsqrt_15 = torch.ops.aten.rsqrt.default(add_58);  add_58 = None
        sub_24 = torch.ops.aten.sub.Tensor(add_57, getitem_31);  add_57 = getitem_31 = None
        mul_40 = torch.ops.aten.mul.Tensor(sub_24, rsqrt_15);  sub_24 = rsqrt_15 = None
        mul_41 = torch.ops.aten.mul.Tensor(mul_40, arg131_1);  mul_40 = arg131_1 = None
        add_59 = torch.ops.aten.add.Tensor(mul_41, arg132_1);  mul_41 = arg132_1 = None
        view_180 = torch.ops.aten.view.default(add_59, [128, 1024])
        permute_88 = torch.ops.aten.permute.default(arg133_1, [1, 0]);  arg133_1 = None
        addmm_48 = torch.ops.aten.addmm.default(arg134_1, view_180, permute_88);  arg134_1 = view_180 = permute_88 = None
        view_181 = torch.ops.aten.view.default(addmm_48, [2, 64, 1024]);  addmm_48 = None
        mul_42 = torch.ops.aten.mul.Tensor(view_181, 0.125);  view_181 = None
        view_182 = torch.ops.aten.view.default(add_59, [128, 1024])
        permute_89 = torch.ops.aten.permute.default(arg135_1, [1, 0]);  arg135_1 = None
        addmm_49 = torch.ops.aten.addmm.default(arg136_1, view_182, permute_89);  arg136_1 = view_182 = permute_89 = None
        view_183 = torch.ops.aten.view.default(addmm_49, [2, 64, 1024]);  addmm_49 = None
        view_184 = torch.ops.aten.view.default(view_183, [2, -1, 16, 64]);  view_183 = None
        permute_90 = torch.ops.aten.permute.default(view_184, [0, 2, 1, 3]);  view_184 = None
        clone_65 = torch.ops.aten.clone.default(permute_90, memory_format = torch.contiguous_format);  permute_90 = None
        view_185 = torch.ops.aten.view.default(add_59, [128, 1024])
        permute_91 = torch.ops.aten.permute.default(arg137_1, [1, 0]);  arg137_1 = None
        addmm_50 = torch.ops.aten.addmm.default(arg138_1, view_185, permute_91);  arg138_1 = view_185 = permute_91 = None
        view_186 = torch.ops.aten.view.default(addmm_50, [2, 64, 1024]);  addmm_50 = None
        view_187 = torch.ops.aten.view.default(view_186, [2, -1, 16, 64]);  view_186 = None
        permute_92 = torch.ops.aten.permute.default(view_187, [0, 2, 1, 3]);  view_187 = None
        clone_66 = torch.ops.aten.clone.default(permute_92, memory_format = torch.contiguous_format);  permute_92 = None
        view_188 = torch.ops.aten.view.default(mul_42, [2, 64, 16, 64]);  mul_42 = None
        permute_93 = torch.ops.aten.permute.default(view_188, [0, 2, 1, 3]);  view_188 = None
        clone_67 = torch.ops.aten.clone.default(permute_93, memory_format = torch.contiguous_format);  permute_93 = None
        view_189 = torch.ops.aten.view.default(clone_67, [32, -1, 64]);  clone_67 = None
        view_190 = torch.ops.aten.view.default(clone_65, [32, -1, 64]);  clone_65 = None
        view_191 = torch.ops.aten.view.default(clone_66, [32, -1, 64]);  clone_66 = None
        permute_94 = torch.ops.aten.permute.default(view_190, [0, 2, 1]);  view_190 = None
        bmm_16 = torch.ops.aten.bmm.default(view_189, permute_94);  view_189 = permute_94 = None
        view_192 = torch.ops.aten.view.default(bmm_16, [2, 16, 64, 64]);  bmm_16 = None
        add_60 = torch.ops.aten.add.Tensor(view_192, where_2);  view_192 = None
        view_193 = torch.ops.aten.view.default(add_60, [32, 64, 64]);  add_60 = None
        amax_8 = torch.ops.aten.amax.default(view_193, [-1], True)
        sub_25 = torch.ops.aten.sub.Tensor(view_193, amax_8);  view_193 = amax_8 = None
        exp_8 = torch.ops.aten.exp.default(sub_25);  sub_25 = None
        sum_9 = torch.ops.aten.sum.dim_IntList(exp_8, [-1], True)
        div_8 = torch.ops.aten.div.Tensor(exp_8, sum_9);  exp_8 = sum_9 = None
        bmm_17 = torch.ops.aten.bmm.default(div_8, view_191);  div_8 = view_191 = None
        view_194 = torch.ops.aten.view.default(bmm_17, [2, 16, 64, 64]);  bmm_17 = None
        permute_95 = torch.ops.aten.permute.default(view_194, [0, 2, 1, 3]);  view_194 = None
        clone_69 = torch.ops.aten.clone.default(permute_95, memory_format = torch.contiguous_format);  permute_95 = None
        view_195 = torch.ops.aten.view.default(clone_69, [2, 64, 1024]);  clone_69 = None
        view_196 = torch.ops.aten.view.default(view_195, [128, 1024]);  view_195 = None
        permute_96 = torch.ops.aten.permute.default(arg139_1, [1, 0]);  arg139_1 = None
        addmm_51 = torch.ops.aten.addmm.default(arg140_1, view_196, permute_96);  arg140_1 = view_196 = permute_96 = None
        view_197 = torch.ops.aten.view.default(addmm_51, [2, 64, 1024]);  addmm_51 = None
        add_61 = torch.ops.aten.add.Tensor(add_59, view_197);  add_59 = view_197 = None
        var_mean_16 = torch.ops.aten.var_mean.correction(add_61, [2], correction = 0, keepdim = True)
        getitem_32 = var_mean_16[0]
        getitem_33 = var_mean_16[1];  var_mean_16 = None
        add_62 = torch.ops.aten.add.Tensor(getitem_32, 1e-05);  getitem_32 = None
        rsqrt_16 = torch.ops.aten.rsqrt.default(add_62);  add_62 = None
        sub_26 = torch.ops.aten.sub.Tensor(add_61, getitem_33);  add_61 = getitem_33 = None
        mul_43 = torch.ops.aten.mul.Tensor(sub_26, rsqrt_16);  sub_26 = rsqrt_16 = None
        mul_44 = torch.ops.aten.mul.Tensor(mul_43, arg141_1);  mul_43 = arg141_1 = None
        add_63 = torch.ops.aten.add.Tensor(mul_44, arg142_1);  mul_44 = arg142_1 = None
        view_198 = torch.ops.aten.view.default(add_63, [128, 1024])
        permute_97 = torch.ops.aten.permute.default(arg143_1, [1, 0]);  arg143_1 = None
        addmm_52 = torch.ops.aten.addmm.default(arg144_1, view_198, permute_97);  arg144_1 = view_198 = permute_97 = None
        view_199 = torch.ops.aten.view.default(addmm_52, [2, 64, 4096]);  addmm_52 = None
        relu_8 = torch.ops.aten.relu.default(view_199);  view_199 = None
        view_200 = torch.ops.aten.view.default(relu_8, [128, 4096]);  relu_8 = None
        permute_98 = torch.ops.aten.permute.default(arg145_1, [1, 0]);  arg145_1 = None
        addmm_53 = torch.ops.aten.addmm.default(arg146_1, view_200, permute_98);  arg146_1 = view_200 = permute_98 = None
        view_201 = torch.ops.aten.view.default(addmm_53, [2, 64, 1024]);  addmm_53 = None
        add_64 = torch.ops.aten.add.Tensor(add_63, view_201);  add_63 = view_201 = None
        var_mean_17 = torch.ops.aten.var_mean.correction(add_64, [2], correction = 0, keepdim = True)
        getitem_34 = var_mean_17[0]
        getitem_35 = var_mean_17[1];  var_mean_17 = None
        add_65 = torch.ops.aten.add.Tensor(getitem_34, 1e-05);  getitem_34 = None
        rsqrt_17 = torch.ops.aten.rsqrt.default(add_65);  add_65 = None
        sub_27 = torch.ops.aten.sub.Tensor(add_64, getitem_35);  add_64 = getitem_35 = None
        mul_45 = torch.ops.aten.mul.Tensor(sub_27, rsqrt_17);  sub_27 = rsqrt_17 = None
        mul_46 = torch.ops.aten.mul.Tensor(mul_45, arg147_1);  mul_45 = arg147_1 = None
        add_66 = torch.ops.aten.add.Tensor(mul_46, arg148_1);  mul_46 = arg148_1 = None
        view_202 = torch.ops.aten.view.default(add_66, [128, 1024])
        permute_99 = torch.ops.aten.permute.default(arg149_1, [1, 0]);  arg149_1 = None
        addmm_54 = torch.ops.aten.addmm.default(arg150_1, view_202, permute_99);  arg150_1 = view_202 = permute_99 = None
        view_203 = torch.ops.aten.view.default(addmm_54, [2, 64, 1024]);  addmm_54 = None
        mul_47 = torch.ops.aten.mul.Tensor(view_203, 0.125);  view_203 = None
        view_204 = torch.ops.aten.view.default(add_66, [128, 1024])
        permute_100 = torch.ops.aten.permute.default(arg151_1, [1, 0]);  arg151_1 = None
        addmm_55 = torch.ops.aten.addmm.default(arg152_1, view_204, permute_100);  arg152_1 = view_204 = permute_100 = None
        view_205 = torch.ops.aten.view.default(addmm_55, [2, 64, 1024]);  addmm_55 = None
        view_206 = torch.ops.aten.view.default(view_205, [2, -1, 16, 64]);  view_205 = None
        permute_101 = torch.ops.aten.permute.default(view_206, [0, 2, 1, 3]);  view_206 = None
        clone_73 = torch.ops.aten.clone.default(permute_101, memory_format = torch.contiguous_format);  permute_101 = None
        view_207 = torch.ops.aten.view.default(add_66, [128, 1024])
        permute_102 = torch.ops.aten.permute.default(arg153_1, [1, 0]);  arg153_1 = None
        addmm_56 = torch.ops.aten.addmm.default(arg154_1, view_207, permute_102);  arg154_1 = view_207 = permute_102 = None
        view_208 = torch.ops.aten.view.default(addmm_56, [2, 64, 1024]);  addmm_56 = None
        view_209 = torch.ops.aten.view.default(view_208, [2, -1, 16, 64]);  view_208 = None
        permute_103 = torch.ops.aten.permute.default(view_209, [0, 2, 1, 3]);  view_209 = None
        clone_74 = torch.ops.aten.clone.default(permute_103, memory_format = torch.contiguous_format);  permute_103 = None
        view_210 = torch.ops.aten.view.default(mul_47, [2, 64, 16, 64]);  mul_47 = None
        permute_104 = torch.ops.aten.permute.default(view_210, [0, 2, 1, 3]);  view_210 = None
        clone_75 = torch.ops.aten.clone.default(permute_104, memory_format = torch.contiguous_format);  permute_104 = None
        view_211 = torch.ops.aten.view.default(clone_75, [32, -1, 64]);  clone_75 = None
        view_212 = torch.ops.aten.view.default(clone_73, [32, -1, 64]);  clone_73 = None
        view_213 = torch.ops.aten.view.default(clone_74, [32, -1, 64]);  clone_74 = None
        permute_105 = torch.ops.aten.permute.default(view_212, [0, 2, 1]);  view_212 = None
        bmm_18 = torch.ops.aten.bmm.default(view_211, permute_105);  view_211 = permute_105 = None
        view_214 = torch.ops.aten.view.default(bmm_18, [2, 16, 64, 64]);  bmm_18 = None
        add_67 = torch.ops.aten.add.Tensor(view_214, where_2);  view_214 = None
        view_215 = torch.ops.aten.view.default(add_67, [32, 64, 64]);  add_67 = None
        amax_9 = torch.ops.aten.amax.default(view_215, [-1], True)
        sub_28 = torch.ops.aten.sub.Tensor(view_215, amax_9);  view_215 = amax_9 = None
        exp_9 = torch.ops.aten.exp.default(sub_28);  sub_28 = None
        sum_10 = torch.ops.aten.sum.dim_IntList(exp_9, [-1], True)
        div_9 = torch.ops.aten.div.Tensor(exp_9, sum_10);  exp_9 = sum_10 = None
        bmm_19 = torch.ops.aten.bmm.default(div_9, view_213);  div_9 = view_213 = None
        view_216 = torch.ops.aten.view.default(bmm_19, [2, 16, 64, 64]);  bmm_19 = None
        permute_106 = torch.ops.aten.permute.default(view_216, [0, 2, 1, 3]);  view_216 = None
        clone_77 = torch.ops.aten.clone.default(permute_106, memory_format = torch.contiguous_format);  permute_106 = None
        view_217 = torch.ops.aten.view.default(clone_77, [2, 64, 1024]);  clone_77 = None
        view_218 = torch.ops.aten.view.default(view_217, [128, 1024]);  view_217 = None
        permute_107 = torch.ops.aten.permute.default(arg155_1, [1, 0]);  arg155_1 = None
        addmm_57 = torch.ops.aten.addmm.default(arg156_1, view_218, permute_107);  arg156_1 = view_218 = permute_107 = None
        view_219 = torch.ops.aten.view.default(addmm_57, [2, 64, 1024]);  addmm_57 = None
        add_68 = torch.ops.aten.add.Tensor(add_66, view_219);  add_66 = view_219 = None
        var_mean_18 = torch.ops.aten.var_mean.correction(add_68, [2], correction = 0, keepdim = True)
        getitem_36 = var_mean_18[0]
        getitem_37 = var_mean_18[1];  var_mean_18 = None
        add_69 = torch.ops.aten.add.Tensor(getitem_36, 1e-05);  getitem_36 = None
        rsqrt_18 = torch.ops.aten.rsqrt.default(add_69);  add_69 = None
        sub_29 = torch.ops.aten.sub.Tensor(add_68, getitem_37);  add_68 = getitem_37 = None
        mul_48 = torch.ops.aten.mul.Tensor(sub_29, rsqrt_18);  sub_29 = rsqrt_18 = None
        mul_49 = torch.ops.aten.mul.Tensor(mul_48, arg157_1);  mul_48 = arg157_1 = None
        add_70 = torch.ops.aten.add.Tensor(mul_49, arg158_1);  mul_49 = arg158_1 = None
        view_220 = torch.ops.aten.view.default(add_70, [128, 1024])
        permute_108 = torch.ops.aten.permute.default(arg159_1, [1, 0]);  arg159_1 = None
        addmm_58 = torch.ops.aten.addmm.default(arg160_1, view_220, permute_108);  arg160_1 = view_220 = permute_108 = None
        view_221 = torch.ops.aten.view.default(addmm_58, [2, 64, 4096]);  addmm_58 = None
        relu_9 = torch.ops.aten.relu.default(view_221);  view_221 = None
        view_222 = torch.ops.aten.view.default(relu_9, [128, 4096]);  relu_9 = None
        permute_109 = torch.ops.aten.permute.default(arg161_1, [1, 0]);  arg161_1 = None
        addmm_59 = torch.ops.aten.addmm.default(arg162_1, view_222, permute_109);  arg162_1 = view_222 = permute_109 = None
        view_223 = torch.ops.aten.view.default(addmm_59, [2, 64, 1024]);  addmm_59 = None
        add_71 = torch.ops.aten.add.Tensor(add_70, view_223);  add_70 = view_223 = None
        var_mean_19 = torch.ops.aten.var_mean.correction(add_71, [2], correction = 0, keepdim = True)
        getitem_38 = var_mean_19[0]
        getitem_39 = var_mean_19[1];  var_mean_19 = None
        add_72 = torch.ops.aten.add.Tensor(getitem_38, 1e-05);  getitem_38 = None
        rsqrt_19 = torch.ops.aten.rsqrt.default(add_72);  add_72 = None
        sub_30 = torch.ops.aten.sub.Tensor(add_71, getitem_39);  add_71 = getitem_39 = None
        mul_50 = torch.ops.aten.mul.Tensor(sub_30, rsqrt_19);  sub_30 = rsqrt_19 = None
        mul_51 = torch.ops.aten.mul.Tensor(mul_50, arg163_1);  mul_50 = arg163_1 = None
        add_73 = torch.ops.aten.add.Tensor(mul_51, arg164_1);  mul_51 = arg164_1 = None
        view_224 = torch.ops.aten.view.default(add_73, [128, 1024])
        permute_110 = torch.ops.aten.permute.default(arg165_1, [1, 0]);  arg165_1 = None
        addmm_60 = torch.ops.aten.addmm.default(arg166_1, view_224, permute_110);  arg166_1 = view_224 = permute_110 = None
        view_225 = torch.ops.aten.view.default(addmm_60, [2, 64, 1024]);  addmm_60 = None
        mul_52 = torch.ops.aten.mul.Tensor(view_225, 0.125);  view_225 = None
        view_226 = torch.ops.aten.view.default(add_73, [128, 1024])
        permute_111 = torch.ops.aten.permute.default(arg167_1, [1, 0]);  arg167_1 = None
        addmm_61 = torch.ops.aten.addmm.default(arg168_1, view_226, permute_111);  arg168_1 = view_226 = permute_111 = None
        view_227 = torch.ops.aten.view.default(addmm_61, [2, 64, 1024]);  addmm_61 = None
        view_228 = torch.ops.aten.view.default(view_227, [2, -1, 16, 64]);  view_227 = None
        permute_112 = torch.ops.aten.permute.default(view_228, [0, 2, 1, 3]);  view_228 = None
        clone_81 = torch.ops.aten.clone.default(permute_112, memory_format = torch.contiguous_format);  permute_112 = None
        view_229 = torch.ops.aten.view.default(add_73, [128, 1024])
        permute_113 = torch.ops.aten.permute.default(arg169_1, [1, 0]);  arg169_1 = None
        addmm_62 = torch.ops.aten.addmm.default(arg170_1, view_229, permute_113);  arg170_1 = view_229 = permute_113 = None
        view_230 = torch.ops.aten.view.default(addmm_62, [2, 64, 1024]);  addmm_62 = None
        view_231 = torch.ops.aten.view.default(view_230, [2, -1, 16, 64]);  view_230 = None
        permute_114 = torch.ops.aten.permute.default(view_231, [0, 2, 1, 3]);  view_231 = None
        clone_82 = torch.ops.aten.clone.default(permute_114, memory_format = torch.contiguous_format);  permute_114 = None
        view_232 = torch.ops.aten.view.default(mul_52, [2, 64, 16, 64]);  mul_52 = None
        permute_115 = torch.ops.aten.permute.default(view_232, [0, 2, 1, 3]);  view_232 = None
        clone_83 = torch.ops.aten.clone.default(permute_115, memory_format = torch.contiguous_format);  permute_115 = None
        view_233 = torch.ops.aten.view.default(clone_83, [32, -1, 64]);  clone_83 = None
        view_234 = torch.ops.aten.view.default(clone_81, [32, -1, 64]);  clone_81 = None
        view_235 = torch.ops.aten.view.default(clone_82, [32, -1, 64]);  clone_82 = None
        permute_116 = torch.ops.aten.permute.default(view_234, [0, 2, 1]);  view_234 = None
        bmm_20 = torch.ops.aten.bmm.default(view_233, permute_116);  view_233 = permute_116 = None
        view_236 = torch.ops.aten.view.default(bmm_20, [2, 16, 64, 64]);  bmm_20 = None
        add_74 = torch.ops.aten.add.Tensor(view_236, where_2);  view_236 = None
        view_237 = torch.ops.aten.view.default(add_74, [32, 64, 64]);  add_74 = None
        amax_10 = torch.ops.aten.amax.default(view_237, [-1], True)
        sub_31 = torch.ops.aten.sub.Tensor(view_237, amax_10);  view_237 = amax_10 = None
        exp_10 = torch.ops.aten.exp.default(sub_31);  sub_31 = None
        sum_11 = torch.ops.aten.sum.dim_IntList(exp_10, [-1], True)
        div_10 = torch.ops.aten.div.Tensor(exp_10, sum_11);  exp_10 = sum_11 = None
        bmm_21 = torch.ops.aten.bmm.default(div_10, view_235);  div_10 = view_235 = None
        view_238 = torch.ops.aten.view.default(bmm_21, [2, 16, 64, 64]);  bmm_21 = None
        permute_117 = torch.ops.aten.permute.default(view_238, [0, 2, 1, 3]);  view_238 = None
        clone_85 = torch.ops.aten.clone.default(permute_117, memory_format = torch.contiguous_format);  permute_117 = None
        view_239 = torch.ops.aten.view.default(clone_85, [2, 64, 1024]);  clone_85 = None
        view_240 = torch.ops.aten.view.default(view_239, [128, 1024]);  view_239 = None
        permute_118 = torch.ops.aten.permute.default(arg171_1, [1, 0]);  arg171_1 = None
        addmm_63 = torch.ops.aten.addmm.default(arg172_1, view_240, permute_118);  arg172_1 = view_240 = permute_118 = None
        view_241 = torch.ops.aten.view.default(addmm_63, [2, 64, 1024]);  addmm_63 = None
        add_75 = torch.ops.aten.add.Tensor(add_73, view_241);  add_73 = view_241 = None
        var_mean_20 = torch.ops.aten.var_mean.correction(add_75, [2], correction = 0, keepdim = True)
        getitem_40 = var_mean_20[0]
        getitem_41 = var_mean_20[1];  var_mean_20 = None
        add_76 = torch.ops.aten.add.Tensor(getitem_40, 1e-05);  getitem_40 = None
        rsqrt_20 = torch.ops.aten.rsqrt.default(add_76);  add_76 = None
        sub_32 = torch.ops.aten.sub.Tensor(add_75, getitem_41);  add_75 = getitem_41 = None
        mul_53 = torch.ops.aten.mul.Tensor(sub_32, rsqrt_20);  sub_32 = rsqrt_20 = None
        mul_54 = torch.ops.aten.mul.Tensor(mul_53, arg173_1);  mul_53 = arg173_1 = None
        add_77 = torch.ops.aten.add.Tensor(mul_54, arg174_1);  mul_54 = arg174_1 = None
        view_242 = torch.ops.aten.view.default(add_77, [128, 1024])
        permute_119 = torch.ops.aten.permute.default(arg175_1, [1, 0]);  arg175_1 = None
        addmm_64 = torch.ops.aten.addmm.default(arg176_1, view_242, permute_119);  arg176_1 = view_242 = permute_119 = None
        view_243 = torch.ops.aten.view.default(addmm_64, [2, 64, 4096]);  addmm_64 = None
        relu_10 = torch.ops.aten.relu.default(view_243);  view_243 = None
        view_244 = torch.ops.aten.view.default(relu_10, [128, 4096]);  relu_10 = None
        permute_120 = torch.ops.aten.permute.default(arg177_1, [1, 0]);  arg177_1 = None
        addmm_65 = torch.ops.aten.addmm.default(arg178_1, view_244, permute_120);  arg178_1 = view_244 = permute_120 = None
        view_245 = torch.ops.aten.view.default(addmm_65, [2, 64, 1024]);  addmm_65 = None
        add_78 = torch.ops.aten.add.Tensor(add_77, view_245);  add_77 = view_245 = None
        var_mean_21 = torch.ops.aten.var_mean.correction(add_78, [2], correction = 0, keepdim = True)
        getitem_42 = var_mean_21[0]
        getitem_43 = var_mean_21[1];  var_mean_21 = None
        add_79 = torch.ops.aten.add.Tensor(getitem_42, 1e-05);  getitem_42 = None
        rsqrt_21 = torch.ops.aten.rsqrt.default(add_79);  add_79 = None
        sub_33 = torch.ops.aten.sub.Tensor(add_78, getitem_43);  add_78 = getitem_43 = None
        mul_55 = torch.ops.aten.mul.Tensor(sub_33, rsqrt_21);  sub_33 = rsqrt_21 = None
        mul_56 = torch.ops.aten.mul.Tensor(mul_55, arg179_1);  mul_55 = arg179_1 = None
        add_80 = torch.ops.aten.add.Tensor(mul_56, arg180_1);  mul_56 = arg180_1 = None
        view_246 = torch.ops.aten.view.default(add_80, [128, 1024])
        permute_121 = torch.ops.aten.permute.default(arg181_1, [1, 0]);  arg181_1 = None
        addmm_66 = torch.ops.aten.addmm.default(arg182_1, view_246, permute_121);  arg182_1 = view_246 = permute_121 = None
        view_247 = torch.ops.aten.view.default(addmm_66, [2, 64, 1024]);  addmm_66 = None
        mul_57 = torch.ops.aten.mul.Tensor(view_247, 0.125);  view_247 = None
        view_248 = torch.ops.aten.view.default(add_80, [128, 1024])
        permute_122 = torch.ops.aten.permute.default(arg183_1, [1, 0]);  arg183_1 = None
        addmm_67 = torch.ops.aten.addmm.default(arg184_1, view_248, permute_122);  arg184_1 = view_248 = permute_122 = None
        view_249 = torch.ops.aten.view.default(addmm_67, [2, 64, 1024]);  addmm_67 = None
        view_250 = torch.ops.aten.view.default(view_249, [2, -1, 16, 64]);  view_249 = None
        permute_123 = torch.ops.aten.permute.default(view_250, [0, 2, 1, 3]);  view_250 = None
        clone_89 = torch.ops.aten.clone.default(permute_123, memory_format = torch.contiguous_format);  permute_123 = None
        view_251 = torch.ops.aten.view.default(add_80, [128, 1024])
        permute_124 = torch.ops.aten.permute.default(arg185_1, [1, 0]);  arg185_1 = None
        addmm_68 = torch.ops.aten.addmm.default(arg186_1, view_251, permute_124);  arg186_1 = view_251 = permute_124 = None
        view_252 = torch.ops.aten.view.default(addmm_68, [2, 64, 1024]);  addmm_68 = None
        view_253 = torch.ops.aten.view.default(view_252, [2, -1, 16, 64]);  view_252 = None
        permute_125 = torch.ops.aten.permute.default(view_253, [0, 2, 1, 3]);  view_253 = None
        clone_90 = torch.ops.aten.clone.default(permute_125, memory_format = torch.contiguous_format);  permute_125 = None
        view_254 = torch.ops.aten.view.default(mul_57, [2, 64, 16, 64]);  mul_57 = None
        permute_126 = torch.ops.aten.permute.default(view_254, [0, 2, 1, 3]);  view_254 = None
        clone_91 = torch.ops.aten.clone.default(permute_126, memory_format = torch.contiguous_format);  permute_126 = None
        view_255 = torch.ops.aten.view.default(clone_91, [32, -1, 64]);  clone_91 = None
        view_256 = torch.ops.aten.view.default(clone_89, [32, -1, 64]);  clone_89 = None
        view_257 = torch.ops.aten.view.default(clone_90, [32, -1, 64]);  clone_90 = None
        permute_127 = torch.ops.aten.permute.default(view_256, [0, 2, 1]);  view_256 = None
        bmm_22 = torch.ops.aten.bmm.default(view_255, permute_127);  view_255 = permute_127 = None
        view_258 = torch.ops.aten.view.default(bmm_22, [2, 16, 64, 64]);  bmm_22 = None
        add_81 = torch.ops.aten.add.Tensor(view_258, where_2);  view_258 = where_2 = None
        view_259 = torch.ops.aten.view.default(add_81, [32, 64, 64]);  add_81 = None
        amax_11 = torch.ops.aten.amax.default(view_259, [-1], True)
        sub_34 = torch.ops.aten.sub.Tensor(view_259, amax_11);  view_259 = amax_11 = None
        exp_11 = torch.ops.aten.exp.default(sub_34);  sub_34 = None
        sum_12 = torch.ops.aten.sum.dim_IntList(exp_11, [-1], True)
        div_11 = torch.ops.aten.div.Tensor(exp_11, sum_12);  exp_11 = sum_12 = None
        bmm_23 = torch.ops.aten.bmm.default(div_11, view_257);  div_11 = view_257 = None
        view_260 = torch.ops.aten.view.default(bmm_23, [2, 16, 64, 64]);  bmm_23 = None
        permute_128 = torch.ops.aten.permute.default(view_260, [0, 2, 1, 3]);  view_260 = None
        clone_93 = torch.ops.aten.clone.default(permute_128, memory_format = torch.contiguous_format);  permute_128 = None
        view_261 = torch.ops.aten.view.default(clone_93, [2, 64, 1024]);  clone_93 = None
        view_262 = torch.ops.aten.view.default(view_261, [128, 1024]);  view_261 = None
        permute_129 = torch.ops.aten.permute.default(arg187_1, [1, 0]);  arg187_1 = None
        addmm_69 = torch.ops.aten.addmm.default(arg188_1, view_262, permute_129);  arg188_1 = view_262 = permute_129 = None
        view_263 = torch.ops.aten.view.default(addmm_69, [2, 64, 1024]);  addmm_69 = None
        add_82 = torch.ops.aten.add.Tensor(add_80, view_263);  add_80 = view_263 = None
        var_mean_22 = torch.ops.aten.var_mean.correction(add_82, [2], correction = 0, keepdim = True)
        getitem_44 = var_mean_22[0]
        getitem_45 = var_mean_22[1];  var_mean_22 = None
        add_83 = torch.ops.aten.add.Tensor(getitem_44, 1e-05);  getitem_44 = None
        rsqrt_22 = torch.ops.aten.rsqrt.default(add_83);  add_83 = None
        sub_35 = torch.ops.aten.sub.Tensor(add_82, getitem_45);  add_82 = getitem_45 = None
        mul_58 = torch.ops.aten.mul.Tensor(sub_35, rsqrt_22);  sub_35 = rsqrt_22 = None
        mul_59 = torch.ops.aten.mul.Tensor(mul_58, arg189_1);  mul_58 = arg189_1 = None
        add_84 = torch.ops.aten.add.Tensor(mul_59, arg190_1);  mul_59 = arg190_1 = None
        view_264 = torch.ops.aten.view.default(add_84, [128, 1024])
        permute_130 = torch.ops.aten.permute.default(arg191_1, [1, 0]);  arg191_1 = None
        addmm_70 = torch.ops.aten.addmm.default(arg192_1, view_264, permute_130);  arg192_1 = view_264 = permute_130 = None
        view_265 = torch.ops.aten.view.default(addmm_70, [2, 64, 4096]);  addmm_70 = None
        relu_11 = torch.ops.aten.relu.default(view_265);  view_265 = None
        view_266 = torch.ops.aten.view.default(relu_11, [128, 4096]);  relu_11 = None
        permute_131 = torch.ops.aten.permute.default(arg193_1, [1, 0]);  arg193_1 = None
        addmm_71 = torch.ops.aten.addmm.default(arg194_1, view_266, permute_131);  arg194_1 = view_266 = permute_131 = None
        view_267 = torch.ops.aten.view.default(addmm_71, [2, 64, 1024]);  addmm_71 = None
        add_85 = torch.ops.aten.add.Tensor(add_84, view_267);  add_84 = view_267 = None
        var_mean_23 = torch.ops.aten.var_mean.correction(add_85, [2], correction = 0, keepdim = True)
        getitem_46 = var_mean_23[0]
        getitem_47 = var_mean_23[1];  var_mean_23 = None
        add_86 = torch.ops.aten.add.Tensor(getitem_46, 1e-05);  getitem_46 = None
        rsqrt_23 = torch.ops.aten.rsqrt.default(add_86);  add_86 = None
        sub_36 = torch.ops.aten.sub.Tensor(add_85, getitem_47);  add_85 = getitem_47 = None
        mul_60 = torch.ops.aten.mul.Tensor(sub_36, rsqrt_23);  sub_36 = rsqrt_23 = None
        mul_61 = torch.ops.aten.mul.Tensor(mul_60, arg195_1);  mul_60 = arg195_1 = None
        add_87 = torch.ops.aten.add.Tensor(mul_61, arg196_1);  mul_61 = arg196_1 = None
        return (add_87, device_put)
        
def load_args(reader):
    buf0 = reader.storage(None, 1024, device=device(type='cuda', index=0), dtype_hint=torch.int64)
    reader.tensor(buf0, (2, 64), dtype=torch.int64, is_leaf=True)  # arg0_1
    buf1 = reader.storage(None, 205885440, device=device(type='cuda', index=0))
    reader.tensor(buf1, (50265, 1024), is_leaf=True)  # arg1_1
    buf2 = reader.storage(None, 4202496)
    reader.tensor(buf2, (1026, 1024), is_leaf=True)  # arg2_1
    buf3 = reader.storage(None, 4, device=device(type='cuda', index=0))
    reader.tensor(buf3, (1,), is_leaf=True)  # arg3_1
    buf4 = reader.storage(None, 1024, device=device(type='cuda', index=0), dtype_hint=torch.int64)
    reader.tensor(buf4, (2, 64), dtype=torch.int64, is_leaf=True)  # arg4_1
    buf5 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf5, (1024, 1024), is_leaf=True)  # arg5_1
    buf6 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf6, (1024,), is_leaf=True)  # arg6_1
    buf7 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf7, (1024, 1024), is_leaf=True)  # arg7_1
    buf8 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf8, (1024,), is_leaf=True)  # arg8_1
    buf9 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf9, (1024, 1024), is_leaf=True)  # arg9_1
    buf10 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf10, (1024,), is_leaf=True)  # arg10_1
    buf11 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf11, (1024, 1024), is_leaf=True)  # arg11_1
    buf12 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf12, (1024,), is_leaf=True)  # arg12_1
    buf13 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf13, (1024,), is_leaf=True)  # arg13_1
    buf14 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf14, (1024,), is_leaf=True)  # arg14_1
    buf15 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf15, (4096, 1024), is_leaf=True)  # arg15_1
    buf16 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf16, (4096,), is_leaf=True)  # arg16_1
    buf17 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf17, (1024, 4096), is_leaf=True)  # arg17_1
    buf18 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf18, (1024,), is_leaf=True)  # arg18_1
    buf19 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf19, (1024,), is_leaf=True)  # arg19_1
    buf20 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf20, (1024,), is_leaf=True)  # arg20_1
    buf21 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf21, (1024, 1024), is_leaf=True)  # arg21_1
    buf22 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf22, (1024,), is_leaf=True)  # arg22_1
    buf23 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf23, (1024, 1024), is_leaf=True)  # arg23_1
    buf24 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf24, (1024,), is_leaf=True)  # arg24_1
    buf25 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf25, (1024, 1024), is_leaf=True)  # arg25_1
    buf26 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf26, (1024,), is_leaf=True)  # arg26_1
    buf27 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf27, (1024, 1024), is_leaf=True)  # arg27_1
    buf28 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf28, (1024,), is_leaf=True)  # arg28_1
    buf29 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf29, (1024,), is_leaf=True)  # arg29_1
    buf30 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf30, (1024,), is_leaf=True)  # arg30_1
    buf31 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf31, (4096, 1024), is_leaf=True)  # arg31_1
    buf32 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf32, (4096,), is_leaf=True)  # arg32_1
    buf33 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf33, (1024, 4096), is_leaf=True)  # arg33_1
    buf34 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf34, (1024,), is_leaf=True)  # arg34_1
    buf35 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf35, (1024,), is_leaf=True)  # arg35_1
    buf36 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf36, (1024,), is_leaf=True)  # arg36_1
    buf37 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf37, (1024, 1024), is_leaf=True)  # arg37_1
    buf38 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf38, (1024,), is_leaf=True)  # arg38_1
    buf39 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf39, (1024, 1024), is_leaf=True)  # arg39_1
    buf40 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf40, (1024,), is_leaf=True)  # arg40_1
    buf41 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf41, (1024, 1024), is_leaf=True)  # arg41_1
    buf42 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf42, (1024,), is_leaf=True)  # arg42_1
    buf43 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf43, (1024, 1024), is_leaf=True)  # arg43_1
    buf44 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf44, (1024,), is_leaf=True)  # arg44_1
    buf45 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf45, (1024,), is_leaf=True)  # arg45_1
    buf46 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf46, (1024,), is_leaf=True)  # arg46_1
    buf47 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf47, (4096, 1024), is_leaf=True)  # arg47_1
    buf48 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf48, (4096,), is_leaf=True)  # arg48_1
    buf49 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf49, (1024, 4096), is_leaf=True)  # arg49_1
    buf50 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf50, (1024,), is_leaf=True)  # arg50_1
    buf51 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf51, (1024,), is_leaf=True)  # arg51_1
    buf52 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf52, (1024,), is_leaf=True)  # arg52_1
    buf53 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf53, (1024, 1024), is_leaf=True)  # arg53_1
    buf54 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf54, (1024,), is_leaf=True)  # arg54_1
    buf55 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf55, (1024, 1024), is_leaf=True)  # arg55_1
    buf56 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf56, (1024,), is_leaf=True)  # arg56_1
    buf57 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf57, (1024, 1024), is_leaf=True)  # arg57_1
    buf58 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf58, (1024,), is_leaf=True)  # arg58_1
    buf59 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf59, (1024, 1024), is_leaf=True)  # arg59_1
    buf60 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf60, (1024,), is_leaf=True)  # arg60_1
    buf61 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf61, (1024,), is_leaf=True)  # arg61_1
    buf62 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf62, (1024,), is_leaf=True)  # arg62_1
    buf63 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf63, (4096, 1024), is_leaf=True)  # arg63_1
    buf64 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf64, (4096,), is_leaf=True)  # arg64_1
    buf65 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf65, (1024, 4096), is_leaf=True)  # arg65_1
    buf66 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf66, (1024,), is_leaf=True)  # arg66_1
    buf67 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf67, (1024,), is_leaf=True)  # arg67_1
    buf68 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf68, (1024,), is_leaf=True)  # arg68_1
    buf69 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf69, (1024, 1024), is_leaf=True)  # arg69_1
    buf70 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf70, (1024,), is_leaf=True)  # arg70_1
    buf71 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf71, (1024, 1024), is_leaf=True)  # arg71_1
    buf72 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf72, (1024,), is_leaf=True)  # arg72_1
    buf73 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf73, (1024, 1024), is_leaf=True)  # arg73_1
    buf74 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf74, (1024,), is_leaf=True)  # arg74_1
    buf75 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf75, (1024, 1024), is_leaf=True)  # arg75_1
    buf76 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf76, (1024,), is_leaf=True)  # arg76_1
    buf77 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf77, (1024,), is_leaf=True)  # arg77_1
    buf78 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf78, (1024,), is_leaf=True)  # arg78_1
    buf79 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf79, (4096, 1024), is_leaf=True)  # arg79_1
    buf80 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf80, (4096,), is_leaf=True)  # arg80_1
    buf81 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf81, (1024, 4096), is_leaf=True)  # arg81_1
    buf82 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf82, (1024,), is_leaf=True)  # arg82_1
    buf83 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf83, (1024,), is_leaf=True)  # arg83_1
    buf84 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf84, (1024,), is_leaf=True)  # arg84_1
    buf85 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf85, (1024, 1024), is_leaf=True)  # arg85_1
    buf86 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf86, (1024,), is_leaf=True)  # arg86_1
    buf87 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf87, (1024, 1024), is_leaf=True)  # arg87_1
    buf88 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf88, (1024,), is_leaf=True)  # arg88_1
    buf89 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf89, (1024, 1024), is_leaf=True)  # arg89_1
    buf90 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf90, (1024,), is_leaf=True)  # arg90_1
    buf91 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf91, (1024, 1024), is_leaf=True)  # arg91_1
    buf92 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf92, (1024,), is_leaf=True)  # arg92_1
    buf93 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf93, (1024,), is_leaf=True)  # arg93_1
    buf94 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf94, (1024,), is_leaf=True)  # arg94_1
    buf95 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf95, (4096, 1024), is_leaf=True)  # arg95_1
    buf96 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf96, (4096,), is_leaf=True)  # arg96_1
    buf97 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf97, (1024, 4096), is_leaf=True)  # arg97_1
    buf98 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf98, (1024,), is_leaf=True)  # arg98_1
    buf99 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf99, (1024,), is_leaf=True)  # arg99_1
    buf100 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf100, (1024,), is_leaf=True)  # arg100_1
    buf101 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf101, (1024, 1024), is_leaf=True)  # arg101_1
    buf102 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf102, (1024,), is_leaf=True)  # arg102_1
    buf103 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf103, (1024, 1024), is_leaf=True)  # arg103_1
    buf104 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf104, (1024,), is_leaf=True)  # arg104_1
    buf105 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf105, (1024, 1024), is_leaf=True)  # arg105_1
    buf106 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf106, (1024,), is_leaf=True)  # arg106_1
    buf107 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf107, (1024, 1024), is_leaf=True)  # arg107_1
    buf108 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf108, (1024,), is_leaf=True)  # arg108_1
    buf109 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf109, (1024,), is_leaf=True)  # arg109_1
    buf110 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf110, (1024,), is_leaf=True)  # arg110_1
    buf111 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf111, (4096, 1024), is_leaf=True)  # arg111_1
    buf112 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf112, (4096,), is_leaf=True)  # arg112_1
    buf113 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf113, (1024, 4096), is_leaf=True)  # arg113_1
    buf114 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf114, (1024,), is_leaf=True)  # arg114_1
    buf115 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf115, (1024,), is_leaf=True)  # arg115_1
    buf116 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf116, (1024,), is_leaf=True)  # arg116_1
    buf117 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf117, (1024, 1024), is_leaf=True)  # arg117_1
    buf118 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf118, (1024,), is_leaf=True)  # arg118_1
    buf119 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf119, (1024, 1024), is_leaf=True)  # arg119_1
    buf120 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf120, (1024,), is_leaf=True)  # arg120_1
    buf121 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf121, (1024, 1024), is_leaf=True)  # arg121_1
    buf122 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf122, (1024,), is_leaf=True)  # arg122_1
    buf123 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf123, (1024, 1024), is_leaf=True)  # arg123_1
    buf124 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf124, (1024,), is_leaf=True)  # arg124_1
    buf125 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf125, (1024,), is_leaf=True)  # arg125_1
    buf126 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf126, (1024,), is_leaf=True)  # arg126_1
    buf127 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf127, (4096, 1024), is_leaf=True)  # arg127_1
    buf128 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf128, (4096,), is_leaf=True)  # arg128_1
    buf129 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf129, (1024, 4096), is_leaf=True)  # arg129_1
    buf130 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf130, (1024,), is_leaf=True)  # arg130_1
    buf131 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf131, (1024,), is_leaf=True)  # arg131_1
    buf132 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf132, (1024,), is_leaf=True)  # arg132_1
    buf133 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf133, (1024, 1024), is_leaf=True)  # arg133_1
    buf134 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf134, (1024,), is_leaf=True)  # arg134_1
    buf135 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf135, (1024, 1024), is_leaf=True)  # arg135_1
    buf136 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf136, (1024,), is_leaf=True)  # arg136_1
    buf137 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf137, (1024, 1024), is_leaf=True)  # arg137_1
    buf138 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf138, (1024,), is_leaf=True)  # arg138_1
    buf139 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf139, (1024, 1024), is_leaf=True)  # arg139_1
    buf140 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf140, (1024,), is_leaf=True)  # arg140_1
    buf141 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf141, (1024,), is_leaf=True)  # arg141_1
    buf142 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf142, (1024,), is_leaf=True)  # arg142_1
    buf143 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf143, (4096, 1024), is_leaf=True)  # arg143_1
    buf144 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf144, (4096,), is_leaf=True)  # arg144_1
    buf145 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf145, (1024, 4096), is_leaf=True)  # arg145_1
    buf146 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf146, (1024,), is_leaf=True)  # arg146_1
    buf147 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf147, (1024,), is_leaf=True)  # arg147_1
    buf148 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf148, (1024,), is_leaf=True)  # arg148_1
    buf149 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf149, (1024, 1024), is_leaf=True)  # arg149_1
    buf150 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf150, (1024,), is_leaf=True)  # arg150_1
    buf151 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf151, (1024, 1024), is_leaf=True)  # arg151_1
    buf152 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf152, (1024,), is_leaf=True)  # arg152_1
    buf153 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf153, (1024, 1024), is_leaf=True)  # arg153_1
    buf154 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf154, (1024,), is_leaf=True)  # arg154_1
    buf155 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf155, (1024, 1024), is_leaf=True)  # arg155_1
    buf156 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf156, (1024,), is_leaf=True)  # arg156_1
    buf157 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf157, (1024,), is_leaf=True)  # arg157_1
    buf158 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf158, (1024,), is_leaf=True)  # arg158_1
    buf159 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf159, (4096, 1024), is_leaf=True)  # arg159_1
    buf160 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf160, (4096,), is_leaf=True)  # arg160_1
    buf161 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf161, (1024, 4096), is_leaf=True)  # arg161_1
    buf162 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf162, (1024,), is_leaf=True)  # arg162_1
    buf163 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf163, (1024,), is_leaf=True)  # arg163_1
    buf164 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf164, (1024,), is_leaf=True)  # arg164_1
    buf165 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf165, (1024, 1024), is_leaf=True)  # arg165_1
    buf166 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf166, (1024,), is_leaf=True)  # arg166_1
    buf167 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf167, (1024, 1024), is_leaf=True)  # arg167_1
    buf168 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf168, (1024,), is_leaf=True)  # arg168_1
    buf169 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf169, (1024, 1024), is_leaf=True)  # arg169_1
    buf170 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf170, (1024,), is_leaf=True)  # arg170_1
    buf171 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf171, (1024, 1024), is_leaf=True)  # arg171_1
    buf172 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf172, (1024,), is_leaf=True)  # arg172_1
    buf173 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf173, (1024,), is_leaf=True)  # arg173_1
    buf174 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf174, (1024,), is_leaf=True)  # arg174_1
    buf175 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf175, (4096, 1024), is_leaf=True)  # arg175_1
    buf176 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf176, (4096,), is_leaf=True)  # arg176_1
    buf177 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf177, (1024, 4096), is_leaf=True)  # arg177_1
    buf178 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf178, (1024,), is_leaf=True)  # arg178_1
    buf179 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf179, (1024,), is_leaf=True)  # arg179_1
    buf180 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf180, (1024,), is_leaf=True)  # arg180_1
    buf181 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf181, (1024, 1024), is_leaf=True)  # arg181_1
    buf182 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf182, (1024,), is_leaf=True)  # arg182_1
    buf183 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf183, (1024, 1024), is_leaf=True)  # arg183_1
    buf184 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf184, (1024,), is_leaf=True)  # arg184_1
    buf185 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf185, (1024, 1024), is_leaf=True)  # arg185_1
    buf186 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf186, (1024,), is_leaf=True)  # arg186_1
    buf187 = reader.storage(None, 4194304, device=device(type='cuda', index=0))
    reader.tensor(buf187, (1024, 1024), is_leaf=True)  # arg187_1
    buf188 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf188, (1024,), is_leaf=True)  # arg188_1
    buf189 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf189, (1024,), is_leaf=True)  # arg189_1
    buf190 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf190, (1024,), is_leaf=True)  # arg190_1
    buf191 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf191, (4096, 1024), is_leaf=True)  # arg191_1
    buf192 = reader.storage(None, 16384, device=device(type='cuda', index=0))
    reader.tensor(buf192, (4096,), is_leaf=True)  # arg192_1
    buf193 = reader.storage(None, 16777216, device=device(type='cuda', index=0))
    reader.tensor(buf193, (1024, 4096), is_leaf=True)  # arg193_1
    buf194 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf194, (1024,), is_leaf=True)  # arg194_1
    buf195 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf195, (1024,), is_leaf=True)  # arg195_1
    buf196 = reader.storage(None, 4096, device=device(type='cuda', index=0))
    reader.tensor(buf196, (1024,), is_leaf=True)  # arg196_1
load_args._version = 0
mod = Repro()
if __name__ == '__main__':
    from torch._dynamo.repro.after_aot import run_repro
    with torch.no_grad():
        run_repro(mod, load_args, accuracy=False, command='run', save_dir=None, tracing_mode='real', check_str=None)
        # To run it separately, do 
        # mod, args = run_repro(mod, load_args, accuracy=False, command='get_args', save_dir=None, tracing_mode='real', check_str=None)
        # mod(*args)

# ===== run_2025_10_19_03_43_12_574129-pid_19/torchinductor/model__2_inference_2.2/fx_graph_transformed.py =====
class <lambda>(torch.nn.Module):
    def forward(self, arg0_1: "i64[2, 64]", arg1_1: "f32[50265, 1024]", arg2_1: "f32[1026, 1024]", arg3_1: "f32[1]", arg4_1: "i64[2, 64]", arg5_1: "f32[1024, 1024]", arg6_1: "f32[1024]", arg7_1: "f32[1024, 1024]", arg8_1: "f32[1024]", arg9_1: "f32[1024, 1024]", arg10_1: "f32[1024]", arg11_1: "f32[1024, 1024]", arg12_1: "f32[1024]", arg13_1: "f32[1024]", arg14_1: "f32[1024]", arg15_1: "f32[4096, 1024]", arg16_1: "f32[4096]", arg17_1: "f32[1024, 4096]", arg18_1: "f32[1024]", arg19_1: "f32[1024]", arg20_1: "f32[1024]", arg21_1: "f32[1024, 1024]", arg22_1: "f32[1024]", arg23_1: "f32[1024, 1024]", arg24_1: "f32[1024]", arg25_1: "f32[1024, 1024]", arg26_1: "f32[1024]", arg27_1: "f32[1024, 1024]", arg28_1: "f32[1024]", arg29_1: "f32[1024]", arg30_1: "f32[1024]", arg31_1: "f32[4096, 1024]", arg32_1: "f32[4096]", arg33_1: "f32[1024, 4096]", arg34_1: "f32[1024]", arg35_1: "f32[1024]", arg36_1: "f32[1024]", arg37_1: "f32[1024, 1024]", arg38_1: "f32[1024]", arg39_1: "f32[1024, 1024]", arg40_1: "f32[1024]", arg41_1: "f32[1024, 1024]", arg42_1: "f32[1024]", arg43_1: "f32[1024, 1024]", arg44_1: "f32[1024]", arg45_1: "f32[1024]", arg46_1: "f32[1024]", arg47_1: "f32[4096, 1024]", arg48_1: "f32[4096]", arg49_1: "f32[1024, 4096]", arg50_1: "f32[1024]", arg51_1: "f32[1024]", arg52_1: "f32[1024]", arg53_1: "f32[1024, 1024]", arg54_1: "f32[1024]", arg55_1: "f32[1024, 1024]", arg56_1: "f32[1024]", arg57_1: "f32[1024, 1024]", arg58_1: "f32[1024]", arg59_1: "f32[1024, 1024]", arg60_1: "f32[1024]", arg61_1: "f32[1024]", arg62_1: "f32[1024]", arg63_1: "f32[4096, 1024]", arg64_1: "f32[4096]", arg65_1: "f32[1024, 4096]", arg66_1: "f32[1024]", arg67_1: "f32[1024]", arg68_1: "f32[1024]", arg69_1: "f32[1024, 1024]", arg70_1: "f32[1024]", arg71_1: "f32[1024, 1024]", arg72_1: "f32[1024]", arg73_1: "f32[1024, 1024]", arg74_1: "f32[1024]", arg75_1: "f32[1024, 1024]", arg76_1: "f32[1024]", arg77_1: "f32[1024]", arg78_1: "f32[1024]", arg79_1: "f32[4096, 1024]", arg80_1: "f32[4096]", arg81_1: "f32[1024, 4096]", arg82_1: "f32[1024]", arg83_1: "f32[1024]", arg84_1: "f32[1024]", arg85_1: "f32[1024, 1024]", arg86_1: "f32[1024]", arg87_1: "f32[1024, 1024]", arg88_1: "f32[1024]", arg89_1: "f32[1024, 1024]", arg90_1: "f32[1024]", arg91_1: "f32[1024, 1024]", arg92_1: "f32[1024]", arg93_1: "f32[1024]", arg94_1: "f32[1024]", arg95_1: "f32[4096, 1024]", arg96_1: "f32[4096]", arg97_1: "f32[1024, 4096]", arg98_1: "f32[1024]", arg99_1: "f32[1024]", arg100_1: "f32[1024]", arg101_1: "f32[1024, 1024]", arg102_1: "f32[1024]", arg103_1: "f32[1024, 1024]", arg104_1: "f32[1024]", arg105_1: "f32[1024, 1024]", arg106_1: "f32[1024]", arg107_1: "f32[1024, 1024]", arg108_1: "f32[1024]", arg109_1: "f32[1024]", arg110_1: "f32[1024]", arg111_1: "f32[4096, 1024]", arg112_1: "f32[4096]", arg113_1: "f32[1024, 4096]", arg114_1: "f32[1024]", arg115_1: "f32[1024]", arg116_1: "f32[1024]", arg117_1: "f32[1024, 1024]", arg118_1: "f32[1024]", arg119_1: "f32[1024, 1024]", arg120_1: "f32[1024]", arg121_1: "f32[1024, 1024]", arg122_1: "f32[1024]", arg123_1: "f32[1024, 1024]", arg124_1: "f32[1024]", arg125_1: "f32[1024]", arg126_1: "f32[1024]", arg127_1: "f32[4096, 1024]", arg128_1: "f32[4096]", arg129_1: "f32[1024, 4096]", arg130_1: "f32[1024]", arg131_1: "f32[1024]", arg132_1: "f32[1024]", arg133_1: "f32[1024, 1024]", arg134_1: "f32[1024]", arg135_1: "f32[1024, 1024]", arg136_1: "f32[1024]", arg137_1: "f32[1024, 1024]", arg138_1: "f32[1024]", arg139_1: "f32[1024, 1024]", arg140_1: "f32[1024]", arg141_1: "f32[1024]", arg142_1: "f32[1024]", arg143_1: "f32[4096, 1024]", arg144_1: "f32[4096]", arg145_1: "f32[1024, 4096]", arg146_1: "f32[1024]", arg147_1: "f32[1024]", arg148_1: "f32[1024]", arg149_1: "f32[1024, 1024]", arg150_1: "f32[1024]", arg151_1: "f32[1024, 1024]", arg152_1: "f32[1024]", arg153_1: "f32[1024, 1024]", arg154_1: "f32[1024]", arg155_1: "f32[1024, 1024]", arg156_1: "f32[1024]", arg157_1: "f32[1024]", arg158_1: "f32[1024]", arg159_1: "f32[4096, 1024]", arg160_1: "f32[4096]", arg161_1: "f32[1024, 4096]", arg162_1: "f32[1024]", arg163_1: "f32[1024]", arg164_1: "f32[1024]", arg165_1: "f32[1024, 1024]", arg166_1: "f32[1024]", arg167_1: "f32[1024, 1024]", arg168_1: "f32[1024]", arg169_1: "f32[1024, 1024]", arg170_1: "f32[1024]", arg171_1: "f32[1024, 1024]", arg172_1: "f32[1024]", arg173_1: "f32[1024]", arg174_1: "f32[1024]", arg175_1: "f32[4096, 1024]", arg176_1: "f32[4096]", arg177_1: "f32[1024, 4096]", arg178_1: "f32[1024]", arg179_1: "f32[1024]", arg180_1: "f32[1024]", arg181_1: "f32[1024, 1024]", arg182_1: "f32[1024]", arg183_1: "f32[1024, 1024]", arg184_1: "f32[1024]", arg185_1: "f32[1024, 1024]", arg186_1: "f32[1024]", arg187_1: "f32[1024, 1024]", arg188_1: "f32[1024]", arg189_1: "f32[1024]", arg190_1: "f32[1024]", arg191_1: "f32[4096, 1024]", arg192_1: "f32[4096]", arg193_1: "f32[1024, 4096]", arg194_1: "f32[1024]", arg195_1: "f32[1024]", arg196_1: "f32[1024]"):
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:196 in _expand_mask, code: inverted_mask = torch.tensor(1.0, dtype=dtype) - expanded_mask
        _tensor_constant0: "f32[]" = self._tensor_constant0;  _tensor_constant0 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:577 in forward, code: input_ids = input_ids.view(-1, input.shape[-1])
        view: "i64[2, 64]" = torch.ops.aten.reshape.default(arg0_1, [-1, 64]);  arg0_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:78 in forward, code: return super().forward(input_ids) * self.embed_scale
        embedding: "f32[2, 64, 1024]" = torch.ops.aten.embedding.default(arg1_1, view, 1);  arg1_1 = None
        mul: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(embedding, 32.0);  embedding = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:124 in forward, code: self.weights = self.weights.to(self._float_tensor)
        device_put: "f32[1026, 1024]" = torch.ops.prims.device_put.default(arg2_1, device(type='cuda', index=0));  arg2_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:138 in create_position_ids_from_input_ids, code: mask = input_ids.ne(padding_idx).int()
        ne: "b8[2, 64]" = torch.ops.aten.ne.Scalar(view, 1);  view = None
        convert_element_type: "i32[2, 64]" = torch.ops.prims.convert_element_type.default(ne, torch.int32);  ne = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:139 in create_position_ids_from_input_ids, code: incremental_indices = (torch.cumsum(mask, dim=1).type_as(mask) + past_key_values_length) * mask
        cumsum: "i64[2, 64]" = torch.ops.aten.cumsum.default(convert_element_type, 1)
        convert_element_type_1: "i32[2, 64]" = torch.ops.prims.convert_element_type.default(cumsum, torch.int32);  cumsum = None
        add: "i32[2, 64]" = torch.ops.aten.add.Tensor(convert_element_type_1, 0);  convert_element_type_1 = None
        mul_1: "i32[2, 64]" = torch.ops.aten.mul.Tensor(add, convert_element_type);  add = convert_element_type = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:140 in create_position_ids_from_input_ids, code: return incremental_indices.long() + padding_idx
        convert_element_type_2: "i64[2, 64]" = torch.ops.prims.convert_element_type.default(mul_1, torch.int64);  mul_1 = None
        add_1: "i64[2, 64]" = torch.ops.aten.add.Tensor(convert_element_type_2, 1);  convert_element_type_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:126 in forward, code: x = self.weights.index_select(0, position_ids.view(-1)).view(bsz, seq_len, -1).detach()
        view_1: "i64[128]" = torch.ops.aten.reshape.default(add_1, [-1]);  add_1 = None
        index: "f32[128, 1024]" = torch.ops.aten.index.Tensor(device_put, [view_1]);  view_1 = None
        view_2: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(index, [2, 64, -1]);  index = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:595 in forward, code: hidden_states = inputs_embeds + embed_pos
        add_2: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul, view_2);  mul = view_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_4: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_2, [128, 1024])
        permute: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg5_1, [1, 0]);  arg5_1 = None
        
        # No stacktrace found for following nodes
        mm_default_71: "f32[128, 1024]" = torch.ops.aten.mm.default(view_4, permute);  view_4 = permute = None
        add_tensor_71: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_71, arg6_1);  mm_default_71 = arg6_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_5: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_71, [2, 64, 1024]);  add_tensor_71 = None
        mul_2: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_5, 0.125);  view_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_12: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(mul_2, [2, 64, 16, 64]);  mul_2 = None
        permute_5: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_12, [0, 2, 1, 3]);  view_12 = None
        clone_3: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_5, memory_format = torch.contiguous_format);  permute_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_13: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_3, [32, -1, 64]);  clone_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_6: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_2, [128, 1024])
        permute_1: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg7_1, [1, 0]);  arg7_1 = None
        
        # No stacktrace found for following nodes
        mm_default_70: "f32[128, 1024]" = torch.ops.aten.mm.default(view_6, permute_1);  view_6 = permute_1 = None
        add_tensor_70: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_70, arg8_1);  mm_default_70 = arg8_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_7: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_70, [2, 64, 1024]);  add_tensor_70 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_8: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_7, [2, -1, 16, 64]);  view_7 = None
        permute_2: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_8, [0, 2, 1, 3]);  view_8 = None
        clone_1: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_2, memory_format = torch.contiguous_format);  permute_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_14: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_1, [32, -1, 64]);  clone_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_6: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_14, [0, 2, 1]);  view_14 = None
        bmm: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_13, permute_6);  view_13 = permute_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_16: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm, [2, 16, 64, 64]);  bmm = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:196 in _expand_mask, code: inverted_mask = torch.tensor(1.0, dtype=dtype) - expanded_mask
        full_default_2: "f32[]" = torch.ops.aten.full.default([], 1.0, dtype = torch.float32, layout = torch.strided, device = device(type='cpu'), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:194 in _expand_mask, code: expanded_mask = mask[:, None, None, :].expand(bsz, 1, tgt_len, src_len).to(dtype)
        unsqueeze_2: "i64[2, 1, 64]" = torch.ops.aten.unsqueeze.default(arg4_1, 1);  arg4_1 = None
        unsqueeze_3: "i64[2, 1, 1, 64]" = torch.ops.aten.unsqueeze.default(unsqueeze_2, 2);  unsqueeze_2 = None
        expand_1: "i64[2, 1, 64, 64]" = torch.ops.aten.expand.default(unsqueeze_3, [2, 1, 64, 64]);  unsqueeze_3 = None
        convert_element_type_4: "f32[2, 1, 64, 64]" = torch.ops.prims.convert_element_type.default(expand_1, torch.float32);  expand_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:196 in _expand_mask, code: inverted_mask = torch.tensor(1.0, dtype=dtype) - expanded_mask
        sub: "f32[2, 1, 64, 64]" = torch.ops.aten.sub.Tensor(full_default_2, convert_element_type_4);  full_default_2 = convert_element_type_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:198 in _expand_mask, code: return inverted_mask.masked_fill(inverted_mask.to(torch.bool), torch.finfo(dtype).min)
        convert_element_type_5: "b8[2, 1, 64, 64]" = torch.ops.prims.convert_element_type.default(sub, torch.bool)
        full_default_3: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where_1: "f32[2, 1, 64, 64]" = torch.ops.aten.where.self(convert_element_type_5, full_default_3, sub);  convert_element_type_5 = full_default_3 = sub = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:145 in to_4d, code: expanded_attn_mask = causal_4d_mask.masked_fill(expanded_attn_mask.bool(), torch.finfo(dtype).min)
        convert_element_type_6: "b8[2, 1, 64, 64]" = torch.ops.prims.convert_element_type.default(where_1, torch.bool);  where_1 = None
        full_default_4: "f32[]" = torch.ops.aten.full.default([], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:165 in _make_causal_mask, code: mask_cond = torch.arange(mask.size(-1), device=device)
        iota: "i64[64]" = torch.ops.prims.iota.default(64, start = 0, step = 1, dtype = torch.int64, device = device(type='cuda', index=0), requires_grad = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:166 in _make_causal_mask, code: mask.masked_fill_(mask_cond < (mask_cond + 1).view(mask.size(-1), 1), 0)
        add_3: "i64[64]" = torch.ops.aten.add.Tensor(iota, 1)
        view_3: "i64[64, 1]" = torch.ops.aten.reshape.default(add_3, [64, 1]);  add_3 = None
        lt: "b8[64, 64]" = torch.ops.aten.lt.Tensor(iota, view_3);  iota = view_3 = None
        full_default_1: "f32[]" = torch.ops.aten.full.default([], 0.0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:164 in _make_causal_mask, code: mask = torch.full((tgt_len, tgt_len), torch.finfo(dtype).min, device=device)
        full_default: "f32[64, 64]" = torch.ops.aten.full.default([64, 64], -3.4028234663852886e+38, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:166 in _make_causal_mask, code: mask.masked_fill_(mask_cond < (mask_cond + 1).view(mask.size(-1), 1), 0)
        where: "f32[64, 64]" = torch.ops.aten.where.self(lt, full_default_1, full_default);  lt = full_default_1 = full_default = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/modeling_attn_mask_utils.py:145 in to_4d, code: expanded_attn_mask = causal_4d_mask.masked_fill(expanded_attn_mask.bool(), torch.finfo(dtype).min)
        unsqueeze_4: "f32[1, 64, 64]" = torch.ops.aten.unsqueeze.default(where, 0);  where = None
        unsqueeze_5: "f32[1, 1, 64, 64]" = torch.ops.aten.unsqueeze.default(unsqueeze_4, 1);  unsqueeze_4 = None
        expand_2: "f32[2, 1, 64, 64]" = torch.ops.aten.expand.default(unsqueeze_5, [2, 1, 64, 64]);  unsqueeze_5 = None
        where_2: "f32[2, 1, 64, 64]" = torch.ops.aten.where.self(convert_element_type_6, full_default_4, expand_2);  convert_element_type_6 = full_default_4 = expand_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        add_4: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_16, where_2);  view_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_17: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(add_4, [32, 64, 64]);  add_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_17, [-1], True)
        sub_1: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_17, amax);  view_17 = amax = None
        exp: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_1);  sub_1 = None
        sum_1: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp, [-1], True)
        div: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp, sum_1);  exp = sum_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_9: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_2, [128, 1024])
        permute_3: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg9_1, [1, 0]);  arg9_1 = None
        
        # No stacktrace found for following nodes
        mm_default_69: "f32[128, 1024]" = torch.ops.aten.mm.default(view_9, permute_3);  view_9 = permute_3 = None
        add_tensor_69: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_69, arg10_1);  mm_default_69 = arg10_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_10: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_69, [2, 64, 1024]);  add_tensor_69 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_11: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_10, [2, -1, 16, 64]);  view_10 = None
        permute_4: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_11, [0, 2, 1, 3]);  view_11 = None
        clone_2: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_4, memory_format = torch.contiguous_format);  permute_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_15: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_2, [32, -1, 64]);  clone_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_1: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div, view_15);  div = view_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_18: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_1, [2, 16, 64, 64]);  bmm_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_7: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_18, [0, 2, 1, 3]);  view_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_5: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_7, memory_format = torch.contiguous_format);  permute_7 = None
        view_19: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(clone_5, [2, 64, 1024]);  clone_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_20: "f32[128, 1024]" = torch.ops.aten.reshape.default(view_19, [128, 1024]);  view_19 = None
        permute_8: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg11_1, [1, 0]);  arg11_1 = None
        
        # No stacktrace found for following nodes
        mm_default_68: "f32[128, 1024]" = torch.ops.aten.mm.default(view_20, permute_8);  view_20 = permute_8 = None
        add_tensor_68: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_68, arg12_1);  mm_default_68 = arg12_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_21: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_68, [2, 64, 1024]);  add_tensor_68 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_5: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_2, view_21);  add_2 = view_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean = torch.ops.aten.var_mean.correction(add_5, [2], correction = 0, keepdim = True)
        getitem: "f32[2, 64, 1]" = var_mean[0]
        getitem_1: "f32[2, 64, 1]" = var_mean[1];  var_mean = None
        sub_2: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_5, getitem_1);  add_5 = getitem_1 = None
        add_6: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem, 1e-05);  getitem = None
        rsqrt: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_6);  add_6 = None
        mul_3: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_2, rsqrt);  sub_2 = rsqrt = None
        mul_4: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_3, arg13_1);  mul_3 = arg13_1 = None
        add_7: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_4, arg14_1);  mul_4 = arg14_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_22: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_7, [128, 1024])
        permute_9: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg15_1, [1, 0]);  arg15_1 = None
        
        # No stacktrace found for following nodes
        mm_default_67: "f32[128, 4096]" = torch.ops.aten.mm.default(view_22, permute_9);  view_22 = permute_9 = None
        add_tensor_67: "f32[128, 4096]" = torch.ops.aten.add.Tensor(mm_default_67, arg16_1);  mm_default_67 = arg16_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_23: "f32[2, 64, 4096]" = torch.ops.aten.reshape.default(add_tensor_67, [2, 64, 4096]);  add_tensor_67 = None
        relu: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_23);  view_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_24: "f32[128, 4096]" = torch.ops.aten.reshape.default(relu, [128, 4096]);  relu = None
        permute_10: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg17_1, [1, 0]);  arg17_1 = None
        
        # No stacktrace found for following nodes
        mm_default_66: "f32[128, 1024]" = torch.ops.aten.mm.default(view_24, permute_10);  view_24 = permute_10 = None
        add_tensor_66: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_66, arg18_1);  mm_default_66 = arg18_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_25: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_66, [2, 64, 1024]);  add_tensor_66 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_8: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_7, view_25);  add_7 = view_25 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_1 = torch.ops.aten.var_mean.correction(add_8, [2], correction = 0, keepdim = True)
        getitem_2: "f32[2, 64, 1]" = var_mean_1[0]
        getitem_3: "f32[2, 64, 1]" = var_mean_1[1];  var_mean_1 = None
        sub_3: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_8, getitem_3);  add_8 = getitem_3 = None
        add_9: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_2, 1e-05);  getitem_2 = None
        rsqrt_1: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_9);  add_9 = None
        mul_5: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_3, rsqrt_1);  sub_3 = rsqrt_1 = None
        mul_6: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_5, arg19_1);  mul_5 = arg19_1 = None
        add_10: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_6, arg20_1);  mul_6 = arg20_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_26: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_10, [128, 1024])
        permute_11: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg21_1, [1, 0]);  arg21_1 = None
        
        # No stacktrace found for following nodes
        mm_default_65: "f32[128, 1024]" = torch.ops.aten.mm.default(view_26, permute_11);  view_26 = permute_11 = None
        add_tensor_65: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_65, arg22_1);  mm_default_65 = arg22_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_27: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_65, [2, 64, 1024]);  add_tensor_65 = None
        mul_7: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_27, 0.125);  view_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_34: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(mul_7, [2, 64, 16, 64]);  mul_7 = None
        permute_16: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_34, [0, 2, 1, 3]);  view_34 = None
        clone_11: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_16, memory_format = torch.contiguous_format);  permute_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_35: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_11, [32, -1, 64]);  clone_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_28: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_10, [128, 1024])
        permute_12: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg23_1, [1, 0]);  arg23_1 = None
        
        # No stacktrace found for following nodes
        mm_default_64: "f32[128, 1024]" = torch.ops.aten.mm.default(view_28, permute_12);  view_28 = permute_12 = None
        add_tensor_64: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_64, arg24_1);  mm_default_64 = arg24_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_29: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_64, [2, 64, 1024]);  add_tensor_64 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_30: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_29, [2, -1, 16, 64]);  view_29 = None
        permute_13: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_30, [0, 2, 1, 3]);  view_30 = None
        clone_9: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_13, memory_format = torch.contiguous_format);  permute_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_36: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_9, [32, -1, 64]);  clone_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_17: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_36, [0, 2, 1]);  view_36 = None
        bmm_2: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_35, permute_17);  view_35 = permute_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_38: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_2, [2, 16, 64, 64]);  bmm_2 = None
        add_11: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_38, where_2);  view_38 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_39: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(add_11, [32, 64, 64]);  add_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_1: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_39, [-1], True)
        sub_4: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_39, amax_1);  view_39 = amax_1 = None
        exp_1: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_4);  sub_4 = None
        sum_2: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_1, [-1], True)
        div_1: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_1, sum_2);  exp_1 = sum_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_31: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_10, [128, 1024])
        permute_14: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg25_1, [1, 0]);  arg25_1 = None
        
        # No stacktrace found for following nodes
        mm_default_63: "f32[128, 1024]" = torch.ops.aten.mm.default(view_31, permute_14);  view_31 = permute_14 = None
        add_tensor_63: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_63, arg26_1);  mm_default_63 = arg26_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_32: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_63, [2, 64, 1024]);  add_tensor_63 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_33: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_32, [2, -1, 16, 64]);  view_32 = None
        permute_15: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_33, [0, 2, 1, 3]);  view_33 = None
        clone_10: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_15, memory_format = torch.contiguous_format);  permute_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_37: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_10, [32, -1, 64]);  clone_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_3: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_1, view_37);  div_1 = view_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_40: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_3, [2, 16, 64, 64]);  bmm_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_18: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_40, [0, 2, 1, 3]);  view_40 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_13: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_18, memory_format = torch.contiguous_format);  permute_18 = None
        view_41: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(clone_13, [2, 64, 1024]);  clone_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_42: "f32[128, 1024]" = torch.ops.aten.reshape.default(view_41, [128, 1024]);  view_41 = None
        permute_19: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg27_1, [1, 0]);  arg27_1 = None
        
        # No stacktrace found for following nodes
        mm_default_62: "f32[128, 1024]" = torch.ops.aten.mm.default(view_42, permute_19);  view_42 = permute_19 = None
        add_tensor_62: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_62, arg28_1);  mm_default_62 = arg28_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_43: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_62, [2, 64, 1024]);  add_tensor_62 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_12: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_10, view_43);  add_10 = view_43 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_2 = torch.ops.aten.var_mean.correction(add_12, [2], correction = 0, keepdim = True)
        getitem_4: "f32[2, 64, 1]" = var_mean_2[0]
        getitem_5: "f32[2, 64, 1]" = var_mean_2[1];  var_mean_2 = None
        sub_5: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_12, getitem_5);  add_12 = getitem_5 = None
        add_13: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_4, 1e-05);  getitem_4 = None
        rsqrt_2: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_13);  add_13 = None
        mul_8: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_5, rsqrt_2);  sub_5 = rsqrt_2 = None
        mul_9: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_8, arg29_1);  mul_8 = arg29_1 = None
        add_14: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_9, arg30_1);  mul_9 = arg30_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_44: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_14, [128, 1024])
        permute_20: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg31_1, [1, 0]);  arg31_1 = None
        
        # No stacktrace found for following nodes
        mm_default_61: "f32[128, 4096]" = torch.ops.aten.mm.default(view_44, permute_20);  view_44 = permute_20 = None
        add_tensor_61: "f32[128, 4096]" = torch.ops.aten.add.Tensor(mm_default_61, arg32_1);  mm_default_61 = arg32_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_45: "f32[2, 64, 4096]" = torch.ops.aten.reshape.default(add_tensor_61, [2, 64, 4096]);  add_tensor_61 = None
        relu_1: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_45);  view_45 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_46: "f32[128, 4096]" = torch.ops.aten.reshape.default(relu_1, [128, 4096]);  relu_1 = None
        permute_21: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg33_1, [1, 0]);  arg33_1 = None
        
        # No stacktrace found for following nodes
        mm_default_60: "f32[128, 1024]" = torch.ops.aten.mm.default(view_46, permute_21);  view_46 = permute_21 = None
        add_tensor_60: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_60, arg34_1);  mm_default_60 = arg34_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_47: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_60, [2, 64, 1024]);  add_tensor_60 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_15: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_14, view_47);  add_14 = view_47 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_3 = torch.ops.aten.var_mean.correction(add_15, [2], correction = 0, keepdim = True)
        getitem_6: "f32[2, 64, 1]" = var_mean_3[0]
        getitem_7: "f32[2, 64, 1]" = var_mean_3[1];  var_mean_3 = None
        sub_6: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_15, getitem_7);  add_15 = getitem_7 = None
        add_16: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_6, 1e-05);  getitem_6 = None
        rsqrt_3: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_16);  add_16 = None
        mul_10: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_6, rsqrt_3);  sub_6 = rsqrt_3 = None
        mul_11: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_10, arg35_1);  mul_10 = arg35_1 = None
        add_17: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_11, arg36_1);  mul_11 = arg36_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_48: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_17, [128, 1024])
        permute_22: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg37_1, [1, 0]);  arg37_1 = None
        
        # No stacktrace found for following nodes
        mm_default_59: "f32[128, 1024]" = torch.ops.aten.mm.default(view_48, permute_22);  view_48 = permute_22 = None
        add_tensor_59: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_59, arg38_1);  mm_default_59 = arg38_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_49: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_59, [2, 64, 1024]);  add_tensor_59 = None
        mul_12: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_49, 0.125);  view_49 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_56: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(mul_12, [2, 64, 16, 64]);  mul_12 = None
        permute_27: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_56, [0, 2, 1, 3]);  view_56 = None
        clone_19: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_27, memory_format = torch.contiguous_format);  permute_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_57: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_19, [32, -1, 64]);  clone_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_50: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_17, [128, 1024])
        permute_23: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg39_1, [1, 0]);  arg39_1 = None
        
        # No stacktrace found for following nodes
        mm_default_58: "f32[128, 1024]" = torch.ops.aten.mm.default(view_50, permute_23);  view_50 = permute_23 = None
        add_tensor_58: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_58, arg40_1);  mm_default_58 = arg40_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_51: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_58, [2, 64, 1024]);  add_tensor_58 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_52: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_51, [2, -1, 16, 64]);  view_51 = None
        permute_24: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_52, [0, 2, 1, 3]);  view_52 = None
        clone_17: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_24, memory_format = torch.contiguous_format);  permute_24 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_58: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_17, [32, -1, 64]);  clone_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_28: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_58, [0, 2, 1]);  view_58 = None
        bmm_4: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_57, permute_28);  view_57 = permute_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_60: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_4, [2, 16, 64, 64]);  bmm_4 = None
        add_18: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_60, where_2);  view_60 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_61: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(add_18, [32, 64, 64]);  add_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_2: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_61, [-1], True)
        sub_7: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_61, amax_2);  view_61 = amax_2 = None
        exp_2: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_7);  sub_7 = None
        sum_3: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_2, [-1], True)
        div_2: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_2, sum_3);  exp_2 = sum_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_53: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_17, [128, 1024])
        permute_25: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg41_1, [1, 0]);  arg41_1 = None
        
        # No stacktrace found for following nodes
        mm_default_57: "f32[128, 1024]" = torch.ops.aten.mm.default(view_53, permute_25);  view_53 = permute_25 = None
        add_tensor_57: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_57, arg42_1);  mm_default_57 = arg42_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_54: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_57, [2, 64, 1024]);  add_tensor_57 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_55: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_54, [2, -1, 16, 64]);  view_54 = None
        permute_26: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_55, [0, 2, 1, 3]);  view_55 = None
        clone_18: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_26, memory_format = torch.contiguous_format);  permute_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_59: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_18, [32, -1, 64]);  clone_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_5: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_2, view_59);  div_2 = view_59 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_62: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_5, [2, 16, 64, 64]);  bmm_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_29: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_62, [0, 2, 1, 3]);  view_62 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_21: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_29, memory_format = torch.contiguous_format);  permute_29 = None
        view_63: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(clone_21, [2, 64, 1024]);  clone_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_64: "f32[128, 1024]" = torch.ops.aten.reshape.default(view_63, [128, 1024]);  view_63 = None
        permute_30: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg43_1, [1, 0]);  arg43_1 = None
        
        # No stacktrace found for following nodes
        mm_default_56: "f32[128, 1024]" = torch.ops.aten.mm.default(view_64, permute_30);  view_64 = permute_30 = None
        add_tensor_56: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_56, arg44_1);  mm_default_56 = arg44_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_65: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_56, [2, 64, 1024]);  add_tensor_56 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_19: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_17, view_65);  add_17 = view_65 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_4 = torch.ops.aten.var_mean.correction(add_19, [2], correction = 0, keepdim = True)
        getitem_8: "f32[2, 64, 1]" = var_mean_4[0]
        getitem_9: "f32[2, 64, 1]" = var_mean_4[1];  var_mean_4 = None
        sub_8: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_19, getitem_9);  add_19 = getitem_9 = None
        add_20: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_8, 1e-05);  getitem_8 = None
        rsqrt_4: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_20);  add_20 = None
        mul_13: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_8, rsqrt_4);  sub_8 = rsqrt_4 = None
        mul_14: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_13, arg45_1);  mul_13 = arg45_1 = None
        add_21: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_14, arg46_1);  mul_14 = arg46_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_66: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_21, [128, 1024])
        permute_31: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg47_1, [1, 0]);  arg47_1 = None
        
        # No stacktrace found for following nodes
        mm_default_55: "f32[128, 4096]" = torch.ops.aten.mm.default(view_66, permute_31);  view_66 = permute_31 = None
        add_tensor_55: "f32[128, 4096]" = torch.ops.aten.add.Tensor(mm_default_55, arg48_1);  mm_default_55 = arg48_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_67: "f32[2, 64, 4096]" = torch.ops.aten.reshape.default(add_tensor_55, [2, 64, 4096]);  add_tensor_55 = None
        relu_2: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_67);  view_67 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_68: "f32[128, 4096]" = torch.ops.aten.reshape.default(relu_2, [128, 4096]);  relu_2 = None
        permute_32: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg49_1, [1, 0]);  arg49_1 = None
        
        # No stacktrace found for following nodes
        mm_default_54: "f32[128, 1024]" = torch.ops.aten.mm.default(view_68, permute_32);  view_68 = permute_32 = None
        add_tensor_54: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_54, arg50_1);  mm_default_54 = arg50_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_69: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_54, [2, 64, 1024]);  add_tensor_54 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_22: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_21, view_69);  add_21 = view_69 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_5 = torch.ops.aten.var_mean.correction(add_22, [2], correction = 0, keepdim = True)
        getitem_10: "f32[2, 64, 1]" = var_mean_5[0]
        getitem_11: "f32[2, 64, 1]" = var_mean_5[1];  var_mean_5 = None
        sub_9: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_22, getitem_11);  add_22 = getitem_11 = None
        add_23: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_10, 1e-05);  getitem_10 = None
        rsqrt_5: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_23);  add_23 = None
        mul_15: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_9, rsqrt_5);  sub_9 = rsqrt_5 = None
        mul_16: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_15, arg51_1);  mul_15 = arg51_1 = None
        add_24: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_16, arg52_1);  mul_16 = arg52_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_70: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_24, [128, 1024])
        permute_33: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg53_1, [1, 0]);  arg53_1 = None
        
        # No stacktrace found for following nodes
        mm_default_53: "f32[128, 1024]" = torch.ops.aten.mm.default(view_70, permute_33);  view_70 = permute_33 = None
        add_tensor_53: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_53, arg54_1);  mm_default_53 = arg54_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_71: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_53, [2, 64, 1024]);  add_tensor_53 = None
        mul_17: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_71, 0.125);  view_71 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_78: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(mul_17, [2, 64, 16, 64]);  mul_17 = None
        permute_38: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_78, [0, 2, 1, 3]);  view_78 = None
        clone_27: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_38, memory_format = torch.contiguous_format);  permute_38 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_79: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_27, [32, -1, 64]);  clone_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_72: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_24, [128, 1024])
        permute_34: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg55_1, [1, 0]);  arg55_1 = None
        
        # No stacktrace found for following nodes
        mm_default_52: "f32[128, 1024]" = torch.ops.aten.mm.default(view_72, permute_34);  view_72 = permute_34 = None
        add_tensor_52: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_52, arg56_1);  mm_default_52 = arg56_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_73: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_52, [2, 64, 1024]);  add_tensor_52 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_74: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_73, [2, -1, 16, 64]);  view_73 = None
        permute_35: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_74, [0, 2, 1, 3]);  view_74 = None
        clone_25: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_35, memory_format = torch.contiguous_format);  permute_35 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_80: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_25, [32, -1, 64]);  clone_25 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_39: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_80, [0, 2, 1]);  view_80 = None
        bmm_6: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_79, permute_39);  view_79 = permute_39 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_82: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_6, [2, 16, 64, 64]);  bmm_6 = None
        add_25: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_82, where_2);  view_82 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_83: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(add_25, [32, 64, 64]);  add_25 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_3: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_83, [-1], True)
        sub_10: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_83, amax_3);  view_83 = amax_3 = None
        exp_3: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_10);  sub_10 = None
        sum_4: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_3, [-1], True)
        div_3: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_3, sum_4);  exp_3 = sum_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_75: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_24, [128, 1024])
        permute_36: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg57_1, [1, 0]);  arg57_1 = None
        
        # No stacktrace found for following nodes
        mm_default_51: "f32[128, 1024]" = torch.ops.aten.mm.default(view_75, permute_36);  view_75 = permute_36 = None
        add_tensor_51: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_51, arg58_1);  mm_default_51 = arg58_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_76: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_51, [2, 64, 1024]);  add_tensor_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_77: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_76, [2, -1, 16, 64]);  view_76 = None
        permute_37: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_77, [0, 2, 1, 3]);  view_77 = None
        clone_26: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_37, memory_format = torch.contiguous_format);  permute_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_81: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_26, [32, -1, 64]);  clone_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_7: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_3, view_81);  div_3 = view_81 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_84: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_7, [2, 16, 64, 64]);  bmm_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_40: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_84, [0, 2, 1, 3]);  view_84 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_29: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_40, memory_format = torch.contiguous_format);  permute_40 = None
        view_85: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(clone_29, [2, 64, 1024]);  clone_29 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_86: "f32[128, 1024]" = torch.ops.aten.reshape.default(view_85, [128, 1024]);  view_85 = None
        permute_41: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg59_1, [1, 0]);  arg59_1 = None
        
        # No stacktrace found for following nodes
        mm_default_50: "f32[128, 1024]" = torch.ops.aten.mm.default(view_86, permute_41);  view_86 = permute_41 = None
        add_tensor_50: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_50, arg60_1);  mm_default_50 = arg60_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_87: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_50, [2, 64, 1024]);  add_tensor_50 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_26: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_24, view_87);  add_24 = view_87 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_6 = torch.ops.aten.var_mean.correction(add_26, [2], correction = 0, keepdim = True)
        getitem_12: "f32[2, 64, 1]" = var_mean_6[0]
        getitem_13: "f32[2, 64, 1]" = var_mean_6[1];  var_mean_6 = None
        sub_11: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_26, getitem_13);  add_26 = getitem_13 = None
        add_27: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_12, 1e-05);  getitem_12 = None
        rsqrt_6: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_27);  add_27 = None
        mul_18: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_11, rsqrt_6);  sub_11 = rsqrt_6 = None
        mul_19: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_18, arg61_1);  mul_18 = arg61_1 = None
        add_28: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_19, arg62_1);  mul_19 = arg62_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_88: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_28, [128, 1024])
        permute_42: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg63_1, [1, 0]);  arg63_1 = None
        
        # No stacktrace found for following nodes
        mm_default_49: "f32[128, 4096]" = torch.ops.aten.mm.default(view_88, permute_42);  view_88 = permute_42 = None
        add_tensor_49: "f32[128, 4096]" = torch.ops.aten.add.Tensor(mm_default_49, arg64_1);  mm_default_49 = arg64_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_89: "f32[2, 64, 4096]" = torch.ops.aten.reshape.default(add_tensor_49, [2, 64, 4096]);  add_tensor_49 = None
        relu_3: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_89);  view_89 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_90: "f32[128, 4096]" = torch.ops.aten.reshape.default(relu_3, [128, 4096]);  relu_3 = None
        permute_43: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg65_1, [1, 0]);  arg65_1 = None
        
        # No stacktrace found for following nodes
        mm_default_48: "f32[128, 1024]" = torch.ops.aten.mm.default(view_90, permute_43);  view_90 = permute_43 = None
        add_tensor_48: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_48, arg66_1);  mm_default_48 = arg66_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_91: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_48, [2, 64, 1024]);  add_tensor_48 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_29: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_28, view_91);  add_28 = view_91 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_7 = torch.ops.aten.var_mean.correction(add_29, [2], correction = 0, keepdim = True)
        getitem_14: "f32[2, 64, 1]" = var_mean_7[0]
        getitem_15: "f32[2, 64, 1]" = var_mean_7[1];  var_mean_7 = None
        sub_12: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_29, getitem_15);  add_29 = getitem_15 = None
        add_30: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_14, 1e-05);  getitem_14 = None
        rsqrt_7: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_30);  add_30 = None
        mul_20: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_12, rsqrt_7);  sub_12 = rsqrt_7 = None
        mul_21: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_20, arg67_1);  mul_20 = arg67_1 = None
        add_31: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_21, arg68_1);  mul_21 = arg68_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_92: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_31, [128, 1024])
        permute_44: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg69_1, [1, 0]);  arg69_1 = None
        
        # No stacktrace found for following nodes
        mm_default_47: "f32[128, 1024]" = torch.ops.aten.mm.default(view_92, permute_44);  view_92 = permute_44 = None
        add_tensor_47: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_47, arg70_1);  mm_default_47 = arg70_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_93: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_47, [2, 64, 1024]);  add_tensor_47 = None
        mul_22: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_93, 0.125);  view_93 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_100: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(mul_22, [2, 64, 16, 64]);  mul_22 = None
        permute_49: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_100, [0, 2, 1, 3]);  view_100 = None
        clone_35: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_49, memory_format = torch.contiguous_format);  permute_49 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_101: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_35, [32, -1, 64]);  clone_35 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_94: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_31, [128, 1024])
        permute_45: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg71_1, [1, 0]);  arg71_1 = None
        
        # No stacktrace found for following nodes
        mm_default_46: "f32[128, 1024]" = torch.ops.aten.mm.default(view_94, permute_45);  view_94 = permute_45 = None
        add_tensor_46: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_46, arg72_1);  mm_default_46 = arg72_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_95: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_46, [2, 64, 1024]);  add_tensor_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_96: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_95, [2, -1, 16, 64]);  view_95 = None
        permute_46: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_96, [0, 2, 1, 3]);  view_96 = None
        clone_33: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_46, memory_format = torch.contiguous_format);  permute_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_102: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_33, [32, -1, 64]);  clone_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_50: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_102, [0, 2, 1]);  view_102 = None
        bmm_8: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_101, permute_50);  view_101 = permute_50 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_104: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_8, [2, 16, 64, 64]);  bmm_8 = None
        add_32: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_104, where_2);  view_104 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_105: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(add_32, [32, 64, 64]);  add_32 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_4: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_105, [-1], True)
        sub_13: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_105, amax_4);  view_105 = amax_4 = None
        exp_4: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_13);  sub_13 = None
        sum_5: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_4, [-1], True)
        div_4: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_4, sum_5);  exp_4 = sum_5 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_97: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_31, [128, 1024])
        permute_47: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg73_1, [1, 0]);  arg73_1 = None
        
        # No stacktrace found for following nodes
        mm_default_45: "f32[128, 1024]" = torch.ops.aten.mm.default(view_97, permute_47);  view_97 = permute_47 = None
        add_tensor_45: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_45, arg74_1);  mm_default_45 = arg74_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_98: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_45, [2, 64, 1024]);  add_tensor_45 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_99: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_98, [2, -1, 16, 64]);  view_98 = None
        permute_48: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_99, [0, 2, 1, 3]);  view_99 = None
        clone_34: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_48, memory_format = torch.contiguous_format);  permute_48 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_103: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_34, [32, -1, 64]);  clone_34 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_9: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_4, view_103);  div_4 = view_103 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_106: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_9, [2, 16, 64, 64]);  bmm_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_51: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_106, [0, 2, 1, 3]);  view_106 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_37: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_51, memory_format = torch.contiguous_format);  permute_51 = None
        view_107: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(clone_37, [2, 64, 1024]);  clone_37 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_108: "f32[128, 1024]" = torch.ops.aten.reshape.default(view_107, [128, 1024]);  view_107 = None
        permute_52: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg75_1, [1, 0]);  arg75_1 = None
        
        # No stacktrace found for following nodes
        mm_default_44: "f32[128, 1024]" = torch.ops.aten.mm.default(view_108, permute_52);  view_108 = permute_52 = None
        add_tensor_44: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_44, arg76_1);  mm_default_44 = arg76_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_109: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_44, [2, 64, 1024]);  add_tensor_44 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_33: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_31, view_109);  add_31 = view_109 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_8 = torch.ops.aten.var_mean.correction(add_33, [2], correction = 0, keepdim = True)
        getitem_16: "f32[2, 64, 1]" = var_mean_8[0]
        getitem_17: "f32[2, 64, 1]" = var_mean_8[1];  var_mean_8 = None
        sub_14: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_33, getitem_17);  add_33 = getitem_17 = None
        add_34: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_16, 1e-05);  getitem_16 = None
        rsqrt_8: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_34);  add_34 = None
        mul_23: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_14, rsqrt_8);  sub_14 = rsqrt_8 = None
        mul_24: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_23, arg77_1);  mul_23 = arg77_1 = None
        add_35: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_24, arg78_1);  mul_24 = arg78_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_110: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_35, [128, 1024])
        permute_53: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg79_1, [1, 0]);  arg79_1 = None
        
        # No stacktrace found for following nodes
        mm_default_43: "f32[128, 4096]" = torch.ops.aten.mm.default(view_110, permute_53);  view_110 = permute_53 = None
        add_tensor_43: "f32[128, 4096]" = torch.ops.aten.add.Tensor(mm_default_43, arg80_1);  mm_default_43 = arg80_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_111: "f32[2, 64, 4096]" = torch.ops.aten.reshape.default(add_tensor_43, [2, 64, 4096]);  add_tensor_43 = None
        relu_4: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_111);  view_111 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_112: "f32[128, 4096]" = torch.ops.aten.reshape.default(relu_4, [128, 4096]);  relu_4 = None
        permute_54: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg81_1, [1, 0]);  arg81_1 = None
        
        # No stacktrace found for following nodes
        mm_default_42: "f32[128, 1024]" = torch.ops.aten.mm.default(view_112, permute_54);  view_112 = permute_54 = None
        add_tensor_42: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_42, arg82_1);  mm_default_42 = arg82_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_113: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_42, [2, 64, 1024]);  add_tensor_42 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_36: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_35, view_113);  add_35 = view_113 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_9 = torch.ops.aten.var_mean.correction(add_36, [2], correction = 0, keepdim = True)
        getitem_18: "f32[2, 64, 1]" = var_mean_9[0]
        getitem_19: "f32[2, 64, 1]" = var_mean_9[1];  var_mean_9 = None
        sub_15: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_36, getitem_19);  add_36 = getitem_19 = None
        add_37: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_18, 1e-05);  getitem_18 = None
        rsqrt_9: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_37);  add_37 = None
        mul_25: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_15, rsqrt_9);  sub_15 = rsqrt_9 = None
        mul_26: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_25, arg83_1);  mul_25 = arg83_1 = None
        add_38: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_26, arg84_1);  mul_26 = arg84_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_114: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_38, [128, 1024])
        permute_55: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg85_1, [1, 0]);  arg85_1 = None
        
        # No stacktrace found for following nodes
        mm_default_41: "f32[128, 1024]" = torch.ops.aten.mm.default(view_114, permute_55);  view_114 = permute_55 = None
        add_tensor_41: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_41, arg86_1);  mm_default_41 = arg86_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_115: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_41, [2, 64, 1024]);  add_tensor_41 = None
        mul_27: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_115, 0.125);  view_115 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_122: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(mul_27, [2, 64, 16, 64]);  mul_27 = None
        permute_60: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_122, [0, 2, 1, 3]);  view_122 = None
        clone_43: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_60, memory_format = torch.contiguous_format);  permute_60 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_123: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_43, [32, -1, 64]);  clone_43 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_116: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_38, [128, 1024])
        permute_56: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg87_1, [1, 0]);  arg87_1 = None
        
        # No stacktrace found for following nodes
        mm_default_40: "f32[128, 1024]" = torch.ops.aten.mm.default(view_116, permute_56);  view_116 = permute_56 = None
        add_tensor_40: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_40, arg88_1);  mm_default_40 = arg88_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_117: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_40, [2, 64, 1024]);  add_tensor_40 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_118: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_117, [2, -1, 16, 64]);  view_117 = None
        permute_57: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_118, [0, 2, 1, 3]);  view_118 = None
        clone_41: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_57, memory_format = torch.contiguous_format);  permute_57 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_124: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_41, [32, -1, 64]);  clone_41 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_61: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_124, [0, 2, 1]);  view_124 = None
        bmm_10: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_123, permute_61);  view_123 = permute_61 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_126: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_10, [2, 16, 64, 64]);  bmm_10 = None
        add_39: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_126, where_2);  view_126 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_127: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(add_39, [32, 64, 64]);  add_39 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_5: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_127, [-1], True)
        sub_16: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_127, amax_5);  view_127 = amax_5 = None
        exp_5: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_16);  sub_16 = None
        sum_6: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_5, [-1], True)
        div_5: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_5, sum_6);  exp_5 = sum_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_119: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_38, [128, 1024])
        permute_58: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg89_1, [1, 0]);  arg89_1 = None
        
        # No stacktrace found for following nodes
        mm_default_39: "f32[128, 1024]" = torch.ops.aten.mm.default(view_119, permute_58);  view_119 = permute_58 = None
        add_tensor_39: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_39, arg90_1);  mm_default_39 = arg90_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_120: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_39, [2, 64, 1024]);  add_tensor_39 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_121: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_120, [2, -1, 16, 64]);  view_120 = None
        permute_59: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_121, [0, 2, 1, 3]);  view_121 = None
        clone_42: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_59, memory_format = torch.contiguous_format);  permute_59 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_125: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_42, [32, -1, 64]);  clone_42 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_11: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_5, view_125);  div_5 = view_125 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_128: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_11, [2, 16, 64, 64]);  bmm_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_62: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_128, [0, 2, 1, 3]);  view_128 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_45: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_62, memory_format = torch.contiguous_format);  permute_62 = None
        view_129: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(clone_45, [2, 64, 1024]);  clone_45 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_130: "f32[128, 1024]" = torch.ops.aten.reshape.default(view_129, [128, 1024]);  view_129 = None
        permute_63: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg91_1, [1, 0]);  arg91_1 = None
        
        # No stacktrace found for following nodes
        mm_default_38: "f32[128, 1024]" = torch.ops.aten.mm.default(view_130, permute_63);  view_130 = permute_63 = None
        add_tensor_38: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_38, arg92_1);  mm_default_38 = arg92_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_131: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_38, [2, 64, 1024]);  add_tensor_38 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_40: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_38, view_131);  add_38 = view_131 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_10 = torch.ops.aten.var_mean.correction(add_40, [2], correction = 0, keepdim = True)
        getitem_20: "f32[2, 64, 1]" = var_mean_10[0]
        getitem_21: "f32[2, 64, 1]" = var_mean_10[1];  var_mean_10 = None
        sub_17: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_40, getitem_21);  add_40 = getitem_21 = None
        add_41: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_20, 1e-05);  getitem_20 = None
        rsqrt_10: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_41);  add_41 = None
        mul_28: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_17, rsqrt_10);  sub_17 = rsqrt_10 = None
        mul_29: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_28, arg93_1);  mul_28 = arg93_1 = None
        add_42: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_29, arg94_1);  mul_29 = arg94_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_132: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_42, [128, 1024])
        permute_64: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg95_1, [1, 0]);  arg95_1 = None
        
        # No stacktrace found for following nodes
        mm_default_37: "f32[128, 4096]" = torch.ops.aten.mm.default(view_132, permute_64);  view_132 = permute_64 = None
        add_tensor_37: "f32[128, 4096]" = torch.ops.aten.add.Tensor(mm_default_37, arg96_1);  mm_default_37 = arg96_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_133: "f32[2, 64, 4096]" = torch.ops.aten.reshape.default(add_tensor_37, [2, 64, 4096]);  add_tensor_37 = None
        relu_5: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_133);  view_133 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_134: "f32[128, 4096]" = torch.ops.aten.reshape.default(relu_5, [128, 4096]);  relu_5 = None
        permute_65: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg97_1, [1, 0]);  arg97_1 = None
        
        # No stacktrace found for following nodes
        mm_default_36: "f32[128, 1024]" = torch.ops.aten.mm.default(view_134, permute_65);  view_134 = permute_65 = None
        add_tensor_36: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_36, arg98_1);  mm_default_36 = arg98_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_135: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_36, [2, 64, 1024]);  add_tensor_36 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_43: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_42, view_135);  add_42 = view_135 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_11 = torch.ops.aten.var_mean.correction(add_43, [2], correction = 0, keepdim = True)
        getitem_22: "f32[2, 64, 1]" = var_mean_11[0]
        getitem_23: "f32[2, 64, 1]" = var_mean_11[1];  var_mean_11 = None
        sub_18: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_43, getitem_23);  add_43 = getitem_23 = None
        add_44: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_22, 1e-05);  getitem_22 = None
        rsqrt_11: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_44);  add_44 = None
        mul_30: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_18, rsqrt_11);  sub_18 = rsqrt_11 = None
        mul_31: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_30, arg99_1);  mul_30 = arg99_1 = None
        add_45: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_31, arg100_1);  mul_31 = arg100_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_136: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_45, [128, 1024])
        permute_66: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg101_1, [1, 0]);  arg101_1 = None
        
        # No stacktrace found for following nodes
        mm_default_35: "f32[128, 1024]" = torch.ops.aten.mm.default(view_136, permute_66);  view_136 = permute_66 = None
        add_tensor_35: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_35, arg102_1);  mm_default_35 = arg102_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_137: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_35, [2, 64, 1024]);  add_tensor_35 = None
        mul_32: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_137, 0.125);  view_137 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_144: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(mul_32, [2, 64, 16, 64]);  mul_32 = None
        permute_71: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_144, [0, 2, 1, 3]);  view_144 = None
        clone_51: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_71, memory_format = torch.contiguous_format);  permute_71 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_145: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_51, [32, -1, 64]);  clone_51 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_138: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_45, [128, 1024])
        permute_67: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg103_1, [1, 0]);  arg103_1 = None
        
        # No stacktrace found for following nodes
        mm_default_34: "f32[128, 1024]" = torch.ops.aten.mm.default(view_138, permute_67);  view_138 = permute_67 = None
        add_tensor_34: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_34, arg104_1);  mm_default_34 = arg104_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_139: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_34, [2, 64, 1024]);  add_tensor_34 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_140: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_139, [2, -1, 16, 64]);  view_139 = None
        permute_68: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_140, [0, 2, 1, 3]);  view_140 = None
        clone_49: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_68, memory_format = torch.contiguous_format);  permute_68 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_146: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_49, [32, -1, 64]);  clone_49 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_72: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_146, [0, 2, 1]);  view_146 = None
        bmm_12: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_145, permute_72);  view_145 = permute_72 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_148: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_12, [2, 16, 64, 64]);  bmm_12 = None
        add_46: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_148, where_2);  view_148 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_149: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(add_46, [32, 64, 64]);  add_46 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_6: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_149, [-1], True)
        sub_19: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_149, amax_6);  view_149 = amax_6 = None
        exp_6: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_19);  sub_19 = None
        sum_7: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_6, [-1], True)
        div_6: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_6, sum_7);  exp_6 = sum_7 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_141: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_45, [128, 1024])
        permute_69: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg105_1, [1, 0]);  arg105_1 = None
        
        # No stacktrace found for following nodes
        mm_default_33: "f32[128, 1024]" = torch.ops.aten.mm.default(view_141, permute_69);  view_141 = permute_69 = None
        add_tensor_33: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_33, arg106_1);  mm_default_33 = arg106_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_142: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_33, [2, 64, 1024]);  add_tensor_33 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_143: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_142, [2, -1, 16, 64]);  view_142 = None
        permute_70: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_143, [0, 2, 1, 3]);  view_143 = None
        clone_50: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_70, memory_format = torch.contiguous_format);  permute_70 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_147: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_50, [32, -1, 64]);  clone_50 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_13: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_6, view_147);  div_6 = view_147 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_150: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_13, [2, 16, 64, 64]);  bmm_13 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_73: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_150, [0, 2, 1, 3]);  view_150 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_53: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_73, memory_format = torch.contiguous_format);  permute_73 = None
        view_151: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(clone_53, [2, 64, 1024]);  clone_53 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_152: "f32[128, 1024]" = torch.ops.aten.reshape.default(view_151, [128, 1024]);  view_151 = None
        permute_74: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg107_1, [1, 0]);  arg107_1 = None
        
        # No stacktrace found for following nodes
        mm_default_32: "f32[128, 1024]" = torch.ops.aten.mm.default(view_152, permute_74);  view_152 = permute_74 = None
        add_tensor_32: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_32, arg108_1);  mm_default_32 = arg108_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_153: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_32, [2, 64, 1024]);  add_tensor_32 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_47: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_45, view_153);  add_45 = view_153 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_12 = torch.ops.aten.var_mean.correction(add_47, [2], correction = 0, keepdim = True)
        getitem_24: "f32[2, 64, 1]" = var_mean_12[0]
        getitem_25: "f32[2, 64, 1]" = var_mean_12[1];  var_mean_12 = None
        sub_20: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_47, getitem_25);  add_47 = getitem_25 = None
        add_48: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_24, 1e-05);  getitem_24 = None
        rsqrt_12: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_48);  add_48 = None
        mul_33: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_20, rsqrt_12);  sub_20 = rsqrt_12 = None
        mul_34: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_33, arg109_1);  mul_33 = arg109_1 = None
        add_49: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_34, arg110_1);  mul_34 = arg110_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_154: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_49, [128, 1024])
        permute_75: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg111_1, [1, 0]);  arg111_1 = None
        
        # No stacktrace found for following nodes
        mm_default_31: "f32[128, 4096]" = torch.ops.aten.mm.default(view_154, permute_75);  view_154 = permute_75 = None
        add_tensor_31: "f32[128, 4096]" = torch.ops.aten.add.Tensor(mm_default_31, arg112_1);  mm_default_31 = arg112_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_155: "f32[2, 64, 4096]" = torch.ops.aten.reshape.default(add_tensor_31, [2, 64, 4096]);  add_tensor_31 = None
        relu_6: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_155);  view_155 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_156: "f32[128, 4096]" = torch.ops.aten.reshape.default(relu_6, [128, 4096]);  relu_6 = None
        permute_76: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg113_1, [1, 0]);  arg113_1 = None
        
        # No stacktrace found for following nodes
        mm_default_30: "f32[128, 1024]" = torch.ops.aten.mm.default(view_156, permute_76);  view_156 = permute_76 = None
        add_tensor_30: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_30, arg114_1);  mm_default_30 = arg114_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_157: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_30, [2, 64, 1024]);  add_tensor_30 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_50: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_49, view_157);  add_49 = view_157 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_13 = torch.ops.aten.var_mean.correction(add_50, [2], correction = 0, keepdim = True)
        getitem_26: "f32[2, 64, 1]" = var_mean_13[0]
        getitem_27: "f32[2, 64, 1]" = var_mean_13[1];  var_mean_13 = None
        sub_21: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_50, getitem_27);  add_50 = getitem_27 = None
        add_51: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_26, 1e-05);  getitem_26 = None
        rsqrt_13: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_51);  add_51 = None
        mul_35: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_21, rsqrt_13);  sub_21 = rsqrt_13 = None
        mul_36: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_35, arg115_1);  mul_35 = arg115_1 = None
        add_52: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_36, arg116_1);  mul_36 = arg116_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_158: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_52, [128, 1024])
        permute_77: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg117_1, [1, 0]);  arg117_1 = None
        
        # No stacktrace found for following nodes
        mm_default_29: "f32[128, 1024]" = torch.ops.aten.mm.default(view_158, permute_77);  view_158 = permute_77 = None
        add_tensor_29: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_29, arg118_1);  mm_default_29 = arg118_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_159: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_29, [2, 64, 1024]);  add_tensor_29 = None
        mul_37: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_159, 0.125);  view_159 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_166: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(mul_37, [2, 64, 16, 64]);  mul_37 = None
        permute_82: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_166, [0, 2, 1, 3]);  view_166 = None
        clone_59: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_82, memory_format = torch.contiguous_format);  permute_82 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_167: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_59, [32, -1, 64]);  clone_59 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_160: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_52, [128, 1024])
        permute_78: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg119_1, [1, 0]);  arg119_1 = None
        
        # No stacktrace found for following nodes
        mm_default_28: "f32[128, 1024]" = torch.ops.aten.mm.default(view_160, permute_78);  view_160 = permute_78 = None
        add_tensor_28: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_28, arg120_1);  mm_default_28 = arg120_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_161: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_28, [2, 64, 1024]);  add_tensor_28 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_162: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_161, [2, -1, 16, 64]);  view_161 = None
        permute_79: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_162, [0, 2, 1, 3]);  view_162 = None
        clone_57: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_79, memory_format = torch.contiguous_format);  permute_79 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_168: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_57, [32, -1, 64]);  clone_57 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_83: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_168, [0, 2, 1]);  view_168 = None
        bmm_14: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_167, permute_83);  view_167 = permute_83 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_170: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_14, [2, 16, 64, 64]);  bmm_14 = None
        add_53: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_170, where_2);  view_170 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_171: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(add_53, [32, 64, 64]);  add_53 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_7: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_171, [-1], True)
        sub_22: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_171, amax_7);  view_171 = amax_7 = None
        exp_7: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_22);  sub_22 = None
        sum_8: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_7, [-1], True)
        div_7: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_7, sum_8);  exp_7 = sum_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_163: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_52, [128, 1024])
        permute_80: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg121_1, [1, 0]);  arg121_1 = None
        
        # No stacktrace found for following nodes
        mm_default_27: "f32[128, 1024]" = torch.ops.aten.mm.default(view_163, permute_80);  view_163 = permute_80 = None
        add_tensor_27: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_27, arg122_1);  mm_default_27 = arg122_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_164: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_27, [2, 64, 1024]);  add_tensor_27 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_165: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_164, [2, -1, 16, 64]);  view_164 = None
        permute_81: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_165, [0, 2, 1, 3]);  view_165 = None
        clone_58: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_81, memory_format = torch.contiguous_format);  permute_81 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_169: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_58, [32, -1, 64]);  clone_58 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_15: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_7, view_169);  div_7 = view_169 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_172: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_15, [2, 16, 64, 64]);  bmm_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_84: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_172, [0, 2, 1, 3]);  view_172 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_61: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_84, memory_format = torch.contiguous_format);  permute_84 = None
        view_173: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(clone_61, [2, 64, 1024]);  clone_61 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_174: "f32[128, 1024]" = torch.ops.aten.reshape.default(view_173, [128, 1024]);  view_173 = None
        permute_85: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg123_1, [1, 0]);  arg123_1 = None
        
        # No stacktrace found for following nodes
        mm_default_26: "f32[128, 1024]" = torch.ops.aten.mm.default(view_174, permute_85);  view_174 = permute_85 = None
        add_tensor_26: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_26, arg124_1);  mm_default_26 = arg124_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_175: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_26, [2, 64, 1024]);  add_tensor_26 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_54: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_52, view_175);  add_52 = view_175 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_14 = torch.ops.aten.var_mean.correction(add_54, [2], correction = 0, keepdim = True)
        getitem_28: "f32[2, 64, 1]" = var_mean_14[0]
        getitem_29: "f32[2, 64, 1]" = var_mean_14[1];  var_mean_14 = None
        sub_23: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_54, getitem_29);  add_54 = getitem_29 = None
        add_55: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_28, 1e-05);  getitem_28 = None
        rsqrt_14: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_55);  add_55 = None
        mul_38: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_23, rsqrt_14);  sub_23 = rsqrt_14 = None
        mul_39: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_38, arg125_1);  mul_38 = arg125_1 = None
        add_56: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_39, arg126_1);  mul_39 = arg126_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_176: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_56, [128, 1024])
        permute_86: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg127_1, [1, 0]);  arg127_1 = None
        
        # No stacktrace found for following nodes
        mm_default_25: "f32[128, 4096]" = torch.ops.aten.mm.default(view_176, permute_86);  view_176 = permute_86 = None
        add_tensor_25: "f32[128, 4096]" = torch.ops.aten.add.Tensor(mm_default_25, arg128_1);  mm_default_25 = arg128_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_177: "f32[2, 64, 4096]" = torch.ops.aten.reshape.default(add_tensor_25, [2, 64, 4096]);  add_tensor_25 = None
        relu_7: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_177);  view_177 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_178: "f32[128, 4096]" = torch.ops.aten.reshape.default(relu_7, [128, 4096]);  relu_7 = None
        permute_87: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg129_1, [1, 0]);  arg129_1 = None
        
        # No stacktrace found for following nodes
        mm_default_24: "f32[128, 1024]" = torch.ops.aten.mm.default(view_178, permute_87);  view_178 = permute_87 = None
        add_tensor_24: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_24, arg130_1);  mm_default_24 = arg130_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_179: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_24, [2, 64, 1024]);  add_tensor_24 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_57: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_56, view_179);  add_56 = view_179 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_15 = torch.ops.aten.var_mean.correction(add_57, [2], correction = 0, keepdim = True)
        getitem_30: "f32[2, 64, 1]" = var_mean_15[0]
        getitem_31: "f32[2, 64, 1]" = var_mean_15[1];  var_mean_15 = None
        sub_24: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_57, getitem_31);  add_57 = getitem_31 = None
        add_58: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_30, 1e-05);  getitem_30 = None
        rsqrt_15: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_58);  add_58 = None
        mul_40: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_24, rsqrt_15);  sub_24 = rsqrt_15 = None
        mul_41: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_40, arg131_1);  mul_40 = arg131_1 = None
        add_59: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_41, arg132_1);  mul_41 = arg132_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_180: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_59, [128, 1024])
        permute_88: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg133_1, [1, 0]);  arg133_1 = None
        
        # No stacktrace found for following nodes
        mm_default_23: "f32[128, 1024]" = torch.ops.aten.mm.default(view_180, permute_88);  view_180 = permute_88 = None
        add_tensor_23: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_23, arg134_1);  mm_default_23 = arg134_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_181: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_23, [2, 64, 1024]);  add_tensor_23 = None
        mul_42: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_181, 0.125);  view_181 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_188: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(mul_42, [2, 64, 16, 64]);  mul_42 = None
        permute_93: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_188, [0, 2, 1, 3]);  view_188 = None
        clone_67: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_93, memory_format = torch.contiguous_format);  permute_93 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_189: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_67, [32, -1, 64]);  clone_67 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_182: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_59, [128, 1024])
        permute_89: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg135_1, [1, 0]);  arg135_1 = None
        
        # No stacktrace found for following nodes
        mm_default_22: "f32[128, 1024]" = torch.ops.aten.mm.default(view_182, permute_89);  view_182 = permute_89 = None
        add_tensor_22: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_22, arg136_1);  mm_default_22 = arg136_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_183: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_22, [2, 64, 1024]);  add_tensor_22 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_184: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_183, [2, -1, 16, 64]);  view_183 = None
        permute_90: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_184, [0, 2, 1, 3]);  view_184 = None
        clone_65: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_90, memory_format = torch.contiguous_format);  permute_90 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_190: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_65, [32, -1, 64]);  clone_65 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_94: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_190, [0, 2, 1]);  view_190 = None
        bmm_16: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_189, permute_94);  view_189 = permute_94 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_192: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_16, [2, 16, 64, 64]);  bmm_16 = None
        add_60: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_192, where_2);  view_192 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_193: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(add_60, [32, 64, 64]);  add_60 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_8: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_193, [-1], True)
        sub_25: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_193, amax_8);  view_193 = amax_8 = None
        exp_8: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_25);  sub_25 = None
        sum_9: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_8, [-1], True)
        div_8: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_8, sum_9);  exp_8 = sum_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_185: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_59, [128, 1024])
        permute_91: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg137_1, [1, 0]);  arg137_1 = None
        
        # No stacktrace found for following nodes
        mm_default_21: "f32[128, 1024]" = torch.ops.aten.mm.default(view_185, permute_91);  view_185 = permute_91 = None
        add_tensor_21: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_21, arg138_1);  mm_default_21 = arg138_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_186: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_21, [2, 64, 1024]);  add_tensor_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_187: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_186, [2, -1, 16, 64]);  view_186 = None
        permute_92: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_187, [0, 2, 1, 3]);  view_187 = None
        clone_66: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_92, memory_format = torch.contiguous_format);  permute_92 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_191: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_66, [32, -1, 64]);  clone_66 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_17: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_8, view_191);  div_8 = view_191 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_194: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_17, [2, 16, 64, 64]);  bmm_17 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_95: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_194, [0, 2, 1, 3]);  view_194 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_69: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_95, memory_format = torch.contiguous_format);  permute_95 = None
        view_195: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(clone_69, [2, 64, 1024]);  clone_69 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_196: "f32[128, 1024]" = torch.ops.aten.reshape.default(view_195, [128, 1024]);  view_195 = None
        permute_96: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg139_1, [1, 0]);  arg139_1 = None
        
        # No stacktrace found for following nodes
        mm_default_20: "f32[128, 1024]" = torch.ops.aten.mm.default(view_196, permute_96);  view_196 = permute_96 = None
        add_tensor_20: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_20, arg140_1);  mm_default_20 = arg140_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_197: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_20, [2, 64, 1024]);  add_tensor_20 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_61: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_59, view_197);  add_59 = view_197 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_16 = torch.ops.aten.var_mean.correction(add_61, [2], correction = 0, keepdim = True)
        getitem_32: "f32[2, 64, 1]" = var_mean_16[0]
        getitem_33: "f32[2, 64, 1]" = var_mean_16[1];  var_mean_16 = None
        sub_26: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_61, getitem_33);  add_61 = getitem_33 = None
        add_62: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_32, 1e-05);  getitem_32 = None
        rsqrt_16: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_62);  add_62 = None
        mul_43: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_26, rsqrt_16);  sub_26 = rsqrt_16 = None
        mul_44: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_43, arg141_1);  mul_43 = arg141_1 = None
        add_63: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_44, arg142_1);  mul_44 = arg142_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_198: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_63, [128, 1024])
        permute_97: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg143_1, [1, 0]);  arg143_1 = None
        
        # No stacktrace found for following nodes
        mm_default_19: "f32[128, 4096]" = torch.ops.aten.mm.default(view_198, permute_97);  view_198 = permute_97 = None
        add_tensor_19: "f32[128, 4096]" = torch.ops.aten.add.Tensor(mm_default_19, arg144_1);  mm_default_19 = arg144_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_199: "f32[2, 64, 4096]" = torch.ops.aten.reshape.default(add_tensor_19, [2, 64, 4096]);  add_tensor_19 = None
        relu_8: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_199);  view_199 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_200: "f32[128, 4096]" = torch.ops.aten.reshape.default(relu_8, [128, 4096]);  relu_8 = None
        permute_98: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg145_1, [1, 0]);  arg145_1 = None
        
        # No stacktrace found for following nodes
        mm_default_18: "f32[128, 1024]" = torch.ops.aten.mm.default(view_200, permute_98);  view_200 = permute_98 = None
        add_tensor_18: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_18, arg146_1);  mm_default_18 = arg146_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_201: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_18, [2, 64, 1024]);  add_tensor_18 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_64: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_63, view_201);  add_63 = view_201 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_17 = torch.ops.aten.var_mean.correction(add_64, [2], correction = 0, keepdim = True)
        getitem_34: "f32[2, 64, 1]" = var_mean_17[0]
        getitem_35: "f32[2, 64, 1]" = var_mean_17[1];  var_mean_17 = None
        sub_27: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_64, getitem_35);  add_64 = getitem_35 = None
        add_65: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_34, 1e-05);  getitem_34 = None
        rsqrt_17: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_65);  add_65 = None
        mul_45: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_27, rsqrt_17);  sub_27 = rsqrt_17 = None
        mul_46: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_45, arg147_1);  mul_45 = arg147_1 = None
        add_66: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_46, arg148_1);  mul_46 = arg148_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_202: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_66, [128, 1024])
        permute_99: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg149_1, [1, 0]);  arg149_1 = None
        
        # No stacktrace found for following nodes
        mm_default_17: "f32[128, 1024]" = torch.ops.aten.mm.default(view_202, permute_99);  view_202 = permute_99 = None
        add_tensor_17: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_17, arg150_1);  mm_default_17 = arg150_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_203: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_17, [2, 64, 1024]);  add_tensor_17 = None
        mul_47: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_203, 0.125);  view_203 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_210: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(mul_47, [2, 64, 16, 64]);  mul_47 = None
        permute_104: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_210, [0, 2, 1, 3]);  view_210 = None
        clone_75: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_104, memory_format = torch.contiguous_format);  permute_104 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_211: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_75, [32, -1, 64]);  clone_75 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_204: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_66, [128, 1024])
        permute_100: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg151_1, [1, 0]);  arg151_1 = None
        
        # No stacktrace found for following nodes
        mm_default_16: "f32[128, 1024]" = torch.ops.aten.mm.default(view_204, permute_100);  view_204 = permute_100 = None
        add_tensor_16: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_16, arg152_1);  mm_default_16 = arg152_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_205: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_16, [2, 64, 1024]);  add_tensor_16 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_206: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_205, [2, -1, 16, 64]);  view_205 = None
        permute_101: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_206, [0, 2, 1, 3]);  view_206 = None
        clone_73: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_101, memory_format = torch.contiguous_format);  permute_101 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_212: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_73, [32, -1, 64]);  clone_73 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_105: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_212, [0, 2, 1]);  view_212 = None
        bmm_18: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_211, permute_105);  view_211 = permute_105 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_214: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_18, [2, 16, 64, 64]);  bmm_18 = None
        add_67: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_214, where_2);  view_214 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_215: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(add_67, [32, 64, 64]);  add_67 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_9: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_215, [-1], True)
        sub_28: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_215, amax_9);  view_215 = amax_9 = None
        exp_9: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_28);  sub_28 = None
        sum_10: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_9, [-1], True)
        div_9: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_9, sum_10);  exp_9 = sum_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_207: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_66, [128, 1024])
        permute_102: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg153_1, [1, 0]);  arg153_1 = None
        
        # No stacktrace found for following nodes
        mm_default_15: "f32[128, 1024]" = torch.ops.aten.mm.default(view_207, permute_102);  view_207 = permute_102 = None
        add_tensor_15: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_15, arg154_1);  mm_default_15 = arg154_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_208: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_15, [2, 64, 1024]);  add_tensor_15 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_209: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_208, [2, -1, 16, 64]);  view_208 = None
        permute_103: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_209, [0, 2, 1, 3]);  view_209 = None
        clone_74: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_103, memory_format = torch.contiguous_format);  permute_103 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_213: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_74, [32, -1, 64]);  clone_74 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_19: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_9, view_213);  div_9 = view_213 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_216: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_19, [2, 16, 64, 64]);  bmm_19 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_106: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_216, [0, 2, 1, 3]);  view_216 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_77: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_106, memory_format = torch.contiguous_format);  permute_106 = None
        view_217: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(clone_77, [2, 64, 1024]);  clone_77 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_218: "f32[128, 1024]" = torch.ops.aten.reshape.default(view_217, [128, 1024]);  view_217 = None
        permute_107: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg155_1, [1, 0]);  arg155_1 = None
        
        # No stacktrace found for following nodes
        mm_default_14: "f32[128, 1024]" = torch.ops.aten.mm.default(view_218, permute_107);  view_218 = permute_107 = None
        add_tensor_14: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_14, arg156_1);  mm_default_14 = arg156_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_219: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_14, [2, 64, 1024]);  add_tensor_14 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_68: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_66, view_219);  add_66 = view_219 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_18 = torch.ops.aten.var_mean.correction(add_68, [2], correction = 0, keepdim = True)
        getitem_36: "f32[2, 64, 1]" = var_mean_18[0]
        getitem_37: "f32[2, 64, 1]" = var_mean_18[1];  var_mean_18 = None
        sub_29: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_68, getitem_37);  add_68 = getitem_37 = None
        add_69: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_36, 1e-05);  getitem_36 = None
        rsqrt_18: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_69);  add_69 = None
        mul_48: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_29, rsqrt_18);  sub_29 = rsqrt_18 = None
        mul_49: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_48, arg157_1);  mul_48 = arg157_1 = None
        add_70: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_49, arg158_1);  mul_49 = arg158_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_220: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_70, [128, 1024])
        permute_108: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg159_1, [1, 0]);  arg159_1 = None
        
        # No stacktrace found for following nodes
        mm_default_13: "f32[128, 4096]" = torch.ops.aten.mm.default(view_220, permute_108);  view_220 = permute_108 = None
        add_tensor_13: "f32[128, 4096]" = torch.ops.aten.add.Tensor(mm_default_13, arg160_1);  mm_default_13 = arg160_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_221: "f32[2, 64, 4096]" = torch.ops.aten.reshape.default(add_tensor_13, [2, 64, 4096]);  add_tensor_13 = None
        relu_9: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_221);  view_221 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_222: "f32[128, 4096]" = torch.ops.aten.reshape.default(relu_9, [128, 4096]);  relu_9 = None
        permute_109: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg161_1, [1, 0]);  arg161_1 = None
        
        # No stacktrace found for following nodes
        mm_default_12: "f32[128, 1024]" = torch.ops.aten.mm.default(view_222, permute_109);  view_222 = permute_109 = None
        add_tensor_12: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_12, arg162_1);  mm_default_12 = arg162_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_223: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_12, [2, 64, 1024]);  add_tensor_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_71: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_70, view_223);  add_70 = view_223 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_19 = torch.ops.aten.var_mean.correction(add_71, [2], correction = 0, keepdim = True)
        getitem_38: "f32[2, 64, 1]" = var_mean_19[0]
        getitem_39: "f32[2, 64, 1]" = var_mean_19[1];  var_mean_19 = None
        sub_30: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_71, getitem_39);  add_71 = getitem_39 = None
        add_72: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_38, 1e-05);  getitem_38 = None
        rsqrt_19: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_72);  add_72 = None
        mul_50: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_30, rsqrt_19);  sub_30 = rsqrt_19 = None
        mul_51: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_50, arg163_1);  mul_50 = arg163_1 = None
        add_73: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_51, arg164_1);  mul_51 = arg164_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_224: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_73, [128, 1024])
        permute_110: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg165_1, [1, 0]);  arg165_1 = None
        
        # No stacktrace found for following nodes
        mm_default_11: "f32[128, 1024]" = torch.ops.aten.mm.default(view_224, permute_110);  view_224 = permute_110 = None
        add_tensor_11: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_11, arg166_1);  mm_default_11 = arg166_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_225: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_11, [2, 64, 1024]);  add_tensor_11 = None
        mul_52: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_225, 0.125);  view_225 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_232: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(mul_52, [2, 64, 16, 64]);  mul_52 = None
        permute_115: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_232, [0, 2, 1, 3]);  view_232 = None
        clone_83: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_115, memory_format = torch.contiguous_format);  permute_115 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_233: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_83, [32, -1, 64]);  clone_83 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_226: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_73, [128, 1024])
        permute_111: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg167_1, [1, 0]);  arg167_1 = None
        
        # No stacktrace found for following nodes
        mm_default_10: "f32[128, 1024]" = torch.ops.aten.mm.default(view_226, permute_111);  view_226 = permute_111 = None
        add_tensor_10: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_10, arg168_1);  mm_default_10 = arg168_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_227: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_10, [2, 64, 1024]);  add_tensor_10 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_228: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_227, [2, -1, 16, 64]);  view_227 = None
        permute_112: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_228, [0, 2, 1, 3]);  view_228 = None
        clone_81: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_112, memory_format = torch.contiguous_format);  permute_112 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_234: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_81, [32, -1, 64]);  clone_81 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_116: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_234, [0, 2, 1]);  view_234 = None
        bmm_20: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_233, permute_116);  view_233 = permute_116 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_236: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_20, [2, 16, 64, 64]);  bmm_20 = None
        add_74: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_236, where_2);  view_236 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_237: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(add_74, [32, 64, 64]);  add_74 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_10: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_237, [-1], True)
        sub_31: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_237, amax_10);  view_237 = amax_10 = None
        exp_10: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_31);  sub_31 = None
        sum_11: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_10, [-1], True)
        div_10: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_10, sum_11);  exp_10 = sum_11 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_229: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_73, [128, 1024])
        permute_113: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg169_1, [1, 0]);  arg169_1 = None
        
        # No stacktrace found for following nodes
        mm_default_9: "f32[128, 1024]" = torch.ops.aten.mm.default(view_229, permute_113);  view_229 = permute_113 = None
        add_tensor_9: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_9, arg170_1);  mm_default_9 = arg170_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_230: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_9, [2, 64, 1024]);  add_tensor_9 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_231: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_230, [2, -1, 16, 64]);  view_230 = None
        permute_114: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_231, [0, 2, 1, 3]);  view_231 = None
        clone_82: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_114, memory_format = torch.contiguous_format);  permute_114 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_235: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_82, [32, -1, 64]);  clone_82 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_21: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_10, view_235);  div_10 = view_235 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_238: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_21, [2, 16, 64, 64]);  bmm_21 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_117: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_238, [0, 2, 1, 3]);  view_238 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_85: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_117, memory_format = torch.contiguous_format);  permute_117 = None
        view_239: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(clone_85, [2, 64, 1024]);  clone_85 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_240: "f32[128, 1024]" = torch.ops.aten.reshape.default(view_239, [128, 1024]);  view_239 = None
        permute_118: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg171_1, [1, 0]);  arg171_1 = None
        
        # No stacktrace found for following nodes
        mm_default_8: "f32[128, 1024]" = torch.ops.aten.mm.default(view_240, permute_118);  view_240 = permute_118 = None
        add_tensor_8: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_8, arg172_1);  mm_default_8 = arg172_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_241: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_8, [2, 64, 1024]);  add_tensor_8 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_75: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_73, view_241);  add_73 = view_241 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_20 = torch.ops.aten.var_mean.correction(add_75, [2], correction = 0, keepdim = True)
        getitem_40: "f32[2, 64, 1]" = var_mean_20[0]
        getitem_41: "f32[2, 64, 1]" = var_mean_20[1];  var_mean_20 = None
        sub_32: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_75, getitem_41);  add_75 = getitem_41 = None
        add_76: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_40, 1e-05);  getitem_40 = None
        rsqrt_20: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_76);  add_76 = None
        mul_53: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_32, rsqrt_20);  sub_32 = rsqrt_20 = None
        mul_54: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_53, arg173_1);  mul_53 = arg173_1 = None
        add_77: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_54, arg174_1);  mul_54 = arg174_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_242: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_77, [128, 1024])
        permute_119: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg175_1, [1, 0]);  arg175_1 = None
        
        # No stacktrace found for following nodes
        mm_default_7: "f32[128, 4096]" = torch.ops.aten.mm.default(view_242, permute_119);  view_242 = permute_119 = None
        add_tensor_7: "f32[128, 4096]" = torch.ops.aten.add.Tensor(mm_default_7, arg176_1);  mm_default_7 = arg176_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_243: "f32[2, 64, 4096]" = torch.ops.aten.reshape.default(add_tensor_7, [2, 64, 4096]);  add_tensor_7 = None
        relu_10: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_243);  view_243 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_244: "f32[128, 4096]" = torch.ops.aten.reshape.default(relu_10, [128, 4096]);  relu_10 = None
        permute_120: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg177_1, [1, 0]);  arg177_1 = None
        
        # No stacktrace found for following nodes
        mm_default_6: "f32[128, 1024]" = torch.ops.aten.mm.default(view_244, permute_120);  view_244 = permute_120 = None
        add_tensor_6: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_6, arg178_1);  mm_default_6 = arg178_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_245: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_6, [2, 64, 1024]);  add_tensor_6 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_78: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_77, view_245);  add_77 = view_245 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_21 = torch.ops.aten.var_mean.correction(add_78, [2], correction = 0, keepdim = True)
        getitem_42: "f32[2, 64, 1]" = var_mean_21[0]
        getitem_43: "f32[2, 64, 1]" = var_mean_21[1];  var_mean_21 = None
        sub_33: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_78, getitem_43);  add_78 = getitem_43 = None
        add_79: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_42, 1e-05);  getitem_42 = None
        rsqrt_21: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_79);  add_79 = None
        mul_55: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_33, rsqrt_21);  sub_33 = rsqrt_21 = None
        mul_56: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_55, arg179_1);  mul_55 = arg179_1 = None
        add_80: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_56, arg180_1);  mul_56 = arg180_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_246: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_80, [128, 1024])
        permute_121: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg181_1, [1, 0]);  arg181_1 = None
        
        # No stacktrace found for following nodes
        mm_default_5: "f32[128, 1024]" = torch.ops.aten.mm.default(view_246, permute_121);  view_246 = permute_121 = None
        add_tensor_5: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_5, arg182_1);  mm_default_5 = arg182_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:199 in forward, code: query_states = self.q_proj(hidden_states) * self.scaling
        view_247: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_5, [2, 64, 1024]);  add_tensor_5 = None
        mul_57: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(view_247, 0.125);  view_247 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_254: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(mul_57, [2, 64, 16, 64]);  mul_57 = None
        permute_126: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_254, [0, 2, 1, 3]);  view_254 = None
        clone_91: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_126, memory_format = torch.contiguous_format);  permute_126 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:231 in forward, code: query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
        view_255: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_91, [32, -1, 64]);  clone_91 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_248: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_80, [128, 1024])
        permute_122: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg183_1, [1, 0]);  arg183_1 = None
        
        # No stacktrace found for following nodes
        mm_default_4: "f32[128, 1024]" = torch.ops.aten.mm.default(view_248, permute_122);  view_248 = permute_122 = None
        add_tensor_4: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_4, arg184_1);  mm_default_4 = arg184_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:217 in forward, code: key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
        view_249: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_4, [2, 64, 1024]);  add_tensor_4 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_250: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_249, [2, -1, 16, 64]);  view_249 = None
        permute_123: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_250, [0, 2, 1, 3]);  view_250 = None
        clone_89: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_123, memory_format = torch.contiguous_format);  permute_123 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:232 in forward, code: key_states = key_states.view(*proj_shape)
        view_256: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_89, [32, -1, 64]);  clone_89 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:236 in forward, code: attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
        permute_127: "f32[32, 64, 64]" = torch.ops.aten.permute.default(view_256, [0, 2, 1]);  view_256 = None
        bmm_22: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(view_255, permute_127);  view_255 = permute_127 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:249 in forward, code: attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
        view_258: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_22, [2, 16, 64, 64]);  bmm_22 = None
        add_81: "f32[2, 16, 64, 64]" = torch.ops.aten.add.Tensor(view_258, where_2);  view_258 = where_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:250 in forward, code: attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
        view_259: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(add_81, [32, 64, 64]);  add_81 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:252 in forward, code: attn_weights = nn.functional.softmax(attn_weights, dim=-1)
        amax_11: "f32[32, 64, 1]" = torch.ops.aten.amax.default(view_259, [-1], True)
        sub_34: "f32[32, 64, 64]" = torch.ops.aten.sub.Tensor(view_259, amax_11);  view_259 = amax_11 = None
        exp_11: "f32[32, 64, 64]" = torch.ops.aten.exp.default(sub_34);  sub_34 = None
        sum_12: "f32[32, 64, 1]" = torch.ops.aten.sum.dim_IntList(exp_11, [-1], True)
        div_11: "f32[32, 64, 64]" = torch.ops.aten.div.Tensor(exp_11, sum_12);  exp_11 = sum_12 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_251: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_80, [128, 1024])
        permute_124: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg185_1, [1, 0]);  arg185_1 = None
        
        # No stacktrace found for following nodes
        mm_default_3: "f32[128, 1024]" = torch.ops.aten.mm.default(view_251, permute_124);  view_251 = permute_124 = None
        add_tensor_3: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_3, arg186_1);  mm_default_3 = arg186_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:218 in forward, code: value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
        view_252: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_3, [2, 64, 1024]);  add_tensor_3 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:180 in _shape, code: return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
        view_253: "f32[2, 64, 16, 64]" = torch.ops.aten.reshape.default(view_252, [2, -1, 16, 64]);  view_252 = None
        permute_125: "f32[2, 16, 64, 64]" = torch.ops.aten.permute.default(view_253, [0, 2, 1, 3]);  view_253 = None
        clone_90: "f32[2, 16, 64, 64]" = torch.ops.aten.clone.default(permute_125, memory_format = torch.contiguous_format);  permute_125 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:233 in forward, code: value_states = value_states.view(*proj_shape)
        view_257: "f32[32, 64, 64]" = torch.ops.aten.reshape.default(clone_90, [32, -1, 64]);  clone_90 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:275 in forward, code: attn_output = torch.bmm(attn_probs, value_states)
        bmm_23: "f32[32, 64, 64]" = torch.ops.aten.bmm.default(div_11, view_257);  div_11 = view_257 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:283 in forward, code: attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
        view_260: "f32[2, 16, 64, 64]" = torch.ops.aten.reshape.default(bmm_23, [2, 16, 64, 64]);  bmm_23 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:284 in forward, code: attn_output = attn_output.transpose(1, 2)
        permute_128: "f32[2, 64, 16, 64]" = torch.ops.aten.permute.default(view_260, [0, 2, 1, 3]);  view_260 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:285 in forward, code: attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
        clone_93: "f32[2, 64, 16, 64]" = torch.ops.aten.clone.default(permute_128, memory_format = torch.contiguous_format);  permute_128 = None
        view_261: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(clone_93, [2, 64, 1024]);  clone_93 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_262: "f32[128, 1024]" = torch.ops.aten.reshape.default(view_261, [128, 1024]);  view_261 = None
        permute_129: "f32[1024, 1024]" = torch.ops.aten.permute.default(arg187_1, [1, 0]);  arg187_1 = None
        
        # No stacktrace found for following nodes
        mm_default_2: "f32[128, 1024]" = torch.ops.aten.mm.default(view_262, permute_129);  view_262 = permute_129 = None
        add_tensor_2: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default_2, arg188_1);  mm_default_2 = arg188_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:287 in forward, code: attn_output = self.out_proj(attn_output)
        view_263: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor_2, [2, 64, 1024]);  add_tensor_2 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:372 in forward, code: hidden_states = residual + hidden_states
        add_82: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_80, view_263);  add_80 = view_263 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:373 in forward, code: hidden_states = self.self_attn_layer_norm(hidden_states)
        var_mean_22 = torch.ops.aten.var_mean.correction(add_82, [2], correction = 0, keepdim = True)
        getitem_44: "f32[2, 64, 1]" = var_mean_22[0]
        getitem_45: "f32[2, 64, 1]" = var_mean_22[1];  var_mean_22 = None
        sub_35: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_82, getitem_45);  add_82 = getitem_45 = None
        add_83: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_44, 1e-05);  getitem_44 = None
        rsqrt_22: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_83);  add_83 = None
        mul_58: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_35, rsqrt_22);  sub_35 = rsqrt_22 = None
        mul_59: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_58, arg189_1);  mul_58 = arg189_1 = None
        add_84: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_59, arg190_1);  mul_59 = arg190_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_264: "f32[128, 1024]" = torch.ops.aten.reshape.default(add_84, [128, 1024])
        permute_130: "f32[1024, 4096]" = torch.ops.aten.permute.default(arg191_1, [1, 0]);  arg191_1 = None
        
        # No stacktrace found for following nodes
        mm_default_1: "f32[128, 4096]" = torch.ops.aten.mm.default(view_264, permute_130);  view_264 = permute_130 = None
        add_tensor_1: "f32[128, 4096]" = torch.ops.aten.add.Tensor(mm_default_1, arg192_1);  mm_default_1 = arg192_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:402 in forward, code: hidden_states = self.activation_fn(self.fc1(hidden_states))
        view_265: "f32[2, 64, 4096]" = torch.ops.aten.reshape.default(add_tensor_1, [2, 64, 4096]);  add_tensor_1 = None
        relu_11: "f32[2, 64, 4096]" = torch.ops.aten.relu.default(view_265);  view_265 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_266: "f32[128, 4096]" = torch.ops.aten.reshape.default(relu_11, [128, 4096]);  relu_11 = None
        permute_131: "f32[4096, 1024]" = torch.ops.aten.permute.default(arg193_1, [1, 0]);  arg193_1 = None
        
        # No stacktrace found for following nodes
        mm_default: "f32[128, 1024]" = torch.ops.aten.mm.default(view_266, permute_131);  view_266 = permute_131 = None
        add_tensor: "f32[128, 1024]" = torch.ops.aten.add.Tensor(mm_default, arg194_1);  mm_default = arg194_1 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:404 in forward, code: hidden_states = self.fc2(hidden_states)
        view_267: "f32[2, 64, 1024]" = torch.ops.aten.reshape.default(add_tensor, [2, 64, 1024]);  add_tensor = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:407 in forward, code: hidden_states = residual + hidden_states
        add_85: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(add_84, view_267);  add_84 = view_267 = None
        
         # File: /usr/local/lib/python3.11/dist-packages/transformers/models/trocr/modeling_trocr.py:408 in forward, code: hidden_states = self.final_layer_norm(hidden_states)
        var_mean_23 = torch.ops.aten.var_mean.correction(add_85, [2], correction = 0, keepdim = True)
        getitem_46: "f32[2, 64, 1]" = var_mean_23[0]
        getitem_47: "f32[2, 64, 1]" = var_mean_23[1];  var_mean_23 = None
        sub_36: "f32[2, 64, 1024]" = torch.ops.aten.sub.Tensor(add_85, getitem_47);  add_85 = getitem_47 = None
        add_86: "f32[2, 64, 1]" = torch.ops.aten.add.Tensor(getitem_46, 1e-05);  getitem_46 = None
        rsqrt_23: "f32[2, 64, 1]" = torch.ops.aten.rsqrt.default(add_86);  add_86 = None
        mul_60: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(sub_36, rsqrt_23);  sub_36 = rsqrt_23 = None
        mul_61: "f32[2, 64, 1024]" = torch.ops.aten.mul.Tensor(mul_60, arg195_1);  mul_60 = arg195_1 = None
        add_87: "f32[2, 64, 1024]" = torch.ops.aten.add.Tensor(mul_61, arg196_1);  mul_61 = arg196_1 = None
        return (add_87, device_put)
        

# ===== run_2025_10_19_03_43_12_574129-pid_19/torchinductor/model__2_inference_2.2/ir_post_fusion.txt =====
op0: ExternKernelSchedulerNode(DeviceCopy)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = [StarDep(name='arg2_1', mode=None)]
op0.outputs = [
    buf0: DeviceCopy
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[1026, 1024], stride=[1024, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op0.node.kernel = None


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 128})]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 128})]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
    buf1.users = [NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (2, 64)
op1.sizes = ([2], [64])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
class op1_loop_body:
    var_ranges = {p0: 2, p1: 64}
    index0 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        constant = ops.constant(1, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int32, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.int64, src_dtype = torch.int32)
        scan1 = self.scan1((torch.int64,), (to_dtype_1,))
        getitem = scan1[0]
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1', get_index_1, getitem, None)
        return store


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 131072})]
op2.unmet_dependencies = 
    [   MemoryDep('buf0', c1 + 1024*tmp1, {c0: 128, c1: 1024}),
        MemoryDep('buf1', c0, {c0: 128})]
op2.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 128}),
        MemoryDep('arg1_1', c1 + 1024*tmp0, {c0: 128, c1: 1024})]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf2.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False),
    ]
]
op2.group.device = cuda:0
op2.group.iteration = (131072, 1)
op2.sizes = ([128, 1024], [])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[50265, 1024], stride=[1024, 1])
buf1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[1026, 1024], stride=[1024, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op2_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = p0
    index1 = 1024*indirect0 + p1
    index2 = 1024*indirect1 + p1
    index3 = 1024*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        constant = ops.constant(32.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.int32, src_dtype = torch.int64)
        constant_1 = ops.constant(0, torch.int32)
        add = ops.add(to_dtype, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg0_1', get_index_3)
        constant_2 = ops.constant(1, torch.int64)
        ne = ops.ne(load_3, constant_2)
        to_dtype_1 = ops.to_dtype(ne, torch.int32, src_dtype = torch.bool)
        mul_1 = ops.mul(add, to_dtype_1)
        to_dtype_2 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.int32)
        constant_3 = ops.constant(1, torch.int64)
        add_1 = ops.add(to_dtype_2, constant_3)
        set_indirect1 = self.set_indirect1(add_1)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf0', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf2', get_index_5, add_2, None)
        return store


op3: ExternKernelSchedulerNode(ExternKernelOut)
op3.writes = [StarDep(name='buf3', mode=None)]
op3.unmet_dependencies = [StarDep(name='buf2', mode=None)]
op3.met_dependencies = [StarDep(name='arg5_1', mode=None)]
op3.outputs = [
    buf3: ExternKernelOut
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf3.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op3.node.kernel = extern_kernels.mm


op4: ExternKernelSchedulerNode(ExternKernelOut)
op4.writes = [StarDep(name='buf4', mode=None)]
op4.unmet_dependencies = [StarDep(name='buf2', mode=None)]
op4.met_dependencies = [StarDep(name='arg7_1', mode=None)]
op4.outputs = [
    buf4: ExternKernelOut
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf4.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op4.node.kernel = extern_kernels.mm


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 131072})]
op5.unmet_dependencies = [   MemoryDep('buf3', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op5.met_dependencies = [MemoryDep('arg6_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (131072, 1)
op5.sizes = ([2, 16, 64, 64], [])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg6_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op5_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf5', get_index_2, mul, None)
        return store


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 131072})]
op6.unmet_dependencies = [   MemoryDep('buf4', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op6.met_dependencies = [MemoryDep('arg8_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (131072, 1)
op6.sizes = ([2, 16, 64, 64], [])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg8_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op6_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg8_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf6', get_index_2, add, None)
        return store


op7: ExternKernelSchedulerNode(ExternKernelOut)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf5', mode=None), StarDep(name='buf6', mode=None)]
op7.met_dependencies = []
op7.outputs = [
    buf7: ExternKernelOut
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False),
    ]
]
op7.node.kernel = extern_kernels.bmm


op8_op9_op11: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op8_op9_op11.writes = 
    [   MemoryDep('buf11', c0, {c0: 131072}),
        MemoryDep('buf8', c0, {c0: 2048}),
        MemoryDep('buf9', c0, {c0: 2048})]
op8_op9_op11.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 131072})]
op8_op9_op11.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op8_op9_op11.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf9.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op8_op9_op11.snodes[0] =
op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 2048})]
op8.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 131072})]
op8.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op8.group.device = cuda:0
op8.group.iteration = (2048, 64)
op8.sizes = ([32, 64], [64])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op8_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf8', get_index_5, reduction)
        return store_reduction
op8_op9_op11.snodes[1] =
op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 2048})]
op9.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 131072}), MemoryDep('buf8', c0, {c0: 2048})]
op9.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf9.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (2048, 64)
op9.sizes = ([32, 64], [64])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf9_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op9_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf8', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf9', get_index_6, reduction)
        return store_reduction
op8_op9_op11.snodes[2] =
op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 131072})]
op11.unmet_dependencies = 
    [   MemoryDep('buf7', c0, {c0: 131072}),
        MemoryDep('buf8', c0, {c0: 2048}),
        MemoryDep('buf9', c0, {c0: 2048})]
op11.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (131072, 1)
op11.sizes = ([32, 64, 64], [])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf9_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op11_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf8', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf9', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf11', get_index_7, truediv, None)
        return store


op10: ExternKernelSchedulerNode(ExternKernelOut)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf2', mode=None)]
op10.met_dependencies = [StarDep(name='arg9_1', mode=None)]
op10.outputs = [
    buf10: ExternKernelOut
    buf10.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf10.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op10.node.kernel = extern_kernels.mm


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 131072})]
op12.unmet_dependencies = [   MemoryDep('buf10', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op12.met_dependencies = [MemoryDep('arg10_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (131072, 1)
op12.sizes = ([2, 16, 64, 64], [])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg10_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op12_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg10_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf12', get_index_2, add, None)
        return store


op13: ExternKernelSchedulerNode(ExternKernelOut)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf11', mode=None), StarDep(name='buf12', mode=None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: ExternKernelOut
    buf13.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.node.kernel = extern_kernels.bmm


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 131072})]
op14.unmet_dependencies = [   MemoryDep('buf13', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op14.met_dependencies = []
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (131072, 1)
op14.sizes = ([2, 64, 16, 64], [])
buf13_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf14_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op14_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf14', get_index_1, load, None)
        return store


op15: ExternKernelSchedulerNode(ExternKernelOut)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf14', mode=None)]
op15.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op15.outputs = [
    buf15: ExternKernelOut
    buf15.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False),
    ]
]
op15.node.kernel = extern_kernels.mm


op16_op17_op19: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op16_op17_op19.writes = 
    [   MemoryDep('buf16', c0, {c0: 128}),
        MemoryDep('buf17', c0, {c0: 128}),
        MemoryDep('buf19', c0, {c0: 131072})]
op16_op17_op19.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 131072}), MemoryDep('buf2', c0, {c0: 131072})]
op16_op17_op19.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg13_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg14_1', c1, {c0: 128, c1: 1024})]
op16_op17_op19.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf16.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf17.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf19.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False),
    ]
]
op16_op17_op19.snodes[0] =
op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 128})]
op16.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 131072}), MemoryDep('buf2', c0, {c0: 131072})]
op16.met_dependencies = [MemoryDep('arg12_1', c1, {c0: 128, c1: 1024})]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf16.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (128, 1024)
op16.sizes = ([128], [1024])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg12_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op16_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf15', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg12_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf16', get_index_3, getitem)
        return store_reduction
op16_op17_op19.snodes[1] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 128})]
op17.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 131072}), MemoryDep('buf2', c0, {c0: 131072})]
op17.met_dependencies = [MemoryDep('arg12_1', c1, {c0: 128, c1: 1024})]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf17.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (128, 1024)
op17.sizes = ([128], [1024])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg12_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op17_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf15', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg12_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf17', get_index_3, getitem_1)
        return store_reduction
op16_op17_op19.snodes[2] =
op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 131072})]
op19.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 131072}),
        MemoryDep('buf16', c0, {c0: 128}),
        MemoryDep('buf17', c0, {c0: 128}),
        MemoryDep('buf2', c0, {c0: 131072})]
op19.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg13_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg14_1', c1, {c0: 128, c1: 1024})]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf19.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False),
    ]
]
op19.group.device = cuda:0
op19.group.iteration = (131072, 1)
op19.sizes = ([128, 1024], [])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg12_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg13_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg14_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op19_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf15', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg12_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf16', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf17', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg13_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg14_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf19', get_index_7, add_3, None)
        return store


op20: ExternKernelSchedulerNode(ExternKernelOut)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf19', mode=None)]
op20.met_dependencies = [StarDep(name='arg15_1', mode=None)]
op20.outputs = [
    buf20: ExternKernelOut
    buf20.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
]
op20.node.kernel = extern_kernels.mm


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 524288})]
op21.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 524288})]
op21.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 128, c1: 4096})]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (524288, 1)
op21.sizes = ([128, 4096], [])
buf20_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg16_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op21_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg16_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf21', get_index_2, relu, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg17_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf22.users = [
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False),
    ]
]
op22.node.kernel = extern_kernels.mm


op23_op24_op26: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op23_op24_op26.writes = 
    [   MemoryDep('buf23', c0, {c0: 128}),
        MemoryDep('buf24', c0, {c0: 128}),
        MemoryDep('buf26', c0, {c0: 131072})]
op23_op24_op26.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 131072}), MemoryDep('buf22', c0, {c0: 131072})]
op23_op24_op26.met_dependencies = 
    [   MemoryDep('arg18_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg19_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg20_1', c1, {c0: 128, c1: 1024})]
op23_op24_op26.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf23.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf24.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf26.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
    ]
]
op23_op24_op26.snodes[0] =
op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 128})]
op23.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 131072}), MemoryDep('buf22', c0, {c0: 131072})]
op23.met_dependencies = [MemoryDep('arg18_1', c1, {c0: 128, c1: 1024})]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf23.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (128, 1024)
op23.sizes = ([128], [1024])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg18_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op23_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf22', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf23', get_index_3, getitem)
        return store_reduction
op23_op24_op26.snodes[1] =
op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 128})]
op24.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 131072}), MemoryDep('buf22', c0, {c0: 131072})]
op24.met_dependencies = [MemoryDep('arg18_1', c1, {c0: 128, c1: 1024})]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf24.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (128, 1024)
op24.sizes = ([128], [1024])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg18_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op24_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf22', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf24', get_index_3, getitem_1)
        return store_reduction
op23_op24_op26.snodes[2] =
op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 131072})]
op26.unmet_dependencies = 
    [   MemoryDep('buf19', c0, {c0: 131072}),
        MemoryDep('buf22', c0, {c0: 131072}),
        MemoryDep('buf23', c0, {c0: 128}),
        MemoryDep('buf24', c0, {c0: 128})]
op26.met_dependencies = 
    [   MemoryDep('arg18_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg19_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg20_1', c1, {c0: 128, c1: 1024})]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf26.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
    ]
]
op26.group.device = cuda:0
op26.group.iteration = (131072, 1)
op26.sizes = ([128, 1024], [])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg18_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg19_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg20_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op26_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf22', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf23', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf24', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg19_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg20_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf26', get_index_7, add_3, None)
        return store


op27: ExternKernelSchedulerNode(ExternKernelOut)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op27.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op27.outputs = [
    buf27: ExternKernelOut
    buf27.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf27.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op27.node.kernel = extern_kernels.mm


op28: ExternKernelSchedulerNode(ExternKernelOut)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op28.met_dependencies = [StarDep(name='arg23_1', mode=None)]
op28.outputs = [
    buf28: ExternKernelOut
    buf28.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf28.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op28.node.kernel = extern_kernels.mm


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 131072})]
op29.unmet_dependencies = [   MemoryDep('buf27', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op29.met_dependencies = [MemoryDep('arg22_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (131072, 1)
op29.sizes = ([2, 16, 64, 64], [])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg22_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op29_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf29', get_index_2, mul, None)
        return store


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 131072})]
op30.unmet_dependencies = [   MemoryDep('buf28', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op30.met_dependencies = [MemoryDep('arg24_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (131072, 1)
op30.sizes = ([2, 16, 64, 64], [])
buf28_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg24_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf30_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op30_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf30', get_index_2, add, None)
        return store


op31: ExternKernelSchedulerNode(ExternKernelOut)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf29', mode=None), StarDep(name='buf30', mode=None)]
op31.met_dependencies = []
op31.outputs = [
    buf31: ExternKernelOut
    buf31.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf31.users = [
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
    ]
]
op31.node.kernel = extern_kernels.bmm


op32_op33_op35: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op32_op33_op35.writes = 
    [   MemoryDep('buf32', c0, {c0: 2048}),
        MemoryDep('buf33', c0, {c0: 2048}),
        MemoryDep('buf35', c0, {c0: 131072})]
op32_op33_op35.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 131072})]
op32_op33_op35.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op32_op33_op35.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf32.users = [
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
    ]
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf33.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf35.users = [NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op32_op33_op35.snodes[0] =
op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 2048})]
op32.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 131072})]
op32.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf32.users = [
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
    ]
]
op32.group.device = cuda:0
op32.group.iteration = (2048, 64)
op32.sizes = ([32, 64], [64])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op32_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf32', get_index_5, reduction)
        return store_reduction
op32_op33_op35.snodes[1] =
op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 2048})]
op33.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 131072}), MemoryDep('buf32', c0, {c0: 2048})]
op33.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf33.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (2048, 64)
op33.sizes = ([32, 64], [64])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op33_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf32', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf33', get_index_6, reduction)
        return store_reduction
op32_op33_op35.snodes[2] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 131072})]
op35.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 131072}),
        MemoryDep('buf32', c0, {c0: 2048}),
        MemoryDep('buf33', c0, {c0: 2048})]
op35.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf35.users = [NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (131072, 1)
op35.sizes = ([32, 64, 64], [])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op35_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf32', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf33', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf35', get_index_7, truediv, None)
        return store


op34: ExternKernelSchedulerNode(ExternKernelOut)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op34.met_dependencies = [StarDep(name='arg25_1', mode=None)]
op34.outputs = [
    buf34: ExternKernelOut
    buf34.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf34.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op34.node.kernel = extern_kernels.mm


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 131072})]
op36.unmet_dependencies = [   MemoryDep('buf34', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op36.met_dependencies = [MemoryDep('arg26_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (131072, 1)
op36.sizes = ([2, 16, 64, 64], [])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg26_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op36_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf36', get_index_2, add, None)
        return store


op37: ExternKernelSchedulerNode(ExternKernelOut)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf35', mode=None), StarDep(name='buf36', mode=None)]
op37.met_dependencies = []
op37.outputs = [
    buf37: ExternKernelOut
    buf37.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf37.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.node.kernel = extern_kernels.bmm


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 131072})]
op38.unmet_dependencies = [   MemoryDep('buf37', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op38.met_dependencies = []
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (131072, 1)
op38.sizes = ([2, 64, 16, 64], [])
buf37_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op38_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf38', get_index_1, load, None)
        return store


op39: ExternKernelSchedulerNode(ExternKernelOut)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf38', mode=None)]
op39.met_dependencies = [StarDep(name='arg27_1', mode=None)]
op39.outputs = [
    buf39: ExternKernelOut
    buf39.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
    ]
]
op39.node.kernel = extern_kernels.mm


op40_op41_op43: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op40_op41_op43.writes = 
    [   MemoryDep('buf40', c0, {c0: 128}),
        MemoryDep('buf41', c0, {c0: 128}),
        MemoryDep('buf43', c0, {c0: 131072})]
op40_op41_op43.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 131072}), MemoryDep('buf39', c0, {c0: 131072})]
op40_op41_op43.met_dependencies = 
    [   MemoryDep('arg28_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg29_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg30_1', c1, {c0: 128, c1: 1024})]
op40_op41_op43.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf40.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf41.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf43.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False),
    ]
]
op40_op41_op43.snodes[0] =
op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 128})]
op40.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 131072}), MemoryDep('buf39', c0, {c0: 131072})]
op40.met_dependencies = [MemoryDep('arg28_1', c1, {c0: 128, c1: 1024})]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf40.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (128, 1024)
op40.sizes = ([128], [1024])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg28_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op40_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf39', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf40', get_index_3, getitem)
        return store_reduction
op40_op41_op43.snodes[1] =
op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 128})]
op41.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 131072}), MemoryDep('buf39', c0, {c0: 131072})]
op41.met_dependencies = [MemoryDep('arg28_1', c1, {c0: 128, c1: 1024})]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf41.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (128, 1024)
op41.sizes = ([128], [1024])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg28_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op41_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf39', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf41', get_index_3, getitem_1)
        return store_reduction
op40_op41_op43.snodes[2] =
op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 131072})]
op43.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 131072}),
        MemoryDep('buf39', c0, {c0: 131072}),
        MemoryDep('buf40', c0, {c0: 128}),
        MemoryDep('buf41', c0, {c0: 128})]
op43.met_dependencies = 
    [   MemoryDep('arg28_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg29_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg30_1', c1, {c0: 128, c1: 1024})]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf43.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False),
    ]
]
op43.group.device = cuda:0
op43.group.iteration = (131072, 1)
op43.sizes = ([128, 1024], [])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg28_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg29_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg30_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op43_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf39', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf40', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf41', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg29_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg30_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf43', get_index_7, add_3, None)
        return store


op44: ExternKernelSchedulerNode(ExternKernelOut)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf43', mode=None)]
op44.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op44.outputs = [
    buf44: ExternKernelOut
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False)]
]
op44.node.kernel = extern_kernels.mm


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 524288})]
op45.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 524288})]
op45.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 128, c1: 4096})]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (524288, 1)
op45.sizes = ([128, 4096], [])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg32_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op45_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf45', get_index_2, relu, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelOut)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op46.met_dependencies = [StarDep(name='arg33_1', mode=None)]
op46.outputs = [
    buf46: ExternKernelOut
    buf46.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf46.users = [
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False),
    ]
]
op46.node.kernel = extern_kernels.mm


op47_op48_op50: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op47_op48_op50.writes = 
    [   MemoryDep('buf47', c0, {c0: 128}),
        MemoryDep('buf48', c0, {c0: 128}),
        MemoryDep('buf50', c0, {c0: 131072})]
op47_op48_op50.unmet_dependencies = [MemoryDep('buf43', c0, {c0: 131072}), MemoryDep('buf46', c0, {c0: 131072})]
op47_op48_op50.met_dependencies = 
    [   MemoryDep('arg34_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg35_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg36_1', c1, {c0: 128, c1: 1024})]
op47_op48_op50.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf47.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf48.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf50.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
]
op47_op48_op50.snodes[0] =
op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 128})]
op47.unmet_dependencies = [MemoryDep('buf43', c0, {c0: 131072}), MemoryDep('buf46', c0, {c0: 131072})]
op47.met_dependencies = [MemoryDep('arg34_1', c1, {c0: 128, c1: 1024})]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf47.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (128, 1024)
op47.sizes = ([128], [1024])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg34_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op47_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf46', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg34_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf47', get_index_3, getitem)
        return store_reduction
op47_op48_op50.snodes[1] =
op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 128})]
op48.unmet_dependencies = [MemoryDep('buf43', c0, {c0: 131072}), MemoryDep('buf46', c0, {c0: 131072})]
op48.met_dependencies = [MemoryDep('arg34_1', c1, {c0: 128, c1: 1024})]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf48.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (128, 1024)
op48.sizes = ([128], [1024])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg34_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op48_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf46', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg34_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf48', get_index_3, getitem_1)
        return store_reduction
op47_op48_op50.snodes[2] =
op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 131072})]
op50.unmet_dependencies = 
    [   MemoryDep('buf43', c0, {c0: 131072}),
        MemoryDep('buf46', c0, {c0: 131072}),
        MemoryDep('buf47', c0, {c0: 128}),
        MemoryDep('buf48', c0, {c0: 128})]
op50.met_dependencies = 
    [   MemoryDep('arg34_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg35_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg36_1', c1, {c0: 128, c1: 1024})]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf50.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
]
op50.group.device = cuda:0
op50.group.iteration = (131072, 1)
op50.sizes = ([128, 1024], [])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg34_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg35_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg36_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op50_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf46', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg34_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf47', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf48', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg35_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg36_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf50', get_index_7, add_3, None)
        return store


op51: ExternKernelSchedulerNode(ExternKernelOut)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = [StarDep(name='buf50', mode=None)]
op51.met_dependencies = [StarDep(name='arg37_1', mode=None)]
op51.outputs = [
    buf51: ExternKernelOut
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf51.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op51.node.kernel = extern_kernels.mm


op52: ExternKernelSchedulerNode(ExternKernelOut)
op52.writes = [StarDep(name='buf52', mode=None)]
op52.unmet_dependencies = [StarDep(name='buf50', mode=None)]
op52.met_dependencies = [StarDep(name='arg39_1', mode=None)]
op52.outputs = [
    buf52: ExternKernelOut
    buf52.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf52.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op52.node.kernel = extern_kernels.mm


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 131072})]
op53.unmet_dependencies = [   MemoryDep('buf51', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op53.met_dependencies = [MemoryDep('arg38_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (131072, 1)
op53.sizes = ([2, 16, 64, 64], [])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg38_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op53_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg38_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf53', get_index_2, mul, None)
        return store


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 131072})]
op54.unmet_dependencies = [   MemoryDep('buf52', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op54.met_dependencies = [MemoryDep('arg40_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (131072, 1)
op54.sizes = ([2, 16, 64, 64], [])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg40_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf54_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op54_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg40_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf54', get_index_2, add, None)
        return store


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf53', mode=None), StarDep(name='buf54', mode=None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf55.users = [
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=True, is_weak=False),
    ]
]
op55.node.kernel = extern_kernels.bmm


op56_op57_op59: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op56_op57_op59.writes = 
    [   MemoryDep('buf56', c0, {c0: 2048}),
        MemoryDep('buf57', c0, {c0: 2048}),
        MemoryDep('buf59', c0, {c0: 131072})]
op56_op57_op59.unmet_dependencies = [MemoryDep('buf55', c0, {c0: 131072})]
op56_op57_op59.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op56_op57_op59.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf56.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
    ]
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf57.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op56_op57_op59.snodes[0] =
op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 2048})]
op56.unmet_dependencies = [MemoryDep('buf55', c0, {c0: 131072})]
op56.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf56.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
    ]
]
op56.group.device = cuda:0
op56.group.iteration = (2048, 64)
op56.sizes = ([32, 64], [64])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf56_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op56_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf56', get_index_5, reduction)
        return store_reduction
op56_op57_op59.snodes[1] =
op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 2048})]
op57.unmet_dependencies = [MemoryDep('buf55', c0, {c0: 131072}), MemoryDep('buf56', c0, {c0: 2048})]
op57.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf57.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (2048, 64)
op57.sizes = ([32, 64], [64])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf56_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op57_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf56', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf57', get_index_6, reduction)
        return store_reduction
op56_op57_op59.snodes[2] =
op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 131072})]
op59.unmet_dependencies = 
    [   MemoryDep('buf55', c0, {c0: 131072}),
        MemoryDep('buf56', c0, {c0: 2048}),
        MemoryDep('buf57', c0, {c0: 2048})]
op59.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (131072, 1)
op59.sizes = ([32, 64, 64], [])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf56_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op59_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf56', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf57', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf59', get_index_7, truediv, None)
        return store


op58: ExternKernelSchedulerNode(ExternKernelOut)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = [StarDep(name='buf50', mode=None)]
op58.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op58.outputs = [
    buf58: ExternKernelOut
    buf58.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf58.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op58.node.kernel = extern_kernels.mm


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 131072})]
op60.unmet_dependencies = [   MemoryDep('buf58', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op60.met_dependencies = [MemoryDep('arg42_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (131072, 1)
op60.sizes = ([2, 16, 64, 64], [])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg42_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf60_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op60_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf60', get_index_2, add, None)
        return store


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf59', mode=None), StarDep(name='buf60', mode=None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.node.kernel = extern_kernels.bmm


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 131072})]
op62.unmet_dependencies = [   MemoryDep('buf61', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op62.met_dependencies = []
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (131072, 1)
op62.sizes = ([2, 64, 16, 64], [])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op62_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf62', get_index_1, load, None)
        return store


op63: ExternKernelSchedulerNode(ExternKernelOut)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf62', mode=None)]
op63.met_dependencies = [StarDep(name='arg43_1', mode=None)]
op63.outputs = [
    buf63: ExternKernelOut
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf63.users = [
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
]
op63.node.kernel = extern_kernels.mm


op64_op65_op67: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op64_op65_op67.writes = 
    [   MemoryDep('buf64', c0, {c0: 128}),
        MemoryDep('buf65', c0, {c0: 128}),
        MemoryDep('buf67', c0, {c0: 131072})]
op64_op65_op67.unmet_dependencies = [MemoryDep('buf50', c0, {c0: 131072}), MemoryDep('buf63', c0, {c0: 131072})]
op64_op65_op67.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg45_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg46_1', c1, {c0: 128, c1: 1024})]
op64_op65_op67.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf64.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf65.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf67.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=True, is_weak=False),
    ]
]
op64_op65_op67.snodes[0] =
op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 128})]
op64.unmet_dependencies = [MemoryDep('buf50', c0, {c0: 131072}), MemoryDep('buf63', c0, {c0: 131072})]
op64.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 128, c1: 1024})]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf64.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (128, 1024)
op64.sizes = ([128], [1024])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg44_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op64_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf63', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf64', get_index_3, getitem)
        return store_reduction
op64_op65_op67.snodes[1] =
op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 128})]
op65.unmet_dependencies = [MemoryDep('buf50', c0, {c0: 131072}), MemoryDep('buf63', c0, {c0: 131072})]
op65.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 128, c1: 1024})]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf65.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (128, 1024)
op65.sizes = ([128], [1024])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg44_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op65_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf63', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf65', get_index_3, getitem_1)
        return store_reduction
op64_op65_op67.snodes[2] =
op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 131072})]
op67.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 131072}),
        MemoryDep('buf63', c0, {c0: 131072}),
        MemoryDep('buf64', c0, {c0: 128}),
        MemoryDep('buf65', c0, {c0: 128})]
op67.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg45_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg46_1', c1, {c0: 128, c1: 1024})]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf67.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=True, is_weak=False),
    ]
]
op67.group.device = cuda:0
op67.group.iteration = (131072, 1)
op67.sizes = ([128, 1024], [])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg44_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg45_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg46_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op67_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf63', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf64', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf65', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg45_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg46_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf67', get_index_7, add_3, None)
        return store


op68: ExternKernelSchedulerNode(ExternKernelOut)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf67', mode=None)]
op68.met_dependencies = [StarDep(name='arg47_1', mode=None)]
op68.outputs = [
    buf68: ExternKernelOut
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf68.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False)]
]
op68.node.kernel = extern_kernels.mm


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 524288})]
op69.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 524288})]
op69.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 128, c1: 4096})]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (524288, 1)
op69.sizes = ([128, 4096], [])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg48_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op69_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf69', get_index_2, relu, None)
        return store


op70: ExternKernelSchedulerNode(ExternKernelOut)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf69', mode=None)]
op70.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op70.outputs = [
    buf70: ExternKernelOut
    buf70.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf70.users = [
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=True, is_weak=False),
    ]
]
op70.node.kernel = extern_kernels.mm


op71_op72_op74: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op71_op72_op74.writes = 
    [   MemoryDep('buf71', c0, {c0: 128}),
        MemoryDep('buf72', c0, {c0: 128}),
        MemoryDep('buf74', c0, {c0: 131072})]
op71_op72_op74.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 131072}), MemoryDep('buf70', c0, {c0: 131072})]
op71_op72_op74.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg51_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg52_1', c1, {c0: 128, c1: 1024})]
op71_op72_op74.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf71.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf72.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf74.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False),
    ]
]
op71_op72_op74.snodes[0] =
op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 128})]
op71.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 131072}), MemoryDep('buf70', c0, {c0: 131072})]
op71.met_dependencies = [MemoryDep('arg50_1', c1, {c0: 128, c1: 1024})]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf71.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (128, 1024)
op71.sizes = ([128], [1024])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg50_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op71_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf70', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf71', get_index_3, getitem)
        return store_reduction
op71_op72_op74.snodes[1] =
op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 128})]
op72.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 131072}), MemoryDep('buf70', c0, {c0: 131072})]
op72.met_dependencies = [MemoryDep('arg50_1', c1, {c0: 128, c1: 1024})]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf72.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (128, 1024)
op72.sizes = ([128], [1024])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg50_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op72_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf70', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf72', get_index_3, getitem_1)
        return store_reduction
op71_op72_op74.snodes[2] =
op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 131072})]
op74.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 131072}),
        MemoryDep('buf70', c0, {c0: 131072}),
        MemoryDep('buf71', c0, {c0: 128}),
        MemoryDep('buf72', c0, {c0: 128})]
op74.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg51_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg52_1', c1, {c0: 128, c1: 1024})]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf74.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False),
    ]
]
op74.group.device = cuda:0
op74.group.iteration = (131072, 1)
op74.sizes = ([128, 1024], [])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg50_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg51_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg52_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op74_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf70', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf71', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf72', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg51_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg52_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf74', get_index_7, add_3, None)
        return store


op75: ExternKernelSchedulerNode(ExternKernelOut)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op75.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op75.outputs = [
    buf75: ExternKernelOut
    buf75.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf75.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op75.node.kernel = extern_kernels.mm


op76: ExternKernelSchedulerNode(ExternKernelOut)
op76.writes = [StarDep(name='buf76', mode=None)]
op76.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op76.met_dependencies = [StarDep(name='arg55_1', mode=None)]
op76.outputs = [
    buf76: ExternKernelOut
    buf76.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf76.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op76.node.kernel = extern_kernels.mm


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 131072})]
op77.unmet_dependencies = [   MemoryDep('buf75', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op77.met_dependencies = [MemoryDep('arg54_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (131072, 1)
op77.sizes = ([2, 16, 64, 64], [])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg54_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op77_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg54_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf77', get_index_2, mul, None)
        return store


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 131072})]
op78.unmet_dependencies = [   MemoryDep('buf76', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op78.met_dependencies = [MemoryDep('arg56_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf78.users = [NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (131072, 1)
op78.sizes = ([2, 16, 64, 64], [])
buf76_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg56_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op78_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg56_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf78', get_index_2, add, None)
        return store


op79: ExternKernelSchedulerNode(ExternKernelOut)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf77', mode=None), StarDep(name='buf78', mode=None)]
op79.met_dependencies = []
op79.outputs = [
    buf79: ExternKernelOut
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf79.users = [
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False),
    ]
]
op79.node.kernel = extern_kernels.bmm


op80_op81_op83: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op80_op81_op83.writes = 
    [   MemoryDep('buf80', c0, {c0: 2048}),
        MemoryDep('buf81', c0, {c0: 2048}),
        MemoryDep('buf83', c0, {c0: 131072})]
op80_op81_op83.unmet_dependencies = [MemoryDep('buf79', c0, {c0: 131072})]
op80_op81_op83.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op80_op81_op83.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf80.users = [
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
    ]
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf81.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op80_op81_op83.snodes[0] =
op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 2048})]
op80.unmet_dependencies = [MemoryDep('buf79', c0, {c0: 131072})]
op80.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf80.users = [
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
    ]
]
op80.group.device = cuda:0
op80.group.iteration = (2048, 64)
op80.sizes = ([32, 64], [64])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op80_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf80', get_index_5, reduction)
        return store_reduction
op80_op81_op83.snodes[1] =
op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 2048})]
op81.unmet_dependencies = [MemoryDep('buf79', c0, {c0: 131072}), MemoryDep('buf80', c0, {c0: 2048})]
op81.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf81.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (2048, 64)
op81.sizes = ([32, 64], [64])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf81_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op81_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf80', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf81', get_index_6, reduction)
        return store_reduction
op80_op81_op83.snodes[2] =
op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 131072})]
op83.unmet_dependencies = 
    [   MemoryDep('buf79', c0, {c0: 131072}),
        MemoryDep('buf80', c0, {c0: 2048}),
        MemoryDep('buf81', c0, {c0: 2048})]
op83.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (131072, 1)
op83.sizes = ([32, 64, 64], [])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf81_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op83_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf80', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf81', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf83', get_index_7, truediv, None)
        return store


op82: ExternKernelSchedulerNode(ExternKernelOut)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op82.met_dependencies = [StarDep(name='arg57_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelOut
    buf82.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf82.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op82.node.kernel = extern_kernels.mm


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 131072})]
op84.unmet_dependencies = [   MemoryDep('buf82', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op84.met_dependencies = [MemoryDep('arg58_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (131072, 1)
op84.sizes = ([2, 16, 64, 64], [])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg58_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op84_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg58_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf84', get_index_2, add, None)
        return store


op85: ExternKernelSchedulerNode(ExternKernelOut)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf83', mode=None), StarDep(name='buf84', mode=None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: ExternKernelOut
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf85.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.node.kernel = extern_kernels.bmm


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 131072})]
op86.unmet_dependencies = [   MemoryDep('buf85', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op86.met_dependencies = []
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (131072, 1)
op86.sizes = ([2, 64, 16, 64], [])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf86_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op86_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf86', get_index_1, load, None)
        return store


op87: ExternKernelSchedulerNode(ExternKernelOut)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op87.met_dependencies = [StarDep(name='arg59_1', mode=None)]
op87.outputs = [
    buf87: ExternKernelOut
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf87.users = [
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False),
    ]
]
op87.node.kernel = extern_kernels.mm


op88_op89_op91: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op88_op89_op91.writes = 
    [   MemoryDep('buf88', c0, {c0: 128}),
        MemoryDep('buf89', c0, {c0: 128}),
        MemoryDep('buf91', c0, {c0: 131072})]
op88_op89_op91.unmet_dependencies = [MemoryDep('buf74', c0, {c0: 131072}), MemoryDep('buf87', c0, {c0: 131072})]
op88_op89_op91.met_dependencies = 
    [   MemoryDep('arg60_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg61_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg62_1', c1, {c0: 128, c1: 1024})]
op88_op89_op91.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf88.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf89.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf91.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False),
    ]
]
op88_op89_op91.snodes[0] =
op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 128})]
op88.unmet_dependencies = [MemoryDep('buf74', c0, {c0: 131072}), MemoryDep('buf87', c0, {c0: 131072})]
op88.met_dependencies = [MemoryDep('arg60_1', c1, {c0: 128, c1: 1024})]
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf88.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (128, 1024)
op88.sizes = ([128], [1024])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg60_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op88_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf87', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg60_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf88', get_index_3, getitem)
        return store_reduction
op88_op89_op91.snodes[1] =
op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 128})]
op89.unmet_dependencies = [MemoryDep('buf74', c0, {c0: 131072}), MemoryDep('buf87', c0, {c0: 131072})]
op89.met_dependencies = [MemoryDep('arg60_1', c1, {c0: 128, c1: 1024})]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf89.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (128, 1024)
op89.sizes = ([128], [1024])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg60_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op89_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf87', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg60_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf89', get_index_3, getitem_1)
        return store_reduction
op88_op89_op91.snodes[2] =
op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 131072})]
op91.unmet_dependencies = 
    [   MemoryDep('buf74', c0, {c0: 131072}),
        MemoryDep('buf87', c0, {c0: 131072}),
        MemoryDep('buf88', c0, {c0: 128}),
        MemoryDep('buf89', c0, {c0: 128})]
op91.met_dependencies = 
    [   MemoryDep('arg60_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg61_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg62_1', c1, {c0: 128, c1: 1024})]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf91.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False),
    ]
]
op91.group.device = cuda:0
op91.group.iteration = (131072, 1)
op91.sizes = ([128, 1024], [])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg60_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg61_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg62_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op91_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf87', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg60_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf88', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf89', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg61_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg62_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf91', get_index_7, add_3, None)
        return store


op92: ExternKernelSchedulerNode(ExternKernelOut)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf91', mode=None)]
op92.met_dependencies = [StarDep(name='arg63_1', mode=None)]
op92.outputs = [
    buf92: ExternKernelOut
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False)]
]
op92.node.kernel = extern_kernels.mm


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 524288})]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 524288})]
op93.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 128, c1: 4096})]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (524288, 1)
op93.sizes = ([128, 4096], [])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg64_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op93_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg64_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf93', get_index_2, relu, None)
        return store


op94: ExternKernelSchedulerNode(ExternKernelOut)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf93', mode=None)]
op94.met_dependencies = [StarDep(name='arg65_1', mode=None)]
op94.outputs = [
    buf94: ExternKernelOut
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False),
    ]
]
op94.node.kernel = extern_kernels.mm


op95_op96_op98: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op95_op96_op98.writes = 
    [   MemoryDep('buf95', c0, {c0: 128}),
        MemoryDep('buf96', c0, {c0: 128}),
        MemoryDep('buf98', c0, {c0: 131072})]
op95_op96_op98.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 131072}), MemoryDep('buf94', c0, {c0: 131072})]
op95_op96_op98.met_dependencies = 
    [   MemoryDep('arg66_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg67_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg68_1', c1, {c0: 128, c1: 1024})]
op95_op96_op98.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf95.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf96.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf98.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
    ]
]
op95_op96_op98.snodes[0] =
op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 128})]
op95.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 131072}), MemoryDep('buf94', c0, {c0: 131072})]
op95.met_dependencies = [MemoryDep('arg66_1', c1, {c0: 128, c1: 1024})]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf95.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (128, 1024)
op95.sizes = ([128], [1024])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg66_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op95_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf94', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg66_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf95', get_index_3, getitem)
        return store_reduction
op95_op96_op98.snodes[1] =
op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 128})]
op96.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 131072}), MemoryDep('buf94', c0, {c0: 131072})]
op96.met_dependencies = [MemoryDep('arg66_1', c1, {c0: 128, c1: 1024})]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf96.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (128, 1024)
op96.sizes = ([128], [1024])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg66_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op96_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf94', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg66_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf96', get_index_3, getitem_1)
        return store_reduction
op95_op96_op98.snodes[2] =
op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 131072})]
op98.unmet_dependencies = 
    [   MemoryDep('buf91', c0, {c0: 131072}),
        MemoryDep('buf94', c0, {c0: 131072}),
        MemoryDep('buf95', c0, {c0: 128}),
        MemoryDep('buf96', c0, {c0: 128})]
op98.met_dependencies = 
    [   MemoryDep('arg66_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg67_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg68_1', c1, {c0: 128, c1: 1024})]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf98.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
    ]
]
op98.group.device = cuda:0
op98.group.iteration = (131072, 1)
op98.sizes = ([128, 1024], [])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg66_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg67_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg68_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op98_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf94', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg66_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf95', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf96', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg67_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg68_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf98', get_index_7, add_3, None)
        return store


op99: ExternKernelSchedulerNode(ExternKernelOut)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf98', mode=None)]
op99.met_dependencies = [StarDep(name='arg69_1', mode=None)]
op99.outputs = [
    buf99: ExternKernelOut
    buf99.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf99.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op99.node.kernel = extern_kernels.mm


op100: ExternKernelSchedulerNode(ExternKernelOut)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf98', mode=None)]
op100.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op100.outputs = [
    buf100: ExternKernelOut
    buf100.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf100.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op100.node.kernel = extern_kernels.mm


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 131072})]
op101.unmet_dependencies = [   MemoryDep('buf99', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op101.met_dependencies = [MemoryDep('arg70_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (131072, 1)
op101.sizes = ([2, 16, 64, 64], [])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg70_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op101_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg70_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf101', get_index_2, mul, None)
        return store


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 131072})]
op102.unmet_dependencies = [   MemoryDep('buf100', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op102.met_dependencies = [MemoryDep('arg72_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (131072, 1)
op102.sizes = ([2, 16, 64, 64], [])
buf100_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg72_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf102_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op102_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf102', get_index_2, add, None)
        return store


op103: ExternKernelSchedulerNode(ExternKernelOut)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf101', mode=None), StarDep(name='buf102', mode=None)]
op103.met_dependencies = []
op103.outputs = [
    buf103: ExternKernelOut
    buf103.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf103.users = [
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=True, is_weak=False),
    ]
]
op103.node.kernel = extern_kernels.bmm


op104_op105_op107: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op104_op105_op107.writes = 
    [   MemoryDep('buf104', c0, {c0: 2048}),
        MemoryDep('buf105', c0, {c0: 2048}),
        MemoryDep('buf107', c0, {c0: 131072})]
op104_op105_op107.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 131072})]
op104_op105_op107.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op104_op105_op107.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf104.users = [
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
    ]
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf105.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op104_op105_op107.snodes[0] =
op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 2048})]
op104.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 131072})]
op104.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf104.users = [
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
    ]
]
op104.group.device = cuda:0
op104.group.iteration = (2048, 64)
op104.sizes = ([32, 64], [64])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op104_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf104', get_index_5, reduction)
        return store_reduction
op104_op105_op107.snodes[1] =
op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 2048})]
op105.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 131072}), MemoryDep('buf104', c0, {c0: 2048})]
op105.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf105.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (2048, 64)
op105.sizes = ([32, 64], [64])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op105_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf104', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf105', get_index_6, reduction)
        return store_reduction
op104_op105_op107.snodes[2] =
op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 131072})]
op107.unmet_dependencies = 
    [   MemoryDep('buf103', c0, {c0: 131072}),
        MemoryDep('buf104', c0, {c0: 2048}),
        MemoryDep('buf105', c0, {c0: 2048})]
op107.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (131072, 1)
op107.sizes = ([32, 64, 64], [])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op107_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf104', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf105', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf107', get_index_7, truediv, None)
        return store


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf98', mode=None)]
op106.met_dependencies = [StarDep(name='arg73_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf106.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op106.node.kernel = extern_kernels.mm


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 131072})]
op108.unmet_dependencies = [   MemoryDep('buf106', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op108.met_dependencies = [MemoryDep('arg74_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf108.users = [NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (131072, 1)
op108.sizes = ([2, 16, 64, 64], [])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg74_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op108_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg74_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf108', get_index_2, add, None)
        return store


op109: ExternKernelSchedulerNode(ExternKernelOut)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf107', mode=None), StarDep(name='buf108', mode=None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ExternKernelOut
    buf109.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf109.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.node.kernel = extern_kernels.bmm


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 131072})]
op110.unmet_dependencies = [   MemoryDep('buf109', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (131072, 1)
op110.sizes = ([2, 64, 16, 64], [])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op110_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf110', get_index_1, load, None)
        return store


op111: ExternKernelSchedulerNode(ExternKernelOut)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op111.met_dependencies = [StarDep(name='arg75_1', mode=None)]
op111.outputs = [
    buf111: ExternKernelOut
    buf111.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf111.users = [
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
    ]
]
op111.node.kernel = extern_kernels.mm


op112_op113_op115: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op112_op113_op115.writes = 
    [   MemoryDep('buf112', c0, {c0: 128}),
        MemoryDep('buf113', c0, {c0: 128}),
        MemoryDep('buf115', c0, {c0: 131072})]
op112_op113_op115.unmet_dependencies = [MemoryDep('buf111', c0, {c0: 131072}), MemoryDep('buf98', c0, {c0: 131072})]
op112_op113_op115.met_dependencies = 
    [   MemoryDep('arg76_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg77_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg78_1', c1, {c0: 128, c1: 1024})]
op112_op113_op115.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf112.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf113.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf115.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
    ]
]
op112_op113_op115.snodes[0] =
op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 128})]
op112.unmet_dependencies = [MemoryDep('buf111', c0, {c0: 131072}), MemoryDep('buf98', c0, {c0: 131072})]
op112.met_dependencies = [MemoryDep('arg76_1', c1, {c0: 128, c1: 1024})]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf112.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (128, 1024)
op112.sizes = ([128], [1024])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg76_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op112_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf111', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg76_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf112', get_index_3, getitem)
        return store_reduction
op112_op113_op115.snodes[1] =
op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 128})]
op113.unmet_dependencies = [MemoryDep('buf111', c0, {c0: 131072}), MemoryDep('buf98', c0, {c0: 131072})]
op113.met_dependencies = [MemoryDep('arg76_1', c1, {c0: 128, c1: 1024})]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf113.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (128, 1024)
op113.sizes = ([128], [1024])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg76_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op113_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf111', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg76_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf113', get_index_3, getitem_1)
        return store_reduction
op112_op113_op115.snodes[2] =
op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 131072})]
op115.unmet_dependencies = 
    [   MemoryDep('buf111', c0, {c0: 131072}),
        MemoryDep('buf112', c0, {c0: 128}),
        MemoryDep('buf113', c0, {c0: 128}),
        MemoryDep('buf98', c0, {c0: 131072})]
op115.met_dependencies = 
    [   MemoryDep('arg76_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg77_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg78_1', c1, {c0: 128, c1: 1024})]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf115.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
    ]
]
op115.group.device = cuda:0
op115.group.iteration = (131072, 1)
op115.sizes = ([128, 1024], [])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg76_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg77_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg78_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op115_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf111', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg76_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf112', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf113', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg77_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg78_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf115', get_index_7, add_3, None)
        return store


op116: ExternKernelSchedulerNode(ExternKernelOut)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = [StarDep(name='arg79_1', mode=None)]
op116.outputs = [
    buf116: ExternKernelOut
    buf116.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf116.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False)]
]
op116.node.kernel = extern_kernels.mm


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 524288})]
op117.unmet_dependencies = [MemoryDep('buf116', c0, {c0: 524288})]
op117.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 128, c1: 4096})]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf117.users = [NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (524288, 1)
op117.sizes = ([128, 4096], [])
buf116_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg80_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op117_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg80_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf117', get_index_2, relu, None)
        return store


op118: ExternKernelSchedulerNode(ExternKernelOut)
op118.writes = [StarDep(name='buf118', mode=None)]
op118.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op118.met_dependencies = [StarDep(name='arg81_1', mode=None)]
op118.outputs = [
    buf118: ExternKernelOut
    buf118.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
    ]
]
op118.node.kernel = extern_kernels.mm


op119_op120_op122: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op119_op120_op122.writes = 
    [   MemoryDep('buf119', c0, {c0: 128}),
        MemoryDep('buf120', c0, {c0: 128}),
        MemoryDep('buf122', c0, {c0: 131072})]
op119_op120_op122.unmet_dependencies = [MemoryDep('buf115', c0, {c0: 131072}), MemoryDep('buf118', c0, {c0: 131072})]
op119_op120_op122.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg83_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg84_1', c1, {c0: 128, c1: 1024})]
op119_op120_op122.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf119.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf120.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf122.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=True, is_weak=False),
    ]
]
op119_op120_op122.snodes[0] =
op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 128})]
op119.unmet_dependencies = [MemoryDep('buf115', c0, {c0: 131072}), MemoryDep('buf118', c0, {c0: 131072})]
op119.met_dependencies = [MemoryDep('arg82_1', c1, {c0: 128, c1: 1024})]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf119.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (128, 1024)
op119.sizes = ([128], [1024])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg82_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op119_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg82_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf119', get_index_3, getitem)
        return store_reduction
op119_op120_op122.snodes[1] =
op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 128})]
op120.unmet_dependencies = [MemoryDep('buf115', c0, {c0: 131072}), MemoryDep('buf118', c0, {c0: 131072})]
op120.met_dependencies = [MemoryDep('arg82_1', c1, {c0: 128, c1: 1024})]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf120.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (128, 1024)
op120.sizes = ([128], [1024])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg82_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op120_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg82_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf120', get_index_3, getitem_1)
        return store_reduction
op119_op120_op122.snodes[2] =
op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 131072})]
op122.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 131072}),
        MemoryDep('buf118', c0, {c0: 131072}),
        MemoryDep('buf119', c0, {c0: 128}),
        MemoryDep('buf120', c0, {c0: 128})]
op122.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg83_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg84_1', c1, {c0: 128, c1: 1024})]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf122.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=True, is_weak=False),
    ]
]
op122.group.device = cuda:0
op122.group.iteration = (131072, 1)
op122.sizes = ([128, 1024], [])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg82_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg83_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg84_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op122_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg82_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf119', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf120', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg83_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg84_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf122', get_index_7, add_3, None)
        return store


op123: ExternKernelSchedulerNode(ExternKernelOut)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op123.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op123.outputs = [
    buf123: ExternKernelOut
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf123.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op123.node.kernel = extern_kernels.mm


op124: ExternKernelSchedulerNode(ExternKernelOut)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op124.met_dependencies = [StarDep(name='arg87_1', mode=None)]
op124.outputs = [
    buf124: ExternKernelOut
    buf124.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf124.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op124.node.kernel = extern_kernels.mm


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 131072})]
op125.unmet_dependencies = [   MemoryDep('buf123', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op125.met_dependencies = [MemoryDep('arg86_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf125.users = [NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (131072, 1)
op125.sizes = ([2, 16, 64, 64], [])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg86_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op125_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf125', get_index_2, mul, None)
        return store


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 131072})]
op126.unmet_dependencies = [   MemoryDep('buf124', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op126.met_dependencies = [MemoryDep('arg88_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf126.users = [NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (131072, 1)
op126.sizes = ([2, 16, 64, 64], [])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg88_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf126_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op126_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg88_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf126', get_index_2, add, None)
        return store


op127: ExternKernelSchedulerNode(ExternKernelOut)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf125', mode=None), StarDep(name='buf126', mode=None)]
op127.met_dependencies = []
op127.outputs = [
    buf127: ExternKernelOut
    buf127.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf127.users = [
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
    ]
]
op127.node.kernel = extern_kernels.bmm


op128_op129_op131: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op128_op129_op131.writes = 
    [   MemoryDep('buf128', c0, {c0: 2048}),
        MemoryDep('buf129', c0, {c0: 2048}),
        MemoryDep('buf131', c0, {c0: 131072})]
op128_op129_op131.unmet_dependencies = [MemoryDep('buf127', c0, {c0: 131072})]
op128_op129_op131.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op128_op129_op131.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf128.users = [
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
    ]
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf129.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op128_op129_op131.snodes[0] =
op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 2048})]
op128.unmet_dependencies = [MemoryDep('buf127', c0, {c0: 131072})]
op128.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf128.users = [
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
    ]
]
op128.group.device = cuda:0
op128.group.iteration = (2048, 64)
op128.sizes = ([32, 64], [64])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op128_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf128', get_index_5, reduction)
        return store_reduction
op128_op129_op131.snodes[1] =
op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 2048})]
op129.unmet_dependencies = [MemoryDep('buf127', c0, {c0: 131072}), MemoryDep('buf128', c0, {c0: 2048})]
op129.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf129.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (2048, 64)
op129.sizes = ([32, 64], [64])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op129_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf128', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf129', get_index_6, reduction)
        return store_reduction
op128_op129_op131.snodes[2] =
op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 131072})]
op131.unmet_dependencies = 
    [   MemoryDep('buf127', c0, {c0: 131072}),
        MemoryDep('buf128', c0, {c0: 2048}),
        MemoryDep('buf129', c0, {c0: 2048})]
op131.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (131072, 1)
op131.sizes = ([32, 64, 64], [])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op131_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf128', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf129', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf131', get_index_7, truediv, None)
        return store


op130: ExternKernelSchedulerNode(ExternKernelOut)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op130.met_dependencies = [StarDep(name='arg89_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelOut
    buf130.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf130.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op130.node.kernel = extern_kernels.mm


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 131072})]
op132.unmet_dependencies = [   MemoryDep('buf130', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op132.met_dependencies = [MemoryDep('arg90_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (131072, 1)
op132.sizes = ([2, 16, 64, 64], [])
buf130_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg90_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf132_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op132_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf132', get_index_2, add, None)
        return store


op133: ExternKernelSchedulerNode(ExternKernelOut)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf131', mode=None), StarDep(name='buf132', mode=None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: ExternKernelOut
    buf133.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf133.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.node.kernel = extern_kernels.bmm


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 131072})]
op134.unmet_dependencies = [   MemoryDep('buf133', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op134.met_dependencies = []
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf134.users = [NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (131072, 1)
op134.sizes = ([2, 64, 16, 64], [])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op134_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf134', get_index_1, load, None)
        return store


op135: ExternKernelSchedulerNode(ExternKernelOut)
op135.writes = [StarDep(name='buf135', mode=None)]
op135.unmet_dependencies = [StarDep(name='buf134', mode=None)]
op135.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op135.outputs = [
    buf135: ExternKernelOut
    buf135.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf135.users = [
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=True, is_weak=False),
    ]
]
op135.node.kernel = extern_kernels.mm


op136_op137_op139: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op136_op137_op139.writes = 
    [   MemoryDep('buf136', c0, {c0: 128}),
        MemoryDep('buf137', c0, {c0: 128}),
        MemoryDep('buf139', c0, {c0: 131072})]
op136_op137_op139.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 131072}), MemoryDep('buf135', c0, {c0: 131072})]
op136_op137_op139.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg93_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg94_1', c1, {c0: 128, c1: 1024})]
op136_op137_op139.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf136.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf137.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf139.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
    ]
]
op136_op137_op139.snodes[0] =
op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 128})]
op136.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 131072}), MemoryDep('buf135', c0, {c0: 131072})]
op136.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 128, c1: 1024})]
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf136.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (128, 1024)
op136.sizes = ([128], [1024])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg92_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf136_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op136_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf135', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf136', get_index_3, getitem)
        return store_reduction
op136_op137_op139.snodes[1] =
op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 128})]
op137.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 131072}), MemoryDep('buf135', c0, {c0: 131072})]
op137.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 128, c1: 1024})]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf137.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (128, 1024)
op137.sizes = ([128], [1024])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg92_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op137_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf135', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf137', get_index_3, getitem_1)
        return store_reduction
op136_op137_op139.snodes[2] =
op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 131072})]
op139.unmet_dependencies = 
    [   MemoryDep('buf122', c0, {c0: 131072}),
        MemoryDep('buf135', c0, {c0: 131072}),
        MemoryDep('buf136', c0, {c0: 128}),
        MemoryDep('buf137', c0, {c0: 128})]
op139.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg93_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg94_1', c1, {c0: 128, c1: 1024})]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf139.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
    ]
]
op139.group.device = cuda:0
op139.group.iteration = (131072, 1)
op139.sizes = ([128, 1024], [])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg92_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf136_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg93_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg94_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op139_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf135', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf136', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf137', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg93_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg94_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf139', get_index_7, add_3, None)
        return store


op140: ExternKernelSchedulerNode(ExternKernelOut)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf139', mode=None)]
op140.met_dependencies = [StarDep(name='arg95_1', mode=None)]
op140.outputs = [
    buf140: ExternKernelOut
    buf140.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf140.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False)]
]
op140.node.kernel = extern_kernels.mm


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 524288})]
op141.unmet_dependencies = [MemoryDep('buf140', c0, {c0: 524288})]
op141.met_dependencies = [MemoryDep('arg96_1', c1, {c0: 128, c1: 4096})]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (524288, 1)
op141.sizes = ([128, 4096], [])
buf140_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg96_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op141_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf141', get_index_2, relu, None)
        return store


op142: ExternKernelSchedulerNode(ExternKernelOut)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf141', mode=None)]
op142.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op142.outputs = [
    buf142: ExternKernelOut
    buf142.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
    ]
]
op142.node.kernel = extern_kernels.mm


op143_op144_op146: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op143_op144_op146.writes = 
    [   MemoryDep('buf143', c0, {c0: 128}),
        MemoryDep('buf144', c0, {c0: 128}),
        MemoryDep('buf146', c0, {c0: 131072})]
op143_op144_op146.unmet_dependencies = [MemoryDep('buf139', c0, {c0: 131072}), MemoryDep('buf142', c0, {c0: 131072})]
op143_op144_op146.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg98_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg99_1', c1, {c0: 128, c1: 1024})]
op143_op144_op146.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf143.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf144.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf146.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=True, is_weak=False),
    ]
]
op143_op144_op146.snodes[0] =
op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 128})]
op143.unmet_dependencies = [MemoryDep('buf139', c0, {c0: 131072}), MemoryDep('buf142', c0, {c0: 131072})]
op143.met_dependencies = [MemoryDep('arg98_1', c1, {c0: 128, c1: 1024})]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf143.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (128, 1024)
op143.sizes = ([128], [1024])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg98_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op143_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf142', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf143', get_index_3, getitem)
        return store_reduction
op143_op144_op146.snodes[1] =
op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 128})]
op144.unmet_dependencies = [MemoryDep('buf139', c0, {c0: 131072}), MemoryDep('buf142', c0, {c0: 131072})]
op144.met_dependencies = [MemoryDep('arg98_1', c1, {c0: 128, c1: 1024})]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf144.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (128, 1024)
op144.sizes = ([128], [1024])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg98_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf144_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op144_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf142', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf144', get_index_3, getitem_1)
        return store_reduction
op143_op144_op146.snodes[2] =
op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 131072})]
op146.unmet_dependencies = 
    [   MemoryDep('buf139', c0, {c0: 131072}),
        MemoryDep('buf142', c0, {c0: 131072}),
        MemoryDep('buf143', c0, {c0: 128}),
        MemoryDep('buf144', c0, {c0: 128})]
op146.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg98_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg99_1', c1, {c0: 128, c1: 1024})]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf146.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=True, is_weak=False),
    ]
]
op146.group.device = cuda:0
op146.group.iteration = (131072, 1)
op146.sizes = ([128, 1024], [])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg98_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf144_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg99_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg100_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op146_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf142', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf143', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf144', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg99_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg100_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf146', get_index_7, add_3, None)
        return store


op147: ExternKernelSchedulerNode(ExternKernelOut)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op147.met_dependencies = [StarDep(name='arg101_1', mode=None)]
op147.outputs = [
    buf147: ExternKernelOut
    buf147.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf147.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op147.node.kernel = extern_kernels.mm


op148: ExternKernelSchedulerNode(ExternKernelOut)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op148.met_dependencies = [StarDep(name='arg103_1', mode=None)]
op148.outputs = [
    buf148: ExternKernelOut
    buf148.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf148.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op148.node.kernel = extern_kernels.mm


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 131072})]
op149.unmet_dependencies = [   MemoryDep('buf147', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op149.met_dependencies = [MemoryDep('arg102_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf149.users = [NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (131072, 1)
op149.sizes = ([2, 16, 64, 64], [])
buf147_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg102_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op149_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg102_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf149', get_index_2, mul, None)
        return store


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 131072})]
op150.unmet_dependencies = [   MemoryDep('buf148', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op150.met_dependencies = [MemoryDep('arg104_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf150.users = [NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (131072, 1)
op150.sizes = ([2, 16, 64, 64], [])
buf148_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg104_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op150_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg104_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf150', get_index_2, add, None)
        return store


op151: ExternKernelSchedulerNode(ExternKernelOut)
op151.writes = [StarDep(name='buf151', mode=None)]
op151.unmet_dependencies = [StarDep(name='buf149', mode=None), StarDep(name='buf150', mode=None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ExternKernelOut
    buf151.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf151.users = [
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False),
    ]
]
op151.node.kernel = extern_kernels.bmm


op152_op153_op155: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op152_op153_op155.writes = 
    [   MemoryDep('buf152', c0, {c0: 2048}),
        MemoryDep('buf153', c0, {c0: 2048}),
        MemoryDep('buf155', c0, {c0: 131072})]
op152_op153_op155.unmet_dependencies = [MemoryDep('buf151', c0, {c0: 131072})]
op152_op153_op155.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op152_op153_op155.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf152.users = [
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
    ]
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf153.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op152_op153_op155.snodes[0] =
op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 2048})]
op152.unmet_dependencies = [MemoryDep('buf151', c0, {c0: 131072})]
op152.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf152.users = [
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
    ]
]
op152.group.device = cuda:0
op152.group.iteration = (2048, 64)
op152.sizes = ([32, 64], [64])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op152_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf152', get_index_5, reduction)
        return store_reduction
op152_op153_op155.snodes[1] =
op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 2048})]
op153.unmet_dependencies = [MemoryDep('buf151', c0, {c0: 131072}), MemoryDep('buf152', c0, {c0: 2048})]
op153.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf153.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (2048, 64)
op153.sizes = ([32, 64], [64])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op153_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf152', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf153', get_index_6, reduction)
        return store_reduction
op152_op153_op155.snodes[2] =
op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 131072})]
op155.unmet_dependencies = 
    [   MemoryDep('buf151', c0, {c0: 131072}),
        MemoryDep('buf152', c0, {c0: 2048}),
        MemoryDep('buf153', c0, {c0: 2048})]
op155.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (131072, 1)
op155.sizes = ([32, 64, 64], [])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op155_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf152', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf153', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf155', get_index_7, truediv, None)
        return store


op154: ExternKernelSchedulerNode(ExternKernelOut)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op154.met_dependencies = [StarDep(name='arg105_1', mode=None)]
op154.outputs = [
    buf154: ExternKernelOut
    buf154.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf154.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op154.node.kernel = extern_kernels.mm


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 131072})]
op156.unmet_dependencies = [   MemoryDep('buf154', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op156.met_dependencies = [MemoryDep('arg106_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (131072, 1)
op156.sizes = ([2, 16, 64, 64], [])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg106_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op156_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf156', get_index_2, add, None)
        return store


op157: ExternKernelSchedulerNode(ExternKernelOut)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf155', mode=None), StarDep(name='buf156', mode=None)]
op157.met_dependencies = []
op157.outputs = [
    buf157: ExternKernelOut
    buf157.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf157.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.node.kernel = extern_kernels.bmm


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 131072})]
op158.unmet_dependencies = [   MemoryDep('buf157', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op158.met_dependencies = []
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (131072, 1)
op158.sizes = ([2, 64, 16, 64], [])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op158_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf158', get_index_1, load, None)
        return store


op159: ExternKernelSchedulerNode(ExternKernelOut)
op159.writes = [StarDep(name='buf159', mode=None)]
op159.unmet_dependencies = [StarDep(name='buf158', mode=None)]
op159.met_dependencies = [StarDep(name='arg107_1', mode=None)]
op159.outputs = [
    buf159: ExternKernelOut
    buf159.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=True, is_weak=False),
    ]
]
op159.node.kernel = extern_kernels.mm


op160_op161_op163: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op160_op161_op163.writes = 
    [   MemoryDep('buf160', c0, {c0: 128}),
        MemoryDep('buf161', c0, {c0: 128}),
        MemoryDep('buf163', c0, {c0: 131072})]
op160_op161_op163.unmet_dependencies = [MemoryDep('buf146', c0, {c0: 131072}), MemoryDep('buf159', c0, {c0: 131072})]
op160_op161_op163.met_dependencies = 
    [   MemoryDep('arg108_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg109_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg110_1', c1, {c0: 128, c1: 1024})]
op160_op161_op163.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf160.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf161.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf163.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=True, is_weak=False),
    ]
]
op160_op161_op163.snodes[0] =
op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 128})]
op160.unmet_dependencies = [MemoryDep('buf146', c0, {c0: 131072}), MemoryDep('buf159', c0, {c0: 131072})]
op160.met_dependencies = [MemoryDep('arg108_1', c1, {c0: 128, c1: 1024})]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf160.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (128, 1024)
op160.sizes = ([128], [1024])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg108_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op160_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf159', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg108_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf160', get_index_3, getitem)
        return store_reduction
op160_op161_op163.snodes[1] =
op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 128})]
op161.unmet_dependencies = [MemoryDep('buf146', c0, {c0: 131072}), MemoryDep('buf159', c0, {c0: 131072})]
op161.met_dependencies = [MemoryDep('arg108_1', c1, {c0: 128, c1: 1024})]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf161.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (128, 1024)
op161.sizes = ([128], [1024])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg108_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op161_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf159', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg108_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf161', get_index_3, getitem_1)
        return store_reduction
op160_op161_op163.snodes[2] =
op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 131072})]
op163.unmet_dependencies = 
    [   MemoryDep('buf146', c0, {c0: 131072}),
        MemoryDep('buf159', c0, {c0: 131072}),
        MemoryDep('buf160', c0, {c0: 128}),
        MemoryDep('buf161', c0, {c0: 128})]
op163.met_dependencies = 
    [   MemoryDep('arg108_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg109_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg110_1', c1, {c0: 128, c1: 1024})]
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf163.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=True, is_weak=False),
    ]
]
op163.group.device = cuda:0
op163.group.iteration = (131072, 1)
op163.sizes = ([128, 1024], [])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg108_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg109_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg110_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op163_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf159', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg108_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf160', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf161', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg109_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg110_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf163', get_index_7, add_3, None)
        return store


op164: ExternKernelSchedulerNode(ExternKernelOut)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf163', mode=None)]
op164.met_dependencies = [StarDep(name='arg111_1', mode=None)]
op164.outputs = [
    buf164: ExternKernelOut
    buf164.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf164.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False)]
]
op164.node.kernel = extern_kernels.mm


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 524288})]
op165.unmet_dependencies = [MemoryDep('buf164', c0, {c0: 524288})]
op165.met_dependencies = [MemoryDep('arg112_1', c1, {c0: 128, c1: 4096})]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (524288, 1)
op165.sizes = ([128, 4096], [])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg112_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf165_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op165_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg112_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf165', get_index_2, relu, None)
        return store


op166: ExternKernelSchedulerNode(ExternKernelOut)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf165', mode=None)]
op166.met_dependencies = [StarDep(name='arg113_1', mode=None)]
op166.outputs = [
    buf166: ExternKernelOut
    buf166.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf166.users = [
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=True, is_weak=False),
    ]
]
op166.node.kernel = extern_kernels.mm


op167_op168_op170: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op167_op168_op170.writes = 
    [   MemoryDep('buf167', c0, {c0: 128}),
        MemoryDep('buf168', c0, {c0: 128}),
        MemoryDep('buf170', c0, {c0: 131072})]
op167_op168_op170.unmet_dependencies = [MemoryDep('buf163', c0, {c0: 131072}), MemoryDep('buf166', c0, {c0: 131072})]
op167_op168_op170.met_dependencies = 
    [   MemoryDep('arg114_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg115_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg116_1', c1, {c0: 128, c1: 1024})]
op167_op168_op170.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf167.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf168.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf170.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
]
op167_op168_op170.snodes[0] =
op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 128})]
op167.unmet_dependencies = [MemoryDep('buf163', c0, {c0: 131072}), MemoryDep('buf166', c0, {c0: 131072})]
op167.met_dependencies = [MemoryDep('arg114_1', c1, {c0: 128, c1: 1024})]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf167.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (128, 1024)
op167.sizes = ([128], [1024])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg114_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op167_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf166', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg114_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf167', get_index_3, getitem)
        return store_reduction
op167_op168_op170.snodes[1] =
op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 128})]
op168.unmet_dependencies = [MemoryDep('buf163', c0, {c0: 131072}), MemoryDep('buf166', c0, {c0: 131072})]
op168.met_dependencies = [MemoryDep('arg114_1', c1, {c0: 128, c1: 1024})]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf168.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (128, 1024)
op168.sizes = ([128], [1024])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg114_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf168_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op168_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf166', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg114_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf168', get_index_3, getitem_1)
        return store_reduction
op167_op168_op170.snodes[2] =
op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 131072})]
op170.unmet_dependencies = 
    [   MemoryDep('buf163', c0, {c0: 131072}),
        MemoryDep('buf166', c0, {c0: 131072}),
        MemoryDep('buf167', c0, {c0: 128}),
        MemoryDep('buf168', c0, {c0: 128})]
op170.met_dependencies = 
    [   MemoryDep('arg114_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg115_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg116_1', c1, {c0: 128, c1: 1024})]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf170.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
]
op170.group.device = cuda:0
op170.group.iteration = (131072, 1)
op170.sizes = ([128, 1024], [])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg114_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf168_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg115_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg116_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op170_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf166', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg114_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf167', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf168', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg115_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg116_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf170', get_index_7, add_3, None)
        return store


op171: ExternKernelSchedulerNode(ExternKernelOut)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf170', mode=None)]
op171.met_dependencies = [StarDep(name='arg117_1', mode=None)]
op171.outputs = [
    buf171: ExternKernelOut
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf171.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op171.node.kernel = extern_kernels.mm


op172: ExternKernelSchedulerNode(ExternKernelOut)
op172.writes = [StarDep(name='buf172', mode=None)]
op172.unmet_dependencies = [StarDep(name='buf170', mode=None)]
op172.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op172.outputs = [
    buf172: ExternKernelOut
    buf172.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf172.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op172.node.kernel = extern_kernels.mm


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 131072})]
op173.unmet_dependencies = [   MemoryDep('buf171', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op173.met_dependencies = [MemoryDep('arg118_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf173.users = [NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (131072, 1)
op173.sizes = ([2, 16, 64, 64], [])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg118_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op173_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf173', get_index_2, mul, None)
        return store


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 131072})]
op174.unmet_dependencies = [   MemoryDep('buf172', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op174.met_dependencies = [MemoryDep('arg120_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf174.users = [NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (131072, 1)
op174.sizes = ([2, 16, 64, 64], [])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg120_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op174_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg120_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf174', get_index_2, add, None)
        return store


op175: ExternKernelSchedulerNode(ExternKernelOut)
op175.writes = [StarDep(name='buf175', mode=None)]
op175.unmet_dependencies = [StarDep(name='buf173', mode=None), StarDep(name='buf174', mode=None)]
op175.met_dependencies = []
op175.outputs = [
    buf175: ExternKernelOut
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf175.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
]
op175.node.kernel = extern_kernels.bmm


op176_op177_op179: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op176_op177_op179.writes = 
    [   MemoryDep('buf176', c0, {c0: 2048}),
        MemoryDep('buf177', c0, {c0: 2048}),
        MemoryDep('buf179', c0, {c0: 131072})]
op176_op177_op179.unmet_dependencies = [MemoryDep('buf175', c0, {c0: 131072})]
op176_op177_op179.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op176_op177_op179.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf176.users = [
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
    ]
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf177.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op176_op177_op179.snodes[0] =
op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 2048})]
op176.unmet_dependencies = [MemoryDep('buf175', c0, {c0: 131072})]
op176.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf176.users = [
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
    ]
]
op176.group.device = cuda:0
op176.group.iteration = (2048, 64)
op176.sizes = ([32, 64], [64])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op176_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf176', get_index_5, reduction)
        return store_reduction
op176_op177_op179.snodes[1] =
op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 2048})]
op177.unmet_dependencies = [MemoryDep('buf175', c0, {c0: 131072}), MemoryDep('buf176', c0, {c0: 2048})]
op177.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf177.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (2048, 64)
op177.sizes = ([32, 64], [64])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf177_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op177_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf176', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf177', get_index_6, reduction)
        return store_reduction
op176_op177_op179.snodes[2] =
op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 131072})]
op179.unmet_dependencies = 
    [   MemoryDep('buf175', c0, {c0: 131072}),
        MemoryDep('buf176', c0, {c0: 2048}),
        MemoryDep('buf177', c0, {c0: 2048})]
op179.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (131072, 1)
op179.sizes = ([32, 64, 64], [])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf177_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op179_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf176', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf177', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf179', get_index_7, truediv, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf170', mode=None)]
op178.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf178.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op178.node.kernel = extern_kernels.mm


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 131072})]
op180.unmet_dependencies = [   MemoryDep('buf178', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op180.met_dependencies = [MemoryDep('arg122_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf180.users = [NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (131072, 1)
op180.sizes = ([2, 16, 64, 64], [])
buf178_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg122_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op180_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf180', get_index_2, add, None)
        return store


op181: ExternKernelSchedulerNode(ExternKernelOut)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf179', mode=None), StarDep(name='buf180', mode=None)]
op181.met_dependencies = []
op181.outputs = [
    buf181: ExternKernelOut
    buf181.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf181.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.node.kernel = extern_kernels.bmm


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 131072})]
op182.unmet_dependencies = [   MemoryDep('buf181', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op182.met_dependencies = []
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf182.users = [NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (131072, 1)
op182.sizes = ([2, 64, 16, 64], [])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf182_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op182_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf182', get_index_1, load, None)
        return store


op183: ExternKernelSchedulerNode(ExternKernelOut)
op183.writes = [StarDep(name='buf183', mode=None)]
op183.unmet_dependencies = [StarDep(name='buf182', mode=None)]
op183.met_dependencies = [StarDep(name='arg123_1', mode=None)]
op183.outputs = [
    buf183: ExternKernelOut
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
]
op183.node.kernel = extern_kernels.mm


op184_op185_op187: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op184_op185_op187.writes = 
    [   MemoryDep('buf184', c0, {c0: 128}),
        MemoryDep('buf185', c0, {c0: 128}),
        MemoryDep('buf187', c0, {c0: 131072})]
op184_op185_op187.unmet_dependencies = [MemoryDep('buf170', c0, {c0: 131072}), MemoryDep('buf183', c0, {c0: 131072})]
op184_op185_op187.met_dependencies = 
    [   MemoryDep('arg124_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg125_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg126_1', c1, {c0: 128, c1: 1024})]
op184_op185_op187.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf184.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf185.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf187.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
    ]
]
op184_op185_op187.snodes[0] =
op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 128})]
op184.unmet_dependencies = [MemoryDep('buf170', c0, {c0: 131072}), MemoryDep('buf183', c0, {c0: 131072})]
op184.met_dependencies = [MemoryDep('arg124_1', c1, {c0: 128, c1: 1024})]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf184.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (128, 1024)
op184.sizes = ([128], [1024])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg124_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op184_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg124_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf184', get_index_3, getitem)
        return store_reduction
op184_op185_op187.snodes[1] =
op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 128})]
op185.unmet_dependencies = [MemoryDep('buf170', c0, {c0: 131072}), MemoryDep('buf183', c0, {c0: 131072})]
op185.met_dependencies = [MemoryDep('arg124_1', c1, {c0: 128, c1: 1024})]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf185.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (128, 1024)
op185.sizes = ([128], [1024])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg124_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op185_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg124_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf185', get_index_3, getitem_1)
        return store_reduction
op184_op185_op187.snodes[2] =
op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 131072})]
op187.unmet_dependencies = 
    [   MemoryDep('buf170', c0, {c0: 131072}),
        MemoryDep('buf183', c0, {c0: 131072}),
        MemoryDep('buf184', c0, {c0: 128}),
        MemoryDep('buf185', c0, {c0: 128})]
op187.met_dependencies = 
    [   MemoryDep('arg124_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg125_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg126_1', c1, {c0: 128, c1: 1024})]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf187.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
    ]
]
op187.group.device = cuda:0
op187.group.iteration = (131072, 1)
op187.sizes = ([128, 1024], [])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg124_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg125_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg126_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op187_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg124_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf184', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf185', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg125_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg126_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf187', get_index_7, add_3, None)
        return store


op188: ExternKernelSchedulerNode(ExternKernelOut)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op188.met_dependencies = [StarDep(name='arg127_1', mode=None)]
op188.outputs = [
    buf188: ExternKernelOut
    buf188.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf188.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False)]
]
op188.node.kernel = extern_kernels.mm


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 524288})]
op189.unmet_dependencies = [MemoryDep('buf188', c0, {c0: 524288})]
op189.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 128, c1: 4096})]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (524288, 1)
op189.sizes = ([128, 4096], [])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg128_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf189_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op189_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg128_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf189', get_index_2, relu, None)
        return store


op190: ExternKernelSchedulerNode(ExternKernelOut)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op190.met_dependencies = [StarDep(name='arg129_1', mode=None)]
op190.outputs = [
    buf190: ExternKernelOut
    buf190.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf190.users = [
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
    ]
]
op190.node.kernel = extern_kernels.mm


op191_op192_op194: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op191_op192_op194.writes = 
    [   MemoryDep('buf191', c0, {c0: 128}),
        MemoryDep('buf192', c0, {c0: 128}),
        MemoryDep('buf194', c0, {c0: 131072})]
op191_op192_op194.unmet_dependencies = [MemoryDep('buf187', c0, {c0: 131072}), MemoryDep('buf190', c0, {c0: 131072})]
op191_op192_op194.met_dependencies = 
    [   MemoryDep('arg130_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg131_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg132_1', c1, {c0: 128, c1: 1024})]
op191_op192_op194.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf191.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf192.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf194.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False),
    ]
]
op191_op192_op194.snodes[0] =
op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 128})]
op191.unmet_dependencies = [MemoryDep('buf187', c0, {c0: 131072}), MemoryDep('buf190', c0, {c0: 131072})]
op191.met_dependencies = [MemoryDep('arg130_1', c1, {c0: 128, c1: 1024})]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf191.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (128, 1024)
op191.sizes = ([128], [1024])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg130_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op191_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf190', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg130_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf191', get_index_3, getitem)
        return store_reduction
op191_op192_op194.snodes[1] =
op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 128})]
op192.unmet_dependencies = [MemoryDep('buf187', c0, {c0: 131072}), MemoryDep('buf190', c0, {c0: 131072})]
op192.met_dependencies = [MemoryDep('arg130_1', c1, {c0: 128, c1: 1024})]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf192.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (128, 1024)
op192.sizes = ([128], [1024])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg130_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op192_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf190', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg130_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf192', get_index_3, getitem_1)
        return store_reduction
op191_op192_op194.snodes[2] =
op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 131072})]
op194.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 131072}),
        MemoryDep('buf190', c0, {c0: 131072}),
        MemoryDep('buf191', c0, {c0: 128}),
        MemoryDep('buf192', c0, {c0: 128})]
op194.met_dependencies = 
    [   MemoryDep('arg130_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg131_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg132_1', c1, {c0: 128, c1: 1024})]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf194.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False),
    ]
]
op194.group.device = cuda:0
op194.group.iteration = (131072, 1)
op194.sizes = ([128, 1024], [])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg130_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg131_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg132_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op194_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf190', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg130_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf191', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf192', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg131_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg132_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf194', get_index_7, add_3, None)
        return store


op195: ExternKernelSchedulerNode(ExternKernelOut)
op195.writes = [StarDep(name='buf195', mode=None)]
op195.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op195.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op195.outputs = [
    buf195: ExternKernelOut
    buf195.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf195.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op195.node.kernel = extern_kernels.mm


op196: ExternKernelSchedulerNode(ExternKernelOut)
op196.writes = [StarDep(name='buf196', mode=None)]
op196.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op196.met_dependencies = [StarDep(name='arg135_1', mode=None)]
op196.outputs = [
    buf196: ExternKernelOut
    buf196.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf196.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op196.node.kernel = extern_kernels.mm


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 131072})]
op197.unmet_dependencies = [   MemoryDep('buf195', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op197.met_dependencies = [MemoryDep('arg134_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (131072, 1)
op197.sizes = ([2, 16, 64, 64], [])
buf195_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg134_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op197_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg134_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf197', get_index_2, mul, None)
        return store


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 131072})]
op198.unmet_dependencies = [   MemoryDep('buf196', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op198.met_dependencies = [MemoryDep('arg136_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (131072, 1)
op198.sizes = ([2, 16, 64, 64], [])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg136_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op198_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf198', get_index_2, add, None)
        return store


op199: ExternKernelSchedulerNode(ExternKernelOut)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf197', mode=None), StarDep(name='buf198', mode=None)]
op199.met_dependencies = []
op199.outputs = [
    buf199: ExternKernelOut
    buf199.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf199.users = [
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False),
    ]
]
op199.node.kernel = extern_kernels.bmm


op200_op201_op203: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op200_op201_op203.writes = 
    [   MemoryDep('buf200', c0, {c0: 2048}),
        MemoryDep('buf201', c0, {c0: 2048}),
        MemoryDep('buf203', c0, {c0: 131072})]
op200_op201_op203.unmet_dependencies = [MemoryDep('buf199', c0, {c0: 131072})]
op200_op201_op203.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op200_op201_op203.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf200.users = [
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
    ]
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf201.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op200_op201_op203.snodes[0] =
op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 2048})]
op200.unmet_dependencies = [MemoryDep('buf199', c0, {c0: 131072})]
op200.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf200.users = [
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
    ]
]
op200.group.device = cuda:0
op200.group.iteration = (2048, 64)
op200.sizes = ([32, 64], [64])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op200_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf200', get_index_5, reduction)
        return store_reduction
op200_op201_op203.snodes[1] =
op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 2048})]
op201.unmet_dependencies = [MemoryDep('buf199', c0, {c0: 131072}), MemoryDep('buf200', c0, {c0: 2048})]
op201.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf201.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (2048, 64)
op201.sizes = ([32, 64], [64])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op201_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf200', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf201', get_index_6, reduction)
        return store_reduction
op200_op201_op203.snodes[2] =
op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 131072})]
op203.unmet_dependencies = 
    [   MemoryDep('buf199', c0, {c0: 131072}),
        MemoryDep('buf200', c0, {c0: 2048}),
        MemoryDep('buf201', c0, {c0: 2048})]
op203.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (131072, 1)
op203.sizes = ([32, 64, 64], [])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op203_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf200', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf201', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf203', get_index_7, truediv, None)
        return store


op202: ExternKernelSchedulerNode(ExternKernelOut)
op202.writes = [StarDep(name='buf202', mode=None)]
op202.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op202.met_dependencies = [StarDep(name='arg137_1', mode=None)]
op202.outputs = [
    buf202: ExternKernelOut
    buf202.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf202.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op202.node.kernel = extern_kernels.mm


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 131072})]
op204.unmet_dependencies = [   MemoryDep('buf202', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op204.met_dependencies = [MemoryDep('arg138_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf204.users = [NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (131072, 1)
op204.sizes = ([2, 16, 64, 64], [])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg138_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf204_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op204_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg138_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf204', get_index_2, add, None)
        return store


op205: ExternKernelSchedulerNode(ExternKernelOut)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf203', mode=None), StarDep(name='buf204', mode=None)]
op205.met_dependencies = []
op205.outputs = [
    buf205: ExternKernelOut
    buf205.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf205.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op205.node.kernel = extern_kernels.bmm


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 131072})]
op206.unmet_dependencies = [   MemoryDep('buf205', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op206.met_dependencies = []
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (131072, 1)
op206.sizes = ([2, 64, 16, 64], [])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op206_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf206', get_index_1, load, None)
        return store


op207: ExternKernelSchedulerNode(ExternKernelOut)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op207.met_dependencies = [StarDep(name='arg139_1', mode=None)]
op207.outputs = [
    buf207: ExternKernelOut
    buf207.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf207.users = [
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False),
    ]
]
op207.node.kernel = extern_kernels.mm


op208_op209_op211: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op208_op209_op211.writes = 
    [   MemoryDep('buf208', c0, {c0: 128}),
        MemoryDep('buf209', c0, {c0: 128}),
        MemoryDep('buf211', c0, {c0: 131072})]
op208_op209_op211.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 131072}), MemoryDep('buf207', c0, {c0: 131072})]
op208_op209_op211.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg141_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg142_1', c1, {c0: 128, c1: 1024})]
op208_op209_op211.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf208.users = [NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf209.users = [NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf211.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=True, is_weak=False),
    ]
]
op208_op209_op211.snodes[0] =
op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 128})]
op208.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 131072}), MemoryDep('buf207', c0, {c0: 131072})]
op208.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 128, c1: 1024})]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf208.users = [NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (128, 1024)
op208.sizes = ([128], [1024])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg140_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op208_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf207', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf208', get_index_3, getitem)
        return store_reduction
op208_op209_op211.snodes[1] =
op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 128})]
op209.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 131072}), MemoryDep('buf207', c0, {c0: 131072})]
op209.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 128, c1: 1024})]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf209.users = [NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (128, 1024)
op209.sizes = ([128], [1024])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg140_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op209_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf207', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf209', get_index_3, getitem_1)
        return store_reduction
op208_op209_op211.snodes[2] =
op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 131072})]
op211.unmet_dependencies = 
    [   MemoryDep('buf194', c0, {c0: 131072}),
        MemoryDep('buf207', c0, {c0: 131072}),
        MemoryDep('buf208', c0, {c0: 128}),
        MemoryDep('buf209', c0, {c0: 128})]
op211.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg141_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg142_1', c1, {c0: 128, c1: 1024})]
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf211.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=True, is_weak=False),
    ]
]
op211.group.device = cuda:0
op211.group.iteration = (131072, 1)
op211.sizes = ([128, 1024], [])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg140_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg141_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg142_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op211_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf207', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf208', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf209', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg141_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg142_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf211', get_index_7, add_3, None)
        return store


op212: ExternKernelSchedulerNode(ExternKernelOut)
op212.writes = [StarDep(name='buf212', mode=None)]
op212.unmet_dependencies = [StarDep(name='buf211', mode=None)]
op212.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op212.outputs = [
    buf212: ExternKernelOut
    buf212.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf212.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False)]
]
op212.node.kernel = extern_kernels.mm


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 524288})]
op213.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 524288})]
op213.met_dependencies = [MemoryDep('arg144_1', c1, {c0: 128, c1: 4096})]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf213.users = [NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (524288, 1)
op213.sizes = ([128, 4096], [])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg144_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op213_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg144_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf213', get_index_2, relu, None)
        return store


op214: ExternKernelSchedulerNode(ExternKernelOut)
op214.writes = [StarDep(name='buf214', mode=None)]
op214.unmet_dependencies = [StarDep(name='buf213', mode=None)]
op214.met_dependencies = [StarDep(name='arg145_1', mode=None)]
op214.outputs = [
    buf214: ExternKernelOut
    buf214.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf214.users = [
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=True, is_weak=False),
    ]
]
op214.node.kernel = extern_kernels.mm


op215_op216_op218: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op215_op216_op218.writes = 
    [   MemoryDep('buf215', c0, {c0: 128}),
        MemoryDep('buf216', c0, {c0: 128}),
        MemoryDep('buf218', c0, {c0: 131072})]
op215_op216_op218.unmet_dependencies = [MemoryDep('buf211', c0, {c0: 131072}), MemoryDep('buf214', c0, {c0: 131072})]
op215_op216_op218.met_dependencies = 
    [   MemoryDep('arg146_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg147_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg148_1', c1, {c0: 128, c1: 1024})]
op215_op216_op218.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf215.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf216.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf218.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
    ]
]
op215_op216_op218.snodes[0] =
op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 128})]
op215.unmet_dependencies = [MemoryDep('buf211', c0, {c0: 131072}), MemoryDep('buf214', c0, {c0: 131072})]
op215.met_dependencies = [MemoryDep('arg146_1', c1, {c0: 128, c1: 1024})]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf215.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (128, 1024)
op215.sizes = ([128], [1024])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg146_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op215_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf214', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg146_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf215', get_index_3, getitem)
        return store_reduction
op215_op216_op218.snodes[1] =
op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 128})]
op216.unmet_dependencies = [MemoryDep('buf211', c0, {c0: 131072}), MemoryDep('buf214', c0, {c0: 131072})]
op216.met_dependencies = [MemoryDep('arg146_1', c1, {c0: 128, c1: 1024})]
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf216.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (128, 1024)
op216.sizes = ([128], [1024])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg146_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op216_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf214', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg146_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf216', get_index_3, getitem_1)
        return store_reduction
op215_op216_op218.snodes[2] =
op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 131072})]
op218.unmet_dependencies = 
    [   MemoryDep('buf211', c0, {c0: 131072}),
        MemoryDep('buf214', c0, {c0: 131072}),
        MemoryDep('buf215', c0, {c0: 128}),
        MemoryDep('buf216', c0, {c0: 128})]
op218.met_dependencies = 
    [   MemoryDep('arg146_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg147_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg148_1', c1, {c0: 128, c1: 1024})]
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf218.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
    ]
]
op218.group.device = cuda:0
op218.group.iteration = (131072, 1)
op218.sizes = ([128, 1024], [])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg146_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg147_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg148_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op218_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf214', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg146_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf215', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf216', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg147_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg148_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf218', get_index_7, add_3, None)
        return store


op219: ExternKernelSchedulerNode(ExternKernelOut)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op219.met_dependencies = [StarDep(name='arg149_1', mode=None)]
op219.outputs = [
    buf219: ExternKernelOut
    buf219.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf219.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op219.node.kernel = extern_kernels.mm


op220: ExternKernelSchedulerNode(ExternKernelOut)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op220.met_dependencies = [StarDep(name='arg151_1', mode=None)]
op220.outputs = [
    buf220: ExternKernelOut
    buf220.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf220.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op220.node.kernel = extern_kernels.mm


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 131072})]
op221.unmet_dependencies = [   MemoryDep('buf219', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op221.met_dependencies = [MemoryDep('arg150_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (131072, 1)
op221.sizes = ([2, 16, 64, 64], [])
buf219_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg150_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf221_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op221_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg150_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf221', get_index_2, mul, None)
        return store


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 131072})]
op222.unmet_dependencies = [   MemoryDep('buf220', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op222.met_dependencies = [MemoryDep('arg152_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf222.users = [NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (131072, 1)
op222.sizes = ([2, 16, 64, 64], [])
buf220_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg152_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf222_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op222_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg152_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf222', get_index_2, add, None)
        return store


op223: ExternKernelSchedulerNode(ExternKernelOut)
op223.writes = [StarDep(name='buf223', mode=None)]
op223.unmet_dependencies = [StarDep(name='buf221', mode=None), StarDep(name='buf222', mode=None)]
op223.met_dependencies = []
op223.outputs = [
    buf223: ExternKernelOut
    buf223.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf223.users = [
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False),
    ]
]
op223.node.kernel = extern_kernels.bmm


op224_op225_op227: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op224_op225_op227.writes = 
    [   MemoryDep('buf224', c0, {c0: 2048}),
        MemoryDep('buf225', c0, {c0: 2048}),
        MemoryDep('buf227', c0, {c0: 131072})]
op224_op225_op227.unmet_dependencies = [MemoryDep('buf223', c0, {c0: 131072})]
op224_op225_op227.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op224_op225_op227.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf224.users = [
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
    ]
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf225.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op224_op225_op227.snodes[0] =
op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 2048})]
op224.unmet_dependencies = [MemoryDep('buf223', c0, {c0: 131072})]
op224.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf224.users = [
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
    ]
]
op224.group.device = cuda:0
op224.group.iteration = (2048, 64)
op224.sizes = ([32, 64], [64])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op224_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf224', get_index_5, reduction)
        return store_reduction
op224_op225_op227.snodes[1] =
op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 2048})]
op225.unmet_dependencies = [MemoryDep('buf223', c0, {c0: 131072}), MemoryDep('buf224', c0, {c0: 2048})]
op225.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf225.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (2048, 64)
op225.sizes = ([32, 64], [64])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op225_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf224', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf225', get_index_6, reduction)
        return store_reduction
op224_op225_op227.snodes[2] =
op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 131072})]
op227.unmet_dependencies = 
    [   MemoryDep('buf223', c0, {c0: 131072}),
        MemoryDep('buf224', c0, {c0: 2048}),
        MemoryDep('buf225', c0, {c0: 2048})]
op227.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (131072, 1)
op227.sizes = ([32, 64, 64], [])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op227_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf224', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf225', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf227', get_index_7, truediv, None)
        return store


op226: ExternKernelSchedulerNode(ExternKernelOut)
op226.writes = [StarDep(name='buf226', mode=None)]
op226.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op226.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op226.outputs = [
    buf226: ExternKernelOut
    buf226.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf226.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op226.node.kernel = extern_kernels.mm


op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 131072})]
op228.unmet_dependencies = [   MemoryDep('buf226', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op228.met_dependencies = [MemoryDep('arg154_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf228.users = [NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (131072, 1)
op228.sizes = ([2, 16, 64, 64], [])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg154_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op228_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf228', get_index_2, add, None)
        return store


op229: ExternKernelSchedulerNode(ExternKernelOut)
op229.writes = [StarDep(name='buf229', mode=None)]
op229.unmet_dependencies = [StarDep(name='buf227', mode=None), StarDep(name='buf228', mode=None)]
op229.met_dependencies = []
op229.outputs = [
    buf229: ExternKernelOut
    buf229.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf229.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op229.node.kernel = extern_kernels.bmm


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 131072})]
op230.unmet_dependencies = [   MemoryDep('buf229', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op230.met_dependencies = []
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf230.users = [NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (131072, 1)
op230.sizes = ([2, 64, 16, 64], [])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op230_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf230', get_index_1, load, None)
        return store


op231: ExternKernelSchedulerNode(ExternKernelOut)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = [StarDep(name='buf230', mode=None)]
op231.met_dependencies = [StarDep(name='arg155_1', mode=None)]
op231.outputs = [
    buf231: ExternKernelOut
    buf231.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf231.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
    ]
]
op231.node.kernel = extern_kernels.mm


op232_op233_op235: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op232_op233_op235.writes = 
    [   MemoryDep('buf232', c0, {c0: 128}),
        MemoryDep('buf233', c0, {c0: 128}),
        MemoryDep('buf235', c0, {c0: 131072})]
op232_op233_op235.unmet_dependencies = [MemoryDep('buf218', c0, {c0: 131072}), MemoryDep('buf231', c0, {c0: 131072})]
op232_op233_op235.met_dependencies = 
    [   MemoryDep('arg156_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg157_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg158_1', c1, {c0: 128, c1: 1024})]
op232_op233_op235.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf232.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf233.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf235.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
    ]
]
op232_op233_op235.snodes[0] =
op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 128})]
op232.unmet_dependencies = [MemoryDep('buf218', c0, {c0: 131072}), MemoryDep('buf231', c0, {c0: 131072})]
op232.met_dependencies = [MemoryDep('arg156_1', c1, {c0: 128, c1: 1024})]
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf232.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (128, 1024)
op232.sizes = ([128], [1024])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg156_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op232_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf231', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg156_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf232', get_index_3, getitem)
        return store_reduction
op232_op233_op235.snodes[1] =
op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 128})]
op233.unmet_dependencies = [MemoryDep('buf218', c0, {c0: 131072}), MemoryDep('buf231', c0, {c0: 131072})]
op233.met_dependencies = [MemoryDep('arg156_1', c1, {c0: 128, c1: 1024})]
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf233.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (128, 1024)
op233.sizes = ([128], [1024])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg156_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op233_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf231', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg156_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf233', get_index_3, getitem_1)
        return store_reduction
op232_op233_op235.snodes[2] =
op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 131072})]
op235.unmet_dependencies = 
    [   MemoryDep('buf218', c0, {c0: 131072}),
        MemoryDep('buf231', c0, {c0: 131072}),
        MemoryDep('buf232', c0, {c0: 128}),
        MemoryDep('buf233', c0, {c0: 128})]
op235.met_dependencies = 
    [   MemoryDep('arg156_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg157_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg158_1', c1, {c0: 128, c1: 1024})]
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf235.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
    ]
]
op235.group.device = cuda:0
op235.group.iteration = (131072, 1)
op235.sizes = ([128, 1024], [])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg156_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg157_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg158_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op235_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf231', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg156_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf232', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf233', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg157_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg158_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf235', get_index_7, add_3, None)
        return store


op236: ExternKernelSchedulerNode(ExternKernelOut)
op236.writes = [StarDep(name='buf236', mode=None)]
op236.unmet_dependencies = [StarDep(name='buf235', mode=None)]
op236.met_dependencies = [StarDep(name='arg159_1', mode=None)]
op236.outputs = [
    buf236: ExternKernelOut
    buf236.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf236.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False)]
]
op236.node.kernel = extern_kernels.mm


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 524288})]
op237.unmet_dependencies = [MemoryDep('buf236', c0, {c0: 524288})]
op237.met_dependencies = [MemoryDep('arg160_1', c1, {c0: 128, c1: 4096})]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (524288, 1)
op237.sizes = ([128, 4096], [])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg160_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op237_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg160_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf237', get_index_2, relu, None)
        return store


op238: ExternKernelSchedulerNode(ExternKernelOut)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf237', mode=None)]
op238.met_dependencies = [StarDep(name='arg161_1', mode=None)]
op238.outputs = [
    buf238: ExternKernelOut
    buf238.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf238.users = [
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
    ]
]
op238.node.kernel = extern_kernels.mm


op239_op240_op242: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op239_op240_op242.writes = 
    [   MemoryDep('buf239', c0, {c0: 128}),
        MemoryDep('buf240', c0, {c0: 128}),
        MemoryDep('buf242', c0, {c0: 131072})]
op239_op240_op242.unmet_dependencies = [MemoryDep('buf235', c0, {c0: 131072}), MemoryDep('buf238', c0, {c0: 131072})]
op239_op240_op242.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg163_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg164_1', c1, {c0: 128, c1: 1024})]
op239_op240_op242.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf239.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf240.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf242.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=True, is_weak=False),
    ]
]
op239_op240_op242.snodes[0] =
op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 128})]
op239.unmet_dependencies = [MemoryDep('buf235', c0, {c0: 131072}), MemoryDep('buf238', c0, {c0: 131072})]
op239.met_dependencies = [MemoryDep('arg162_1', c1, {c0: 128, c1: 1024})]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf239.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (128, 1024)
op239.sizes = ([128], [1024])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg162_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf239_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op239_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf238', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg162_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf239', get_index_3, getitem)
        return store_reduction
op239_op240_op242.snodes[1] =
op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 128})]
op240.unmet_dependencies = [MemoryDep('buf235', c0, {c0: 131072}), MemoryDep('buf238', c0, {c0: 131072})]
op240.met_dependencies = [MemoryDep('arg162_1', c1, {c0: 128, c1: 1024})]
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf240.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (128, 1024)
op240.sizes = ([128], [1024])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg162_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf240_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op240_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf238', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg162_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf240', get_index_3, getitem_1)
        return store_reduction
op239_op240_op242.snodes[2] =
op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 131072})]
op242.unmet_dependencies = 
    [   MemoryDep('buf235', c0, {c0: 131072}),
        MemoryDep('buf238', c0, {c0: 131072}),
        MemoryDep('buf239', c0, {c0: 128}),
        MemoryDep('buf240', c0, {c0: 128})]
op242.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg163_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg164_1', c1, {c0: 128, c1: 1024})]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf242.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=True, is_weak=False),
    ]
]
op242.group.device = cuda:0
op242.group.iteration = (131072, 1)
op242.sizes = ([128, 1024], [])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg162_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf239_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf240_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg163_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg164_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op242_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf238', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg162_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf239', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf240', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg163_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg164_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf242', get_index_7, add_3, None)
        return store


op243: ExternKernelSchedulerNode(ExternKernelOut)
op243.writes = [StarDep(name='buf243', mode=None)]
op243.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op243.met_dependencies = [StarDep(name='arg165_1', mode=None)]
op243.outputs = [
    buf243: ExternKernelOut
    buf243.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf243.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op243.node.kernel = extern_kernels.mm


op244: ExternKernelSchedulerNode(ExternKernelOut)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op244.met_dependencies = [StarDep(name='arg167_1', mode=None)]
op244.outputs = [
    buf244: ExternKernelOut
    buf244.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf244.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op244.node.kernel = extern_kernels.mm


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 131072})]
op245.unmet_dependencies = [   MemoryDep('buf243', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op245.met_dependencies = [MemoryDep('arg166_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf245.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (131072, 1)
op245.sizes = ([2, 16, 64, 64], [])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg166_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op245_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg166_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf245', get_index_2, mul, None)
        return store


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 131072})]
op246.unmet_dependencies = [   MemoryDep('buf244', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op246.met_dependencies = [MemoryDep('arg168_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (131072, 1)
op246.sizes = ([2, 16, 64, 64], [])
buf244_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg168_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op246_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg168_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf246', get_index_2, add, None)
        return store


op247: ExternKernelSchedulerNode(ExternKernelOut)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf245', mode=None), StarDep(name='buf246', mode=None)]
op247.met_dependencies = []
op247.outputs = [
    buf247: ExternKernelOut
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf247.users = [
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=True, is_weak=False),
    ]
]
op247.node.kernel = extern_kernels.bmm


op248_op249_op251: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op248_op249_op251.writes = 
    [   MemoryDep('buf248', c0, {c0: 2048}),
        MemoryDep('buf249', c0, {c0: 2048}),
        MemoryDep('buf251', c0, {c0: 131072})]
op248_op249_op251.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 131072})]
op248_op249_op251.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op248_op249_op251.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
    ]
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf249.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf251.users = [NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op248_op249_op251.snodes[0] =
op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 2048})]
op248.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 131072})]
op248.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
    ]
]
op248.group.device = cuda:0
op248.group.iteration = (2048, 64)
op248.sizes = ([32, 64], [64])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op248_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf248', get_index_5, reduction)
        return store_reduction
op248_op249_op251.snodes[1] =
op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 2048})]
op249.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 131072}), MemoryDep('buf248', c0, {c0: 2048})]
op249.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf249.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (2048, 64)
op249.sizes = ([32, 64], [64])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op249_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf248', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf249', get_index_6, reduction)
        return store_reduction
op248_op249_op251.snodes[2] =
op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 131072})]
op251.unmet_dependencies = 
    [   MemoryDep('buf247', c0, {c0: 131072}),
        MemoryDep('buf248', c0, {c0: 2048}),
        MemoryDep('buf249', c0, {c0: 2048})]
op251.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf251.users = [NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (131072, 1)
op251.sizes = ([32, 64, 64], [])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op251_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf248', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf249', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf251', get_index_7, truediv, None)
        return store


op250: ExternKernelSchedulerNode(ExternKernelOut)
op250.writes = [StarDep(name='buf250', mode=None)]
op250.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op250.met_dependencies = [StarDep(name='arg169_1', mode=None)]
op250.outputs = [
    buf250: ExternKernelOut
    buf250.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf250.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op250.node.kernel = extern_kernels.mm


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 131072})]
op252.unmet_dependencies = [   MemoryDep('buf250', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op252.met_dependencies = [MemoryDep('arg170_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (131072, 1)
op252.sizes = ([2, 16, 64, 64], [])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg170_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op252_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg170_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf252', get_index_2, add, None)
        return store


op253: ExternKernelSchedulerNode(ExternKernelOut)
op253.writes = [StarDep(name='buf253', mode=None)]
op253.unmet_dependencies = [StarDep(name='buf251', mode=None), StarDep(name='buf252', mode=None)]
op253.met_dependencies = []
op253.outputs = [
    buf253: ExternKernelOut
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf253.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op253.node.kernel = extern_kernels.bmm


op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 131072})]
op254.unmet_dependencies = [   MemoryDep('buf253', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op254.met_dependencies = []
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf254.users = [NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (131072, 1)
op254.sizes = ([2, 64, 16, 64], [])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf254_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op254_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf254', get_index_1, load, None)
        return store


op255: ExternKernelSchedulerNode(ExternKernelOut)
op255.writes = [StarDep(name='buf255', mode=None)]
op255.unmet_dependencies = [StarDep(name='buf254', mode=None)]
op255.met_dependencies = [StarDep(name='arg171_1', mode=None)]
op255.outputs = [
    buf255: ExternKernelOut
    buf255.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf255.users = [
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=True, is_weak=False),
    ]
]
op255.node.kernel = extern_kernels.mm


op256_op257_op259: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op256_op257_op259.writes = 
    [   MemoryDep('buf256', c0, {c0: 128}),
        MemoryDep('buf257', c0, {c0: 128}),
        MemoryDep('buf259', c0, {c0: 131072})]
op256_op257_op259.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 131072}), MemoryDep('buf255', c0, {c0: 131072})]
op256_op257_op259.met_dependencies = 
    [   MemoryDep('arg172_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg173_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg174_1', c1, {c0: 128, c1: 1024})]
op256_op257_op259.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf256.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf257.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf259.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False),
    ]
]
op256_op257_op259.snodes[0] =
op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 128})]
op256.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 131072}), MemoryDep('buf255', c0, {c0: 131072})]
op256.met_dependencies = [MemoryDep('arg172_1', c1, {c0: 128, c1: 1024})]
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf256.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (128, 1024)
op256.sizes = ([128], [1024])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg172_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf256_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op256_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf255', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg172_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf256', get_index_3, getitem)
        return store_reduction
op256_op257_op259.snodes[1] =
op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 128})]
op257.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 131072}), MemoryDep('buf255', c0, {c0: 131072})]
op257.met_dependencies = [MemoryDep('arg172_1', c1, {c0: 128, c1: 1024})]
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf257.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (128, 1024)
op257.sizes = ([128], [1024])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg172_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op257_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf255', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg172_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf257', get_index_3, getitem_1)
        return store_reduction
op256_op257_op259.snodes[2] =
op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 131072})]
op259.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 131072}),
        MemoryDep('buf255', c0, {c0: 131072}),
        MemoryDep('buf256', c0, {c0: 128}),
        MemoryDep('buf257', c0, {c0: 128})]
op259.met_dependencies = 
    [   MemoryDep('arg172_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg173_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg174_1', c1, {c0: 128, c1: 1024})]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf259.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False),
    ]
]
op259.group.device = cuda:0
op259.group.iteration = (131072, 1)
op259.sizes = ([128, 1024], [])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg172_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf256_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg173_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg174_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op259_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf255', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg172_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf256', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf257', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg173_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg174_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf259', get_index_7, add_3, None)
        return store


op260: ExternKernelSchedulerNode(ExternKernelOut)
op260.writes = [StarDep(name='buf260', mode=None)]
op260.unmet_dependencies = [StarDep(name='buf259', mode=None)]
op260.met_dependencies = [StarDep(name='arg175_1', mode=None)]
op260.outputs = [
    buf260: ExternKernelOut
    buf260.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf260.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False)]
]
op260.node.kernel = extern_kernels.mm


op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 524288})]
op261.unmet_dependencies = [MemoryDep('buf260', c0, {c0: 524288})]
op261.met_dependencies = [MemoryDep('arg176_1', c1, {c0: 128, c1: 4096})]
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf261.users = [NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op261.group.device = cuda:0
op261.group.iteration = (524288, 1)
op261.sizes = ([128, 4096], [])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg176_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf261_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op261_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg176_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf261', get_index_2, relu, None)
        return store


op262: ExternKernelSchedulerNode(ExternKernelOut)
op262.writes = [StarDep(name='buf262', mode=None)]
op262.unmet_dependencies = [StarDep(name='buf261', mode=None)]
op262.met_dependencies = [StarDep(name='arg177_1', mode=None)]
op262.outputs = [
    buf262: ExternKernelOut
    buf262.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf262.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False),
    ]
]
op262.node.kernel = extern_kernels.mm


op263_op264_op266: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op263_op264_op266.writes = 
    [   MemoryDep('buf263', c0, {c0: 128}),
        MemoryDep('buf264', c0, {c0: 128}),
        MemoryDep('buf266', c0, {c0: 131072})]
op263_op264_op266.unmet_dependencies = [MemoryDep('buf259', c0, {c0: 131072}), MemoryDep('buf262', c0, {c0: 131072})]
op263_op264_op266.met_dependencies = 
    [   MemoryDep('arg178_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg179_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg180_1', c1, {c0: 128, c1: 1024})]
op263_op264_op266.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf263.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf264.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf266.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=True, is_weak=False),
    ]
]
op263_op264_op266.snodes[0] =
op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 128})]
op263.unmet_dependencies = [MemoryDep('buf259', c0, {c0: 131072}), MemoryDep('buf262', c0, {c0: 131072})]
op263.met_dependencies = [MemoryDep('arg178_1', c1, {c0: 128, c1: 1024})]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf263.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (128, 1024)
op263.sizes = ([128], [1024])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg178_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf263_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op263_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg178_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf263', get_index_3, getitem)
        return store_reduction
op263_op264_op266.snodes[1] =
op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 128})]
op264.unmet_dependencies = [MemoryDep('buf259', c0, {c0: 131072}), MemoryDep('buf262', c0, {c0: 131072})]
op264.met_dependencies = [MemoryDep('arg178_1', c1, {c0: 128, c1: 1024})]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf264.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (128, 1024)
op264.sizes = ([128], [1024])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg178_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op264_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg178_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf264', get_index_3, getitem_1)
        return store_reduction
op263_op264_op266.snodes[2] =
op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 131072})]
op266.unmet_dependencies = 
    [   MemoryDep('buf259', c0, {c0: 131072}),
        MemoryDep('buf262', c0, {c0: 131072}),
        MemoryDep('buf263', c0, {c0: 128}),
        MemoryDep('buf264', c0, {c0: 128})]
op266.met_dependencies = 
    [   MemoryDep('arg178_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg179_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg180_1', c1, {c0: 128, c1: 1024})]
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf266.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=True, is_weak=False),
    ]
]
op266.group.device = cuda:0
op266.group.iteration = (131072, 1)
op266.sizes = ([128, 1024], [])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg178_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf263_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg179_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg180_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op266_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg178_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf263', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf264', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg179_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg180_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf266', get_index_7, add_3, None)
        return store


op267: ExternKernelSchedulerNode(ExternKernelOut)
op267.writes = [StarDep(name='buf267', mode=None)]
op267.unmet_dependencies = [StarDep(name='buf266', mode=None)]
op267.met_dependencies = [StarDep(name='arg181_1', mode=None)]
op267.outputs = [
    buf267: ExternKernelOut
    buf267.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf267.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op267.node.kernel = extern_kernels.mm


op268: ExternKernelSchedulerNode(ExternKernelOut)
op268.writes = [StarDep(name='buf268', mode=None)]
op268.unmet_dependencies = [StarDep(name='buf266', mode=None)]
op268.met_dependencies = [StarDep(name='arg183_1', mode=None)]
op268.outputs = [
    buf268: ExternKernelOut
    buf268.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf268.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op268.node.kernel = extern_kernels.mm


op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 131072})]
op269.unmet_dependencies = [   MemoryDep('buf267', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op269.met_dependencies = [MemoryDep('arg182_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf269.users = [NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (131072, 1)
op269.sizes = ([2, 16, 64, 64], [])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg182_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op269_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg182_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf269', get_index_2, mul, None)
        return store


op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 131072})]
op270.unmet_dependencies = [   MemoryDep('buf268', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op270.met_dependencies = [MemoryDep('arg184_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf270.users = [NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op270.group.device = cuda:0
op270.group.iteration = (131072, 1)
op270.sizes = ([2, 16, 64, 64], [])
buf268_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg184_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf270_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op270_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg184_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf270', get_index_2, add, None)
        return store


op271: ExternKernelSchedulerNode(ExternKernelOut)
op271.writes = [StarDep(name='buf271', mode=None)]
op271.unmet_dependencies = [StarDep(name='buf269', mode=None), StarDep(name='buf270', mode=None)]
op271.met_dependencies = []
op271.outputs = [
    buf271: ExternKernelOut
    buf271.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf271.users = [
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=True, is_weak=False),
    ]
]
op271.node.kernel = extern_kernels.bmm


op272_op273_op275: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op272_op273_op275.writes = 
    [   MemoryDep('buf272', c0, {c0: 2048}),
        MemoryDep('buf273', c0, {c0: 2048}),
        MemoryDep('buf275', c0, {c0: 131072})]
op272_op273_op275.unmet_dependencies = [MemoryDep('buf271', c0, {c0: 131072})]
op272_op273_op275.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op272_op273_op275.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf272.users = [
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
    ]
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf273.users = [NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf275.users = [NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op272_op273_op275.snodes[0] =
op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', c0, {c0: 2048})]
op272.unmet_dependencies = [MemoryDep('buf271', c0, {c0: 131072})]
op272.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf272.users = [
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
    ]
]
op272.group.device = cuda:0
op272.group.iteration = (2048, 64)
op272.sizes = ([32, 64], [64])
buf271_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op272_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf272', get_index_5, reduction)
        return store_reduction
op272_op273_op275.snodes[1] =
op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 2048})]
op273.unmet_dependencies = [MemoryDep('buf271', c0, {c0: 131072}), MemoryDep('buf272', c0, {c0: 2048})]
op273.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf273.users = [NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (2048, 64)
op273.sizes = ([32, 64], [64])
buf271_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op273_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf272', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf273', get_index_6, reduction)
        return store_reduction
op272_op273_op275.snodes[2] =
op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 131072})]
op275.unmet_dependencies = 
    [   MemoryDep('buf271', c0, {c0: 131072}),
        MemoryDep('buf272', c0, {c0: 2048}),
        MemoryDep('buf273', c0, {c0: 2048})]
op275.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf275.users = [NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (131072, 1)
op275.sizes = ([32, 64, 64], [])
buf271_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op275_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf272', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf273', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf275', get_index_7, truediv, None)
        return store


op274: ExternKernelSchedulerNode(ExternKernelOut)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf266', mode=None)]
op274.met_dependencies = [StarDep(name='arg185_1', mode=None)]
op274.outputs = [
    buf274: ExternKernelOut
    buf274.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf274.users = [NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op274.node.kernel = extern_kernels.mm


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 131072})]
op276.unmet_dependencies = [   MemoryDep('buf274', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op276.met_dependencies = [MemoryDep('arg186_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf276.users = [NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (131072, 1)
op276.sizes = ([2, 16, 64, 64], [])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg186_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op276_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf276', get_index_2, add, None)
        return store


op277: ExternKernelSchedulerNode(ExternKernelOut)
op277.writes = [StarDep(name='buf277', mode=None)]
op277.unmet_dependencies = [StarDep(name='buf275', mode=None), StarDep(name='buf276', mode=None)]
op277.met_dependencies = []
op277.outputs = [
    buf277: ExternKernelOut
    buf277.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf277.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op277.node.kernel = extern_kernels.bmm


op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 131072})]
op278.unmet_dependencies = [   MemoryDep('buf277', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op278.met_dependencies = []
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf278.users = [NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op278.group.device = cuda:0
op278.group.iteration = (131072, 1)
op278.sizes = ([2, 64, 16, 64], [])
buf277_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf278_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op278_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf278', get_index_1, load, None)
        return store


op279: ExternKernelSchedulerNode(ExternKernelOut)
op279.writes = [StarDep(name='buf279', mode=None)]
op279.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op279.met_dependencies = [StarDep(name='arg187_1', mode=None)]
op279.outputs = [
    buf279: ExternKernelOut
    buf279.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf279.users = [
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=True, is_weak=False),
    ]
]
op279.node.kernel = extern_kernels.mm


op280_op281_op283: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op280_op281_op283.writes = 
    [   MemoryDep('buf280', c0, {c0: 128}),
        MemoryDep('buf281', c0, {c0: 128}),
        MemoryDep('buf283', c0, {c0: 131072})]
op280_op281_op283.unmet_dependencies = [MemoryDep('buf266', c0, {c0: 131072}), MemoryDep('buf279', c0, {c0: 131072})]
op280_op281_op283.met_dependencies = 
    [   MemoryDep('arg188_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg189_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg190_1', c1, {c0: 128, c1: 1024})]
op280_op281_op283.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf280.users = [NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf281.users = [NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf283.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=True, is_weak=False),
    ]
]
op280_op281_op283.snodes[0] =
op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 128})]
op280.unmet_dependencies = [MemoryDep('buf266', c0, {c0: 131072}), MemoryDep('buf279', c0, {c0: 131072})]
op280.met_dependencies = [MemoryDep('arg188_1', c1, {c0: 128, c1: 1024})]
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf280.users = [NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op280.group.device = cuda:0
op280.group.iteration = (128, 1024)
op280.sizes = ([128], [1024])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf279_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg188_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf280_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op280_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf279', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf280', get_index_3, getitem)
        return store_reduction
op280_op281_op283.snodes[1] =
op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 128})]
op281.unmet_dependencies = [MemoryDep('buf266', c0, {c0: 131072}), MemoryDep('buf279', c0, {c0: 131072})]
op281.met_dependencies = [MemoryDep('arg188_1', c1, {c0: 128, c1: 1024})]
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf281.users = [NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op281.group.device = cuda:0
op281.group.iteration = (128, 1024)
op281.sizes = ([128], [1024])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf279_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg188_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf281_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op281_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf279', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf281', get_index_3, getitem_1)
        return store_reduction
op280_op281_op283.snodes[2] =
op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 131072})]
op283.unmet_dependencies = 
    [   MemoryDep('buf266', c0, {c0: 131072}),
        MemoryDep('buf279', c0, {c0: 131072}),
        MemoryDep('buf280', c0, {c0: 128}),
        MemoryDep('buf281', c0, {c0: 128})]
op283.met_dependencies = 
    [   MemoryDep('arg188_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg189_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg190_1', c1, {c0: 128, c1: 1024})]
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf283.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=True, is_weak=False),
    ]
]
op283.group.device = cuda:0
op283.group.iteration = (131072, 1)
op283.sizes = ([128, 1024], [])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf279_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg188_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf280_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf281_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg189_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg190_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op283_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf279', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf280', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf281', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg189_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg190_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf283', get_index_7, add_3, None)
        return store


op284: ExternKernelSchedulerNode(ExternKernelOut)
op284.writes = [StarDep(name='buf284', mode=None)]
op284.unmet_dependencies = [StarDep(name='buf283', mode=None)]
op284.met_dependencies = [StarDep(name='arg191_1', mode=None)]
op284.outputs = [
    buf284: ExternKernelOut
    buf284.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf284.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False)]
]
op284.node.kernel = extern_kernels.mm


op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 524288})]
op285.unmet_dependencies = [MemoryDep('buf284', c0, {c0: 524288})]
op285.met_dependencies = [MemoryDep('arg192_1', c1, {c0: 128, c1: 4096})]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf285.users = [NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (524288, 1)
op285.sizes = ([128, 4096], [])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg192_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf285_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op285_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg192_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf285', get_index_2, relu, None)
        return store


op286: ExternKernelSchedulerNode(ExternKernelOut)
op286.writes = [StarDep(name='buf286', mode=None)]
op286.unmet_dependencies = [StarDep(name='buf285', mode=None)]
op286.met_dependencies = [StarDep(name='arg193_1', mode=None)]
op286.outputs = [
    buf286: ExternKernelOut
    buf286.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf286.users = [
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=True, is_weak=False),
    ]
]
op286.node.kernel = extern_kernels.mm


op287_op288_op290: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op287_op288_op290.writes = 
    [   MemoryDep('buf287', c0, {c0: 128}),
        MemoryDep('buf288', c0, {c0: 128}),
        MemoryDep('buf290', c0, {c0: 131072})]
op287_op288_op290.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 131072}), MemoryDep('buf286', c0, {c0: 131072})]
op287_op288_op290.met_dependencies = 
    [   MemoryDep('arg194_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg195_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg196_1', c1, {c0: 128, c1: 1024})]
op287_op288_op290.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf287.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf288.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf290.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op287_op288_op290.snodes[0] =
op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 128})]
op287.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 131072}), MemoryDep('buf286', c0, {c0: 131072})]
op287.met_dependencies = [MemoryDep('arg194_1', c1, {c0: 128, c1: 1024})]
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf287.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (128, 1024)
op287.sizes = ([128], [1024])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg194_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf287_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op287_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf286', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg194_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf287', get_index_3, getitem)
        return store_reduction
op287_op288_op290.snodes[1] =
op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 128})]
op288.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 131072}), MemoryDep('buf286', c0, {c0: 131072})]
op288.met_dependencies = [MemoryDep('arg194_1', c1, {c0: 128, c1: 1024})]
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf288.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (128, 1024)
op288.sizes = ([128], [1024])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg194_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf288_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op288_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf286', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg194_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf288', get_index_3, getitem_1)
        return store_reduction
op287_op288_op290.snodes[2] =
op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 131072})]
op290.unmet_dependencies = 
    [   MemoryDep('buf283', c0, {c0: 131072}),
        MemoryDep('buf286', c0, {c0: 131072}),
        MemoryDep('buf287', c0, {c0: 128}),
        MemoryDep('buf288', c0, {c0: 128})]
op290.met_dependencies = 
    [   MemoryDep('arg194_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg195_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg196_1', c1, {c0: 128, c1: 1024})]
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf290.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (131072, 1)
op290.sizes = ([128, 1024], [])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg194_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf287_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf288_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg195_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg196_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op290_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf286', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg194_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf287', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf288', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg195_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg196_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf290', get_index_7, add_3, None)
        return store




# ===== run_2025_10_19_03_43_12_574129-pid_19/torchinductor/model__2_inference_2.2/ir_pre_fusion.txt =====
op0: ExternKernelSchedulerNode(DeviceCopy)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = [StarDep(name='arg2_1', mode=None)]
op0.outputs = [
    buf0: DeviceCopy
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[1026, 1024], stride=[1024, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op0.node.kernel = None


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 128})]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 128})]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
    buf1.users = [NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (2, 64)
op1.sizes = ([2], [64])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
class op1_loop_body:
    var_ranges = {p0: 2, p1: 64}
    index0 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        constant = ops.constant(1, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int32, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.int64, src_dtype = torch.int32)
        scan1 = self.scan1((torch.int64,), (to_dtype_1,))
        getitem = scan1[0]
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1', get_index_1, getitem, None)
        return store


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 131072})]
op2.unmet_dependencies = 
    [   MemoryDep('buf0', c1 + 1024*tmp1, {c0: 128, c1: 1024}),
        MemoryDep('buf1', c0, {c0: 128})]
op2.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 128}),
        MemoryDep('arg1_1', c1 + 1024*tmp0, {c0: 128, c1: 1024})]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf2.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False),
    ]
]
op2.group.device = cuda:0
op2.group.iteration = (131072, 1)
op2.sizes = ([128, 1024], [])
arg0_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
arg1_1_layout = FixedLayout('cuda:0', torch.float32, size=[50265, 1024], stride=[1024, 1])
buf1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[1026, 1024], stride=[1024, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op2_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = p0
    index1 = 1024*indirect0 + p1
    index2 = 1024*indirect1 + p1
    index3 = 1024*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        constant = ops.constant(32.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.int32, src_dtype = torch.int64)
        constant_1 = ops.constant(0, torch.int32)
        add = ops.add(to_dtype, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg0_1', get_index_3)
        constant_2 = ops.constant(1, torch.int64)
        ne = ops.ne(load_3, constant_2)
        to_dtype_1 = ops.to_dtype(ne, torch.int32, src_dtype = torch.bool)
        mul_1 = ops.mul(add, to_dtype_1)
        to_dtype_2 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.int32)
        constant_3 = ops.constant(1, torch.int64)
        add_1 = ops.add(to_dtype_2, constant_3)
        set_indirect1 = self.set_indirect1(add_1)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf0', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf2', get_index_5, add_2, None)
        return store


op3: ExternKernelSchedulerNode(ExternKernelOut)
op3.writes = [StarDep(name='buf3', mode=None)]
op3.unmet_dependencies = [StarDep(name='buf2', mode=None)]
op3.met_dependencies = [StarDep(name='arg5_1', mode=None)]
op3.outputs = [
    buf3: ExternKernelOut
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf3.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op3.node.kernel = extern_kernels.mm


op4: ExternKernelSchedulerNode(ExternKernelOut)
op4.writes = [StarDep(name='buf4', mode=None)]
op4.unmet_dependencies = [StarDep(name='buf2', mode=None)]
op4.met_dependencies = [StarDep(name='arg7_1', mode=None)]
op4.outputs = [
    buf4: ExternKernelOut
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf4.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op4.node.kernel = extern_kernels.mm


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 131072})]
op5.unmet_dependencies = [   MemoryDep('buf3', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op5.met_dependencies = [MemoryDep('arg6_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (131072, 1)
op5.sizes = ([2, 16, 64, 64], [])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg6_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op5_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf5', get_index_2, mul, None)
        return store


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 131072})]
op6.unmet_dependencies = [   MemoryDep('buf4', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op6.met_dependencies = [MemoryDep('arg8_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (131072, 1)
op6.sizes = ([2, 16, 64, 64], [])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg8_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op6_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg8_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf6', get_index_2, add, None)
        return store


op7: ExternKernelSchedulerNode(ExternKernelOut)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf5', mode=None), StarDep(name='buf6', mode=None)]
op7.met_dependencies = []
op7.outputs = [
    buf7: ExternKernelOut
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False),
    ]
]
op7.node.kernel = extern_kernels.bmm


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 2048})]
op8.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 131072})]
op8.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op8.group.device = cuda:0
op8.group.iteration = (2048, 64)
op8.sizes = ([32, 64], [64])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op8_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf8', get_index_5, reduction)
        return store_reduction


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 2048})]
op9.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 131072}), MemoryDep('buf8', c0, {c0: 2048})]
op9.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf9.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (2048, 64)
op9.sizes = ([32, 64], [64])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf9_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op9_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf8', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf9', get_index_6, reduction)
        return store_reduction


op10: ExternKernelSchedulerNode(ExternKernelOut)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf2', mode=None)]
op10.met_dependencies = [StarDep(name='arg9_1', mode=None)]
op10.outputs = [
    buf10: ExternKernelOut
    buf10.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf10.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op10.node.kernel = extern_kernels.mm


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 131072})]
op11.unmet_dependencies = 
    [   MemoryDep('buf7', c0, {c0: 131072}),
        MemoryDep('buf8', c0, {c0: 2048}),
        MemoryDep('buf9', c0, {c0: 2048})]
op11.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (131072, 1)
op11.sizes = ([32, 64, 64], [])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf8_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf9_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op11_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf8', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf9', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf11', get_index_7, truediv, None)
        return store


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 131072})]
op12.unmet_dependencies = [   MemoryDep('buf10', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op12.met_dependencies = [MemoryDep('arg10_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (131072, 1)
op12.sizes = ([2, 16, 64, 64], [])
buf10_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg10_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op12_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg10_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf12', get_index_2, add, None)
        return store


op13: ExternKernelSchedulerNode(ExternKernelOut)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf11', mode=None), StarDep(name='buf12', mode=None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: ExternKernelOut
    buf13.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.node.kernel = extern_kernels.bmm


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 131072})]
op14.unmet_dependencies = [   MemoryDep('buf13', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op14.met_dependencies = []
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (131072, 1)
op14.sizes = ([2, 64, 16, 64], [])
buf13_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf14_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op14_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf14', get_index_1, load, None)
        return store


op15: ExternKernelSchedulerNode(ExternKernelOut)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf14', mode=None)]
op15.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op15.outputs = [
    buf15: ExternKernelOut
    buf15.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False),
    ]
]
op15.node.kernel = extern_kernels.mm


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 128})]
op16.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 131072}), MemoryDep('buf2', c0, {c0: 131072})]
op16.met_dependencies = [MemoryDep('arg12_1', c1, {c0: 128, c1: 1024})]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf16.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (128, 1024)
op16.sizes = ([128], [1024])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg12_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op16_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf15', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg12_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf16', get_index_3, getitem)
        return store_reduction


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 128})]
op17.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 131072}), MemoryDep('buf2', c0, {c0: 131072})]
op17.met_dependencies = [MemoryDep('arg12_1', c1, {c0: 128, c1: 1024})]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf17.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (128, 1024)
op17.sizes = ([128], [1024])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg12_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op17_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf15', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg12_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf17', get_index_3, getitem_1)
        return store_reduction


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 131072})]
op19.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 131072}),
        MemoryDep('buf16', c0, {c0: 128}),
        MemoryDep('buf17', c0, {c0: 128}),
        MemoryDep('buf2', c0, {c0: 131072})]
op19.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg13_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg14_1', c1, {c0: 128, c1: 1024})]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf19.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False),
    ]
]
op19.group.device = cuda:0
op19.group.iteration = (131072, 1)
op19.sizes = ([128, 1024], [])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf15_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg12_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf16_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg13_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg14_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op19_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf15', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg12_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf16', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf17', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg13_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg14_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf19', get_index_7, add_3, None)
        return store


op20: ExternKernelSchedulerNode(ExternKernelOut)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf19', mode=None)]
op20.met_dependencies = [StarDep(name='arg15_1', mode=None)]
op20.outputs = [
    buf20: ExternKernelOut
    buf20.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
]
op20.node.kernel = extern_kernels.mm


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 524288})]
op21.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 524288})]
op21.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 128, c1: 4096})]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (524288, 1)
op21.sizes = ([128, 4096], [])
buf20_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg16_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op21_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg16_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf21', get_index_2, relu, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg17_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf22.users = [
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False),
    ]
]
op22.node.kernel = extern_kernels.mm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 128})]
op23.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 131072}), MemoryDep('buf22', c0, {c0: 131072})]
op23.met_dependencies = [MemoryDep('arg18_1', c1, {c0: 128, c1: 1024})]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf23.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (128, 1024)
op23.sizes = ([128], [1024])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg18_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op23_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf22', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf23', get_index_3, getitem)
        return store_reduction


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 128})]
op24.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 131072}), MemoryDep('buf22', c0, {c0: 131072})]
op24.met_dependencies = [MemoryDep('arg18_1', c1, {c0: 128, c1: 1024})]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf24.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (128, 1024)
op24.sizes = ([128], [1024])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg18_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op24_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf22', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf24', get_index_3, getitem_1)
        return store_reduction


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 131072})]
op26.unmet_dependencies = 
    [   MemoryDep('buf19', c0, {c0: 131072}),
        MemoryDep('buf22', c0, {c0: 131072}),
        MemoryDep('buf23', c0, {c0: 128}),
        MemoryDep('buf24', c0, {c0: 128})]
op26.met_dependencies = 
    [   MemoryDep('arg18_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg19_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg20_1', c1, {c0: 128, c1: 1024})]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf26.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
    ]
]
op26.group.device = cuda:0
op26.group.iteration = (131072, 1)
op26.sizes = ([128, 1024], [])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg18_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg19_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg20_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op26_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf22', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf23', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf24', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg19_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg20_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf26', get_index_7, add_3, None)
        return store


op27: ExternKernelSchedulerNode(ExternKernelOut)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op27.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op27.outputs = [
    buf27: ExternKernelOut
    buf27.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf27.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op27.node.kernel = extern_kernels.mm


op28: ExternKernelSchedulerNode(ExternKernelOut)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op28.met_dependencies = [StarDep(name='arg23_1', mode=None)]
op28.outputs = [
    buf28: ExternKernelOut
    buf28.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf28.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op28.node.kernel = extern_kernels.mm


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 131072})]
op29.unmet_dependencies = [   MemoryDep('buf27', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op29.met_dependencies = [MemoryDep('arg22_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (131072, 1)
op29.sizes = ([2, 16, 64, 64], [])
buf27_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg22_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf29_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op29_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf29', get_index_2, mul, None)
        return store


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 131072})]
op30.unmet_dependencies = [   MemoryDep('buf28', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op30.met_dependencies = [MemoryDep('arg24_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (131072, 1)
op30.sizes = ([2, 16, 64, 64], [])
buf28_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg24_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf30_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op30_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf30', get_index_2, add, None)
        return store


op31: ExternKernelSchedulerNode(ExternKernelOut)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf29', mode=None), StarDep(name='buf30', mode=None)]
op31.met_dependencies = []
op31.outputs = [
    buf31: ExternKernelOut
    buf31.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf31.users = [
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
    ]
]
op31.node.kernel = extern_kernels.bmm


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 2048})]
op32.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 131072})]
op32.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf32.users = [
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
    ]
]
op32.group.device = cuda:0
op32.group.iteration = (2048, 64)
op32.sizes = ([32, 64], [64])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op32_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf32', get_index_5, reduction)
        return store_reduction


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 2048})]
op33.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 131072}), MemoryDep('buf32', c0, {c0: 2048})]
op33.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf33.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (2048, 64)
op33.sizes = ([32, 64], [64])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op33_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf32', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf33', get_index_6, reduction)
        return store_reduction


op34: ExternKernelSchedulerNode(ExternKernelOut)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op34.met_dependencies = [StarDep(name='arg25_1', mode=None)]
op34.outputs = [
    buf34: ExternKernelOut
    buf34.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf34.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op34.node.kernel = extern_kernels.mm


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 131072})]
op35.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 131072}),
        MemoryDep('buf32', c0, {c0: 2048}),
        MemoryDep('buf33', c0, {c0: 2048})]
op35.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf35.users = [NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (131072, 1)
op35.sizes = ([32, 64, 64], [])
buf31_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op35_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf32', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf33', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf35', get_index_7, truediv, None)
        return store


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 131072})]
op36.unmet_dependencies = [   MemoryDep('buf34', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op36.met_dependencies = [MemoryDep('arg26_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (131072, 1)
op36.sizes = ([2, 16, 64, 64], [])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg26_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf36_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op36_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf36', get_index_2, add, None)
        return store


op37: ExternKernelSchedulerNode(ExternKernelOut)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf35', mode=None), StarDep(name='buf36', mode=None)]
op37.met_dependencies = []
op37.outputs = [
    buf37: ExternKernelOut
    buf37.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf37.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.node.kernel = extern_kernels.bmm


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 131072})]
op38.unmet_dependencies = [   MemoryDep('buf37', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op38.met_dependencies = []
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (131072, 1)
op38.sizes = ([2, 64, 16, 64], [])
buf37_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op38_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf38', get_index_1, load, None)
        return store


op39: ExternKernelSchedulerNode(ExternKernelOut)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf38', mode=None)]
op39.met_dependencies = [StarDep(name='arg27_1', mode=None)]
op39.outputs = [
    buf39: ExternKernelOut
    buf39.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
    ]
]
op39.node.kernel = extern_kernels.mm


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 128})]
op40.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 131072}), MemoryDep('buf39', c0, {c0: 131072})]
op40.met_dependencies = [MemoryDep('arg28_1', c1, {c0: 128, c1: 1024})]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf40.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (128, 1024)
op40.sizes = ([128], [1024])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg28_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op40_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf39', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf40', get_index_3, getitem)
        return store_reduction


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 128})]
op41.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 131072}), MemoryDep('buf39', c0, {c0: 131072})]
op41.met_dependencies = [MemoryDep('arg28_1', c1, {c0: 128, c1: 1024})]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf41.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (128, 1024)
op41.sizes = ([128], [1024])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg28_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op41_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf39', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf41', get_index_3, getitem_1)
        return store_reduction


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 131072})]
op43.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 131072}),
        MemoryDep('buf39', c0, {c0: 131072}),
        MemoryDep('buf40', c0, {c0: 128}),
        MemoryDep('buf41', c0, {c0: 128})]
op43.met_dependencies = 
    [   MemoryDep('arg28_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg29_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg30_1', c1, {c0: 128, c1: 1024})]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf43.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False),
    ]
]
op43.group.device = cuda:0
op43.group.iteration = (131072, 1)
op43.sizes = ([128, 1024], [])
buf26_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg28_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg29_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg30_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op43_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf39', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf40', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf41', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg29_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg30_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf43', get_index_7, add_3, None)
        return store


op44: ExternKernelSchedulerNode(ExternKernelOut)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf43', mode=None)]
op44.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op44.outputs = [
    buf44: ExternKernelOut
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False)]
]
op44.node.kernel = extern_kernels.mm


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 524288})]
op45.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 524288})]
op45.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 128, c1: 4096})]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (524288, 1)
op45.sizes = ([128, 4096], [])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg32_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op45_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf45', get_index_2, relu, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelOut)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op46.met_dependencies = [StarDep(name='arg33_1', mode=None)]
op46.outputs = [
    buf46: ExternKernelOut
    buf46.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf46.users = [
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False),
    ]
]
op46.node.kernel = extern_kernels.mm


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 128})]
op47.unmet_dependencies = [MemoryDep('buf43', c0, {c0: 131072}), MemoryDep('buf46', c0, {c0: 131072})]
op47.met_dependencies = [MemoryDep('arg34_1', c1, {c0: 128, c1: 1024})]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf47.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (128, 1024)
op47.sizes = ([128], [1024])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg34_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op47_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf46', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg34_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf47', get_index_3, getitem)
        return store_reduction


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 128})]
op48.unmet_dependencies = [MemoryDep('buf43', c0, {c0: 131072}), MemoryDep('buf46', c0, {c0: 131072})]
op48.met_dependencies = [MemoryDep('arg34_1', c1, {c0: 128, c1: 1024})]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf48.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (128, 1024)
op48.sizes = ([128], [1024])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg34_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op48_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf46', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg34_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf48', get_index_3, getitem_1)
        return store_reduction


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 131072})]
op50.unmet_dependencies = 
    [   MemoryDep('buf43', c0, {c0: 131072}),
        MemoryDep('buf46', c0, {c0: 131072}),
        MemoryDep('buf47', c0, {c0: 128}),
        MemoryDep('buf48', c0, {c0: 128})]
op50.met_dependencies = 
    [   MemoryDep('arg34_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg35_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg36_1', c1, {c0: 128, c1: 1024})]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf50.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
]
op50.group.device = cuda:0
op50.group.iteration = (131072, 1)
op50.sizes = ([128, 1024], [])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg34_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf48_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg35_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg36_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op50_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf46', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg34_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf47', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf48', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg35_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg36_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf50', get_index_7, add_3, None)
        return store


op51: ExternKernelSchedulerNode(ExternKernelOut)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = [StarDep(name='buf50', mode=None)]
op51.met_dependencies = [StarDep(name='arg37_1', mode=None)]
op51.outputs = [
    buf51: ExternKernelOut
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf51.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op51.node.kernel = extern_kernels.mm


op52: ExternKernelSchedulerNode(ExternKernelOut)
op52.writes = [StarDep(name='buf52', mode=None)]
op52.unmet_dependencies = [StarDep(name='buf50', mode=None)]
op52.met_dependencies = [StarDep(name='arg39_1', mode=None)]
op52.outputs = [
    buf52: ExternKernelOut
    buf52.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf52.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op52.node.kernel = extern_kernels.mm


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 131072})]
op53.unmet_dependencies = [   MemoryDep('buf51', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op53.met_dependencies = [MemoryDep('arg38_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (131072, 1)
op53.sizes = ([2, 16, 64, 64], [])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg38_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op53_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg38_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf53', get_index_2, mul, None)
        return store


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 131072})]
op54.unmet_dependencies = [   MemoryDep('buf52', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op54.met_dependencies = [MemoryDep('arg40_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (131072, 1)
op54.sizes = ([2, 16, 64, 64], [])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg40_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf54_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op54_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg40_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf54', get_index_2, add, None)
        return store


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf53', mode=None), StarDep(name='buf54', mode=None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf55.users = [
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=True, is_weak=False),
    ]
]
op55.node.kernel = extern_kernels.bmm


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 2048})]
op56.unmet_dependencies = [MemoryDep('buf55', c0, {c0: 131072})]
op56.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf56.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
    ]
]
op56.group.device = cuda:0
op56.group.iteration = (2048, 64)
op56.sizes = ([32, 64], [64])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf56_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op56_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf56', get_index_5, reduction)
        return store_reduction


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 2048})]
op57.unmet_dependencies = [MemoryDep('buf55', c0, {c0: 131072}), MemoryDep('buf56', c0, {c0: 2048})]
op57.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf57.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (2048, 64)
op57.sizes = ([32, 64], [64])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf56_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op57_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf56', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf57', get_index_6, reduction)
        return store_reduction


op58: ExternKernelSchedulerNode(ExternKernelOut)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = [StarDep(name='buf50', mode=None)]
op58.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op58.outputs = [
    buf58: ExternKernelOut
    buf58.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf58.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op58.node.kernel = extern_kernels.mm


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 131072})]
op59.unmet_dependencies = 
    [   MemoryDep('buf55', c0, {c0: 131072}),
        MemoryDep('buf56', c0, {c0: 2048}),
        MemoryDep('buf57', c0, {c0: 2048})]
op59.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (131072, 1)
op59.sizes = ([32, 64, 64], [])
buf55_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf56_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf57_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf59_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op59_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf56', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf57', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf59', get_index_7, truediv, None)
        return store


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 131072})]
op60.unmet_dependencies = [   MemoryDep('buf58', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op60.met_dependencies = [MemoryDep('arg42_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (131072, 1)
op60.sizes = ([2, 16, 64, 64], [])
buf58_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg42_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf60_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op60_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf60', get_index_2, add, None)
        return store


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf59', mode=None), StarDep(name='buf60', mode=None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.node.kernel = extern_kernels.bmm


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 131072})]
op62.unmet_dependencies = [   MemoryDep('buf61', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op62.met_dependencies = []
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (131072, 1)
op62.sizes = ([2, 64, 16, 64], [])
buf61_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op62_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf62', get_index_1, load, None)
        return store


op63: ExternKernelSchedulerNode(ExternKernelOut)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf62', mode=None)]
op63.met_dependencies = [StarDep(name='arg43_1', mode=None)]
op63.outputs = [
    buf63: ExternKernelOut
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf63.users = [
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
]
op63.node.kernel = extern_kernels.mm


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 128})]
op64.unmet_dependencies = [MemoryDep('buf50', c0, {c0: 131072}), MemoryDep('buf63', c0, {c0: 131072})]
op64.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 128, c1: 1024})]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf64.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (128, 1024)
op64.sizes = ([128], [1024])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg44_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op64_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf63', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf64', get_index_3, getitem)
        return store_reduction


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 128})]
op65.unmet_dependencies = [MemoryDep('buf50', c0, {c0: 131072}), MemoryDep('buf63', c0, {c0: 131072})]
op65.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 128, c1: 1024})]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf65.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (128, 1024)
op65.sizes = ([128], [1024])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg44_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op65_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf63', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf65', get_index_3, getitem_1)
        return store_reduction


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 131072})]
op67.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 131072}),
        MemoryDep('buf63', c0, {c0: 131072}),
        MemoryDep('buf64', c0, {c0: 128}),
        MemoryDep('buf65', c0, {c0: 128})]
op67.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg45_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg46_1', c1, {c0: 128, c1: 1024})]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf67.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=True, is_weak=False),
    ]
]
op67.group.device = cuda:0
op67.group.iteration = (131072, 1)
op67.sizes = ([128, 1024], [])
buf50_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg44_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg45_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg46_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op67_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf63', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf64', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf65', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg45_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg46_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf67', get_index_7, add_3, None)
        return store


op68: ExternKernelSchedulerNode(ExternKernelOut)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf67', mode=None)]
op68.met_dependencies = [StarDep(name='arg47_1', mode=None)]
op68.outputs = [
    buf68: ExternKernelOut
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf68.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False)]
]
op68.node.kernel = extern_kernels.mm


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 524288})]
op69.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 524288})]
op69.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 128, c1: 4096})]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (524288, 1)
op69.sizes = ([128, 4096], [])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg48_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op69_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf69', get_index_2, relu, None)
        return store


op70: ExternKernelSchedulerNode(ExternKernelOut)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf69', mode=None)]
op70.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op70.outputs = [
    buf70: ExternKernelOut
    buf70.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf70.users = [
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=True, is_weak=False),
    ]
]
op70.node.kernel = extern_kernels.mm


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 128})]
op71.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 131072}), MemoryDep('buf70', c0, {c0: 131072})]
op71.met_dependencies = [MemoryDep('arg50_1', c1, {c0: 128, c1: 1024})]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf71.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (128, 1024)
op71.sizes = ([128], [1024])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg50_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op71_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf70', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf71', get_index_3, getitem)
        return store_reduction


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 128})]
op72.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 131072}), MemoryDep('buf70', c0, {c0: 131072})]
op72.met_dependencies = [MemoryDep('arg50_1', c1, {c0: 128, c1: 1024})]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf72.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (128, 1024)
op72.sizes = ([128], [1024])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg50_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op72_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf70', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf72', get_index_3, getitem_1)
        return store_reduction


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 131072})]
op74.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 131072}),
        MemoryDep('buf70', c0, {c0: 131072}),
        MemoryDep('buf71', c0, {c0: 128}),
        MemoryDep('buf72', c0, {c0: 128})]
op74.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg51_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg52_1', c1, {c0: 128, c1: 1024})]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf74.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False),
    ]
]
op74.group.device = cuda:0
op74.group.iteration = (131072, 1)
op74.sizes = ([128, 1024], [])
buf67_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg50_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf71_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf72_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg51_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg52_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op74_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf70', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf71', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf72', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg51_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg52_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf74', get_index_7, add_3, None)
        return store


op75: ExternKernelSchedulerNode(ExternKernelOut)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op75.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op75.outputs = [
    buf75: ExternKernelOut
    buf75.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf75.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op75.node.kernel = extern_kernels.mm


op76: ExternKernelSchedulerNode(ExternKernelOut)
op76.writes = [StarDep(name='buf76', mode=None)]
op76.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op76.met_dependencies = [StarDep(name='arg55_1', mode=None)]
op76.outputs = [
    buf76: ExternKernelOut
    buf76.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf76.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op76.node.kernel = extern_kernels.mm


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 131072})]
op77.unmet_dependencies = [   MemoryDep('buf75', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op77.met_dependencies = [MemoryDep('arg54_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (131072, 1)
op77.sizes = ([2, 16, 64, 64], [])
buf75_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg54_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf77_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op77_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg54_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf77', get_index_2, mul, None)
        return store


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 131072})]
op78.unmet_dependencies = [   MemoryDep('buf76', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op78.met_dependencies = [MemoryDep('arg56_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf78.users = [NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (131072, 1)
op78.sizes = ([2, 16, 64, 64], [])
buf76_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg56_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op78_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg56_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf78', get_index_2, add, None)
        return store


op79: ExternKernelSchedulerNode(ExternKernelOut)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf77', mode=None), StarDep(name='buf78', mode=None)]
op79.met_dependencies = []
op79.outputs = [
    buf79: ExternKernelOut
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf79.users = [
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False),
    ]
]
op79.node.kernel = extern_kernels.bmm


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 2048})]
op80.unmet_dependencies = [MemoryDep('buf79', c0, {c0: 131072})]
op80.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf80.users = [
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
    ]
]
op80.group.device = cuda:0
op80.group.iteration = (2048, 64)
op80.sizes = ([32, 64], [64])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op80_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf80', get_index_5, reduction)
        return store_reduction


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 2048})]
op81.unmet_dependencies = [MemoryDep('buf79', c0, {c0: 131072}), MemoryDep('buf80', c0, {c0: 2048})]
op81.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf81.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (2048, 64)
op81.sizes = ([32, 64], [64])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf81_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op81_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf80', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf81', get_index_6, reduction)
        return store_reduction


op82: ExternKernelSchedulerNode(ExternKernelOut)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op82.met_dependencies = [StarDep(name='arg57_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelOut
    buf82.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf82.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op82.node.kernel = extern_kernels.mm


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 131072})]
op83.unmet_dependencies = 
    [   MemoryDep('buf79', c0, {c0: 131072}),
        MemoryDep('buf80', c0, {c0: 2048}),
        MemoryDep('buf81', c0, {c0: 2048})]
op83.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (131072, 1)
op83.sizes = ([32, 64, 64], [])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf80_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf81_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op83_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf80', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf81', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf83', get_index_7, truediv, None)
        return store


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 131072})]
op84.unmet_dependencies = [   MemoryDep('buf82', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op84.met_dependencies = [MemoryDep('arg58_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (131072, 1)
op84.sizes = ([2, 16, 64, 64], [])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg58_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op84_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg58_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf84', get_index_2, add, None)
        return store


op85: ExternKernelSchedulerNode(ExternKernelOut)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf83', mode=None), StarDep(name='buf84', mode=None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: ExternKernelOut
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf85.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.node.kernel = extern_kernels.bmm


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 131072})]
op86.unmet_dependencies = [   MemoryDep('buf85', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op86.met_dependencies = []
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (131072, 1)
op86.sizes = ([2, 64, 16, 64], [])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf86_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op86_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf86', get_index_1, load, None)
        return store


op87: ExternKernelSchedulerNode(ExternKernelOut)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op87.met_dependencies = [StarDep(name='arg59_1', mode=None)]
op87.outputs = [
    buf87: ExternKernelOut
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf87.users = [
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False),
    ]
]
op87.node.kernel = extern_kernels.mm


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 128})]
op88.unmet_dependencies = [MemoryDep('buf74', c0, {c0: 131072}), MemoryDep('buf87', c0, {c0: 131072})]
op88.met_dependencies = [MemoryDep('arg60_1', c1, {c0: 128, c1: 1024})]
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf88.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (128, 1024)
op88.sizes = ([128], [1024])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg60_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op88_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf87', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg60_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf88', get_index_3, getitem)
        return store_reduction


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 128})]
op89.unmet_dependencies = [MemoryDep('buf74', c0, {c0: 131072}), MemoryDep('buf87', c0, {c0: 131072})]
op89.met_dependencies = [MemoryDep('arg60_1', c1, {c0: 128, c1: 1024})]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf89.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (128, 1024)
op89.sizes = ([128], [1024])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg60_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op89_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf87', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg60_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf89', get_index_3, getitem_1)
        return store_reduction


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 131072})]
op91.unmet_dependencies = 
    [   MemoryDep('buf74', c0, {c0: 131072}),
        MemoryDep('buf87', c0, {c0: 131072}),
        MemoryDep('buf88', c0, {c0: 128}),
        MemoryDep('buf89', c0, {c0: 128})]
op91.met_dependencies = 
    [   MemoryDep('arg60_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg61_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg62_1', c1, {c0: 128, c1: 1024})]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf91.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False),
    ]
]
op91.group.device = cuda:0
op91.group.iteration = (131072, 1)
op91.sizes = ([128, 1024], [])
buf74_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg60_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg61_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg62_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op91_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf87', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg60_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf88', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf89', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg61_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg62_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf91', get_index_7, add_3, None)
        return store


op92: ExternKernelSchedulerNode(ExternKernelOut)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf91', mode=None)]
op92.met_dependencies = [StarDep(name='arg63_1', mode=None)]
op92.outputs = [
    buf92: ExternKernelOut
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False)]
]
op92.node.kernel = extern_kernels.mm


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 524288})]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 524288})]
op93.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 128, c1: 4096})]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (524288, 1)
op93.sizes = ([128, 4096], [])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg64_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op93_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg64_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf93', get_index_2, relu, None)
        return store


op94: ExternKernelSchedulerNode(ExternKernelOut)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf93', mode=None)]
op94.met_dependencies = [StarDep(name='arg65_1', mode=None)]
op94.outputs = [
    buf94: ExternKernelOut
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False),
    ]
]
op94.node.kernel = extern_kernels.mm


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 128})]
op95.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 131072}), MemoryDep('buf94', c0, {c0: 131072})]
op95.met_dependencies = [MemoryDep('arg66_1', c1, {c0: 128, c1: 1024})]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf95.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (128, 1024)
op95.sizes = ([128], [1024])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg66_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op95_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf94', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg66_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf95', get_index_3, getitem)
        return store_reduction


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 128})]
op96.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 131072}), MemoryDep('buf94', c0, {c0: 131072})]
op96.met_dependencies = [MemoryDep('arg66_1', c1, {c0: 128, c1: 1024})]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf96.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (128, 1024)
op96.sizes = ([128], [1024])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg66_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op96_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf94', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg66_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf96', get_index_3, getitem_1)
        return store_reduction


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 131072})]
op98.unmet_dependencies = 
    [   MemoryDep('buf91', c0, {c0: 131072}),
        MemoryDep('buf94', c0, {c0: 131072}),
        MemoryDep('buf95', c0, {c0: 128}),
        MemoryDep('buf96', c0, {c0: 128})]
op98.met_dependencies = 
    [   MemoryDep('arg66_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg67_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg68_1', c1, {c0: 128, c1: 1024})]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf98.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
    ]
]
op98.group.device = cuda:0
op98.group.iteration = (131072, 1)
op98.sizes = ([128, 1024], [])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg66_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg67_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg68_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op98_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf94', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg66_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf95', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf96', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg67_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg68_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf98', get_index_7, add_3, None)
        return store


op99: ExternKernelSchedulerNode(ExternKernelOut)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf98', mode=None)]
op99.met_dependencies = [StarDep(name='arg69_1', mode=None)]
op99.outputs = [
    buf99: ExternKernelOut
    buf99.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf99.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op99.node.kernel = extern_kernels.mm


op100: ExternKernelSchedulerNode(ExternKernelOut)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf98', mode=None)]
op100.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op100.outputs = [
    buf100: ExternKernelOut
    buf100.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf100.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op100.node.kernel = extern_kernels.mm


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 131072})]
op101.unmet_dependencies = [   MemoryDep('buf99', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op101.met_dependencies = [MemoryDep('arg70_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (131072, 1)
op101.sizes = ([2, 16, 64, 64], [])
buf99_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg70_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf101_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op101_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg70_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf101', get_index_2, mul, None)
        return store


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 131072})]
op102.unmet_dependencies = [   MemoryDep('buf100', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op102.met_dependencies = [MemoryDep('arg72_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (131072, 1)
op102.sizes = ([2, 16, 64, 64], [])
buf100_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg72_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf102_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op102_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf102', get_index_2, add, None)
        return store


op103: ExternKernelSchedulerNode(ExternKernelOut)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf101', mode=None), StarDep(name='buf102', mode=None)]
op103.met_dependencies = []
op103.outputs = [
    buf103: ExternKernelOut
    buf103.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf103.users = [
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=True, is_weak=False),
    ]
]
op103.node.kernel = extern_kernels.bmm


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 2048})]
op104.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 131072})]
op104.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf104.users = [
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
    ]
]
op104.group.device = cuda:0
op104.group.iteration = (2048, 64)
op104.sizes = ([32, 64], [64])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op104_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf104', get_index_5, reduction)
        return store_reduction


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 2048})]
op105.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 131072}), MemoryDep('buf104', c0, {c0: 2048})]
op105.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf105.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (2048, 64)
op105.sizes = ([32, 64], [64])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op105_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf104', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf105', get_index_6, reduction)
        return store_reduction


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf98', mode=None)]
op106.met_dependencies = [StarDep(name='arg73_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf106.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op106.node.kernel = extern_kernels.mm


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 131072})]
op107.unmet_dependencies = 
    [   MemoryDep('buf103', c0, {c0: 131072}),
        MemoryDep('buf104', c0, {c0: 2048}),
        MemoryDep('buf105', c0, {c0: 2048})]
op107.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (131072, 1)
op107.sizes = ([32, 64, 64], [])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf107_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op107_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf104', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf105', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf107', get_index_7, truediv, None)
        return store


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 131072})]
op108.unmet_dependencies = [   MemoryDep('buf106', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op108.met_dependencies = [MemoryDep('arg74_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf108.users = [NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (131072, 1)
op108.sizes = ([2, 16, 64, 64], [])
buf106_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg74_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf108_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op108_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg74_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf108', get_index_2, add, None)
        return store


op109: ExternKernelSchedulerNode(ExternKernelOut)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf107', mode=None), StarDep(name='buf108', mode=None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ExternKernelOut
    buf109.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf109.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.node.kernel = extern_kernels.bmm


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 131072})]
op110.unmet_dependencies = [   MemoryDep('buf109', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (131072, 1)
op110.sizes = ([2, 64, 16, 64], [])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op110_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf110', get_index_1, load, None)
        return store


op111: ExternKernelSchedulerNode(ExternKernelOut)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op111.met_dependencies = [StarDep(name='arg75_1', mode=None)]
op111.outputs = [
    buf111: ExternKernelOut
    buf111.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf111.users = [
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
    ]
]
op111.node.kernel = extern_kernels.mm


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 128})]
op112.unmet_dependencies = [MemoryDep('buf111', c0, {c0: 131072}), MemoryDep('buf98', c0, {c0: 131072})]
op112.met_dependencies = [MemoryDep('arg76_1', c1, {c0: 128, c1: 1024})]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf112.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (128, 1024)
op112.sizes = ([128], [1024])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg76_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op112_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf111', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg76_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf112', get_index_3, getitem)
        return store_reduction


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 128})]
op113.unmet_dependencies = [MemoryDep('buf111', c0, {c0: 131072}), MemoryDep('buf98', c0, {c0: 131072})]
op113.met_dependencies = [MemoryDep('arg76_1', c1, {c0: 128, c1: 1024})]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf113.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (128, 1024)
op113.sizes = ([128], [1024])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg76_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op113_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf111', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg76_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf113', get_index_3, getitem_1)
        return store_reduction


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 131072})]
op115.unmet_dependencies = 
    [   MemoryDep('buf111', c0, {c0: 131072}),
        MemoryDep('buf112', c0, {c0: 128}),
        MemoryDep('buf113', c0, {c0: 128}),
        MemoryDep('buf98', c0, {c0: 131072})]
op115.met_dependencies = 
    [   MemoryDep('arg76_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg77_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg78_1', c1, {c0: 128, c1: 1024})]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf115.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
    ]
]
op115.group.device = cuda:0
op115.group.iteration = (131072, 1)
op115.sizes = ([128, 1024], [])
buf98_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg76_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg77_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg78_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op115_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf111', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg76_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf112', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf113', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg77_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg78_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf115', get_index_7, add_3, None)
        return store


op116: ExternKernelSchedulerNode(ExternKernelOut)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = [StarDep(name='arg79_1', mode=None)]
op116.outputs = [
    buf116: ExternKernelOut
    buf116.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf116.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False)]
]
op116.node.kernel = extern_kernels.mm


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 524288})]
op117.unmet_dependencies = [MemoryDep('buf116', c0, {c0: 524288})]
op117.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 128, c1: 4096})]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf117.users = [NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (524288, 1)
op117.sizes = ([128, 4096], [])
buf116_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg80_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op117_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg80_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf117', get_index_2, relu, None)
        return store


op118: ExternKernelSchedulerNode(ExternKernelOut)
op118.writes = [StarDep(name='buf118', mode=None)]
op118.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op118.met_dependencies = [StarDep(name='arg81_1', mode=None)]
op118.outputs = [
    buf118: ExternKernelOut
    buf118.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
    ]
]
op118.node.kernel = extern_kernels.mm


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 128})]
op119.unmet_dependencies = [MemoryDep('buf115', c0, {c0: 131072}), MemoryDep('buf118', c0, {c0: 131072})]
op119.met_dependencies = [MemoryDep('arg82_1', c1, {c0: 128, c1: 1024})]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf119.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (128, 1024)
op119.sizes = ([128], [1024])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg82_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op119_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg82_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf119', get_index_3, getitem)
        return store_reduction


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 128})]
op120.unmet_dependencies = [MemoryDep('buf115', c0, {c0: 131072}), MemoryDep('buf118', c0, {c0: 131072})]
op120.met_dependencies = [MemoryDep('arg82_1', c1, {c0: 128, c1: 1024})]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf120.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (128, 1024)
op120.sizes = ([128], [1024])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg82_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op120_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg82_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf120', get_index_3, getitem_1)
        return store_reduction


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 131072})]
op122.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 131072}),
        MemoryDep('buf118', c0, {c0: 131072}),
        MemoryDep('buf119', c0, {c0: 128}),
        MemoryDep('buf120', c0, {c0: 128})]
op122.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg83_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg84_1', c1, {c0: 128, c1: 1024})]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf122.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=True, is_weak=False),
    ]
]
op122.group.device = cuda:0
op122.group.iteration = (131072, 1)
op122.sizes = ([128, 1024], [])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg82_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf119_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf120_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg83_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg84_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op122_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg82_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf119', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf120', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg83_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg84_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf122', get_index_7, add_3, None)
        return store


op123: ExternKernelSchedulerNode(ExternKernelOut)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op123.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op123.outputs = [
    buf123: ExternKernelOut
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf123.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op123.node.kernel = extern_kernels.mm


op124: ExternKernelSchedulerNode(ExternKernelOut)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op124.met_dependencies = [StarDep(name='arg87_1', mode=None)]
op124.outputs = [
    buf124: ExternKernelOut
    buf124.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf124.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op124.node.kernel = extern_kernels.mm


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 131072})]
op125.unmet_dependencies = [   MemoryDep('buf123', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op125.met_dependencies = [MemoryDep('arg86_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf125.users = [NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (131072, 1)
op125.sizes = ([2, 16, 64, 64], [])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg86_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op125_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf125', get_index_2, mul, None)
        return store


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 131072})]
op126.unmet_dependencies = [   MemoryDep('buf124', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op126.met_dependencies = [MemoryDep('arg88_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf126.users = [NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (131072, 1)
op126.sizes = ([2, 16, 64, 64], [])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg88_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf126_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op126_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg88_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf126', get_index_2, add, None)
        return store


op127: ExternKernelSchedulerNode(ExternKernelOut)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf125', mode=None), StarDep(name='buf126', mode=None)]
op127.met_dependencies = []
op127.outputs = [
    buf127: ExternKernelOut
    buf127.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf127.users = [
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
    ]
]
op127.node.kernel = extern_kernels.bmm


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 2048})]
op128.unmet_dependencies = [MemoryDep('buf127', c0, {c0: 131072})]
op128.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf128.users = [
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
    ]
]
op128.group.device = cuda:0
op128.group.iteration = (2048, 64)
op128.sizes = ([32, 64], [64])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op128_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf128', get_index_5, reduction)
        return store_reduction


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 2048})]
op129.unmet_dependencies = [MemoryDep('buf127', c0, {c0: 131072}), MemoryDep('buf128', c0, {c0: 2048})]
op129.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf129.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (2048, 64)
op129.sizes = ([32, 64], [64])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op129_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf128', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf129', get_index_6, reduction)
        return store_reduction


op130: ExternKernelSchedulerNode(ExternKernelOut)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op130.met_dependencies = [StarDep(name='arg89_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelOut
    buf130.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf130.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op130.node.kernel = extern_kernels.mm


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 131072})]
op131.unmet_dependencies = 
    [   MemoryDep('buf127', c0, {c0: 131072}),
        MemoryDep('buf128', c0, {c0: 2048}),
        MemoryDep('buf129', c0, {c0: 2048})]
op131.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (131072, 1)
op131.sizes = ([32, 64, 64], [])
buf127_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf128_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf129_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf131_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op131_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf128', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf129', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf131', get_index_7, truediv, None)
        return store


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 131072})]
op132.unmet_dependencies = [   MemoryDep('buf130', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op132.met_dependencies = [MemoryDep('arg90_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (131072, 1)
op132.sizes = ([2, 16, 64, 64], [])
buf130_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg90_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf132_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op132_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf132', get_index_2, add, None)
        return store


op133: ExternKernelSchedulerNode(ExternKernelOut)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf131', mode=None), StarDep(name='buf132', mode=None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: ExternKernelOut
    buf133.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf133.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.node.kernel = extern_kernels.bmm


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 131072})]
op134.unmet_dependencies = [   MemoryDep('buf133', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op134.met_dependencies = []
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf134.users = [NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (131072, 1)
op134.sizes = ([2, 64, 16, 64], [])
buf133_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf134_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op134_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf134', get_index_1, load, None)
        return store


op135: ExternKernelSchedulerNode(ExternKernelOut)
op135.writes = [StarDep(name='buf135', mode=None)]
op135.unmet_dependencies = [StarDep(name='buf134', mode=None)]
op135.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op135.outputs = [
    buf135: ExternKernelOut
    buf135.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf135.users = [
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=True, is_weak=False),
    ]
]
op135.node.kernel = extern_kernels.mm


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 128})]
op136.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 131072}), MemoryDep('buf135', c0, {c0: 131072})]
op136.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 128, c1: 1024})]
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf136.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (128, 1024)
op136.sizes = ([128], [1024])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg92_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf136_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op136_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf135', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf136', get_index_3, getitem)
        return store_reduction


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 128})]
op137.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 131072}), MemoryDep('buf135', c0, {c0: 131072})]
op137.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 128, c1: 1024})]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf137.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (128, 1024)
op137.sizes = ([128], [1024])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg92_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op137_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf135', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf137', get_index_3, getitem_1)
        return store_reduction


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 131072})]
op139.unmet_dependencies = 
    [   MemoryDep('buf122', c0, {c0: 131072}),
        MemoryDep('buf135', c0, {c0: 131072}),
        MemoryDep('buf136', c0, {c0: 128}),
        MemoryDep('buf137', c0, {c0: 128})]
op139.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg93_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg94_1', c1, {c0: 128, c1: 1024})]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf139.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
    ]
]
op139.group.device = cuda:0
op139.group.iteration = (131072, 1)
op139.sizes = ([128, 1024], [])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf135_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg92_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf136_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf137_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg93_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg94_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op139_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf135', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf136', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf137', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg93_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg94_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf139', get_index_7, add_3, None)
        return store


op140: ExternKernelSchedulerNode(ExternKernelOut)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf139', mode=None)]
op140.met_dependencies = [StarDep(name='arg95_1', mode=None)]
op140.outputs = [
    buf140: ExternKernelOut
    buf140.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf140.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False)]
]
op140.node.kernel = extern_kernels.mm


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 524288})]
op141.unmet_dependencies = [MemoryDep('buf140', c0, {c0: 524288})]
op141.met_dependencies = [MemoryDep('arg96_1', c1, {c0: 128, c1: 4096})]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (524288, 1)
op141.sizes = ([128, 4096], [])
buf140_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg96_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op141_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf141', get_index_2, relu, None)
        return store


op142: ExternKernelSchedulerNode(ExternKernelOut)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf141', mode=None)]
op142.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op142.outputs = [
    buf142: ExternKernelOut
    buf142.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
    ]
]
op142.node.kernel = extern_kernels.mm


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 128})]
op143.unmet_dependencies = [MemoryDep('buf139', c0, {c0: 131072}), MemoryDep('buf142', c0, {c0: 131072})]
op143.met_dependencies = [MemoryDep('arg98_1', c1, {c0: 128, c1: 1024})]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf143.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (128, 1024)
op143.sizes = ([128], [1024])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg98_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op143_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf142', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf143', get_index_3, getitem)
        return store_reduction


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 128})]
op144.unmet_dependencies = [MemoryDep('buf139', c0, {c0: 131072}), MemoryDep('buf142', c0, {c0: 131072})]
op144.met_dependencies = [MemoryDep('arg98_1', c1, {c0: 128, c1: 1024})]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf144.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (128, 1024)
op144.sizes = ([128], [1024])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg98_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf144_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op144_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf142', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf144', get_index_3, getitem_1)
        return store_reduction


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 131072})]
op146.unmet_dependencies = 
    [   MemoryDep('buf139', c0, {c0: 131072}),
        MemoryDep('buf142', c0, {c0: 131072}),
        MemoryDep('buf143', c0, {c0: 128}),
        MemoryDep('buf144', c0, {c0: 128})]
op146.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg98_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg99_1', c1, {c0: 128, c1: 1024})]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf146.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=True, is_weak=False),
    ]
]
op146.group.device = cuda:0
op146.group.iteration = (131072, 1)
op146.sizes = ([128, 1024], [])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg98_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf144_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg99_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg100_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op146_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf142', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf143', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf144', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg99_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg100_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf146', get_index_7, add_3, None)
        return store


op147: ExternKernelSchedulerNode(ExternKernelOut)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op147.met_dependencies = [StarDep(name='arg101_1', mode=None)]
op147.outputs = [
    buf147: ExternKernelOut
    buf147.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf147.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op147.node.kernel = extern_kernels.mm


op148: ExternKernelSchedulerNode(ExternKernelOut)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op148.met_dependencies = [StarDep(name='arg103_1', mode=None)]
op148.outputs = [
    buf148: ExternKernelOut
    buf148.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf148.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op148.node.kernel = extern_kernels.mm


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 131072})]
op149.unmet_dependencies = [   MemoryDep('buf147', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op149.met_dependencies = [MemoryDep('arg102_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf149.users = [NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (131072, 1)
op149.sizes = ([2, 16, 64, 64], [])
buf147_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg102_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op149_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg102_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf149', get_index_2, mul, None)
        return store


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 131072})]
op150.unmet_dependencies = [   MemoryDep('buf148', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op150.met_dependencies = [MemoryDep('arg104_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf150.users = [NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (131072, 1)
op150.sizes = ([2, 16, 64, 64], [])
buf148_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg104_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op150_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg104_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf150', get_index_2, add, None)
        return store


op151: ExternKernelSchedulerNode(ExternKernelOut)
op151.writes = [StarDep(name='buf151', mode=None)]
op151.unmet_dependencies = [StarDep(name='buf149', mode=None), StarDep(name='buf150', mode=None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ExternKernelOut
    buf151.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf151.users = [
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False),
    ]
]
op151.node.kernel = extern_kernels.bmm


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 2048})]
op152.unmet_dependencies = [MemoryDep('buf151', c0, {c0: 131072})]
op152.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf152.users = [
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
    ]
]
op152.group.device = cuda:0
op152.group.iteration = (2048, 64)
op152.sizes = ([32, 64], [64])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op152_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf152', get_index_5, reduction)
        return store_reduction


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 2048})]
op153.unmet_dependencies = [MemoryDep('buf151', c0, {c0: 131072}), MemoryDep('buf152', c0, {c0: 2048})]
op153.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf153.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (2048, 64)
op153.sizes = ([32, 64], [64])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op153_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf152', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf153', get_index_6, reduction)
        return store_reduction


op154: ExternKernelSchedulerNode(ExternKernelOut)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op154.met_dependencies = [StarDep(name='arg105_1', mode=None)]
op154.outputs = [
    buf154: ExternKernelOut
    buf154.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf154.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op154.node.kernel = extern_kernels.mm


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 131072})]
op155.unmet_dependencies = 
    [   MemoryDep('buf151', c0, {c0: 131072}),
        MemoryDep('buf152', c0, {c0: 2048}),
        MemoryDep('buf153', c0, {c0: 2048})]
op155.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (131072, 1)
op155.sizes = ([32, 64, 64], [])
buf151_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op155_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf152', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf153', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf155', get_index_7, truediv, None)
        return store


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 131072})]
op156.unmet_dependencies = [   MemoryDep('buf154', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op156.met_dependencies = [MemoryDep('arg106_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (131072, 1)
op156.sizes = ([2, 16, 64, 64], [])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg106_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op156_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf156', get_index_2, add, None)
        return store


op157: ExternKernelSchedulerNode(ExternKernelOut)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf155', mode=None), StarDep(name='buf156', mode=None)]
op157.met_dependencies = []
op157.outputs = [
    buf157: ExternKernelOut
    buf157.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf157.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.node.kernel = extern_kernels.bmm


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 131072})]
op158.unmet_dependencies = [   MemoryDep('buf157', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op158.met_dependencies = []
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (131072, 1)
op158.sizes = ([2, 64, 16, 64], [])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op158_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf158', get_index_1, load, None)
        return store


op159: ExternKernelSchedulerNode(ExternKernelOut)
op159.writes = [StarDep(name='buf159', mode=None)]
op159.unmet_dependencies = [StarDep(name='buf158', mode=None)]
op159.met_dependencies = [StarDep(name='arg107_1', mode=None)]
op159.outputs = [
    buf159: ExternKernelOut
    buf159.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=True, is_weak=False),
    ]
]
op159.node.kernel = extern_kernels.mm


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 128})]
op160.unmet_dependencies = [MemoryDep('buf146', c0, {c0: 131072}), MemoryDep('buf159', c0, {c0: 131072})]
op160.met_dependencies = [MemoryDep('arg108_1', c1, {c0: 128, c1: 1024})]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf160.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (128, 1024)
op160.sizes = ([128], [1024])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg108_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op160_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf159', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg108_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf160', get_index_3, getitem)
        return store_reduction


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 128})]
op161.unmet_dependencies = [MemoryDep('buf146', c0, {c0: 131072}), MemoryDep('buf159', c0, {c0: 131072})]
op161.met_dependencies = [MemoryDep('arg108_1', c1, {c0: 128, c1: 1024})]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf161.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (128, 1024)
op161.sizes = ([128], [1024])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg108_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op161_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf159', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg108_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf161', get_index_3, getitem_1)
        return store_reduction


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 131072})]
op163.unmet_dependencies = 
    [   MemoryDep('buf146', c0, {c0: 131072}),
        MemoryDep('buf159', c0, {c0: 131072}),
        MemoryDep('buf160', c0, {c0: 128}),
        MemoryDep('buf161', c0, {c0: 128})]
op163.met_dependencies = 
    [   MemoryDep('arg108_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg109_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg110_1', c1, {c0: 128, c1: 1024})]
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf163.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=True, is_weak=False),
    ]
]
op163.group.device = cuda:0
op163.group.iteration = (131072, 1)
op163.sizes = ([128, 1024], [])
buf146_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg108_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg109_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg110_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op163_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf159', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg108_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf160', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf161', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg109_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg110_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf163', get_index_7, add_3, None)
        return store


op164: ExternKernelSchedulerNode(ExternKernelOut)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf163', mode=None)]
op164.met_dependencies = [StarDep(name='arg111_1', mode=None)]
op164.outputs = [
    buf164: ExternKernelOut
    buf164.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf164.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False)]
]
op164.node.kernel = extern_kernels.mm


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 524288})]
op165.unmet_dependencies = [MemoryDep('buf164', c0, {c0: 524288})]
op165.met_dependencies = [MemoryDep('arg112_1', c1, {c0: 128, c1: 4096})]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (524288, 1)
op165.sizes = ([128, 4096], [])
buf164_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg112_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf165_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op165_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg112_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf165', get_index_2, relu, None)
        return store


op166: ExternKernelSchedulerNode(ExternKernelOut)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf165', mode=None)]
op166.met_dependencies = [StarDep(name='arg113_1', mode=None)]
op166.outputs = [
    buf166: ExternKernelOut
    buf166.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf166.users = [
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=True, is_weak=False),
    ]
]
op166.node.kernel = extern_kernels.mm


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 128})]
op167.unmet_dependencies = [MemoryDep('buf163', c0, {c0: 131072}), MemoryDep('buf166', c0, {c0: 131072})]
op167.met_dependencies = [MemoryDep('arg114_1', c1, {c0: 128, c1: 1024})]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf167.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (128, 1024)
op167.sizes = ([128], [1024])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg114_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op167_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf166', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg114_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf167', get_index_3, getitem)
        return store_reduction


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 128})]
op168.unmet_dependencies = [MemoryDep('buf163', c0, {c0: 131072}), MemoryDep('buf166', c0, {c0: 131072})]
op168.met_dependencies = [MemoryDep('arg114_1', c1, {c0: 128, c1: 1024})]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf168.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (128, 1024)
op168.sizes = ([128], [1024])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg114_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf168_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op168_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf166', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg114_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf168', get_index_3, getitem_1)
        return store_reduction


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 131072})]
op170.unmet_dependencies = 
    [   MemoryDep('buf163', c0, {c0: 131072}),
        MemoryDep('buf166', c0, {c0: 131072}),
        MemoryDep('buf167', c0, {c0: 128}),
        MemoryDep('buf168', c0, {c0: 128})]
op170.met_dependencies = 
    [   MemoryDep('arg114_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg115_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg116_1', c1, {c0: 128, c1: 1024})]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf170.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
]
op170.group.device = cuda:0
op170.group.iteration = (131072, 1)
op170.sizes = ([128, 1024], [])
buf163_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg114_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf168_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg115_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg116_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op170_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf166', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg114_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf167', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf168', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg115_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg116_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf170', get_index_7, add_3, None)
        return store


op171: ExternKernelSchedulerNode(ExternKernelOut)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf170', mode=None)]
op171.met_dependencies = [StarDep(name='arg117_1', mode=None)]
op171.outputs = [
    buf171: ExternKernelOut
    buf171.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf171.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op171.node.kernel = extern_kernels.mm


op172: ExternKernelSchedulerNode(ExternKernelOut)
op172.writes = [StarDep(name='buf172', mode=None)]
op172.unmet_dependencies = [StarDep(name='buf170', mode=None)]
op172.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op172.outputs = [
    buf172: ExternKernelOut
    buf172.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf172.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op172.node.kernel = extern_kernels.mm


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 131072})]
op173.unmet_dependencies = [   MemoryDep('buf171', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op173.met_dependencies = [MemoryDep('arg118_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf173.users = [NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (131072, 1)
op173.sizes = ([2, 16, 64, 64], [])
buf171_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg118_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op173_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf173', get_index_2, mul, None)
        return store


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 131072})]
op174.unmet_dependencies = [   MemoryDep('buf172', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op174.met_dependencies = [MemoryDep('arg120_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf174.users = [NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (131072, 1)
op174.sizes = ([2, 16, 64, 64], [])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg120_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op174_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg120_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf174', get_index_2, add, None)
        return store


op175: ExternKernelSchedulerNode(ExternKernelOut)
op175.writes = [StarDep(name='buf175', mode=None)]
op175.unmet_dependencies = [StarDep(name='buf173', mode=None), StarDep(name='buf174', mode=None)]
op175.met_dependencies = []
op175.outputs = [
    buf175: ExternKernelOut
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf175.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
]
op175.node.kernel = extern_kernels.bmm


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 2048})]
op176.unmet_dependencies = [MemoryDep('buf175', c0, {c0: 131072})]
op176.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf176.users = [
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
    ]
]
op176.group.device = cuda:0
op176.group.iteration = (2048, 64)
op176.sizes = ([32, 64], [64])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op176_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf176', get_index_5, reduction)
        return store_reduction


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 2048})]
op177.unmet_dependencies = [MemoryDep('buf175', c0, {c0: 131072}), MemoryDep('buf176', c0, {c0: 2048})]
op177.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf177.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (2048, 64)
op177.sizes = ([32, 64], [64])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf177_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op177_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf176', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf177', get_index_6, reduction)
        return store_reduction


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf170', mode=None)]
op178.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf178.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op178.node.kernel = extern_kernels.mm


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 131072})]
op179.unmet_dependencies = 
    [   MemoryDep('buf175', c0, {c0: 131072}),
        MemoryDep('buf176', c0, {c0: 2048}),
        MemoryDep('buf177', c0, {c0: 2048})]
op179.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (131072, 1)
op179.sizes = ([32, 64, 64], [])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf177_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf179_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op179_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf176', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf177', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf179', get_index_7, truediv, None)
        return store


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 131072})]
op180.unmet_dependencies = [   MemoryDep('buf178', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op180.met_dependencies = [MemoryDep('arg122_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf180.users = [NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (131072, 1)
op180.sizes = ([2, 16, 64, 64], [])
buf178_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg122_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op180_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf180', get_index_2, add, None)
        return store


op181: ExternKernelSchedulerNode(ExternKernelOut)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf179', mode=None), StarDep(name='buf180', mode=None)]
op181.met_dependencies = []
op181.outputs = [
    buf181: ExternKernelOut
    buf181.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf181.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.node.kernel = extern_kernels.bmm


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 131072})]
op182.unmet_dependencies = [   MemoryDep('buf181', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op182.met_dependencies = []
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf182.users = [NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (131072, 1)
op182.sizes = ([2, 64, 16, 64], [])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf182_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op182_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf182', get_index_1, load, None)
        return store


op183: ExternKernelSchedulerNode(ExternKernelOut)
op183.writes = [StarDep(name='buf183', mode=None)]
op183.unmet_dependencies = [StarDep(name='buf182', mode=None)]
op183.met_dependencies = [StarDep(name='arg123_1', mode=None)]
op183.outputs = [
    buf183: ExternKernelOut
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
]
op183.node.kernel = extern_kernels.mm


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 128})]
op184.unmet_dependencies = [MemoryDep('buf170', c0, {c0: 131072}), MemoryDep('buf183', c0, {c0: 131072})]
op184.met_dependencies = [MemoryDep('arg124_1', c1, {c0: 128, c1: 1024})]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf184.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (128, 1024)
op184.sizes = ([128], [1024])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg124_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op184_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg124_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf184', get_index_3, getitem)
        return store_reduction


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 128})]
op185.unmet_dependencies = [MemoryDep('buf170', c0, {c0: 131072}), MemoryDep('buf183', c0, {c0: 131072})]
op185.met_dependencies = [MemoryDep('arg124_1', c1, {c0: 128, c1: 1024})]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf185.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (128, 1024)
op185.sizes = ([128], [1024])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg124_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op185_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg124_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf185', get_index_3, getitem_1)
        return store_reduction


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 131072})]
op187.unmet_dependencies = 
    [   MemoryDep('buf170', c0, {c0: 131072}),
        MemoryDep('buf183', c0, {c0: 131072}),
        MemoryDep('buf184', c0, {c0: 128}),
        MemoryDep('buf185', c0, {c0: 128})]
op187.met_dependencies = 
    [   MemoryDep('arg124_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg125_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg126_1', c1, {c0: 128, c1: 1024})]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf187.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
    ]
]
op187.group.device = cuda:0
op187.group.iteration = (131072, 1)
op187.sizes = ([128, 1024], [])
buf170_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg124_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg125_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg126_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op187_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg124_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf184', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf185', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg125_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg126_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf187', get_index_7, add_3, None)
        return store


op188: ExternKernelSchedulerNode(ExternKernelOut)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op188.met_dependencies = [StarDep(name='arg127_1', mode=None)]
op188.outputs = [
    buf188: ExternKernelOut
    buf188.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf188.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False)]
]
op188.node.kernel = extern_kernels.mm


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 524288})]
op189.unmet_dependencies = [MemoryDep('buf188', c0, {c0: 524288})]
op189.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 128, c1: 4096})]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (524288, 1)
op189.sizes = ([128, 4096], [])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg128_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf189_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op189_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg128_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf189', get_index_2, relu, None)
        return store


op190: ExternKernelSchedulerNode(ExternKernelOut)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op190.met_dependencies = [StarDep(name='arg129_1', mode=None)]
op190.outputs = [
    buf190: ExternKernelOut
    buf190.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf190.users = [
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
    ]
]
op190.node.kernel = extern_kernels.mm


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 128})]
op191.unmet_dependencies = [MemoryDep('buf187', c0, {c0: 131072}), MemoryDep('buf190', c0, {c0: 131072})]
op191.met_dependencies = [MemoryDep('arg130_1', c1, {c0: 128, c1: 1024})]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf191.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (128, 1024)
op191.sizes = ([128], [1024])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg130_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op191_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf190', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg130_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf191', get_index_3, getitem)
        return store_reduction


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 128})]
op192.unmet_dependencies = [MemoryDep('buf187', c0, {c0: 131072}), MemoryDep('buf190', c0, {c0: 131072})]
op192.met_dependencies = [MemoryDep('arg130_1', c1, {c0: 128, c1: 1024})]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf192.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (128, 1024)
op192.sizes = ([128], [1024])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg130_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op192_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf190', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg130_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf192', get_index_3, getitem_1)
        return store_reduction


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 131072})]
op194.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 131072}),
        MemoryDep('buf190', c0, {c0: 131072}),
        MemoryDep('buf191', c0, {c0: 128}),
        MemoryDep('buf192', c0, {c0: 128})]
op194.met_dependencies = 
    [   MemoryDep('arg130_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg131_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg132_1', c1, {c0: 128, c1: 1024})]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf194.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False),
    ]
]
op194.group.device = cuda:0
op194.group.iteration = (131072, 1)
op194.sizes = ([128, 1024], [])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf190_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg130_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf191_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf192_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg131_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg132_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op194_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf190', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg130_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf191', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf192', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg131_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg132_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf194', get_index_7, add_3, None)
        return store


op195: ExternKernelSchedulerNode(ExternKernelOut)
op195.writes = [StarDep(name='buf195', mode=None)]
op195.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op195.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op195.outputs = [
    buf195: ExternKernelOut
    buf195.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf195.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op195.node.kernel = extern_kernels.mm


op196: ExternKernelSchedulerNode(ExternKernelOut)
op196.writes = [StarDep(name='buf196', mode=None)]
op196.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op196.met_dependencies = [StarDep(name='arg135_1', mode=None)]
op196.outputs = [
    buf196: ExternKernelOut
    buf196.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf196.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op196.node.kernel = extern_kernels.mm


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 131072})]
op197.unmet_dependencies = [   MemoryDep('buf195', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op197.met_dependencies = [MemoryDep('arg134_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (131072, 1)
op197.sizes = ([2, 16, 64, 64], [])
buf195_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg134_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf197_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op197_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg134_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf197', get_index_2, mul, None)
        return store


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 131072})]
op198.unmet_dependencies = [   MemoryDep('buf196', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op198.met_dependencies = [MemoryDep('arg136_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (131072, 1)
op198.sizes = ([2, 16, 64, 64], [])
buf196_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg136_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf198_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op198_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf198', get_index_2, add, None)
        return store


op199: ExternKernelSchedulerNode(ExternKernelOut)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf197', mode=None), StarDep(name='buf198', mode=None)]
op199.met_dependencies = []
op199.outputs = [
    buf199: ExternKernelOut
    buf199.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf199.users = [
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False),
    ]
]
op199.node.kernel = extern_kernels.bmm


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 2048})]
op200.unmet_dependencies = [MemoryDep('buf199', c0, {c0: 131072})]
op200.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf200.users = [
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
    ]
]
op200.group.device = cuda:0
op200.group.iteration = (2048, 64)
op200.sizes = ([32, 64], [64])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op200_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf200', get_index_5, reduction)
        return store_reduction


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 2048})]
op201.unmet_dependencies = [MemoryDep('buf199', c0, {c0: 131072}), MemoryDep('buf200', c0, {c0: 2048})]
op201.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf201.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (2048, 64)
op201.sizes = ([32, 64], [64])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op201_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf200', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf201', get_index_6, reduction)
        return store_reduction


op202: ExternKernelSchedulerNode(ExternKernelOut)
op202.writes = [StarDep(name='buf202', mode=None)]
op202.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op202.met_dependencies = [StarDep(name='arg137_1', mode=None)]
op202.outputs = [
    buf202: ExternKernelOut
    buf202.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf202.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op202.node.kernel = extern_kernels.mm


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 131072})]
op203.unmet_dependencies = 
    [   MemoryDep('buf199', c0, {c0: 131072}),
        MemoryDep('buf200', c0, {c0: 2048}),
        MemoryDep('buf201', c0, {c0: 2048})]
op203.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (131072, 1)
op203.sizes = ([32, 64, 64], [])
buf199_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf200_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf201_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op203_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf200', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf201', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf203', get_index_7, truediv, None)
        return store


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 131072})]
op204.unmet_dependencies = [   MemoryDep('buf202', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op204.met_dependencies = [MemoryDep('arg138_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf204.users = [NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (131072, 1)
op204.sizes = ([2, 16, 64, 64], [])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg138_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf204_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op204_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg138_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf204', get_index_2, add, None)
        return store


op205: ExternKernelSchedulerNode(ExternKernelOut)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf203', mode=None), StarDep(name='buf204', mode=None)]
op205.met_dependencies = []
op205.outputs = [
    buf205: ExternKernelOut
    buf205.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf205.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op205.node.kernel = extern_kernels.bmm


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 131072})]
op206.unmet_dependencies = [   MemoryDep('buf205', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op206.met_dependencies = []
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (131072, 1)
op206.sizes = ([2, 64, 16, 64], [])
buf205_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf206_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op206_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf206', get_index_1, load, None)
        return store


op207: ExternKernelSchedulerNode(ExternKernelOut)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op207.met_dependencies = [StarDep(name='arg139_1', mode=None)]
op207.outputs = [
    buf207: ExternKernelOut
    buf207.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf207.users = [
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False),
    ]
]
op207.node.kernel = extern_kernels.mm


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 128})]
op208.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 131072}), MemoryDep('buf207', c0, {c0: 131072})]
op208.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 128, c1: 1024})]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf208.users = [NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (128, 1024)
op208.sizes = ([128], [1024])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg140_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op208_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf207', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf208', get_index_3, getitem)
        return store_reduction


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 128})]
op209.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 131072}), MemoryDep('buf207', c0, {c0: 131072})]
op209.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 128, c1: 1024})]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf209.users = [NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (128, 1024)
op209.sizes = ([128], [1024])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg140_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op209_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf207', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf209', get_index_3, getitem_1)
        return store_reduction


op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 131072})]
op211.unmet_dependencies = 
    [   MemoryDep('buf194', c0, {c0: 131072}),
        MemoryDep('buf207', c0, {c0: 131072}),
        MemoryDep('buf208', c0, {c0: 128}),
        MemoryDep('buf209', c0, {c0: 128})]
op211.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg141_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg142_1', c1, {c0: 128, c1: 1024})]
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf211.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=True, is_weak=False),
    ]
]
op211.group.device = cuda:0
op211.group.iteration = (131072, 1)
op211.sizes = ([128, 1024], [])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf207_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg140_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf208_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf209_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg141_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg142_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op211_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf207', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf208', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf209', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg141_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg142_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf211', get_index_7, add_3, None)
        return store


op212: ExternKernelSchedulerNode(ExternKernelOut)
op212.writes = [StarDep(name='buf212', mode=None)]
op212.unmet_dependencies = [StarDep(name='buf211', mode=None)]
op212.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op212.outputs = [
    buf212: ExternKernelOut
    buf212.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf212.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False)]
]
op212.node.kernel = extern_kernels.mm


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 524288})]
op213.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 524288})]
op213.met_dependencies = [MemoryDep('arg144_1', c1, {c0: 128, c1: 4096})]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf213.users = [NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (524288, 1)
op213.sizes = ([128, 4096], [])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg144_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op213_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg144_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf213', get_index_2, relu, None)
        return store


op214: ExternKernelSchedulerNode(ExternKernelOut)
op214.writes = [StarDep(name='buf214', mode=None)]
op214.unmet_dependencies = [StarDep(name='buf213', mode=None)]
op214.met_dependencies = [StarDep(name='arg145_1', mode=None)]
op214.outputs = [
    buf214: ExternKernelOut
    buf214.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf214.users = [
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=True, is_weak=False),
    ]
]
op214.node.kernel = extern_kernels.mm


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 128})]
op215.unmet_dependencies = [MemoryDep('buf211', c0, {c0: 131072}), MemoryDep('buf214', c0, {c0: 131072})]
op215.met_dependencies = [MemoryDep('arg146_1', c1, {c0: 128, c1: 1024})]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf215.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (128, 1024)
op215.sizes = ([128], [1024])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg146_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op215_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf214', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg146_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf215', get_index_3, getitem)
        return store_reduction


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 128})]
op216.unmet_dependencies = [MemoryDep('buf211', c0, {c0: 131072}), MemoryDep('buf214', c0, {c0: 131072})]
op216.met_dependencies = [MemoryDep('arg146_1', c1, {c0: 128, c1: 1024})]
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf216.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (128, 1024)
op216.sizes = ([128], [1024])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg146_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op216_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf214', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg146_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf216', get_index_3, getitem_1)
        return store_reduction


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 131072})]
op218.unmet_dependencies = 
    [   MemoryDep('buf211', c0, {c0: 131072}),
        MemoryDep('buf214', c0, {c0: 131072}),
        MemoryDep('buf215', c0, {c0: 128}),
        MemoryDep('buf216', c0, {c0: 128})]
op218.met_dependencies = 
    [   MemoryDep('arg146_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg147_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg148_1', c1, {c0: 128, c1: 1024})]
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf218.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
    ]
]
op218.group.device = cuda:0
op218.group.iteration = (131072, 1)
op218.sizes = ([128, 1024], [])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg146_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf216_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg147_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg148_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op218_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf214', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg146_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf215', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf216', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg147_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg148_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf218', get_index_7, add_3, None)
        return store


op219: ExternKernelSchedulerNode(ExternKernelOut)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op219.met_dependencies = [StarDep(name='arg149_1', mode=None)]
op219.outputs = [
    buf219: ExternKernelOut
    buf219.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf219.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op219.node.kernel = extern_kernels.mm


op220: ExternKernelSchedulerNode(ExternKernelOut)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op220.met_dependencies = [StarDep(name='arg151_1', mode=None)]
op220.outputs = [
    buf220: ExternKernelOut
    buf220.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf220.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op220.node.kernel = extern_kernels.mm


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 131072})]
op221.unmet_dependencies = [   MemoryDep('buf219', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op221.met_dependencies = [MemoryDep('arg150_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (131072, 1)
op221.sizes = ([2, 16, 64, 64], [])
buf219_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg150_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf221_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op221_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg150_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf221', get_index_2, mul, None)
        return store


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 131072})]
op222.unmet_dependencies = [   MemoryDep('buf220', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op222.met_dependencies = [MemoryDep('arg152_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf222.users = [NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (131072, 1)
op222.sizes = ([2, 16, 64, 64], [])
buf220_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg152_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf222_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op222_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg152_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf222', get_index_2, add, None)
        return store


op223: ExternKernelSchedulerNode(ExternKernelOut)
op223.writes = [StarDep(name='buf223', mode=None)]
op223.unmet_dependencies = [StarDep(name='buf221', mode=None), StarDep(name='buf222', mode=None)]
op223.met_dependencies = []
op223.outputs = [
    buf223: ExternKernelOut
    buf223.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf223.users = [
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False),
    ]
]
op223.node.kernel = extern_kernels.bmm


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 2048})]
op224.unmet_dependencies = [MemoryDep('buf223', c0, {c0: 131072})]
op224.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf224.users = [
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
    ]
]
op224.group.device = cuda:0
op224.group.iteration = (2048, 64)
op224.sizes = ([32, 64], [64])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op224_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf224', get_index_5, reduction)
        return store_reduction


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 2048})]
op225.unmet_dependencies = [MemoryDep('buf223', c0, {c0: 131072}), MemoryDep('buf224', c0, {c0: 2048})]
op225.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf225.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (2048, 64)
op225.sizes = ([32, 64], [64])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op225_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf224', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf225', get_index_6, reduction)
        return store_reduction


op226: ExternKernelSchedulerNode(ExternKernelOut)
op226.writes = [StarDep(name='buf226', mode=None)]
op226.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op226.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op226.outputs = [
    buf226: ExternKernelOut
    buf226.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf226.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op226.node.kernel = extern_kernels.mm


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 131072})]
op227.unmet_dependencies = 
    [   MemoryDep('buf223', c0, {c0: 131072}),
        MemoryDep('buf224', c0, {c0: 2048}),
        MemoryDep('buf225', c0, {c0: 2048})]
op227.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (131072, 1)
op227.sizes = ([32, 64, 64], [])
buf223_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf224_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op227_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf224', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf225', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf227', get_index_7, truediv, None)
        return store


op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 131072})]
op228.unmet_dependencies = [   MemoryDep('buf226', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op228.met_dependencies = [MemoryDep('arg154_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf228.users = [NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (131072, 1)
op228.sizes = ([2, 16, 64, 64], [])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg154_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op228_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf228', get_index_2, add, None)
        return store


op229: ExternKernelSchedulerNode(ExternKernelOut)
op229.writes = [StarDep(name='buf229', mode=None)]
op229.unmet_dependencies = [StarDep(name='buf227', mode=None), StarDep(name='buf228', mode=None)]
op229.met_dependencies = []
op229.outputs = [
    buf229: ExternKernelOut
    buf229.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf229.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op229.node.kernel = extern_kernels.bmm


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 131072})]
op230.unmet_dependencies = [   MemoryDep('buf229', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op230.met_dependencies = []
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf230.users = [NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (131072, 1)
op230.sizes = ([2, 64, 16, 64], [])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op230_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf230', get_index_1, load, None)
        return store


op231: ExternKernelSchedulerNode(ExternKernelOut)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = [StarDep(name='buf230', mode=None)]
op231.met_dependencies = [StarDep(name='arg155_1', mode=None)]
op231.outputs = [
    buf231: ExternKernelOut
    buf231.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf231.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
    ]
]
op231.node.kernel = extern_kernels.mm


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 128})]
op232.unmet_dependencies = [MemoryDep('buf218', c0, {c0: 131072}), MemoryDep('buf231', c0, {c0: 131072})]
op232.met_dependencies = [MemoryDep('arg156_1', c1, {c0: 128, c1: 1024})]
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf232.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (128, 1024)
op232.sizes = ([128], [1024])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg156_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op232_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf231', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg156_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf232', get_index_3, getitem)
        return store_reduction


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 128})]
op233.unmet_dependencies = [MemoryDep('buf218', c0, {c0: 131072}), MemoryDep('buf231', c0, {c0: 131072})]
op233.met_dependencies = [MemoryDep('arg156_1', c1, {c0: 128, c1: 1024})]
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf233.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (128, 1024)
op233.sizes = ([128], [1024])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg156_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op233_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf231', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg156_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf233', get_index_3, getitem_1)
        return store_reduction


op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 131072})]
op235.unmet_dependencies = 
    [   MemoryDep('buf218', c0, {c0: 131072}),
        MemoryDep('buf231', c0, {c0: 131072}),
        MemoryDep('buf232', c0, {c0: 128}),
        MemoryDep('buf233', c0, {c0: 128})]
op235.met_dependencies = 
    [   MemoryDep('arg156_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg157_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg158_1', c1, {c0: 128, c1: 1024})]
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf235.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
    ]
]
op235.group.device = cuda:0
op235.group.iteration = (131072, 1)
op235.sizes = ([128, 1024], [])
buf218_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg156_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg157_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg158_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op235_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf231', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg156_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf232', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf233', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg157_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg158_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf235', get_index_7, add_3, None)
        return store


op236: ExternKernelSchedulerNode(ExternKernelOut)
op236.writes = [StarDep(name='buf236', mode=None)]
op236.unmet_dependencies = [StarDep(name='buf235', mode=None)]
op236.met_dependencies = [StarDep(name='arg159_1', mode=None)]
op236.outputs = [
    buf236: ExternKernelOut
    buf236.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf236.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False)]
]
op236.node.kernel = extern_kernels.mm


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 524288})]
op237.unmet_dependencies = [MemoryDep('buf236', c0, {c0: 524288})]
op237.met_dependencies = [MemoryDep('arg160_1', c1, {c0: 128, c1: 4096})]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (524288, 1)
op237.sizes = ([128, 4096], [])
buf236_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg160_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op237_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg160_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf237', get_index_2, relu, None)
        return store


op238: ExternKernelSchedulerNode(ExternKernelOut)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf237', mode=None)]
op238.met_dependencies = [StarDep(name='arg161_1', mode=None)]
op238.outputs = [
    buf238: ExternKernelOut
    buf238.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf238.users = [
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
    ]
]
op238.node.kernel = extern_kernels.mm


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 128})]
op239.unmet_dependencies = [MemoryDep('buf235', c0, {c0: 131072}), MemoryDep('buf238', c0, {c0: 131072})]
op239.met_dependencies = [MemoryDep('arg162_1', c1, {c0: 128, c1: 1024})]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf239.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (128, 1024)
op239.sizes = ([128], [1024])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg162_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf239_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op239_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf238', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg162_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf239', get_index_3, getitem)
        return store_reduction


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 128})]
op240.unmet_dependencies = [MemoryDep('buf235', c0, {c0: 131072}), MemoryDep('buf238', c0, {c0: 131072})]
op240.met_dependencies = [MemoryDep('arg162_1', c1, {c0: 128, c1: 1024})]
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf240.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (128, 1024)
op240.sizes = ([128], [1024])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg162_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf240_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op240_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf238', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg162_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf240', get_index_3, getitem_1)
        return store_reduction


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 131072})]
op242.unmet_dependencies = 
    [   MemoryDep('buf235', c0, {c0: 131072}),
        MemoryDep('buf238', c0, {c0: 131072}),
        MemoryDep('buf239', c0, {c0: 128}),
        MemoryDep('buf240', c0, {c0: 128})]
op242.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg163_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg164_1', c1, {c0: 128, c1: 1024})]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf242.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=True, is_weak=False),
    ]
]
op242.group.device = cuda:0
op242.group.iteration = (131072, 1)
op242.sizes = ([128, 1024], [])
buf235_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg162_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf239_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf240_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg163_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg164_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op242_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf238', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg162_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf239', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf240', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg163_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg164_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf242', get_index_7, add_3, None)
        return store


op243: ExternKernelSchedulerNode(ExternKernelOut)
op243.writes = [StarDep(name='buf243', mode=None)]
op243.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op243.met_dependencies = [StarDep(name='arg165_1', mode=None)]
op243.outputs = [
    buf243: ExternKernelOut
    buf243.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf243.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op243.node.kernel = extern_kernels.mm


op244: ExternKernelSchedulerNode(ExternKernelOut)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op244.met_dependencies = [StarDep(name='arg167_1', mode=None)]
op244.outputs = [
    buf244: ExternKernelOut
    buf244.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf244.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op244.node.kernel = extern_kernels.mm


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 131072})]
op245.unmet_dependencies = [   MemoryDep('buf243', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op245.met_dependencies = [MemoryDep('arg166_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf245.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (131072, 1)
op245.sizes = ([2, 16, 64, 64], [])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg166_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op245_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg166_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf245', get_index_2, mul, None)
        return store


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 131072})]
op246.unmet_dependencies = [   MemoryDep('buf244', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op246.met_dependencies = [MemoryDep('arg168_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (131072, 1)
op246.sizes = ([2, 16, 64, 64], [])
buf244_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg168_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op246_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg168_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf246', get_index_2, add, None)
        return store


op247: ExternKernelSchedulerNode(ExternKernelOut)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf245', mode=None), StarDep(name='buf246', mode=None)]
op247.met_dependencies = []
op247.outputs = [
    buf247: ExternKernelOut
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf247.users = [
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=True, is_weak=False),
    ]
]
op247.node.kernel = extern_kernels.bmm


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 2048})]
op248.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 131072})]
op248.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
    ]
]
op248.group.device = cuda:0
op248.group.iteration = (2048, 64)
op248.sizes = ([32, 64], [64])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op248_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf248', get_index_5, reduction)
        return store_reduction


op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 2048})]
op249.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 131072}), MemoryDep('buf248', c0, {c0: 2048})]
op249.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf249.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (2048, 64)
op249.sizes = ([32, 64], [64])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op249_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf248', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf249', get_index_6, reduction)
        return store_reduction


op250: ExternKernelSchedulerNode(ExternKernelOut)
op250.writes = [StarDep(name='buf250', mode=None)]
op250.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op250.met_dependencies = [StarDep(name='arg169_1', mode=None)]
op250.outputs = [
    buf250: ExternKernelOut
    buf250.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf250.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op250.node.kernel = extern_kernels.mm


op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 131072})]
op251.unmet_dependencies = 
    [   MemoryDep('buf247', c0, {c0: 131072}),
        MemoryDep('buf248', c0, {c0: 2048}),
        MemoryDep('buf249', c0, {c0: 2048})]
op251.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf251.users = [NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (131072, 1)
op251.sizes = ([32, 64, 64], [])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf248_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf249_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op251_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf248', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf249', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf251', get_index_7, truediv, None)
        return store


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 131072})]
op252.unmet_dependencies = [   MemoryDep('buf250', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op252.met_dependencies = [MemoryDep('arg170_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (131072, 1)
op252.sizes = ([2, 16, 64, 64], [])
buf250_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg170_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op252_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg170_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf252', get_index_2, add, None)
        return store


op253: ExternKernelSchedulerNode(ExternKernelOut)
op253.writes = [StarDep(name='buf253', mode=None)]
op253.unmet_dependencies = [StarDep(name='buf251', mode=None), StarDep(name='buf252', mode=None)]
op253.met_dependencies = []
op253.outputs = [
    buf253: ExternKernelOut
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf253.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op253.node.kernel = extern_kernels.bmm


op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 131072})]
op254.unmet_dependencies = [   MemoryDep('buf253', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op254.met_dependencies = []
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf254.users = [NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (131072, 1)
op254.sizes = ([2, 64, 16, 64], [])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf254_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op254_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf254', get_index_1, load, None)
        return store


op255: ExternKernelSchedulerNode(ExternKernelOut)
op255.writes = [StarDep(name='buf255', mode=None)]
op255.unmet_dependencies = [StarDep(name='buf254', mode=None)]
op255.met_dependencies = [StarDep(name='arg171_1', mode=None)]
op255.outputs = [
    buf255: ExternKernelOut
    buf255.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf255.users = [
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=True, is_weak=False),
    ]
]
op255.node.kernel = extern_kernels.mm


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 128})]
op256.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 131072}), MemoryDep('buf255', c0, {c0: 131072})]
op256.met_dependencies = [MemoryDep('arg172_1', c1, {c0: 128, c1: 1024})]
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf256.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (128, 1024)
op256.sizes = ([128], [1024])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg172_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf256_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op256_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf255', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg172_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf256', get_index_3, getitem)
        return store_reduction


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 128})]
op257.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 131072}), MemoryDep('buf255', c0, {c0: 131072})]
op257.met_dependencies = [MemoryDep('arg172_1', c1, {c0: 128, c1: 1024})]
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf257.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (128, 1024)
op257.sizes = ([128], [1024])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg172_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op257_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf255', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg172_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf257', get_index_3, getitem_1)
        return store_reduction


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 131072})]
op259.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 131072}),
        MemoryDep('buf255', c0, {c0: 131072}),
        MemoryDep('buf256', c0, {c0: 128}),
        MemoryDep('buf257', c0, {c0: 128})]
op259.met_dependencies = 
    [   MemoryDep('arg172_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg173_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg174_1', c1, {c0: 128, c1: 1024})]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf259.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False),
    ]
]
op259.group.device = cuda:0
op259.group.iteration = (131072, 1)
op259.sizes = ([128, 1024], [])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg172_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf256_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg173_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg174_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op259_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf255', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg172_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf256', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf257', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg173_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg174_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf259', get_index_7, add_3, None)
        return store


op260: ExternKernelSchedulerNode(ExternKernelOut)
op260.writes = [StarDep(name='buf260', mode=None)]
op260.unmet_dependencies = [StarDep(name='buf259', mode=None)]
op260.met_dependencies = [StarDep(name='arg175_1', mode=None)]
op260.outputs = [
    buf260: ExternKernelOut
    buf260.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf260.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False)]
]
op260.node.kernel = extern_kernels.mm


op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 524288})]
op261.unmet_dependencies = [MemoryDep('buf260', c0, {c0: 524288})]
op261.met_dependencies = [MemoryDep('arg176_1', c1, {c0: 128, c1: 4096})]
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf261.users = [NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op261.group.device = cuda:0
op261.group.iteration = (524288, 1)
op261.sizes = ([128, 4096], [])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg176_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf261_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op261_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg176_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf261', get_index_2, relu, None)
        return store


op262: ExternKernelSchedulerNode(ExternKernelOut)
op262.writes = [StarDep(name='buf262', mode=None)]
op262.unmet_dependencies = [StarDep(name='buf261', mode=None)]
op262.met_dependencies = [StarDep(name='arg177_1', mode=None)]
op262.outputs = [
    buf262: ExternKernelOut
    buf262.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf262.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False),
    ]
]
op262.node.kernel = extern_kernels.mm


op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 128})]
op263.unmet_dependencies = [MemoryDep('buf259', c0, {c0: 131072}), MemoryDep('buf262', c0, {c0: 131072})]
op263.met_dependencies = [MemoryDep('arg178_1', c1, {c0: 128, c1: 1024})]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf263.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (128, 1024)
op263.sizes = ([128], [1024])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg178_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf263_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op263_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg178_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf263', get_index_3, getitem)
        return store_reduction


op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 128})]
op264.unmet_dependencies = [MemoryDep('buf259', c0, {c0: 131072}), MemoryDep('buf262', c0, {c0: 131072})]
op264.met_dependencies = [MemoryDep('arg178_1', c1, {c0: 128, c1: 1024})]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf264.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (128, 1024)
op264.sizes = ([128], [1024])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg178_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op264_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg178_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf264', get_index_3, getitem_1)
        return store_reduction


op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 131072})]
op266.unmet_dependencies = 
    [   MemoryDep('buf259', c0, {c0: 131072}),
        MemoryDep('buf262', c0, {c0: 131072}),
        MemoryDep('buf263', c0, {c0: 128}),
        MemoryDep('buf264', c0, {c0: 128})]
op266.met_dependencies = 
    [   MemoryDep('arg178_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg179_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg180_1', c1, {c0: 128, c1: 1024})]
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf266.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=True, is_weak=False),
    ]
]
op266.group.device = cuda:0
op266.group.iteration = (131072, 1)
op266.sizes = ([128, 1024], [])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg178_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf263_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg179_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg180_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op266_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg178_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf263', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf264', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg179_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg180_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf266', get_index_7, add_3, None)
        return store


op267: ExternKernelSchedulerNode(ExternKernelOut)
op267.writes = [StarDep(name='buf267', mode=None)]
op267.unmet_dependencies = [StarDep(name='buf266', mode=None)]
op267.met_dependencies = [StarDep(name='arg181_1', mode=None)]
op267.outputs = [
    buf267: ExternKernelOut
    buf267.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf267.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op267.node.kernel = extern_kernels.mm


op268: ExternKernelSchedulerNode(ExternKernelOut)
op268.writes = [StarDep(name='buf268', mode=None)]
op268.unmet_dependencies = [StarDep(name='buf266', mode=None)]
op268.met_dependencies = [StarDep(name='arg183_1', mode=None)]
op268.outputs = [
    buf268: ExternKernelOut
    buf268.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf268.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op268.node.kernel = extern_kernels.mm


op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 131072})]
op269.unmet_dependencies = [   MemoryDep('buf267', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op269.met_dependencies = [MemoryDep('arg182_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf269.users = [NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (131072, 1)
op269.sizes = ([2, 16, 64, 64], [])
buf267_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg182_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf269_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op269_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg182_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf269', get_index_2, mul, None)
        return store


op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 131072})]
op270.unmet_dependencies = [   MemoryDep('buf268', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op270.met_dependencies = [MemoryDep('arg184_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf270.users = [NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op270.group.device = cuda:0
op270.group.iteration = (131072, 1)
op270.sizes = ([2, 16, 64, 64], [])
buf268_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg184_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf270_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op270_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg184_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf270', get_index_2, add, None)
        return store


op271: ExternKernelSchedulerNode(ExternKernelOut)
op271.writes = [StarDep(name='buf271', mode=None)]
op271.unmet_dependencies = [StarDep(name='buf269', mode=None), StarDep(name='buf270', mode=None)]
op271.met_dependencies = []
op271.outputs = [
    buf271: ExternKernelOut
    buf271.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf271.users = [
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=True, is_weak=False),
    ]
]
op271.node.kernel = extern_kernels.bmm


op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', c0, {c0: 2048})]
op272.unmet_dependencies = [MemoryDep('buf271', c0, {c0: 131072})]
op272.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf272.users = [
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
    ]
]
op272.group.device = cuda:0
op272.group.iteration = (2048, 64)
op272.sizes = ([32, 64], [64])
buf271_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op272_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf272', get_index_5, reduction)
        return store_reduction


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 2048})]
op273.unmet_dependencies = [MemoryDep('buf271', c0, {c0: 131072}), MemoryDep('buf272', c0, {c0: 2048})]
op273.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf273.users = [NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (2048, 64)
op273.sizes = ([32, 64], [64])
buf271_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op273_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf272', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_6 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf273', get_index_6, reduction)
        return store_reduction


op274: ExternKernelSchedulerNode(ExternKernelOut)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf266', mode=None)]
op274.met_dependencies = [StarDep(name='arg185_1', mode=None)]
op274.outputs = [
    buf274: ExternKernelOut
    buf274.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf274.users = [NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op274.node.kernel = extern_kernels.mm


op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 131072})]
op275.unmet_dependencies = 
    [   MemoryDep('buf271', c0, {c0: 131072}),
        MemoryDep('buf272', c0, {c0: 2048}),
        MemoryDep('buf273', c0, {c0: 2048})]
op275.met_dependencies = [MemoryDep('arg4_1', c2 + 64*((c0//16)), {c0: 32, c1: 64, c2: 64})]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf275.users = [NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (131072, 1)
op275.sizes = ([32, 64, 64], [])
buf271_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
arg4_1_layout = FixedLayout('cuda:0', torch.int64, size=[2, 64], stride=[64, 1])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op275_loop_body:
    var_ranges = {p0: 32, p1: 64, p2: 64}
    index0 = 4096*p0 + 64*p1 + p2
    index1 = p2 + 64*((p0//16))
    index2 = p2
    index3 = p1 + 1
    index4 = 64*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        to_dtype_1 = ops.to_dtype(sub, torch.bool, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg4_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.int64)
        constant_1 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_1, to_dtype_2)
        constant_2 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(to_dtype_1, constant_2, sub_1)
        to_dtype_3 = ops.to_dtype(where, torch.bool, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant_3 = ops.constant(0.0, torch.float32)
        constant_4 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_1 = ops.where(lt, constant_3, constant_4)
        constant_5 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where_2 = ops.where(to_dtype_3, constant_5, where_1)
        add = ops.add(load, where_2)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf272', get_index_5)
        sub_2 = ops.sub(add, load_3)
        exp = ops.exp(sub_2)
        get_index_6 = self.get_index('index4')
        load_4 = ops.load('buf273', get_index_6)
        truediv = ops.truediv(exp, load_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf275', get_index_7, truediv, None)
        return store


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 131072})]
op276.unmet_dependencies = [   MemoryDep('buf274', 65536*c0 + 64*c1 + 1024*c2 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op276.met_dependencies = [MemoryDep('arg186_1', 64*c1 + c3, {c0: 2, c1: 16, c2: 64, c3: 64})]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
    buf276.users = [NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (131072, 1)
op276.sizes = ([2, 16, 64, 64], [])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg186_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf276_layout = FixedLayout('cuda:0', torch.float32, size=[2, 16, 64, 64], stride=[65536, 4096, 64, 1])
class op276_loop_body:
    var_ranges = {p0: 2, p1: 16, p2: 64, p3: 64}
    index0 = 65536*p0 + 64*p1 + 1024*p2 + p3
    index1 = 64*p1 + p3
    index2 = 65536*p0 + 4096*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf276', get_index_2, add, None)
        return store


op277: ExternKernelSchedulerNode(ExternKernelOut)
op277.writes = [StarDep(name='buf277', mode=None)]
op277.unmet_dependencies = [StarDep(name='buf275', mode=None), StarDep(name='buf276', mode=None)]
op277.met_dependencies = []
op277.outputs = [
    buf277: ExternKernelOut
    buf277.layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf277.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op277.node.kernel = extern_kernels.bmm


op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 131072})]
op278.unmet_dependencies = [   MemoryDep('buf277', 65536*c0 + 64*c1 + 4096*c2 + c3, {c0: 2, c1: 64, c2: 16, c3: 64})]
op278.met_dependencies = []
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
    buf278.users = [NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op278.group.device = cuda:0
op278.group.iteration = (131072, 1)
op278.sizes = ([2, 64, 16, 64], [])
buf277_layout = FixedLayout('cuda:0', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf278_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 16, 64], stride=[65536, 1024, 64, 1])
class op278_loop_body:
    var_ranges = {p0: 2, p1: 64, p2: 16, p3: 64}
    index0 = 65536*p0 + 64*p1 + 4096*p2 + p3
    index1 = 65536*p0 + 1024*p1 + 64*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf278', get_index_1, load, None)
        return store


op279: ExternKernelSchedulerNode(ExternKernelOut)
op279.writes = [StarDep(name='buf279', mode=None)]
op279.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op279.met_dependencies = [StarDep(name='arg187_1', mode=None)]
op279.outputs = [
    buf279: ExternKernelOut
    buf279.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf279.users = [
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=True, is_weak=False),
    ]
]
op279.node.kernel = extern_kernels.mm


op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 128})]
op280.unmet_dependencies = [MemoryDep('buf266', c0, {c0: 131072}), MemoryDep('buf279', c0, {c0: 131072})]
op280.met_dependencies = [MemoryDep('arg188_1', c1, {c0: 128, c1: 1024})]
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf280.users = [NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op280.group.device = cuda:0
op280.group.iteration = (128, 1024)
op280.sizes = ([128], [1024])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf279_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg188_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf280_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op280_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf279', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf280', get_index_3, getitem)
        return store_reduction


op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 128})]
op281.unmet_dependencies = [MemoryDep('buf266', c0, {c0: 131072}), MemoryDep('buf279', c0, {c0: 131072})]
op281.met_dependencies = [MemoryDep('arg188_1', c1, {c0: 128, c1: 1024})]
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf281.users = [NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op281.group.device = cuda:0
op281.group.iteration = (128, 1024)
op281.sizes = ([128], [1024])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf279_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg188_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf281_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op281_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf279', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf281', get_index_3, getitem_1)
        return store_reduction


op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 131072})]
op283.unmet_dependencies = 
    [   MemoryDep('buf266', c0, {c0: 131072}),
        MemoryDep('buf279', c0, {c0: 131072}),
        MemoryDep('buf280', c0, {c0: 128}),
        MemoryDep('buf281', c0, {c0: 128})]
op283.met_dependencies = 
    [   MemoryDep('arg188_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg189_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg190_1', c1, {c0: 128, c1: 1024})]
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf283.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=True, is_weak=False),
    ]
]
op283.group.device = cuda:0
op283.group.iteration = (131072, 1)
op283.sizes = ([128, 1024], [])
buf266_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf279_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg188_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf280_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf281_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg189_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg190_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op283_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf279', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf280', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf281', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg189_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg190_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf283', get_index_7, add_3, None)
        return store


op284: ExternKernelSchedulerNode(ExternKernelOut)
op284.writes = [StarDep(name='buf284', mode=None)]
op284.unmet_dependencies = [StarDep(name='buf283', mode=None)]
op284.met_dependencies = [StarDep(name='arg191_1', mode=None)]
op284.outputs = [
    buf284: ExternKernelOut
    buf284.layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
    buf284.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False)]
]
op284.node.kernel = extern_kernels.mm


op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 524288})]
op285.unmet_dependencies = [MemoryDep('buf284', c0, {c0: 524288})]
op285.met_dependencies = [MemoryDep('arg192_1', c1, {c0: 128, c1: 4096})]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
    buf285.users = [NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (524288, 1)
op285.sizes = ([128, 4096], [])
buf284_layout = FixedLayout('cuda:0', torch.float32, size=[128, 4096], stride=[4096, 1])
arg192_1_layout = FixedLayout('cuda:0', torch.float32, size=[4096], stride=[1])
buf285_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 4096], stride=[262144, 4096, 1])
class op285_loop_body:
    var_ranges = {p0: 128, p1: 4096}
    index0 = 4096*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg192_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf285', get_index_2, relu, None)
        return store


op286: ExternKernelSchedulerNode(ExternKernelOut)
op286.writes = [StarDep(name='buf286', mode=None)]
op286.unmet_dependencies = [StarDep(name='buf285', mode=None)]
op286.met_dependencies = [StarDep(name='arg193_1', mode=None)]
op286.outputs = [
    buf286: ExternKernelOut
    buf286.layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
    buf286.users = [
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=True, is_weak=False),
    ]
]
op286.node.kernel = extern_kernels.mm


op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 128})]
op287.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 131072}), MemoryDep('buf286', c0, {c0: 131072})]
op287.met_dependencies = [MemoryDep('arg194_1', c1, {c0: 128, c1: 1024})]
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf287.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (128, 1024)
op287.sizes = ([128], [1024])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg194_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf287_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op287_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf286', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg194_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf287', get_index_3, getitem)
        return store_reduction


op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 128})]
op288.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 131072}), MemoryDep('buf286', c0, {c0: 131072})]
op288.met_dependencies = [MemoryDep('arg194_1', c1, {c0: 128, c1: 1024})]
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
    buf288.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (128, 1024)
op288.sizes = ([128], [1024])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg194_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf288_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
class op288_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf286', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg194_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf288', get_index_3, getitem_1)
        return store_reduction


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 131072})]
op290.unmet_dependencies = 
    [   MemoryDep('buf283', c0, {c0: 131072}),
        MemoryDep('buf286', c0, {c0: 131072}),
        MemoryDep('buf287', c0, {c0: 128}),
        MemoryDep('buf288', c0, {c0: 128})]
op290.met_dependencies = 
    [   MemoryDep('arg194_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg195_1', c1, {c0: 128, c1: 1024}),
        MemoryDep('arg196_1', c1, {c0: 128, c1: 1024})]
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
    buf290.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (131072, 1)
op290.sizes = ([128, 1024], [])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
buf286_layout = FixedLayout('cuda:0', torch.float32, size=[128, 1024], stride=[1024, 1])
arg194_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf287_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
buf288_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1], stride=[64, 1, 128])
arg195_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
arg196_1_layout = FixedLayout('cuda:0', torch.float32, size=[1024], stride=[1])
buf290_layout = FixedLayout('cuda:0', torch.float32, size=[2, 64, 1024], stride=[65536, 1024, 1])
class op290_loop_body:
    var_ranges = {p0: 128, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf286', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg194_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf287', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf288', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg195_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg196_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf290', get_index_7, add_3, None)
        return store




# ===== run_2025_10_19_03_43_12_574129-pid_19/torchinductor/model__2_inference_2.2/output_code.py =====
# AOT ID: ['2_inference']
from ctypes import c_void_p, c_long, c_int
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align
from torch import device, empty_strided
from torch._inductor.async_compile import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels
from torch._inductor.codegen.multi_kernel import MultiKernelCall
import triton
import triton.language as tl
from torch._inductor.runtime.triton_heuristics import (
    grid,
    split_scan_grid,
    grid_combo_kernels,
    start_graph,
    end_graph,
    cooperative_reduction_grid,
)
from torch._C import _cuda_getCurrentRawStream as get_raw_stream
from torch._C import _cuda_getCurrentRawStream as get_raw_stream

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
_quantized = torch.ops._quantized
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
alloc_from_pool = torch.ops.inductor._alloc_from_pool
async_compile = AsyncCompile()
empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p


# kernel path: /tmp/torchinductor_root/3e/c3eotp5uv6y22uwhui335tdp6voxsteshcrrc6r6hftn2qaatlr6.py
# Topologically Sorted Source Nodes: [ne, mask, cumsum], Original ATen: [aten.ne, aten._to_copy, aten.cumsum]
# Source node to ATen node mapping:
#   cumsum => cumsum
#   mask => convert_element_type
#   ne => ne
# Graph fragment:
#   %ne : [num_users=1] = call_function[target=torch.ops.aten.ne.Scalar](args = (%view, 1), kwargs = {})
#   %convert_element_type : [num_users=2] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%ne, torch.int32), kwargs = {})
#   %cumsum : [num_users=1] = call_function[target=torch.ops.aten.cumsum.default](args = (%convert_element_type, 1), kwargs = {})
triton_per_fused__to_copy_cumsum_ne_0 = async_compile.triton('triton_per_fused__to_copy_cumsum_ne_0', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton.jit
def _triton_helper_fn_add0(arg0_0, arg1_0):
    tmp0 = arg0_0 + arg1_0
    return tmp0

@triton_heuristics.persistent_reduction(
    size_hints={'x': 2, 'r': 64},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*i64', 'out_ptr0': '*i64', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused__to_copy_cumsum_ne_0', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False}
)
@triton.jit
def triton_per_fused__to_copy_cumsum_ne_0(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 2
    rnumel = 64
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    roffset = 0
    rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + 64*x0), xmask, other=0.0)
    tmp1 = tl.full([1, 1], 1, tl.int64)
    tmp2 = tmp0 != tmp1
    tmp3 = tmp2.to(tl.int32)
    tmp4 = tmp3.to(tl.int64)
    tmp5 = tmp4.to(tl.int64)
    tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
    tmp7, = tl.associative_scan((tmp6,), 1, _triton_helper_fn_add0)
    tl.store(out_ptr0 + (r1 + 64*x0), tmp7, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/gf/cgfw2i7a427jsxoof7irhzbtlq2gdxy6hl4hcdv5rqbf3zjfrs54.py
# Topologically Sorted Source Nodes: [embedding, inputs_embeds, hidden_states], Original ATen: [aten.embedding, aten.mul, aten.add]
# Source node to ATen node mapping:
#   embedding => embedding
#   hidden_states => add_2
#   inputs_embeds => mul
# Graph fragment:
#   %embedding : [num_users=1] = call_function[target=torch.ops.aten.embedding.default](args = (%arg1_1, %view, 1), kwargs = {})
#   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%embedding, 32.0), kwargs = {})
#   %add_2 : [num_users=4] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul, %view_2), kwargs = {})
triton_poi_fused_add_embedding_mul_1 = async_compile.triton('triton_poi_fused_add_embedding_mul_1', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 131072}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*i64', 'in_ptr1': '*fp32', 'in_ptr2': '*i64', 'in_ptr3': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_embedding_mul_1', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_embedding_mul_1(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 131072
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x1 = xindex // 1024
    x0 = (xindex % 1024)
    x2 = xindex
    tmp0 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
    tmp1 = tl.full([XBLOCK], 50265, tl.int32)
    tmp2 = tmp0 + tmp1
    tmp3 = tmp0 < 0
    tmp4 = tl.where(tmp3, tmp2, tmp0)
    tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
    tmp6 = tl.load(in_ptr1 + (x0 + 1024*tmp4), None)
    tmp7 = 32.0
    tmp8 = tmp6 * tmp7
    tmp10 = tmp9.to(tl.int32)
    tmp11 = tl.full([1], 0, tl.int32)
    tmp12 = tmp10 + tmp11
    tmp13 = tl.full([1], 1, tl.int64)
    tmp14 = tmp0 != tmp13
    tmp15 = tmp14.to(tl.int32)
    tmp16 = tmp12 * tmp15
    tmp17 = tmp16.to(tl.int64)
    tmp18 = tmp17 + tmp13
    tmp19 = tl.full([XBLOCK], 1026, tl.int32)
    tmp20 = tmp18 + tmp19
    tmp21 = tmp18 < 0
    tmp22 = tl.where(tmp21, tmp20, tmp18)
    tl.device_assert((0 <= tmp22) & (tmp22 < 1026), "index out of bounds: 0 <= tmp22 < 1026")
    tmp24 = tl.load(in_ptr3 + (x0 + 1024*tmp22), None)
    tmp25 = tmp8 + tmp24
    tl.store(out_ptr0 + (x2), tmp25, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/yr/cyrs3ko6dtqrvupnsji3ergbxt6tn5im2bsbfzddlrbxtkvwlkvq.py
# Topologically Sorted Source Nodes: [contiguous_2], Original ATen: [aten.clone]
# Source node to ATen node mapping:
#   contiguous_2 => clone_3
# Graph fragment:
#   %clone_3 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%permute_5,), kwargs = {memory_format: torch.contiguous_format})
triton_poi_fused_clone_2 = async_compile.triton('triton_poi_fused_clone_2', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 131072}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_2', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_clone_2(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 131072
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = (xindex % 64)
    x1 = ((xindex // 64) % 64)
    x2 = ((xindex // 4096) % 16)
    x3 = xindex // 65536
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + 64*x2 + 1024*x1 + 65536*x3), None)
    tmp1 = tl.load(in_ptr1 + (x0 + 64*x2), None, eviction_policy='evict_last')
    tmp2 = tmp0 + tmp1
    tmp3 = 0.125
    tmp4 = tmp2 * tmp3
    tl.store(out_ptr0 + (x4), tmp4, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/qw/cqwg5wul5mvbdw2fotvsjitncoffrxy6ugr6xq5a7t3absxvonzq.py
# Topologically Sorted Source Nodes: [key_states], Original ATen: [aten.clone]
# Source node to ATen node mapping:
#   key_states => clone_1
# Graph fragment:
#   %clone_1 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%permute_2,), kwargs = {memory_format: torch.contiguous_format})
triton_poi_fused_clone_3 = async_compile.triton('triton_poi_fused_clone_3', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 131072}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_3', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_clone_3(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 131072
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = (xindex % 64)
    x1 = ((xindex // 64) % 64)
    x2 = ((xindex // 4096) % 16)
    x3 = xindex // 65536
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + 64*x2 + 1024*x1 + 65536*x3), None)
    tmp1 = tl.load(in_ptr1 + (x0 + 64*x2), None, eviction_policy='evict_last')
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x4), tmp2, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/mx/cmx6kboohmu3lsyagzog2lete2qlfbeqhuxsaaslpc2fiuojj6xg.py
# Topologically Sorted Source Nodes: [attn_weights_3], Original ATen: [aten._softmax]
# Source node to ATen node mapping:
#   attn_weights_3 => amax, div, exp, sub_1, sum_1
# Graph fragment:
#   %amax : [num_users=1] = call_function[target=torch.ops.aten.amax.default](args = (%view_17, [-1], True), kwargs = {})
#   %sub_1 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%view_17, %amax), kwargs = {})
#   %exp : [num_users=2] = call_function[target=torch.ops.aten.exp.default](args = (%sub_1,), kwargs = {})
#   %sum_1 : [num_users=1] = call_function[target=torch.ops.aten.sum.dim_IntList](args = (%exp, [-1], True), kwargs = {})
#   %div : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%exp, %sum_1), kwargs = {})
triton_per_fused__softmax_4 = async_compile.triton('triton_per_fused__softmax_4', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 2048, 'r': 64},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*i64', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused__softmax_4', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 2, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False}
)
@triton.jit
def triton_per_fused__softmax_4(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 2048
    rnumel = 64
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    roffset = 0
    rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
    r2 = rindex
    x3 = xindex
    x1 = xindex // 64
    x0 = (xindex % 64)
    tmp0 = tl.load(in_out_ptr0 + (r2 + 64*x3), xmask, other=0.0)
    tmp1 = tl.load(in_ptr0 + (r2 + 64*(x1 // 16)), xmask, eviction_policy='evict_last', other=0.0)
    tmp2 = tmp1.to(tl.float32)
    tmp3 = 1.0
    tmp4 = tmp3 - tmp2
    tmp5 = (tmp4 != 0)
    tmp6 = -3.4028234663852886e+38
    tmp7 = tl.where(tmp5, tmp6, tmp4)
    tmp8 = (tmp7 != 0)
    tmp9 = r2
    tmp10 = 1 + x0
    tmp11 = tmp9 < tmp10
    tmp12 = 0.0
    tmp13 = tl.where(tmp11, tmp12, tmp6)
    tmp14 = tl.where(tmp8, tmp6, tmp13)
    tmp15 = tmp0 + tmp14
    tmp16 = tl.broadcast_to(tmp15, [XBLOCK, RBLOCK])
    tmp18 = tl.where(xmask, tmp16, float("-inf"))
    tmp19 = triton_helpers.max2(tmp18, 1)[:, None]
    tmp20 = tmp15 - tmp19
    tmp21 = tl_math.exp(tmp20)
    tmp22 = tl.broadcast_to(tmp21, [XBLOCK, RBLOCK])
    tmp24 = tl.where(xmask, tmp22, 0)
    tmp25 = tl.sum(tmp24, 1)[:, None]
    tmp26 = tmp21 / tmp25
    tl.store(in_out_ptr0 + (r2 + 64*x3), tmp26, xmask)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/4p/c4pp6g727zx6eiwuf64c34ndzaoji4kyat5r5e4c3xhv7qk5x65z.py
# Topologically Sorted Source Nodes: [attn_output_3], Original ATen: [aten.clone]
# Source node to ATen node mapping:
#   attn_output_3 => clone_5
# Graph fragment:
#   %clone_5 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%permute_7,), kwargs = {memory_format: torch.contiguous_format})
triton_poi_fused_clone_5 = async_compile.triton('triton_poi_fused_clone_5', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 131072}, 
    filename=__file__,
    triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_5', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_clone_5(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 131072
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x0 = (xindex % 64)
    x1 = ((xindex // 64) % 16)
    x2 = ((xindex // 1024) % 64)
    x3 = xindex // 65536
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + 64*x2 + 4096*x1 + 65536*x3), None)
    tl.store(out_ptr0 + (x4), tmp0, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/d7/cd7d7sx46jh333fb63x4kh5z72qac7ei4h7izss2byy5sfz4zi7k.py
# Topologically Sorted Source Nodes: [hidden_states_3, hidden_states_4], Original ATen: [aten.add, aten.native_layer_norm]
# Source node to ATen node mapping:
#   hidden_states_3 => add_5
#   hidden_states_4 => add_6, add_7, mul_3, mul_4, rsqrt, sub_2, var_mean
# Graph fragment:
#   %add_5 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_2, %view_21), kwargs = {})
#   %var_mean : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%add_5, [2]), kwargs = {correction: 0, keepdim: True})
#   %sub_2 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_5, %getitem_1), kwargs = {})
#   %add_6 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem, 1e-05), kwargs = {})
#   %rsqrt : [num_users=1] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_6,), kwargs = {})
#   %mul_3 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_2, %rsqrt), kwargs = {})
#   %mul_4 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_3, %arg13_1), kwargs = {})
#   %add_7 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_4, %arg14_1), kwargs = {})
triton_per_fused_add_native_layer_norm_6 = async_compile.triton('triton_per_fused_add_native_layer_norm_6', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.persistent_reduction(
    size_hints={'x': 128, 'r': 1024},
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_native_layer_norm_6', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False}
)
@triton.jit
def triton_per_fused_add_native_layer_norm_6(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, rnumel):
    xnumel = 128
    XBLOCK: tl.constexpr = 1
    rnumel = 1024
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = tl.full([RBLOCK], True, tl.int1)
    rindex = tl.arange(0, RBLOCK)[:]
    roffset = 0
    rmask = tl.full([RBLOCK], True, tl.int1)
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (r1 + 1024*x0), None)
    tmp1 = tl.load(in_ptr0 + (r1 + 1024*x0), None)
    tmp2 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
    tmp25 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
    tmp27 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
    tmp3 = tmp1 + tmp2
    tmp4 = tmp0 + tmp3
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
    tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp10 = tl.full([1], 1024, tl.int32)
    tmp11 = tmp10.to(tl.float32)
    tmp12 = tmp9 / tmp11
    tmp13 = tmp5 - tmp12
    tmp14 = tmp13 * tmp13
    tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
    tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = tmp4 - tmp12
    tmp19 = 1024.0
    tmp20 = tmp17 / tmp19
    tmp21 = 1e-05
    tmp22 = tmp20 + tmp21
    tmp23 = libdevice.rsqrt(tmp22)
    tmp24 = tmp18 * tmp23
    tmp26 = tmp24 * tmp25
    tmp28 = tmp26 + tmp27
    tl.store(in_out_ptr0 + (r1 + 1024*x0), tmp28, None)
''', device_str='cuda')


# kernel path: /tmp/torchinductor_root/2p/c2phpjq6x3blyy42juv6gsxqtvlj6d4tww4ppadcxpaiki2kwc64.py
# Topologically Sorted Source Nodes: [hidden_states_5], Original ATen: [aten.relu]
# Source node to ATen node mapping:
#   hidden_states_5 => relu
# Graph fragment:
#   %relu : [num_users=1] = call_function[target=torch.ops.aten.relu.default](args = (%view_23,), kwargs = {})
triton_poi_fused_relu_7 = async_compile.triton('triton_poi_fused_relu_7', '''
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 524288}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=40, cc=75, major=7, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1024, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_relu_7', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '9182018CCD6A4F758231D68D0B1E1E23CEBB32E5D78CB36B65791C4EB96774A2', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False, 'coordinate_descent_tuning': True, 'coordinate_descent_search_radius': 1, 'coordinate_descent_check_all_directions': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_relu_7(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 524288
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    x2 = xindex
    x0 = (xindex % 4096)
    tmp0 = tl.load(in_out_ptr0 + (x2), None)
    tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
    tmp2 = tmp0 + tmp1
    tmp3 = tl.full([1], 0, tl.int32)
    tmp4 = triton_helpers.maximum(tmp3, tmp2)
    tl.store(in_out_ptr0 + (x2), tmp4, None)
''', device_str='cuda')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1, arg7_1, arg8_1, arg9_1, arg10_1, arg11_1, arg12_1, arg13_1, arg14_1, arg15_1, arg16_1, arg17_1, arg18_1, arg19_1, arg20_1, arg21_1, arg22_1, arg23_1, arg24_1, arg25_1, arg26_1, arg27_1, arg28_1, arg29_1, arg30_1, arg31_1, arg32_1, arg33_1, arg34_1, arg35_1, arg36_1, arg37_1, arg38_1, arg39_1, arg40_1, arg41_1, arg42_1, arg43_1, arg44_1, arg45_1, arg46_1, arg47_1, arg48_1, arg49_1, arg50_1, arg51_1, arg52_1, arg53_1, arg54_1, arg55_1, arg56_1, arg57_1, arg58_1, arg59_1, arg60_1, arg61_1, arg62_1, arg63_1, arg64_1, arg65_1, arg66_1, arg67_1, arg68_1, arg69_1, arg70_1, arg71_1, arg72_1, arg73_1, arg74_1, arg75_1, arg76_1, arg77_1, arg78_1, arg79_1, arg80_1, arg81_1, arg82_1, arg83_1, arg84_1, arg85_1, arg86_1, arg87_1, arg88_1, arg89_1, arg90_1, arg91_1, arg92_1, arg93_1, arg94_1, arg95_1, arg96_1, arg97_1, arg98_1, arg99_1, arg100_1, arg101_1, arg102_1, arg103_1, arg104_1, arg105_1, arg106_1, arg107_1, arg108_1, arg109_1, arg110_1, arg111_1, arg112_1, arg113_1, arg114_1, arg115_1, arg116_1, arg117_1, arg118_1, arg119_1, arg120_1, arg121_1, arg122_1, arg123_1, arg124_1, arg125_1, arg126_1, arg127_1, arg128_1, arg129_1, arg130_1, arg131_1, arg132_1, arg133_1, arg134_1, arg135_1, arg136_1, arg137_1, arg138_1, arg139_1, arg140_1, arg141_1, arg142_1, arg143_1, arg144_1, arg145_1, arg146_1, arg147_1, arg148_1, arg149_1, arg150_1, arg151_1, arg152_1, arg153_1, arg154_1, arg155_1, arg156_1, arg157_1, arg158_1, arg159_1, arg160_1, arg161_1, arg162_1, arg163_1, arg164_1, arg165_1, arg166_1, arg167_1, arg168_1, arg169_1, arg170_1, arg171_1, arg172_1, arg173_1, arg174_1, arg175_1, arg176_1, arg177_1, arg178_1, arg179_1, arg180_1, arg181_1, arg182_1, arg183_1, arg184_1, arg185_1, arg186_1, arg187_1, arg188_1, arg189_1, arg190_1, arg191_1, arg192_1, arg193_1, arg194_1, arg195_1, arg196_1 = args
    args.clear()
    assert_size_stride(arg0_1, (2, 64), (64, 1))
    assert_size_stride(arg1_1, (50265, 1024), (1024, 1))
    assert_size_stride(arg2_1, (1026, 1024), (1024, 1))
    assert_size_stride(arg3_1, (1, ), (1, ))
    assert_size_stride(arg4_1, (2, 64), (64, 1))
    assert_size_stride(arg5_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg6_1, (1024, ), (1, ))
    assert_size_stride(arg7_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg8_1, (1024, ), (1, ))
    assert_size_stride(arg9_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg10_1, (1024, ), (1, ))
    assert_size_stride(arg11_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg12_1, (1024, ), (1, ))
    assert_size_stride(arg13_1, (1024, ), (1, ))
    assert_size_stride(arg14_1, (1024, ), (1, ))
    assert_size_stride(arg15_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg16_1, (4096, ), (1, ))
    assert_size_stride(arg17_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg18_1, (1024, ), (1, ))
    assert_size_stride(arg19_1, (1024, ), (1, ))
    assert_size_stride(arg20_1, (1024, ), (1, ))
    assert_size_stride(arg21_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg22_1, (1024, ), (1, ))
    assert_size_stride(arg23_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg24_1, (1024, ), (1, ))
    assert_size_stride(arg25_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg26_1, (1024, ), (1, ))
    assert_size_stride(arg27_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg28_1, (1024, ), (1, ))
    assert_size_stride(arg29_1, (1024, ), (1, ))
    assert_size_stride(arg30_1, (1024, ), (1, ))
    assert_size_stride(arg31_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg32_1, (4096, ), (1, ))
    assert_size_stride(arg33_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg34_1, (1024, ), (1, ))
    assert_size_stride(arg35_1, (1024, ), (1, ))
    assert_size_stride(arg36_1, (1024, ), (1, ))
    assert_size_stride(arg37_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg38_1, (1024, ), (1, ))
    assert_size_stride(arg39_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg40_1, (1024, ), (1, ))
    assert_size_stride(arg41_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg42_1, (1024, ), (1, ))
    assert_size_stride(arg43_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg44_1, (1024, ), (1, ))
    assert_size_stride(arg45_1, (1024, ), (1, ))
    assert_size_stride(arg46_1, (1024, ), (1, ))
    assert_size_stride(arg47_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg48_1, (4096, ), (1, ))
    assert_size_stride(arg49_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg50_1, (1024, ), (1, ))
    assert_size_stride(arg51_1, (1024, ), (1, ))
    assert_size_stride(arg52_1, (1024, ), (1, ))
    assert_size_stride(arg53_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg54_1, (1024, ), (1, ))
    assert_size_stride(arg55_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg56_1, (1024, ), (1, ))
    assert_size_stride(arg57_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg58_1, (1024, ), (1, ))
    assert_size_stride(arg59_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg60_1, (1024, ), (1, ))
    assert_size_stride(arg61_1, (1024, ), (1, ))
    assert_size_stride(arg62_1, (1024, ), (1, ))
    assert_size_stride(arg63_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg64_1, (4096, ), (1, ))
    assert_size_stride(arg65_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg66_1, (1024, ), (1, ))
    assert_size_stride(arg67_1, (1024, ), (1, ))
    assert_size_stride(arg68_1, (1024, ), (1, ))
    assert_size_stride(arg69_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg70_1, (1024, ), (1, ))
    assert_size_stride(arg71_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg72_1, (1024, ), (1, ))
    assert_size_stride(arg73_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg74_1, (1024, ), (1, ))
    assert_size_stride(arg75_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg76_1, (1024, ), (1, ))
    assert_size_stride(arg77_1, (1024, ), (1, ))
    assert_size_stride(arg78_1, (1024, ), (1, ))
    assert_size_stride(arg79_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg80_1, (4096, ), (1, ))
    assert_size_stride(arg81_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg82_1, (1024, ), (1, ))
    assert_size_stride(arg83_1, (1024, ), (1, ))
    assert_size_stride(arg84_1, (1024, ), (1, ))
    assert_size_stride(arg85_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg86_1, (1024, ), (1, ))
    assert_size_stride(arg87_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg88_1, (1024, ), (1, ))
    assert_size_stride(arg89_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg90_1, (1024, ), (1, ))
    assert_size_stride(arg91_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg92_1, (1024, ), (1, ))
    assert_size_stride(arg93_1, (1024, ), (1, ))
    assert_size_stride(arg94_1, (1024, ), (1, ))
    assert_size_stride(arg95_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg96_1, (4096, ), (1, ))
    assert_size_stride(arg97_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg98_1, (1024, ), (1, ))
    assert_size_stride(arg99_1, (1024, ), (1, ))
    assert_size_stride(arg100_1, (1024, ), (1, ))
    assert_size_stride(arg101_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg102_1, (1024, ), (1, ))
    assert_size_stride(arg103_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg104_1, (1024, ), (1, ))
    assert_size_stride(arg105_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg106_1, (1024, ), (1, ))
    assert_size_stride(arg107_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg108_1, (1024, ), (1, ))
    assert_size_stride(arg109_1, (1024, ), (1, ))
    assert_size_stride(arg110_1, (1024, ), (1, ))
    assert_size_stride(arg111_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg112_1, (4096, ), (1, ))
    assert_size_stride(arg113_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg114_1, (1024, ), (1, ))
    assert_size_stride(arg115_1, (1024, ), (1, ))
    assert_size_stride(arg116_1, (1024, ), (1, ))
    assert_size_stride(arg117_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg118_1, (1024, ), (1, ))
    assert_size_stride(arg119_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg120_1, (1024, ), (1, ))
    assert_size_stride(arg121_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg122_1, (1024, ), (1, ))
    assert_size_stride(arg123_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg124_1, (1024, ), (1, ))
    assert_size_stride(arg125_1, (1024, ), (1, ))
    assert_size_stride(arg126_1, (1024, ), (1, ))
    assert_size_stride(arg127_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg128_1, (4096, ), (1, ))
    assert_size_stride(arg129_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg130_1, (1024, ), (1, ))
    assert_size_stride(arg131_1, (1024, ), (1, ))
    assert_size_stride(arg132_1, (1024, ), (1, ))
    assert_size_stride(arg133_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg134_1, (1024, ), (1, ))
    assert_size_stride(arg135_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg136_1, (1024, ), (1, ))
    assert_size_stride(arg137_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg138_1, (1024, ), (1, ))
    assert_size_stride(arg139_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg140_1, (1024, ), (1, ))
    assert_size_stride(arg141_1, (1024, ), (1, ))
    assert_size_stride(arg142_1, (1024, ), (1, ))
    assert_size_stride(arg143_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg144_1, (4096, ), (1, ))
    assert_size_stride(arg145_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg146_1, (1024, ), (1, ))
    assert_size_stride(arg147_1, (1024, ), (1, ))
    assert_size_stride(arg148_1, (1024, ), (1, ))
    assert_size_stride(arg149_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg150_1, (1024, ), (1, ))
    assert_size_stride(arg151_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg152_1, (1024, ), (1, ))
    assert_size_stride(arg153_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg154_1, (1024, ), (1, ))
    assert_size_stride(arg155_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg156_1, (1024, ), (1, ))
    assert_size_stride(arg157_1, (1024, ), (1, ))
    assert_size_stride(arg158_1, (1024, ), (1, ))
    assert_size_stride(arg159_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg160_1, (4096, ), (1, ))
    assert_size_stride(arg161_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg162_1, (1024, ), (1, ))
    assert_size_stride(arg163_1, (1024, ), (1, ))
    assert_size_stride(arg164_1, (1024, ), (1, ))
    assert_size_stride(arg165_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg166_1, (1024, ), (1, ))
    assert_size_stride(arg167_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg168_1, (1024, ), (1, ))
    assert_size_stride(arg169_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg170_1, (1024, ), (1, ))
    assert_size_stride(arg171_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg172_1, (1024, ), (1, ))
    assert_size_stride(arg173_1, (1024, ), (1, ))
    assert_size_stride(arg174_1, (1024, ), (1, ))
    assert_size_stride(arg175_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg176_1, (4096, ), (1, ))
    assert_size_stride(arg177_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg178_1, (1024, ), (1, ))
    assert_size_stride(arg179_1, (1024, ), (1, ))
    assert_size_stride(arg180_1, (1024, ), (1, ))
    assert_size_stride(arg181_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg182_1, (1024, ), (1, ))
    assert_size_stride(arg183_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg184_1, (1024, ), (1, ))
    assert_size_stride(arg185_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg186_1, (1024, ), (1, ))
    assert_size_stride(arg187_1, (1024, 1024), (1024, 1))
    assert_size_stride(arg188_1, (1024, ), (1, ))
    assert_size_stride(arg189_1, (1024, ), (1, ))
    assert_size_stride(arg190_1, (1024, ), (1, ))
    assert_size_stride(arg191_1, (4096, 1024), (1024, 1))
    assert_size_stride(arg192_1, (4096, ), (1, ))
    assert_size_stride(arg193_1, (1024, 4096), (4096, 1))
    assert_size_stride(arg194_1, (1024, ), (1, ))
    assert_size_stride(arg195_1, (1024, ), (1, ))
    assert_size_stride(arg196_1, (1024, ), (1, ))
    with torch.cuda._DeviceGuard(0):
        torch.cuda.set_device(0)
        buf0 = empty_strided_cuda((1026, 1024), (1024, 1), torch.float32)
        buf0.copy_(arg2_1, False)
        del arg2_1
        buf1 = empty_strided_cuda((2, 64), (64, 1), torch.int64)
        # Topologically Sorted Source Nodes: [ne, mask, cumsum], Original ATen: [aten.ne, aten._to_copy, aten.cumsum]
        stream0 = get_raw_stream(0)
        triton_per_fused__to_copy_cumsum_ne_0.run(arg0_1, buf1, 2, 64, grid=grid(2), stream=stream0)
        buf2 = empty_strided_cuda((2, 64, 1024), (65536, 1024, 1), torch.float32)
        # Topologically Sorted Source Nodes: [embedding, inputs_embeds, hidden_states], Original ATen: [aten.embedding, aten.mul, aten.add]
        stream0 = get_raw_stream(0)
        triton_poi_fused_add_embedding_mul_1.run(arg0_1, arg1_1, buf1, buf0, buf2, 131072, grid=grid(131072), stream=stream0)
        del arg0_1
        del arg1_1
        del buf1
        buf3 = empty_strided_cuda((128, 1024), (1024, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf2, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg5_1, (1024, 1024), (1, 1024), 0), out=buf3)
        del arg5_1
        buf4 = empty_strided_cuda((128, 1024), (1024, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_1], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf2, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg7_1, (1024, 1024), (1, 1024), 0), out=buf4)
        del arg7_1
        buf5 = empty_strided_cuda((2, 16, 64, 64), (65536, 4096, 64, 1), torch.float32)
        # Topologically Sorted Source Nodes: [contiguous_2], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf3, arg6_1, buf5, 131072, grid=grid(131072), stream=stream0)
        del arg6_1
        buf6 = reinterpret_tensor(buf3, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf3  # reuse
        # Topologically Sorted Source Nodes: [key_states], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf4, arg8_1, buf6, 131072, grid=grid(131072), stream=stream0)
        del arg8_1
        buf7 = reinterpret_tensor(buf4, (32, 64, 64), (4096, 64, 1), 0); del buf4  # reuse
        # Topologically Sorted Source Nodes: [attn_weights], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf5, (32, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf6, (32, 64, 64), (4096, 1, 64), 0), out=buf7)
        buf11 = buf7; del buf7  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_3], Original ATen: [aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_4.run(buf11, arg4_1, 2048, 64, grid=grid(2048), stream=stream0)
        buf10 = reinterpret_tensor(buf6, (128, 1024), (1024, 1), 0); del buf6  # reuse
        # Topologically Sorted Source Nodes: [linear_2], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf2, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg9_1, (1024, 1024), (1, 1024), 0), out=buf10)
        del arg9_1
        buf12 = buf5; del buf5  # reuse
        # Topologically Sorted Source Nodes: [value_states], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf10, arg10_1, buf12, 131072, grid=grid(131072), stream=stream0)
        del arg10_1
        buf13 = reinterpret_tensor(buf10, (32, 64, 64), (4096, 64, 1), 0); del buf10  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_3, attn_output], Original ATen: [aten._softmax, aten.bmm]
        extern_kernels.bmm(buf11, reinterpret_tensor(buf12, (32, 64, 64), (4096, 64, 1), 0), out=buf13)
        buf14 = reinterpret_tensor(buf12, (2, 64, 16, 64), (65536, 1024, 64, 1), 0); del buf12  # reuse
        # Topologically Sorted Source Nodes: [attn_output_3], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_5.run(buf13, buf14, 131072, grid=grid(131072), stream=stream0)
        buf15 = reinterpret_tensor(buf13, (128, 1024), (1024, 1), 0); del buf13  # reuse
        # Topologically Sorted Source Nodes: [attn_output_4], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf14, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg11_1, (1024, 1024), (1, 1024), 0), out=buf15)
        del arg11_1
        buf19 = buf2; del buf2  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_3, hidden_states_4], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf19, buf15, arg12_1, arg13_1, arg14_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg12_1
        del arg13_1
        del arg14_1
        buf20 = empty_strided_cuda((128, 4096), (4096, 1), torch.float32)
        # Topologically Sorted Source Nodes: [linear_4], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf19, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg15_1, (1024, 4096), (1, 1024), 0), out=buf20)
        del arg15_1
        buf21 = reinterpret_tensor(buf20, (2, 64, 4096), (262144, 4096, 1), 0); del buf20  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_5], Original ATen: [aten.relu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_relu_7.run(buf21, arg16_1, 524288, grid=grid(524288), stream=stream0)
        del arg16_1
        buf22 = buf15; del buf15  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_7], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf21, (128, 4096), (4096, 1), 0), reinterpret_tensor(arg17_1, (4096, 1024), (1, 4096), 0), out=buf22)
        del arg17_1
        buf26 = buf19; del buf19  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_9, hidden_states_10], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf26, buf22, arg18_1, arg19_1, arg20_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg18_1
        del arg19_1
        del arg20_1
        buf27 = buf22; del buf22  # reuse
        # Topologically Sorted Source Nodes: [linear_6], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf26, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg21_1, (1024, 1024), (1, 1024), 0), out=buf27)
        del arg21_1
        buf28 = reinterpret_tensor(buf14, (128, 1024), (1024, 1), 0); del buf14  # reuse
        # Topologically Sorted Source Nodes: [linear_7], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf26, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg23_1, (1024, 1024), (1, 1024), 0), out=buf28)
        del arg23_1
        buf29 = reinterpret_tensor(buf11, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf11  # reuse
        # Topologically Sorted Source Nodes: [contiguous_5], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf27, arg22_1, buf29, 131072, grid=grid(131072), stream=stream0)
        del arg22_1
        buf30 = reinterpret_tensor(buf27, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf27  # reuse
        # Topologically Sorted Source Nodes: [key_states_2], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf28, arg24_1, buf30, 131072, grid=grid(131072), stream=stream0)
        del arg24_1
        buf31 = reinterpret_tensor(buf28, (32, 64, 64), (4096, 64, 1), 0); del buf28  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_4], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf29, (32, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf30, (32, 64, 64), (4096, 1, 64), 0), out=buf31)
        buf35 = buf31; del buf31  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_7], Original ATen: [aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_4.run(buf35, arg4_1, 2048, 64, grid=grid(2048), stream=stream0)
        buf34 = reinterpret_tensor(buf30, (128, 1024), (1024, 1), 0); del buf30  # reuse
        # Topologically Sorted Source Nodes: [linear_8], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf26, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg25_1, (1024, 1024), (1, 1024), 0), out=buf34)
        del arg25_1
        buf36 = buf29; del buf29  # reuse
        # Topologically Sorted Source Nodes: [value_states_2], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf34, arg26_1, buf36, 131072, grid=grid(131072), stream=stream0)
        del arg26_1
        buf37 = reinterpret_tensor(buf34, (32, 64, 64), (4096, 64, 1), 0); del buf34  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_7, attn_output_5], Original ATen: [aten._softmax, aten.bmm]
        extern_kernels.bmm(buf35, reinterpret_tensor(buf36, (32, 64, 64), (4096, 64, 1), 0), out=buf37)
        buf38 = reinterpret_tensor(buf36, (2, 64, 16, 64), (65536, 1024, 64, 1), 0); del buf36  # reuse
        # Topologically Sorted Source Nodes: [attn_output_8], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_5.run(buf37, buf38, 131072, grid=grid(131072), stream=stream0)
        buf39 = reinterpret_tensor(buf37, (128, 1024), (1024, 1), 0); del buf37  # reuse
        # Topologically Sorted Source Nodes: [attn_output_9], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf38, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg27_1, (1024, 1024), (1, 1024), 0), out=buf39)
        del arg27_1
        buf43 = buf26; del buf26  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_12, hidden_states_13], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf43, buf39, arg28_1, arg29_1, arg30_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg28_1
        del arg29_1
        del arg30_1
        buf44 = reinterpret_tensor(buf21, (128, 4096), (4096, 1), 0); del buf21  # reuse
        # Topologically Sorted Source Nodes: [linear_10], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf43, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg31_1, (1024, 4096), (1, 1024), 0), out=buf44)
        del arg31_1
        buf45 = reinterpret_tensor(buf44, (2, 64, 4096), (262144, 4096, 1), 0); del buf44  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_14], Original ATen: [aten.relu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_relu_7.run(buf45, arg32_1, 524288, grid=grid(524288), stream=stream0)
        del arg32_1
        buf46 = buf39; del buf39  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_16], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf45, (128, 4096), (4096, 1), 0), reinterpret_tensor(arg33_1, (4096, 1024), (1, 4096), 0), out=buf46)
        del arg33_1
        buf50 = buf43; del buf43  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_18, hidden_states_19], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf50, buf46, arg34_1, arg35_1, arg36_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg34_1
        del arg35_1
        del arg36_1
        buf51 = buf46; del buf46  # reuse
        # Topologically Sorted Source Nodes: [linear_12], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf50, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg37_1, (1024, 1024), (1, 1024), 0), out=buf51)
        del arg37_1
        buf52 = reinterpret_tensor(buf38, (128, 1024), (1024, 1), 0); del buf38  # reuse
        # Topologically Sorted Source Nodes: [linear_13], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf50, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg39_1, (1024, 1024), (1, 1024), 0), out=buf52)
        del arg39_1
        buf53 = reinterpret_tensor(buf35, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf35  # reuse
        # Topologically Sorted Source Nodes: [contiguous_8], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf51, arg38_1, buf53, 131072, grid=grid(131072), stream=stream0)
        del arg38_1
        buf54 = reinterpret_tensor(buf51, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf51  # reuse
        # Topologically Sorted Source Nodes: [key_states_4], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf52, arg40_1, buf54, 131072, grid=grid(131072), stream=stream0)
        del arg40_1
        buf55 = reinterpret_tensor(buf52, (32, 64, 64), (4096, 64, 1), 0); del buf52  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_8], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf53, (32, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf54, (32, 64, 64), (4096, 1, 64), 0), out=buf55)
        buf59 = buf55; del buf55  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_11], Original ATen: [aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_4.run(buf59, arg4_1, 2048, 64, grid=grid(2048), stream=stream0)
        buf58 = reinterpret_tensor(buf54, (128, 1024), (1024, 1), 0); del buf54  # reuse
        # Topologically Sorted Source Nodes: [linear_14], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf50, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg41_1, (1024, 1024), (1, 1024), 0), out=buf58)
        del arg41_1
        buf60 = buf53; del buf53  # reuse
        # Topologically Sorted Source Nodes: [value_states_4], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf58, arg42_1, buf60, 131072, grid=grid(131072), stream=stream0)
        del arg42_1
        buf61 = reinterpret_tensor(buf58, (32, 64, 64), (4096, 64, 1), 0); del buf58  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_11, attn_output_10], Original ATen: [aten._softmax, aten.bmm]
        extern_kernels.bmm(buf59, reinterpret_tensor(buf60, (32, 64, 64), (4096, 64, 1), 0), out=buf61)
        buf62 = reinterpret_tensor(buf60, (2, 64, 16, 64), (65536, 1024, 64, 1), 0); del buf60  # reuse
        # Topologically Sorted Source Nodes: [attn_output_13], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_5.run(buf61, buf62, 131072, grid=grid(131072), stream=stream0)
        buf63 = reinterpret_tensor(buf61, (128, 1024), (1024, 1), 0); del buf61  # reuse
        # Topologically Sorted Source Nodes: [attn_output_14], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf62, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg43_1, (1024, 1024), (1, 1024), 0), out=buf63)
        del arg43_1
        buf67 = buf50; del buf50  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_21, hidden_states_22], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf67, buf63, arg44_1, arg45_1, arg46_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg44_1
        del arg45_1
        del arg46_1
        buf68 = reinterpret_tensor(buf45, (128, 4096), (4096, 1), 0); del buf45  # reuse
        # Topologically Sorted Source Nodes: [linear_16], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf67, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg47_1, (1024, 4096), (1, 1024), 0), out=buf68)
        del arg47_1
        buf69 = reinterpret_tensor(buf68, (2, 64, 4096), (262144, 4096, 1), 0); del buf68  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_23], Original ATen: [aten.relu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_relu_7.run(buf69, arg48_1, 524288, grid=grid(524288), stream=stream0)
        del arg48_1
        buf70 = buf63; del buf63  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_25], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf69, (128, 4096), (4096, 1), 0), reinterpret_tensor(arg49_1, (4096, 1024), (1, 4096), 0), out=buf70)
        del arg49_1
        buf74 = buf67; del buf67  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_27, hidden_states_28], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf74, buf70, arg50_1, arg51_1, arg52_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg50_1
        del arg51_1
        del arg52_1
        buf75 = buf70; del buf70  # reuse
        # Topologically Sorted Source Nodes: [linear_18], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf74, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg53_1, (1024, 1024), (1, 1024), 0), out=buf75)
        del arg53_1
        buf76 = reinterpret_tensor(buf62, (128, 1024), (1024, 1), 0); del buf62  # reuse
        # Topologically Sorted Source Nodes: [linear_19], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf74, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg55_1, (1024, 1024), (1, 1024), 0), out=buf76)
        del arg55_1
        buf77 = reinterpret_tensor(buf59, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf59  # reuse
        # Topologically Sorted Source Nodes: [contiguous_11], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf75, arg54_1, buf77, 131072, grid=grid(131072), stream=stream0)
        del arg54_1
        buf78 = reinterpret_tensor(buf75, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf75  # reuse
        # Topologically Sorted Source Nodes: [key_states_6], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf76, arg56_1, buf78, 131072, grid=grid(131072), stream=stream0)
        del arg56_1
        buf79 = reinterpret_tensor(buf76, (32, 64, 64), (4096, 64, 1), 0); del buf76  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_12], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf77, (32, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf78, (32, 64, 64), (4096, 1, 64), 0), out=buf79)
        buf83 = buf79; del buf79  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_15], Original ATen: [aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_4.run(buf83, arg4_1, 2048, 64, grid=grid(2048), stream=stream0)
        buf82 = reinterpret_tensor(buf78, (128, 1024), (1024, 1), 0); del buf78  # reuse
        # Topologically Sorted Source Nodes: [linear_20], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf74, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg57_1, (1024, 1024), (1, 1024), 0), out=buf82)
        del arg57_1
        buf84 = buf77; del buf77  # reuse
        # Topologically Sorted Source Nodes: [value_states_6], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf82, arg58_1, buf84, 131072, grid=grid(131072), stream=stream0)
        del arg58_1
        buf85 = reinterpret_tensor(buf82, (32, 64, 64), (4096, 64, 1), 0); del buf82  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_15, attn_output_15], Original ATen: [aten._softmax, aten.bmm]
        extern_kernels.bmm(buf83, reinterpret_tensor(buf84, (32, 64, 64), (4096, 64, 1), 0), out=buf85)
        buf86 = reinterpret_tensor(buf84, (2, 64, 16, 64), (65536, 1024, 64, 1), 0); del buf84  # reuse
        # Topologically Sorted Source Nodes: [attn_output_18], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_5.run(buf85, buf86, 131072, grid=grid(131072), stream=stream0)
        buf87 = reinterpret_tensor(buf85, (128, 1024), (1024, 1), 0); del buf85  # reuse
        # Topologically Sorted Source Nodes: [attn_output_19], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf86, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg59_1, (1024, 1024), (1, 1024), 0), out=buf87)
        del arg59_1
        buf91 = buf74; del buf74  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_30, hidden_states_31], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf91, buf87, arg60_1, arg61_1, arg62_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg60_1
        del arg61_1
        del arg62_1
        buf92 = reinterpret_tensor(buf69, (128, 4096), (4096, 1), 0); del buf69  # reuse
        # Topologically Sorted Source Nodes: [linear_22], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf91, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg63_1, (1024, 4096), (1, 1024), 0), out=buf92)
        del arg63_1
        buf93 = reinterpret_tensor(buf92, (2, 64, 4096), (262144, 4096, 1), 0); del buf92  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_32], Original ATen: [aten.relu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_relu_7.run(buf93, arg64_1, 524288, grid=grid(524288), stream=stream0)
        del arg64_1
        buf94 = buf87; del buf87  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_34], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf93, (128, 4096), (4096, 1), 0), reinterpret_tensor(arg65_1, (4096, 1024), (1, 4096), 0), out=buf94)
        del arg65_1
        buf98 = buf91; del buf91  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_36, hidden_states_37], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf98, buf94, arg66_1, arg67_1, arg68_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg66_1
        del arg67_1
        del arg68_1
        buf99 = buf94; del buf94  # reuse
        # Topologically Sorted Source Nodes: [linear_24], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf98, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg69_1, (1024, 1024), (1, 1024), 0), out=buf99)
        del arg69_1
        buf100 = reinterpret_tensor(buf86, (128, 1024), (1024, 1), 0); del buf86  # reuse
        # Topologically Sorted Source Nodes: [linear_25], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf98, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg71_1, (1024, 1024), (1, 1024), 0), out=buf100)
        del arg71_1
        buf101 = reinterpret_tensor(buf83, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf83  # reuse
        # Topologically Sorted Source Nodes: [contiguous_14], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf99, arg70_1, buf101, 131072, grid=grid(131072), stream=stream0)
        del arg70_1
        buf102 = reinterpret_tensor(buf99, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf99  # reuse
        # Topologically Sorted Source Nodes: [key_states_8], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf100, arg72_1, buf102, 131072, grid=grid(131072), stream=stream0)
        del arg72_1
        buf103 = reinterpret_tensor(buf100, (32, 64, 64), (4096, 64, 1), 0); del buf100  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_16], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf101, (32, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf102, (32, 64, 64), (4096, 1, 64), 0), out=buf103)
        buf107 = buf103; del buf103  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_19], Original ATen: [aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_4.run(buf107, arg4_1, 2048, 64, grid=grid(2048), stream=stream0)
        buf106 = reinterpret_tensor(buf102, (128, 1024), (1024, 1), 0); del buf102  # reuse
        # Topologically Sorted Source Nodes: [linear_26], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf98, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg73_1, (1024, 1024), (1, 1024), 0), out=buf106)
        del arg73_1
        buf108 = buf101; del buf101  # reuse
        # Topologically Sorted Source Nodes: [value_states_8], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf106, arg74_1, buf108, 131072, grid=grid(131072), stream=stream0)
        del arg74_1
        buf109 = reinterpret_tensor(buf106, (32, 64, 64), (4096, 64, 1), 0); del buf106  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_19, attn_output_20], Original ATen: [aten._softmax, aten.bmm]
        extern_kernels.bmm(buf107, reinterpret_tensor(buf108, (32, 64, 64), (4096, 64, 1), 0), out=buf109)
        buf110 = reinterpret_tensor(buf108, (2, 64, 16, 64), (65536, 1024, 64, 1), 0); del buf108  # reuse
        # Topologically Sorted Source Nodes: [attn_output_23], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_5.run(buf109, buf110, 131072, grid=grid(131072), stream=stream0)
        buf111 = reinterpret_tensor(buf109, (128, 1024), (1024, 1), 0); del buf109  # reuse
        # Topologically Sorted Source Nodes: [attn_output_24], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf110, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg75_1, (1024, 1024), (1, 1024), 0), out=buf111)
        del arg75_1
        buf115 = buf98; del buf98  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_39, hidden_states_40], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf115, buf111, arg76_1, arg77_1, arg78_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg76_1
        del arg77_1
        del arg78_1
        buf116 = reinterpret_tensor(buf93, (128, 4096), (4096, 1), 0); del buf93  # reuse
        # Topologically Sorted Source Nodes: [linear_28], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf115, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg79_1, (1024, 4096), (1, 1024), 0), out=buf116)
        del arg79_1
        buf117 = reinterpret_tensor(buf116, (2, 64, 4096), (262144, 4096, 1), 0); del buf116  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_41], Original ATen: [aten.relu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_relu_7.run(buf117, arg80_1, 524288, grid=grid(524288), stream=stream0)
        del arg80_1
        buf118 = buf111; del buf111  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_43], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf117, (128, 4096), (4096, 1), 0), reinterpret_tensor(arg81_1, (4096, 1024), (1, 4096), 0), out=buf118)
        del arg81_1
        buf122 = buf115; del buf115  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_45, hidden_states_46], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf122, buf118, arg82_1, arg83_1, arg84_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg82_1
        del arg83_1
        del arg84_1
        buf123 = buf118; del buf118  # reuse
        # Topologically Sorted Source Nodes: [linear_30], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf122, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg85_1, (1024, 1024), (1, 1024), 0), out=buf123)
        del arg85_1
        buf124 = reinterpret_tensor(buf110, (128, 1024), (1024, 1), 0); del buf110  # reuse
        # Topologically Sorted Source Nodes: [linear_31], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf122, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg87_1, (1024, 1024), (1, 1024), 0), out=buf124)
        del arg87_1
        buf125 = reinterpret_tensor(buf107, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf107  # reuse
        # Topologically Sorted Source Nodes: [contiguous_17], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf123, arg86_1, buf125, 131072, grid=grid(131072), stream=stream0)
        del arg86_1
        buf126 = reinterpret_tensor(buf123, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf123  # reuse
        # Topologically Sorted Source Nodes: [key_states_10], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf124, arg88_1, buf126, 131072, grid=grid(131072), stream=stream0)
        del arg88_1
        buf127 = reinterpret_tensor(buf124, (32, 64, 64), (4096, 64, 1), 0); del buf124  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_20], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf125, (32, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf126, (32, 64, 64), (4096, 1, 64), 0), out=buf127)
        buf131 = buf127; del buf127  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_23], Original ATen: [aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_4.run(buf131, arg4_1, 2048, 64, grid=grid(2048), stream=stream0)
        buf130 = reinterpret_tensor(buf126, (128, 1024), (1024, 1), 0); del buf126  # reuse
        # Topologically Sorted Source Nodes: [linear_32], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf122, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg89_1, (1024, 1024), (1, 1024), 0), out=buf130)
        del arg89_1
        buf132 = buf125; del buf125  # reuse
        # Topologically Sorted Source Nodes: [value_states_10], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf130, arg90_1, buf132, 131072, grid=grid(131072), stream=stream0)
        del arg90_1
        buf133 = reinterpret_tensor(buf130, (32, 64, 64), (4096, 64, 1), 0); del buf130  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_23, attn_output_25], Original ATen: [aten._softmax, aten.bmm]
        extern_kernels.bmm(buf131, reinterpret_tensor(buf132, (32, 64, 64), (4096, 64, 1), 0), out=buf133)
        buf134 = reinterpret_tensor(buf132, (2, 64, 16, 64), (65536, 1024, 64, 1), 0); del buf132  # reuse
        # Topologically Sorted Source Nodes: [attn_output_28], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_5.run(buf133, buf134, 131072, grid=grid(131072), stream=stream0)
        buf135 = reinterpret_tensor(buf133, (128, 1024), (1024, 1), 0); del buf133  # reuse
        # Topologically Sorted Source Nodes: [attn_output_29], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf134, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg91_1, (1024, 1024), (1, 1024), 0), out=buf135)
        del arg91_1
        buf139 = buf122; del buf122  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_48, hidden_states_49], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf139, buf135, arg92_1, arg93_1, arg94_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg92_1
        del arg93_1
        del arg94_1
        buf140 = reinterpret_tensor(buf117, (128, 4096), (4096, 1), 0); del buf117  # reuse
        # Topologically Sorted Source Nodes: [linear_34], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf139, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg95_1, (1024, 4096), (1, 1024), 0), out=buf140)
        del arg95_1
        buf141 = reinterpret_tensor(buf140, (2, 64, 4096), (262144, 4096, 1), 0); del buf140  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_50], Original ATen: [aten.relu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_relu_7.run(buf141, arg96_1, 524288, grid=grid(524288), stream=stream0)
        del arg96_1
        buf142 = buf135; del buf135  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_52], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf141, (128, 4096), (4096, 1), 0), reinterpret_tensor(arg97_1, (4096, 1024), (1, 4096), 0), out=buf142)
        del arg97_1
        buf146 = buf139; del buf139  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_54, hidden_states_55], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf146, buf142, arg98_1, arg99_1, arg100_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg100_1
        del arg98_1
        del arg99_1
        buf147 = buf142; del buf142  # reuse
        # Topologically Sorted Source Nodes: [linear_36], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf146, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg101_1, (1024, 1024), (1, 1024), 0), out=buf147)
        del arg101_1
        buf148 = reinterpret_tensor(buf134, (128, 1024), (1024, 1), 0); del buf134  # reuse
        # Topologically Sorted Source Nodes: [linear_37], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf146, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg103_1, (1024, 1024), (1, 1024), 0), out=buf148)
        del arg103_1
        buf149 = reinterpret_tensor(buf131, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf131  # reuse
        # Topologically Sorted Source Nodes: [contiguous_20], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf147, arg102_1, buf149, 131072, grid=grid(131072), stream=stream0)
        del arg102_1
        buf150 = reinterpret_tensor(buf147, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf147  # reuse
        # Topologically Sorted Source Nodes: [key_states_12], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf148, arg104_1, buf150, 131072, grid=grid(131072), stream=stream0)
        del arg104_1
        buf151 = reinterpret_tensor(buf148, (32, 64, 64), (4096, 64, 1), 0); del buf148  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_24], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf149, (32, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf150, (32, 64, 64), (4096, 1, 64), 0), out=buf151)
        buf155 = buf151; del buf151  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_27], Original ATen: [aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_4.run(buf155, arg4_1, 2048, 64, grid=grid(2048), stream=stream0)
        buf154 = reinterpret_tensor(buf150, (128, 1024), (1024, 1), 0); del buf150  # reuse
        # Topologically Sorted Source Nodes: [linear_38], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf146, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg105_1, (1024, 1024), (1, 1024), 0), out=buf154)
        del arg105_1
        buf156 = buf149; del buf149  # reuse
        # Topologically Sorted Source Nodes: [value_states_12], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf154, arg106_1, buf156, 131072, grid=grid(131072), stream=stream0)
        del arg106_1
        buf157 = reinterpret_tensor(buf154, (32, 64, 64), (4096, 64, 1), 0); del buf154  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_27, attn_output_30], Original ATen: [aten._softmax, aten.bmm]
        extern_kernels.bmm(buf155, reinterpret_tensor(buf156, (32, 64, 64), (4096, 64, 1), 0), out=buf157)
        buf158 = reinterpret_tensor(buf156, (2, 64, 16, 64), (65536, 1024, 64, 1), 0); del buf156  # reuse
        # Topologically Sorted Source Nodes: [attn_output_33], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_5.run(buf157, buf158, 131072, grid=grid(131072), stream=stream0)
        buf159 = reinterpret_tensor(buf157, (128, 1024), (1024, 1), 0); del buf157  # reuse
        # Topologically Sorted Source Nodes: [attn_output_34], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf158, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg107_1, (1024, 1024), (1, 1024), 0), out=buf159)
        del arg107_1
        buf163 = buf146; del buf146  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_57, hidden_states_58], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf163, buf159, arg108_1, arg109_1, arg110_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg108_1
        del arg109_1
        del arg110_1
        buf164 = reinterpret_tensor(buf141, (128, 4096), (4096, 1), 0); del buf141  # reuse
        # Topologically Sorted Source Nodes: [linear_40], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf163, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg111_1, (1024, 4096), (1, 1024), 0), out=buf164)
        del arg111_1
        buf165 = reinterpret_tensor(buf164, (2, 64, 4096), (262144, 4096, 1), 0); del buf164  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_59], Original ATen: [aten.relu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_relu_7.run(buf165, arg112_1, 524288, grid=grid(524288), stream=stream0)
        del arg112_1
        buf166 = buf159; del buf159  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_61], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf165, (128, 4096), (4096, 1), 0), reinterpret_tensor(arg113_1, (4096, 1024), (1, 4096), 0), out=buf166)
        del arg113_1
        buf170 = buf163; del buf163  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_63, hidden_states_64], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf170, buf166, arg114_1, arg115_1, arg116_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg114_1
        del arg115_1
        del arg116_1
        buf171 = buf166; del buf166  # reuse
        # Topologically Sorted Source Nodes: [linear_42], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf170, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg117_1, (1024, 1024), (1, 1024), 0), out=buf171)
        del arg117_1
        buf172 = reinterpret_tensor(buf158, (128, 1024), (1024, 1), 0); del buf158  # reuse
        # Topologically Sorted Source Nodes: [linear_43], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf170, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg119_1, (1024, 1024), (1, 1024), 0), out=buf172)
        del arg119_1
        buf173 = reinterpret_tensor(buf155, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf155  # reuse
        # Topologically Sorted Source Nodes: [contiguous_23], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf171, arg118_1, buf173, 131072, grid=grid(131072), stream=stream0)
        del arg118_1
        buf174 = reinterpret_tensor(buf171, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf171  # reuse
        # Topologically Sorted Source Nodes: [key_states_14], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf172, arg120_1, buf174, 131072, grid=grid(131072), stream=stream0)
        del arg120_1
        buf175 = reinterpret_tensor(buf172, (32, 64, 64), (4096, 64, 1), 0); del buf172  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_28], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf173, (32, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf174, (32, 64, 64), (4096, 1, 64), 0), out=buf175)
        buf179 = buf175; del buf175  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_31], Original ATen: [aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_4.run(buf179, arg4_1, 2048, 64, grid=grid(2048), stream=stream0)
        buf178 = reinterpret_tensor(buf174, (128, 1024), (1024, 1), 0); del buf174  # reuse
        # Topologically Sorted Source Nodes: [linear_44], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf170, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg121_1, (1024, 1024), (1, 1024), 0), out=buf178)
        del arg121_1
        buf180 = buf173; del buf173  # reuse
        # Topologically Sorted Source Nodes: [value_states_14], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf178, arg122_1, buf180, 131072, grid=grid(131072), stream=stream0)
        del arg122_1
        buf181 = reinterpret_tensor(buf178, (32, 64, 64), (4096, 64, 1), 0); del buf178  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_31, attn_output_35], Original ATen: [aten._softmax, aten.bmm]
        extern_kernels.bmm(buf179, reinterpret_tensor(buf180, (32, 64, 64), (4096, 64, 1), 0), out=buf181)
        buf182 = reinterpret_tensor(buf180, (2, 64, 16, 64), (65536, 1024, 64, 1), 0); del buf180  # reuse
        # Topologically Sorted Source Nodes: [attn_output_38], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_5.run(buf181, buf182, 131072, grid=grid(131072), stream=stream0)
        buf183 = reinterpret_tensor(buf181, (128, 1024), (1024, 1), 0); del buf181  # reuse
        # Topologically Sorted Source Nodes: [attn_output_39], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf182, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg123_1, (1024, 1024), (1, 1024), 0), out=buf183)
        del arg123_1
        buf187 = buf170; del buf170  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_66, hidden_states_67], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf187, buf183, arg124_1, arg125_1, arg126_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg124_1
        del arg125_1
        del arg126_1
        buf188 = reinterpret_tensor(buf165, (128, 4096), (4096, 1), 0); del buf165  # reuse
        # Topologically Sorted Source Nodes: [linear_46], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf187, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg127_1, (1024, 4096), (1, 1024), 0), out=buf188)
        del arg127_1
        buf189 = reinterpret_tensor(buf188, (2, 64, 4096), (262144, 4096, 1), 0); del buf188  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_68], Original ATen: [aten.relu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_relu_7.run(buf189, arg128_1, 524288, grid=grid(524288), stream=stream0)
        del arg128_1
        buf190 = buf183; del buf183  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_70], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf189, (128, 4096), (4096, 1), 0), reinterpret_tensor(arg129_1, (4096, 1024), (1, 4096), 0), out=buf190)
        del arg129_1
        buf194 = buf187; del buf187  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_72, hidden_states_73], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf194, buf190, arg130_1, arg131_1, arg132_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg130_1
        del arg131_1
        del arg132_1
        buf195 = buf190; del buf190  # reuse
        # Topologically Sorted Source Nodes: [linear_48], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf194, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg133_1, (1024, 1024), (1, 1024), 0), out=buf195)
        del arg133_1
        buf196 = reinterpret_tensor(buf182, (128, 1024), (1024, 1), 0); del buf182  # reuse
        # Topologically Sorted Source Nodes: [linear_49], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf194, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg135_1, (1024, 1024), (1, 1024), 0), out=buf196)
        del arg135_1
        buf197 = reinterpret_tensor(buf179, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf179  # reuse
        # Topologically Sorted Source Nodes: [contiguous_26], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf195, arg134_1, buf197, 131072, grid=grid(131072), stream=stream0)
        del arg134_1
        buf198 = reinterpret_tensor(buf195, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf195  # reuse
        # Topologically Sorted Source Nodes: [key_states_16], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf196, arg136_1, buf198, 131072, grid=grid(131072), stream=stream0)
        del arg136_1
        buf199 = reinterpret_tensor(buf196, (32, 64, 64), (4096, 64, 1), 0); del buf196  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_32], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf197, (32, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf198, (32, 64, 64), (4096, 1, 64), 0), out=buf199)
        buf203 = buf199; del buf199  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_35], Original ATen: [aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_4.run(buf203, arg4_1, 2048, 64, grid=grid(2048), stream=stream0)
        buf202 = reinterpret_tensor(buf198, (128, 1024), (1024, 1), 0); del buf198  # reuse
        # Topologically Sorted Source Nodes: [linear_50], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf194, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg137_1, (1024, 1024), (1, 1024), 0), out=buf202)
        del arg137_1
        buf204 = buf197; del buf197  # reuse
        # Topologically Sorted Source Nodes: [value_states_16], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf202, arg138_1, buf204, 131072, grid=grid(131072), stream=stream0)
        del arg138_1
        buf205 = reinterpret_tensor(buf202, (32, 64, 64), (4096, 64, 1), 0); del buf202  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_35, attn_output_40], Original ATen: [aten._softmax, aten.bmm]
        extern_kernels.bmm(buf203, reinterpret_tensor(buf204, (32, 64, 64), (4096, 64, 1), 0), out=buf205)
        buf206 = reinterpret_tensor(buf204, (2, 64, 16, 64), (65536, 1024, 64, 1), 0); del buf204  # reuse
        # Topologically Sorted Source Nodes: [attn_output_43], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_5.run(buf205, buf206, 131072, grid=grid(131072), stream=stream0)
        buf207 = reinterpret_tensor(buf205, (128, 1024), (1024, 1), 0); del buf205  # reuse
        # Topologically Sorted Source Nodes: [attn_output_44], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf206, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg139_1, (1024, 1024), (1, 1024), 0), out=buf207)
        del arg139_1
        buf211 = buf194; del buf194  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_75, hidden_states_76], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf211, buf207, arg140_1, arg141_1, arg142_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg140_1
        del arg141_1
        del arg142_1
        buf212 = reinterpret_tensor(buf189, (128, 4096), (4096, 1), 0); del buf189  # reuse
        # Topologically Sorted Source Nodes: [linear_52], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf211, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg143_1, (1024, 4096), (1, 1024), 0), out=buf212)
        del arg143_1
        buf213 = reinterpret_tensor(buf212, (2, 64, 4096), (262144, 4096, 1), 0); del buf212  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_77], Original ATen: [aten.relu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_relu_7.run(buf213, arg144_1, 524288, grid=grid(524288), stream=stream0)
        del arg144_1
        buf214 = buf207; del buf207  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_79], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf213, (128, 4096), (4096, 1), 0), reinterpret_tensor(arg145_1, (4096, 1024), (1, 4096), 0), out=buf214)
        del arg145_1
        buf218 = buf211; del buf211  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_81, hidden_states_82], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf218, buf214, arg146_1, arg147_1, arg148_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg146_1
        del arg147_1
        del arg148_1
        buf219 = buf214; del buf214  # reuse
        # Topologically Sorted Source Nodes: [linear_54], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf218, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg149_1, (1024, 1024), (1, 1024), 0), out=buf219)
        del arg149_1
        buf220 = reinterpret_tensor(buf206, (128, 1024), (1024, 1), 0); del buf206  # reuse
        # Topologically Sorted Source Nodes: [linear_55], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf218, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg151_1, (1024, 1024), (1, 1024), 0), out=buf220)
        del arg151_1
        buf221 = reinterpret_tensor(buf203, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf203  # reuse
        # Topologically Sorted Source Nodes: [contiguous_29], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf219, arg150_1, buf221, 131072, grid=grid(131072), stream=stream0)
        del arg150_1
        buf222 = reinterpret_tensor(buf219, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf219  # reuse
        # Topologically Sorted Source Nodes: [key_states_18], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf220, arg152_1, buf222, 131072, grid=grid(131072), stream=stream0)
        del arg152_1
        buf223 = reinterpret_tensor(buf220, (32, 64, 64), (4096, 64, 1), 0); del buf220  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_36], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf221, (32, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf222, (32, 64, 64), (4096, 1, 64), 0), out=buf223)
        buf227 = buf223; del buf223  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_39], Original ATen: [aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_4.run(buf227, arg4_1, 2048, 64, grid=grid(2048), stream=stream0)
        buf226 = reinterpret_tensor(buf222, (128, 1024), (1024, 1), 0); del buf222  # reuse
        # Topologically Sorted Source Nodes: [linear_56], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf218, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg153_1, (1024, 1024), (1, 1024), 0), out=buf226)
        del arg153_1
        buf228 = buf221; del buf221  # reuse
        # Topologically Sorted Source Nodes: [value_states_18], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf226, arg154_1, buf228, 131072, grid=grid(131072), stream=stream0)
        del arg154_1
        buf229 = reinterpret_tensor(buf226, (32, 64, 64), (4096, 64, 1), 0); del buf226  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_39, attn_output_45], Original ATen: [aten._softmax, aten.bmm]
        extern_kernels.bmm(buf227, reinterpret_tensor(buf228, (32, 64, 64), (4096, 64, 1), 0), out=buf229)
        buf230 = reinterpret_tensor(buf228, (2, 64, 16, 64), (65536, 1024, 64, 1), 0); del buf228  # reuse
        # Topologically Sorted Source Nodes: [attn_output_48], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_5.run(buf229, buf230, 131072, grid=grid(131072), stream=stream0)
        buf231 = reinterpret_tensor(buf229, (128, 1024), (1024, 1), 0); del buf229  # reuse
        # Topologically Sorted Source Nodes: [attn_output_49], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf230, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg155_1, (1024, 1024), (1, 1024), 0), out=buf231)
        del arg155_1
        buf235 = buf218; del buf218  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_84, hidden_states_85], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf235, buf231, arg156_1, arg157_1, arg158_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg156_1
        del arg157_1
        del arg158_1
        buf236 = reinterpret_tensor(buf213, (128, 4096), (4096, 1), 0); del buf213  # reuse
        # Topologically Sorted Source Nodes: [linear_58], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf235, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg159_1, (1024, 4096), (1, 1024), 0), out=buf236)
        del arg159_1
        buf237 = reinterpret_tensor(buf236, (2, 64, 4096), (262144, 4096, 1), 0); del buf236  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_86], Original ATen: [aten.relu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_relu_7.run(buf237, arg160_1, 524288, grid=grid(524288), stream=stream0)
        del arg160_1
        buf238 = buf231; del buf231  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_88], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf237, (128, 4096), (4096, 1), 0), reinterpret_tensor(arg161_1, (4096, 1024), (1, 4096), 0), out=buf238)
        del arg161_1
        buf242 = buf235; del buf235  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_90, hidden_states_91], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf242, buf238, arg162_1, arg163_1, arg164_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg162_1
        del arg163_1
        del arg164_1
        buf243 = buf238; del buf238  # reuse
        # Topologically Sorted Source Nodes: [linear_60], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf242, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg165_1, (1024, 1024), (1, 1024), 0), out=buf243)
        del arg165_1
        buf244 = reinterpret_tensor(buf230, (128, 1024), (1024, 1), 0); del buf230  # reuse
        # Topologically Sorted Source Nodes: [linear_61], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf242, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg167_1, (1024, 1024), (1, 1024), 0), out=buf244)
        del arg167_1
        buf245 = reinterpret_tensor(buf227, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf227  # reuse
        # Topologically Sorted Source Nodes: [contiguous_32], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf243, arg166_1, buf245, 131072, grid=grid(131072), stream=stream0)
        del arg166_1
        buf246 = reinterpret_tensor(buf243, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf243  # reuse
        # Topologically Sorted Source Nodes: [key_states_20], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf244, arg168_1, buf246, 131072, grid=grid(131072), stream=stream0)
        del arg168_1
        buf247 = reinterpret_tensor(buf244, (32, 64, 64), (4096, 64, 1), 0); del buf244  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_40], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf245, (32, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf246, (32, 64, 64), (4096, 1, 64), 0), out=buf247)
        buf251 = buf247; del buf247  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_43], Original ATen: [aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_4.run(buf251, arg4_1, 2048, 64, grid=grid(2048), stream=stream0)
        buf250 = reinterpret_tensor(buf246, (128, 1024), (1024, 1), 0); del buf246  # reuse
        # Topologically Sorted Source Nodes: [linear_62], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf242, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg169_1, (1024, 1024), (1, 1024), 0), out=buf250)
        del arg169_1
        buf252 = buf245; del buf245  # reuse
        # Topologically Sorted Source Nodes: [value_states_20], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf250, arg170_1, buf252, 131072, grid=grid(131072), stream=stream0)
        del arg170_1
        buf253 = reinterpret_tensor(buf250, (32, 64, 64), (4096, 64, 1), 0); del buf250  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_43, attn_output_50], Original ATen: [aten._softmax, aten.bmm]
        extern_kernels.bmm(buf251, reinterpret_tensor(buf252, (32, 64, 64), (4096, 64, 1), 0), out=buf253)
        buf254 = reinterpret_tensor(buf252, (2, 64, 16, 64), (65536, 1024, 64, 1), 0); del buf252  # reuse
        # Topologically Sorted Source Nodes: [attn_output_53], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_5.run(buf253, buf254, 131072, grid=grid(131072), stream=stream0)
        buf255 = reinterpret_tensor(buf253, (128, 1024), (1024, 1), 0); del buf253  # reuse
        # Topologically Sorted Source Nodes: [attn_output_54], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf254, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg171_1, (1024, 1024), (1, 1024), 0), out=buf255)
        del arg171_1
        buf259 = buf242; del buf242  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_93, hidden_states_94], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf259, buf255, arg172_1, arg173_1, arg174_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg172_1
        del arg173_1
        del arg174_1
        buf260 = reinterpret_tensor(buf237, (128, 4096), (4096, 1), 0); del buf237  # reuse
        # Topologically Sorted Source Nodes: [linear_64], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf259, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg175_1, (1024, 4096), (1, 1024), 0), out=buf260)
        del arg175_1
        buf261 = reinterpret_tensor(buf260, (2, 64, 4096), (262144, 4096, 1), 0); del buf260  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_95], Original ATen: [aten.relu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_relu_7.run(buf261, arg176_1, 524288, grid=grid(524288), stream=stream0)
        del arg176_1
        buf262 = buf255; del buf255  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_97], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf261, (128, 4096), (4096, 1), 0), reinterpret_tensor(arg177_1, (4096, 1024), (1, 4096), 0), out=buf262)
        del arg177_1
        buf266 = buf259; del buf259  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_99, hidden_states_100], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf266, buf262, arg178_1, arg179_1, arg180_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg178_1
        del arg179_1
        del arg180_1
        buf267 = buf262; del buf262  # reuse
        # Topologically Sorted Source Nodes: [linear_66], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf266, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg181_1, (1024, 1024), (1, 1024), 0), out=buf267)
        del arg181_1
        buf268 = reinterpret_tensor(buf254, (128, 1024), (1024, 1), 0); del buf254  # reuse
        # Topologically Sorted Source Nodes: [linear_67], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf266, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg183_1, (1024, 1024), (1, 1024), 0), out=buf268)
        del arg183_1
        buf269 = reinterpret_tensor(buf251, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf251  # reuse
        # Topologically Sorted Source Nodes: [contiguous_35], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_2.run(buf267, arg182_1, buf269, 131072, grid=grid(131072), stream=stream0)
        del arg182_1
        buf270 = reinterpret_tensor(buf267, (2, 16, 64, 64), (65536, 4096, 64, 1), 0); del buf267  # reuse
        # Topologically Sorted Source Nodes: [key_states_22], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf268, arg184_1, buf270, 131072, grid=grid(131072), stream=stream0)
        del arg184_1
        buf271 = reinterpret_tensor(buf268, (32, 64, 64), (4096, 64, 1), 0); del buf268  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_44], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf269, (32, 64, 64), (4096, 64, 1), 0), reinterpret_tensor(buf270, (32, 64, 64), (4096, 1, 64), 0), out=buf271)
        buf275 = buf271; del buf271  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_47], Original ATen: [aten._softmax]
        stream0 = get_raw_stream(0)
        triton_per_fused__softmax_4.run(buf275, arg4_1, 2048, 64, grid=grid(2048), stream=stream0)
        del arg4_1
        buf274 = reinterpret_tensor(buf270, (128, 1024), (1024, 1), 0); del buf270  # reuse
        # Topologically Sorted Source Nodes: [linear_68], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf266, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg185_1, (1024, 1024), (1, 1024), 0), out=buf274)
        del arg185_1
        buf276 = buf269; del buf269  # reuse
        # Topologically Sorted Source Nodes: [value_states_22], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_3.run(buf274, arg186_1, buf276, 131072, grid=grid(131072), stream=stream0)
        del arg186_1
        buf277 = reinterpret_tensor(buf274, (32, 64, 64), (4096, 64, 1), 0); del buf274  # reuse
        # Topologically Sorted Source Nodes: [attn_weights_47, attn_output_55], Original ATen: [aten._softmax, aten.bmm]
        extern_kernels.bmm(buf275, reinterpret_tensor(buf276, (32, 64, 64), (4096, 64, 1), 0), out=buf277)
        del buf275
        buf278 = reinterpret_tensor(buf276, (2, 64, 16, 64), (65536, 1024, 64, 1), 0); del buf276  # reuse
        # Topologically Sorted Source Nodes: [attn_output_58], Original ATen: [aten.clone]
        stream0 = get_raw_stream(0)
        triton_poi_fused_clone_5.run(buf277, buf278, 131072, grid=grid(131072), stream=stream0)
        buf279 = reinterpret_tensor(buf277, (128, 1024), (1024, 1), 0); del buf277  # reuse
        # Topologically Sorted Source Nodes: [attn_output_59], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf278, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg187_1, (1024, 1024), (1, 1024), 0), out=buf279)
        del arg187_1
        del buf278
        buf283 = buf266; del buf266  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_102, hidden_states_103], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf283, buf279, arg188_1, arg189_1, arg190_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg188_1
        del arg189_1
        del arg190_1
        buf284 = reinterpret_tensor(buf261, (128, 4096), (4096, 1), 0); del buf261  # reuse
        # Topologically Sorted Source Nodes: [linear_70], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf283, (128, 1024), (1024, 1), 0), reinterpret_tensor(arg191_1, (1024, 4096), (1, 1024), 0), out=buf284)
        del arg191_1
        buf285 = reinterpret_tensor(buf284, (2, 64, 4096), (262144, 4096, 1), 0); del buf284  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_104], Original ATen: [aten.relu]
        stream0 = get_raw_stream(0)
        triton_poi_fused_relu_7.run(buf285, arg192_1, 524288, grid=grid(524288), stream=stream0)
        del arg192_1
        buf286 = buf279; del buf279  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_106], Original ATen: [aten.addmm]
        extern_kernels.mm(reinterpret_tensor(buf285, (128, 4096), (4096, 1), 0), reinterpret_tensor(arg193_1, (4096, 1024), (1, 4096), 0), out=buf286)
        del arg193_1
        del buf285
        buf290 = buf283; del buf283  # reuse
        # Topologically Sorted Source Nodes: [hidden_states_108, hidden_states_109], Original ATen: [aten.add, aten.native_layer_norm]
        stream0 = get_raw_stream(0)
        triton_per_fused_add_native_layer_norm_6.run(buf290, buf286, arg194_1, arg195_1, arg196_1, 128, 1024, grid=grid(128), stream=stream0)
        del arg194_1
        del arg195_1
        del arg196_1
        del buf286
    return (buf290, buf0, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((2, 64), (64, 1), device='cuda:0', dtype=torch.int64)
    arg1_1 = rand_strided((50265, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg2_1 = rand_strided((1026, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    arg3_1 = rand_strided((1, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg4_1 = rand_strided((2, 64), (64, 1), device='cuda:0', dtype=torch.int64)
    arg5_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg6_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg7_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg8_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg9_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg10_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg11_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg12_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg13_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg14_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg15_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg16_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg17_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg18_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg19_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg20_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg21_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg22_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg23_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg24_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg25_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg26_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg27_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg28_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg29_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg30_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg31_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg32_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg33_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg34_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg35_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg36_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg37_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg38_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg39_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg40_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg41_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg42_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg43_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg44_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg45_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg46_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg47_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg48_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg49_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg50_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg51_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg52_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg53_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg54_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg55_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg56_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg57_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg58_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg59_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg60_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg61_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg62_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg63_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg64_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg65_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg66_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg67_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg68_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg69_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg70_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg71_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg72_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg73_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg74_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg75_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg76_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg77_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg78_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg79_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg80_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg81_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg82_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg83_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg84_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg85_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg86_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg87_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg88_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg89_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg90_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg91_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg92_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg93_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg94_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg95_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg96_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg97_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg98_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg99_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg100_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg101_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg102_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg103_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg104_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg105_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg106_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg107_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg108_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg109_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg110_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg111_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg112_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg113_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg114_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg115_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg116_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg117_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg118_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg119_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg120_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg121_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg122_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg123_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg124_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg125_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg126_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg127_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg128_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg129_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg130_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg131_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg132_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg133_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg134_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg135_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg136_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg137_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg138_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg139_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg140_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg141_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg142_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg143_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg144_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg145_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg146_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg147_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg148_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg149_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg150_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg151_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg152_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg153_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg154_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg155_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg156_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg157_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg158_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg159_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg160_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg161_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg162_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg163_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg164_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg165_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg166_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg167_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg168_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg169_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg170_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg171_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg172_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg173_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg174_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg175_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg176_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg177_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg178_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg179_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg180_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg181_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg182_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg183_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg184_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg185_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg186_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg187_1 = rand_strided((1024, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg188_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg189_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg190_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg191_1 = rand_strided((4096, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    arg192_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg193_1 = rand_strided((1024, 4096), (4096, 1), device='cuda:0', dtype=torch.float32)
    arg194_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg195_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    arg196_1 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    fn = lambda: call([arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1, arg7_1, arg8_1, arg9_1, arg10_1, arg11_1, arg12_1, arg13_1, arg14_1, arg15_1, arg16_1, arg17_1, arg18_1, arg19_1, arg20_1, arg21_1, arg22_1, arg23_1, arg24_1, arg25_1, arg26_1, arg27_1, arg28_1, arg29_1, arg30_1, arg31_1, arg32_1, arg33_1, arg34_1, arg35_1, arg36_1, arg37_1, arg38_1, arg39_1, arg40_1, arg41_1, arg42_1, arg43_1, arg44_1, arg45_1, arg46_1, arg47_1, arg48_1, arg49_1, arg50_1, arg51_1, arg52_1, arg53_1, arg54_1, arg55_1, arg56_1, arg57_1, arg58_1, arg59_1, arg60_1, arg61_1, arg62_1, arg63_1, arg64_1, arg65_1, arg66_1, arg67_1, arg68_1, arg69_1, arg70_1, arg71_1, arg72_1, arg73_1, arg74_1, arg75_1, arg76_1, arg77_1, arg78_1, arg79_1, arg80_1, arg81_1, arg82_1, arg83_1, arg84_1, arg85_1, arg86_1, arg87_1, arg88_1, arg89_1, arg90_1, arg91_1, arg92_1, arg93_1, arg94_1, arg95_1, arg96_1, arg97_1, arg98_1, arg99_1, arg100_1, arg101_1, arg102_1, arg103_1, arg104_1, arg105_1, arg106_1, arg107_1, arg108_1, arg109_1, arg110_1, arg111_1, arg112_1, arg113_1, arg114_1, arg115_1, arg116_1, arg117_1, arg118_1, arg119_1, arg120_1, arg121_1, arg122_1, arg123_1, arg124_1, arg125_1, arg126_1, arg127_1, arg128_1, arg129_1, arg130_1, arg131_1, arg132_1, arg133_1, arg134_1, arg135_1, arg136_1, arg137_1, arg138_1, arg139_1, arg140_1, arg141_1, arg142_1, arg143_1, arg144_1, arg145_1, arg146_1, arg147_1, arg148_1, arg149_1, arg150_1, arg151_1, arg152_1, arg153_1, arg154_1, arg155_1, arg156_1, arg157_1, arg158_1, arg159_1, arg160_1, arg161_1, arg162_1, arg163_1, arg164_1, arg165_1, arg166_1, arg167_1, arg168_1, arg169_1, arg170_1, arg171_1, arg172_1, arg173_1, arg174_1, arg175_1, arg176_1, arg177_1, arg178_1, arg179_1, arg180_1, arg181_1, arg182_1, arg183_1, arg184_1, arg185_1, arg186_1, arg187_1, arg188_1, arg189_1, arg190_1, arg191_1, arg192_1, arg193_1, arg194_1, arg195_1, arg196_1])
    return print_performance(fn, times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('None', benchmark_compiled_module)
